quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"ator=wrap_pdf=0.0376648, denominator=wrap_pdf_Int[pTV]=10358.6; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=0.0376648, denominator=wrap_pdf_Int[pTV]=10358.6; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.213672 cHl3=1.97898 cHq3=0.00773174; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.0861399 cHl3=-9.50561 cHq3=0.0801661; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.186765 cHl3=8.8591 cHq3=-0.971282; RooAbsPdf:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:9889,error,error,9889,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['error'],['error']
Availability,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 correspon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:7048,error,error,7048,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,2,['error'],['error']
Availability,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8439,error,error,8439,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,4,['error'],['error']
Availability,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7685,error,error,7685,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,4,['error'],['error']
Availability,"atrix from fit. ; The matrix is a symmetric matrix with a size N equal to the total number of parameters considered in the fit including the fixed ones The matrix row and columns corresponding to the fixed parameters will contain only zero's ; Definition at line 77 of file TFitResult.cxx. ◆ GetCovarianceMatrix(). TMatrixDSym TFitResult::GetCovarianceMatrix ; (; ); const. Return the covariance matrix from fit. ; The matrix is a symmetric matrix with a size N equal to the total number of parameters considered in the fit including the fixed ones The matrix row and columns corresponding to the fixed parameters will contain only zero's ; Definition at line 59 of file TFitResult.cxx. ◆ IsA(). TClass * TFitResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 79 of file TFitResult.h. ◆ Print(). void TFitResult::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print result of the fit, by default chi2, parameter values and errors. ; if option ""V"" is given print also error matrix and correlation ; Reimplemented from TObject.; Definition at line 44 of file TFitResult.cxx. ◆ Scan(). bool TFitResult::Scan ; (; unsigned int ; ipar, . TGraph * ; gr, . double ; xmin = 0, . double ; xmax = 0 . ). Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ; Definition at line 93 of file TFitResult.cxx. ◆ Streamer(). void TFitResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFitResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TFitResult.h. Libraries for TFitResult:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TFitResult.h; hist/hist/src/TFitResult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResult.html:25180,error,errors,25180,doc/master/classTFitResult.html,https://root.cern,https://root.cern/doc/master/classTFitResult.html,1,['error'],['errors']
Availability,"atrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(Double32_t& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(Double32_t& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const Double32_t* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:11356,error,error,11356,root/html534/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,8,['error'],['error']
Availability,"atrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHistDistribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1). TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1). TH1D* GetD() const; Returns d vector. TH1D* GetSV() const; Returns singular values vector. void H2V(const TH1D* histo, TVectorD& vec); Fill 1D histogram into vector. void H2Verr(const TH1D* histo, TVectorD& vec); Fill 1D histogram errors into vector. void V2H(const TVectorD& vec, TH1D& histo); Fill vector into 1D histogram. void H2M(const TH2D* histo, TMatrixD& mat); Fill 2D histogram into matrix. TVectorD VecDiv(const TVectorD& vec1, const TVectorD& vec2, Int_t zero = 0); Divide entries of two vectors. TMatrixD MatDivVec(const TMatrixD& mat, const TVectorD& vec, Int_t zero = 0); Divide matrix entries by vector. TVectorD CompProd(const TVectorD& vec1, const TVectorD& vec2); Multiply entries of two vectors. Double_t GetCurvature(const TVectorD& vec, const TMatrixD& curv); Compute curvature of vector. void FillCurvatureMatrix(TMatrixD& tCurv, TMatrixD& tC) const. void InitHistos(). void RegularisedSymMatInvert(TMatrixDSym& mat, Double_t eps = 1e-3); naive regularised inversion cuts off small elements. Double_t ComputeChiSquared(const TH1D& truspec, const TH1D& unfspec, const TH2D& covmat, Double_t regpar = 0.01); helper routine to compute chi-squared between distributions. void SetNormalize(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSVDUnfold.html:7654,error,errors,7654,root/html528/TSVDUnfold.html,https://root.cern,https://root.cern/root/html528/TSVDUnfold.html,1,['error'],['errors']
Availability,"atrixD &Dir);  ; void SetDirWeights (std::vector< Double_t > &Origin, TMatrixD &Dir, Double_t alpha);  ; void SetGammaDelta (TMatrixD &Gamma, TMatrixD &Delta, std::vector< Double_t > &Buffer);  ; void Shuffle (Int_t *index, Int_t n);  Input: ;  ; void SimulateEvent (const Event *ev);  ; void SteepestDir (TMatrixD &Dir);  ; void Train (Int_t nEpochs);  ; void TrainOneEpoch ();  train network over a single epoch/cycle of events ;  ; void TrainOneEvent (Int_t ievt);  train network over a single event this uses the new event model ;  ; void TrainOneEventFast (Int_t ievt, Float_t *&branchVar, Int_t &type);  fast per-event training ;  ; void UpdateNetwork (const std::vector< Float_t > &desired, Double_t eventWeight=1.0);  update the network based on how closely the output matched the desired output ;  ; void UpdateNetwork (Double_t desired, Double_t eventWeight=1.0);  update the network based on how closely the output matched the desired output ;  ; void UpdatePriors ();  zjh ;  ; void UpdateRegulators ();  zjh ;  ; void UpdateSynapses ();  update synapse error fields and adjust the weights (if in sequential mode) ;  . Private Attributes; Int_t fBatchSize;  batch size, only matters if in batch learning mode ;  ; EBPTrainingMode fBPMode;  backprop learning mode (sequential or batch) ;  ; TString fBpModeS;  backprop learning mode option string (sequential or batch) ;  ; bool fCalculateErrors;  compute inverse hessian matrix at the end of the training ;  ; Double_t fDecayRate;  decay rate for above learning rate ;  ; std::vector< std::pair< Float_t, Float_t > > * fDeviationsFromTargets;  deviation from the targets, event weight ;  ; Bool_t fEpochMon;  create and fill epoch-wise monitoring histograms (makes outputfile big!) ;  ; Int_t fGA_nsteps;  GA settings: number of steps. ;  ; Int_t fGA_preCalc;  GA settings: number of pre-calc steps. ;  ; Double_t fGA_SC_factor;  GA settings: SC_factor. ;  ; Int_t fGA_SC_rate;  GA settings: SC_rate. ;  ; Int_t fGA_SC_steps;  GA settings",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:33738,error,error,33738,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['error'],['error']
Availability,"atrixTSym<float>(Int_t row_lwb, Int_t row_upb); virtual~THilbertMatrixTSym<float>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTMatrixTSymLazy<float>::GetRowLwb() const; Int_tTMatrixTSymLazy<float>::GetRowUpb() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THilbertMatrixTSym_float_.html:1745,error,error,1745,root/html528/THilbertMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html528/THilbertMatrixTSym_float_.html,4,['error'],['error']
Availability,"atrix_t &C, const Matrix_t &A, const Matrix_t &B);  Standard multiplication of two matrices A and B with the result being written into C. ;  ; static void TransposeMultiply (Matrix_t &output, const Matrix_t &input, const Matrix_t &Weights, Scalar_t alpha=1.0, Scalar_t beta=0.);  Matrix multiplication of two matrices A and B^T (transposed) with the result being written into C. ;  ; static void Hadamard (Tensor_t &A, const Tensor_t &B);  In-place Hadamard (element-wise) product of matrices A and B with the result being written into A. ;  ; static void Hadamard (Matrix_t &A, const Matrix_t &B);  ; static void SumColumns (Matrix_t &B, const Matrix_t &A, Scalar_t alpha=1.0, Scalar_t beta=0.);  Sum columns of (m x n) matrix A and write the results into the first m elements in A. ;  ; static Scalar_t Sum (const Matrix_t &A);  Compute the sum of all elements in A. ;  ; static bool AlmostEquals (const Matrix_t &A, const Matrix_t &B, double epsilon=0.1);  Check two matrices for equality, taking floating point arithmetic errors into account. ;  ; static void ConstAdd (Matrix_t &A, Scalar_t beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (Matrix_t &A, Scalar_t beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ReciprocalElementWise (Matrix_t &A);  Reciprocal each element of the matrix A and write the result into A. ;  ; static void SquareElementWise (Matrix_t &A);  Square each element of the matrix A and write the result into A. ;  ; static void SqrtElementWise (Matrix_t &A);  Square root each element of the matrix A and write the result into A. ;  ; static void AdamUpdate (Matrix_t &A, const Matrix_t &M, const Matrix_t &V, Scalar_t alpha, Scalar_t eps);  Adam updates. ;  ; static void AdamUpdateFirstMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void AdamUpdateSecondMom (Matrix_t &A, const Matrix_t &B, Scalar_t beta);  ; static void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html:22691,error,errors,22691,doc/master/classTMVA_1_1DNN_1_1TCpu.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html,2,['error'],['errors']
Availability,"ats::ProposalFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ProposalFunction. class RooStats::ProposalFunction: public TObject. ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. ; Given a current point in the parameter space it proposes a new point. ; Proposal functions may or may not be symmetric, in the sense that the probability to propose X1 given we are at X2 ; need not be the same as the probability to propose X2 given that we are at X1. In this case, the IsSymmetric method; should return false, and the Metropolis algorithm will need to take into account the proposal density to maintain detailed balance. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ProposalFunction(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual boolCheckParameters(RooArgSet& params); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProposalFunction.html:1015,avail,available,1015,root/html526/RooStats__ProposalFunction.html,https://root.cern,https://root.cern/root/html526/RooStats__ProposalFunction.html,2,['avail'],['available']
Availability,"attempts to; expand. ~TBuffer(); Delete an I/O buffer object. void AutoExpand(Int_t size_needed); Automatically calculate a new size and expand the buffer to fit at least size_needed.; The goals is to minimize the number of memory allocation and the memory allocation; which avoiding too much memory wastage.; If the size_needed is larger than the current size, the policy; is to expand to double the current size or the size_needed which ever is largest. void SetBuffer(void* buf, UInt_t bufsiz = 0, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; new buffer is expected to have the same size as the previous buffer.; The current buffer position is reset to the start of the buffer.; If the TBuffer owned the previous buffer, it will be deleted prior; to accepting the new buffer. By default the new buffer will be; adopted unless adopt is false.; If the new buffer is _not_ adopted and no memory allocation routine; is provided, a Fatal error will be issued if the Buffer attempts to; expand. void Expand(Int_t newsize, Bool_t copy = kTRUE); Expand (or shrink) the I/O buffer to newsize bytes.; If copy is true (the default), the existing content of the; buffer is preserved, otherwise the buffer is returned zero-ed out. In order to avoid losing data, if the current length is greater than; the requested size, we only shrink down to the current length. TObject * GetParent() const; Return pointer to parent of this buffer. void SetParent(TObject* parent); Set parent owning this buffer. ReAllocCharFun_t GetReAllocFunc() const; Return the reallocation method currently used. void SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); Set which memory reallocation method to use. If reallocafunc is null,; reset it to the defaul value (TStorage::ReAlloc). void SetReadMode(); Set buffer in read mode. void SetWriteMode(); Set buffer in write mode. TClass * GetClass(const type_info& typeinfo); Forward to TROOT::GetClass()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBuffer.html:19615,error,error,19615,root/html602/TBuffer.html,https://root.cern,https://root.cern/root/html602/TBuffer.html,2,['error'],['error']
Availability,"atternX(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindNextBoundary(Double_t* point, Double_t* dir, Int_t& indnext); virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPatternX.html:2548,error,error,2548,root/html528/TGeoPatternX.html,https://root.cern,https://root.cern/root/html528/TGeoPatternX.html,2,['error'],['error']
Availability,"atternY(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindNextBoundary(Double_t* point, Double_t* dir, Int_t& indnext); virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPatternY.html:2548,error,error,2548,root/html528/TGeoPatternY.html,https://root.cern,https://root.cern/root/html528/TGeoPatternY.html,2,['error'],['error']
Availability,"atternZ(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindNextBoundary(Double_t* point, Double_t* dir, Int_t& indnext); virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPatternZ.html:2548,error,error,2548,root/html528/TGeoPatternZ.html,https://root.cern,https://root.cern/root/html528/TGeoPatternZ.html,2,['error'],['error']
Availability,"attern[i] == '$') {; 3939 return (str[j] == '\0') ? j : -1;; 3940 } else if (pattern[i] == '*') {; 3941 i++;; 3942 if (pattern[i] == '*') {; 3943 i++;; 3944 len = (ptrdiff_t)strlen(str + j);; 3945 } else {; 3946 len = (ptrdiff_t)strcspn(str + j, ""/"");; 3947 }; 3948 if (i == (ptrdiff_t)pattern_len) {; 3949 return j + len;; 3950 }; 3951 do {; 3952 res = match_prefix(pattern + i,; 3953 (pattern_len - (size_t)i),; 3954 str + j + len);; 3955 } while (res == -1 && len-- > 0);; 3956 return (res == -1) ? -1 : j + res + len;; 3957 } else if (lowercase(&pattern[i]) != lowercase(&str[j])) {; 3958 return -1;; 3959 }; 3960 }; 3961 return (ptrdiff_t)j;; 3962}; 3963 ; 3964 ; 3965static ptrdiff_t; 3966match_prefix_strlen(const char *pattern, const char *str); 3967{; 3968 if (pattern == NULL) {; 3969 return -1;; 3970 }; 3971 return match_prefix(pattern, strlen(pattern), str);; 3972}; 3973 ; 3974 ; 3975/* HTTP 1.1 assumes keep alive if ""Connection:"" header is not set; 3976 * This function must tolerate situations when connection info is not; 3977 * set up, for example if request parsing failed. */; 3978static int; 3979should_keep_alive(const struct mg_connection *conn); 3980{; 3981 const char *http_version;; 3982 const char *header;; 3983 ; 3984 /* First satisfy needs of the server */; 3985 if ((conn == NULL) || conn->must_close) {; 3986 /* Close, if civetweb framework needs to close */; 3987 return 0;; 3988 }; 3989 ; 3990 if (mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"") != 0) {; 3991 /* Close, if keep alive is not enabled */; 3992 return 0;; 3993 }; 3994 ; 3995 /* Check explicit wish of the client */; 3996 header = mg_get_header(conn, ""Connection"");; 3997 if (header) {; 3998 /* If there is a connection header from the client, obey */; 3999 if (header_has_option(header, ""keep-alive"")) {; 4000 return 1;; 4001 }; 4002 return 0;; 4003 }; 4004 ; 4005 /* Use default of the standard */; 4006 http_version = get_http_version(conn);; 4007 if (http_version && (0 == strcmp(http",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:117639,alive,alive,117639,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,"['alive', 'toler']","['alive', 'tolerate']"
Availability,"attern[i] == '$') {; 3940 return (str[j] == '\0') ? j : -1;; 3941 } else if (pattern[i] == '*') {; 3942 i++;; 3943 if (pattern[i] == '*') {; 3944 i++;; 3945 len = (ptrdiff_t)strlen(str + j);; 3946 } else {; 3947 len = (ptrdiff_t)strcspn(str + j, ""/"");; 3948 }; 3949 if (i == (ptrdiff_t)pattern_len) {; 3950 return j + len;; 3951 }; 3952 do {; 3953 res = match_prefix(pattern + i,; 3954 (pattern_len - (size_t)i),; 3955 str + j + len);; 3956 } while (res == -1 && len-- > 0);; 3957 return (res == -1) ? -1 : j + res + len;; 3958 } else if (lowercase(&pattern[i]) != lowercase(&str[j])) {; 3959 return -1;; 3960 }; 3961 }; 3962 return (ptrdiff_t)j;; 3963}; 3964 ; 3965 ; 3966static ptrdiff_t; 3967match_prefix_strlen(const char *pattern, const char *str); 3968{; 3969 if (pattern == NULL) {; 3970 return -1;; 3971 }; 3972 return match_prefix(pattern, strlen(pattern), str);; 3973}; 3974 ; 3975 ; 3976/* HTTP 1.1 assumes keep alive if ""Connection:"" header is not set; 3977 * This function must tolerate situations when connection info is not; 3978 * set up, for example if request parsing failed. */; 3979static int; 3980should_keep_alive(const struct mg_connection *conn); 3981{; 3982 const char *http_version;; 3983 const char *header;; 3984 ; 3985 /* First satisfy needs of the server */; 3986 if ((conn == NULL) || conn->must_close) {; 3987 /* Close, if civetweb framework needs to close */; 3988 return 0;; 3989 }; 3990 ; 3991 if (mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"") != 0) {; 3992 /* Close, if keep alive is not enabled */; 3993 return 0;; 3994 }; 3995 ; 3996 /* Check explicit wish of the client */; 3997 header = mg_get_header(conn, ""Connection"");; 3998 if (header) {; 3999 /* If there is a connection header from the client, obey */; 4000 if (header_has_option(header, ""keep-alive"")) {; 4001 return 1;; 4002 }; 4003 return 0;; 4004 }; 4005 ; 4006 /* Use default of the standard */; 4007 http_version = get_http_version(conn);; 4008 if (http_version && (0 == strcmp(http",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:117671,alive,alive,117671,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,"['alive', 'toler']","['alive', 'tolerate']"
Availability,"attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateInterpolator(Bool_t oldInterp)TGraph2Dprivate; DeclFileName()TGraph2Dinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TGraph2Dvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTGraph2Dvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option=""P0"") overrideTGraph2Dvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph2Dprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraph2Dvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDelaunayTGraph2Dprotected; fDirectoryTGraph2Dprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraph2Dprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraph2Dprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) const overrideTGraph2Dvirtual; FindObject(const TObject *obj) const overrideTGraph2Dvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; Fit(TF2 *f2, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; FitPanel()TGraph2Dvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTGraph2Dprotected; fMarkerColorTAttMarkerprotected; fMarkerSizeTAttMarkerprotected; fMarkerStyleTAttMark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D-members.html:1914,error,error,1914,doc/master/classTGraph2D-members.html,https://root.cern,https://root.cern/doc/master/classTGraph2D-members.html,2,['error'],['error']
Availability,"attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffProd.html:36635,error,errors,36635,root/html526/RooEffProd.html,https://root.cern,https://root.cern/root/html526/RooEffProd.html,3,['error'],['errors']
Availability,"attributes are:. LineColor Line color; LineStyle Line style; LineWidth Line width; MarkerColor Marker color index; MarkerSize Marker size; MarkerStyle Marker style; FillColor Area fill color; FillStyle Area fill style. TBranch * FindBranch(const char* name); Forwards the execution to the dummy tree header.; See TTree::FindBranch(). TLeaf * FindLeaf(const char* name); Forwards the execution to the dummy tree header.; See TTree::FindLeaf(). TBranch * GetBranch(const char* name); Forwards the execution to the dummy tree header.; See TTree::GetBranch(). Bool_t GetBranchStatus(const char* branchname) const; Forwards the execution to the dummy tree header.; See TTree::GetBranchStatus(). TVirtualTreePlayer * GetPlayer(); Forwards the execution to the dummy tree header.; See TTree::GetPlayer(). Long64_t Process(const char* filename, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Forwards the execution to the TDSet.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success.; See TDSet::Process(). Long64_t Process(TSelector* selector, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Not implemented in TProofChain. Shouldn't be used.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofChain.html:27944,error,error,27944,root/html528/TProofChain.html,https://root.cern,https://root.cern/root/html528/TProofChain.html,3,['error'],['error']
Availability,"attributes are:. LineColor Line color; LineStyle Line style; LineWidth Line width; MarkerColor Marker color index; MarkerSize Marker size; MarkerStyle Marker style; FillColor Area fill color; FillStyle Area fill style. TBranch * FindBranch(const char* name); Forwards the execution to the dummy tree header.; See TTree::FindBranch(). TLeaf * FindLeaf(const char* name); Forwards the execution to the dummy tree header.; See TTree::FindLeaf(). TBranch * GetBranch(const char* name); Forwards the execution to the dummy tree header.; See TTree::GetBranch(). Bool_t GetBranchStatus(const char* branchname) const; Forwards the execution to the dummy tree header.; See TTree::GetBranchStatus(). TVirtualTreePlayer * GetPlayer(); Forwards the execution to the dummy tree header.; See TTree::GetPlayer(). Long64_t Process(const char* filename, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Forwards the execution to the TDSet.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success.; See TDSet::Process(). Long64_t Process(TSelector* selector, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void ConnectProof(); Connects the proof ""Progress"" signal.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofChain.html:30409,error,error,30409,root/html534/TProofChain.html,https://root.cern,https://root.cern/root/html534/TProofChain.html,3,['error'],['error']
Availability,"atus To be run only if same fit is performed with sam...Definition FitResult.cxx:224; ROOT::Fit::FitResult::fBoundParamsstd::map< unsigned int, unsigned int > fBoundParamslist of limited parametersDefinition FitResult.h:358; ROOT::Fit::FitResult::FittedBinDataconst BinData * FittedBinData() constreturn BinData used in the fit (return a nullptr in case a different fit is done or the data are not ...Definition FitResult.cxx:631; ROOT::Fit::FitResult::FillResultvoid FillResult(const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the conf...Definition FitResult.cxx:100; ROOT::Fit::FitResult::UpperErrordouble UpperError(unsigned int i) constupper Minos error. If Minos has not run for parameter i return the parabolic errorDefinition FitResult.cxx:339; ROOT::Fit::FitResult::fValdouble fValminimum function valueDefinition FitResult.h:350; ROOT::Fit::FitResult::fEdmdouble fEdmexpected distance from minimumDefinition FitResult.h:351; ROOT::Fit::FitResult::fErrorsstd::vector< double > fErrorserrorsDefinition FitResult.h:361; ROOT::Fit::FitResult::fMinimizerstd::shared_ptr< ROOT::Math::Minimizer > fMinimizer! minimizer object used for fittingDefinition FitResult.h:353; ROOT::Fit::FitResult::fValidbool fValidflag for indicating valid fitDefinition FitResult.h:343; ROOT::Fit::FitResult::IsParameterFixedbool IsParameterFixed(unsigned int ipar) constquery if a parameter is fixedDefinition FitResult.cxx:365; ROOT::Fit::FitResult::fNdfunsigned int fNdfnumber of degree of freedomDefinition FitResult.h:346; ROOT::Fit::FitResult::Errordouble Error(unsigned int i) constparameter error by indexDefinition FitResult.h:179; ROOT::Fit::FitResult::CovMatrixdouble CovMatrix(unsigned int i, unsigned int j)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:29675,error,errorDefinition,29675,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['error'],['errorDefinition']
Availability,"atus wordDefinition TObject.h:45; lineTLine * lineDefinition entrylistblock_figure1.C:235. Reimplemented in TSystemFile, TCollection, TClass, TGFrame, and TGPack.; Definition at line 348 of file TObject.cxx. ◆ Error(). void TObject::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue error message. ; Use ""location"" to specify the method where the error occurred. Accepts standard printf formatting arguments. ; Reimplemented in TFitResult.; Definition at line 987 of file TObject.cxx. ◆ Execute() [1/2]. void TObject::Execute ; (; const char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented in TMethodCall, TCling, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 359 of file TObject.cxx. ◆ Execute() [2/2]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented in TCling, TMethodCall, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 377 of file TObject.cxx. ◆ ExecuteEvent(). void TObject::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). virtual . Execute action corresponding to an event at (px,py). ; This method must be overridden if an object can react to graphics events. ; Reimplemented in TParallelCoord, TParallelCoordRange, TParallelCoordVar, TGeoManager, TGeoNode, TGeoShape, TGeoVolume, TGeoOverlap, TGeoTrack, TASImage, TASPaletteEditor::LimitLine, TButton, TCanvas, TGroupButton, TPad, TSliderBox, TBox, TCrown, TCurlyArc, TCurlyLine, TDiamond, TEllipse, TFrame, TGraphPolargram, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:33939,error,error,33939,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['error'],['error']
Availability,"atus wordDefinition TObject.h:45; lineTLine * lineDefinition entrylistblock_figure1.C:235. Reimplemented in TSystemFile, TCollection, TClass, TGFrame, and TGPack.; Definition at line 353 of file TObject.cxx. ◆ Error(). void TObject::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue error message. ; Use ""location"" to specify the method where the error occurred. Accepts standard printf formatting arguments. ; Reimplemented in TFitResult.; Definition at line 993 of file TObject.cxx. ◆ Execute() [1/2]. void TObject::Execute ; (; const char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented in TMethodCall, TCling, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 364 of file TObject.cxx. ◆ Execute() [2/2]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented in TCling, TMethodCall, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 382 of file TObject.cxx. ◆ ExecuteEvent(). void TObject::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). virtual . Execute action corresponding to an event at (px,py). ; This method must be overridden if an object can react to graphics events. ; Reimplemented in TParallelCoord, TParallelCoordRange, TParallelCoordVar, TGeoManager, TGeoNode, TGeoShape, TGeoVolume, TGeoOverlap, TGeoTrack, TASImage, TASPaletteEditor::LimitLine, TButton, TCanvas, TGroupButton, TPad, TSliderBox, TBox, TCrown, TCurlyArc, TCurlyLine, TDiamond, TEllipse, TFrame, TGraphPolargram, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:33652,error,error,33652,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['error'],['error']
Availability,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TFoamCell**fCells[fNCells] Array of ALL cells; TRefArray*fCellsActArray of pointers to active cells, constructed at the end of foam build-up; Int_tfChatChat=0,1,2 chat level in output, Chat=1 normal level; TStringfDateRelease date of FOAM; Int_tfDimDimension of the integration/simulation space; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; TObjArray*fHistDbgHistograms of wt, for debug; TObjArray*fHistEdgHistograms of wt, one for each cell edge; TH1D*fHistWtHistogram of the MC wt; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TFoamMaxwt*fMCMonitMonitor of the MC weight for measuring MC efficiency; Double_tfMCerrorand its error; Double_tfMCresultTrue Integral R from MC series; Double_t*fMCvect[fDim] Generated MC vector for the outside user; Double_tfMCwtMC weight; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; Double_tfMaxWtRejMaximum weight in rejection for getting wt=1 events; TMethodCall*fMethodCall! ROOT's pointer to user-defined global distribution function; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Long_tfNCallsTotal number of the function calls; Int_tfNCellsMaximum number of cells; Long_tfNEffevTotal number of effective events (wt=1) in the foam buildup; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; Double_tfNevGenTotal number of the generated MC events; Int_tfNoActNumber of active cells; Int_tfOptD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoam.html:12773,error,error,12773,root/html602/TFoam.html,https://root.cern,https://root.cern/root/html602/TFoam.html,2,['error'],['error']
Availability,"au"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Upsilon : "") ; Tl.DrawLatex(x2, y, ""#Upsilon"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Phi : "") ; Tl.DrawLatex(x2, y, ""#Phi"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Chi : "") ; Tl.DrawLatex(x2, y, ""#Chi"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Psi : "") ; Tl.DrawLatex(x2, y, ""#Psi"");; y -= 0.0375 ; Tl.DrawLatex(x1, y, ""Omega : "") ; Tl.DrawLatex(x2, y, ""#Omega"");. // Draw the variations; x1 = 0.73; x2 = x1+0.2;; y = 0.7500 ; Tl.DrawLatex(x1, y, ""varepsilon : "") ; Tl.DrawLatex(x2, y, ""#varepsilon"");; y = 0.6375 ; Tl.DrawLatex(x1, y, ""vartheta : "") ; Tl.DrawLatex(x2, y, ""#vartheta"");; y = 0.2625 ; Tl.DrawLatex(x1, y, ""varsigma : "") ; Tl.DrawLatex(x2, y, ""#varsigma"");; y = 0.1875 ; Tl.DrawLatex(x1, y, ""varUpsilon : "") ; Tl.DrawLatex(x2, y, ""#varUpsilon"");; y = 0.1500 ; Tl.DrawLatex(x1, y, ""varphi : "") ; Tl.DrawLatex(x2, y, ""#varphi"");; y = 0.0375 ; Tl.DrawLatex(x1, y, ""varomega : "") ; Tl.DrawLatex(x2, y, ""#varomega"");. return Gl;; }. Accents; Several kind of accents are available:. #hat = ; #check = ; #acute = ; #grave = ; #dot = ; #ddot = ; #tilde = . The special sign: #slash draws a slash on top of the text between brackets:. #slash{E}_{T} : . Bar and vectors sign are done the following way:. #bar{a}: ; #vec{a}: . Changing Style; One can change the font, the text color, or the text size at any time using :; #font[font-number]{...}, #color[color-number]{...}; and #scale[scale-factor]{...}; Examples:. #font[12]{Times Italic} and #font[22]{Times bold} : ; #color[2]{Red} and #color[4]{Blue} : ; #scale[1.2]{Bigger} and #scale[0.8]{Smaller} : . Alignment Rules; The TText alignment rules apply to the TLatex objects with one exception; concerning the vertical alignment:. if the vertical alignment = 1 , subscripts are not taken into account ; if the vertical alignment = 0 , the text is aligned to the box surrounding; the full text with sub and superscripts. This is illustrated by the following example:. Picture; Source. {; TCanvas Tlva(""Tlva"",""T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLatex.html:14937,avail,available,14937,root/html528/TLatex.html,https://root.cern,https://root.cern/root/html528/TLatex.html,6,['avail'],['available']
Availability,"ault = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); The error bars options. ""E""; Default. Shows only the error bars, not a marker. ""E1""; Small lines are drawn at the end of the error bars. ""E2""; Error rectangles are drawn. ""E3""; A filled area is drawn through the end points of the vertical error bars. ""E4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; TH1F *he3 = (TH1F*)he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; return ce4;; }; 2D histograms can be drawn with error bars as shown is the followi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:20293,error,error,20293,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,3,['error'],['error']
Availability,"ault = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); The error bars options. ""E""; Default. Shows only the error bars, not a marker. ""E1""; Small lines are drawn at the end of the error bars. ""E2""; Error rectangles are drawn. ""E3""; A filled area is drawn through the end points of the vertical error bars. ""E4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; TH1F *he3 = he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; return ce4;; }; The bar chart option; The option ""B"" allows to draw simple vertical bar c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:19460,error,error,19460,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['error']
Availability,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:26089,error,error,26089,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,8,['error'],['error']
Availability,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPave.html:7974,error,error,7974,doc/master/classTPave.html,https://root.cern,https://root.cern/doc/master/classTPave.html,3,['error'],['error']
Availability,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArc.html:6512,error,error,6512,doc/master/classTArc.html,https://root.cern,https://root.cern/doc/master/classTArc.html,14,['error'],['error']
Availability,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteAxis.html:14006,error,error,14006,doc/master/classTPaletteAxis.html,https://root.cern,https://root.cern/doc/master/classTPaletteAxis.html,1,['error'],['error']
Availability,"ault is numerical double precision. Note that not all the options are implemented by all the minimizers. For example in Minuit is possible to set the maximum number of function calls, but not the maximum number of iterations. The Strategy and the Precision options apply instead only for Minuit (and Minuit2).; The class supports also setting global default values for the options, by using the static functions MinimizerOptions::SetDefault... (for example MinimizerOptions::SetDefaultPrintLevel(int )). The static functions can be also used to set the minimizer options when using TH1::Fit or TGraph::Fit. The list of the current option values can be inspected by using MinimizerOptions::Print.; ROOT::Math::MinimizerOptions() opt;; // print the default minimizer option values; opt.Print();; In addition it is possible to provide extra options which might apply for a particular minimizer MinimizerOptions::SetExtraOptions(const IOptions & ). See the documentation of the particular minimizer to use for the list of possible additional options available.; 5.7.5 Performing the Fit; Here we have now all the required input ingredients for the fit, the data and the function to fit. Depending on these we have now several different way to perform the fit, using the corresponding methods of the ROOT::Fit::Fitter class and depending on the type of input data.; 5.7.5.1 Available fit methods. Least-square fit: Fitter::LeastSquare(const BinData & ) or Fitter::Fit(const Bindata &). It requires the user to pass a BinData object. It should be used when the data values follow a Gaussian distribution. This fit method is implemented using the class ROOT::Fit::Chi2FCN.; Binned Likelihood fit : Fitter::LikelihoodFit(const Bindata & ). The user needs to pass a BinData object. It should be used when the data values follow a Poisson or a multinomial distribution. The Poisson case (extended fit) is the default and in this case the function normalization is also fit to the data. The Multi-nominal case c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:206429,avail,available,206429,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"aunay triangle; 845 goto L90;; 846 } else if (TMath::Abs(sin_sum) <= 1.E-6) {; 847 // point z lies on the circumference of the circle (within rounding errors); 848 // defined by the triangle, so there is potential for degeneracy in the; 849 // triangle set (Delaunay triangulation does not give a unique way to split; 850 // a polygon whose points lie on a circle into constituent triangles). Make; 851 // a note of the additional point number.; 852 ndegen++;; 853 degen = z;; 854 fdegen = f;; 855 o1degen = o1;; 856 o2degen = o2;; 857 }; 858L50:; 859 continue;; 860 }; 861 // This is a good triangle; 862 if (ndegen > 0) {; 863 // but is degenerate with at least one other,; 864 // haven't figured out what to do if more than 4 points are involved; 865/// if (ndegen > 1) {; 866/// Error(""Interpolate"",; 867/// ""More than 4 points lying on a circle. No decision making process formulated for triangulating this region in a non-arbitrary way %d %d %d %d"",; 868/// p,n,m,degen);; 869/// return thevalue;; 870/// }; 871 ; 872 // we have a quadrilateral which can be split down either diagonal; 873 // (d<->f or o1<->o2) to form valid Delaunay triangles. Choose diagonal; 874 // with highest average z-value. Whichever we choose we will have; 875 // verified two triangles as good and two as bad, only note the good ones; 876 d = degen;; 877 f = fdegen;; 878 o1 = o1degen;; 879 o2 = o2degen;; 880 if ((fZ[o1-1]+fZ[o2-1]) > (fZ[d-1]+fZ[f-1])) {; 881 // best diagonalisation of quadrilateral is current one, we have; 882 // the triangle; 883 t1 = p;; 884 t2 = n;; 885 t3 = m;; 886 // file the good triangles; 887 FileIt(p, n, m);; 888 FileIt(d, o1, o2);; 889 } else {; 890 // use other diagonal to split quadrilateral, use triangle formed by; 891 // point f, the degnerate point d and whichever of o1 and o2 create; 892 // an enclosing triangle; 893 t1 = f;; 894 t2 = d;; 895 if (Enclose(f,d,o1,0)) {; 896 t3 = o1;; 897 } else {; 898 t3 = o2;; 899 }; 900 // file the good triangles; 901 FileIt(f, d, o1);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphDelaunay_8cxx_source.html:30159,down,down,30159,doc/master/TGraphDelaunay_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphDelaunay_8cxx_source.html,1,['down'],['down']
Availability,"aus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates . ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points . This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors. See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; The fitting of the TGraph, i.e simple data points without any error associated, is performed using the un-weighted least-square (chi-square) method. TGraphErrors fit:; In case of a TGraphErrors or TGraphAsymmErrors object, when x errors are present, the error along x, is projected along the y-direction by calculating the function at the points x-ex_low and x+ex_high, where ex_low and ex_high are the corresponding lower and upper error in x. The chi-square is then computed as the sum of the quantity below at each data point:. \[; \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; \]. where x and y are the point coordinates, and ‘f’(x)is the derivative of the functionf(x)`.; In case of asymmetric errors, if the function lies below (above) the data point, ey is ey_low (ey_high).; The approach used to approximate the uncertainty in y because of the errors in x is to make it equal the error in x times the slope of the line. This approach is called ""effective variance method"" and the implementation is provided in the function FitUtil::EvaluateChi2Effective. Linear fitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:49945,error,error,49945,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['error'],['error']
Availability,"ause the true; minimum is indeed at a limit, or it may be because the minimizer has; become ``blocked'' at a limit. This may normally happen only if the; parameter is so close to a limit (internal value at an odd multiple of #((pi)/(2)); that MINUIT prints a warning to this effect when it prints; the parameter values.; The minimizer can become blocked at a limit, because at a limit the; derivative seen by the minimizer partial F/partial Pint is zero no matter; what the real derivative partial F/partial Pext is. ((partial F)/(partial P ))= ((partial F)/(partial P ))((partial P )/(partial P )) =((partial F)/(partial P ))= 0; int ext ext int ext. Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. Statistical interpretation:. For discussuion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. Reliability of MINUIT error estimates. MINUIT always carri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:6811,error,errors,6811,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['errors']
Availability,"auss(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamKernelGauss.html:1531,error,error,1531,root/html530/TMVA__PDEFoamKernelGauss.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamKernelGauss.html,5,['error'],['error']
Availability,aussLegendreIntegrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GaussLegendreIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 157 of file GaussLegendreIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetAbsTolerance ; (; double ; ). overridevirtual . This method is not implemented. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 93 of file GaussLegendreIntegrator.cxx. ◆ SetNumberPoints(). void ROOT::Math::GaussLegendreIntegrator::SetNumberPoints ; (; int ; num). Set the number of points used in the calculation of the integral. ; Definition at line 43 of file GaussLegendreIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussLegendreIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 167 of file GaussLegendreIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetRelTolerance ; (; double ; eps). overridevirtual . Set the desired relative Error. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 86 of file GaussLegendreIntegrator.cxx. Member Data Documentation. ◆ fNum. int ROOT::Math::GaussLegendreIntegrator::fNum. protected . Number of points used in the estimation of the integral. ; Definition at line 113 of file GaussLegendreIntegrator.h. ◆ fW. double* ROOT::Math::GaussLegendreIntegrator::fW. protected . Weights of the points used. ; Definition at line 115 of file GaussLegendreIntegrator.h. ◆ fX. double* ROOT::Math::GaussLegendreIntegrator::fX. protected . Abscisa of the points used. ; Definition at line 114 of file GaussLegendreIntegrator.h. Libraries for ROOT::Math::GaussLegendreIntegrator:. [legend]; The documentation for ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:8249,toler,tolerance,8249,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,1,['toler'],['tolerance']
Availability,"auto h2b = new TH1F(""h2b"",""h2b"",nx,0,nx);; 791 h2b->SetFillColor(38);; 792 h2b->SetBarWidth(0.4);; 793 h2b->SetBarOffset(0.5);; 794 h2b->SetStats(0);; 795 for (i=1;i<=nx;i++) h2b->SetBinContent(i, d_35_1[i-1]);; 796 ; 797 h2b->Draw(""b same"");; 798}; 799End_Macro; 800 ; 801 ; 802\anchor HP10; 803### The ""BAR"" and ""HBAR"" options; 804 ; 805 ; 806When the option `bar` or `hbar` is specified, a bar chart is drawn. A vertical; 807bar-chart is drawn with the options `bar`, `bar0`, `bar1`, `bar2`, `bar3`, `bar4`.; 808An horizontal bar-chart is drawn with the options `hbar`, `hbar0`, `hbar1`,; 809`hbar2`, `hbar3`, `hbar4` (hbars.C).; 810 ; 811- The bar is filled with the histogram fill color.; 812- The left side of the bar is drawn with a light fill color.; 813- The right side of the bar is drawn with a dark fill color.; 814- The percentage of the bar drawn with either the light or dark color is:; 815 - 0% for option ""(h)bar"" or ""(h)bar0""; 816 - 10% for option ""(h)bar1""; 817 - 20% for option ""(h)bar2""; 818 - 30% for option ""(h)bar3""; 819 - 40% for option ""(h)bar4""; 820 ; 821When an histogram has errors the option [""HIST""](\ref OPTHIST) together with the `(h)bar` option.; 822 ; 823Begin_Macro(source); 824../../../tutorials/hist/hbars.C; 825End_Macro; 826 ; 827To control the bar width (default is the bin width) `TH1::SetBarWidth()`; 828should be used.; 829 ; 830To control the bar offset (default is 0) `TH1::SetBarOffset()` should; 831be used.; 832 ; 833These two parameters are useful when several histograms are plotted using; 834the option `SAME`. They allow to plot the histograms next to each other.; 835 ; 836 ; 837\anchor HP11; 838### The SCATter plot option (legacy draw option); 839 ; 840\attention; 841Use of option `SCAT` has been deprecated. It was the default drawing option for 2D and; 8423D histograms. The new default option is `COL` (heat-map).; 843 ; 844 ; 845For each cell (i,j) a number of points proportional to the cell content is; 846drawn. A maximum of `kNMAX` poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:34980,error,errors,34980,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['errors']
Availability,"autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCint.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurityError() const; {return 0;}. int LoadFile(const char* ) const; {return 0;}. void LoadT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:20124,error,error,20124,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,4,['error'],['error']
Availability,"av Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:17928,error,error,17928,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,3,['error'],['error']
Availability,"ava's jar format). It must have the extension; .par. A PAR file can be directly a binary or a source with a build; procedure. In the PROOF-INF directory there can be a build script:; BUILD.sh to be called to build the package, in case of a binary PAR; file don't specify a build script or make it a no-op. Then there is; SETUP.C which sets the right environment variables to use the package,; like LD_LIBRARY_PATH, etc.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), so triggering a full; re-build. The option if effective only for PROOF protocol > 8 .; The lab 'dirlab' (e.g. 'G0') indicates that the package is to uploaded to; an alternative global directory for global usage. This may require special; privileges.; If download is kTRUE and the package is not found locally, then it is downloaded; from the master repository.; Returns 0 in case of success and -1 in case of error. Int_t UploadPackageOnClient(const char* package, TProof::EUploadPackageOpt opt, TMD5* md5); Upload a package on the client in ~/.proof/packages.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; Additional files to be uploaded (or updated, if needed) can be specified; after a comma, e.g. ""mymacro.C+,thisheader.h,thatheader.h"".; If existing in the same directory, a header basename(macro).h or .hh, is also; uploaded.; The default is to loa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:67707,error,error,67707,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,5,['error'],['error']
Availability,"ava's jar format). It must have the extension; .par. A PAR file can be directly a binary or a source with a build; procedure. In the PROOF-INF directory there can be a build script:; BUILD.sh to be called to build the package, in case of a binary PAR; file don't specify a build script or make it a no-op. Then there is; SETUP.C which sets the right environment variables to use the package,; like LD_LIBRARY_PATH, etc.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), so triggering a full; re-build. The option if effective only for PROOF protocol > 8 .; The lab 'dirlab' (e.g. 'G0') indicates that the package is to uploaded to; an alternative global directory for global usage. This may require special; privileges.; If download is kTRUE and the package is not found locally, then it is downloaded; from the master repository.; Returns 0 in case of success and -1 in case of error. Int_t UploadPackageOnClient(const char* package, TProof::EUploadPackageOpt opt, TMD5* md5); Upload a package on the client in ~/.proof/packages.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; If existing, the corresponding header basename(macro).h or .hh, is also; uploaded. The default is to load the macro also on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not don",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:67158,error,error,67158,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['error'],['error']
Availability,"ave background source. void InitTUnfoldSys(void); initialize pointers and TMaps. ~TUnfoldSys(void); delete all data members. void ClearResults(void); clear all data members which depend on the unfolding results. void PrepareSysError(void); calculations required for syst.error; data members modified; fEmatUncorrX, fEmatUncorrAx, fDeltaCorrX, fDeltaCorrAx. void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); get output error contribution from statistical fluctuations in A; ematrix: output error matrix histogram; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors; data members modified:; fVYAx, fESparse, fEAtV, fErrorAStat. TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2); propagate uncorrelated systematic errors to a covariance matrix; m0,m1 : coefficients (matrices) for propagating the errors. the error matrix is calculated by standard error propagation, where the; derivative of the result vector X wrt the matrix A is given by. dX_k / dA_ij = M0_kj * Z0_i - M1_ki * Z1_j. where:; the matrices M0 and M1 are arguments to this function; the vectors Z0, Z1 : GetDXDAZ(). The matrix A is calculated from a matrix B as. A_ij = B_ij / sum_k B_kj. where k runs over additional indices of B, not present in A.; (underflow and overflow bins, used for efficiency corrections). define: Norm_j = sum_k B_kj (data member fSumOverY). the derivative of A wrt this input matrix B is given by:. dA_ij / dB_kj = ( delta_ik - A_ij ) * 1/Norm_j. The covariance matrix Vxx is:. Vxx_mn = sum_ijlk [ (dX_m / dA_ij) * (dA_ij / dB_kj) * DB_kj; * (dX_n / dA_lj) * (dA_lj / dB_kj) ]. where DB_kj is the error on B_kj squared; Simplify the sum over k:. sum_k [ (dA_ij / dB_kj) * DB_kj * (dA_lj / dB_kj) ]; = sum_k [ ( delta_ik - A_ij ) * 1/Norm_j * DB_kj *; * ( delta_lk - A_lj ) * 1/Norm_j ]; = sum_k [ ( delta_ik*delta_lk - delta_ik*A_lj - delta_lk*A_ij; + A_ij * A_lj ) * DB_kj / Norm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:21513,error,error,21513,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,6,['error'],['error']
Availability,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:11731,error,error,11731,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,6,['error'],['error']
Availability,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:21166,error,error,21166,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,15,['error'],['error']
Availability,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:31483,error,error,31483,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,9,['error'],['error']
Availability,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:28687,error,error,28687,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['error'],['error']
Availability,"ave some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t force = kFALSE); -- Recursively mark streamer infos for writing to a file. Will force this TStreamerInfo to the file and also; all the dependencies. If argument force > 0 the loop on class dependencies is forced. This function is called when streaming a class that contains; a null pointer. In this case, the TStreamerInfo for the class; with the null pointer must be written to the file and also all; the TStreamerInfo of all the classes referenced by the class. --; We must be given a file to write to. TClass * GetActualClass(const void* obj) const; Assuming that obj points to (the part of) an object that is of the; type described by this streamerInfo, return the actual type of the; object (i.e. the type described by this streamerInfo is a base class; of the actual type of the object.; This routine should only be call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStreamerInfo.html:17263,error,error,17263,root/html534/TStreamerInfo.html,https://root.cern,https://root.cern/root/html534/TStreamerInfo.html,1,['error'],['error']
Availability,ave the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error fou,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13532,error,error,13532,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error fou,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13644,error,error,13644,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.2,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:15929,error,error,15929,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15205,error,error,15205,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15317,error,error,15317,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15761,error,error,15761,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:17208,error,error,17208,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.29682 0.292587 0.0806285 0.00686869 43384.1 1; : ; : Elapsed time for training with 4000 events: 1.62 sec ; : Dataset[dataset] : Create results for training; : Dataset[dataset] : Multiclass evaluation of DL_CPU on training sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.106 sec ; : Creating multiclass resp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:16269,error,error,16269,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21101,error,error,21101,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21213,error,error,21213,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21325,error,error,21325,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22214,error,error,22214,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ave the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200555 0.00176513 43738.9 6; : 975 Minimum Test error found - save the configuration ; : 975 | 3.52504 4.65912 0.0202218 0.00185299 43552 0; : 976 | 3.7346 5.23443 0.0200603 0.00176255 43721.2 1; : 977 | 3.73856 4.9727 0.0200443 0.00176151 43757 2; : 978 | 3.60727 4.99113 0.0200479 0.00175633 43736 3; : 979 | 3.40672 4.84357 0.0200357 0.00175685 43766.5 4; : 980 | 3.44899 4.83288 0.0200548 0.0017499 43704.2 5; : 981 | 3.46445 4.72048 0.0203135 0.00176046 43119.7 6; : 982 Minimum Test error found - save the configuration ; : 982 | 3.46604 4.64127 0.0202116 0.00183381 43530.8 0; : 983 Minimum Test error found - save the configuration ; : 983 | 3.37896 4.59559 0.0201715 0.00182642 43608.5 0; : 984 Minimum Test error found - save the configuration ; : 984 | 3.36213 4.34126 0.0202597 0.00185498 43467.1 0; : 985 | 3.39032 4.51659 0.0201503 0.00185184 43719.5 1; : 986 | 3.5234 4.95577 0.0201762 0.0017578 43434.8 2; : 987 | 3.50466 4.60061 0.0201538 0.00175522 43481.6 3; : 988 | 3.61316 4.68965 0.0201071 0.00176 43603.6 4; : 989 | 3.88349 5.24185 0.0200475 0.00175499 43733.8 5; : 990 | 4.0647 4.52576 0.020036 0.00175545 43762.3 6; : 991 | 3.77396 5.32769 0.0200783 0.00175786 43667.1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0.0203306 0.00176616 43093.1 13; : 998 | 3.41797 4.46788 0.0203618 0.00175568 42996.7 14; : 999 Minimum Test error ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:112024,error,error,112024,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"ave values. TAxis * GetXaxis() const; Get x axis of the function. TAxis * GetYaxis() const; Get y axis of the function. TAxis * GetZaxis() const; Get z axis of the function. (In case this object is a TF2 or TF3). Double_t GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); Compute the gradient (derivative) wrt a parameter ipar; Parameters:; ipar - index of parameter for which the derivative is computed; x - point, where the derivative is computed; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); Compute the gradient wrt parameters; Parameters:; x - point, were the gradient is computed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 9.9999999999999998E-13); use IntegralOneDim or analytical integral. Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t& err); Return Integral of function between a and b using the given parameter values and; relative and absolute tolerance.; The defult integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; If ROOT contains the MathMore library the default integrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:45069,error,errors,45069,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,1,['error'],['errors']
Availability,"ave values. TAxis * GetXaxis() const; Get x axis of the function. TAxis * GetYaxis() const; Get y axis of the function. TAxis * GetZaxis() const; Get z axis of the function. (In case this object is a TF2 or TF3). Double_t GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); Compute the gradient (derivative) wrt a parameter ipar; Parameters:; ipar - index of parameter for which the derivative is computed; x - point, where the derivative is computed; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); Compute the gradient wrt parameters; Parameters:; x - point, were the gradient is computed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 9.9999999999999998E-13); use IntegralOneDim. Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t& err); Return Integral of function between a and b using the given parameter values and; relative and absolute tolerance.; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; If ROOT contains the MathMore library the default integrator is set to be; the a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:52308,error,errors,52308,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,1,['error'],['errors']
Availability,"ave values. TAxis * GetXaxis() const; Get x axis of the function. TAxis * GetYaxis() const; Get y axis of the function. TAxis * GetZaxis() const; Get z axis of the function. (In case this object is a TF2 or TF3). Double_t GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); Compute the gradient (derivative) wrt a parameter ipar; Parameters:; ipar - index of parameter for which the derivative is computed; x - point, where the derivative is computed; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); Compute the gradient wrt parameters; Parameters:; x - point, were the gradient is computed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 1e-12); Return Integral of function between a and b. based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A, B: End-points of integration interval. Note that B may be less; than A.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:48733,error,errors,48733,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['error'],['errors']
Availability,"ave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir; }. const char * GetUser() const; { return fUser; }. const char * GetGroup() const; { return fGroup; }. Int_t GetPort() const; { return fPort; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetPerfIdx() const; { return fPerfIdx; }. Int_t GetProtocol() const; { return fProtocol; }. TSocket * GetSocket() const; { return fSocket; }. TProof ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSlave.html:11307,recover,recovered,11307,root/html602/TSlave.html,https://root.cern,https://root.cern/root/html602/TSlave.html,2,['recover'],['recovered']
Availability,"aveInfo's. In case of error return 0. void Activate(TList* slaves = 0); Activate slave server list. void SetMonitor(TMonitor* mon = 0, Bool_t on = kTRUE); Activate (on == TRUE) or deactivate (on == FALSE) all sockets; monitored by 'mon'. Int_t BroadcastGroupPriority(const char* grp, Int_t priority, TList* workers); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. Int_t BroadcastGroupPriority(const char* grp, Int_t priority, TProof::ESlaves list = kAllUnique); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. void ResetMergePrg(); Reset the merge progress notificator. Int_t Broadcast(const TMessage& mess, TList* slaves); Broadcast a message to all slaves in the specified list. Returns; the number of slaves the message was successfully sent to.; Returns -1 in case of error. Int_t Broadcast(const TMessage& mess, TProof::ESlaves list = kActive); Broadcast a message to all slaves in the specified list (either; all slaves or only the active slaves). Returns the number of slaves; the message was successfully sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind, TList* slaves); Broadcast a character string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:39098,error,error,39098,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['error'],['error']
Availability,"avePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void Scale (Double_t c1=1, Option_t *option="""");  Multiply this histogram by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:28251,error,error,28251,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,15,['error'],['error']
Availability,"aves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that this function must be called for the class deriving; directly from TObject, eg, assuming that BigTrack derives from Track; and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();. Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClass.html:34162,down,down,34162,root/html528/TClass.html,https://root.cern,https://root.cern/root/html528/TClass.html,1,['down'],['down']
Availability,"aving the priority (as in ssh). A 'dbg' value > 0 gives increasing verbosity. The last argument 'script' allows to specify an alternative script to be executed remotely to startup the session. ; Definition at line 1419 of file TApplication.cxx. ◆ ProcessFile(). Longptr_t TApplication::ProcessFile ; (; const char * ; file, . Int_t * ; error = nullptr, . Bool_t ; keep = kFALSE . ). virtual . Process a file containing a C++ macro. ; Definition at line 1720 of file TApplication.cxx. ◆ ProcessLine(). Longptr_t TApplication::ProcessLine ; (; const char * ; line, . Bool_t ; sync = kFALSE, . Int_t * ; err = nullptr . ). virtual . Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ; Return the return value of the command cast to a long. ; Reimplemented in TApplicationServer, and TApplicationRemote.; Definition at line 1565 of file TApplication.cxx. ◆ ProcessRemote(). Longptr_t TApplication::ProcessRemote ; (; const char * ; line, . Int_t * ; error = nullptr . ). protectedvirtual . Process the content of a line starting with "".R"" (already stripped-off) The format is. ; [user@]host[:dir] [-l user] [-d dbg] [script] | [host] -close; The variable 'dir' is the remote directory to be used as working dir. The username can be specified in two ways, ""-l"" having the priority (as in ssh). A 'dbg' value > 0 gives increasing verbosity. The last argument 'script' allows to specify an alternative script to be executed remotely to startup the session. ; Reimplemented in TRint.; Definition at line 1485 of file TApplication.cxx. ◆ QuitOpt(). Bool_t TApplication::QuitOpt ; (; ); const. inline . Definition at line 145 of file TApplication.h. ◆ Raise(). virtual void TApplication::Raise ; (; ). inlinevirtual . Definition at line 133 of file TApplication.h. ◆ RemoveIdleTimer(). void TApplication::RemoveIdleTimer ; (; ). virtual . Remove idle timer. Normally called via TROOT::Idle(0). ; Definition at line 1885 of file TApplication.cxx. ◆ ReturnFromR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:35609,error,error,35609,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['error'],['error']
Availability,"avored); Bool_tfPValueIsRightTail; Double_tfTestStatisticDataresult of the test statistic evaluated on data; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestResult(const char* name = 0); Default constructor. HypoTestResult(const char* name, Double_t nullp, Double_t altp); Alternate constructor. ~HypoTestResult(); Destructor. void Append(const RooStats::HypoTestResult* other); Add additional toy-MC experiments to the current results.; Use the data test statistics of the added object if it is not already; set (otherwise, ignore the new one). void SetAltDistribution(RooStats::SamplingDistribution* alt). void SetNullDistribution(RooStats::SamplingDistribution* null). void SetTestStatisticData(const Double_t tsd). void SetPValueIsRightTail(Bool_t pr). Bool_t HasTestStatisticData(void). Double_t NullPValueError() const; compute error on Null pvalue. Double_t CLbError() const; compute CLb error; Clb = 1 - NullPValue(); must use opposite condition that routine above. Double_t CLsplusbError() const. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t& pvalue, Double_t& perror, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. explicit HypoTestResult(const char* name = 0); default constructor. Double_t NullPValue() const; Return p-value for null hypothesis. { return fNullPValue; }. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. { return fAlternatePValue; }. Double_t CLb() const; Convert NullPValue into a ""confidence level"". { return !fBackgroundIsAlt ? NullPValue() : AlternatePValue(); }. Double_t CLsplusb() const; Convert AlternatePValue into a ""confidence level"". { return !fBackgroundIsAlt ? AlternatePValue() : NullPValue(); }. Double_t CLs() const; CLs is simply CLs+b/CLb (not a method, but a qua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestResult.html:8709,error,error,8709,root/html530/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestResult.html,2,['error'],['error']
Availability,"aw a 2D histogram as a color plot. ; Definition at line 5766 of file THistPainter.cxx. ◆ PaintColorLevelsFast(). void THistPainter::PaintColorLevelsFast ; (; Option_t * ; option). virtual . [Rendering scheme for the COL2 and COLZ2 options] (HP14) ; Definition at line 5577 of file THistPainter.cxx. ◆ PaintContour(). void THistPainter::PaintContour ; (; Option_t * ; option). virtual . Control function to draw a 2D histogram as a contour plot. ; Definition at line 5932 of file THistPainter.cxx. ◆ PaintContourLine(). Int_t THistPainter::PaintContourLine ; (; Double_t ; elev1, . Int_t ; icont1, . Double_t ; x1, . Double_t ; y1, . Double_t ; elev2, . Int_t ; icont2, . Double_t ; x2, . Double_t ; y2, . Double_t * ; xarr, . Double_t * ; yarr, . Int_t * ; itarr, . Double_t * ; levels . ). virtual . Fill the matrix xarr and yarr for Contour Plot. ; Definition at line 6257 of file THistPainter.cxx. ◆ PaintErrors(). void THistPainter::PaintErrors ; (; Option_t * ; option). virtual . Draw 1D histograms error bars. ; Definition at line 6314 of file THistPainter.cxx. ◆ PaintFrame(). void THistPainter::PaintFrame ; (; ). virtual . Calculate range and clear pad (canvas). ; Definition at line 6777 of file THistPainter.cxx. ◆ PaintFunction(). void THistPainter::PaintFunction ; (; Option_t * ; option). virtual . [Paint functions associated to an histogram.](HP28"") ; Definition at line 6800 of file THistPainter.cxx. ◆ PaintH3(). void THistPainter::PaintH3 ; (; Option_t * ; option = """"). virtual . Control function to draw a 3D histograms. ; Definition at line 6974 of file THistPainter.cxx. ◆ PaintH3Box(). void THistPainter::PaintH3Box ; (; Int_t ; iopt). virtual . Control function to draw a 3D histogram with boxes. ; Definition at line 7499 of file THistPainter.cxx. ◆ PaintH3BoxRaster(). void THistPainter::PaintH3BoxRaster ; (; ). virtual . Control function to draw a 3D histogram with boxes. ; Definition at line 7690 of file THistPainter.cxx. ◆ PaintH3Iso(). void THistPainter::PaintH3Iso ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:159487,error,error,159487,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"aw the frame on the canvas; c = ROOT.TCanvas(""rf201_composite"", ""rf201_composite"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.4); xframe.Draw(); ; c.SaveAs(""rf201_composite.png""); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (sig); 0x5b64db0 RooAddPdf::model = 0.886326/1 [Auto,Clean] ; 0x7475710/V- RooChebychev::bkg = 0.734412 [Auto,Dirty] ; 0x6e5aa50/V- RooRealVar::x = 5; 0x703aa10/V- RooRealVar::a0 = 0.506755 +/- 0.0795919; 0x6eef060/V- RooRealVar::a1 = 0.265588 +/- 0.133931; 0x748b980/V- RooRealVar::bkgfrac = 0.428008 +/- 0.0356013; 0x7492e20/V- RooAddPdf::sig = 1/1 [Auto,Clean] ; 0x7078360/V- RooGaussian::sig1 = 1 [Auto,Dirty] ; 0x6e5aa50/V- RooRealVar::x = 5; 0x6dab710/V- RooRealVar::mean = 5; 0x69f2060/V- RooRealVar::sigma1 = 0.5; 0x72776d0/V- RooRealVar::sig1frac = 0.641992 +/- 0.0969095; 0x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf201__composite_8py.html:4138,error,error,4138,doc/master/rf201__composite_8py.html,https://root.cern,https://root.cern/doc/master/rf201__composite_8py.html,1,['error'],['error']
Availability,"aw(); selection - selection expression; see TTree::Draw(); option - Drawnig option; see TTree::Draw. TString GetProofSelectorName() const; Returns apropriate TSelector class name for proof for the object that is to be drawn; assumes that Parse() method has been called before. Double_t GetParameter(int num) const; returns *num*-th parameter from brackets in the expression; in case of an error (wrong number) returns 0.0; num - number of parameter (counted from 0). Double_t GetIfSpecified(Int_t num, Double_t def) const; num - parameter number; def - default value of the parameter; returns the value of *num*-th parameter from the brackets in the variable expression; if the parameter of that number wasn't specified returns *def*. Bool_t IsSpecified(int num) const; returns kTRUE if the *num*-th parameter was specified; otherwise returns fFALSE; in case of an error (wrong num) prints an error message and; returns kFALSE. TString GetVarExp(Int_t num) const; Returns the *num*-th variable string; in case of an error prints an error message and returns an empty string. TString GetVarExp() const; Returns the variable string, i.e. [var1[:var2[:var2[:var4]]]]. TString GetObjectTitle() const; Returns the desired plot title. TTreeDrawArgsParser::EOutputType DefineType(). TTreeDrawArgsParser(). Bool_t GetAdd() const; { return fAdd; }. Int_t GetDimension() const; { return fDimension; }. Bool_t GetShouldDraw() const; { return fShouldDraw; }. TString GetExp() const; { return fExp; }. Int_t GetNoParameters() const; { return fNoParameters; }. TString GetObjectName() const; { return fName; }. Bool_t GetOptionSame() const; { return fOptionSame; }. TObject * GetOriginal() const; { return fOriginal; }. TString GetSelection() const; { return fSelection; }. void SetObjectName(const char* s); { fName = s; }. void SetOriginal(TObject* o); { fOriginal = o; }. » Author: Marek Biskup 24/01/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/treeplayer:$Id$ » Last g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeDrawArgsParser.html:9690,error,error,9690,root/html534/TTreeDrawArgsParser.html,https://root.cern,https://root.cern/root/html534/TTreeDrawArgsParser.html,6,['error'],['error']
Availability,"aw(); selection - selection expression; see TTree::Draw(); option - Drawnig option; see TTree::Draw. TString GetProofSelectorName() const; Returns apropriate TSelector class name for proof for the object that is to be drawn; assumes that Parse() method has been called before. Double_t GetParameter(int num) const; returns *num*-th parameter from brackets in the expression; in case of an error (wrong number) returns 0.0; num - number of parameter (counted from 0). Double_t GetIfSpecified(Int_t num, Double_t def) const; num - parameter number; def - default value of the parameter; returns the value of *num*-th parameter from the brackets in the variable expression; if the parameter of that number wasn't specified returns *def*. Bool_t IsSpecified(int num) const; returns kTRUE if the *num*-th parameter was specified; otherwise returns fFALSE; in case of an error (wrong num) prints an error message and; returns kFALSE. TString GetVarExp(Int_t num) const; Returns the *num*-th variable string; in case of an error prints an error message and returns an empty string. TString GetVarExp() const; Returns the variable string, i.e. [var1[:var2[:var2[:var4]]]]. TString GetObjectTitle() const; Returns the desired plot title. TTreeDrawArgsParser::EOutputType DefineType(). TTreeDrawArgsParser(). Bool_t GetAdd() const; { return fAdd; }. Int_t GetDimension() const; { return fDimension; }. Bool_t GetShouldDraw() const; { return fShouldDraw; }. TString GetExp() const; { return fExp; }. Int_t GetNoParameters() const; { return fNoParameters; }. TString GetObjectName() const; { return fName; }. Bool_t GetOptionSame() const; { return fOptionSame; }. TObject * GetOriginal() const; { return fOriginal; }. TString GetSelection() const; { return fSelection; }. void SetObjectName(const char* s); { fName = s; }. void SetOriginal(TObject* o); { fOriginal = o; }. » Author: Marek Biskup 24/01/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/treeplayer:$Id: TTreeDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeDrawArgsParser.html:9588,error,error,9588,root/html528/TTreeDrawArgsParser.html,https://root.cern,https://root.cern/root/html528/TTreeDrawArgsParser.html,6,['error'],['error']
Availability,"awLatex(.2,.9,""K_{S}"");; latex.DrawLatex(.3,.9,""K^{*0}"");; latex.DrawLatex(.2,.8,longstring);. latex.SetTextAlign(12); //centered; latex.DrawLatex(.2,.6,""K_{S}"");; latex.DrawLatex(.3,.6,""K^{*0}"");; latex.DrawLatex(.2,.5,longstring);. latex.SetTextAlign(11); //default bottom alignment; latex.DrawLatex(.2,.4,""K_{S}"");; latex.DrawLatex(.3,.4,""K^{*0}"");; latex.DrawLatex(.2,.3,longstring);. latex.SetTextAlign(10); //special bottom alignment; latex.DrawLatex(.2,.2,""K_{S}"");; latex.DrawLatex(.3,.2,""K^{*0}"");; latex.DrawLatex(.2,.1,longstring);. latex.SetTextAlign(12);; latex.SetTextFont(72);; latex.DrawLatex(.1,.80,""13"");; latex.DrawLatex(.1,.55,""12"");; latex.DrawLatex(.1,.35,""11"");; latex.DrawLatex(.1,.18,""10"");; return Tlva;; }. Character Adjustement; The two commands #kern and #lower enable a better control; over character placement. The command #kern[(Float_t)dx]{text} moves; the output string horizontally by the fraction dx of its length.; Similarly, #lower[(Float_t)dy]{text} shifts the text up or down by; the fraction dy of its height.; Examples:. Positive k#kern[0.3]{e}#kern[0.3]{r}#kern[0.3]{n}#kern[0.3]{i}#kern[0.3]{n}#kern[0.3]{g}:. Negative k#kern[-0.3]{e}#kern[-0.3]{r}#kern[-0.3]{n}#kern[-0.3]{i}#kern[-0.3]{n}#kern[-0.3]{g}:. Vertical a#lower[0.2]{d}#lower[0.4]{j}#lower[0.1]{u}#lower[-0.1]{s}#lower[-0.3]{t}#lower[-0.4]{m}#lower[-0.2]{e}#lower[0.1]{n}t:. Italic and Boldface; Text can be turned italic or boldface using the commands; #it and #bf.; Examples:. #bf{bold}, #it{italic}, #bf{#it{bold italic}}, #bf{#bf{unbold}}}:. abc#alpha#beta#gamma, #it{abc#alpha#beta#gamma}:. Examples. Picture; Source. {; TCanvas ex1(""ex1"",""Latex"",500,600);; TLatex Tl;; Tl.SetTextAlign(12);; Tl.SetTextSize(0.04);; Tl.DrawLatex(0.1,0.8,""1) C(x) = d #sqrt{#frac{2}{#lambdaD}} #int^{x}_{0}cos(#frac{#pi}{2}t^{2})dt"");; Tl.DrawLatex(0.1,0.6,""2) C(x) = d #sqrt{#frac{2}{#lambdaD}} #int^{x}cos(#frac{#pi}{2}t^{2})dt"");; Tl.DrawLatex(0.1,0.4,""3) R = |A|^{2} = #frac{1}{2}(#[]{#frac{1}{2}+C(V)}^{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLatex.html:17752,down,down,17752,root/html534/TLatex.html,https://root.cern,https://root.cern/root/html534/TLatex.html,3,['down'],['down']
Availability,"awLatex(x1, y, ""#Jgothic"") ; Tl.DrawText(x2, y, ""#Jgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#LT"") ; Tl.DrawText(x2, y, ""#LT"");; y -= step ; Tl.DrawLatex(x1, y, ""#equiv"") ; Tl.DrawText(x2, y, ""#equiv"");; y -= step ; Tl.DrawLatex(x1, y, ""#subset"") ; Tl.DrawText(x2, y, ""#subset"");; y -= step ; Tl.DrawLatex(x1, y, ""#supseteq"") ; Tl.DrawText(x2, y, ""#supseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#wedge"") ; Tl.DrawText(x2, y, ""#wedge"");; y -= step ; Tl.DrawLatex(x1, y, ""#oright"") ; Tl.DrawText(x2, y, ""#oright"");; y -= step ; Tl.DrawLatex(x1, y, ""#AA"") ; Tl.DrawText(x2, y, ""#AA"");; y -= step ; Tl.DrawLatex(x1, y, ""#pm"") ; Tl.DrawText(x2, y, ""#pm"");; y -= step ; Tl.DrawLatex(x1, y, ""#mp"") ; Tl.DrawText(x2, y, ""#mp"");; y -= step ; Tl.DrawLatex(x1, y, ""#3dots"") ; Tl.DrawText(x2, y, ""#3dots"");. // Draw Fourth Column; y = 0.96; x1 = 0.62; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#nabla"") ; Tl.DrawText(x2, y, ""#nabla"");; y -= step ; Tl.DrawLatex(x1, y, ""#downleftarrow"") ; Tl.DrawText(x2, y, ""#downleftarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#topbar"") ; Tl.DrawText(x2, y, ""#topbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbar"") ; Tl.DrawText(x2, y, ""#arcbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#uparrow"") ; Tl.DrawText(x2, y, ""#uparrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#oplus"") ; Tl.DrawText(x2, y, ""#oplus"");; y -= step ; Tl.DrawLatex(x1, y, ""#Uparrow"") ; Tl.DrawText(x2, y, ""#Uparrow"");; y -= step ; Tl.DrawLatex(x1, y-0.01, ""#sum"") ; Tl.DrawText(x2, y, ""#sum"");; y -= step ; Tl.DrawLatex(x1, y, ""#perp"") ; Tl.DrawText(x2, y, ""#perp"");; y -= step ; Tl.DrawLatex(x1, y, ""#forall"") ; Tl.DrawText(x2, y, ""#forall"");; y -= step ; Tl.DrawLatex(x1, y, ""#spade"") ; Tl.DrawText(x2, y, ""#spade"");; y -= step ; Tl.DrawLatex(x1, y, ""#Rgothic"") ; Tl.DrawText(x2, y, ""#Rgothic"");; y -= step ; Tl.DrawLatex(x1, y, ""#GT"") ; Tl.DrawText(x2, y, ""#GT"");; y -= step ; Tl.DrawLatex(x1, y, ""#propto"") ; Tl.DrawText(x2, y, ""#propto"");; y -= step ; Tl.DrawLatex(x1, y, ""#notsubset"") ; Tl.DrawText(x2, y, ""#notsubse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLatex.html:7420,down,downleftarrow,7420,root/html534/TLatex.html,https://root.cern,https://root.cern/root/html534/TLatex.html,3,['down'],['downleftarrow']
Availability,"ax = 0 . ). virtual . Fit histogram with the function pointer f1. ; Parameters. [in]f1pointer to the function object ; [in]optionstring defining the fit options (see table below). ; [in]goptionspecify a list of graphics options. See TH1::Draw for a complete list of these options. ; [in]xxminlower fitting range ; [in]xxmaxupper fitting range . ReturnsA smart pointer to the TFitResult class. Histogram Fitting Options; Here is the full list of fit options that can be given in the parameter option. Several options can be used together by concatanating the strings without the need of any delimiters. option description . ""L"" Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts. . ""WL"" Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits. . ""P"" Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value. . ""MULTI"" Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape. . ""W"" Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins. . ""WW"" Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins. . ""I"" Uses the integral of function in the bin instead of the default bin center value. . ""F"" Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter. . ""U"" Uses a user specified objective function (e.g. user providedlikelihood function) defined using TVirtualFitter::SetFCN . ""E"" Performs a better parameter errors estimation using the Minos technique for all fit parameters. . ""M"" Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:126335,error,errors,126335,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"ax iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrategy = stra; }. void SetErrorDef(double err); set error def. { fErrorDef = err; }. void SetMinimizerType(const char* type); set minimizer type. { fMinimType = type; }. void SetMinimizerAlgorithm(const char* type); set minimizer algorithm. { fAlgoType = type; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:5848,toler,tolerance,5848,root/html602/ROOT__Math__MinimizerOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"ax iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrategy = stra; }. void SetErrorDef(double err); set error def. { fErrorDef = err; }. void SetMinimizerType(const char* type); set minimizer type. { fMinimType = type; }. void SetMinimizerAlgorithm(const char* type); set minimizer algorithm. { fAlgoType = type; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__MinimizerOptions.html:5848,toler,tolerance,5848,root/html534/ROOT__Math__MinimizerOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__MinimizerOptions.html,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"ax iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrategy = stra; }. void SetErrorDef(double err); set error def. { fErrorDef = err; }. void SetMinimizerType(const char* type); set minimizer type. { fMinimType = type; }. void SetMinimizerAlgorithm(const char* type); set minimizer algorithm. { fAlgoType = type; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__MinimizerOptions.html:5848,toler,tolerance,5848,root/html604/ROOT__Math__MinimizerOptions.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__MinimizerOptions.html,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"ax to define systematic variations.; 1036This is done in two steps: a) register variations for one or more existing columns using Vary() and b) extract variations; 1037of normal RDataFrame results using \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"". In between these steps, no other change; 1038to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated; 1039through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied; 1040results. \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" is included in header `ROOT/RDFHelpers.hxx`. The compiled C++ programs must include this header; 1041explicitly, this is not required for ROOT macros. ; 1042 ; 1043An example usage of Vary() and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in C++:; 1044 ; 1045~~~{.cpp}; 1046auto nominal_hx =; 1047 df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); 1048 .Filter(""pt > pt_cut""); 1049 .Define(""x"", someFunc, {""pt""}); 1050 .Histo1D<float>(""x"");; 1051 ; 1052// request the generation of varied results from the nominal_hx; 1053ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1054 ; 1055// the event loop runs here, upon first access to any of the results or varied results:; 1056hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); 1057hx[""pt:down""].Draw(""SAME"");; 1058hx[""pt:up""].Draw(""SAME"");; 1059~~~; 1060 ; 1061A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; 1062as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; 1063this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; 1064to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:61003,down,down,61003,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['down'],['down']
Availability,"ax());; line->Draw();; ; // Have the number of entries on the first histogram (to cross check when running; // with entry lists); TPaveStats *psdmd = (TPaveStats *)hdmd->GetListOfFunctions()->FindObject(""stats"");; psdmd->SetOptStat(1110);; c1->Modified();; ; //save the entry list to a Root file if one was produced; if (fillList) {; elist = dynamic_cast<TEntryList*>(fOutput->FindObject(""elist""));; if (elist) {; TFile efile(""elist.root"",""recreate"");; elist->Write();; } else {; Error(""Terminate"", ""entry list requested but not found in output"");; }; }; }; f#define f(i)Definition RSha256.hxx:104; Bool_tbool Bool_tDefinition RtypesCore.h:63; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; gDirectory#define gDirectoryDefinition TDirectory.h:384; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; gDebugInt_t gDebugDefinition TROOT.cxx:597; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; TEntryList::Entervirtual bool Enter(Long64_t entry, TTree *tree=nullptr)Add entry #entry to the list.Definition TEntryList.cxx:631; TEntryList::SetDirectoryvirtual void SetDirectory(TDirectory *dir)Add reference to directory dir. dir can be 0.Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxy_8C.html:11443,error,error,11443,doc/master/h1analysisProxy_8C.html,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html,1,['error'],['error']
Availability,"axbuf = 100000 . ). Parses content of file and tries to produce xml structures. ; The maxbuf argument specifies the max size of the XML file to be parsed. The default value is 100000. ; Definition at line 1356 of file TXMLEngine.cxx. ◆ ParseStream(). XMLDocPointer_t TXMLEngine::ParseStream ; (; TXMLInputStream * ; input). protected . parses content of the stream and tries to produce xml structures ; Definition at line 1380 of file TXMLEngine.cxx. ◆ ParseString(). XMLDocPointer_t TXMLEngine::ParseString ; (; const char * ; xmlstring). parses content of string and tries to produce xml structures ; Definition at line 1369 of file TXMLEngine.cxx. ◆ ReadNode(). XMLNodePointer_t TXMLEngine::ReadNode ; (; XMLNodePointer_t ; xmlparent, . TXMLInputStream * ; inp, . Int_t & ; resvalue . ). protected . Tries to construct xml node from input stream. ; Node should be child of xmlparent node or it can be closing tag of xmlparent. resvalue <= 0 if error resvalue == 1 if this is endnode of parent resvalue == 2 if this is child ; Definition at line 1775 of file TXMLEngine.cxx. ◆ ReadSingleNode(). XMLNodePointer_t TXMLEngine::ReadSingleNode ; (; const char * ; src). read single xmlnode from provided string ; Definition at line 1463 of file TXMLEngine.cxx. ◆ SaveDoc(). void TXMLEngine::SaveDoc ; (; XMLDocPointer_t ; xmldoc, . const char * ; filename, . Int_t ; layout = 1 . ). store document content to file if layout<=0, no any spaces or newlines will be placed between xmlnodes. ; Xml file will have minimum size, but non-readable structure if (layout>0) each node will be started from new line, and number of spaces will correspond to structure depth. ; Definition at line 1306 of file TXMLEngine.cxx. ◆ SaveNode(). void TXMLEngine::SaveNode ; (; XMLNodePointer_t ; xmlnode, . TXMLOutputStream * ; out, . Int_t ; layout, . Int_t ; level . ). protected . stream data of xmlnode to output ; Definition at line 1673 of file TXMLEngine.cxx. ◆ SaveSingleNode(). void TXMLEngine::SaveSingleNode ; (; X",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLEngine.html:32342,error,error,32342,doc/master/classTXMLEngine.html,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html,1,['error'],['error']
Availability,"aximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=3.44258 cHl3=4.96668 cHq3=0.0273884; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; ... (remaining 14 messages suppressed); ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=-3.35967 cHl3=-9.58704 cHq3=-6.27461; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:13360,recover,recover,13360,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['recover'],['recover']
Availability,"aximum number of steps of RooIntegrator1D in the global default configuration; RooAbsPdf::defaultGeneratorConfig()->getConfigSection(""RooAcceptReject"").setRealValue(""nTrial1D"", 2000);; ; // Example of how to change the parameters of a numeric integrator; // (Each config section is a RooArgSet with RooRealVars holding real-valued parameters; // and RooCategories holding parameters with a finite set of options); model.specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""chatLevel"", 1);; ; // Generate 10Kevt using RooFoamGenerator (FOAM verbosity increased with above chatLevel adjustment for illustration; // purposes); std::unique_ptr<RooDataSet> data_foam{model.generate(x, 10000, Verbose())};; data_foam->Print();; }; RooArgSet.h; RooChebychev.h; RooDataSet.h; RooNumGenConfig.h; RooPlot.h; RooRealVar.h; TAxis.h; TCanvas.h; RooAbsCollection::setRealValuebool setRealValue(const char *name, double newVal=0.0, bool verbose=false)Set value of a RooAbsRealLValue stored in set with given name to newVal No error messages are printed...Definition RooAbsCollection.cxx:999; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooCategory::setLabelbool setLabel(const char *label, bool printError=true) overrideSet value by specifying the name of the desired state.Definition RooCategory.cxx:186; RooChebychevChebychev polynomial p.d.f.Definition RooChebychev.h:25; RooNumGenConfig::method1DRooCategory & method1D(bool cond, bool cat)Definition RooNumGenConfig.cxx:172; RooNumGenConfig::getConfigSectionconst RooArgSet & getConfigSection(const char *name) constRetrieve configuration information specific to integrator with given name.Definition RooNumGenConfig.cxx:288; RooRealVarVariable that can be changed from the outside",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8C.html:3208,error,error,3208,doc/master/rf902__numgenconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8C.html,1,['error'],['error']
Availability,"aximum will be stored here. false if failed (e.g. if the initial axis limits are wrong or the new range is more than \( 2^{64} \) times the old one). ; Definition at line 6460 of file TH1.cxx. ◆ FindObject() [1/2]. TObject * TH1::FindObject ; (; const char * ; name); const. overridevirtual . Search object named name in the list of functions. ; Reimplemented from TObject.; Definition at line 3857 of file TH1.cxx. ◆ FindObject() [2/2]. TObject * TH1::FindObject ; (; const TObject * ; obj); const. overridevirtual . Search object obj in the list of functions. ; Reimplemented from TObject.; Definition at line 3866 of file TH1.cxx. ◆ Fit() [1/2]. TFitResultPtr TH1::Fit ; (; const char * ; fname, . Option_t * ; option = """", . Option_t * ; goption = """", . Double_t ; xxmin = 0, . Double_t ; xxmax = 0 . ). virtual . Fit histogram with function fname. ; fname is the name of a function available in the global ROOT list of functions gROOT->GetListOfFunctions The list include any TF1 object created by the user plus some pre-defined functions which are automatically created by ROOT the first time a pre-defined function is requested from gROOT (i.e. when calling gROOT->GetFunction(const char *name)). These pre-defined functions are:; gaus, gausn where gausn is the normalized Gaussian; landau, landaun; expo; pol1,...9, chebyshev1,...9. For printing the list of all available functions do: TF1::InitStandardFunctions(); // not needed if `gROOT->GetFunction` is called before; gROOT->GetListOfFunctions()->ls(); fname can also be a formula that is accepted by the linear fitter containing the special operator ++, representing linear components separated by ++ sign, for example x++sin(x) for fitting [0]*x+[1]*sin(x); This function finds a pointer to the TF1 object with name fname and calls TH1::Fit(TF1 *, Option_t *, Option_t *,; Double_t, Double_t). See there for the fitting options and the details about fitting histograms ; Definition at line 3898 of file TH1.cxx. ◆ Fit() [2/2]. TFitResult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:124111,avail,available,124111,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['avail'],['available']
Availability,"axis such that x is in the axis range. ;  ; Int_t Fill (Double_t x, Double_t y, Double_t z, Double_t t) override;  Fill a Profile3D histogram (no weights). ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t z, Double_t t, Double_t w);  Fill a Profile3D histogram with weights. ;  ; Double_t GetBinContent (Int_t bin) const override;  Return bin content of a Profile3D histogram. ;  ; Double_t GetBinContent (Int_t binx, Int_t biny, Int_t binz) const override;  ; Double_t GetBinContent (Int_t, Int_t) const override;  ; virtual Double_t GetBinEffectiveEntries (Int_t bin);  Return bin effective entries for a weighted filled Profile histogram. ;  ; virtual Double_t GetBinEntries (Int_t bin) const;  Return bin entries of a Profile3D histogram. ;  ; Double_t GetBinError (Int_t bin) const override;  Return bin error of a Profile3D histogram. ;  ; Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const override;  ; Double_t GetBinError (Int_t, Int_t) const override;  ; virtual TArrayD * GetBinSumw2 ();  ; virtual const TArrayD * GetBinSumw2 () const;  ; Option_t * GetErrorOption () const;  Return option to compute profile2D errors. ;  ; void GetStats (Double_t *stats) const override;  fill the array stats from the contents of this profile. ;  ; virtual Double_t GetTmax () const;  ; virtual Double_t GetTmin () const;  ; TClass * IsA () const override;  ; void LabelsDeflate (Option_t *axis=""X"") override;  Reduce the number of bins for this axis to the number of bins having a label. ;  ; void LabelsInflate (Option_t *axis=""X"") override;  Double the number of bins for axis. ;  ; void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"") override;  Set option(s) to draw axis with labels. ;  ; Long64_t Merge (TCollection *list) override;  Merge all histograms in the collection in this histogram. ;  ; Bool_t Multiply (const TH1 *h1) override;  Multiply this profile2D by h1. ;  ; Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:5801,error,errors,5801,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['error'],['errors']
Availability,"axis);; 1209 if ( hold ) {; 1210 fTsumwt = hold->fTsumwt;; 1211 fTsumwt2 = hold->fTsumwt2;; 1212 delete hold;; 1213 }; 1214}; 1215 ; 1216////////////////////////////////////////////////////////////////////////////////; 1217/// Save primitive as a C++ statement(s) on output stream out.; 1218///; 1219/// Note the following restrictions in the code generated:; 1220/// - variable bin size not implemented; 1221/// - SetErrorOption not implemented; 1222 ; 1223void TProfile3D::SavePrimitive(std::ostream &out, Option_t *option /*= """"*/); 1224{; 1225 char quote = '""';; 1226 out <<"" ""<<std::endl;; 1227 out <<"" ""<<ClassName()<<"" *"";; 1228 ; 1229 out << GetName() << "" = new "" << ClassName() << ""("" << quote; 1230 << GetName() << quote << "","" << quote<< GetTitle() << quote; 1231 << "","" << GetXaxis()->GetNbins();; 1232 out << "","" << GetXaxis()->GetXmin(); 1233 << "","" << GetXaxis()->GetXmax();; 1234 out << "","" << GetYaxis()->GetNbins();; 1235 out << "","" << GetYaxis()->GetXmin(); 1236 << "","" << GetYaxis()->GetXmax();; 1237 out << "","" << GetZaxis()->GetNbins();; 1238 out << "","" << GetZaxis()->GetXmin(); 1239 << "","" << GetZaxis()->GetXmax();; 1240 out << "","" << fTmin; 1241 << "","" << fTmax;; 1242 out << "");"" << std::endl;; 1243 ; 1244 ; 1245 // save bin entries; 1246 Int_t bin;; 1247 for (bin=0;bin<fNcells;bin++) {; 1248 Double_t bi = GetBinEntries(bin);; 1249 if (bi) {; 1250 out<<"" ""<<GetName()<<""->SetBinEntries(""<<bin<<"",""<<bi<<"");""<<std::endl;; 1251 }; 1252 }; 1253 //save bin contents; 1254 for (bin=0;bin<fNcells;bin++) {; 1255 Double_t bc = fArray[bin];; 1256 if (bc) {; 1257 out<<"" ""<<GetName()<<""->SetBinContent(""<<bin<<"",""<<bc<<"");""<<std::endl;; 1258 }; 1259 }; 1260 // save bin errors; 1261 if (fSumw2.fN) {; 1262 for (bin=0;bin<fNcells;bin++) {; 1263 Double_t be = TMath::Sqrt(fSumw2.fArray[bin]);; 1264 if (be) {; 1265 out<<"" ""<<GetName()<<""->SetBinError(""<<bin<<"",""<<be<<"");""<<std::endl;; 1266 }; 1267 }; 1268 }; 1269 ; 1270 TH1::SavePrimitiveHelp(out, GetName(), option);; 1271}; 127",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:47775,error,errors,47775,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['error'],['errors']
Availability,"axit] history of values of mu obtained on all iterations to date; Double_tfMutoltermination parameters; Double_tfPhimerit function, defined as the sum of the complementarity gap; Double_t*fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Double_t*fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpLinSolverBase*fSys. Class Charts. Inheritance Chart:. TObject. ←; TQpSolverBase. ←. TGondzioSolver. TMehrotraSolver. Function documentation; TQpSolverBase(); Default constructor. TQpSolverBase(const TQpSolverBase& another); Copy constructor. ~TQpSolverBase(); Deconstructor. void Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Implements a default starting-point heuristic. While interior-point theory; places fairly loose restrictions on the choice of starting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpSolverBase.html:8633,robust,robustness,8633,root/html602/TQpSolverBase.html,https://root.cern,https://root.cern/root/html602/TQpSolverBase.html,2,['robust'],['robustness']
Availability,"axpar]; TObject*fPlotPointer to TGraph object created by mncont; Double_t*fPrho[fMaxpar] Minimum point of parabola; Double_t*fPstar[fMaxpar2]; Double_t*fPstst[fMaxpar]; Double_t*fSEEKxbest[fMaxpar] array used in mnseek; Double_t*fSEEKxmid[fMaxpar] array used in mnseek; Double_t*fSIMPy[fMaxpar] array used in mnsimp; Int_tfStatusStatus flag for the last called Minuit function; Double_t*fU[fMaxpar2] External (visible to user in FCN) value of parameters; Double_tfUndefiUndefined number = -54321; Double_tfUpFCN+-UP defines errors (for chisquare fits UP=1); Double_tfUpdflt; Double_t*fVERTpp[fMaxpar] array used in mnvert; Double_t*fVERTq[fMaxpar] array used in mnvert; Double_t*fVERTs[fMaxpar] array used in mnvert; Double_t*fVhmat[fMaxpar5] (Internal) error matrix stored as Half MATrix, since it is symmetric; Double_tfVlimhi; Double_tfVlimlo; Double_t*fVthmat[fMaxpar5] VHMAT is sometimes saved in VTHMAT, especially in MNMNOT; TStringfWarmes[100]; Double_t*fWerr[fMaxpar] External parameters error (standard deviation, defined by UP); Double_t*fWord7[fMaxpar]; Double_t*fX[fMaxpar] Internal parameters values; Double_tfXdircr; Double_tfXmidcr; Double_t*fXpt[fMaxcpt] X array of points for contours; Double_t*fXs[fMaxpar] Internal parameters values saved for fixed params; Double_t*fXt[fMaxpar] Internal parameters values X saved as Xt; Double_t*fXts[fMaxpar] Internal parameters values X saved as Xt for fixed params; Double_tfYdircr; Double_tfYmidcr; Double_t*fYpt[fMaxcpt] Y array of points for contours; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMinuit::(anonymous)kMAXWARN; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:28566,error,error,28566,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,2,['error'],['error']
Availability,"ay (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Public Attributes; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  . Additional Inherited Members;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . #include <TArrayC.h>. Inheritance diagram for TArrayC:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TArrayC() [1/4]. TArrayC::TArrayC ; (; ). Default TArrayC ctor. ; Definition at line 26 of file TArrayC.cxx. ◆ TArrayC() [2/4]. TArrayC::TArrayC ; (; Int_t ; n). Create TArrayC object and set array size to n chars. ; Definition at line 34 of file TArrayC.cxx. ◆ TArrayC() [3/4]. TArrayC::TArrayC ; (; Int_t ; n, . const Char_t * ; array . ). Create TArrayC object and initialize it with values of array. ; Definition at line 43 of file TArrayC.cxx. ◆ TArrayC() [4/4]. TArrayC::TArrayC ; (; const TArrayC & ; array). Copy constructor. ; Definition at line 52 of file TArrayC.cxx. ◆ ~TArrayC(). TArrayC::~TArrayC ; (; ). virtual . Delete TArrayC object. ; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayC.html:2858,error,error,2858,doc/master/classTArrayC.html,https://root.cern,https://root.cern/doc/master/classTArrayC.html,1,['error'],['error']
Availability,"ay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; - ""text"" (simple text output); - ""graph"" (evoluting graphical training curves); - ""update=X"" (step for the text/graph output update); - ""+"" will skip the randomisation and start from the previous values.; - ""current"" (draw in the current canvas); - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; - ""minErrorTest"" (stop when NN error on the test sample gets below minE; All combinations are available. Double_t Result(Int_t event, Int_t index = 0) const; Computes the output for a given event.; Look at the output neuron designed by index. Double_t GetError(Int_t event) const; Error on the output for a given event. Double_t GetError(TMultiLayerPerceptron::EDataSet set) const; Error on the whole dataset. Double_t GetSumSquareError() const; Error on the output for a given event. Double_t GetCrossEntropyBinary() const; Cross entropy error for sigmoid output neurons, for a given event. Double_t GetCrossEntropy() const; Cross entropy error for a softmax output neuron, for a given event. void ComputeDEDw() const; Compute the DEDw = sum on all training events of dedw for each weight; normalized by the number of events. void Randomize() const; Randomize the weights. void AttachData(); Connects the TTree to Neurons in input and output; layers. The formulas associated to each neuron ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:25169,error,error,25169,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,18,"['avail', 'error']","['available', 'error']"
Availability,"ay come from; 75/// future RNTuple versions (e.g. an unknown Structure); 76class RInvalidField final : public RFieldBase {; 77 std::string fError;; 78 ; 79protected:; 80 std::unique_ptr<RFieldBase> CloneImpl(std::string_view newName) const final; 81 {; 82 return std::make_unique<RInvalidField>(newName, GetTypeName(), fError);; 83 }; 84 void ConstructValue(void *) const final {}; 85 ; 86public:; 87 RInvalidField(std::string_view name, std::string_view type, std::string_view error); 88 : RFieldBase(name, type, ENTupleStructure::kLeaf, false /* isSimple */), fError(error); 89 {; 90 }; 91 ; 92 const std::string &GetError() const { return fError; }; 93 ; 94 size_t GetValueSize() const final { return 0; }; 95 size_t GetAlignment() const final { return 0; }; 96}; // RInvalidField; 97 ; 98/// The field for a class with dictionary; 99class RClassField : public RFieldBase {; 100private:; 101 enum ESubFieldRole {; 102 kBaseClass,; 103 kDataMember,; 104 };; 105 struct RSubFieldInfo {; 106 ESubFieldRole fRole;; 107 std::size_t fOffset;; 108 };; 109 /// Prefix used in the subfield names generated for base classes; 110 static constexpr const char *kPrefixInherited{"":""};; 111 ; 112 class RClassDeleter : public RDeleter {; 113 private:; 114 TClass *fClass;; 115 ; 116 public:; 117 explicit RClassDeleter(TClass *cl) : fClass(cl) {}; 118 void operator()(void *objPtr, bool dtorOnly) final;; 119 };; 120 ; 121 TClass *fClass;; 122 /// Additional information kept for each entry in `fSubFields`; 123 std::vector<RSubFieldInfo> fSubFieldsInfo;; 124 std::size_t fMaxAlignment = 1;; 125 ; 126private:; 127 RClassField(std::string_view fieldName, const RClassField &source); ///< Used by CloneImpl; 128 RClassField(std::string_view fieldName, std::string_view className, TClass *classp);; 129 void Attach(std::unique_ptr<RFieldBase> child, RSubFieldInfo info);; 130 /// Register post-read callbacks corresponding to a list of ROOT I/O customization rules. `classp` is used to; 131 /// fill the `TVirtualO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RField_8hxx_source.html:2957,error,error,2957,doc/master/RField_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RField_8hxx_source.html,2,['error'],['error']
Availability,"ay normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that MINUIT prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:6853,error,errors,6853,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['errors']
Availability,"ay server; TListTGedEditor::fCreatedTabslist of created tabs; Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TEveElement*fElementCached eve-element pointer.; UInt_tTGFrame::fEventMaskcurrenty active event mask; TMapTGedEditor::fExclMapmap of excluded editors for selected model; TGFrameElement*TGFrame::fFEpointer to frame element; TMapTGedEditor::fFrameMapglobal map of available frames; TListTGedEditor::fGedFrameslist visible of frames; Bool_tTGedEditor::fGlobaltrue if editor is global; UInt_tTGFrame::fHeightframe height; TStringTGMainFrame::fIconNameicon name; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGMainFrame::fMWMFuncsMWM functions; UInt_tTGMainFrame::fMWMInputMWM input modes; UInt_tTGMainFrame::fMWMValueMWM decoration hints; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TObject*TGedEditor::fModelselected object; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; TObject*fObjectCached tobj pointer.; UInt_tTGFrame::fOptionsframe options; TVirtualPad*TGedEditor::fPadselected pad; const TGWindow*TGWindow::fParentParent window; TStringTGMainFrame::fResourceNameWM resource name; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGedEditor.html:22713,mask,mask,22713,root/html602/TEveGedEditor.html,https://root.cern,https://root.cern/root/html602/TEveGedEditor.html,4,"['avail', 'mask']","['available', 'mask']"
Availability,"ay); TStringCreateLeafList() const; virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); UInt_tDimensions(Int_t columnIndex) const; Int_tDimensions(const Char_t* columnName = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; tableDescriptor_st*end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; void*TTable::GetArray() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual const Char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableDescriptor.html:3064,error,error,3064,root/html602/TTableDescriptor.html,https://root.cern,https://root.cern/root/html602/TTableDescriptor.html,2,['error'],['error']
Availability,"ay.h:68; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TClonesArrayfriend class TClonesArrayDefinition TObject.h:240; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Classstatic TClass * Class(); TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TRealDataThe TRealData class manages the effective list of all data members for a given class.Definition TRealData.h:30; TRealData::kTransient@ kTransientDefinition TRealData.h:44; TRealData::GetThisOffsetLong_t GetThisOffset() constDefinition TRealData.h:55; TStreamerArtificial::Classstatic TClass * Class(); TStreamerBase::Classstatic TClass * Class(); TStreamerBasicPointerDefinition TStreamerElement.h:198; TStreamerBasicPointer::Classstatic TClass * Class(); TStreamerBasicPointer::GetCountNameconst char * GetCountName() constDefinition TStreamerElement.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:291028,error,error,291028,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"ay: public TSeqCollection. TRefArray. An array of references to TObjects. The array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!. The array elements can be retrieved with:; TObject *obj = array.At(i);. By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. Function Members (Methods); public:. TRefArray(TProcessID* pid = 0); TRefArray(const TRefArray& a); TRefArray(Int_t s, TProcessID* pid); TRefArray(Int_t s, Int_t lowerBound = 0, TProcessID* pid = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRefArray.html:1246,error,error,1246,root/html528/TRefArray.html,https://root.cern,https://root.cern/root/html528/TRefArray.html,3,['error'],['error']
Availability,"ay: public TSeqCollection. TRefArray. An array of references to TObjects. The array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!. The array elements can be retrieved with:; TObject *obj = array.At(i);. By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRefArray.html:1246,error,error,1246,root/html534/TRefArray.html,https://root.cern,https://root.cern/root/html534/TRefArray.html,3,['error'],['error']
Availability,"ayDouble_t * fArrayDefinition TArrayD.h:30; TArrayD::Resetvoid Reset()Definition TArrayD.h:47; TArray::fNInt_t fNDefinition TArray.h:38; TArray::GetSizeInt_t GetSize() constDefinition TArray.h:47; TAxisClass to manage histogram axis.Definition TAxis.h:31; TCollectionCollection abstract base class.Definition TCollection.h:65; TF11-Dim function classDefinition TF1.h:233; TH1MergerDefinition TH1Merger.h:20; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::fSumw2TArrayD fSumw2Array of sum of squares of weights.Definition TH1.h:104; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH2::GetBinInt_t GetBin(Int_t binx, Int_t biny, Int_t binz=0) const overrideReturn Global bin number corresponding to binx,y,z.Definition TH2.cxx:1086; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TObjectMother of all ROOT objects.Definition TObject.h:41; TProfile2DProfile2D histograms are used to display the mean value of Z and its error for each cell in X,...Definition TProfile2D.h:27; TProfile2D::MergeLong64_t Merge(TCollection *list) overrideMerge all histograms in the collection in this histogram.Definition TProfile2D.cxx:1227; TProfile2D::SetBinsvoid SetBins(Int_t, Double_t, Double_t) overrideRedefine x axis parameters.Definition TProfile2D.h:67; TProfile2D::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TProfile2D.cxx:1474; TProfile2D::BufferFillInt_t BufferFill(Double_t, Double_t) overrideaccumulate arguments in buffer.Definition TProfile2D.h:44; TProfile2D::fTsumwzDouble_t fTsumwzTotal Sum of weight*Z.Definition TProfile2D.h:39; TProfile2D::FillInt_t Fill(const Double_t *v)Definition TProfile2D.h:51; TProfile2D::ProjectionXYTH2D * ProjectionXY(const char *name=""_pxy"", Option_t *option=""e"") constProject this profile2D into a 2-D histogram along X,Y.Definition TProfile2D.cxx:1287; TProfile2D::MultiplyBool_t Mul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8h_source.html:11092,error,error,11092,doc/master/TProfile2D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8h_source.html,1,['error'],['error']
Availability,"ayIndex(DataMemberInfo_t*) const; virtual Bool_tDeclare(const char* code); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE*, const char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidExecuteWithArgsAndReturn(TMethod* method, void* address, const void*[] args = 0, int = 0, void* ret = 0) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual voidFuncTempInfo_Delete(FuncTempInfo_t*) const; virtual FuncTempInfo_t*FuncTempInfo_Factory(TInterpreter::DeclId_t declid) const; virtual FuncTempInfo_t*FuncTempInfo_FactoryCopy(FuncTempInfo_t*) const; virtual Bool_tFuncTempInfo_IsValid(FuncTempInfo_t*) const; virtual voidFuncTempInfo_Name(FuncTempInfo_t*, TString& name) const; virtual Long_tFuncTempInfo_Property(FuncTempInfo_t*) const; virtual UInt_tFuncTempInfo_T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:10055,error,error,10055,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['error'],['error']
Availability,"aybe use stat[1] ??; 302 // Double_t ey, sumw2=0;; 303// for (i=hxfirst;i<=hxlast;i++) {; 304// ey = GetBinError(i);; 305// sumw2 += ey*ey;; 306// }; 307 ; 308 ; 309 // set all default minimizer options (tolerance, max iterations, etc..); 310 fitConfig.SetMinimizerOptions(minOption);; 311 ; 312 // specific print level options; 313 if (fitOption.Verbose) fitConfig.MinimizerOptions().SetPrintLevel(3);; 314 if (fitOption.Quiet) fitConfig.MinimizerOptions().SetPrintLevel(0);; 315 ; 316 // specific minimizer options depending on minimizer; 317 if (linear) {; 318 if (fitOption.Robust ) {; 319 // robust fitting; 320 std::string type = ""Robust"";; 321 // if an h is specified print out the value adding to the type; 322 if (fitOption.hRobust > 0 && fitOption.hRobust < 1.); 323 type += "" (h="" + ROOT::Math::Util::ToString(fitOption.hRobust) + "")"";; 324 fitConfig.SetMinimizer(""Linear"",type.c_str());; 325 fitConfig.MinimizerOptions().SetTolerance(fitOption.hRobust); // use tolerance for passing robust parameter; 326 }; 327 else; 328 fitConfig.SetMinimizer(""Linear"","""");; 329 }; 330 else {; 331 if (fitOption.More) fitConfig.SetMinimizer(""Minuit"",""MigradImproved"");; 332 }; 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:12680,toler,tolerance,12680,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,2,"['robust', 'toler']","['robust', 'tolerance']"
Availability,"ays are preset to zero. ;  ;  TGraph2DErrors (Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *ex=nullptr, Double_t *ey=nullptr, Double_t *ez=nullptr, Option_t *option="""");  TGraph2DErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DErrors () override;  TGraph2DErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.);  Add a point with errorbars to the graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorY (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t GetErrorZ (Int_t bin) const override;  This function is called by Graph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:4120,error,errors,4120,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['errors']
Availability,"ays have it.; 1590///; 1591/// see also SetOptStat below.; 1592 ; 1593void TStyle::SetOptFit(Int_t mode); 1594{; 1595 fOptFit = mode;; 1596 if (gPad) {; 1597 TIter next(gPad->GetListOfPrimitives());; 1598 while (auto obj = next()) {; 1599 TObject *stats = obj->FindObject(""stats"");; 1600 if (stats) stats->SetBit(kTakeStyle);; 1601 }; 1602 gPad->Modified(); gPad->Update();; 1603 }; 1604}; 1605 ; 1606////////////////////////////////////////////////////////////////////////////////; 1607/// The type of information printed in the histogram statistics box; 1608/// can be selected via the parameter mode.; 1609/// The parameter mode can be = `ksiourmen`; 1610/// - k = 1; kurtosis printed; 1611/// - k = 2; kurtosis and kurtosis error printed; 1612/// - s = 1; skewness printed; 1613/// - s = 2; skewness and skewness error printed; 1614/// - i = 1; integral of bins printed; 1615/// - i = 2; integral of bins with option ""width"" printed; 1616/// - o = 1; number of overflows printed; 1617/// - u = 1; number of underflows printed; 1618/// - r = 1; rms printed; 1619/// - r = 2; rms and rms error printed; 1620/// - m = 1; mean value printed; 1621/// - m = 2; mean and mean error values printed; 1622/// - e = 1; number of entries printed; 1623/// - n = 1; name of histogram is printed; 1624///; 1625/// Example: `gStyle->SetOptStat(11);`; 1626/// print only name of histogram and number of entries.; 1627/// `gStyle->SetOptStat(1101);` displays the name of histogram, mean value and RMS.; 1628///; 1629/// #### Notes:; 1630///; 1631/// - never call `SetOptStat(000111);` but `SetOptStat(111)`, 000111 will; 1632/// be taken as an octal number !!; 1633/// - `SetOptStat(1)` is s shortcut allowing to set the most common case, and is; 1634/// taken as `SetOptStat(1111)` (for backward compatibility with older versions.; 1635/// If you want to print only the name of the histogram call `SetOptStat(1000000001)`.; 1636/// - that in case of 2-D histograms, when selecting just underflow (10000); 1637/// o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8cxx_source.html:53123,error,error,53123,doc/master/TStyle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8cxx_source.html,4,['error'],['error']
Availability,"b branches. TBranchElement(TBranch *parent, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree *tree, TBranch *parent, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Init when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. ~TBranchElement(); -- Destructor. TStreamerInfo* GetInfo() const; -- Get streamer info for the branch class. void Browse(TBrowser* b); -- Browse the branch content. void BuildTitle(const char* name); -- Set branch and leaf name and title in the case of a container sub-branch. Int_t Fill(); -- Loop on all leaves of this branch to fill the basket buffer. The function returns the number of bytes committed to the; individual branches. If a write error occurs, the number of; bytes returned is -1. If no data are written, because, e.g.,; the branch is disabled, the number of bytes returned is 0. Note: We not not use any member functions from TLeafElement!. void FillLeaves(TBuffer& b); -- Fill a buffer from the leaves of this branch. Note: We do not use any member functions from TLeafElement!; Except in the MakeClass case of a TClonesArray sub-branch. TBranch* FindBranch(const char* name); Find the immediate sub-branch with passed name. TLeaf* FindLeaf(const char* name); -- Find the leaf corresponding to the name 'searchname'. char* GetAddress() const; -- Get the branch address. If we are *not* owned by a MakeClass() tree:. If we are a top-level branch, return a pointer; to the pointer to our object. If we are *not* a top-level branch, return a pointer; to our object. If we are owned by a MakeClass() tree:. Return a pointer to our object. void InitInfo(); -- Init the streamer info for the branch class, try to compensate for class code unload/reload ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:19159,error,error,19159,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,1,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual floatColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual voidDeterminant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual floatE2Norm() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExtractRow(Int_t row, Int_t col, float* v, Int_t n = -1) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const Int_t*GetColIndexArray() const; virtual Int_t*GetColIndexArray(); Int_tGetColLwb() const; Int_tGetColUpb() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual voidGetMatrix2Array(float* data, Option_t* option = """") const; virtual const float*GetMatrixArray() const; virtual float*GetMatrixArray(); virtual const char*TObject::GetName() const; Int_tGetNcols() const; Int_tGetNoElements() const; Int_tGetNrows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_float_.html:8934,error,error,8934,root/html528/TMatrixTBase_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_float_.html,6,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooDataSet*RooAbsGenContext::generate(Int_t nEvents = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddGenContext.html:2259,error,error,2259,root/html526/RooAddGenContext.html,https://root.cern,https://root.cern/root/html526/RooAddGenContext.html,18,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooDataSet*RooAbsGenContext::generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddGenContext.html:2259,error,error,2259,root/html532/RooAddGenContext.html,https://root.cern,https://root.cern/root/html532/RooAddGenContext.html,5,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*RooAbsGenContext::generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddGenContext.html:2259,error,error,2259,root/html534/RooAddGenContext.html,https://root.cern,https://root.cern/root/html534/RooAddGenContext.html,16,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*RooAbsGenContext::generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual voidgenerateEvent(RooArgSet& theEvent, Int_t remaining); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooConvGenContext.html:2440,error,error,2440,root/html534/RooConvGenContext.html,https://root.cern,https://root.cern/root/html534/RooConvGenContext.html,2,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*RooAbsGenContext::generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGenContext.html:2195,error,error,2195,root/html532/RooGenContext.html,https://root.cern,https://root.cern/root/html532/RooGenContext.html,1,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinnedGenContext.html:1858,error,error,1858,root/html534/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html534/RooBinnedGenContext.html,6,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsGenContext::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooAbsGenContext::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinnedGenContext.html:1858,error,error,1858,root/html532/RooBinnedGenContext.html,https://root.cern,https://root.cern/root/html532/RooBinnedGenContext.html,2,['error'],['error']
Availability,"b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TVirtualPerfStats*&TVirtualPerfStats::CurrentPerfStats(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; static const char*TVirtualPerfStats::EventType(TVirtualPerfStats::EEventType type); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFileEvent(const char* slave, const char* slavename, const char* nodename, const char* filename, Bool_t isStart); virtual voidFileOpenEvent(TFile* file, const char* filename, Double_t start); virtual voidFileReadEvent(TFile* file, Int_t len, Double_t start); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetBytesRead() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static voidGetMemValues(Long_t& vmax, Long_t& rmax); virtual const char*TObject::GetName() const; virtual Long64_tGetNumEvents() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPerfStats.html:1614,error,error,1614,root/html534/TPerfStats.html,https://root.cern,https://root.cern/root/html534/TPerfStats.html,3,['error'],['error']
Availability,"b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::VirtualIntegratorOneDim&ROOT::Math::VirtualIntegratorOneDim::operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const. private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 1e-12); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumber",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html:2632,error,error,2632,root/html534/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html,1,['error'],['error']
Availability,"b.Definition TMathBase.h:198; CMYK adds the black component which allows better quality for black printing. PostScript and PDF support the CMYK model. c = 0 means TPostScript and TPDF will use RGB color model (default); c = 1 means TPostScript and TPDF will use CMYK color model . Definition at line 1275 of file TStyle.cxx. ◆ SetDateX(). void TStyle::SetDateX ; (; Float_t ; x = 0.01). inline . Definition at line 337 of file TStyle.h. ◆ SetDateY(). void TStyle::SetDateY ; (; Float_t ; y = 0.01). inline . Definition at line 338 of file TStyle.h. ◆ SetDrawBorder(). void TStyle::SetDrawBorder ; (; Int_t ; drawborder = 1). inline . Definition at line 342 of file TStyle.h. ◆ SetEndErrorSize(). void TStyle::SetEndErrorSize ; (; Float_t ; np = 2). Set the size (in pixels) of the small lines drawn at the end of the error bars (TH1 or TGraphErrors). ; The default value is 2 pixels. Set np=0 to remove these lines ; Definition at line 1340 of file TStyle.cxx. ◆ SetErrorX(). void TStyle::SetErrorX ; (; Float_t ; errorx = 0.5). inline . Definition at line 340 of file TStyle.h. ◆ SetExponentOffset(). void TStyle::SetExponentOffset ; (; Float_t ; xoff = 0., . Float_t ; yoff = 0., . Option_t * ; axis = ""XY"" . ). Method set X and Y offset of the axis 10^n notation. ; It applies on axis belonging to an histogram (TAxis). It has no effect on standalone TGaxis. It is in % of the pad size. It can be negative. axis specifies which axis (""x"",""y""), default = ""x"" if axis=""xz"" set the two axes ; Definition at line 1836 of file TStyle.cxx. ◆ SetFitFormat(). void TStyle::SetFitFormat ; (; const char * ; format = ""5.4g""). inline . Definition at line 301 of file TStyle.h. ◆ SetFrameBorderMode(). void TStyle::SetFrameBorderMode ; (; Int_t ; mode = 1). inline . Definition at line 378 of file TStyle.h. ◆ SetFrameBorderSize(). void TStyle::SetFrameBorderSize ; (; Width_t ; size = 1). inline . Definition at line 377 of file TStyle.h. ◆ SetFrameFillColor(). void TStyle::SetFrameFillColor ; (; Color_t ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:69404,error,errorx,69404,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['error'],['errorx']
Availability,"b::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define R__ASSERT(e);  Checks condition e and reports a fatal error if it's false. ;  ; #define R__CHECK(e);  Checks condition e and reports a warning message if it's false. ;  . Typedefs; typedef void(* ErrorHandlerFunc_t) (int level, Bool_t abort, const char *location, const char *msg);  ; using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = std::function< const char *()>;  Retrieves the error string associated with the last system error. ;  . Functions; void AbstractMethod (const char *method);  This function can be used in abstract base classes in case one does not want to make the class a ""real"" (in C++ sense) ABC. ;  ; void Break (const char *location, const char *msgfmt,...);  Use this function in case an error occurred. ;  ; void DefaultErrorHandler (int level, Bool_t abort, const char *location, const char *msg);  The default error handler function. ;  ; void Error (const char *location, const char *msgfmt,...);  Use this function in case an error occurred. ;  ; void ErrorHandler (int level, const char *location, const char *fmt, std::va_list va);  General error handler function. It calls the user set error handler. ;  ; void Fatal (const char *location, const char *msgfmt,...);  Use this function in case of a fatal error. It will abort the program. ;  ; ErrorHandlerFunc_t GetErrorHandler ();  Returns the current error handler function. ;  ; ErrorSystemMsgHandlerFunc_t ROOT::Internal::GetErrorSystemMsgHandler ();  ; void Info (const char *location, const char *msgfmt,...);  Use this function for informational messages. ;  ; void MayNotUse (const char *method);  This function can be used in classes that should override a certain function, but in the inherited class the function makes no sense. ;  ; void ROOT::Internal::MinimalErrorHandler (Int_t level, Bool_t abort_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:1542,error,error,1542,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['error']
Availability,"b>WARNING 2:</b> for backward compatibility with older versions; 564 ; 565 gStyle->SetOptStat(1);; 566 ; 567is taken as:; 568 ; 569 gStyle->SetOptStat(1111); 570 ; 571To print only the name of the histogram do:; 572 ; 573 gStyle->SetOptStat(1000000001);; 574 ; 575<b>NOTE</b> that in case of 2D histograms, when selecting only underflow; 576(10000) or overflow (100000), the statistics box will show all combinations; 577of underflow/overflows and not just one single number.; 578 ; 579The parameter mode can be any combination of the letters `kKsSiIourRmMen`; 580 ; 581 k : kurtosis printed; 582 K : kurtosis and kurtosis error printed; 583 s : skewness printed; 584 S : skewness and skewness error printed; 585 i : integral of bins printed; 586 I : integral of bins with option ""width"" printed; 587 o : number of overflows printed; 588 u : number of underflows printed; 589 r : standard deviation printed; 590 R : standard deviation and standard deviation error printed; 591 m : mean value printed; 592 M : mean value mean error values printed; 593 e : number of entries printed; 594 n : name of histogram is printed; 595 ; 596For example, to print only name of histogram and number of entries do:; 597 ; 598 gStyle->SetOptStat(""ne"");; 599 ; 600To print only the name of the histogram do:; 601 ; 602 gStyle->SetOptStat(""n"");; 603 ; 604The default value is:; 605 ; 606 gStyle->SetOptStat(""nemr"");; 607 ; 608When a histogram is painted, a `TPaveStats` object is created and added; 609to the list of functions of the histogram. If a `TPaveStats` object; 610already exists in the histogram list of functions, the existing object is just; 611updated with the current histogram parameters.; 612 ; 613Once a histogram is painted, the statistics box can be accessed using; 614`h->FindObject(""stats"")`. In the command line it is enough to do:; 615 ; 616 Root > h->Draw(); 617 Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); 618 ; 619because after `h->Draw()` the histogram is automatically paint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:26521,error,error,26521,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,4,['error'],['error']
Availability,"bBBox, char mode)TPadprivate; DrawEventStatus(Int_t event, Int_t x, Int_t y, TObject *selected)TCanvasprivate; DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char *title="""") overrideTPadvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditorBar()TCanvasvirtual; EmbedInto(Int_t winid, Int_t ww, Int_t wh)TCanvas; Emit(const char *signal, const T &arg)TQObjectinline; Emit(const char *signal)TQObjectinline; EmitVA(const char *signal_name, Int_t, const T &... params)TQObjectinline; EnterLeave(TPad *prevSelPad, TObject *prevSelObj)TCanvas; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EventPave()TPadinlinevirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTCanvasprotectedvirtual; ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis *axis) overrideTPadvirtual; fAbsCoordTPadprotected; fAbsHNDCTPadprotected; fAbsPixeltoXkTPadprotected; fAbsPixeltoYkTPadprotected; fAbsWNDCTPadprotected; fAbsXlowNDCTPadprotected; fAbsYlowNDCTPadprotected; fAfileTAttPadprotected; fAspectRatioTPadprotected; fAstatTAttPadprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBatchTCanvasprotected; fBitsTObjectprivate; fBorderModeTPadprotected; fBorderSizeTPadprotected; fBottomMarginTAttPadprotected; fCanvasTPadprotected; fCanvasIDTCanvasprotected; fCanvasImpTCanvasprotected; fCattTCanvasprotected; fCGnxTPadprotected; fCGnyTPadprotected; fChTCanvasprotected; fClickSelectedTCanvasprotected; fClickSelectedPadTCanvasprotected; fCollideGridTPadprotected; fContextMenuTCanvasprotected; fCopyGLDeviceTPadprotected; fCrosshairTPadprotected; fCrosshairPosTPadprotected; fCwTCanvasprotected; fDISPLAYTCanvasprotected; fDoubleBufferTCanvasprotected; fDrawnTCanvasprotected; fEditableTPadprotected; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas-members.html:6455,error,error,6455,doc/master/classTCanvas-members.html,https://root.cern,https://root.cern/doc/master/classTCanvas-members.html,2,['error'],['error']
Availability,"bGSL;  ; TGRadioButton * fLibMinuit;  ; TGRadioButton * fLibMinuit2;  ; TGCheckButton * fLinearFit;  switch on/off linear fit option ;  ; TGComboBox * fMethodList;  contains method list ;  ; TGCompositeFrame * fMinimization;  minimization tab ;  ; TGComboBox * fMinMethodList;  ; TGCheckButton * fNoChi2;  switch on/off option 'No Chi-square' ;  ; TGCheckButton * fNoDrawing;  switch on/off 'no drawing' option ;  ; TGRadioButton * fNone;  set no operation mode ;  ; TGRadioButton * fNormAdd;  set normalized addition mode ;  ; TGCheckButton * fNoStoreDrawing;  switch on/off 'no store/drwing' option ;  ; TGRadioButton * fOptDefault;  set default printing mode ;  ; TGRadioButton * fOptQuiet;  set printing mode to 'Quiet' ;  ; TGRadioButton * fOptVerbose;  set printing mode to 'Verbose' ;  ; TVirtualPad * fParentPad;  pad containing the object ;  ; std::multimap< TObject *, TF1 * > fPrevFit;  ; TGTextButton * fResetButton;  resets fit parameters ;  ; TGNumberEntry * fRobustValue;  contains robust value for linear fit ;  ; TGLabel * fSelLabel;  contains selected fit function ;  ; TGTextButton * fSetParam;  open set parameters dialog ;  ; TGDoubleHSlider * fSliderX;  slider to set fit range along x-axis ;  ; TGNumberEntry * fSliderXMax;  entry to set the maximum in the range ;  ; TGNumberEntry * fSliderXMin;  entry to set the minumum in the range ;  ; TGHorizontalFrame * fSliderXParent;  parent of fSliderX ;  ; TGDoubleHSlider * fSliderY;  slider to set fit range along y-axis ;  ; TGNumberEntry * fSliderYMax;  entry to set the maximum in the range ;  ; TGNumberEntry * fSliderYMin;  entry to set the minumum in the range ;  ; TGHorizontalFrame * fSliderYParent;  parent of fSliderY ;  ; TGDoubleHSlider * fSliderZ;  slider to set fit range along z-axis ;  ; TGHorizontalFrame * fSliderZParent;  parent of fSliderZ ;  ; TGStatusBar * fStatusBar;  ; TF1NormSum * fSumFunc;  ! TF1NormSum object ;  ; std::vector< TF1 * > fSystemFuncs;  ; TGTab * fTab;  tab widget holding the editor ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitEditor.html:41967,robust,robust,41967,doc/master/classTFitEditor.html,https://root.cern,https://root.cern/doc/master/classTFitEditor.html,1,['robust'],['robust']
Availability,"background sources (with errors) can be subtracted. The following sources of systematic error are considered:; (a) uncorrelated errors on the input matrix histA, taken as the; errors provided with the histogram.; These are typically statistical errors from finite Monte Carlo samples. (b) correlated shifts of the input matrix histA. These shifts are taken; as one-sigma effects when switchig on a given error soure.; several such error sources may be defined. (c) a systematic error on the regularisation parameter tau. (d) uncorrelated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general ar NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:1337,error,errors,1337,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['error'],['errors']
Availability,"background sources. Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general ar NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (0); GetEmatrix() (0)+(d)+(e); GetEmatrixTotal() (0)+(a)+(b)+(c)+(d)+(e). Example:. TH2D *histA,*histAsys1,*histAsys2,*histBgr1,*histBgr2;; TH1D *data;; assume the above histograms are filled:; histA: migration matrix from generator (x-axis) to detector (y-axis); the errors of histA are the uncorrelated systematic errors; histAsys1: alternative migration matrix, when systematic #1 is applied; histAsys1: alternative migration matrix, when systematic #2 is applied; histBgr: known background to the data, with erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:2048,error,error,2048,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,6,['error'],"['error', 'errors']"
Availability,"backs.http_error != NULL)) {; 4395 /* Mark in_error_handler to avoid recursion and call user callback. */; 4396 conn->in_error_handler = 1;; 4397 handled_by_callback =; 4398 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4399 == 0);; 4400 conn->in_error_handler = 0;; 4401 }; 4402 ; 4403 if (!handled_by_callback) {; 4404 /* Check for recursion */; 4405 if (conn->in_error_handler) {; 4406 DEBUG_TRACE(; 4407 ""Recursion when handling error %u - fall back to default"",; 4408 status);; 4409#if !defined(NO_FILESYSTEMS); 4410 } else {; 4411 /* Send user defined error pages, if defined */; 4412 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4413 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4414 page_handler_found = 0;; 4415 ; 4416 if (error_handler != NULL) {; 4417 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4418 switch (scope) {; 4419 case 1: /* Handler for specific error, e.g. 404 error */; 4420 mg_snprintf(conn,; 4421 &truncated,; 4422 path_buf,; 4423 sizeof(path_buf) - 32,; 4424 ""%serror%03u."",; 4425 error_handler,; 4426 status);; 4427 break;; 4428 case 2: /* Handler for error group, e.g., 5xx error; 4429 * handler; 4430 * for all server errors (500-599) */; 4431 mg_snprintf(conn,; 4432 &truncated,; 4433 path_buf,; 4434 sizeof(path_buf) - 32,; 4435 ""%serror%01uxx."",; 4436 error_handler,; 4437 status / 100);; 4438 break;; 4439 default: /* Handler for all errors */; 4440 mg_snprintf(conn,; 4441 &truncated,; 4442 path_buf,; 4443 sizeof(path_buf) - 32,; 4444 ""%serror."",; 4445 error_handler);; 4446 break;; 4447 }; 4448 ; 4449 /* String truncation in buf may only occur if; 4450 * error_handler is too long. This string is; 4451 * from the config, not from a client. */; 4452 (void)truncated;; 4453 ; 4454 /* The following code is redundant, but it should avoid; 4455 * false positives in static source code analyzers and; 4456 * vulnerability scanners.; 4457 */; 4458 path_buf[sizeof(path_buf) - 32] = 0;; 4459 len = (int)strl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:132291,error,error,132291,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"backs.http_error != NULL)) {; 4396 /* Mark in_error_handler to avoid recursion and call user callback. */; 4397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:132323,error,error,132323,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"bal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:10600,avail,available,10600,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['avail'],['available']
Availability,"bal CC; 284 if (fGlobalCC.size() != npar) fGlobalCC.resize(npar);; 285 for (unsigned int i = 0; i < npar; ++i) {; 286 double globcc = min->GlobalCC(i);; 287 if (globcc < 0) {; 288 fGlobalCC.clear();; 289 break; // it is not supported by that minimizer; 290 }; 291 fGlobalCC[i] = globcc;; 292 }; 293 ; 294 }; 295 return true;; 296}; 297 ; 298void FitResult::NormalizeErrors() {; 299 // normalize errors and covariance matrix according to chi2 value; 300 if (fNdf == 0 || fChi2 <= 0) return;; 301 double s2 = fChi2/fNdf;; 302 double s = std::sqrt(fChi2/fNdf);; 303 for (unsigned int i = 0; i < fErrors.size() ; ++i); 304 fErrors[i] *= s;; 305 for (unsigned int i = 0; i < fCovMatrix.size() ; ++i); 306 fCovMatrix[i] *= s2;; 307 ; 308 fNormalized = true;; 309}; 310 ; 311void FitResult::SetChi2AndNdf(double chi2, unsigned int npoints) {; 312 if (chi2 >= 0); 313 fChi2 = chi2;; 314 if (npoints > fNFree ); 315 fNdf = npoints - fNFree;; 316 else; 317 fNdf = 0;; 318}; 319 ; 320double FitResult::Prob() const {; 321 // fit probability; 322 return ROOT::Math::chisquared_cdf_c(fChi2, static_cast<double>(fNdf) );; 323}; 324 ; 325bool FitResult::HasMinosError(unsigned int i) const {; 326 // query if the parameter i has the Minos error; 327 std::map<unsigned int, std::pair<double,double> >::const_iterator itr = fMinosErrors.find(i);; 328 return (itr != fMinosErrors.end() );; 329}; 330 ; 331 ; 332double FitResult::LowerError(unsigned int i) const {; 333 // return lower Minos error for parameter i; 334 // return the parabolic error if Minos error has not been calculated for the parameter i; 335 std::map<unsigned int, std::pair<double,double> >::const_iterator itr = fMinosErrors.find(i);; 336 return ( itr != fMinosErrors.end() ) ? itr->second.first : Error(i) ;; 337}; 338 ; 339double FitResult::UpperError(unsigned int i) const {; 340 // return upper Minos error for parameter i; 341 // return the parabolic error if Minos error has not been calculated for the parameter i; 342 std::map<unsigned int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:10817,error,error,10817,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['error'],['error']
Availability,"bars (TH1 or TGraphErrors).Definition TStyle.cxx:1340; TStyle::SetErrorXvoid SetErrorX(Float_t errorx=0.5)Definition TStyle.h:340. The options ""E3"" and ""E4"" draw an error band through the end points of the vertical error bars. With ""E4"" the error band is smoothed. Because of the smoothing algorithm used some artefacts may appear at the end of the band like in the following example. In such cases ""E3"" should be used instead of ""E4"".; {; auto ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; auto he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; auto he3 = (TH1F*)he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; }. 2D histograms can be drawn with error bars as shown is the following example:; {; auto c2e = new TCanvas(""c2e"",""c2e"",600,400);; auto h2e = new TH2F(""h2e"",""TH2 drawn with option E"",40,-4,4,40,-20,20);; float px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2e->Fill(px,5*py);; }; h2e->Draw(""E"");; }. The bar chart option; The option ""B"" allows to draw simple vertical bar charts. The bar width is controlled with TH1::SetBarWidth(), and the bar offset within the bin, with TH1::SetBarOffset(). These two settings are useful to draw several histograms on the same plot as shown in the following example:; {; int i;; const Int_t nx = 8;; string os_X[nx] = {""8"",""32"",""128"",""512"",""2048"",""8192"",""32768"",""131072""};; float d_35_0[nx] = {0.75, -3.30, -0.92, 0.10, 0.08, -1.69, -1.29, -2.37};; float d_35_1[nx] = {1.01, -3.02, -0.65, 0.37, 0.34, -1.42, -1.02, -2.10};; ; auto cb = new TCanvas(""cb"",""cb"",600,400);; cb->SetGrid();; ; gStyle->SetHistMinimumZero();; ; auto h1b = new TH1F(""h1b"",""Option B example"",nx,0,nx);; h1b->SetFillColor(4);; h1b->SetBarWidth(0.4);; h1b->SetBarOffset(0.1);; h1b->SetStats(0);; h1b->SetMinimum(-5);; h1b->SetMaxim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:29748,error,error,29748,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"base class for RooFit objects that are to be attached to ROOT directories ;  CRooDLLSignificanceMCSModuleRooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero) ;  CRooDoubleRooDouble is a minimal implementation of a TObject holding a Double_t value ;  CRooDstD0BGSpecial p.d.f shape that can be used to model the background of D*-D0 mass difference distributions ;  CRooEffGenContextRooEffGenContext is a specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function ;  CRooEfficiencyRooEfficiency is a PDF helper class to fit efficiencies parameterized by a supplied function F ;  ►CRooEffProd;  CCacheElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:89034,error,error,89034,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['error'],['error']
Availability,"base class for RooFit objects that are to be attached to ROOT directories ;  CRooDLLSignificanceMCSModuleRooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero) ;  CRooDoubleRooDouble is a minimal implementation of a TObject holding a Double_t value ;  CRooDstD0BGSpecial p.d.f shape that can be used to model the background of D*-D0 mass difference distributions ;  CRooEffGenContextRooEffGenContext is a specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function ;  CRooEfficiencyRooEfficiency is a PDF helper class to fit efficiencies parameterized by a supplied function F ;  ►CRooEffProd;  CCacheElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdfRooExtendPdf is a wrapper around an existing PDF that adds a parameteric extended likelihood term to the PDF, optionally divided by a fractional term from a partial normalization of the PDF: ;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdfPDF for the numerical (FFT) convolution of two PDFs ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:112156,error,error,112156,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,2,['error'],['error']
Availability,"based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 38026 2011-02-10 11:46:12Z rdm $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Chebyshev.html:3022,error,error,3022,root/html530/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 38026 2011-02-10 11:46:12Z rdm $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Chebyshev.html:3022,error,error,3022,root/html532/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"baskets (unless they are not stored individually on disk).; The option ""all"" also lead to DropBaskets being called on the sub-branches. void ExpandBasketArrays(); Increase BasketEntry buffer of a minimum of 10 locations; and a maximum of 50 per cent of current size. Int_t Fill(); Loop on all leaves of this branch to fill Basket buffer. The function returns the number of bytes committed to the memory basket.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because e.g. the branch is disabled,; the number of bytes returned is 0. Int_t FillEntryBuffer(TBasket* basket, TBuffer* buf, Int_t& lnew); Copy the data from fEntryBuffer into the current basket. TBranch* FindBranch(const char* name); -- Find the immediate sub-branch with passed name. TLeaf* FindLeaf(const char* name); -- Find the leaf corresponding to the name 'searchname'. Int_t FlushBaskets(); Flush to disk all the baskets of this branch and any of subbranches.; Return the number of bytes written or -1 in case of write error. Int_t FlushOneBasket(UInt_t which); If we have a write basket in memory and it contains some entries and; has not yet been written to disk, we write it and delete it from memory.; Return the number of bytes written;. TBasket* GetBasket(Int_t basket); Return pointer to basket basketnumber in this Branch. Long64_t GetBasketSeek(Int_t basket) const; Return address of basket in the file. TList* GetBrowsables(); Returns (and, if 0, creates) browsable objects for this branch; See TVirtualBranchBrowsable::FillListOfBrowsables. const char * GetClassName() const; Return the name of the user class whose content is stored in this branch,; if any. If this branch was created using the 'leaflist' technique, this; function returns an empty string. const char* GetIconName() const; Return icon name depending on type of branch. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all leaves of entry and return total number of bytes read. The input argument ""entry""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBranch.html:17765,error,error,17765,root/html532/TBranch.html,https://root.cern,https://root.cern/root/html532/TBranch.html,4,['error'],['error']
Availability,"baum 10/8/2008 vaguely based on R.Raja 6-Sep-2008. ;  ; Double_t Interpolate (Double_t x, Double_t y, Double_t z) const override;  illegal for a TH2 ;  ; virtual Double_t Interpolate (Double_t, Double_t);  NOT IMPLEMENTED for TH2Poly. ;  ; Bool_t IsInsideBin (Int_t binnr, Double_t x, Double_t y);  Return ""true"" if the point (x,y) is inside the bin of binnr. ;  ; Bool_t Multiply (TF1 *, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; TH2Poly & operator= (const TH2Poly &rhs);  Assignment operator. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1, Option_t *option="""") override;  Multiply this histogram by a constant c1. ;  ; void SetBinContent (Int_t bin, Double_t content) override;  Sets the contents of the input bin to the input content Negative values between -1 and -9 are for the overflows and the sea. ;  ; void SetBinContentChanged (Bool_t flag);  ; void SetBinError (Int_t bin, Double_t error) override;  Set the bin Error. ;  ; void SetFloat (Bool_t flag=true);  When set to kTRUE, allows the histogram to expand if a bin outside the limits is added. ;  ; void SetNewBinAdded (Bool_t flag);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny);  Increment 2D bin content by 1. ;  ; virtual void AddBinContent (Int_t binx, Int_t biny, Double_t w);  Increment 2D bin content by a weight w. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; void FillRandom (const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr) override;  Fill histogram following distribution in function fname. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:8397,error,error,8397,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['error'],['error']
Availability,"be created with the; ## method parameters; ; ## - The second argument is the output file for the training results; ; ## - The third argument is a string option defining some general configuration for the TMVA session. For example all TMVA output can be suppressed by removing the ""!"" (not) in front of the ""Silent"" argument in the option string; ; import ROOT; import os; ; TMVA = ROOT.TMVA; TFile = ROOT.TFile; ; TMVA.Tools.Instance(); ; # options to control used methods; useLikelihood = True # likelihood based discriminant; useLikelihoodKDE = False # likelihood based discriminant; useFischer = True # Fischer discriminant; useMLP = False # Multi Layer Perceptron (old TMVA NN implementation); useBDT = True # Boosted Decision Tree; useDL = True # TMVA Deep learning ( CPU or GPU); useKeras = True # Use Keras Deep Learning via PyMVA; ; if ROOT.gSystem.GetFromPipe(""root-config --has-tmva-pymva"") == ""yes"":; TMVA.PyMethodBase.PyInitialize(); else:; useKeras = False # cannot use Keras if PYMVA is not available; ; if useKeras:; try:; import tensorflow; except:; ROOT.Warning(""TMVA_Higgs_Classification"", ""Skip using Keras since tensorflow is not available""); useKeras = False; ; outputFile = TFile.Open(""Higgs_ClassificationOutput.root"", ""RECREATE""); factory = TMVA.Factory(; ""TMVA_Higgs_Classification"", outputFile, V=False, ROC=True, Silent=False, Color=True, AnalysisType=""Classification""; ); ; ; ## Setup Dataset(s); ; # Define now input data file and signal and background trees; ; inputFileName = ""Higgs_data.root""; inputFileLink = ""http://root.cern.ch/files/"" + inputFileName; ; ; if ROOT.gSystem.AccessPathName(inputFileName):; ROOT.Info(""TMVA_Higgs_Classification"", ""Download Higgs_data.root file""); TFile.SetCacheFileDir("".""); inputFile = TFile.Open(inputFileLink, ""CACHEREAD""); if inputFile is None:; raise FileNotFoundError(""Input file cannot be downloaded - exit""); else:; # file exists; inputFile = TFile.Open(inputFileName); ; ; # --- Register the training and test trees; signalTre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:57922,avail,available,57922,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['avail'],['available']
Availability,"be done if there is a parallel world. Activating navigation will automatically close the parallel geometry. ; Definition at line 4288 of file TGeoManager.cxx. ◆ SetUserPaintVolume(). void TGeoManager::SetUserPaintVolume ; (; TGeoVolume * ; vol). inline . Definition at line 235 of file TGeoManager.h. ◆ SetVerboseLevel(). void TGeoManager::SetVerboseLevel ; (; Int_t ; vl). static . Return current verbosity level (static function). ; Definition at line 4074 of file TGeoManager.cxx. ◆ SetVisDensity(). void TGeoManager::SetVisDensity ; (; Double_t ; density = 0.01). Set density threshold. ; Volumes with densities lower than this become transparent. ; Definition at line 2449 of file TGeoManager.cxx. ◆ SetVisibility(). void TGeoManager::SetVisibility ; (; TObject * ; obj, . Bool_t ; vis . ). Set visibility for a volume. ; Definition at line 1060 of file TGeoManager.cxx. ◆ SetVisLevel(). void TGeoManager::SetVisLevel ; (; Int_t ; level = 3). set default level down to which visualization is performed ; Definition at line 2459 of file TGeoManager.cxx. ◆ SetVisOption(). void TGeoManager::SetVisOption ; (; Int_t ; option = 0). set drawing mode : . option=0 (default) all nodes drawn down to vislevel; option=1 leaves and nodes at vislevel drawn; option=2 path is drawn; option=4 visibility changed . Definition at line 2426 of file TGeoManager.cxx. ◆ SetVolumeAttribute(). void TGeoManager::SetVolumeAttribute ; (; const char * ; name, . const char * ; att, . Int_t ; val . ). Set volume attributes in G3 style. ; Definition at line 2308 of file TGeoManager.cxx. ◆ SizeOf(). ULong_t TGeoManager::SizeOf ; (; const TGeoNode * ; node, . Option_t * ; option . ). virtual . computes the total size in bytes of the branch starting with node. ; The option can specify if all the branch has to be parsed or only the node ; Definition at line 3926 of file TGeoManager.cxx. ◆ SortOverlaps(). void TGeoManager::SortOverlaps ; (; ). Sort overlaps by decreasing overlap distance. Extrusions comes first. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:140046,down,down,140046,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['down'],['down']
Availability,"be of length nz+1 ; Reimplemented from TH1.; Definition at line 74 of file TProfile.h. ◆ SetBins() [6/7]. void TProfile::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). inlineoverrideprivatevirtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented from TH1.; Definition at line 68 of file TProfile.h. ◆ SetBins() [7/7]. void TProfile::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). inlineoverrideprivatevirtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented from TH1.; Definition at line 72 of file TProfile.h. ◆ SetBinsLength(). void TProfile::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow. ; Reallocate bin contents array ; Reimplemented from TH1D.; Definition at line 1729 of file TProfile.cxx. ◆ SetBuffer(). void TProfile::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). overridevirtual . Set the buffer size in units of 8 bytes (double). ; Reimplemented from TH1.; Definition at line 1738 of file TProfile.cxx. ◆ SetErrorOption(). void TProfile::SetErrorOption ; (; Option_t * ; option = """"). virtual . Set option to compute profile errors. ; The computation of the bin errors is based on the parameter option:; -' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y), i.e. the standard error of the bin contents. Note that if TProfile::Approximate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:87241,error,errors,87241,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,2,['error'],['errors']
Availability,"be one of 'NEW','CREATE','RECREATE','UPDATE' 'UPDATE' is usually used in conjunction with IncrementalMerge. ; Definition at line 304 of file TFileMerger.cxx. ◆ OutputFile() [4/5]. Bool_t TFileMerger::OutputFile ; (; const char * ; outputfile, . const char * ; mode = ""RECREATE"" . ). virtual . Open merger output file. ; 'mode' is passed to the TFile constructor as the option, it should be one of 'NEW','CREATE','RECREATE','UPDATE' 'UPDATE' is usually used in conjunction with IncrementalMerge. ; Definition at line 350 of file TFileMerger.cxx. ◆ OutputFile() [5/5]. Bool_t TFileMerger::OutputFile ; (; std::unique_ptr< TFile > ; file). virtual . Set an output file opened externally by the users. ; Definition at line 318 of file TFileMerger.cxx. ◆ PartialMerge(). Bool_t TFileMerger::PartialMerge ; (; Int_t ; in_type = kAll | kIncremental). virtual . Merge the files. ; If no output file was specified it will write into the file ""FileMerger.root"" in the working directory. Returns true on success, false in case of error. The type is defined by the bit values in EPartialMergeType: kRegular : normal merge, overwritting the output file kIncremental : merge the input file with the content of the output file (if already exising) (default) kResetable : merge only the objects with a MergeAfterReset member function. kNonResetable : merge only the objects without a MergeAfterReset member function. kDelayWrite : delay the TFile write (to reduce the number of write when reusing the file) kAll : merge all type of objects (default) kAllIncremental : merge incrementally all type of objects. kOnlyListed : merge only the objects specified in fObjectNames list kSkipListed : skip objects specified in fObjectNames list kKeepCompression: keep compression level unchanged for each input; If the type is not set to kIncremental, the output file is deleted at the end of this operation. ; Definition at line 926 of file TFileMerger.cxx. ◆ PrintFiles(). void TFileMerger::PrintFiles ; (; Option_t * ; optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:23961,error,error,23961,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['error'],['error']
Availability,"be retrieved from the previously performed fit using the TFitResult class. Note that to get the TFitResult, te fit should be done using the fit option S. Example: TFitResultPtr r = histo2d->Fit(func2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:97409,error,error,97409,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['error'],['error']
Availability,"be satisfied. The user can view and edit the full list of options using the ccmake utility or cmake-gui for Windows. Note that some of the options are not yet implemented.; The user can set any CMake variable or option that controls the build process from the cmake command line. The command using the option -D <var>:<type>=<value> creates an entry in the CMake cache. This is the list of the ROOT specific CMake options:. option name; default value; description. afdsmgrd; OFF; Dataset manager for PROOF-based analysis facilities. afs; OFF; AFS support, requires AFS libs and objects. alien; ON; AliEn support, requires libgapiUI from ALICE. all; OFF; Enable all optional components. asimage; ON; Image processing support, requires libAfterImage. astiff; ON; Include tiff support in image processing. bonjour; ON; Bonjour support, requires libdns_sd and/or Avahi. builtin_afterimage; ON; Built included libAfterImage, or use system libAfterImage. builtin_fftw3; OFF; Built the FFTW3 library internally (downloading tarfile from the Web) (ROOT 6 only). builtin_ftgl; ON; Built included libFTGL, or use system libftgl. builtin_freetype; OFF; Built included libfreetype, or use system libfreetype. builtin_glew; ON; Built included libGLEW, or use system libGLEW. builtin_pcre; OFF; Built included libpcre, or use system libpcre. builtin_zlib; OFF; Built included libz, or use system libz. builtin_lzma; OFF; Built included liblzma, or use system liblzma. builtin_davix; OFF; Built the Davix library internally (downloading tarfile from the Web). builtin_gsl; OFF; Built the GSL library internally (downloading tarfile from the Web). builtin_cfitsio; OFF; Built the FITSIO library internally (downloading tarfile from the Web). builtin_xrootd; OFF; Built the XROOTD internally (downloading tarfile from the Web). builtin_llvm; ON; Built the LLVM internally. builtin_tbb; OFF; Built the TBB internally. cxx11; ON; Build using C++11 compatible mode, requires gcc > 4.7.x or clang. cxx14; OFF; Build using ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:7531,down,downloading,7531,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['down'],['downloading']
Availability,"be selected via the parameter mode. The parameter mode can be = pcev (default = 0111) p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors. When v = 1 is specified, only the non-fixed parameters are shown.; When v = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to gStyle->SetOptFit(111). The error bars options. Option Description . ""E"" Default. Shows only the error bars, not a marker. . ""E1"" Small lines are drawn at the end of the error bars. . ""E2"" Error rectangles are drawn. . ""E3"" A filled area is drawn through the end points of the vertical error bars. . ""E4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""E0"" Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping . ""E5"" Like E3 but ignore the bins with 0 contents. . ""E6"" Like E4 but ignore the bins with 0 contents. . ""X0"" When used with one of the ""E"" option, it suppress the error bar along X as gStyle->SetErrorX(0) would do. . {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; }; TStyle::SetEndErrorSizevoid SetEndErrorSize(Float_t np=2)Set the size (in pixels) of the small lines drawn at the end of the error bars (TH1 or TGraphErrors).Definition TStyle.cxx:1340; TStyle::SetErrorXvoid SetErrorX(Float_t errorx=0.5)Definition TStyle.h:340. The options ""E3"" and ""E4"" draw an error band through the end points of the vertical error bars. With ""E4"" the error band is smoothed. Because of the smoothing algorithm used some artefacts may appear at t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:28217,error,error,28217,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:79055,error,error,79055,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['error'],['error']
Availability,"be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:78182,error,error,78182,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['error'],['error']
Availability,"be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. void setParameterizeIntegral(const RooArgSet& paramVars). Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. Bool_t getForceNumInt() const; { return _forceNumInt ; }. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:81485,error,error,81485,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['error'],['error']
Availability,"be used to superimpose systematic errors on top of a graph with statistical errors.; {; auto c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);; ; double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};; ; // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};; ; // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};; ; // Now draw data set (1); ; // We first have to draw it only with the stat errors; auto graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");; ; // Now draw data set (2); ; // We first have to draw it only with the stat errors; auto graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");; ; // Now we have to somehow depict the sys errors; ; auto graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; }; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70. TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors defined along X and Y are not symmetric: The left and right errors are different along X and the bottom and up errors are different along Y.; {; auto c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; auto gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetTitle(""Not symmetric errors"");; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:12989,error,errors,12989,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,4,['error'],['errors']
Availability,"be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:26178,error,error,26178,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['error'],['error']
Availability,"because top bins will be moved to overflow bin; 6348 }; 6349 // save the TAttAxis members (reset by SetBins); 6350 Int_t nDivisions = fXaxis.GetNdivisions();; 6351 Color_t axisColor = fXaxis.GetAxisColor();; 6352 Color_t labelColor = fXaxis.GetLabelColor();; 6353 Style_t labelFont = fXaxis.GetLabelFont();; 6354 Float_t labelOffset = fXaxis.GetLabelOffset();; 6355 Float_t labelSize = fXaxis.GetLabelSize();; 6356 Float_t tickLength = fXaxis.GetTickLength();; 6357 Float_t titleOffset = fXaxis.GetTitleOffset();; 6358 Float_t titleSize = fXaxis.GetTitleSize();; 6359 Color_t titleColor = fXaxis.GetTitleColor();; 6360 Style_t titleFont = fXaxis.GetTitleFont();; 6361 ; 6362 if(!xbins && (fXaxis.GetXbins()->GetSize() > 0)){ // variable bin sizes; 6363 Double_t *bins = new Double_t[newbins+1];; 6364 for(i = 0; i <= newbins; ++i) bins[i] = fXaxis.GetBinLowEdge(1+i*ngroup);; 6365 hnew->SetBins(newbins,bins); //this also changes errors array (if any); 6366 delete [] bins;; 6367 } else if (xbins) {; 6368 hnew->SetBins(newbins,xbins);; 6369 } else {; 6370 hnew->SetBins(newbins,xmin,xmax);; 6371 }; 6372 ; 6373 // Restore axis attributes; 6374 fXaxis.SetNdivisions(nDivisions);; 6375 fXaxis.SetAxisColor(axisColor);; 6376 fXaxis.SetLabelColor(labelColor);; 6377 fXaxis.SetLabelFont(labelFont);; 6378 fXaxis.SetLabelOffset(labelOffset);; 6379 fXaxis.SetLabelSize(labelSize);; 6380 fXaxis.SetTickLength(tickLength);; 6381 fXaxis.SetTitleOffset(titleOffset);; 6382 fXaxis.SetTitleSize(titleSize);; 6383 fXaxis.SetTitleColor(titleColor);; 6384 fXaxis.SetTitleFont(titleFont);; 6385 ; 6386 // copy merged bin contents (ignore under/overflows); 6387 // Start merging only once the new lowest edge is reached; 6388 Int_t startbin = 1;; 6389 const Double_t newxmin = hnew->GetXaxis()->GetBinLowEdge(1);; 6390 while( fXaxis.GetBinCenter(startbin) < newxmin && startbin <= nbins ) {; 6391 startbin++;; 6392 }; 6393 Int_t oldbin = startbin;; 6394 Double_t binContent, binError;; 6395 for (bin = 1;bin<=newbins;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:251475,error,errors,251475,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"becomes a normal distribution and the likelihood and chi2 fit; give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method in case of low; bin statistics, where the chi2 method may give incorrect results, in particular when there are; several empty bins (see also below).; In case of a weighted histogram, it is possible to perform a likelihood fit by using the; option ""WL"". Note a weighted histogram is an histogram which has been filled with weights and it; contains the sum of the weight square ( TH1::Sumw2() has been called). The bin error for a weighted; histogram is the square root of the sum of the weight square. Treatment of Empty Bins. Empty bins, which have the content equal to zero AND error equal to zero,; are excluded by default from the chisquare fit, but they are considered in the likelihood fit.; since they affect the likelihood if the function value in these bins is not negligible.; When using option ""WW"" these bins will be considered in the chi2 fit with an error of 1.; Note that if the histogram is having bins with zero content and non zero-errors they are considered as; any other bins in the fit. Instead bins with zero error and non-zero content are excluded in the chi2 fit.; A likelihood fit should also not be peformed on such an histogram, since we are assuming a wrong pdf for each bin.; In general, one should not fit an histogram with non-empty bins and zero errors, apart if all the bins have zero errors.; In this case one could use the option ""w"", which gives a weight=1 for each bin (unweighted least-square fit). Fitting a histogram of dimension N with a function of dimension N-1. It is possible to fit a TH2 with a TF1 or a TH3 with a TF2.; In this case the option ""Integral"" is not allowed and each cell has; equal weight. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:83828,error,error,83828,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['error']
Availability,"bed by the opaque handle 'h'. ;  ; virtual void Sleep (UInt_t milliSec);  Sleep milliSec milli seconds. ;  ; virtual TString SplitAclicMode (const char *filename, TString &mode, TString &args, TString &io) const;  This method split a filename of the form: ;  ; virtual void StackTrace ();  Print a stack trace. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual int Symlink (const char *from, const char *to);  Create a symbolic link from file1 to file2. ;  ; virtual void Syslog (ELogLevel level, const char *mess);  Send mess to syslog daemon. ;  ; virtual const char * TempDirectory () const;  Return a user configured or systemwide directory to create temporary files in. ;  ; virtual FILE * TempFileName (TString &base, const char *dir=nullptr, const char *suffix=nullptr);  Create a secure temporary file by appending a unique 6 letter string to base. ;  ; virtual int Umask (Int_t mask);  Set the process file creation mode mask. ;  ; virtual const char * UnixPathName (const char *unixpathname);  Convert from a local pathname to a Unix pathname. ;  ; virtual int Unlink (const char *name);  Unlink, i.e. ;  ; virtual void Unload (const char *module);  Unload a shared library. ;  ; virtual void Unsetenv (const char *name);  Unset environment variable. ;  ; virtual int Utime (const char *file, Long_t modtime, Long_t actime);  Set the a files modification and access times. ;  ; virtual char * Which (const char *search, const char *file, EAccessMode mode=kFileExists);  Find location of file in a search path. ;  ; virtual const char * WorkingDirectory ();  Return working directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheSystem.html:18861,mask,mask,18861,doc/master/classTDCacheSystem.html,https://root.cern,https://root.cern/doc/master/classTDCacheSystem.html,4,['mask'],['mask']
Availability,"bed by the opaque handle 'h'. ;  ; virtual void Sleep (UInt_t milliSec);  Sleep milliSec milli seconds. ;  ; virtual TString SplitAclicMode (const char *filename, TString &mode, TString &args, TString &io) const;  This method split a filename of the form: ;  ; virtual void StackTrace ();  Print a stack trace. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual int Symlink (const char *from, const char *to);  Create a symbolic link from file1 to file2. ;  ; virtual void Syslog (ELogLevel level, const char *mess);  Send mess to syslog daemon. ;  ; virtual const char * TempDirectory () const;  Return a user configured or systemwide directory to create temporary files in. ;  ; virtual FILE * TempFileName (TString &base, const char *dir=nullptr, const char *suffix=nullptr);  Create a secure temporary file by appending a unique 6 letter string to base. ;  ; virtual int Umask (Int_t mask);  Set the process file creation mode mask. ;  ; virtual const char * UnixPathName (const char *unixpathname);  Convert from a local pathname to a Unix pathname. ;  ; virtual void Unload (const char *module);  Unload a shared library. ;  ; virtual void Unsetenv (const char *name);  Unset environment variable. ;  ; virtual int Utime (const char *file, Long_t modtime, Long_t actime);  Set the a files modification and access times. ;  ; virtual char * Which (const char *search, const char *file, EAccessMode mode=kFileExists);  Find location of file in a search path. ;  ; virtual const char * WorkingDirectory ();  Return working directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:19173,mask,mask,19173,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,6,['mask'],['mask']
Availability,"been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 2051 Short_t keylen,cycle;; 2052 UInt_t datime;; 2053 Int_t nbytes,date,time,objlen,nwheader;; 2054 Long64_t seekkey,seekpdir;; 2055 char header[1024];; 2056 char *buffer, *bufread;; 2057 char nwhc;; 2058 Long64_t idcur = fBEGIN;; 2059 ; 2060 Long64_t size;; 2061 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy warnings; 2062 Error(""Recover"", ""cannot stat the file %s"", GetName());; 2063 return 0;; 2064 }; 2065 ; 2066 fEND = Long64_t(size);; 2067 ; 2068 if (fWritable && !fFree) fFree = new TList;; 2069 ; 2070 TKey *key;; 2071 Int_t nrecov = 0;; 2072 nwheader = 1024;; 2073 Int_t nread = nwheader;; 2074 ; 2075 while (idcur < fEND) {; 2076 Seek(idcur); // NOLINT: silence clang-tidy warnings; 2077 if (idcur+nread >= fEND) nread = fEND-idcur-1;; 2078 if (ReadBuffer(header, nread)) { // NOLINT: silence clang-tidy warnings; 2079 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:73253,recover,recovery,73253,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['recover'],['recovery']
Availability,"begin datetime default NULL,; end datetime default NULL,; walltime int(11) default NULL,; cputime float default NULL,; bytesread bigint(20) default NULL,; events bigint(20) default NULL,; totevents bigint(20) default NULL,; workers int(11) default NULL,; querytag varchar(64) NOT NULL,; vmemmxw bigint(20) default NULL,; rmemmxw bigint(20) default NULL,; vmemmxm bigint(20) default NULL,; rmemmxm bigint(20) default NULL,; numfiles int(11) default NULL,; dataset varchar(512) NOT NULL,; PRIMARY KEY (id) );. Int_t SendDataSetInfo(TDSet* , TList* , const char* , const char* ); Post information about the processed dataset(s). The information is taken; from the TDSet object 'dset' and integrated with the missing files; information in the list 'missing'. The string 'qid' is the uninque; ID of the query; 'begin' the starting time. The record is formatted for the table 'proofquerydsets'. There are two versions of this record, with or without the starting time.; The starting time could be looked up from the summary record, if available. The default version 1 corresponds to the table created with the following command:. CREATE TABLE proofquerydsets (; id int(11) NOT NULL auto_increment,; dsn varchar(512) NOT NULL,; querytag varchar(64) NOT NULL,; querybegin datetime default NULL,; numfiles int(11) default NULL,; missfiles int(11) default NULL,; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. Version 0 corresponds to the table created with the following command:; (no 'querybegin'). CREATE TABLE proofquerydsets (; id int(11) NOT NULL auto_increment,; dsn varchar(512) NOT NULL,; querytag varchar(64) NOT NULL,; numfiles int(11) default NULL,; missfiles int(11) default NULL,; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. The information is posted with a bulk insert. Returns 0 on success, -1 on failure. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Post information about the requested files. The information is taken; from the TDSet object 'dset' and integrated ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMonSenderSQL.html:9768,avail,available,9768,root/html602/TProofMonSenderSQL.html,https://root.cern,https://root.cern/root/html602/TProofMonSenderSQL.html,2,['avail'],['available']
Availability,"begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphBentErrors.cxx:474; TGraphBentErrors::GetEXlowdDouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphBentErrors.h:30; TGraphBentErrors::fEYhighdDouble_t * fEYhighd[fNpoints] array of Y high displacementsDefinition TGraphBentErrors.h:36; TGraphBentErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphBentErrors.cxx:278; TGraphBentErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphBentErrors.cxx:646; TGraphBentErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE***to arrays[***] or to f*** Copy points.Definition TGraphBentErrors.cxx:312; TGraphBentErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideGet low error on Y[i].Definition TGraphBentErrors.cxx:463; TGraphBentErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphBentErrors.cxx:402; TGraphBentErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideGet high error on Y[i].Definition TGraphBentErrors.cxx:452; TGraphBentErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphBentErrors.cxx:210; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::AllocateArraysDouble_t ** AllocateArrays(Int_t Narrays, Int_t arraySize)Allocate arrays.Definition TGraph.cxx:598; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8h_source.html:10738,error,errors,10738,doc/master/TGraphBentErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8h_source.html,1,['error'],['errors']
Availability,"begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphBentErrors.cxx:474; TGraphBentErrors::GetEXlowdDouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphBentErrors.h:30; TGraphBentErrors::fEYhighdDouble_t * fEYhighd[fNpoints] array of Y high displacementsDefinition TGraphBentErrors.h:36; TGraphBentErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphBentErrors.cxx:278; TGraphBentErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphBentErrors.cxx:646; TGraphBentErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE***to arrays[***] or to f*** Copy points.Definition TGraphBentErrors.cxx:312; TGraphBentErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideGet low error on Y[i].Definition TGraphBentErrors.cxx:463; TGraphBentErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphBentErrors.cxx:402; TGraphBentErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideGet high error on Y[i].Definition TGraphBentErrors.cxx:452; TGraphBentErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphBentErrors.cxx:210; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Classstatic TClass * Class(); TGraph::AddPointvirtual void AddPoint(Double_t x, Double_t y)Append a new point to the graph.Definition TGraph.h:98; TGraph::fNpointsInt_t fNpointsNumber of points <= fMaxSize.Definition TGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:30615,error,errors,30615,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['error'],['errors']
Availability,"begin{eqnarray*}; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \end{eqnarray*}. Consequently, \(\mathsf{B}\) is an upper triangle matrix, which can be readily inverted. So we now evaluate ; \[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \]. The model \(\mathsf{W}\mathbf{a}\) can therefore be written as \((\mathsf{F}\mathsf{B}^{-1})\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\); The original model \(\mathsf{F}\mathbf{c}\) is therefore identical with this if ; \[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \]. The reason we use \(\left(\mathsf{B}^{-1}\right)^T\) rather then \(\mathsf{B}^{-1}\) is to save storage, since \(\left(\mathsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:13166,error,errors,13166,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['errors']
Availability,"being closed; will not be referenced again, it is possible to minimize the size; of the TProcessID data structures in memory by forcing a delete of; the unused TProcessID. void CreatePackets(); -- Initialize the packet descriptor string. void DirectoryAutoAdd(TDirectory* ); Override the TTree::DirectoryAutoAdd behavior:; we never auto add. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Draw expression varexp for selected entries.; Returns -1 in case of error or number of selected events in case of success. This function accepts TCut objects as arguments.; Useful to use the string operator +, example:; ntuple.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Process all entries in this chain and draw histogram corresponding to; expression varexp.; Returns -1 in case of error or number of selected events in case of success. TBranch* FindBranch(const char* name); -- See TTree::GetReadEntry(). TLeaf* FindLeaf(const char* name); -- See TTree::GetReadEntry(). const char* GetAlias(const char* aliasName) const; -- Returns the expanded value of the alias. Search in the friends if any. TBranch* GetBranch(const char* name); -- Return pointer to the branch name in the current tree. Bool_t GetBranchStatus(const char* branchname) const; -- See TTree::GetReadEntry(). Long64_t GetChainEntryNumber(Long64_t entry) const; -- Return absolute entry number in the chain.; The input parameter entry is the entry number in; the current tree of this chain. Long64_t GetEntries() const; -- Return the total number of entries in the chain.; In case the number of entries in each tree is not yet known,; the offset table is computed. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); -- Get entry from the file to memory. getall = 0 : get only active branches; getall = 1 : get all branches. Retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TChain.html:34431,error,error,34431,root/html528/TChain.html,https://root.cern,https://root.cern/root/html528/TChain.html,1,['error'],['error']
Availability,"being closed; will not be referenced again, it is possible to minimize the size; of the TProcessID data structures in memory by forcing a delete of; the unused TProcessID. void CreatePackets(); -- Initialize the packet descriptor string. void DirectoryAutoAdd(TDirectory* ); Override the TTree::DirectoryAutoAdd behavior:; we never auto add. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Draw expression varexp for selected entries.; Returns -1 in case of error or number of selected events in case of success. This function accepts TCut objects as arguments.; Useful to use the string operator +, example:; ntuple.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Process all entries in this chain and draw histogram corresponding to; expression varexp.; Returns -1 in case of error or number of selected events in case of success. TBranch* FindBranch(const char* name); -- See TTree::GetReadEntry(). TLeaf* FindLeaf(const char* name); -- See TTree::GetReadEntry(). const char* GetAlias(const char* aliasName) const; -- Returns the expanded value of the alias. Search in the friends if any. TBranch* GetBranch(const char* name); -- Return pointer to the branch name in the current tree. Bool_t GetBranchStatus(const char* branchname) const; -- See TTree::GetReadEntry(). TTree::TClusterIterator GetClusterIterator(Long64_t firstentry); Return an iterator over the cluster of baskets starting at firstentry. This iterator is not yet supported for TChain object. Long64_t GetChainEntryNumber(Long64_t entry) const; -- Return absolute entry number in the chain.; The input parameter entry is the entry number in; the current tree of this chain. Long64_t GetEntries() const; -- Return the total number of entries in the chain.; In case the number of entries in each tree is not yet known,; the of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TChain.html:35544,error,error,35544,root/html530/TChain.html,https://root.cern,https://root.cern/root/html530/TChain.html,5,['error'],['error']
Availability,"belonging to volume and node objects, you can change them at any time (even when the picture is already drawn) and see immediately the result.; Colors and Line Styles; We have already described how to change the line colors for volumes. In fact, volume objects inherit from TAttLine class so the line style or width can also be changed:; myVolume->SetLineColor(kRed);; myVolume->SetLineWith(2);; myVolume->SetLineStyle(kDotted);; kRed@ kRedDefinition Rtypes.h:66; kDotted@ kDottedDefinition TAttLine.h:48; When drawing in solid mode, the color of the drawn volume corresponds to the line color.; Visibility Settings; The way geometry is build forces the definition of several volumes that does not represent real objects, but just virtual containers used for grouping and positioning volumes together. One would not want to see them in the picture. Since every volume is by default visible, one has to do this sort of tuning by its own:; myVolumeContainer->SetVisibility(kFALSE);; As described before, the drawing package supports two main global options: 1 (default) - only final volume leaves; 0 - all volumes down the drawn one appear on the screen. The global visible level put a limitation on the maximum applied depth. Combined with visibility settings per volume, these can tune quite well what should appear on the screen. However, there are situations when users want to see a volume branch displayed down to the maximum depth, keeping at the same time a limitation or even suppressing others. In order to accomplish that, one should use the volume attribute: ""Visible daughters"". By default, all daughters of all volumes are displayed if there is no limitation related with their level depth with respect to the top drawn volume. Ray Tracing; Ray tracing is a quite known drawing technique based on tracking rays from the eye position through all pixels of a view port device. The pixel color is derived from the properties of the first crossed surface, according some illumination model an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:111574,down,down,111574,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['down'],['down']
Availability,"benchmarks; TStringfDataSelSelector to be used for data benchmarks; TStringfDataSetName of the dataset; Bool_tfDebugDebug switch; TPBHistType*fHistTypeType of histograms for CPU runs; Int_tfNHistNumber of histograms to be created in default CPU runs; Int_tfNtriesNumber of times a measurement is repeated; TFile*fOutFileOutput file; TStringfOutFileNameName of the output file; TProof*fProofProof; TProof*fProofDSProof to be used for dataset actions; TPBReadType*fReadTypeType of read (partial, full); TProofBenchRunCPU*fRunCPUInstance to run CPU scans; TProofBenchRunDataRead*fRunDSInstance to run data-read scans. private:. Bool_tfUnlinkOutfileWhether to remove empty output files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); Constructor: check PROOF and load selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:""); Draw the CPU speedup plot.; opt = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:8027,error,error,8027,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['error'],['error']
Availability,"ber ; : of events ""nEventsMin"" as given in earlier versions; : If this number is too large, detailed features ; : in the parameter space are hard to be modelled. If it is too small, ; : the risk to overtrain rises and boosting seems to be less effective; : typical values from our current experience for best performance ; : are between 0.5(%) and 10(%) ; : ; : The default minimal number is currently set to ; : max(20, (N_training_events / N_variables^2 / 10)) ; : and can be changed by the user.; : ; : The other crucial parameter, the pruning strength (""PruneStrength""),; : is also related to overtraining. It is a regularisation parameter ; : that is used when determining after the training which splits ; : are considered statistically insignificant and are removed. The; : user is advised to carefully watch the BDT screen output for; : the comparison between efficiencies obtained on the training and; : the independent test sample. They should be equal within statistical; : errors, in order to minimize statistical fluctuations in different samples.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; BDTG : #events: (reweighted) sig: 1600 bkg: 1600; : #events: (unweighted) sig: 1600 bkg: 1600; : Training 100 Decision Trees ... patience please; : Elapsed time for training with 3200 events: 1.7 sec ; BDTG : [dataset] : Evaluation of BDTG on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.0183 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_BDTG.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_BDTG.class.C␛[0m; : data_RNN_CPU.root:/dataset/Method_BDT/BDTG; Factory : Training finished; : ; : Ranking input variables (method specific)...; : No variable ranking supplied by classifier: TMVA_LSTM; : No variable ranking supplied by classifier: TMVA_DNN; : No variable ranking supplied by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:33045,error,errors,33045,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['error'],['errors']
Availability,"ber Functions inherited from TGCocoa;  TGCocoa ();  ;  TGCocoa (const char *name, const char *title);  ;  ~TGCocoa () override;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t wid, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t wid, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t wid, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t wid, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGQuartz.html:4911,mask,mask,4911,doc/master/classTGQuartz.html,https://root.cern,https://root.cern/doc/master/classTGQuartz.html,1,['mask'],['mask']
Availability,"ber of events predicted by the model instead of scaling by the total data weight.; 4069/// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; 4070/// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; 4071/// (in RooFit jargon, ""if the pdf can be extended"").; 4072/// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; 4073/// and the chi2 will fall back to the total data weight to scale the normalized pdf.; 4074/// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; 4075/// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; 4076/// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; 4077/// printed and you'll most likely get garbage results.; 4078/// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; 4079/// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; 4080/// Multiple comma separated range names can be specified.; 4081/// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; 4082/// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); 4083/// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; 4084///; 4085/// <tr><th> <th> Options to control flow of fit procedure; 4086/// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; 4087/// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; 4088/// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:176961,error,error,176961,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['error']
Availability,"ber of keys that have been recovered.; 2016/// If no keys can be recovered, the file will be declared Zombie by; 2017/// the calling function. This function is automatically called when; 2018/// opening a file.; 2019/// If the file is open in read only mode, the file is not modified.; 2020/// If open in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 2051 Short_t keylen,cycle;; 2052 UInt_t datime;; 2053 Int_t nbytes,date,time,objlen,nwheader;; 2054 Long64_t seekkey,seekpdir;; 2055 char header[1024];; 2056 char *buffer, *bufread;; 2057 char nwhc;; 2058 Long64_t idcur = fBEGIN;; 2059 ; 2060 Long64_t size;; 2061 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy war",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:72745,recover,recovered,72745,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['recover'],['recovered']
Availability,"berInfo_t* dminfo) const; virtual intDataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; virtual const char*DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE* fout, char* name, int base, int start) const; virtual intDisplayIncludePath(FILE* fout) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static void*FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); virtual void*FindSym(const char* entry) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char* error) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:7766,error,error,7766,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['error'],['error']
Availability,"berInfo_t* dminfo) const; virtual intDataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; virtual const char*DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual intDisplayClass(FILE* fout, char* name, int base, int start) const; virtual intDisplayIncludePath(FILE* fout) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEnableWrappers(bool value = true); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static void*FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); virtual void*FindSym(const char* entry) const; virtual voidGenericError(const char* error) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:7746,error,error,7746,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['error'],['error']
Availability,"berNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TZIPFile.h 23916 2008-05-19 20:01:28Z brun $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TZIPFile.html:10991,error,error,10991,root/html528/TZIPFile.html,https://root.cern,https://root.cern/root/html528/TZIPFile.html,1,['error'],['error']
Availability,"berOfColorsInt_t GetNumberOfColors() constReturn number of colors in the color palette.Definition TStyle.cxx:1175; TStyle::fStatHFloat_t fStatHHeight of stat box.Definition TStyle.h:116; TStyle::GetOptFitInt_t GetOptFit() constDefinition TStyle.h:244; TStyle::fStatXFloat_t fStatXX position of top right corner of stat box.Definition TStyle.h:113; TStyle::fCanvasDefYInt_t fCanvasDefYDefault canvas top Y position.Definition TStyle.h:91; TStyle::GetNumberContoursInt_t GetNumberContours() constDefinition TStyle.h:241; TStyle::SetHistLineWidthvoid SetHistLineWidth(Width_t width=1)Definition TStyle.h:383; TStyle::fOrthoCameraBool_t fOrthoCameraUse orthographic camera with web display.Definition TStyle.h:150; TStyle::fPadBottomMarginFloat_t fPadBottomMarginPad bottom margin.Definition TStyle.h:95; TStyle::GetPaintTextFormatconst char * GetPaintTextFormat() constDefinition TStyle.h:250; TStyle::GetLineScalePSFloat_t GetLineScalePS() constDefinition TStyle.h:289; TStyle::fErrorXFloat_t fErrorXPer cent of bin width for errors along X.Definition TStyle.h:56; TStyle::SetLabelColorvoid SetLabelColor(Color_t color=1, Option_t *axis=""X"")Set axis labels color.Definition TStyle.cxx:1393; TStyle::SetCandleBoxRangevoid SetCandleBoxRange(Double_t bRange=0.5)By setting box-range for candle plot, one can force the box of the candle-chart to cover that given f...Definition TStyle.cxx:1956; TStyle::GetStatFontStyle_t GetStatFont() constDefinition TStyle.h:260; TStyle::SetLabelSizevoid SetLabelSize(Float_t size=0.04, Option_t *axis=""X"")Set size of axis labels.Definition TStyle.cxx:1444; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TStyle::fLegendBorderSizeWidth_t fLegendBorderSizeLegend box border size.Definition TStyle.h:63; TStyle::fStatWFloat_t fStatWWidth of stat box.Definition TStyle.h:115; TStyle::fYAxisExpYOffsetFloat_t fYAxisExpYOffsetY axis exponent labe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8cxx_source.html:125599,error,errors,125599,doc/master/TStyle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8cxx_source.html,1,['error'],['errors']
Availability,"bers; data members; class charts. ROOT; » GRAF3D; » GL; » TGLPlotCoordinates. class TGLPlotCoordinates. Helper class for plot-painters holding information about axis; ranges, numbers of bins and flags if certain axis is logartihmic. Function Members (Methods); public:. TGLPlotCoordinates(); virtual~TGLPlotCoordinates(); static TClass*Class(); EGLCoordTypeGetCoordType() const; Double_tGetFactor() const; Int_tGetFirstXBin() const; Int_tGetFirstYBin() const; Int_tGetFirstZBin() const; Int_tGetLastXBin() const; Int_tGetLastYBin() const; Int_tGetLastZBin() const; Int_tGetNXBins() const; Int_tGetNYBins() const; Int_tGetNZBins() const; const Rgl::BinRange_t&GetXBins() const; Double_tGetXLength() const; Bool_tGetXLog() const; const Rgl::Range_t&GetXRange() const; const Rgl::Range_t&GetXRangeScaled() const; Double_tGetXScale() const; const Rgl::BinRange_t&GetYBins() const; Double_tGetYLength() const; Bool_tGetYLog() const; const Rgl::Range_t&GetYRange() const; const Rgl::Range_t&GetYRangeScaled() const; Double_tGetYScale() const; const Rgl::BinRange_t&GetZBins() const; Double_tGetZLength() const; Bool_tGetZLog() const; const Rgl::Range_t&GetZRange() const; const Rgl::Range_t&GetZRangeScaled() const; Double_tGetZScale() const; virtual TClass*IsA() const; Bool_tModified() const; voidResetModified(); voidSetCoordType(EGLCoordType type); Bool_tSetRanges(TH2Poly* hist); Bool_tSetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRanges(const TAxis* xAxis, const TAxis* yAxis, const TAxis* zAxis); voidSetXLog(Bool_t xLog); voidSetYLog(Bool_t yLog); voidSetZLog(Bool_t zLog); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TGLPlotCoordinates(const TGLPlotCoordinates&); TGLPlotCoordinates&operator=(const TGLPlotCoordinates&); Bool_tSetRangesCartesian(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Bool_tSetRangesCylindrical(const TH1* hist); Bool_tSetRangesPola",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotCoordinates.html:1614,error,errors,1614,root/html528/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html528/TGLPlotCoordinates.html,3,['error'],['errors']
Availability,"between the specified set of points (x1, y1) and (x2, y2). ; GC components in use: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Reimplemented in TGQuartz.; Definition at line 1737 of file TGCocoa.mm. ◆ DrawLineAux(). void TGCocoa::DrawLineAux ; (; Drawable_t ; wid, . const GCValues_t & ; gcVals, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). Definition at line 1697 of file TGCocoa.mm. ◆ DrawRectangle(). void TGCocoa::DrawRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 1854 of file TGCocoa.mm. ◆ DrawRectangleAux(). void TGCocoa::DrawRectangleAux ; (; Drawable_t ; wid, . const GCValues_t & ; gcVals, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). Definition at line 1820 of file TGCocoa.mm. ◆ DrawSegments(). void TGCocoa::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:73707,mask,mask,73707,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['mask'],['mask']
Availability,"bie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCondor.html:6428,failure,failure,6428,root/html534/TCondor.html,https://root.cern,https://root.cern/root/html534/TCondor.html,1,['failure'],['failure']
Availability,"bie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCondor.html:6340,failure,failure,6340,root/html528/TCondor.html,https://root.cern,https://root.cern/root/html528/TCondor.html,3,['failure'],['failure']
Availability,"bie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible option to replace the name stored in the file. TFile *f = TFile::Open(""tmpname.root?reproducible=fixedname"",""RECREATE"",""File title"");. Definition at line 339 of file TFile.cxx. ◆ ~TFile(). TFile::~TFile ; (; ). override . File destructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:52387,recover,recovery,52387,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['recover'],['recovery']
Availability,"bilities > . void TMVA::DNN::Net::dropOutWeightFactor ; (; WeightsType & ; weights, . const DropProbabilities & ; drops, . bool ; inverse = false . ). set the drop out configuration ; compute the drop-out-weight factor; when using drop-out a fraction of the nodes is turned off at each cycle of the computation once all nodes are turned on again (for instances when the test samples are evaluated), the weights have to be adjusted to account for the different number of active nodes this function computes the factor and applies it to the weights ; Definition at line 652 of file NeuralNet.icc. ◆ E(). double TMVA::DNN::Net::E ; (; ). ◆ errorFunction(). template<typename Container , typename ItWeight > . double TMVA::DNN::Net::errorFunction ; (; LayerData & ; layerData, . Container ; truth, . ItWeight ; itWeight, . ItWeight ; itWeightEnd, . double ; patternWeight, . double ; factorWeightDecay, . EnumRegularization ; eRegularization . ); const. computes the error of the DNN ; compute the error function; Definition at line 1579 of file NeuralNet.icc. ◆ fetchOutput() [1/2]. template<typename OutputContainer > . void TMVA::DNN::Net::fetchOutput ; (; const LayerData & ; lastLayerData, . OutputContainer & ; outputContainer . ); const. Definition at line 1291 of file NeuralNet.icc. ◆ fetchOutput() [2/2]. template<typename OutputContainer > . void TMVA::DNN::Net::fetchOutput ; (; const std::vector< LayerData > & ; layerPatternData, . OutputContainer & ; outputContainer . ); const. Definition at line 1312 of file NeuralNet.icc. ◆ fillDropContainer(). void TMVA::DNN::Net::fillDropContainer ; (; DropContainer & ; dropContainer, . double ; dropFraction, . size_t ; _numNodes . ); const. protected . prepare the drop-out-container (select the nodes which are to be dropped out) ; prepare the drop-out container given the provided drop-fractions; Definition at line 572 of file NeuralNet.cxx. ◆ forward_backward(). template<typename LayerContainer , typename PassThrough , typename ItWeight , ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:10105,error,error,10105,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,2,['error'],['error']
Availability,"bilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently work with this package. The subset that is currently available is:. AsNumpy; Count; Define; Fill; Filter; Graph; Histo[1,2,3]D; Max; Mean; Min; Profile[1,2,3]D; Snapshot; Sum. with support for more operations coming in the future.; Any distributed RDataFrame backend inherits the dependencies of the underlying software needed to distribute the applications. The Spark backend for example has the following runtime dependencies (ROOT will build just fine without, but the feature will be unavailable without these packages):. pyspark, that in turn has its own set of dependencies:; Java; py4j. Tests for the Spark backend can be turned ON/OFF with the new build option test_distrdf_pyspark (OFF by default).; Histogram Libraries. Add a new THistRange class for defining a generic bin range and iteration in a 1d and multi-dimensional histogram; Fix a memory leak in TF1::Copy and TFormula::Copy; Enable using automatic differentiation when computing parameter gradient in formula based TF1; Add several fixes and improvements to the TKDE class u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:11661,avail,available,11661,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['avail'],['available']
Availability,"bin contents and using an error bar calculated with Poisson statistics. ;  ; void addBinWithError (Axis_t binCenter, double n, double elow, double ehigh, double binWidth=0, double xErrorFrac=1.0, bool correctForBinWidth=true, double scaleFactor=1.0);  Add a bin to this histogram with the specified bin contents and error. ;  ; void addBinWithXYError (Axis_t binCenter, double n, double exlow, double exhigh, double eylow, double eyhigh, double scaleFactor=1.0);  Add a bin to this histogram with the specified bin contents and error. ;  ; void addEfficiencyBin (Axis_t binCenter, Int_t n1, Int_t n2, double binWidth=0, double xErrorFrac=1.0, double scaleFactor=1.0);  Add a bin to this histogram with the value n1/(n1+n2) using an error bar calculated with Binomial statistics. ;  ; void addEfficiencyBinWithError (Axis_t binCenter, double n1, double n2, double en1, double en2, double binWidth=0, double xErrorFrac=1.0, double scaleFactor=1.0);  Add a bin to this histogram with the value n1/(n1+n2) using an error bar calculated with Binomial statistics. ;  ; double getFitRangeBinW () const override;  Return (average) bin width of this RooHist. ;  ; double getFitRangeNEvt () const override;  Return the number of events of the dataset associated with this RooHist. ;  ; double getFitRangeNEvt (double xlo, double xhi) const override;  Calculate integral of histogram in given range. ;  ; double getNominalBinWidth () const;  ; bool hasIdenticalBinning (const RooHist &other) const;  Return true if binning of this RooHist is identical to that of 'other'. ;  ; TClass * IsA () const override;  ; bool isIdentical (const RooHist &other, double tol=1e-6, bool verbose=true) const;  Return true if contents of this RooHist is identical within given relative tolerance to that of 'other'. ;  ; RooHist * makePullHist (const RooCurve &curve, bool useAverage=false) const;  ; RooHist * makeResidHist (const RooCurve &curve, bool normalize=false, bool useAverage=false) const;  Create and return RooHis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:3662,error,error,3662,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['error'],['error']
Availability,"bin in the histogram object.; It has priority over the Style option. void Sumw2(Bool_t flag = kTRUE); Create structure to store sum of squares of weights. if histogram is already filled, the sum of squares of weights; is filled with the existing bin contents. The error per bin will be computed as sqrt(sum of squares of weight); for each bin. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before.; If flag = false the structure is deleted. TF1 * GetFunction(const char* name) const; Return pointer to function with name. Functions such as TH1::Fit store the fitted function in the list of; functions of this histogram. Double_t GetBinError(Int_t bin) const; Return value of error associated to bin number bin. if the sum of squares of weights has been defined (via Sumw2),; this function returns the sqrt(sum of w2).; otherwise it returns the sqrt(contents) for this bin. Double_t GetBinErrorLow(Int_t bin) const; Return lower error associated to bin number bin. The error will depend on the statistic option used will return; the binContent - lower interval value. Double_t GetBinErrorUp(Int_t bin) const; Return upper error associated to bin number bin. The error will depend on the statistic option used will return; the binContent - upper interval value. Double_t GetBinCenter(Int_t bin) const; return bin center for 1D historam; Better to use h1.GetXaxis().GetBinCenter(bin). Double_t GetBinLowEdge(Int_t bin) const; return bin lower edge for 1D historam; Better to use h1.GetXaxis().GetBinLowEdge(bin). Double_t GetBinWidth(Int_t bin) const; return bin width for 1D historam; Better to use h1.GetXaxis().GetBinWidth(bin). void GetCenter(Double_t* center) const; Fill array with center of bins for 1D histogram; Better to use h1.GetXaxis().GetCenter(center). void GetLowEdge(Double_t* edge) const; Fill array with low edge of bins for 1D histogram; Better to use h1.GetXaxis().GetLowEdge(edge). void SetBinError(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:128149,error,error,128149,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['error']
Availability,"bin of hnew; If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = h1->Rebin(5,""hnew""); // creates a new histogram hnew; //merging 5 bins of h1 in one bin. NOTE: If ngroup is not an exact divider of the number of bins,; the top limit of the rebinned histogram is changed; to the upper edge of the bin=newbins*ngroup and the corresponding; bins are added to the overflow bin.; Statistics will be recomputed from the new bin contents. -case 2 xbins!=0; a new histogram is created (you should specify newname).; The parameter is the number of variable size bins in the created histogram.; The array xbins must contain ngroup+1 elements that represent the low-edge; of the bins.; If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Bool_t FindNewAxisLimits(const TAxis* axis, const Double_t point, Double_t& newMin, Double_t& newMax); finds new limits for the axis so that *point* is within the range and; the limits are compatible with the previous ones (see TH1::Merge).; new limits are put into *newMin* and *newMax* variables.; axis - axis whose limits are to be recomputed; point - point that should fit within the new axis limits; newMin - new minimum will be stored here; newMax - new maximum will be stored here.; false if failed (e.g. if the initial axis limits are wrong; or the new range is more than 2^64 times the old one). void RebinAxis(Double_t x, TAxis* axis); Histogram is resized along axis such that x is in the axis range.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:95524,error,errors,95524,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['error'],['errors']
Availability,"bin of the returned histogram; 1273/// will be equal to the GetBinEntries(bin) of the profile,; 1274/// - if option ""C=E"" the bin contents of the projection are set to the; 1275/// bin errors of the profile; 1276/// - if option ""W"" is specified the bin content of the projected histogram is set to the; 1277/// product of the bin content of the profile and the entries.; 1278/// With this option the returned histogram will be equivalent to the one obtained by; 1279/// filling directly a TH2D using the 3-rd value as a weight.; 1280/// This option makes sense only for profile filled with all weights =1.; 1281/// When the profile is weighted (filled with weights different than 1) the; 1282/// bin error of the projected histogram (obtained using this option ""W"") cannot be; 1283/// correctly computed from the information stored in the profile. In that case the; 1284/// obtained histogram contains as bin error square the weighted sum of the square of the; 1285/// profiled observable (TProfile2D::fSumw2[bin] ); 1286 ; 1287TH2D *TProfile2D::ProjectionXY(const char *name, Option_t *option) const; 1288{; 1289 ; 1290 TString opt = option;; 1291 opt.ToLower();; 1292 ; 1293 // Create the projection histogram; 1294 // name of projected histogram is by default name of original histogram + _pxy; 1295 TString pname(name);; 1296 if (pname.IsNull() || pname == ""_pxy""); 1297 pname = TString(GetName() ) + TString(""_pxy"");; 1298 ; 1299 ; 1300 Int_t nx = fXaxis.GetNbins();; 1301 Int_t ny = fYaxis.GetNbins();; 1302 const TArrayD *xbins = fXaxis.GetXbins();; 1303 const TArrayD *ybins = fYaxis.GetXbins();; 1304 TH2D * h1 = nullptr;; 1305 if (xbins->fN == 0 && ybins->fN == 0) {; 1306 h1 = new TH2D(pname,GetTitle(),nx,fXaxis.GetXmin(),fXaxis.GetXmax(),ny,fYaxis.GetXmin(),fYaxis.GetXmax());; 1307 } else if (xbins->fN == 0) {; 1308 h1 = new TH2D(pname,GetTitle(),nx,fXaxis.GetXmin(),fXaxis.GetXmax(),ny, ybins->GetArray() );; 1309 } else if (ybins->fN == 0) {; 1310 h1 = new TH2D(pname,GetTitle(),nx,x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:45680,error,error,45680,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['error']
Availability,"bin volume, because sparse bins are merged together; 777 //if (!dopt.fIntegral) dopt.fBinVolume = true;; 778 dopt.fBinVolume = true;; 779 dopt.fNormBinVolume = true;; 780 ; 781 // Get the sparse data; 782 ROOT::Fit::SparseData d(ndim, &xmin[0], &xmax[0]);; 783 ROOT::Fit::FillData(d, s1, func);; 784 ; 785// std::cout << ""FillData(BinData & dv, const THnBase * s1, TF1 * func) (1)"" << std::endl;; 786 ; 787 // Create the bin data from the sparse data; 788 d.GetBinDataIntegral(dv);; 789 ; 790}; 791 ; 792void FillData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:26052,error,error,26052,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"bin) constReturn content of bin number bin.Definition TH1.cxx:5061; TH1::fXaxisTAxis fXaxisX axis descriptor.Definition TH1.h:90; TH1::ExtendAxisvirtual void ExtendAxis(Double_t x, TAxis *axis)Histogram is resized along axis such that x is in the axis range.Definition TH1.cxx:6504; TH1::fSumw2TArrayD fSumw2Array of sum of squares of weights.Definition TH1.h:104; TH1::Scalevirtual void Scale(Double_t c1=1, Option_t *option="""")Multiply this histogram by a constant c1.Definition TH1.cxx:6604; TH1::GetSumw2Nvirtual Int_t GetSumw2N() constDefinition TH1.h:315; TH1::FindBinvirtual Int_t FindBin(Double_t x, Double_t y=0, Double_t z=0)Return Global bin number corresponding to x,y,z.Definition TH1.cxx:3672; TH1::GetStatOverflowsBehaviourBool_t GetStatOverflowsBehaviour() constDefinition TH1.h:152; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::Dividevirtual Bool_t Divide(TF1 *f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::fPainterTVirtualHistPainter * fPainter! Pointer to histogram painterDefinition TH1.h:112; TH1::SetBinsvirtual void SetBins(Int_t nx, Double_t xmin, Double_t xmax)Redefine x axis parameters.Definition TH1.cxx:8767; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TH1::SetEntriesvirtual void SetEntries(Double_t n)Definition TH1.h:391; TH1::fgDefaultSumw2static Bool_t fgDefaultSumw2! Flag to call TH1::Sumw2 automatically at histogram creation timeDefinition TH1.h:118; TH1::fTsumwxDouble_t fTsumwxTotal Sum of weight*X.Definition TH1.h:98; TH1::ComputeIntegralvirtual Double_t ComputeIntegral(Bool_t onlyPositive=false)Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fInt...Definition TH1.cxx:2537; TH2D2-D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:198802,error,errors,198802,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['errors']
Availability,"bin*-*-*-*-*. The error will depend on the statistic option used will return; the binContent - lower interval value. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinErrorUp(Int_t bin) const; -*-*-*-*-*Return upper error associated to bin number bin*-*-*-*-*. The error will depend on the statistic option used will return; the binContent - upper interval value. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetBinError(Int_t binx, Int_t biny, Int_t binz) const; -*-*-*-*-*Return error of bin number binx,biny,binz. NB: Function to be called for 3-D histograms only. Double_t GetCellContent(Int_t binx, Int_t biny) const; -*-*-*-*-*Return content of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetCellError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetBinCenter(Int_t bin) const; return bin center for 1D historam; Better to use h1.GetXaxis().GetBinCenter(bin). Double_t GetBinLowEdge(Int_t bin) const; return bin lower edge for 1D historam; Better to use h1.GetXaxis().GetBinLowEdge(bin). Double_t GetBinWidth(Int_t bin) const; return bin width for 1D historam; Better to use h1.GetXaxis().GetBinWidth(bin). void GetCenter(Double_t* center) const; Fill array with center of bins for 1D histogram; Better to use h1.GetXaxis().GetCenter(center). void GetLowEdge(Double_t* edge) const; Fill array with low edge of bins for 1D histogram; Better to use h1.GetXaxis().GetLowEdge(edge). void SetBinError(Int_t bin, Double_t error); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t binx, Int_t biny, Double_t content); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t binx, Int_t biny, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:127950,error,error,127950,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['error']
Availability,"bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax); Redefine x and y axis parameters*-*-*-; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); *-*Redefine x and y axis parameters for variable bin sizes ; *-* ===========================. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile2D errors; *-* =======================================; The computation of the bin errors is based on the parameter option:; option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; i.e. the standard error of the bin contents.; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Z is 0 and the number of bin entries is > 0. 's' The bin errors are the standard deviations of the Z bin values; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Z is 0 and the number of bin entries is > 0. 'i' Errors are as in default case (standard errors of the bin contents); The only difference is for the case when the spread in Z is zero.; In this case for N > 0 the error is 1./SQRT(12.*N). 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; W is the sum in the bin of the weights of the profile.; This option is for combining measurements z +/- dz,; and the profile is filled with values y and weights z = 1/dz**2. See TProfile::BuildOptions for a detailed explanation of all options. void Streamer(TBuffer& ); Stream an object of class TProfile2D. void Sumw2(Bool_t flag = kTRUE); Create/Delete structure to store sum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile2D.html:47142,error,error,47142,root/html534/TProfile2D.html,https://root.cern,https://root.cern/root/html534/TProfile2D.html,3,['error'],['error']
Availability,"bin, Int_t &icondn);  Reads a command string and executes. ;  ; virtual void mncont (Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Double_t *plist, Int_t &llist, Int_t &ierr, Int_t isyswr);  Cracks the free-format input. ;  ; virtual void mncros (Double_t &aopt, Int_t &iercr);  Find point where MNEVAL=AMIN+UP. ;  ; virtual void mncuve ();  Makes sure that the current point is a local minimum. ;  ; virtual void mnderi ();  Calculates the first derivatives of FCN (GRD) ;  ; virtual void mndxdi (Double_t pint, Int_t ipar, Double_t &dxdi);  Calculates the transformation factor between ext/internal values. ;  ; virtual void mneig (Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, Int_t &ifault);  Compute matrix eigen values. ;  ; virtual void mnemat (Double_t *emat, Int_t ndim);  Calculates the external error matrix from the internal matrix. ;  ; virtual void mnerrs (Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc);  Utility routine to get MINOS errors. ;  ; virtual void mneval (Double_t anext, Double_t &fnext, Int_t &ierev);  Evaluates the function being analysed by MNCROS. ;  ; virtual void mnexcm (const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg);  Interprets a command and takes appropriate action. ;  ; virtual void mnexin (Double_t *pint);  Transforms the external parameter values U to internal values. ;  ; virtual void mnfixp (Int_t iint, Int_t &ierr);  Removes parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:18284,error,error,18284,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,['error'],['error']
Availability,"bin,ibin,binx,biny,binz;; 5349 for (ibin =0; ibin < hold->fNcells; ibin++) {; 5350 // get the binx,y,z values . The x-y-z (axis) bin values will stay the same between new-old after the expanding; 5351 hold->GetBinXYZ(ibin,binx,biny,binz);; 5352 bin = GetBin(binx,biny,binz);; 5353 ; 5354 // underflow and overflow will be cleaned up because their meaning has been altered; 5355 if (hold->IsBinUnderflow(ibin,iaxis) || hold->IsBinOverflow(ibin,iaxis)) {; 5356 continue;; 5357 }; 5358 else {; 5359 AddBinContent(bin, hold->RetrieveBinContent(ibin));; 5360 if (errors) fSumw2.fArray[bin] += hold->fSumw2.fArray[ibin];; 5361 }; 5362 }; 5363 fEntries = oldEntries;; 5364 delete hold;; 5365}; 5366 ; 5367////////////////////////////////////////////////////////////////////////////////; 5368/// Sort bins with labels or set option(s) to draw axis with labels; 5369/// \param[in] option; 5370/// - ""a"" sort by alphabetic order; 5371/// - "">"" sort by decreasing values; 5372/// - ""<"" sort by increasing values; 5373/// - ""h"" draw labels horizontal; 5374/// - ""v"" draw labels vertical; 5375/// - ""u"" draw labels up (end of label right adjusted); 5376/// - ""d"" draw labels down (start of label left adjusted); 5377///; 5378/// In case not all bins have labels sorting will work only in the case; 5379/// the first `n` consecutive bins have all labels and sorting will be performed on; 5380/// those label bins.; 5381///; 5382/// \param[in] ax axis; 5383 ; 5384void TH1::LabelsOption(Option_t *option, Option_t *ax); 5385{; 5386 Int_t iaxis = AxisChoice(ax);; 5387 TAxis *axis = nullptr;; 5388 if (iaxis == 1); 5389 axis = GetXaxis();; 5390 if (iaxis == 2); 5391 axis = GetYaxis();; 5392 if (iaxis == 3); 5393 axis = GetZaxis();; 5394 if (!axis); 5395 return;; 5396 THashList *labels = axis->GetLabels();; 5397 if (!labels) {; 5398 Warning(""LabelsOption"", ""Axis %s has no labels!"",axis->GetName());; 5399 return;; 5400 }; 5401 TString opt = option;; 5402 opt.ToLower();; 5403 Int_t iopt = -1;; 5404 if (opt.Conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:216024,down,down,216024,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['down'],['down']
Availability,"bin.; Statistics will be recomputed from the new bin contents. TProfile * DoProfile(bool onX, const char* name, Int_t firstbin, Int_t lastbin, Option_t* option) const. TProfile * ProfileX(const char* name = ""_pfx"", Int_t firstybin = 1, Int_t lastybin = -1, Option_t* option = """") const; *-*-*-*-*Project a 2-D histogram into a profile histogram along X*-*-*-*-*-*; *-* ========================================================. The projection is made from the channels along the Y axis; ranging from firstybin to lastybin included.; By default, bins 1 to ny are included; When all bins are included, the number of entries in the projection; is set to the number of entries of the 2-D histogram, otherwise; the number of entries is incremented by 1 for all non empty cells. if option ""d"" is specified, the profile is drawn in the current pad. if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. The option can also be used to specify the projected profile error type.; Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details. Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; One must create a graphical cut (mouse or C++) and specify the name; of the cut between [] in the option.; For example, with a TCutG named ""cutg"", one can call:; myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; To invert the cut, it is enough to put a ""-"" in front of its name:; myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; It is possible to apply several cuts ("","" means logical AND):; myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");. NOTE that if a TProfile named ""name"" exists in the current directory or pad with; a compatible axis the profile is reset and filled again with the projected contents of the TH2.; In the case of axis incompatibility an error is reported and a NULL pointer is returned. NOTE that the X axis attributes of the TH2 are copied to the X axis of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2.html:46294,error,error,46294,root/html534/TH2.html,https://root.cern,https://root.cern/root/html534/TH2.html,1,['error'],['error']
Availability,"binCenter, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addAsymmetryBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBin(Axis_t binCenter, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. ~RooHist(); Destructor. Bool_t hasIdenticalBinning(const RooHist& other) const; Return kTRUE if binning of this RooHist is identical to that of 'other'. Bool_t isIdentical(const RooHist& other, Double_t tol = 9.9999999999999995E-7) const; Return kTRUE if contents of this RooHIst is identical within given; relative tolerance to that of 'other'. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this histogram to the specified output stream. Standard: number of entries; Shape: error CL and maximum value; Verbose: print our bin contents and errors. void printName(ostream& os) const; Print name of RooHist. void printTitle(ostream& os) const; Print title of RooHist. void printClassName(ostream& os) const; Print class name of RooHist. RooHist* makeResidHist(const RooCurve& curve, bool normalize = false, bool useAverage = false) const; Create and return RooHist containin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHist.html:25458,error,error,25458,root/html602/RooHist.html,https://root.cern,https://root.cern/root/html602/RooHist.html,2,['error'],['error']
Availability,"bin_13 = 0.890724 +/- 0.195929 (limited); p_ph_sig_gamma_bin_14 = 0.947374 +/- 0.309135 (limited); p_ph_sig_gamma_bin_15 = 1.14132 +/- 0.81204 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Minimization -- Including the following constraint terms in minimization: (hc_sigbkg); [#1] INFO:Minimization -- The global observables are not defined , normalize constraints with respect to the parameters (Abkg,Asig,p_ph_sig2_gamma_bin_0,p_ph_sig2_gamma_bin_1,p_ph_sig2_gamma_bin_10,p_ph_sig2_gamma_bin_11,p_ph_sig2_gamma_bin_12,p_ph_sig2_gamma_bin_13,p_ph_sig2_gamma_bin_14,p_ph_sig2_gamma_bin_15,p_ph_sig2_gamma_bin_16,p_ph_sig2_gamma_bin_17,p_ph_sig2_gamma_bin_18,p_ph_sig2_gamma_bin_19,p_ph_sig2_gamma_bin_2,p_ph_sig2_gamma_bin_20,p_ph_sig2_gamma_bin_21,p_ph_sig2_gamma_bin_22,p_ph_sig2_gamma_bin_23,p_ph_sig2_gamma_bin_24,p_ph_sig2_gamma_bin_3,p_ph_sig2_gamma_bin_4,p_ph_sig2_gamma_bin_5,p_ph_sig2_gamma_bin_6,p_ph_sig2_gamma_bin_7,p_ph_sig2_gamma_bin_8,p_ph_sig2_gamma_bin_9); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model2) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model2_sumData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 13500 convergence for edm < 1 strategy 1; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=7.28945 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:19835,error,error,19835,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,4,['error'],['error']
Availability,"binned on fNpx bins; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Double_tTF1::fMaximumMaximum value for plotting; TMethodCall*TF1::fMethodCall!Pointer to MethodCall in case of interpreted function; Double_tTF1::fMinimumMinimum value for plotting; Int_tTF1::fNDFNumber of degrees of freedom in the fit; TStringTNamed::fNameobject identifier; Int_tTF1::fNdimFunction dimension; Double_tTF1::fNormIntegralIntegral of the function before being normalized; Bool_tTF1::fNormalizedNormalization option (false by default); Int_tTF1::fNparNumber of parameters; Int_tTF1::fNpfitsNumber of points used in the fit; Int_tTF1::fNpxNumber of points used for the graphical representation; Int_tfNpyNumber of points along y used for the graphical representation; vector<Double_t>TF1::fParErrorsArray of errors of the fNpar parameters; vector<Double_t>TF1::fParMaxArray of upper limits of the fNpar parameters; vector<Double_t>TF1::fParMinArray of lower limits of the fNpar parameters; TF1Parameters*TF1::fParamsPointer to Function parameters object (exusts only for not-formula functions); TObject*TF1::fParent!Parent object hooking this function (if one); vector<Double_t>TF1::fSaveArray of fNsave function values; TStringTNamed::fTitleobject title; Int_tTF1::fType(=0 for standard functions, 1 if pointer to function); Double_tTF1::fXmaxUpper bounds for the range; Double_tTF1::fXminLower bounds for the range; Double_tfYmaxUpper bound for the range in y; Double_tfYminLower bound for the range in y; static Bool_tTF1::fgAbsValueuse absolute value of function when computing integral; static Bool_tTF1::fgAddToGlobListTrue if we want to register the function in the global list; static TF1*TF1::fgCurrentpointer to current function being processed; static Bool_tTF1::fgRejectPointTrue if point must be rej",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF2.html:19955,error,errors,19955,root/html604/TF2.html,https://root.cern,https://root.cern/root/html604/TF2.html,1,['error'],['errors']
Availability,"bins inside the selected range will be filled. If option contains the string ""e"", errors are computed. The projection is made for the selected bins only.; To select a bin range along an axis, use TAxis::SetRange, eg; h3.GetYaxis()->SetRange(23,56);. NOTE 1: The generated histogram is named th3name + option; eg if the TH3* h histogram is named ""myhist"", then; h->Project3D(""xy""); produces a TH2D histogram named ""myhist_xy""; if a histogram of the same type already exists, it is overwritten.; The following sequence; h->Project3D(""xy"");; h->Project3D(""xy2"");; will generate two TH2D histograms named ""myhist_xy"" and ""myhist_xy2""; A different name can be generated by attaching a string to the option; For example h->Project3D(""name_xy"") will generate an histogram with the name: h3dname_name_xy. NOTE 2: If an histogram of the same type already exists with compatible axes,; the histogram is reset and filled again with the projected contents of the TH3.; In the case of axes incompatibility, an error is reported and a NULL pointer is returned. NOTE 3: The number of entries in the projected histogram is estimated from the number of; effective entries for all the cells included in the projection. NOTE 4: underflow/overflow are included by default in the projection; To exclude underflow and/or overflow (for both axis in case of a projection to a 1D histogram) use option ""NUF"" and/or ""NOF""; With SetRange() you can have all bins except underflow/overflow only if you set the axis bit range as; following after having called SetRange:; axis->SetRange(1, axis->GetNbins());; axis->SetBit(TAxis::kAxisRange);. void DoFillProfileProjection(TProfile2D* p2, const TAxis& a1, const TAxis& a2, const TAxis& a3, Int_t bin1, Int_t bin2, Int_t bin3, Int_t inBin, Bool_t useWeights) const; internal function to fill the bins of the projected profile 2D histogram; called from DoProjectProfile2D. TProfile2D * DoProjectProfile2D(const char* name, const char* title, TAxis* projX, TAxis* projY, bool originalR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3.html:43928,error,error,43928,root/html528/TH3.html,https://root.cern,https://root.cern/root/html528/TH3.html,3,['error'],['error']
Availability,"bins with identical labels; will be merged, no matter what their order is.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successful, -1 otherwise. IMPORTANT remark. The axis x may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width.; Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }. TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1; if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1); -*-*-*-*-*-*-*-*-*Multiply this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this*h1. If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:98301,error,errors,98301,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['errors']
Availability,"bins with identical labels; will be merged, no matter what their order is.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successful, -1 otherwise. IMPORTANT remark. The axis x may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width.; Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }. TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1; if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1); Multiply this histogram by h1. this = this*h1. If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:100758,error,errors,100758,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['error'],['errors']
Availability,"bins() ) lastBinX += 1;; 7765 }; 7766 if ( !fYaxis.TestBit(TAxis::kAxisRange) ) {; 7767 if (firstBinY == 1) firstBinY = 0;; 7768 if (lastBinY == fYaxis.GetNbins() ) lastBinY += 1;; 7769 }; 7770 if ( !fZaxis.TestBit(TAxis::kAxisRange) ) {; 7771 if (firstBinZ == 1) firstBinZ = 0;; 7772 if (lastBinZ == fZaxis.GetNbins() ) lastBinZ += 1;; 7773 }; 7774 }; 7775 ; 7776 Double_t x = 0;; 7777 Double_t sum=0;; 7778 Double_t np=0;; 7779 for (Int_t binx = firstBinX; binx <= lastBinX; binx++) {; 7780 for (Int_t biny = firstBinY; biny <= lastBinY; biny++) {; 7781 for (Int_t binz = firstBinZ; binz <= lastBinZ; binz++) {; 7782 if (axis==1 ) x = fXaxis.GetBinCenter(binx);; 7783 else if (axis==2 ) x = fYaxis.GetBinCenter(biny);; 7784 else if (axis==3 ) x = fZaxis.GetBinCenter(binz);; 7785 Double_t w = GetBinContent(binx,biny,binz);; 7786 np+=w;; 7787 sum+=w*(x-mean)*(x-mean)*(x-mean)*(x-mean);; 7788 }; 7789 }; 7790 }; 7791 sum/=(np*stddev4);; 7792 return sum-3;; 7793 ; 7794 } else if (axis > 10 && axis <= 13) {; 7795 //compute standard error of skewness; 7796 // assume parent normal distribution use formula from Kendall-Stuart, Vol 1 pag 243, second edition; 7797 Double_t neff = GetEffectiveEntries();; 7798 return ( neff > 0 ? TMath::Sqrt(24./neff ) : 0. );; 7799 }; 7800 else {; 7801 Error(""GetKurtosis"", ""illegal value of parameter"");; 7802 return 0;; 7803 }; 7804}; 7805 ; 7806////////////////////////////////////////////////////////////////////////////////; 7807/// fill the array stats from the contents of this histogram; 7808/// The array stats must be correctly dimensioned in the calling program.; 7809///; 7810/// ~~~ {.cpp}; 7811/// stats[0] = sumw; 7812/// stats[1] = sumw2; 7813/// stats[2] = sumwx; 7814/// stats[3] = sumwx2; 7815/// ~~~; 7816///; 7817/// If no axis-subrange is specified (via TAxis::SetRange), the array stats; 7818/// is simply a copy of the statistics quantities computed at filling time.; 7819/// If a sub-range is specified, the function recomputes these quantit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:305370,error,error,305370,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"binsw2.resize(fNcells);; 1085 ; 1086 // delete buffer if it is there since bins will be reordered.; 1087 if (fBuffer); 1088 BufferEmpty(1);; 1089 ; 1090 // number of bins to loop; 1091 Int_t nx = (axis == GetXaxis()) ? n + 1 : fXaxis.GetNbins() + 2;; 1092 Int_t ny = (axis == GetYaxis()) ? n + 1 : fYaxis.GetNbins() + 2;; 1093 ; 1094 // make a labelold list but ordered with bins; 1095 // (re-ordered original label list); 1096 std::vector<TObject *> labold(n);; 1097 for (i = 0; i < n; i++); 1098 labold[i] = nullptr;; 1099 TIter nextold(labels);; 1100 TObject *obj;; 1101 while ((obj = nextold())) {; 1102 bin = obj->GetUniqueID();; 1103 if (bin>=1 && bin<=n); 1104 labold[bin-1] = obj;; 1105 }; 1106 // order now labold according to bin content; 1107 ; 1108 labels->Clear();; 1109 ; 1110 std::vector<Double_t> pcont;; 1111 std::vector<Double_t> econt;; 1112 if (sort > 0) {; 1113 pcont.resize(n);; 1114 econt.resize(n);; 1115 }; 1116 ; 1117 for (i = 0; i < nx; i++) {; 1118 for (j = 0; j < ny; j++) {; 1119 bin = GetBin(i, j);; 1120 sumw[bin] = fArray[bin];; 1121 errors[bin] = fSumw2.fArray[bin];; 1122 ent[bin] = fBinEntries.fArray[bin];; 1123 if (fBinSumw2.fN); 1124 binsw2[bin] = fBinSumw2.fArray[bin];; 1125 if (axis == GetXaxis()); 1126 k = i - 1;; 1127 else; 1128 k = j - 1;; 1129 //---when sorting by values of bins; 1130 if (sort > 0 && fBinEntries.fArray[bin] != 0 && k > 0 && k < n) {; 1131 pcont[k] += fArray[bin];; 1132 econt[k] += fBinEntries.fArray[bin];; 1133 }; 1134 }; 1135 }; 1136 // compute average of slize for ordering; 1137 if (sort > 0) {; 1138 for (k = 0; k < n; ++k) {; 1139 a[k] = k;; 1140 if (econt[k] > 0); 1141 pcont[k] /= econt[k];; 1142 }; 1143 if (sort == 1); 1144 TMath::Sort(n, pcont.data(), a.data(), kTRUE); // sort by decreasing values; 1145 else; 1146 TMath::Sort(n, pcont.data(), a.data(), kFALSE); // sort by increasing values; 1147 } else {; 1148 //---alphabetic sort; 1149 // sort labels using vector of strings and TMath::Sort; 1150 // I need to array b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:39399,error,errors,39399,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['errors']
Availability,"biny++) {; 435 for (binz =0;binz<=nz+1;binz++) {; 436 bin = GetBin(binx,biny,binz);; 437 c0 = fArray[bin];; 438 c1 = cu1[bin];; 439 if (c1) w = c0/c1;; 440 else w = 0;; 441 fArray[bin] = w;; 442 u = TMath::Abs(w);; 443 x = fXaxis.GetBinCenter(binx);; 444 y = fYaxis.GetBinCenter(biny);; 445 z = fZaxis.GetBinCenter(binz);; 446 fEntries++;; 447 fTsumw += u;; 448 fTsumw2 += u*u;; 449 fTsumwx += u*x;; 450 fTsumwx2 += u*x*x;; 451 fTsumwy += u*y;; 452 fTsumwy2 += u*y*y;; 453 fTsumwxy += u*x*y;; 454 fTsumwz += u;; 455 fTsumwz2 += u*z;; 456 fTsumwxz += u*x*z;; 457 fTsumwyz += u*y*z;; 458 fTsumwt += u;; 459 fTsumwt2 += u*u;; 460 Double_t e0 = fSumw2.fArray[bin];; 461 Double_t e1 = er1[bin];; 462 Double_t c12= c1*c1;; 463 if (!c1) fSumw2.fArray[bin] = 0;; 464 else fSumw2.fArray[bin] = (e0*c1*c1 + e1*c0*c0)/(c12*c12);; 465 if (!en1[bin]) fBinEntries.fArray[bin] = 0;; 466 else fBinEntries.fArray[bin] /= en1[bin];; 467 }; 468 }; 469 }; 470 // maintaining the correct sum of weights square is not supported when dividing; 471 // bin error resulting from division of profile needs to be checked; 472 if (fBinSumw2.fN) {; 473 Warning(""Divide"",""Cannot preserve during the division of profiles the sum of bin weight square"");; 474 fBinSumw2 = TArrayD();; 475 }; 476 return kTRUE;; 477}; 478 ; 479////////////////////////////////////////////////////////////////////////////////; 480/// Replace contents of this profile2D by the division of h1 by h2.; 481///; 482/// `this = c1*h1/(c2*h2)`; 483///; 484/// This function return kFALSE if the divide operation failed; 485 ; 486Bool_t TProfile3D::Divide(const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2, Option_t *option); 487{; 488 TString opt = option;; 489 opt.ToLower();; 490 Bool_t binomial = kFALSE;; 491 if (opt.Contains(""b"")) binomial = kTRUE;; 492 if (!h1 || !h2) {; 493 Error(""Divide"",""Attempt to divide a non-existing profile2D"");; 494 return kFALSE;; 495 }; 496 if (!h1->InheritsFrom(TProfile3D::Class())) {; 497 Error(""Divide"",""Attempt to div",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:16750,error,error,16750,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['error'],['error']
Availability,"biny. NB: Function to be called for 2-D histograms only. Double_t GetBinError(Int_t binx, Int_t biny, Int_t binz) const; -*-*-*-*-*Return error of bin number binx,biny,binz. NB: Function to be called for 3-D histograms only. Double_t GetCellContent(Int_t binx, Int_t biny) const; -*-*-*-*-*Return content of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetCellError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. void SetBinError(Int_t bin, Double_t error); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t binx, Int_t biny, Double_t content); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t binx, Int_t biny, Int_t binz, Double_t content); see convention for numbering bins in TH1::GetBin. void SetCellContent(Int_t binx, Int_t biny, Double_t content); Set cell content. void SetBinError(Int_t binx, Int_t biny, Double_t error); see convention for numbering bins in TH1::GetBin. void SetBinError(Int_t binx, Int_t biny, Int_t binz, Double_t error); see convention for numbering bins in TH1::GetBin. void SetCellError(Int_t binx, Int_t biny, Double_t content); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t bin, Double_t content); see convention for numbering bins in TH1::GetBin. TH1 * ShowBackground(Int_t niter = 20, Option_t* option = ""same""); This function calculates the background spectrum in this histogram.; The background is returned as a histogram. Function parameters:; -niter, number of iterations (default value = 2); Increasing niter make the result smoother and lower.; -option: may contain one of the following options; - to set the direction parameter; ""BackDecreasingWindow"". By default the direction is BackIncreasingWindow; - filterOrder-order of clipping filter, (default ""BackOrder2""; -possible values= ""BackOrder4""; ""BackOrder6""; ""BackOrder8""; - ""nosmoothing""- if selected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:119798,error,error,119798,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['error'],['error']
Availability,"binz);; 1190 for (biny = 0; biny < nbinsy; ++biny) {; 1191 Double_t wy = h1->GetYaxis()->GetBinWidth(biny);; 1192 for (binx = 0; binx < nbinsx; ++binx) {; 1193 Double_t wx = h1->GetXaxis()->GetBinWidth(binx);; 1194 bin = GetBin(binx, biny, binz);; 1195 Double_t w = wx*wy*wz;; 1196 UpdateBinContent(bin, c1 * h1->RetrieveBinContent(bin) / w);; 1197 if (fSumw2.fN) {; 1198 Double_t e1 = h1->GetBinError(bin)/w;; 1199 fSumw2.fArray[bin] = c1*c1*e1*e1;; 1200 }; 1201 }; 1202 }; 1203 }; 1204 } else if (h1->TestBit(kIsAverage) && h2->TestBit(kIsAverage)) {; 1205 for (Int_t i = 0; i < fNcells; ++i) { // loop on cells (bins including underflow / overflow); 1206 // special case where histograms have the kIsAverage bit set; 1207 Double_t y1 = h1->RetrieveBinContent(i);; 1208 Double_t y2 = h2->RetrieveBinContent(i);; 1209 Double_t e1sq = h1->GetBinErrorSqUnchecked(i);; 1210 Double_t e2sq = h2->GetBinErrorSqUnchecked(i);; 1211 Double_t w1 = 1., w2 = 1.;; 1212 ; 1213 // consider all special cases when bin errors are zero; 1214 // see http://root-forum.cern.ch/viewtopic.php?f=3&t=13299; 1215 if (e1sq) w1 = 1./ e1sq;; 1216 else if (h1->fSumw2.fN) {; 1217 w1 = 1.E200; // use an arbitrary huge value; 1218 if (y1 == 0 ) { // use an estimated error from the global histogram scale; 1219 double sf = (s1[0] != 0) ? s1[1]/s1[0] : 1;; 1220 w1 = 1./(sf*sf);; 1221 }; 1222 }; 1223 if (e2sq) w2 = 1./ e2sq;; 1224 else if (h2->fSumw2.fN) {; 1225 w2 = 1.E200; // use an arbitrary huge value; 1226 if (y2 == 0) { // use an estimated error from the global histogram scale; 1227 double sf = (s2[0] != 0) ? s2[1]/s2[0] : 1;; 1228 w2 = 1./(sf*sf);; 1229 }; 1230 }; 1231 ; 1232 double y = (w1*y1 + w2*y2)/(w1 + w2);; 1233 UpdateBinContent(i, y);; 1234 if (fSumw2.fN) {; 1235 double err2 = 1./(w1 + w2);; 1236 if (err2 < 1.E-200) err2 = 0; // to remove arbitrary value when e1=0 AND e2=0; 1237 fSumw2.fArray[i] = err2;; 1238 }; 1239 }; 1240 } else { // case of simple histogram addition; 1241 Double_t c1sq = c1 * c1;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:48323,error,errors,48323,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"bits per element).Definition TArrayF.h:27; TArrayF::fArrayFloat_t * fArrayDefinition TArrayF.h:30; TArrayF::Resetvoid Reset()Definition TArrayF.h:47; TArrayIArray of integers (32 bits per element).Definition TArrayI.h:27; TArrayI::fArrayInt_t * fArrayDefinition TArrayI.h:30; TArrayI::Resetvoid Reset()Definition TArrayI.h:47; TArrayL64Array of long64s (64 bits per element).Definition TArrayL64.h:27; TArrayL64::fArrayLong64_t * fArrayDefinition TArrayL64.h:30; TArrayL64::Resetvoid Reset()Definition TArrayL64.h:47; TArraySArray of shorts (16 bits per element).Definition TArrayS.h:27; TArrayS::Resetvoid Reset()Definition TArrayS.h:47; TArrayS::fArrayShort_t * fArrayDefinition TArrayS.h:30; TF11-Dim function classDefinition TF1.h:233; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::IntegralAndErrorvirtual Double_t IntegralAndError(Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") constReturn integral of bin contents in range [binx1,binx2] and its error.Definition TH1.cxx:7968; TH1::GetBinErrorLowvirtual Double_t GetBinErrorLow(Int_t bin) constReturn lower error associated to bin number bin.Definition TH1.cxx:9079; TH1::Integralvirtual Double_t Integral(Option_t *option="""") constReturn integral of bin contents.Definition TH1.cxx:7941; TH1::GetBinContentvirtual Double_t GetBinContent(Int_t bin) constReturn content of bin number bin.Definition TH1.cxx:5061; TH1::GetBinErrorUpvirtual Double_t GetBinErrorUp(Int_t bin) constReturn upper error associated to bin number bin.Definition TH1.cxx:9110; TH2C2-D histogram with a byte per channel (see TH1 documentation)Definition TH2.h:139; TH2C::operator*friend TH2C operator*(TH2C const &h1, Float_t c1)Definition TH2.h:166; TH2C::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH2.cxx:2990; TH2C::AddBinContentvoid AddBinContent(Int_t binx, Int_t biny,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8h_source.html:23022,error,error,23022,doc/master/TH2_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2_8h_source.html,1,['error'],['error']
Availability,"bj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TScatterinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTScattervirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTScattervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fColorTScatterprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphTScatterprotected; fHistogramTScatterprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTScatterprotected; fMarkerColorTAttMarkerprotected; fMarkerSizeTAttMarkerprotected; fMarkerStyleTAttMarkerprotected; fMaxMarkerSizeTScatterprotected; fMaxSizeTScatterprotected; fMinMarkerSizeTScatterprotected; fNameTNamedprotected; fNpointsTScatterprotected; fSizeTScatterprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetColor() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTScatter-members.html:1610,error,error,1610,doc/master/classTScatter-members.html,https://root.cern,https://root.cern/doc/master/classTScatter-members.html,2,['error'],['error']
Availability,"bj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawMap(const char* = ""*"", Option_t* = """"); virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Int_tGetArrayLimit() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* handle); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; virtual Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:9608,error,error,9608,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,1,['error'],['error']
Availability,"bj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordSelect.html:11957,error,error,11957,doc/master/classTParallelCoordSelect.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordSelect.html,4,['error'],['error']
Availability,"bj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:8321,error,error,8321,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,30,['error'],['error']
Availability,"bj;; 814 w = bin->GetArea();; 815 integral += w * (bin->GetContent());; 816 }; 817 } else {; 818 // need to recompute integral in case SetBinContent was called.; 819 // fTsumw cannot be used since it is not updated in that case; 820 while ((obj = next())) {; 821 bin = (TH2PolyBin *)obj;; 822 integral += (bin->GetContent());; 823 }; 824 }; 825 return integral;; 826}; 827 ; 828////////////////////////////////////////////////////////////////////////////////; 829/// Returns the content of the input bin; 830/// Bin numbers are from [1,nbins] and; 831/// for the overflow/underflow/sea bins the range is [-9,-1]:; 832///~~~ {.cpp}; 833/// -1 | -2 | -3; 834/// ---+----+----; 835/// -4 | -5 | -6; 836/// ---+----+----; 837/// -7 | -8 | -9; 838///~~~; 839/// where -5 is the ""sea"" bin (i.e. unbinned areas); 840 ; 841Double_t TH2Poly::GetBinContent(Int_t bin) const; 842{; 843 if (bin > GetNumberOfBins() || bin == 0 || bin < -kNOverflow) return 0;; 844 if (bin<0) return fOverflow[-bin - 1];; 845 return ((TH2PolyBin*) fBins->At(bin-1))->GetContent();; 846}; 847 ; 848////////////////////////////////////////////////////////////////////////////////; 849/// Returns the value of error associated to bin number bin.; 850/// If the sum of squares of weights has been defined (via Sumw2),; 851/// this function returns the sqrt(sum of w2).; 852/// otherwise it returns the sqrt(contents) for this bin.; 853/// Bins are in range [1:nbins] and for bin < 0 in range [-9:-1] it returns errors for overflow bins.; 854/// See also TH2Poly::GetBinContent; 855 ; 856Double_t TH2Poly::GetBinError(Int_t bin) const; 857{; 858 if (bin == 0 || bin > GetNumberOfBins() || bin < - kNOverflow) return 0;; 859 if (fBuffer) ((TH1*)this)->BufferEmpty();; 860 // in case of weighted events the sum of the weights are stored in a different way than; 861 // a normal histogram; 862 // fSumw2.fArray[0:kNOverflow-1] : sum of weight squares for the overflow bins (; 863 // fSumw2.fArray[kNOverflow:fNcells] : sum of weight squar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:29985,error,error,29985,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['error'],['error']
Availability,"bjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. GetArray(). THn* CreateHn(const char* name, const char* title, const TH1* h1). THn* CreateHn(const char* name, const char* title, const THnBase* hn). Long64_t GetNbins() const; { return GetArray().GetNbins(); }. Long64_t GetBin(const Int_t* idx) const. return GetArray(). Long64_t GetBin(const Double_t* x) const. Long64_t GetBin(const char** name) const. Long64_t GetBin(const Int_t* idx, Bool_t = kTRUE). Long64_t GetBin(const Double_t* x, Bool_t = kTRUE). Long64_t GetBin(const char** name, Bool_t = kTRUE). void SetBinContent(const Int_t* idx, Double_t v);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THn.html:13560,error,errors,13560,root/html534/THn.html,https://root.cern,https://root.cern/root/html534/THn.html,1,['error'],['errors']
Availability,"bject &polyline) const overrideTPolyLinevirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; DeclFileName()TPolyLineinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPolyLinevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTPolyLinevirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPolyLine(Int_t n, Double_t *x, Double_t *y, Option_t *option="""")TPolyLinevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTPolyLinevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLastPointTPolyLineprotected; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fNTPolyLineprotected; fOptionTPolyLineprotected; fUniqueIDTObjectprivate; fXTPolyLineprotected; fYTPolyLineprotected; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() constTAttFillinlinevirtual; GetIconName() constTObjectvirtual; GetLastPoint() constTPolyLineinlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyLine-members.html:1631,error,error,1631,doc/master/classTPolyLine-members.html,https://root.cern,https://root.cern/doc/master/classTPolyLine-members.html,2,['error'],['error']
Availability,"bject (gDirectory, TContext, etc.). TObject * CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); Clone an object.; This function is called when the directory is not a TDirectoryFile.; This version has to load the I/O package, hence via CINT. If autoadd is true and if the object class has a; DirectoryAutoAdd function, it will be called at the end of the; function with the parameter gDirector. This usually means that; the object will be appended to the current ROOT directory. TDirectory * GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); Find a directory using apath.; It apath is null or empty, returns ""this"" directory.; Otherwie use apath to find a directory.; The absolute path syntax is:; file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory; in the file. Relative syntax is relative to ""this"" directory. E.g:; ../aa.; Returns 0 in case path does not exist.; If printError is true, use Error with 'funcname' to issue an error message. Bool_t cd(const char* path = 0); Change current directory to ""this"" directory . Using path one can; change the current directory to ""path"". The absolute path syntax is:; file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory; in the file. Relative syntax is relative to ""this"" directory. E.g:; ../aa. Returns kTRUE in case of success. Bool_t cd1(const char* path); Change current directory to ""this"" directory . Using path one can; change the current directory to ""path"". The absolute path syntax is:; file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory; in the file. Relative syntax is relative to ""this"" directory. E.g:; ../aa. Returns kFALSE in case path does not exist. Bool_t Cd(const char* path); Change current directory to ""path"". The absolute path syntax is:; file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory; in the file. Relative syntax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDirectory.html:11912,error,error,11912,root/html528/TDirectory.html,https://root.cern,https://root.cern/root/html528/TDirectory.html,2,['error'],['error']
Availability,"bject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TProofPlayer.h 40186 2011-07-11 12:00:50Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofPlayerRemote.html:19871,error,error,19871,root/html532/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html532/TProofPlayerRemote.html,1,['error'],['error']
Availability,"bject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Attributes; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Win",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCompositeFrame.html:24614,mask,mask,24614,doc/master/classTGCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html,1,['mask'],['mask']
Availability,"bject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions;  TGApplication ();  ; void LoadGraphicsLibs () override;  Load shared libs necessary for GUI. ;  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web browser. ;  ; virtual void Help (const char *line);  The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ;  ; virtual void MakeBatch ();  Switch to batch mode. ;  ; virtual Longptr_t ProcessRemote (const char *line, Int_t *error=nullptr);  Process the content of a line starting with "".R"" (already stripped-off) The format is. ;  ; void SetSignalHandler (TSignalHandler *sh);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Attributes; TGClient * fClient {nullptr};  pointer to the client environment ;  ; TString fDisplay;  display server to connect to ;  . Additional Inherited Members;  Public Types inherited from TApplication; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGApplication.html:17730,error,error,17730,doc/master/classTGApplication.html,https://root.cern,https://root.cern/doc/master/classTGApplication.html,1,['error'],['error']
Availability,"bject is read from the file into memory via TKey::Read() or; via TObject::Read(). The function returns the total number of bytes written to the file.; It returns 0 if the object cannot be written. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); Write this object to the current directory. For more see the; const version of this method. void Streamer(TBuffer& ); Stream an object of class TObject. void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). void Info(const char *location, const char *va_(fmt), ...); Issue info message. Use ""location"" to specify the method where the; warning occured. Accepts standard printf formatting arguments. void Warning(const char *location, const char *va_(fmt), ...); Issue warning message. Use ""location"" to specify the method where the; warning occured. Accepts standard printf formatting arguments. void Error(const char *location, const char *va_(fmt), ...); Issue error message. Use ""location"" to specify the method where the; error occured. Accepts standard printf formatting arguments. void SysError(const char *location, const char *va_(fmt), ...); Issue system error message. Use ""location"" to specify the method where; the system error occured. Accepts standard printf formatting arguments. void Fatal(const char *location, const char *va_(fmt), ...); Issue fatal error message. Use ""location"" to specify the method where the; fatal error occured. Accepts standard printf formatting arguments. void AbstractMethod(const char* method) const; Use this method to implement an ""abstract"" method that you don't; want to leave purely abstract. void MayNotUse(const char* method) const; Use this method to signal that a method (defined in a base class); may not be called in a derived class (in principle against good; design since a child class should not provide less functionality; than its parent, however, sometimes it is necessary). void Obsolete(const char* meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TObject.html:17023,error,error,17023,root/html534/TObject.html,https://root.cern,https://root.cern/root/html534/TObject.html,3,['error'],['error']
Availability,"bject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObJect::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionaly; compute Binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:57366,error,errors,57366,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['error'],['errors']
Availability,"bject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObject::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:59048,error,errors,59048,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,2,['error'],['errors']
Availability,"bject& named) const; Bool_tCreate(Bool_t attach = kFALSE); static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); voidCtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableTimeout(); voidDisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFlush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionLevel() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; Int_tGetInterrupt(Bool_t& forward); TTimeStampTSocket::GetLastUsage(); virtual TInetAddr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocket.html:2044,error,error,2044,root/html528/TXSocket.html,https://root.cern,https://root.cern/root/html528/TXSocket.html,1,['error'],['error']
Availability,"bject(TObject* obj); voidCheckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(TObject* obj = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = 1, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); voidExecuteDefaultAction(TObject* obj); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBrowserImp*GetBrowserImp() const; TContextMenu*GetContextMenu() const; virtual Option_t*GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetRefreshFlag() const; TObject*GetSelected() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBrowser.html:3263,error,error,3263,root/html526/TBrowser.html,https://root.cern,https://root.cern/root/html526/TBrowser.html,5,['error'],['error']
Availability,"bject* obj, Double_t cl = 0.94999999999999996); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; For Graphs, confidence intervals are computed for each point,; the value of the graph at that point is set to the function value at that; point, and the graph y-errors (or z-errors) are set to the value of; the confidence interval at that point.; For Histograms, confidence intervals are computed for each bin center; The bin content of this bin is then set to the function value at the bin; center, and the bin error is set to the confidence interval value.; NOTE: confidence intervals are approximate for nonlinear models!. Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; get the error matrix in a pointer to a NxN array.; excluding the fixed parameters. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; get error matrix element (return all zero if matrix is not available). Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc) const; get fit errors. Int_t GetNumberTotalParameters() const; number of total parameters. Int_t GetNumberFreeParameters() const; number of variable parameters. Double_t GetParError(Int_t ipar) const; parameter error. Double_t GetParameter(Int_t ipar) const; parameter value. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; get all parameter info (name, value, errors). const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; get fit statistical information. Double_t GetSumLog(Int_t i); sum of log . Un-ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBackCompFitter.html:15301,error,error,15301,root/html602/TBackCompFitter.html,https://root.cern,https://root.cern/root/html602/TBackCompFitter.html,2,['error'],['error']
Availability,"bject, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TContextMenu& ). void DisplayPopUp(Int_t x, Int_t y); { if (fContextMenuImp) fContextMenuImp->DisplayPopup(x, y); }. TContextMenu(). void Action(TObject* object, TMethod* method). void Action(TObject* object, TToggle* toggle). void Execute(const char* method, const char* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TObject* object, TFunction* method, const char* params). void Execute(TObject* object, TFunction* method, TObjArray* params). TBrowser * GetBrowser(); { return fBrowser; }. TContextMenuImp * GetContextMenuImp(); { return fContextMenuImp; }. TVirtualPad * GetSelectedCanvas(); { return fSelectedCanvas; }. TFunction * GetSelectedMethod(); { return fSelectedMethod; }. TObject * GetSelectedObject(); { return fSelectedObject; }. TObject * GetCalledObject(); { return fCalledObject; }. TClassMenuItem * GetSelectedMenuItem(); { return fSelectedMenuItem; }. TVirtualPad * GetSelectedPad(); { return fSelectedPad; }. void SetCanvas(TVirtualPad* c); { fSelectedCanvas = c; }. void SetBrowser(TBrowser* b); { fBrowser = b; }. void SetMethod(TFunction* m); { fSelectedMethod = m; }. void SetCalledObject(TObject* o); { fCalledObject = o; }. void SetSelectedMenuItem(TClassMenuItem* mi); { fSelectedMenuItem = mi; }. void SetNameTitle(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TContextMenu.html:9933,error,error,9933,root/html528/TContextMenu.html,https://root.cern,https://root.cern/root/html528/TContextMenu.html,12,['error'],['error']
Availability,"bject.; 235 /// Triggers event loop and execution of all actions booked in the associated RLoopManager.; 236 T *GetPtr() { return Get(); }; 237 ; 238 /// Get a pointer to the encapsulated object.; 239 /// Triggers event loop and execution of all actions booked in the associated RLoopManager.; 240 T &operator*(); 241 {; 242 ThrowIfNull();; 243 return *Get();; 244 }; 245 ; 246 /// Get a pointer to the encapsulated object.; 247 /// Ownership is not transferred to the caller.; 248 /// Triggers event loop and execution of all actions booked in the associated RLoopManager.; 249 T *operator->(); 250 {; 251 ThrowIfNull();; 252 return Get();; 253 }; 254 ; 255 /// Return an iterator to the beginning of the contained object if this makes; 256 /// sense, throw a compilation error otherwise; 257 typename RIterationHelper<T>::Iterator_t begin(); 258 {; 259 ThrowIfNull();; 260 if (!fActionPtr->HasRun()); 261 TriggerRun();; 262 return RIterationHelper<T>::GetBegin(*fObjPtr);; 263 }; 264 ; 265 /// Return an iterator to the end of the contained object if this makes; 266 /// sense, throw a compilation error otherwise; 267 typename RIterationHelper<T>::Iterator_t end(); 268 {; 269 ThrowIfNull();; 270 if (!fActionPtr->HasRun()); 271 TriggerRun();; 272 return RIterationHelper<T>::GetEnd(*fObjPtr);; 273 }; 274 ; 275 // clang-format off; 276 /// Register a callback that RDataFrame will execute ""everyNEvents"" on a partial result.; 277 ///; 278 /// \param[in] everyNEvents Frequency at which the callback will be called, as a number of events processed; 279 /// \param[in] callback a callable with signature `void(Value_t&)` where Value_t is the type of the value contained in this RResultPtr; 280 /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; 281 ///; 282 /// The callback must be a callable (lambda, function, functor class...) that takes a reference to the result type as; 283 /// argument and returns nothing. RDataFrame will invoke registered callbacks pas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RResultPtr_8hxx_source.html:10365,error,error,10365,doc/master/RResultPtr_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RResultPtr_8hxx_source.html,2,['error'],['error']
Availability,"bject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveJetCone*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveJetConeEditor.html:18148,mask,mask,18148,root/html602/TEveJetConeEditor.html,https://root.cern,https://root.cern/root/html602/TEveJetConeEditor.html,2,['mask'],['mask']
Availability,bject::(anonymous)TObject::kSingleKey; static TUnfoldSys::ESysErrModekSysErrModeMatrix; static TUnfoldSys::ESysErrModekSysErrModeRelative; static TUnfoldSys::ESysErrModekSysErrModeShift; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*fAoutsideInput: underflow/overflow bins; TMap*fBgrErrScaleInInput: background sources correlated error; TMap*fBgrErrUncorrInSqInput: uncorr error squared from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLInput: regularisation conditions; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance Chart:. TObject. ←; TUnfold. ←; TUnfoldSys. ←. TUnfoldDensity. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. void DoBackgrou,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:16723,error,error,16723,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,2,['error'],['error']
Availability,"bject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*GetBufferRef() const; virtual const char*GetClassName() const; Short_tGetCycle() const; const TDatime&GetDatime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*GetFile() const; virtual const char*GetIconName() const; Short_tGetKeep() const; Int_tGetKeylen() const; TDirectory*GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tGetNbytes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetObjlen() const; virtual Option_t*TObject::GetOption() const; virtual Long64_tGetSeekKey() const; virtual Long64_tGetS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TKey.html:3124,error,error,3124,root/html528/TKey.html,https://root.cern,https://root.cern/root/html528/TKey.html,6,['error'],['error']
Availability,"bject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); voidclearAll(); Bool_tclearObj(Int_t uniqueID); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const TObject*getObj(Int_t uniqueID); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidimportCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExpensiveObjectCache.html:1879,error,error,1879,root/html526/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html526/RooExpensiveObjectCache.html,7,['error'],['error']
Availability,"bject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Int_tDistancetoPrimitiveHelper(TGraph* theGraph, Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPanelHelper(TGraph* theGraph); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExecuteEventHelper(TGraph* theGraph, Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual char*GetObjectInfoHelper(TGraph* theGraph, Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TVirtualGraphPainter*GetPainter(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualGraphPainter.html:1712,error,error,1712,root/html528/TVirtualGraphPainter.html,https://root.cern,https://root.cern/root/html528/TVirtualGraphPainter.html,6,['error'],['error']
Availability,"bject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooDataSet*generate(Int_t nEvents = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsGenContext.html:2153,error,error,2153,root/html526/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html526/RooAbsGenContext.html,3,['error'],['error']
Availability,"bject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsGenContext.html:2153,error,error,2153,root/html602/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html602/RooAbsGenContext.html,1,['error'],['error']
Availability,"bject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual voidgenerateEvent(RooArgSet& theEvent, Int_t remaining); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsGenContext.html:2153,error,error,2153,root/html534/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html534/RooAbsGenContext.html,2,['error'],['error']
Availability,"bject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual RooDataSet*generate(Int_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsGenContext.html:2153,error,error,2153,root/html532/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html532/RooAbsGenContext.html,1,['error'],['error']
Availability,"bject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDolly(Int_t delta, Bool_t mod1, Bool_t mod2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDebugAids() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); TGLVector3EyeDirection() const; TGLVertex3EyePoint() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLVertex3FrustumCenter() const; Rgl::EOverlapFrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&GetCamBase() const; const TGLMatrix&GetCamTrans() const; Double_t*GetCenterVec(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetExternalCenter(); Double_tGetFarClip() const; Double_t*GetFixDefCenterVec(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Double_tGetNearClip() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLCamera.html:2633,error,error,2633,root/html602/TGLCamera.html,https://root.cern,https://root.cern/root/html602/TGLCamera.html,2,['error'],['error']
Availability,"bject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tTMVA::FitterBase::EstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); TMVA::GeneticFitterGeneticFitter(const TMVA::GeneticFitter&); TMVA::GeneticFitterGeneticFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__GeneticFitter.html:1764,error,error,1764,root/html602/TMVA__GeneticFitter.html,https://root.cern,https://root.cern/root/html602/TMVA__GeneticFitter.html,2,['error'],['error']
Availability,"bject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tTMVA::FitterBase::EstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MCFitter.html:1769,error,error,1769,root/html602/TMVA__MCFitter.html,https://root.cern,https://root.cern/root/html602/TMVA__MCFitter.html,4,['error'],['error']
Availability,"bject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tConvertToTables(TSQLFile* f, Long64_t keyid, TObjArray* cmds); virtual voidTObject::Copy(TObject& object) const; static TStringDefineElementColumnName(TStreamerElement* elem, TSQLFile* f, Int_t indx = 0); static Int_tDefineElementColumnType(TStreamerElement* elem, TSQLFile* f); Long64_tDefineObjectId(Bool_t recursive = kTRUE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayIndex() const; TSQLStructure*GetChild(Int_t n) const; Bool_tGetClassInfo(TClass*& cl, Version_t& version); TClass*GetCustomClass() const; Version_tGetCustomClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStreamerElement*GetElement() const; Int_tGetElementNumber() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TClass*GetObjectClass() const; TSQLObjectData*GetObjectData(Bool_t search = false); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TSQLStructure*GetParent() const; Int_tGetRepeatCounter(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLStructure.html:2393,error,error,2393,root/html530/TSQLStructure.html,https://root.cern,https://root.cern/root/html530/TSQLStructure.html,5,['error'],['error']
Availability,"bject::Clone(const char* newname = """") const; virtual floatTMatrixTBase<float>::ColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual voidDeterminant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTMatrixTBase<float>::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual floatTMatrixTBase<float>::E2Norm() const; const TMatrixT<float>EigenVectors(TVectorT<float>& eigenValues) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTMatrixTBase<float>::ExtractRow(Int_t row, Int_t col, float* v, Int_t n = -1) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const Int_t*GetColIndexArray() const; virtual Int_t*GetColIndexArray(); Int_tTMatrixTBase<float>::GetColLwb() const; Int_tTMatrixTBase<float>::GetColUpb() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual voidTMatrixTBase<float>::GetMatrix2Array(float* data, Option_t* option = """") const; virtual const float*GetMatrixArray() const; virtual float*GetMatrixArray(); virtual const char*TObject::GetName() const; Int_tTMatrixTBase<float>::GetNcols() const; Int_tTMatrixTBase<float>::GetNoElements() const; Int_tTMatrixTBase",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_float_.html:3005,error,error,3005,root/html528/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_float_.html,12,['error'],['error']
Availability,"bject::Copy(TObject& object) const; RooArgListcreateStatConstraintTerms(RooWorkspace* proto, vector<string>& constraintTerms, ParamHistFunc& paramHist, TH1* uncertHist, RooStats::HistFactory::EstimateSummary::ConstraintType type, Double_t minSigma); voidCustomize(RooWorkspace* proto, const char* pdfNameChar, map<string,string> renameMap); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEditSyst(RooWorkspace* proto, const char* pdfNameChar, map<string,double> gammaSyst, map<string,double> uniformSyst, map<string,double> logNormSyst, map<string,double> noSyst); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; stringFilePrefixStr(string); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitModel(RooWorkspace*, string, string, string, bool = false); voidFormatFrameForLikelihood(RooPlot* frame, string XTitle = string(""#sigma / #sigma_{SM}""), string YTitle = string(""-log likelihood"")); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:2511,error,error,2511,root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,1,['error'],['error']
Availability,"bject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tDebug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:2417,error,error,2417,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,6,['error'],['error']
Availability,"bject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intfFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intfMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intfReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileHandler(int fd, int mask); Create a file descriptor event handler. If mask=kRead then we; want to monitor the file for read readiness, if mask=kWrite; then we monitor the file for write readiness, if mask=kRead|kWrite; then we monitor both read and write readiness. Bool_t Notify(); Notify when event occured on descriptor associated with this handler. Bool_t ReadNotify(); Notify when something can be read from the descriptor associated with; this handler. Bool_t WriteNotify(); Notify when something can be written to the descriptor associated with; this handler. Bool_t HasReadInterest(); True if handler is interested in read events. Bool_t HasWriteInterest(); True if handler is interested in write events. void SetInterest(Int_t mask); Set interest mask to 'mask'. void Add(); Add file event handler to system file handler list. void Remove(); Remove file event handler from system file handler list. TFileHandler(); { }. virtual ~TFileHandler(); { Remove(); }. int GetFd() const; { return fFileNum; }. void SetFd(int fd); { fFileNum = fd; }. void ResetReadyMask(); { fReadyMask = 0; }. void SetReadReady(); { fReadyMask |= 0x1; }. void SetWriteReady(); { fRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileHandler.html:9722,mask,mask,9722,root/html528/TFileHandler.html,https://root.cern,https://root.cern/root/html528/TFileHandler.html,12,['mask'],['mask']
Availability,"bject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t Run(TThread* th); Create a pthread. Returns 0 on success, otherwise an error number will; be returned. Int_t Join(TThread* th, void** ret); Join suspends the execution of the calling thread until the; thread identified by th terminates, either by calling pthread_exit; or by being cancelled. Returns 0 on success, otherwise an error number will; be returned. Int_t Exit(void* ret); Terminates the execution of the calling thread. Return 0. Int_t Kill(TThread* th); Cancellation is the mechanism by which a thread can terminate the; execution of another thread. Returns 0 on success, otherwise an error; number will be returned. Int_t SetCancelOff(); Turn off the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelOn(); Turn on the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Set the cancellation response type of the calling thread to; asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Set the cancellation response type of the calling thread to; deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Introduce an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPosixThread.html:6521,error,error,6521,root/html602/TPosixThread.html,https://root.cern,https://root.cern/root/html602/TPosixThread.html,2,['error'],['error']
Availability,"bject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTGPopupMenu::EnableEntry(Int_t id); virtual Int_tTGPopupMenu::EndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; virtual TContextMenu*TContextMenuImp::GetContextMenu() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*TGPopupMenu::GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; TRootDialog*GetDialog() const; virtual TDNDData*TGFrame::GetDNDData(Atom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootContextMenu.html:5884,error,error,5884,root/html528/TRootContextMenu.html,https://root.cern,https://root.cern/root/html528/TRootContextMenu.html,4,['error'],['error']
Availability,"bject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableAlign(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFontSelected(char* font)SIGNAL ; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFontDialog.html:4762,error,error,4762,root/html528/TGFontDialog.html,https://root.cern,https://root.cern/root/html528/TGFontDialog.html,4,['error'],['error']
Availability,"bject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTGTextEntry::End(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationTGTextEntry::GetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*TGTextEntry::GetBuffer() const; virtual Int_tGetCharWidth(const char* text = ""0"") const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tTGTextEntry::GetCursorPosition() const; virtual voidGetDate(Int_t& year, Int_t& month, Int_t& day) const; static FontStruct_tTGTextEntry::GetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGTextEntr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntryField.html:7676,error,error,7676,root/html528/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html528/TGNumberEntryField.html,4,['error'],['error']
Availability,"bject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableEntry(Int_t id); virtual Int_tEndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGPopupMenu.html:6752,error,error,6752,root/html528/TGPopupMenu.html,https://root.cern,https://root.cern/root/html528/TGPopupMenu.html,4,['error'],['error']
Availability,"bject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidTGedEditor::ExcludeClassEditor(TClass* cl, Bool_t recurse = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTVirtualPadEditor::FillAttributes(Int_t, Int_t); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TCanvas*TGedEditor::GetCanvas() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static TContextMenu*GetContextMenu(); static Int_tTGWindow::GetCounter(); static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGedEditor.html:5134,error,error,5134,root/html602/TEveGedEditor.html,https://root.cern,https://root.cern/root/html602/TEveGedEditor.html,2,['error'],['error']
Availability,"bject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Int_tTSystem::Select(TList* active, Long_t timeout); virtual Int_tTSystem::Select(TFileHandler* fh, Long_t timeout); virtual intTSystem::SendBuf(int sock, const void* buffer, int length); virtual intTSystem::SendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char*); virtual voidTSystem::SetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSystem::SetDynamicPath(const char* pathname); virtual voidTSystem::Setenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tTSystem::SetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs(const char* linkedLibs); virtual voidTSystem::SetMakeExe(const char* directives); virtual voidTSystem::SetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheSystem.html:12109,mask,mask,12109,root/html526/TDCacheSystem.html,https://root.cern,https://root.cern/root/html526/TDCacheSystem.html,1,['mask'],['mask']
Availability,"bject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::RecursiveRemovevirtual void RecursiveRemove(TObject *obj)Recursively remove this object from a list.Definition TObject.cxx:665; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ReplaceTString & Replace(Ssiz_t pos, Ssiz_t n, const char *s)Definition TString.h:694; TString::FirstSsiz_t First(char c) constFind firs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:197864,error,error,197864,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['error'],['error']
Availability,"bject::operator new[](size_t sz, void* vp); TMultiDimFit&operator=(const TMultiDimFit&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = ""ps"") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBinVarX(Int_t nbbinvarx); voidSetBinVarY(Int_t nbbinvary); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMaxAngle(Double_t angle = 0); voidSetMaxFunctions(Int_t n); voidSetMaxPowers(const Int_t* powers); voidSetMaxStudy(Int_t n); voidSetMaxTerms(Int_t terms); voidSetMinAngle(Double_t angle = 1); voidSetMinRelativeError(Double_t error); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPowerLimit(Double_t limit = 1e-3); virtual voidSetPowers(const Int_t* powers, Int_t terms); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:19901,error,error,19901,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,1,['error'],['error']
Availability,"bjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTMemFile.html:33110,alive,alive,33110,doc/v632/classTMemFile.html,https://root.cern,https://root.cern/doc/v632/classTMemFile.html,2,['alive'],['alive']
Availability,"bjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; double fZ {0};  Z position of text. ;  ;  Protected Attributes inherited from TLatex; const Char_t * fError {nullptr};  ! error code ;  ; Double_t fFactorPos;  ! Relative position of subscripts and superscripts ;  ; Double_t fFactorSize;  ! Relative size of subscripts and superscripts ;  ; Bool_t fItalic;  ! Currently inside italic operator ;  ; Int_t fLimitFactorSize;  lower bound for subscripts/superscripts size ;  ; Double_t fOriginSize;  Font size of the starting font. ;  ; Bool_t fShow;  ! is true during the second pass (Painting) ;  ; std::vector< TLatexFormSize > fTabSize;  ! array of values for the different zones ;  ;  Protected Attributes inherited from TText; void * fWcsTitle {nullptr};  !Used by TMathText ;  ; Double_t fX {0};  X position of text (left,center,etc..) ;  ; Double_t fY {0};  Y position of text (left,center,etc..) ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAnnotation.html:25872,error,error,25872,doc/master/classTAnnotation.html,https://root.cern,https://root.cern/doc/master/classTAnnotation.html,1,['error'],['error']
Availability,"bjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::fStatusLong64_t fStatusSelector status.Definition TSelector.h:37; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysis_8C.html:17099,error,error,17099,doc/master/h1analysis_8C.html,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html,1,['error'],['error']
Availability,"bjname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TProofVectorContainer< Point3D_t > * fPoints;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int_t fMultiplicity;  ; Bool_t fObjEval;  ; TTreeFormula * fSelect;  ; TString fSelection;  ; TStatus * fStatus;  ; TTree * fTree;  ; TTreeDrawArgsParser fTreeDrawArgsParser;  ; TTreeFormula * fVar [4];  ; Double_t fWeight;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfGraphs.html:13208,avail,available,13208,doc/master/classTProofDrawListOfGraphs.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfGraphs.html,1,['avail'],['available']
Availability,"bjname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TProofVectorContainer< Point4D_t > * fPoints;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int_t fMultiplicity;  ; Bool_t fObjEval;  ; TTreeFormula * fSelect;  ; TString fSelection;  ; TStatus * fStatus;  ; TTree * fTree;  ; TTreeDrawArgsParser fTreeDrawArgsParser;  ; TTreeFormula * fVar [4];  ; Double_t fWeight;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html:13229,avail,available,13229,doc/master/classTProofDrawListOfPolyMarkers3D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html,1,['avail'],['available']
Availability,"ble * p = (fParams.size() > 0) ? &fParams.front() : 0;; 177 ; 178 return fFunc->EvalPar(x, nullptr);; 179 }; 180 ; 181 /// evaluate the partial derivative with respect to the parameter; 182 T DoParameterDerivative(const T *x, const double *p, unsigned int ipar) const override;; 183 ; 184 bool fLinear; // flag for linear functions; 185 bool fPolynomial; // flag for polynomial functions; 186 bool fOwnFunc; // flag to indicate we own the TF1 function pointer; 187 TF1 *fFunc; // pointer to ROOT function; 188 unsigned int fDim; // cached value of dimension; 189 //std::vector<double> fParams; // cached vector with parameter values; 190 ; 191 };; 192 ; 193 /**; 194 * Auxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar.; 195 *; 196 * WrappedMultiTF1Templ::DoParameterDerivation calls TFormula::EvalPar in the case of a general linear function; 197 * built with TFormula using ++; as EvalPar is not vectorized, in order to generalize DoParameterDerivative with; 198 * a general type T, we use this auxiliar class to branch the code in compile time with the double; 199 * specialization (that can call EvalPar) and the general implementation (that throws an error in the case of; 200 * general linear function).; 201 */; 202 template <class T>; 203 struct GeneralLinearFunctionDerivation {; 204 static T DoParameterDerivative(const WrappedMultiTF1Templ<T> *, const T *, unsigned int); 205 {; 206 Error(""DoParameterDerivative"", ""The vectorized implementation of DoParameterDerivative does not support""; 207 ""general linear functions built in TFormula with ++"");; 208 ; 209 return TMath::SignalingNaN();; 210 }; 211 };; 212 ; 213 template <>; 214 struct GeneralLinearFunctionDerivation<double> {; 215 static double; 216 DoParameterDerivative(const WrappedMultiTF1Templ<double> *wrappedFunc, const double *x, unsigned int ipar); 217 {; 218 const TFormula *df = dynamic_cast<const TFormula *>(wrappedFunc->GetFunction()->GetLinearPart(ipar));; 219 assert(df != nullptr);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html:7000,error,error,7000,doc/master/WrappedMultiTF1_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html,1,['error'],['error']
Availability,"ble ROOT::Math::IMinimizer1D::FValMinimum ; (; ); const. pure virtual . Return function value at current estimate of the minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ FValUpper(). virtual double ROOT::Math::IMinimizer1D::FValUpper ; (; ); const. pure virtual . Return function value at current upper bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Iterations(). virtual int ROOT::Math::IMinimizer1D::Iterations ; (; ); const. pure virtual . Return number of iteration used to find minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Minimize(). virtual bool ROOT::Math::IMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). pure virtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implemented in ROOT::Math::GSLMinimizer1D, and ROOT::Math::BrentMinimizer1D. ◆ Name(). virtual const char * ROOT::Math::IMinimizer1D::Name ; (; ); const. pure virtual . Return name of minimization algorithm. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Status(). virtual int ROOT::Math::IMinimizer1D::Status ; (; ); const. pure virtual . Returns the status of the previous estimate. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XLower(). virtual double ROOT::Math::IMinimizer1D::XLower ; (; ); const. pure virtual . Return current lower bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XMinimum(). virtual double ROOT::Math::IMinimizer1D::XMinimum ; (; ); const. pure virtual .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:3562,toler,tolerance,3562,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"ble absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method. » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html:7615,error,error,7615,root/html602/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMCIntegrator.html,1,['error'],['error']
Availability,"ble absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method. » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:7615,error,error,7615,root/html604/ROOT__Math__GSLMCIntegrator.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html,1,['error'],['error']
Availability,"ble nSigma=1, RooAbsData::ErrorType=RooAbsData::Poisson, double xErrorFrac=1.0, bool correctForBinWidth=true, double scaleFactor=1.);  Create a histogram from the contents of the specified TH1 object which may have fixed or variable bin widths. ;  ;  RooHist (const TH1 &data1, const TH1 &data2, double nominalBinWidth=0, double nSigma=1, RooAbsData::ErrorType=RooAbsData::Poisson, double xErrorFrac=1.0, bool efficiency=false, double scaleFactor=1.0);  Create a histogram from the asymmetry between the specified TH1 objects which may have fixed or variable bin widths, but which must both have the same binning. ;  ;  RooHist (double nominalBinWidth, double nSigma=1, double xErrorFrac=1.0, double scaleFactor=1.0);  Create an empty histogram that can be filled with the addBin() and addAsymmetryBin() methods. ;  ; void addAsymmetryBin (Axis_t binCenter, Int_t n1, Int_t n2, double binWidth=0, double xErrorFrac=1.0, double scaleFactor=1.0);  Add a bin to this histogram with the value (n1-n2)/(n1+n2) using an error bar calculated with Binomial statistics. ;  ; void addAsymmetryBinWithError (Axis_t binCenter, double n1, double n2, double en1, double en2, double binWidth=0, double xErrorFrac=1.0, double scaleFactor=1.0);  Add a bin to this histogram with the value (n1-n2)/(n1+n2) using an error bar calculated with Binomial statistics. ;  ; void addBin (Axis_t binCenter, double n, double binWidth=0, double xErrorFrac=1.0, double scaleFactor=1.0);  Add a bin to this histogram with the specified integer bin contents and using an error bar calculated with Poisson statistics. ;  ; void addBinWithError (Axis_t binCenter, double n, double elow, double ehigh, double binWidth=0, double xErrorFrac=1.0, bool correctForBinWidth=true, double scaleFactor=1.0);  Add a bin to this histogram with the specified bin contents and error. ;  ; void addBinWithXYError (Axis_t binCenter, double n, double exlow, double exhigh, double eylow, double eyhigh, double scaleFactor=1.0);  Add a bin to this histog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:2152,error,error,2152,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['error'],['error']
Availability,"ble objects for this branch See TVirtualBranchBrowsable::FillListOfBrowsables. ;  ; ROOT::Experimental::Internal::TBulkBranchRead & GetBulkRead ();  ; virtual const char * GetClassName () const;  Return the name of the user class whose content is stored in this branch, if any. ;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; TDirectory * GetDirectory () const;  ; Long64_t GetEntries () const;  ; virtual Int_t GetEntry (Long64_t entry=0, Int_t getall=0);  Read all leaves of entry and return total number of bytes read. ;  ; virtual Int_t GetEntryExport (Long64_t entry, Int_t getall, TClonesArray *list, Int_t n);  Read all leaves of an entry and export buffers to real objects in a TClonesArray list. ;  ; Long64_t GetEntryNumber () const;  ; Int_t GetEntryOffsetLen () const;  ; Int_t GetEvent (Long64_t entry=0);  ; virtual Int_t GetExpectedType (TClass *&clptr, EDataType &type);  Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ;  ; virtual TFile * GetFile (Int_t mode=0);  Return pointer to the file where branch buffers reside, returns 0 in case branch buffers reside in the same file as tree header. ;  ; const char * GetFileName () const;  ; Long64_t GetFirstEntry () const;  ; virtual TString GetFullName () const;  Return the 'full' name of the branch. ;  ; const char * GetIconName () const override;  Return icon name depending on type of branch. ;  ; TIOFeatures GetIOFeatures () const;  Returns the IO settings currently in use for this branch. ;  ; virtual TLeaf * GetLeaf (const char *name) const;  Return pointer to the 1st Leaf named name in thisBranch. ;  ; TObjArray * GetListOfBaskets ();  ; TObjArray * GetListOfBranches ();  ; TObjArray * GetListOfLeaves ();  ; virtual bool GetMakeClass () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:4212,failure,failure,4212,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,2,['failure'],['failure']
Availability,"ble with a value and optional unit. ;  ;  RooRealVar (const char *name, const char *title, double value, double minValue, double maxValue, const char *unit="""");  Create a variable with the given starting value. ;  ;  RooRealVar (const RooRealVar &other, const char *name=nullptr);  Copy Constructor. ;  ;  ~RooRealVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; void copyCacheFast (const RooRealVar &other, bool setValDirty=true);  ; Int_t defaultPrintContents (Option_t *opt) const override;  Mapping of Print() option string to RooPrintable contents specifications. ;  ; void deleteSharedProperties ();  Stop sharing properties. ;  ; RooErrorVar * errorVar () const;  Return a RooAbsRealLValue representing the error associated with this variable. ;  ; TString * format (const RooCmdArg &formatArg) const;  Format contents of RooRealVar for pretty printing on RooPlot parameter boxes. ;  ; TString * format (Int_t sigDigits, const char *options) const;  Format numeric value of RooRealVar and its error in a variety of ways. ;  ; double getAsymErrorHi () const;  ; double getAsymErrorLo () const;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Return binning definition with name. ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Return binning definition with name. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; double getError () const;  ; double getErrorHi () const;  ; double getErrorLo () const;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Return value of variable. ;  ; bool hasAsymError (bool allowZero=true) const;  ; bool hasBinning (const char *name) const override;  Returns true if variable has a binning named 'name'. ;  ; bool hasError (bool allowZero=true) const;  ; TClass * IsA () const override;  ; bool isDer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:2171,error,error,2171,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['error'],['error']
Availability,"ble&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodLD.html:2258,error,error,2258,root/html602/TMVA__MethodLD.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodLD.html,2,['error'],['error']
Availability,"ble(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*Data() const; TMVA::DataSetInfo&DataInfo() const; virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tDoMulticlass() const; Bool_tDoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeGetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*GetEvent() const; const TMVA::Event*GetEvent(const TMVA::Event* ev) const; const TMVA::Event*GetEvent(Long64_t ievt) const; const TMVA::Event*GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&GetInputLabel(Int_t i) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBase.html:3715,error,error,3715,root/html602/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBase.html,2,['error'],['error']
Availability,"ble, including lambda functions and; 1033complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1034_nominal_ value in input.; 1035 ; 1036#### Varying multiple columns in lockstep; 1037 ; 1038In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1039""in lockstep"":; 1040 ; 1041~~~{.python}; 1042df.Vary([""pt"", ""eta""],; 1043 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1044 variationTags=[""down"", ""up""],; 1045 variationName=""ptAndEta""); 1046~~~; 1047 ; 1048The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1049inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1050this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:62004,down,down,62004,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['down'],['down']
Availability,"ble, including lambda functions and; 1073complex functors. The callable can be applied to zero or more existing columns and it will always receive their; 1074_nominal_ value in input.; 1075 ; 1076#### Varying multiple columns in lockstep; 1077 ; 1078In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; 1079""in lockstep"":; 1080 ; 1081~~~{.python}; 1082df.Vary([""pt"", ""eta""],; 1083 ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; 1084 variationTags=[""down"", ""up""],; 1085 variationName=""ptAndEta""); 1086~~~; 1087 ; 1088The expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1089inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1090this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1091 ; 1092The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1093 ; 1094#### Combining multiple variations; 1095 ; 1096Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1097by applying multiple systematic variations at the same time.; 1098For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1099""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1100 ; 1101~~~{.cpp}; 1102auto df = _df.Vary(""pt"",; 1103 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1104 {""down"", ""up""}); 1105 .Vary(""eta"",; 1106 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1107 {""eta""},; 1108 2);; 1109 ; 1110auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1111auto all_hs = VariationsFor(nom_h);; 1112all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1113~~~; 1114 ; 1115Note how we passed the integer `2` instead of a list of variation tags to the second Vary()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:63684,down,down,63684,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['down'],['down']
Availability,"ble. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:25465,error,error,25465,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,9,['error'],['error']
Availability,"ble. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(). method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure. double MinValue() const; return minimum function value. { return fState.Fval(); }. double Edm() const; return expected distance reached from the minimum. { return fState.Edm(); }. const double * X() const; return pointer to X values at the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return fState.NFcn(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fState.VariableParameters(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html:9075,failure,failure,9075,root/html602/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__Minuit2Minimizer.html,2,['failure'],['failure']
Availability,"ble. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double ); set the value of an existing variable; parameter must exist or return false. std::string VariableName(unsigned int ivar) const; return the variable name. int VariableIndex(const string& name) const; return variable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. bool GetCovMatrix(double* cov) const; get covariance matrix. bool GetHessianMatrix(double* h) const; get Hessian - inverse of covariance matrix; just invert it; but need to get the compact form to avoid the zero for the fixed parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix. double GlobalCC(unsigned int ) const; global correlation coefficient for parameter i. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); Perform Minos analysis for the given parameter i. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMinuitMinimizer.html:8758,error,error,8758,root/html530/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html530/TMinuitMinimizer.html,2,['error'],['error']
Availability,"ble. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double ); set the value of an existing variable; parameter must exist or return false. std::string VariableName(unsigned int ivar) const; return the variable name. int VariableIndex(const string& name) const; return variable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix. double GlobalCC(unsigned int ) const; global correlation coefficient for parameter i. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); Perform Minos analysis for the given parameter i. void DoClear(); reset TMinuit. void DoReleaseFixParameter(int ivar); check if a parameter is defined and in case it was fixed released; TMinuit is not able to release free parameters by redefining them; so we need to force the release. void Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuitMinimizer.html:8666,error,error,8666,root/html528/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html528/TMinuitMinimizer.html,1,['error'],['error']
Availability,"ble::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual char*TFormula::DefinedString(Int_t code); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voiddump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_teval(const RooArgSet* nset = 0); virtual Double_tTFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual Double_tTFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); static voidTFormula::GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); virtual const char*TNamed::GetName() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTFormula::GetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooAbsArg*getParameter(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFormula.html:2806,error,error,2806,root/html602/RooFormula.html,https://root.cern,https://root.cern/root/html602/RooFormula.html,1,['error'],['error']
Availability,"ble::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual char*TFormula::DefinedString(Int_t code); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voiddump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_teval(const RooArgSet* nset = 0); virtual Double_tTFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual Double_tTFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual const char*TNamed::GetName() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTFormula::GetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooAbsArg*getParameter(const char* name) const; RooAbsArg*getParameter(Int_t index) const; Double_tTFormu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFormula.html:2957,error,error,2957,root/html526/RooFormula.html,https://root.cern,https://root.cern/root/html526/RooFormula.html,5,['error'],['error']
Availability,"ble::_nameLength; Int_t_nextProtoIndexNext prototype event to load according to LUT; Int_t*_protoOrderLUT with traversal order of prototype data; RooArgSet_protoVarsPrototype observables; const RooDataSet*_prototypePointer to prototype dataset; RooArgSet*_theEventPointer to observable event being generated; Bool_t_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsGenContext(); Destructor. void attach(const RooArgSet& params); Interface to attach given parameters to object in this context. RooDataSet * generate(Int_t nEvents = 0); Generate the specified number of events with nEvents>0 and; and return a dataset containing the generated events. With nEvents<=0,; generate the number of events in the prototype dataset, if available,; or else the expected number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsGenContext.html:8542,error,error,8542,root/html526/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html526/RooAbsGenContext.html,1,['error'],['error']
Availability,"bleClass ();  Globally enable bin-width corrections by this class. ;  ; static bool isClassEnabled ();  Returns true if bin-width corrections by this class are globally enabled, false otherwise. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:46327,error,error,46327,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,2,['error'],['error']
Availability,"bleLower(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MinosErrorMinos(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::MnMinos&); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); pair<double,double>operator()(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnMinos&operator=(const ROOT::Minuit2::MnMinos&); doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; returns the negative (pair.first) and the positive (pair.second); Minos Error of the Parameter. double Lower(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; calculate one side (negative or positive Error) of the Parameter;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnMinos.html:1671,toler,toler,1671,root/html602/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnMinos.html,2,['toler'],['toler']
Availability,"bleTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const vector<double>&GetBoostWeights() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:5949,error,error,5949,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,4,['error'],['error']
Availability,"bleUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); virtual voidShowMembers(TMemberInspector& insp) const; intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TLinearMinimizer(int type = 0); TLinearMinimizer(const char* type); doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. private:. TLinearMinimizer&operator=(const TLinearMinimizer& rhs); TLinearMinimizer(const TLinearMinimizer&). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; vector<double>fErrors; TLinearFitter*fFitter; doublefMinVal; unsigned intfNFree; const ROOT::Math::IMultiGradFunction*fObjFunc; vector<double>fParams; boolfRobust. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearMinimizer(int type = 0); Default constructor implementation.; type is not used - needed for consistency with other minimizer plug-ins. TLinearMinimizer(const char* type); constructor passing a type of algorithm, (supported now robust via LTS regression). ~TLinearMinimizer(); Destructor implementation. TLinearMinimizer(const TLinearMinimizer& ); Implementation of copy constructor. void SetFunction(const ROOT::Math::IMultiGenFunction & ); Set function to be minimized. Flag an error since only support Gradient objective functions. void SetFunction(const RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearMinimizer.html:5724,error,errors,5724,root/html602/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html602/TLinearMinimizer.html,2,['error'],['errors']
Availability,"ble_t & ; zn . ). overridevirtual . Find Z component of NORMAL in normalized coordinates. ; Input:; X - X-component of NORMAL; Y - Y-component of NORMAL; Z - Z-component of NORMAL. Output:; ZN - Z-component of NORMAL in normalized coordinates . Implements TView.; Definition at line 786 of file TView3D.cxx. ◆ FindPhiSectors(). void TView3D::FindPhiSectors ; (; Int_t ; iopt, . Int_t & ; kphi, . Double_t * ; aphi, . Int_t & ; iphi1, . Int_t & ; iphi2 . ). overridevirtual . Find critical PHI sectors. ; Input:; IOPT - options:; from BACK to FRONT 'BF'; from FRONT to BACK 'FB'. KPHI - number of phi sectors; APHI(*) - PHI separators (modified internally). Output:; IPHI1 - initial sector; IPHI2 - final sector . Implements TView.; Definition at line 806 of file TView3D.cxx. ◆ FindScope(). void TView3D::FindScope ; (; Double_t * ; scale, . Double_t * ; center, . Int_t & ; irep . ). overridevirtual . Find centre of a MIN-MAX scope and scale factors. ; Output:; SCALE(3) - scale factors; CENTER(3) - centre; IREP - reply (-1 if error in min-max) . Implements TView.; Definition at line 933 of file TView3D.cxx. ◆ FindThetaSectors(). void TView3D::FindThetaSectors ; (; Int_t ; iopt, . Double_t ; phi, . Int_t & ; kth, . Double_t * ; ath, . Int_t & ; ith1, . Int_t & ; ith2 . ). overridevirtual . Find critical THETA sectors for given PHI sector. ; Input:; IOPT - options:; from BACK to FRONT 'BF'; from FRONT to BACK 'FB'. PHI - PHI sector; KTH - number of THETA sectors; ATH(*) - THETA separators (modified internally). Output:; ITH1 - initial sector; ITH2 - final sector . Implements TView.; Definition at line 872 of file TView3D.cxx. ◆ Front(). void TView3D::Front ; (; ). overridevirtual . Implements TView.; Definition at line 1931 of file TView3D.cxx. ◆ FrontView(). void TView3D::FrontView ; (; TVirtualPad * ; pad = nullptr). overridevirtual . Set to front view. ; Implements TView.; Definition at line 1584 of file TView3D.cxx. ◆ GetAutoRange(). Bool_t TView3D::GetAutoRange ; (; ). inline",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTView3D.html:29951,error,error,29951,doc/master/classTView3D.html,https://root.cern,https://root.cern/doc/master/classTView3D.html,1,['error'],['error']
Availability,"ble_t *er1 = p1->GetW2();; 463 Double_t *en1 = p1->GetB();; 464 Double_t c0,c1,w,z,x,y;; 465 for (binx =0;binx<=nx+1;binx++) {; 466 for (biny =0;biny<=ny+1;biny++) {; 467 bin = biny*(fXaxis.GetNbins()+2) + binx;; 468 c0 = fArray[bin];; 469 c1 = cu1[bin];; 470 if (c1) w = c0/c1;; 471 else w = 0;; 472 fArray[bin] = w;; 473 z = TMath::Abs(w);; 474 x = fXaxis.GetBinCenter(binx);; 475 y = fYaxis.GetBinCenter(biny);; 476 fEntries++;; 477 fTsumw += z;; 478 fTsumw2 += z*z;; 479 fTsumwx += z*x;; 480 fTsumwx2 += z*x*x;; 481 fTsumwy += z*y;; 482 fTsumwy2 += z*y*y;; 483 fTsumwxy += z*x*y;; 484 fTsumwz += z;; 485 fTsumwz2 += z*z;; 486 Double_t e0 = fSumw2.fArray[bin];; 487 Double_t e1 = er1[bin];; 488 Double_t c12= c1*c1;; 489 if (!c1) fSumw2.fArray[bin] = 0;; 490 else fSumw2.fArray[bin] = (e0*c1*c1 + e1*c0*c0)/(c12*c12);; 491 if (!en1[bin]) fBinEntries.fArray[bin] = 0;; 492 else fBinEntries.fArray[bin] /= en1[bin];; 493 }; 494 }; 495 // maintaining the correct sum of weights square is not supported when dividing; 496 // bin error resulting from division of profile needs to be checked; 497 if (fBinSumw2.fN) {; 498 Warning(""Divide"",""Cannot preserve during the division of profiles the sum of bin weight square"");; 499 fBinSumw2 = TArrayD();; 500 }; 501 return kTRUE;; 502}; 503 ; 504////////////////////////////////////////////////////////////////////////////////; 505/// Replace contents of this profile2D by the division of h1 by h2.; 506///; 507/// `this = c1*h1/(c2*h2)`; 508///; 509/// This function return kFALSE if the divide operation failed; 510 ; 511Bool_t TProfile2D::Divide(const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2, Option_t *option); 512{; 513 TString opt = option;; 514 opt.ToLower();; 515 Bool_t binomial = kFALSE;; 516 if (opt.Contains(""b"")) binomial = kTRUE;; 517 if (!h1 || !h2) {; 518 Error(""Divide"",""Attempt to divide a non-existing profile2D"");; 519 return kFALSE;; 520 }; 521 if (!h1->InheritsFrom(TProfile2D::Class())) {; 522 Error(""Divide"",""Attempt to divide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:18248,error,error,18248,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['error']
Availability,"ble_t *gin, Double_t &f, Double_t *u, Int_t flag);  Minimization function for H1s using a Likelihood method. ;  ; void FixParameter (Int_t ipar) override;  Fixes parameter number ipar. ;  ; Double_t * GetCovarianceMatrix () const override;  Return a pointer to the covariance matrix. ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  Return element i,j from the covariance matrix. ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const override;  Return errors after MINOs not implemented. ;  ; Int_t GetNumberFreeParameters () const override;  Return the number of free parameters. ;  ; Int_t GetNumberTotalParameters () const override;  Return the total number of parameters (free + fixed) ;  ; Double_t GetParameter (Int_t ipar) const override;  Return current value of parameter ipar. ;  ; Int_t GetParameter (Int_t ipar, char *name, Double_t &value, Double_t &verr, Double_t &vlow, Double_t &vhigh) const override;  Get various ipar parameter attributes: ;  ; Double_t GetParError (Int_t ipar) const override;  Return error of parameter ipar. ;  ; const char * GetParName (Int_t ipar) const override;  Return name of parameter ipar. ;  ; Double_t * GetPL0 () const;  ; Int_t GetStats (Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const override;  Return global fit parameters. ;  ; Double_t GetSumLog (Int_t) override;  Return Sum(log(i) i=0,n used by log-likelihood fits. ;  ; Double_t * GetZ () const;  ; void InvertZ (Int_t);  Inverts packed diagonal matrix Z by square-root method. ;  ; TClass * IsA () const override;  ; Bool_t IsFixed (Int_t ipar) const override;  Return kTRUE if parameter ipar is fixed, kFALSE otherwise) ;  ; Int_t Minimize ();  Main minimization procedure. ;  ; void PrintResults (Int_t k, Double_t p) const override;  Prints fit results. ;  ; void ReleaseParameter (Int_t ipar) override;  Releases parameter number ipar. ;  ; void SetData (Double_t *, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:6220,error,error,6220,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['error'],['error']
Availability,"ble_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins); 1307{; 1308 TH1::SetBins(nx,xBins,ny,yBins,nz,zBins);; 1309 fBinEntries.Set(fNcells);; 1310 if (fBinSumw2.fN) fBinSumw2.Set(fNcells);; 1311}; 1312 ; 1313////////////////////////////////////////////////////////////////////////////////; 1314/// Set total number of bins including under/overflow.; 1315///; 1316/// Reallocate bin contents array; 1317 ; 1318void TProfile3D::SetBinsLength(Int_t n); 1319{; 1320 TH3D::SetBinsLength(n);; 1321 TProfileHelper::BuildArray(this);; 1322}; 1323 ; 1324////////////////////////////////////////////////////////////////////////////////; 1325/// Set the buffer size in units of 8 bytes (double).; 1326 ; 1327void TProfile3D::SetBuffer(Int_t buffersize, Option_t *); 1328{; 1329 if (fBuffer) {; 1330 BufferEmpty();; 1331 delete [] fBuffer;; 1332 fBuffer = nullptr;; 1333 }; 1334 if (buffersize <= 0) {; 1335 fBufferSize = 0;; 1336 return;; 1337 }; 1338 if (buffersize < 100) buffersize = 100;; 1339 fBufferSize = 1 + 5*buffersize;; 1340 fBuffer = new Double_t[fBufferSize];; 1341 memset(fBuffer,0,sizeof(Double_t)*fBufferSize);; 1342}; 1343 ; 1344////////////////////////////////////////////////////////////////////////////////; 1345/// Set option to compute profile3D errors.; 1346///; 1347/// The computation of the bin errors is based on the parameter option:; 1348/// - ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; 1349/// i.e. the standard error of the bin contents.; 1350/// Note that if TProfile3D::Approximate() is called, an approximation is used when; 1351/// the spread in T is 0 and the number of bin entries is > 0; 1352/// - 's' The bin errors are the standard deviations of the T bin values; 1353/// Note that if TProfile3D::Approximate() is called, an approximation is used when; 1354/// the spread in T is 0 and the number of bin entries is > 0; 1355/// - 'i' Errors are as in default case (standard errors of the bin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:50680,error,errors,50680,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['error'],['errors']
Availability,"ble_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double_t beta2); Double_tVoigt(Double_t x, Double_t sigma, Double_t lg, Int_t R = 4). Class Charts; Function documentation; Long_t Hypot(Long_t x, Long_t y). Double_t Hypot(Double_t x, Double_t y). Double_t ASinH(Double_t ). Double_t ACosH(Double_t ). Double_t ATanH(Double_t ). Double_t Log2(Double_t x). Int_t Nint(Float_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Int_t Nint(Double_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Double_t DiLog(Double_t x); The DiLogarithm function; Code translated by R.Brun from CERNLIB DILOG function C332. Double_t Erf(Double_t x); Computation of the error function erf(x).; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x. Double_t Erfc(Double_t x); Compute the complementary error function erfc(x).; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity. Double_t ErfInverse(Double_t x); returns the inverse error function; x must be <-1<x<1. Double_t ErfcInverse(Double_t x); returns the inverse of the complementary error function; x must be 0<x<2; implement using the quantile of the normal distribution; instead of ErfInverse for better numerical precision for large x. Double_t Factorial(Int_t i); Compute factorial(n). Double_t Freq(Double_t x); Computation of the normal frequency function freq(x).; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x. Translated from CERNLIB C300 by Rene Brun. Double_t Gamma(Double_t z); Computation of gamma(z) for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. Double_t Gamma(Double_t a, Double_t x); Computation of the normalized lower incomplete gamma function P(a,x) as defined in the; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 .; Its normalization is such that TMath::Gamma(a,+infinity) = 1 . --- Nve 14-nov-1998 UU-SAP Utrecht. Double_t BreitWigner(Double_t x, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:12560,error,error,12560,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,2,['error'],['error']
Availability,"ble_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double_t beta2); Double_tVoigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4). Class Charts; Function documentation; Long_t Hypot(Long_t x, Long_t y). Double_t Hypot(Double_t x, Double_t y). Double_t ASinH(Double_t ). Double_t ACosH(Double_t ). Double_t ATanH(Double_t ). Double_t Log2(Double_t x). Int_t Nint(Float_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Int_t Nint(Double_t x); Round to nearest integer. Rounds half integers to the nearest; even integer. Double_t DiLog(Double_t x); The DiLogarithm function; Code translated by R.Brun from CERNLIB DILOG function C332. Double_t Erf(Double_t x); Computation of the error function erf(x).; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x. Double_t Erfc(Double_t x); Compute the complementary error function erfc(x).; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity. Double_t ErfInverse(Double_t x); returns the inverse error function; x must be <-1<x<1. Double_t ErfcInverse(Double_t x); returns the inverse of the complementary error function; x must be 0<x<2; implement using the quantile of the normal distribution; instead of ErfInverse for better numerical precision for large x. Double_t Factorial(Int_t i); Compute factorial(n). Double_t Freq(Double_t x); Computation of the normal frequency function freq(x).; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x. Translated from CERNLIB C300 by Rene Brun. Double_t Gamma(Double_t z); Computation of gamma(z) for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. Double_t Gamma(Double_t a, Double_t x); Computation of the normalized lower incomplete gamma function P(a,x) as defined in the; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 .; Its normalization is such that TMath::Gamma(a,+infinity) = 1 . --- Nve 14-nov-1998 UU-SAP Utrecht. Double_t BreitWigner(Double_t x, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMath.html:12660,error,error,12660,root/html532/TMath.html,https://root.cern,https://root.cern/root/html532/TMath.html,1,['error'],['error']
Availability,"ble_t e1 = fit->GetParError(0);; Using the fit option S one can access the full result of the fit including the covariance and correlation matrix. See later the paragraph TFitResult.; 5.5.3 Associated Errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights); otherwise, the error is set equal to the sqrt(bin content). To return the error for a given bin number, do:; Double_t error = h->GetBinError(bin);; Empty bins are excluded in the fit when using the Chi-square fit method. When fitting an histogram representing counts (i.e with Poisson statistics) it is recommended to use the Log-Likelihood method (option ‘L’ or “WL”), particularly in case of low statistics. When the histogram has been filled with weights different than one, a weighted likelihood method can be used and the errors retrieved from the fit are corrected following a procedure described in paragraph 8.5.2 of the book, F. James, Statistical Methods in Experimental Physics, 2nd Edition.; 5.5.4 Fit Statistics; You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This parameter has four digits: mode = pcev (default = 0111). p = 1 print probability; c = 1 print Chi-square/number of degrees of freedom; e = 1 print errors (if e=1, v must be 1); v = 1 print name/values of parameters. For example, to print the fit probability, parameter names/values, and errors, use:; gStyle->SetOptFit(1011);; 5.6 The Fit Panel. The Fit Panel. To display the Fit Panel right click on a histogram to pop up the context menu, and then select the menu entry Fit Panel.; The new Fit Panel GUI is available in ROOT v5.14. Its goal is to replace the old Fit Panel and to provide more user friendly way for performing, exploring and comparing fits.; By design, this us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:181397,error,errors,181397,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"ble_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:15872,error,errors,15872,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['errors']
Availability,"ble_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Add a point with bent errors to the graph.Definition TGraphBentErrors.cxx:192; TGraphBentErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Set ex and ey values for point pointed by the mouse.Definition TGraphBentErrors.cxx:587; TGraphBentErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphBentErrors.h:28; TGraphBentErrors::fEXhighDouble_t * fEXhigh[fNpoints] array of X high errorsDefinition TGraphBentErrors.h:29; TGraphBentErrors::~TGraphBentErrors~TGraphBentErrors() overrideTGraphBentErrors default destructor.Definition TGraphBentErrors.cxx:176; TGraphBentErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphBentErrors.cxx:495; TGraphBentErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphBentErrors by a constant c1.Definition TGraphBentErrors.cxx:510; TGraphBentErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphBentErrors.cxx:474; TGraphBentErrors::GetEXlowdDouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphBentErrors.h:30; TGraphBentErrors::fEYhighdDouble_t * fEYhighd[fNpoints] array of Y high displacementsDefinition TGraphBentErrors.h:36; TGraphBentErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphBentErrors.cxx:278; TGraphBentErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:29450,error,errors,29450,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['error'],['errors']
Availability,"ble_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""A graph with bend errors"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:16092,error,error,16092,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"ble_t maximum = -1111)MENU ; virtual voidTF1::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTFormula::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTF1::SetNDF(Int_t ndf); virtual voidTF1::SetNpx(Int_t npx = 100)MENU ; virtual voidSetNpy(Int_t npy = 100)MENU ; virtual voidTFormula::SetNumber(Int_t number); virtual voidTF1::SetNumberFitPoints(Int_t npfits); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFormula::SetParameter(const char* name, Double_t parvalue); virtual voidTFormula::SetParameter(Int_t ipar, Double_t parvalue); virtual voidTFormula::SetParameters(const Double_t* params); virtual voidTFormula::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidTF1::SetParent(TObject* p = 0); virtual voidTF1::SetParError(Int_t ipar, Double_t error); virtual voidTF1::SetParErrors(const Double_t* errors); virtual voidTF1::SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); virtual voidTFormula::SetParName(Int_t ipar, const char* name); virtual voidTFormula::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; virtual voidSetRange(Double_t xmin, Double_t xmax); virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax)MENU ; virtual voidSetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax); virtual voidTF1::SetSavedPoint(Int_t point, Double_t value); virtual voidTF1::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF2.html:15020,error,error,15020,root/html602/TF2.html,https://root.cern,https://root.cern/root/html602/TF2.html,1,['error'],['error']
Availability,"ble_t ndf); Double_tStudentQuantile(Double_t p, Double_t ndf, Bool_t lower_tail = kTRUE); Double_tTan(Double_t); Double_tTanH(Double_t); Double_tTwoPi(); Double_tVavilov(Double_t x, Double_t kappa, Double_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double_t beta2); Double_tVoigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4). Class Charts; Function documentation; Long_t Hypot(Long_t x, Long_t y). Double_t Hypot(Double_t x, Double_t y). Double_t ASinH(Double_t ). Double_t ACosH(Double_t ). Double_t ATanH(Double_t ). Double_t Log2(Double_t x). Double_t DiLog(Double_t x); The DiLogarithm function; Code translated by R.Brun from CERNLIB DILOG function C332. Double_t Erf(Double_t x); Computation of the error function erf(x).; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x. Double_t Erfc(Double_t x); Compute the complementary error function erfc(x).; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity. Double_t ErfInverse(Double_t x); returns the inverse error function; x must be <-1<x<1. Double_t ErfcInverse(Double_t x); returns the inverse of the complementary error function; x must be 0<x<2; implement using the quantile of the normal distribution; instead of ErfInverse for better numerical precision for large x. Double_t Factorial(Int_t i); Compute factorial(n). Double_t Freq(Double_t x); Computation of the normal frequency function freq(x).; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x. Translated from CERNLIB C300 by Rene Brun. Double_t Gamma(Double_t z); Computation of gamma(z) for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. Double_t Gamma(Double_t a, Double_t x); Computation of the normalized lower incomplete gamma function P(a,x) as defined in the; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 .; Its normalization is such that TMath::Gamma(a,+infinity) = 1 . --- Nve 14-nov-1998 UU-SAP Utrecht. Double_t BreitWigner(Double_t x, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMath.html:7366,error,error,7366,root/html602/TMath.html,https://root.cern,https://root.cern/root/html602/TMath.html,2,['error'],['error']
Availability,"ble_t tmin, Double_t tmax, Option_t* option); Set Profile3D histogram structure and options*-*-; *-* =============================================. If a cell has N data points all with the same value T (especially; possible when dealing with integers), the spread in T for that cell; is zero, and the uncertainty assigned is also zero, and the cell is; ignored in making subsequent fits. If SQRT(T) was the correct error; in the case above, then SQRT(T)/SQRT(N) would be the correct error here.; In fact, any cell with non-zero number of entries N but with zero spread; should have an uncertainty SQRT(T)/SQRT(N). Now, is SQRT(T)/SQRT(N) really the correct uncertainty?; that it is only in the case where the T variable is some sort; of counting statistics, following a Poisson distribution. This should; probably be set as the default case. However, T can be any variable; from an original NTUPLE, not necessarily distributed ""Poissonly"".; The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(T)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(T) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0. The third case above corresponds to Integer T values for which the; uncertainty is +-0.5, with the assumption that the probability that T; takes any value between T-0.5 and T+0.5 is uniform (the same argument; goes for T uniformly distributed between T and T+1); this would be; useful if T is an ADC measurement, for example. Other, fancier options; would be possible, at the cost of adding one more parameter to the PROFILE2D; For example, if all T variables are distributed according to some; known Gaussian of standard deviation Sigma, then:; 'G' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" Sigma/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:30535,error,errors,30535,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,3,['error'],['errors']
Availability,"ble_t x[n], y[n], x1[n], y1[n];. // create a blue graph with a cos function; gr1->SetLineColor(4);; gr1->Draw(""AC*"");. // superimpose the second graph by leaving out the axis option ""A""; gr2->SetLineWidth(3);; gr2->SetMarkerStyle(21);; gr2->SetLineColor(2);; gr2->Draw(""CP"");; }; 4.3 Graphs with Error Bars; A TGraphErrors is a TGraph with error bars. The various draw format options of TGraphErrors::Paint() are derived from TGraph.; void TGraphErrors::Paint(Option_t *option). Graphs with different draw options of error bars. In addition, it can be drawn with the “Z” option to leave off the small lines at the end of the error bars. If option contains “>”, an arrow is drawn at the end of the error bars. If option contains “|>”, a full arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size.; The option “[]” is interesting to superimpose systematic errors on top of the graph with the statistical errors. When it is specified, only the end vertical/horizontal lines of the error bars are drawn.; To control the size of the lines at the end of the error bars (when option 1 is chosen) use SetEndErrorSize(np). By default np=1; np represents the number of pixels.; gStyle->SetEndErrorSize(np);; The four parameters of TGraphErrors are: X, Y (as in TGraph), X-errors, and Y-errors - the size of the errors in the x and y direction. Next example is $ROOTSYS/tutorials/graphs/gerrors.C.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetGrid();. // create the coordinate arrays; Int_t n = 10;; Float_t x[n] = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};; Float_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the error arrays; Float_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Float_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};. // create the TGraphErrors and draw it; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:146593,error,error,146593,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTH1::ExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t x); virtual Int_tFill(Double_t x, Double_t w); virtual Int_tFill(const char* name, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTH1::FillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); virtual voidTH1::FillN(Int_t, const Double_t*, const Double_t*, const Double_t*, Int_t); virtual voidTH1::FillRandom(const char* fname, Int_t ntimes = 5000); virtual voidTH1::FillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tTH1::FindBin(Double_t x, Double_t y = 0, Double_t z = 0); virtual Int_tTH1::FindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; virtual Int_tTH1::FindFixBin(Double_t x, Double_t y = 0, Double_t z = 0) const; virtual Int_tTH1::FindLastBinA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1K.html:3712,error,error,3712,root/html602/TH1K.html,https://root.cern,https://root.cern/root/html602/TH1K.html,2,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTH1::ExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t x, Double_t y); virtual Int_tFill(Double_t x, Double_t y, Double_t w); virtual Int_tFill(Double_t x, const char* namey, Double_t w); virtual Int_tFill(const char* namex, Double_t y, Double_t w); virtual Int_tFill(const char* namex, const char* namey, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillN(Int_t, const Double_t*, const Double_t*, Int_t); virtual voidFillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1); virtual voidFillRandom(const char* fname, Int_t ntimes = 5000); virtual voidFillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tTH1::FindBin(Double_t x, Double_t y = 0, Double_t z = 0); virtual Int_tFindFirstBinAbove(Double_t thr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2.html:3341,error,error,3341,root/html602/TH2.html,https://root.cern,https://root.cern/root/html602/TH2.html,2,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTH1::ExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t x, Double_t y, Double_t z); virtual Int_tFill(Double_t x, Double_t y, Double_t z, Double_t w); virtual Int_tFill(const char* namex, const char* namey, const char* namez, Double_t w); virtual Int_tFill(const char* namex, Double_t y, const char* namez, Double_t w); virtual Int_tFill(const char* namex, const char* namey, Double_t z, Double_t w); virtual Int_tFill(Double_t x, const char* namey, const char* namez, Double_t w); virtual Int_tFill(Double_t x, const char* namey, Double_t z, Double_t w); virtual Int_tFill(Double_t x, Double_t y, const char* namez, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTH1::FillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:3561,error,error,3561,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,2,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTH1::ExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t); virtual Int_tFill(Double_t x, Double_t y); virtual Int_tFill(const char* name, Double_t w); virtual Int_tFill(Double_t x, Double_t y, Double_t w); virtual Int_tFill(Double_t, const char*, Double_t); virtual Int_tFill(const char*, Double_t, Double_t); virtual Int_tFill(const char*, const char*, Double_t); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillN(Int_t, const Double_t*, const Double_t*, Int_t); virtual voidFillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1); virtual voidTH2::FillRandom(const char* fname, Int_t ntimes = 5000); virtual voidTH2::FillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tFindBin(Double_t x, Double_t y, Double_t z = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2Poly.html:8163,error,error,8163,root/html602/TH2Poly.html,https://root.cern,https://root.cern/root/html602/TH2Poly.html,2,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTH1::ExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tTH1::Fill(Double_t x); virtual Int_tTH1::Fill(Double_t x, Double_t w); virtual Int_tTH1::Fill(const char* name, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTH1::FillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); virtual voidTH1::FillN(Int_t, const Double_t*, const Double_t*, const Double_t*, Int_t); virtual voidTH1::FillRandom(const char* fname, Int_t ntimes = 5000); virtual voidTH1::FillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tTH1::FindBin(Double_t x, Double_t y = 0, Double_t z = 0); virtual Int_tTH1::FindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; virtual Int_tTH1::FindFixBin(Double_t x, Double_t y = 0, Double_t z = 0) const; virtual Int_tTH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1C.html:3225,error,error,3225,root/html602/TH1C.html,https://root.cern,https://root.cern/root/html602/TH1C.html,10,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTH1::ExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tTH2::Fill(Double_t x, Double_t y); virtual Int_tTH2::Fill(Double_t x, Double_t y, Double_t w); virtual Int_tTH2::Fill(Double_t x, const char* namey, Double_t w); virtual Int_tTH2::Fill(const char* namex, Double_t y, Double_t w); virtual Int_tTH2::Fill(const char* namex, const char* namey, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTH2::FillN(Int_t, const Double_t*, const Double_t*, Int_t); virtual voidTH2::FillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1); virtual voidTH2::FillRandom(const char* fname, Int_t ntimes = 5000); virtual voidTH2::FillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tTH1::FindBin(Double_t x, Double_t y = 0, Double_t z = 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2C.html:3205,error,error,3205,root/html602/TH2C.html,https://root.cern,https://root.cern/root/html602/TH2C.html,10,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTH1::ExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tTH3::Fill(Double_t x, Double_t y, Double_t z); virtual Int_tTH3::Fill(Double_t x, Double_t y, Double_t z, Double_t w); virtual Int_tTH3::Fill(const char* namex, const char* namey, const char* namez, Double_t w); virtual Int_tTH3::Fill(const char* namex, Double_t y, const char* namez, Double_t w); virtual Int_tTH3::Fill(const char* namex, const char* namey, Double_t z, Double_t w); virtual Int_tTH3::Fill(Double_t x, const char* namey, const char* namez, Double_t w); virtual Int_tTH3::Fill(Double_t x, const char* namey, Double_t z, Double_t w); virtual Int_tTH3::Fill(Double_t x, Double_t y, const char* namez, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTH1::FillN(Int_t ntimes, const Double_t* x, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3C.html:3205,error,error,3205,root/html602/TH3C.html,https://root.cern,https://root.cern/root/html602/TH3C.html,10,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBranchRef*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeSQL.html:3923,error,error,3923,root/html532/TTreeSQL.html,https://root.cern,https://root.cern/root/html532/TTreeSQL.html,3,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Double_t* x); virtual Int_tFill(Double_t x0, Double_t x1, Double_t x2 = 0, Double_t x3 = 0, Double_t x4 = 0, Double_t x5 = 0, Double_t x6 = 0, Double_t x7 = 0, Double_t x8 = 0, Double_t x9 = 0, Double_t x10 = 0, Double_t x11 = 0, Double_t x12 = 0, Double_t x13 = 0, Double_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNtupleD.html:4785,error,error,4785,root/html532/TNtupleD.html,https://root.cern,https://root.cern/root/html532/TNtupleD.html,3,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Float_t* x); Int_tFill(Int_t x0); Int_tFill(Double_t x0); virtual Int_tFill(Float_t x0, Float_t x1 = 0, Float_t x2 = 0, Float_t x3 = 0, Float_t x4 = 0, Float_t x5 = 0, Float_t x6 = 0, Float_t x7 = 0, Float_t x8 = 0, Float_t x9 = 0, Float_t x10 = 0, Float_t x11 = 0, Float_t x12 = 0, Float_t x13 = 0, Float_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNtuple.html:4767,error,error,4767,root/html532/TNtuple.html,https://root.cern,https://root.cern/root/html532/TNtuple.html,3,['error'],['error']
Availability,"ble_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tTTree::Fill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THbookTree.html:5418,error,error,5418,root/html532/THbookTree.html,https://root.cern,https://root.cern/root/html532/THbookTree.html,3,['error'],['error']
Availability,"ble_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const TH2F &h2f);  Copy constructor. ;  ;  TH2F (const TMatrixFBase &m);  Constructor. ;  ;  ~TH2F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2F & operator= (const TH2F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2F. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH2;  ~TH2 () override;  Destructor. ;  ; Int_t BufferEmpty (Int_t action=0) override;  Fill histogram with all entries in the buffer. ;  ; virtual Int_t Fill (const char *namex, const char *namey, Double_t w);  Increment cell defined by namex,namey by a weight w. ;  ; virtual Int_t Fill (const char *namex, Double_t y, Double_t w);  Increment cell defined by namex,y by a weight w. ;  ; virtual Int_t Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2F.html:2137,error,errors,2137,doc/master/classTH2F.html,https://root.cern,https://root.cern/doc/master/classTH2F.html,1,['error'],['errors']
Availability,"ble_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Float_t* x, Float_t* y); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Double_t* x, Double_t* y); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFontEmbed(); boolFontEmbedType1(const char* filename); boolFontEmbedType2(const char* filename); boolFontEmbedType42(const char* filename); voidFontEncode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:9375,error,error,9375,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,3,['error'],['error']
Availability,"ble_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Float_t* x, Float_t* y); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Double_t* x, Double_t* y); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFontEncode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPDF.html:3562,error,error,3562,root/html528/TPDF.html,https://root.cern,https://root.cern/root/html528/TPDF.html,9,['error'],['error']
Availability,"ble_t z); 180 {; 181 fLastPoint[0] = x;; 182 fLastPoint[1] = y;; 183 fLastPoint[2] = z;; 184 }; 185 void SetCurrentDirection(const Double_t *dir) { memcpy(fDirection, dir, 3 * sizeof(Double_t)); }; 186 void SetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); 187 {; 188 fDirection[0] = nx;; 189 fDirection[1] = ny;; 190 fDirection[2] = nz;; 191 }; 192 // void SetNormalChecked(Double_t norm) {fNormalChecked=norm;}; 193 void SetCldirChecked(Double_t *dir) { memcpy(fCldirChecked, dir, 3 * sizeof(Double_t)); }; 194 void SetLastSafetyForPoint(Double_t safe, const Double_t *point); 195 {; 196 fLastSafety = safe;; 197 memcpy(fLastPoint, point, 3 * sizeof(Double_t));; 198 }; 199 void SetLastSafetyForPoint(Double_t safe, Double_t x, Double_t y, Double_t z); 200 {; 201 fLastSafety = safe;; 202 fLastPoint[0] = x;; 203 fLastPoint[1] = y, fLastPoint[2] = z;; 204 }; 205 ; 206 // Check if we have a cached safety value from parallel world, and if this can still be used.; 207 // Return negative value if no cache available.; 208 Double_t GetPWSafetyEstimateFromCache(Double_t cpoint[3]) const; 209 {; 210 // disregard too small or invalid safeties; 211 if (fLastPWSafety < TGeoShape::Tolerance()) {; 212 return -1.;; 213 }; 214 const auto d0 = fLastPWSaftyPnt[0] - cpoint[0];; 215 const auto d1 = fLastPWSaftyPnt[1] - cpoint[1];; 216 const auto d2 = fLastPWSaftyPnt[2] - cpoint[2];; 217 const auto d_sq = d0 * d0 + d1 * d1 + d2 * d2;; 218 // if we have moved too much return -1 as ""invalid""; 219 if (d_sq >= (fLastPWSafety * fLastPWSafety)) {; 220 return -1.;; 221 }; 222 // or return a reasonable cache estimate for safety; 223 return fLastPWSafety - std::sqrt(d_sq);; 224 }; 225 ; 226 // Wrapper for getting the safety from the parallel world.; 227 // Takes care of caching mechanics and talking to the Safety function of parallel world.; 228 Double_t GetPWSafety(Double_t cpoint[3], Double_t saf_max);; 229 ; 230 // enable/disable parallel world safety caching; 231 static void SetPWSafetyCachi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:10406,avail,available,10406,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['avail'],['available']
Availability,"ble_t zmin, Double_t zmax, Option_t* option); Set Profile2D histogram structure and options*-*-; *-* =============================================. If a cell has N data points all with the same value Z (especially; possible when dealing with integers), the spread in Z for that cell; is zero, and the uncertainty assigned is also zero, and the cell is; ignored in making subsequent fits. If SQRT(Z) was the correct error; in the case above, then SQRT(Z)/SQRT(N) would be the correct error here.; In fact, any cell with non-zero number of entries N but with zero spread; should have an uncertainty SQRT(Z)/SQRT(N). Now, is SQRT(Z)/SQRT(N) really the correct uncertainty?; that it is only in the case where the Z variable is some sort; of counting statistics, following a Poisson distribution. This should; probably be set as the default case. However, Z can be any variable; from an original NTUPLE, not necessarily distributed ""Poissonly"".; The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(Z)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(Z) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0. The third case above corresponds to Integer Z values for which the; uncertainty is +-0.5, with the assumption that the probability that Z; takes any value between Z-0.5 and Z+0.5 is uniform (the same argument; goes for Z uniformly distributed between Z and Z+1); this would be; useful if Z is an ADC measurement, for example. Other, fancier options; would be possible, at the cost of adding one more parameter to the PROFILE2D; For example, if all Z variables are distributed according to some; known Gaussian of standard deviation Sigma, then:; 'G' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" Sigma/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:31269,error,errors,31269,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,3,['error'],['errors']
Availability,"ble_t& ); - overloaded function to create background efficiency (rejection) versus; signal efficiency plot (first call of this function); - the function returns the signal efficiency at background efficiency; indicated in theString. ""theString"" must have two entries:; [0]: ""Efficiency""; [1]: the value of background efficiency at which the signal efficiency; is to be returned. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodCuts* DynamicCast(TMVA::IMethod* method); this is a workaround which is necessary since CINT is not capable of handling dynamic casts. { return dynamic_cast<MethodCuts*>(method); }. Double_t GetSeparation(TH1* , TH1* ) const; also overwrite --> not computed for cuts. { return -1; }. Double_t GetSeparation(TMVA::PDF* = 0, TMVA::PDF* = 0) const; { return -1; }. Double_t GetSignificance( void ); { return -1; }. Double_t GetmuTransform(TTree* ); { return -1; }. Double_t GetRarity(Double_t , TMVA::Types::ESBType ) const; rarity distributions (signal or background (default) is uniform in [0,1]). { return 0; }. void SetTestSignalEfficiency(Double_t effS); { fTestSignalEff = effS; }. const Ranking* CreateRanking(); ranking of input variables (not available for cuts). { return 0; }. void CheckSetup(); no check of options at this place. {}. void MatchParsToCuts( const std::vector<Double_t>&, Double_t*, Double_t* ); the definition of fit parameters can be different from the actual; cut requirements; these functions provide the matching. » Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodCuts.html:26640,avail,available,26640,root/html534/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodCuts.html,1,['avail'],['available']
Availability,"ble_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:18181,error,error,18181,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,3,['error'],['error']
Availability,"ble_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphAsymmErrors.html:23248,error,error,23248,root/html602/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html602/TGraphAsymmErrors.html,2,['error'],['error']
Availability,"ble_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& ); Stream an object of class TGraphAsymmErrors. void SwapPoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphAsymmErrors.html:22759,error,error,22759,root/html534/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html534/TGraphAsymmErrors.html,1,['error'],['error']
Availability,"ble_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinContent (Int_t bin) const override;  Returns the content of the input bin Bin numbers are from [1,nbins] and for the overflow/underflow/sea bins the range is [-9,-1]: ;  ; Double_t GetBinContent (Int_t bin) const override;  Get bin content. ;  ; Double_t GetBinContent (Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinContent (Int_t, Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinEffectiveEntries (Int_t bin) const;  Get bin effective entries. ;  ; Double_t GetBinEntries (Int_t bin) const;  Get bin entries. ;  ; Double_t GetBinEntriesVW (Int_t bin) const;  Get bin entries VW. ;  ; Double_t GetBinEntriesW2 (Int_t bin) const;  Get bin entries W2. ;  ; Double_t GetBinEntriesWV2 (Int_t bin) const;  Get bin entries WV2. ;  ; Double_t GetBinError (Int_t bin) const override;  Returns the value of error associated to bin number bin. ;  ; Double_t GetBinError (Int_t bin) const override;  Get bin error. ;  ; Double_t GetBinError (Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinError (Int_t, Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetOverflowContent (Int_t idx);  ; void GetStats (Double_t *stats) const override;  Fill the array stats from the contents of this profile. ;  ; TClass * IsA () const override;  ; Long64_t Merge (const std::vector< TProfile2Poly * > &list);  Merge. ;  ; Long64_t Merge (TCollection *in) override;  Merge. ;  ; void PrintOverflowRegions ();  Print overflow regions. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetContentToAverage ();  Set content to average. ;  ; void SetContentToError ();  Set content to error. ;  ; void SetErrorOption (EErrorType type);  Set error option. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:2738,error,error,2738,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['error'],['error']
Availability,"ble_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; Int_t Fill (Double_t, const char *, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinContent (Int_t bin) const override;  Returns the content of the input bin Bin numbers are from [1,nbins] and for the overflow/underflow/sea bins the range is [-9,-1]: ;  ; Double_t GetBinContent (Int_t bin) const override;  Get bin content. ;  ; Double_t GetBinContent (Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinContent (Int_t, Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinEffectiveEntries (Int_t bin) const;  Get bin effective entries. ;  ; Double_t GetBinEntries (Int_t bin) const;  Get bin entries. ;  ; Double_t GetBinEntriesVW (Int_t bin) const;  Get bin entries VW. ;  ; Double_t GetBinEntriesW2 (Int_t bin) const;  Get bin entries W2. ;  ; Double_t GetBinEntriesWV2 (Int_t bin) const;  Get bin entries WV2. ;  ; Double_t GetBinError (Int_t bin) const override;  Returns the value of error associated to bin number bin. ;  ; Double_t GetBinError (Int_t bin) const override;  Get bin error. ;  ; Double_t GetBinError (Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinError (Int_t, Int_t, Int_t) const override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetOverflowContent (Int_t idx);  ; void GetStats (Double_t *stats) const override;  Fill the array stats from the contents of this profile. ;  ; TClass * IsA () const override;  ; Long64_t Merge (const std::vector< TProfile2Poly * > &list);  Merge. ;  ; Long64_t Merge (TCollection *in) override;  Merge. ;  ; void PrintOverflowRegions ();  Print overflow regions. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetContentToAverage ();  Set content to average. ;  ; void SetContentToError ();  Set content to error. ;  ; void SetErrorOption (EErrorType type);  Set error option. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TH2. ;  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:2639,error,error,2639,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['error'],['error']
Availability,"ble_t)NOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1742; TH2Poly::Honeycombvoid Honeycomb(Double_t xstart, Double_t ystart, Double_t a, Int_t k, Int_t s, Option_t *option=""v"")Bins the histogram using a honeycomb structure If the option ""v"" is specified, the hexagons are drawn...Definition TH2Poly.cxx:1026; TH2Poly::GetBinErrorDouble_t GetBinError(Int_t, Int_t, Int_t) const overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.h:147; TH2Poly::MergeLong64_t Merge(TCollection *) overrideMerge TH2Polys Given the special nature of the TH2Poly, the merge is implemented in terms of subseque...Definition TH2Poly.cxx:1319; TH2Poly::SetBinContentvoid SetBinContent(Int_t bin, Double_t content) overrideSets the contents of the input bin to the input content Negative values between -1 and -9 are for the...Definition TH2Poly.cxx:1407; TH2Poly::GetMaximumDouble_t GetMaximum() constReturns the maximum value of the histogram.Definition TH2Poly.cxx:928; TH2Poly::Resetvoid Reset(Option_t *option) overrideReset this histogram: contents, errors, etc.Definition TH2Poly.cxx:591; TH2Poly::GetNewBinAddedBool_t GetNewBinAdded() constDefinition TH2Poly.h:112; TH2Poly::FillInt_t Fill(const char *, const char *, Double_t) overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.h:136; TH2Poly::GetBinContentDouble_t GetBinContent(Int_t, Int_t, Int_t) const overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.h:144; TH2Poly::fStepYDouble_t fStepYDimensions of a partition cell.Definition TH2Poly.h:164; TH2Poly::SetBinContentvoid SetBinContent(Int_t, Int_t, Double_t) overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.h:149; TH2Poly::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TH2Poly.cxx:1333; TH2Poly::FFTTH1 * FFT(TH1 *, Option_t *) overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1735; TH2Poly::FillInt_t Fill(Double_t, const char *, Double_t) overrideNOT IMPLEMENTED for TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8h_source.html:22408,error,errors,22408,doc/master/TH2Poly_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8h_source.html,1,['error'],['errors']
Availability,"ble_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:17682,error,errors,17682,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,3,['error'],['errors']
Availability,"ble_t* point) const; virtual voidTObject::Copy(TObject& object) const; voidCreateThreadData(Int_t nthreads); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceToPrimitive(Int_t px, Int_t py); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGeoBoolNode::EGeoBoolTypeGetBooleanOperator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TGeoMatrix*GetLeftMatrix() const; TGeoShape*GetLeftShape() const; virtual const char*TObject::GetName() const; virtual Int_tGetNpoints(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGeoMatrix*GetRightMatrix() const; TGeoShape*GetRightShape() const; TGeoBoolNode::ThreadData_t&GetThreadData() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBoolNode.html:3016,error,error,3016,root/html534/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html534/TGeoBoolNode.html,3,['error'],['error']
Availability,"ble_t* point, const Double_t* dir, Double_t* norm); virtual Bool_tContains(const Double_t* point) const; virtual voidTObject::Copy(TObject& object) const; voidCreateThreadData(Int_t nthreads); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceToPrimitive(Int_t px, Int_t py); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGeoBoolNode::EGeoBoolTypeGetBooleanOperator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TGeoMatrix*GetLeftMatrix() const; TGeoShape*GetLeftShape() const; virtual const char*TObject::GetName() const; virtual Int_tGetNpoints(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGeoMatrix*GetRightMatrix() const; TGeoShape*GetRightShape() const; TGeoBoolNode::ThreadData_t&GetThreadData() const; virtual const char*TObject::GetTitle() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBoolNode.html:2932,error,error,2932,root/html534/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html534/TGeoBoolNode.html,3,['error'],['error']
Availability,"ble_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tTGeoPcon::DistToSegZ(const Double_t* point, const Double_t* dir, Int_t& iz) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Double_t&TGeoPcon::Dphi(); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoPcon::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoPcon::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; Double_tTGeoPcon::GetDphi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPgon.html:3928,error,error,3928,root/html534/TGeoPgon.html,https://root.cern,https://root.cern/root/html534/TGeoPgon.html,3,['error'],['error']
Availability,"ble_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene Brun 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id: TFitter.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:17012,error,error,17012,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,1,['error'],['error']
Availability,"ble_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene Brun 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id: TFitter.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFitter.html:17081,error,error,17081,root/html530/TFitter.html,https://root.cern,https://root.cern/root/html530/TFitter.html,1,['error'],['error']
Availability,"ble_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. TFitter(const TFitter& ). TFitter& operator=(const TFitter& ). TMinuit * GetMinuit() const; {return fMinuit;}. » Author: Rene Brun 31/08/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/minuit:$Id: TFitter.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFitter.html:17081,error,error,17081,root/html532/TFitter.html,https://root.cern,https://root.cern/root/html532/TFitter.html,1,['error'],['error']
Availability,"ble_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphSmooth.html:2348,error,error,2348,root/html528/TGraphSmooth.html,https://root.cern,https://root.cern/root/html528/TGraphSmooth.html,6,['error'],['error']
Availability,"ble_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetDX() const; virtual Double_tGetDY() const; virtual Double_tGetDZ() const; virtual Double_tGetFacetArea(Int_t index = 0) const; virtual Int_tGetFittingBox(const TGeoBBox* parambox, TGeoM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBBox.html:4705,error,error,4705,root/html528/TGeoBBox.html,https://root.cern,https://root.cern/root/html528/TGeoBBox.html,3,['error'],['error']
Availability,"ble_tfGTExpected function change in next iteration; Double_t*fGr[fMaxParam] Gradients of objective function; Int_tfINDFLG[5]internal flags;; Int_tfLastFixedLast fixed parameter number; Bool_tfLogLikeLogLikelihood flag; Int_tfMaxParam; Int_tfNED1Number of experimental vectors X=(x1,x2,...xK); Int_tfNED12fNED1+fNED2; Int_tfNED2K - Length of vector X plus 2 (for chi2); Int_tfNfcnNumber of FCN calls;; Int_tfNlimMulfNlimMul - after fNlimMul successful iterations permits four-fold increasing of fPL; Int_tfNlog; Int_tfNmaxIterfNmaxIter - maximum number of iterations; Int_tfNparfNpar - number of parameters; Int_tfNstepDecfNstepDec - maximum number of step decreasing counter; Bool_tfNumericDerivatives; Double_t*fPL[fMaxParam] Limits for parameters step. If <0, then parameter is fixed; Double_t*fPL0[fMaxParam] Step initial bounds; Double_t*fParamError[fMaxParam] Parameter errors; Double_t*fR[fMaxParam] Correlation factors; Double_tfRPPrecision of fit ( machine zero on CDC 6000) quite old yeh?; Double_tfSfS - objective function value (return); Double_t*fSumLog[fNlog]; Bool_tfWARNwarnings; Double_t*fZ[fMaxParam2] Invers fZ0 matrix - covariance matrix; Double_t*fZ0[fMaxParam2] Matrix of approximate second derivatives of objective function. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFumili(Int_t maxpar = 25); maxpar is the maximum number of parameters used with TFumili object. void BuildArrays(). Allocates memory for internal arrays. Called by TFumili::TFumili. ~TFumili(). TFumili destructor. Double_t Chisquare(Int_t npar, Double_t* params) const; return a chisquare equivalent. void Clear(Option_t* opt = """"). Resets all parameter names, values and errors to zero. Argument opt is ignored. NB: this procedure doesn't reset parameter limits. void DeleteArrays(). Deallocates memory. Called from destructor TFumili::~TFumili. void Derivatives(Double_t* , Double_t* ). Calculates partial derivatives of theoretical function. Input:; fX - vec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFumili.html:15615,error,errors,15615,root/html532/TFumili.html,https://root.cern,https://root.cern/root/html532/TFumili.html,4,['error'],['errors']
Availability,"ble_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ; Parameters. [in]srcsource rectangle ; [in]destdestination rectangle ; [in]gcgraphics context ; [in]src_x,src_yspecify the x and y coordinates, which are relative to the origin of the source rectangle and specify upper-left corner. ; [in]width,heightthe width and height, which are the dimensions of both the source and destination rectangles ; [in]dest_x,dest_yspecify the upper-left corner of the destination rectangle. GC components in use: function, plane-mask, subwindow-mode, graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ CopyGC(). void TGWin32VirtualXProxy::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies the specified components from the source GC ""org"" to the destination GC ""dest"". ; The ""mask"" defines which component to copy and it is a data member of GCValues_t. ; Reimplemented from TVirtualX. ◆ CopyPixmap(). void TGWin32VirtualXProxy::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. ; Reimplemented from TVirtualX. ◆ CreateBitmap(). Pixmap_t TGWin32VirtualXProxy::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Creates a bitmap (i.e. ; pixmap with depth 1) from the bitmap data.; Parameters. [in]idspecifies which screen the pixmap is created on ; [in]bitmapthe data in bitmap format ; [in]width,heightdefine the dimensions of the pixmap . Reimplemented from TVirtualX. ◆ CreateCursor(). Cursor_t TGWin32VirtualXProxy::CreateCursor ; (; ECursor ; cursor). overridevirtual . Cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:59497,mask,mask,59497,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"ble_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:14312,error,error,14312,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,18,['error'],['error']
Availability,"ble_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:20756,error,error,20756,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,2,['error'],['error']
Availability,"ble_t TMath::ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t TMath::EulerGamma ();  Euler-Mascheroni Constant. ;  ; Double_t TMath::Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t TMath::Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t TMath::FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t TMath::FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t TMath::Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t TMath::Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t TMath::Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t TMath::FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t TMath::Freq (Double_t x);  Computation of the normal frequency function freq(x). ;  ; constexpr Double_t TMath::G ();  Gravitational constant in: \( m^{3} kg^{-1} s^{-2} \). ;  ; Double_t TMath::Gamma (Double_t a, Double_t x);  Computation of the normalized lower incomplete gamma function P(a,x) as defined in the Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 . ;  ; Double_t TMath::Gamma (Double_t z);  Computation of gamma(z) for all z. ;  ; Double_t TMath::GammaDist (Double_t x, Double_t gamma, Double_t mu=0, Double_t beta=1);  Computes the density function of Gamma distribution at point x. ;  ; Double_t TMath::Gaus (Double_t x, Double_t mean=0, Double_t sigma=1, Bool_t norm=kFALSE);  Calculates a gaussian function with mean and sigma. ;  ; constexpr Double_t TMath::Gcgs ();  \( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:6688,down,downward,6688,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,1,['down'],['downward']
Availability,"ble_t fX0;  ; Double_t fDX;  ; Int_t fNT;  ; Double_t fT [MaxNT *2];  ; Double_t fU [NumOfSlices *2];  ; Double_t fD [NumOfSlices *2];  ; static const Int_t MaxNT = 100;  ; static const Int_t NumOfSlices = 2000;  ; void InitMoveScreen (Double_t xmin, Double_t xmax);  Initialize ""MOVING SCREEN"" method. ;  ; void FindVisibleDraw (Double_t *r1, Double_t *r2);  Find visible parts of line (draw line) ;  ; void ModifyScreen (Double_t *r1, Double_t *r2);  Modify SCREEN. ;  . Raster screen; Specialized hidden line removal algorithm for rendering 3D polygons ordered by depth (front-to-back) . Double_t fXrast;  Minimal x. ;  ; Double_t fYrast;  Minimal y. ;  ; Double_t fDXrast;  X size. ;  ; Double_t fDYrast;  Y size. ;  ; Int_t fNxrast;  Number of pixels in x. ;  ; Int_t fNyrast;  Number of pixels in y. ;  ; Int_t fIfrast;  Flag, if it not zero them the algorithm is off. ;  ; std::vector< Int_t > fRaster;  Pointer to raster buffer. ;  ; Int_t fJmask [30];  Indices of subsets of n-bit masks (n is from 1 to 30) ;  ; Int_t fMask [465];  Set of masks (30+29+28+...+1)=465. ;  ; void InitRaster (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, Int_t nx, Int_t ny);  Initialize hidden lines removal algorithm (RASTER SCREEN) ;  ; void ClearRaster ();  Clear screen. ;  ; void FindVisibleLine (Double_t *p1, Double_t *p2, Int_t ntmax, Int_t &nt, Double_t *t);  Find visible part of a line (""RASTER SCREEN"") ;  ; void FillPolygonBorder (Int_t nn, Double_t *xy);  Fill a polygon including border (""RASTER SCREEN"") ;  . Marching Cubes; Construction of iso-surfaces, see publication CERN-CN-95-17 . Double_t fP8 [8][3];  Vertices. ;  ; Double_t fF8 [8];  Function values. ;  ; Double_t fG8 [8][3];  Function gradients. ;  ; void MarchingCube (Double_t fiso, Double_t p[8][3], Double_t f[8], Double_t g[8][3], Int_t &nnod, Int_t &ntria, Double_t xyz[][3], Double_t grad[][3], Int_t itria[][3]);  Topological decider for ""Marching Cubes"" algorithm Find set of triangles approximating the iso-sur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:12822,mask,masks,12822,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,2,['mask'],['masks']
Availability,"bles ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:37687,error,error,37687,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['error']
Availability,"bles listed in 'nset'. const RooAbsReal* getNormObj(const RooArgSet* set, const RooArgSet* iset, const TNamed* rangeName = 0) const; Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; rangeName, optionally taking the integrand normalized over observables nset. Bool_t syncNormalization(const RooArgSet* dset, Bool_t adjustProxies = kTRUE) const; Verify that the normalization integral cached with this PDF; is valid for given set of normalization observables. If not, the cached normalization integral (if any) is deleted; and a new integral is constructed for use with 'nset'; Elements in 'nset' can be discrete and real, but must be lvalues. For functions that declare to be self-normalized by overloading the; selfNormalized() function, a unit normalization is always constructed. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:48199,error,error,48199,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,6,['error'],['error']
Availability,"ble ; elow, . double ; ehigh, . double ; binWidth = 0, . double ; xErrorFrac = 1.0, . bool ; correctForBinWidth = true, . double ; scaleFactor = 1.0 . ). Add a bin to this histogram with the specified bin contents and error. ; The bin width is used to set the relative scale of bins with different widths. ; Definition at line 477 of file RooHist.cxx. ◆ addBinWithXYError(). void RooHist::addBinWithXYError ; (; Axis_t ; binCenter, . double ; n, . double ; exlow, . double ; exhigh, . double ; eylow, . double ; eyhigh, . double ; scaleFactor = 1.0 . ). Add a bin to this histogram with the specified bin contents and error. ; The bin width is used to set the relative scale of bins with different widths. ; Definition at line 498 of file RooHist.cxx. ◆ addEfficiencyBin(). void RooHist::addEfficiencyBin ; (; Axis_t ; binCenter, . Int_t ; n1, . Int_t ; n2, . double ; binWidth = 0, . double ; xErrorFrac = 1.0, . double ; scaleFactor = 1.0 . ). Add a bin to this histogram with the value n1/(n1+n2) using an error bar calculated with Binomial statistics. ; Definition at line 557 of file RooHist.cxx. ◆ addEfficiencyBinWithError(). void RooHist::addEfficiencyBinWithError ; (; Axis_t ; binCenter, . double ; n1, . double ; n2, . double ; en1, . double ; en2, . double ; binWidth = 0, . double ; xErrorFrac = 1.0, . double ; scaleFactor = 1.0 . ). Add a bin to this histogram with the value n1/(n1+n2) using an error bar calculated with Binomial statistics. ; Definition at line 579 of file RooHist.cxx. ◆ addPoint(). void RooHist::addPoint ; (; Axis_t ; binCenter, . double ; y, . double ; yscale, . double ; exlow, . double ; exhigh, . double ; eylow, . double ; eyhigh . ). private . Definition at line 398 of file RooHist.cxx. ◆ Class(). static TClass * RooHist::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooHist::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooHist::Class_Version ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:49807,error,error,49807,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['error'],['error']
Availability,"blic Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Int_t GetAbsLast () const;  Return absolute index to last object in array. ;  ; TObject * GetFromTable (Int_t idx) const;  the reference may be in the TRefTable ;  ; Bool_t GetObjectUID (Int_t &uid, TObject *obj, const char *methodname);  Private/static function, check for validity of pid. ;  ; void Init (Int_t s, Int_t lowerBound);  Initialize a TRefArray. ;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fLast;  ; Int_t fLowerBound;  ; TProcessID * fPID;  ; UInt_t * fUI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefArray.html:21862,error,error,21862,doc/master/classTRefArray.html,https://root.cern,https://root.cern/doc/master/classTRefArray.html,1,['error'],['error']
Availability,"blic ROOT::Minuit2::FunctionMinimizer. Base common class providing the API for all the minimizer; Various Minimize methods are provided varying on the type of; FCN function passesd and on the objects used for the parameters. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ModularFunctionMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html:1435,toler,toler,1435,root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,4,['toler'],['toler']
Availability,"bmission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the git master - browse; 6.20 - browse | download; 6.18 - browse | download; 6.16 - browse | download; 6.14 - browse | download; 6.12 - browse | download; 6.10 - browse | download; 6.08 - browse | download; 6.06 - browse | download; 6.04 - browse | download; 6.02 - browse | download; 5.34 - browse | download; 5.32 - browse | download; 5.30 - browse | download; 5.28 - browse | download; 5.26 - browse | download; 5.24 - browse | download. Additionally, the source code is accessible via:. Browsing the Git repository using gitweb; Github. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:2195,down,download,2195,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['down'],['download']
Availability,"bmit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the git master - browse; 6.20 - browse | download; 6.18 - browse | download; 6.16 - browse | download; 6.14 - browse | download; 6.12 - browse | download; 6.10 - browse | download; 6.08 - browse | download; 6.06 - browse | download; 6.04 - browse | download; 6.02 - browse | download; 5.34 - browse | download; 5.32 - browse | download; 5.30 - browse | download; 5.28 - browse | download; 5.26 - browse | download; 5.24 - browse | download. Additionally, the source code is accessible via:. Browsing the Git repository using gitweb; Github. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:2221,down,download,2221,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['down'],['download']
Availability,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:74048,error,error,74048,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,123,['error'],['error']
Availability,"bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:11545,error,errors,11545,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,1,['error'],['errors']
Availability,"bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEffProd.html:40193,error,errors,40193,root/html534/RooEffProd.html,https://root.cern,https://root.cern/root/html534/RooEffProd.html,1,['error'],['errors']
Availability,"boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_t_errorCountNumber of errors remaining to print; static Bool_t_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:44767,error,errors,44767,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,2,['error'],['errors']
Availability,"boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int, double); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string&) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. intROOT::Math::Minimizer::fDebugprint level; TMVA::IFitterTarget*fFitness; unsigned intROOT::Math::Minimizer::fMaxCallsmax number of function calls ; unsigned intROOT::Math::Minimizer::fMaxItermax number or iterations used to find the minimum; ROOT::Math::GeneticMinimizerParametersfParameters; doubleROOT::Math::Minimizer::fPrecprecision; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer ; intROOT::Math::Minimizer::fStrategyminimizer strategy; doubleROOT::Math::Minimizer::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int = 0). virtual ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step). bool Minimize(). double MinValue() const. double Edm() const. const double * X() const. const double * MinGradient() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. bool ProvidesError() const. co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GeneticMinimizer.html:4373,error,errors,4373,root/html528/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GeneticMinimizer.html,3,['error'],['errors']
Availability,"boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet! Current normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMomentMorph.html:40515,error,errors,40515,root/html534/RooMomentMorph.html,https://root.cern,https://root.cern/root/html534/RooMomentMorph.html,1,['error'],['errors']
Availability,"boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:44032,error,errors,44032,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,2,['error'],['errors']
Availability,"bort on errors. */; 15059 mg_cry_ctx_internal(; 15060 phys_ctx,; 15061 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15062 portsTotal);; 15063 }; 15064#endif; 15065 ; 15066#if defined(USE_X_DOM_SOCKET); 15067 if (ip_version == 99) {; 15068 /* Unix domain socket */; 15069 } else; 15070#endif; 15071 ; 15072 if (ip_version > 4) {; 15073 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15074#if defined(USE_IPV6); 15075 if (ip_version > 6) {; 15076 if (so.lsa.sa.sa_family == AF_INET6; 15077 && setsockopt(so.sock,; 15078 IPPROTO_IPV6,; 15079 IPV6_V6ONLY,; 15080 (void *)&off,; 15081 sizeof(off)); 15082 != 0) {; 15083 ; 15084 /* Set IPv6 only option, but don't abort on errors. */; 15085 mg_cry_ctx_internal(phys_ctx,; 15086 ""cannot set socket option ""; 15087 ""IPV6_V6ONLY=off (entry %i)"",; 15088 portsTotal);; 15089 }; 15090 } else {; 15091 if (so.lsa.sa.sa_family == AF_INET6; 15092 && setsockopt(so.sock,; 15093 IPPROTO_IPV6,; 15094 IPV6_V6ONLY,; 15095 (void *)&on,; 15096 sizeof(on)); 15097 != 0) {; 15098 ; 15099 /* Set IPv6 only option, but don't abort on errors. */; 15100 mg_cry_ctx_internal(phys_ctx,; 15101 ""cannot set socket option ""; 15102 ""IPV6_V6ONLY=on (entry %i)"",; 15103 portsTotal);; 15104 }; 15105 }; 15106#else; 15107 mg_cry_ctx_internal(phys_ctx, ""%s"", ""IPv6 not available"");; 15108 closesocket(so.sock);; 15109 so.sock = INVALID_SOCKET;; 15110 continue;; 15111#endif; 15112 }; 15113 ; 15114 if (so.lsa.sa.sa_family == AF_INET) {; 15115 ; 15116 len = sizeof(so.lsa.sin);; 15117 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15118 mg_cry_ctx_internal(phys_ctx,; 15119 ""cannot bind to %.*s: %d (%s)"",; 15120 (int)vec.len,; 15121 vec.ptr,; 15122 (int)ERRNO,; 15123 strerror(errno));; 15124 closesocket(so.sock);; 15125 so.sock = INVALID_SOCKET;; 15126 continue;; 15127 }; 15128 }; 15129#if defined(USE_IPV6); 15130 else if (so.lsa.sa.sa_family == AF_INET6) {; 15131 ; 15132 len = sizeof(so.lsa.sin6);; 15133 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15134 mg_cry_ctx_i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:446702,error,errors,446702,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"bort on errors. */; 15060 mg_cry_ctx_internal(; 15061 phys_ctx,; 15062 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15063 portsTotal);; 15064 }; 15065#endif; 15066 ; 15067#if defined(USE_X_DOM_SOCKET); 15068 if (ip_version == 99) {; 15069 /* Unix domain socket */; 15070 } else; 15071#endif; 15072 ; 15073 if (ip_version > 4) {; 15074 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15075#if defined(USE_IPV6); 15076 if (ip_version > 6) {; 15077 if (so.lsa.sa.sa_family == AF_INET6; 15078 && setsockopt(so.sock,; 15079 IPPROTO_IPV6,; 15080 IPV6_V6ONLY,; 15081 (void *)&off,; 15082 sizeof(off)); 15083 != 0) {; 15084 ; 15085 /* Set IPv6 only option, but don't abort on errors. */; 15086 mg_cry_ctx_internal(phys_ctx,; 15087 ""cannot set socket option ""; 15088 ""IPV6_V6ONLY=off (entry %i)"",; 15089 portsTotal);; 15090 }; 15091 } else {; 15092 if (so.lsa.sa.sa_family == AF_INET6; 15093 && setsockopt(so.sock,; 15094 IPPROTO_IPV6,; 15095 IPV6_V6ONLY,; 15096 (void *)&on,; 15097 sizeof(on)); 15098 != 0) {; 15099 ; 15100 /* Set IPv6 only option, but don't abort on errors. */; 15101 mg_cry_ctx_internal(phys_ctx,; 15102 ""cannot set socket option ""; 15103 ""IPV6_V6ONLY=on (entry %i)"",; 15104 portsTotal);; 15105 }; 15106 }; 15107#else; 15108 mg_cry_ctx_internal(phys_ctx, ""%s"", ""IPv6 not available"");; 15109 closesocket(so.sock);; 15110 so.sock = INVALID_SOCKET;; 15111 continue;; 15112#endif; 15113 }; 15114 ; 15115 if (so.lsa.sa.sa_family == AF_INET) {; 15116 ; 15117 len = sizeof(so.lsa.sin);; 15118 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15119 mg_cry_ctx_internal(phys_ctx,; 15120 ""cannot bind to %.*s: %d (%s)"",; 15121 (int)vec.len,; 15122 vec.ptr,; 15123 (int)ERRNO,; 15124 strerror(errno));; 15125 closesocket(so.sock);; 15126 so.sock = INVALID_SOCKET;; 15127 continue;; 15128 }; 15129 }; 15130#if defined(USE_IPV6); 15131 else if (so.lsa.sa.sa_family == AF_INET6) {; 15132 ; 15133 len = sizeof(so.lsa.sin6);; 15134 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15135 mg_cry_ctx_i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:446735,error,errors,446735,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"bose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; Internal method. RooDataSet * generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; Generate a new dataset with values of the whatVars variables; sampled from our distribution. Use the specified existing dataset; as a prototype: the new dataset will contain the same number of; events as the prototype (by default), and any prototype variables not in; whatVars will be copied into the new dataset for each generated; event and also used to set our PDF parameters. The user can specify a; number of events to generate that will override the default. The result is a; copy of the prototype dataset with only variables in whatVars; randomized. Variables in whatVars that are not in the prototype; will be added as new columns to the generated dataset. Returns; zero in case of an error. The caller takes ownership of the; returned dataset. Int_t* randomizeProtoOrder(Int_t nProto, Int_t nGen, Bool_t resample = kFALSE) const; Return lookup table with randomized access order for prototype events,; given nProto prototype data events and nGen events that will actually; be accessed. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Load generatedVars with the subset of directVars that we can generate events for,; and return a code that specifies the generator algorithm we will use. A code of; zero indicates that we cannot generate any of the directVars (in this case, nothing; should be added to generatedVars). Any non-zero codes will be passed to our generateEvent(); implementation, but otherwise its value is arbitrary. The default implemetation of; this method returns zero. Subclasses will usually implement this method using the; matchArgs() methods to advertise the algorithms they provide. void in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:65859,error,error,65859,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,4,['error'],['error']
Availability,"bouncing"" effects. In some case; looks nicer than the option ""3"" (because it is smooth) but it can be; misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double y1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, y1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, y1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:8485,error,errors,8485,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,2,['error'],['errors']
Availability,"bouncing"" effects. In some cases it looks nicer than option ""3""; (because it is smooth) but it can be misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(6);; ge->SetFillStyle(3005);; ge->Draw(""a4"");; return c42;; }; The following example shows how the option ""[]"" can be used to superimpose; systematic errors on top of a graph with statistical errors. Picture; Source. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and righ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphPainter.html:9701,error,errors,9701,root/html534/TGraphPainter.html,https://root.cern,https://root.cern/root/html534/TGraphPainter.html,3,['error'],['errors']
Availability,"bove).; One can delete the statistics box for a histogram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); The error bars options. ""E""; Default. Shows only the error bars, not a marker. ""E1""; Small lines are drawn at the end of the error bars. ""E2""; Error rectangles are drawn. ""E3""; A filled area is drawn through the end points of the vertical error bars. ""E4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:19200,error,error,19200,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['error']
Availability,"bove).; One can delete the statistics box for a histogram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Labels used in the statistics box (""Mean"", ""RMS"", ...) can be changed from; $ROOTSYS/etc/system.rootrc or; .rootrc; (look for the string ""Hist.Stats.""). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); The error bars options. ""E""; Default. Shows only the error bars, not a marker. ""E1""; Small lines are drawn at the end of the error bars. ""E2""; Error rectangles are drawn. ""E3""; A filled area is drawn through the end points of the vertical error bars. ""E4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:19847,error,error,19847,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,2,['error'],['error']
Availability,"bove; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use; 7605/// TAxis::SetRange(0, 0) to unset the range. To ensure that the returned standard; 7606/// deviation (and all other statistics) is always that of the binned data stored; 7607/// in the histogram, call TH1::ResetStats. See TH1::GetStats.; 7608 ; 7609Double_t TH1::GetStdDev(Int_t axis) const; 7610{; 7611 if (axis<1 || (axis>3 && axis<11) || axis>13) return 0;; 7612 ; 7613 Double_t x, stddev2, stats[kNstat];; 7614 for (Int_t i=4;i<kNstat;i++) stats[i] = 0;; 7615 GetStats(stats);; 7616 if (stats[0] == 0) return 0;; 7617 Int_t ax[3] = {2,4,7};; 7618 Int_t axm = ax[axis%10 - 1];; 7619 x = stats[axm]/stats[0];; 7620 // for negative stddev (e.g. when having negative weights) - return stdev=0; 7621 stddev2 = TMath::Max( stats[axm+1]/stats[0] -x*x, 0.0 );; 7622 if (axis<10); 7623 return TMath::Sqrt(stddev2);; 7624 else {; 7625 // The right formula for StdDev error depends on 4th momentum (see Kendall-Stuart Vol 1 pag 243); 7626 // formula valid for only gaussian distribution ( 4-th momentum = 3 * sigma^4 ); 7627 Double_t neff = GetEffectiveEntries();; 7628 return ( neff > 0 ? TMath::Sqrt(stddev2/(2*neff) ) : 0. );; 7629 }; 7630}; 7631 ; 7632////////////////////////////////////////////////////////////////////////////////; 7633/// Return error of standard deviation estimation for Normal distribution; 7634///; 7635/// Note that the mean value/StdDev is computed using the bins in the currently; 7636/// defined range (see TAxis::SetRange). By default the range includes; 7637/// all bins from 1 to nbins included, excluding underflows and overflows.; 7638/// To force the underflows and overflows in the computation, one must; 7639/// call the static function TH1::StatOverflows(kTRUE) before filling; 7640/// the histogram.; 7641///; 7642/// Value returned is standard deviation of sample standard deviation.; 7643/// Note that it is an approximated value which is valid only in the case that the; 7644/// original data distr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:298148,error,error,298148,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"box is the new Bin to be added; 249 Box littleBox(min, max);; 250 list<Box>::iterator it;; 251 // So we look for the Bin already in the list that contains; 252 // littleBox; 253 it = std::find_if(fList->Begin(), fList->End(), BoxContainer(littleBox));; 254 if ( it != fList->End() ); 255// cout << ""Found: "" << *it << endl;; 256 ;; 257 else {; 258 cout << ""SparseData::Add -> FAILED! box not found! "" << endl;; 259 cout << littleBox << endl;; 260 return; // Does not add the box, as it is part of the; 261 // underflow/overflow bin; 262 }; 263 // If it happens to have a value, then we add the value,; 264 if ( it->GetVal() ); 265 it->AddVal( content );; 266 else; 267 {; 268 // otherwise, we divide the container!; 269 DivideBox(it->GetMin(), it->GetMax(),; 270 littleBox.GetMin(), littleBox.GetMax(),; 271 it->GetMin().size(), it->GetMin().size() - 1,; 272 fList->GetList(), content, error );; 273 // and remove it from the list; 274 fList->Remove(it);; 275 }; 276 }; 277 ; 278 void SparseData::GetPoint(const unsigned int i,; 279 std::vector<double>& min, std::vector<double>&max,; 280 double& content, double& error); 281 {; 282 // Get the point number i. This is a method to explore the; 283 // data stored in the class.; 284 ; 285 unsigned int counter = 0;; 286 list<Box>::iterator it = fList->Begin();; 287 while ( it != fList->End() && counter != i ) {; 288 ++it;; 289 ++counter;; 290 }; 291 ; 292 if ( (it == fList->End()) || (counter != i) ); 293 throw std::out_of_range(""SparseData::GetPoint"");; 294 ; 295 min = it->GetMin();; 296 max = it->GetMax();; 297 content = it->GetVal();; 298 error = it->GetError();; 299 }; 300 ; 301 void SparseData::PrintList() const; 302 {; 303 // Debug method to print a list with all the data stored.; 304 copy(fList->Begin(), fList->End(), ostream_iterator<Box>(cout, ""\n------\n""));; 305 }; 306 ; 307 ; 308 void SparseData::GetBinData(BinData& bd) const; 309 {; 310 // Created the corresponding BinData; 311 ; 312 list<Box>::iterator it = fList->Begin();; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SparseData_8cxx_source.html:8730,error,error,8730,doc/master/SparseData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SparseData_8cxx_source.html,2,['error'],['error']
Availability,"box{n}\) or with name \(\mbox{ name}\).; 5.14.12 index(…); index(const char* name) returns the index (current position) of the parameter with name \(\mbox{ name}\) in the list of defined parameters. The index is the same as for the calculation of the function value in the user’s FCN (FCNBase::operator()).; 5.14.13 name(…); name(unsigned int n) returns the name of the parameter with index \(n\).; 5.15 MnUserParameterState; [api:state] The class MnUserParameterState contains the MnUserParameters and the MnUserCovariance. It can be created on input by the user, or by M itself as user representable format of the result of the minimization.; 5.15.1 MnUserParameterState(const std::vector\(<\)double\(>\)&,. const std::vector\(<\)double\(>\)&) ###; Construct a state from starting values specified via std::vector\(<\)double\(>\). No covariance is available.; 5.15.2 MnUserParameterState(const MnUserParameters&); Construct a state from starting values specified via MnUserParameters. No covariance is available.; 5.15.3 MnUserParameterState(const MnUserParameters&,. const MnUserCovariance&) ###; Construct a state from starting values specified via MnUserParameters and MnUserCovariance.; 5.15.4 parameters(); The method parameters() returns a const reference to the MnUserParameters data member.; 5.15.5 covariance(); The method covariance() returns a const reference to the MnUserCovariance data member.; 5.15.6 globalCC(); The method globalCC() returns a const reference to the MnGlobalCorrelationCoeff data member.; 5.15.7 MnUserParameterState::isValid() and. MnUserParameterState::hasCovariance() ###; isValid() returns true if the state is valid, false if not. hasCovariance returns true if the state has a valid covariance, false otherwise.; 5.15.8 MnUserParameterState::fval(), MnUserParameterState::edm(),. MnUserParameterState::nfcn() ###; After minimization:. fval() returns the function value at the minimum; edm() returns the expected vertical distance to the minimum EDM; nfcn() ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:58487,avail,available,58487,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['avail'],['available']
Availability,"branches of the current tree. Warning: May set the current tree!. Long64_t GetReadEntry() const; -- See TTree::GetReadEntry(). Double_t GetWeight() const; -- Return the chain weight. By default the weight is the weight of the current tree.; However, if the weight has been set in TChain::SetWeight(); with the option ""global"", then that weight will be returned. Warning: May set the current tree!. void InvalidateCurrentTree(); Set the TTree to be reloaded as soon as possible. In particular this; is needed when adding a Friend. Int_t LoadBaskets(Long64_t maxmemory); -- Dummy function.; It could be implemented and load all baskets of all trees in the chain.; For the time being use TChain::Merge and TTree::LoadBasket; on the resulting tree. Long64_t LoadTree(Long64_t entry); -- Find the tree which contains entry, and set it as the current tree. Returns the entry number in that tree. The input argument entry is the entry serial number in the whole chain. In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number of less than zero or too large for the chain.; or too large for the large TTree.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or; the TTree is missing from the file. Note: This is the only routine which sets the value of fTree to; a non-zero pointer. void Lookup(Bool_t force = kFALSE); Check / locate the files in the chain.; By default only the files not yet looked up are checked.; Use force = kTRUE to check / re-check every file. void Loop(Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); -- Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED). void ls(Option_t* option = """") const; -- List the chain. Long64_t Merge(const char* name, Option_t* option = """"); Merge all the entries in the chain into a new tree in a new file. See important note in the following function Merge(). If the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChain.html:42147,error,error,42147,root/html534/TChain.html,https://root.cern,https://root.cern/root/html534/TChain.html,3,['error'],['error']
Availability,"brary for a class (autoload mechanism), see the AutoLoad() methods below. ; Implements TInterpreter.; Definition at line 5741 of file TCling.cxx. ◆ LoadMacro(). void TCling::LoadMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). finalvirtual . Load a macro file in cling's memory. ; Implements TInterpreter.; Definition at line 3552 of file TCling.cxx. ◆ LoadPCM(). void TCling::LoadPCM ; (; std::string ; pcmFileNameFullPath). private . Tries to load a rdict PCM, issues diagnostics if it fails. ; Definition at line 1811 of file TCling.cxx. ◆ LoadPCMImpl(). void TCling::LoadPCMImpl ; (; TFile & ; pcmFile). private . Tries to load a PCM from TFile; returns true on success. ; Definition at line 1696 of file TCling.cxx. ◆ LoadText(). Bool_t TCling::LoadText ; (; const char * ; text); const. finalvirtual . Load the declarations from text into the interpreter. ; Note that this cannot be (top level) statements; text must contain top level declarations. Returns true on success, false on failure. ; Reimplemented from TInterpreter.; Definition at line 7515 of file TCling.cxx. ◆ MakeInterpreterValue(). std::unique_ptr< TInterpreterValue > TCling::MakeInterpreterValue ; (; ); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 7663 of file TCling.cxx. ◆ MapCppName(). const char * TCling::MapCppName ; (; const char * ; name); const. finalvirtual . Interface to cling function. ; Reimplemented from TInterpreter.; Definition at line 7523 of file TCling.cxx. ◆ MethodArgInfo_DefaultValue(). const char * TCling::MethodArgInfo_DefaultValue ; (; MethodArgInfo_t * ; marginfo); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 9296 of file TCling.cxx. ◆ MethodArgInfo_Delete(). void TCling::MethodArgInfo_Delete ; (; MethodArgInfo_t * ; marginfo); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 9241 of file TCling.cxx. ◆ MethodArgInfo_Factory() [1/2]. MethodArgInfo_t * TCling::MethodArgInfo_Factory",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:114950,failure,failure,114950,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['failure'],['failure']
Availability,"brary; not loaded. int UnixDynLoad(const char* lib); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded and -1 in case lib does not exist; or in case of error. Func_t UnixDynFindSymbol(const char* lib, const char* entry); Finds and returns a function pointer to a symbol in the shared library.; Returns 0 when symbol not found. void UnixDynListSymbols(const char* lib, const char* re = """"); List symbols in a shared library. One can use wildcards to list only; the interesting symbols. void UnixDynListLibs(const char* lib = """"); List all loaded shared libraries. void UnixDynUnload(const char* lib); Unload a shared library. int ReadUtmpFile(); Read utmp file. Returns number of entries in utmp file. void * SearchUtmpEntry(int nentries, const char* tty); Look for utmp entry which is connected to terminal tty. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/unix:$Id: TUnixSystem.h 37109 2010-11-30 16:30:58Z pcanal $ » Last generated: 2010-12-09 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:42537,error,error,42537,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,4,['error'],['error']
Availability,"brary; not loaded. int UnixDynLoad(const char* lib); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded and -1 in case lib does not exist; or in case of error. Func_t UnixDynFindSymbol(const char* lib, const char* entry); Finds and returns a function pointer to a symbol in the shared library.; Returns 0 when symbol not found. void UnixDynListSymbols(const char* lib, const char* re = """"); List symbols in a shared library. One can use wildcards to list only; the interesting symbols. void UnixDynListLibs(const char* lib = """"); List all loaded shared libraries. void UnixDynUnload(const char* lib); Unload a shared library. int ReadUtmpFile(); Read utmp file. Returns number of entries in utmp file. void * SearchUtmpEntry(int nentries, const char* tty); Look for utmp entry which is connected to terminal tty. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/unix:$Id: TUnixSystem.h 37109 2010-11-30 16:30:58Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TUnixSystem.html:42606,error,error,42606,root/html530/TUnixSystem.html,https://root.cern,https://root.cern/root/html530/TUnixSystem.html,4,['error'],['error']
Availability,"bs(val-RESULT) > ERRORLIMIT;. return status;; }; 13.8.3.2 Multi-dimensions Integration Algorithms; Here is the types, that can be specified as enumeration and the corresponding classes. Enumeration name; Integrator class. ROOT::Math::IntegratorMultiDim::kADAPTIVE; ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::IntegratorMultiDim::kVEGAS; ROOT::Math:::GSLMCIntegrator. ROOT::Math::IntegratorMultiDim::kMISER; ROOT::Math:::GSLMCIntegrator. ROOT::Math::IntegratorMultiDim::kPLAIN; ROOT::Math:::GSLMCIntegrator. The control parameters for the integration algorithms can be specified using the ROOT::Math::IntegratorMultiDimOptions class. Static methods are provided to change the default values. It is possible to print the list of default control parameters using the ROOT::Math::IntegratorMultiDimOptions::Print function. Example:; ROOT::Math::IntegratorMultiDimOptions opt;; opt.Print();; Integrator Type : ADAPTIVE; Absolute tolerance : 1e-09; Relative tolerance : 1e-09; Workspace size : 100000; (max) function calls : 100000; Depending on the algorithm, some of the control parameters might have no effect.; 13.8.3.3 ROOT::Math::AdaptiveIntegratorMultiDim; This class implements an adaptive quadrature integration method for multi dimensional functions. It is described in this paper Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. It is part of the MathCore library. The user can control the relative and absolute tolerance and the maximum allowed number of function evaluation.; 13.8.3.4 ROOT::Math::GSLMCIntegrator; It is a class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:711891,toler,tolerance,711891,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['toler'],['tolerance']
Availability,bsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus d,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:9109,error,errors,9109,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,4,['error'],"['error', 'errors']"
Availability,bsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-820.086) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.699182 a1=-0.532303 mean=4.90748 nbkg=130.722 nsig=155.109 sig1frac=0.843514; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 520; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 510; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-814.421) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.729962 a1=-0.49802 mean=4.92039 nbkg=146.276 nsig=144.44 sig1frac=0.620699; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 500; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 490; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 480; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 470; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 460; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 450; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 440; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 430; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-926.481) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.653979 a1=-0.469539 mean=5.00078 nbkg=160.963 nsig=166.526 sig1frac=0.628924; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 420; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-768.847) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.749295 a1=-0.303934 mean=4.98272 nbkg=121.461 nsig=145.338 sig1frac=0.822833; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:18364,error,errors,18364,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,4,['error'],"['error', 'errors']"
Availability,bsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-869.586) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.621299 a1=-0.442393 mean=5.13262 nbkg=131.7 nsig=167.982 sig1frac=0.776177; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 570; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 560; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 550; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 540; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 530; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-820.086) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.699182 a1=-0.532303 mean=4.90748 nbkg=130.722 nsig=155.109 sig1frac=0.843514; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 520; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 510; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-814.421) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.729962 a1=-0.49802 mean=4.92039 nbkg=146.276 nsig=144.44 sig1frac=0.620699; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 500; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 490; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 480; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 470; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 460; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 450; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 440; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 430; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-926.481) to force MIGRAD to back out of this re,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:17913,error,errors,17913,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,4,['error'],"['error', 'errors']"
Availability,"bsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#0] ERROR:Eval -- RooAbsReal::logEvalError(pol3) evaluation error, ; origin : RooPolynomial::pol3[ x=x coefList=(a1,a2,a3) ]; message : p.d.f normalization integral is zero or negative: -2220.000000; server values: x=x=0, coefList=(a1 = 10 +/- 0,a2 = -1 +/- 0,a3 = 0.01); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = -1002.2262595660759; Edm = 2.95538313214564806e-09; Nfcn = 251; a1 = -0.498159 +/- 0.0227242 (limited); a2 = 0.198316 +/- 0.00564906 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 0, estimated distance to minimum: 0; covariance matrix quality: Not calculated at all; Status : MINIMIZE=-1 HESSE=302 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a1 1.0000e+01 +/- 0.00e+00; a2 -1.0000e+00 +/- 0.00e+00; ; ; RooFitResult: minimized FCN value: 29650.9, estimated distance to minimum: 2.95925e-09; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:6645,error,error,6645,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['error'],['error']
Availability,"bsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `getVal(normalisationVariables)` will automatically; 417/// apply the normalisation term returned here.; 418/// \param nset Set of variables to normalise over.; 419double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14593,error,error,14593,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['error'],['error']
Availability,"bsReal.cxx:285; RooAbsReal::logEvalErrorvoid logEvalError(const char *message, const char *serverValueString=nullptr) constLog evaluation error message.Definition RooAbsReal.cxx:3464; RooAbsReal::analyticalIntegralWNvirtual double analyticalIntegralWN(Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:380; RooAbsReal::getUnitconst Text_t * getUnit() constDefinition RooAbsReal.h:143; RooAbsReal::getIntegratorConfigconst RooNumIntConfig * getIntegratorConfig() constReturn the numeric integration configuration used for this object.Definition RooAbsReal.cxx:3309; RooAbsReal::isBinnedDistributionvirtual bool isBinnedDistribution(const RooArgSet &) constTests if the distribution is binned. Unless overridden by derived classes, this always returns false.Definition RooAbsReal.h:346; RooAbsReal::printEvalErrorsstatic void printEvalErrors(std::ostream &os=std::cout, Int_t maxPerNode=10000000)Print all outstanding logged evaluation error on the given ostream.Definition RooAbsReal.cxx:3582; RooAbsReal::createIntRIRooFit::OwningPtr< RooAbsReal > createIntRI(const RooArgSet &iset, const RooArgSet &nset={})Utility function for createRunningIntegral.Definition RooAbsReal.cxx:3827; RooAbsReal::enableOffsettingvirtual void enableOffsetting(bool)Definition RooAbsReal.cxx:4484; RooAbsReal::clearEvalErrorLogstatic void clearEvalErrorLog()Clear the stack of evaluation error messages.Definition RooAbsReal.cxx:3542; RooAbsReal::createIntObjRooFit::OwningPtr< RooAbsReal > createIntObj(const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) constInternal utility function for createIntegral() that creates the actual integral object.Definition RooAbsReal.cxx:590; RooAbsReal::sigmaRooAbsMoment * sigma(RooRealVar &obs, const RooArgSet &nset)Definition RooAbsReal.h:362; RooAbsReal::functorRooFunctor * functor(const RooArgList &ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:51110,error,error,51110,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['error'],['error']
Availability,"bsReal::ScaleType stype = Relative, const RooAbsData* projData = 0) const; OBSOLETE -- RETAINED FOR BACKWARD COMPATIBILITY. Use the plotOn(frame,Slice(...)) instead. RooPlot* plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))). Plot asymmetry of ourselves, defined as. asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ). on frame. If frame contains a histogram, all dimensions of the plotted; asymmetry function that occur in the previously plotted dataset are projected via partial integration.; Otherwise no projections are performed,. The asymmetry function can be multiplied with an optional scale factor. The default projection; behaviour can be overriden by supplying an optional set of dependents to project. Double_t getPropagatedError(const RooFitResult& fr); Calculate error on self by propagated errors on parameters with correlations as given by fit result; The linearly propagated error is calculated as follows; T; error(x) = F_a(x) * Corr(a,a') F_a'(x). where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2, with f(x) this function and 'da' taken from the fit result; Corr(a,a') = the correlation matrix from the fit result. RooPlot* plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Plot function or p.d.f. on frame with support for visualization of the uncertainty encoded in the given fit result fr.; If params is non-zero, only the subset of the parameters in fr that occur in params is considered for the error evaluation; Argument argList can contain any RooCmdArg named argument that can be applied to a regular plotOn() operation. By default (linMethod=kTRUE) a linearized error is shown which is calculated as follows; T; error(x) = Z* F_a(x) * Corr(a,a') F_a'(x). where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2, with f(x) the p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:52086,error,error,52086,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,28,['error'],"['error', 'errors']"
Availability,"bsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager; RooSetProxy_cacheObsNon-convolution observables that are also cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFFTConvPdf.html:48507,error,errors,48507,root/html602/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html602/RooFFTConvPdf.html,2,['error'],['errors']
Availability,"bservable 'mean'.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(model) creating new cache 0x56161eb090f0 with pdf gx_CONV_model_mean_CACHE_Obs[x,mean]_NORM_x_mean for nset (x,mean) with code 1 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_Int[mean]_Norm[mean,x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_Int[mean]_Norm[mean,x]_genData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 0.5; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for mean: using 0.6; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for sigma: using 0.2; sigma=0.5, [#0] WARNING:Eval -- The FFT convolution 'model' will run with 50 bins. A decent accuracy for difficult convolutions is typically only reached with n >= 1000. Suggest to increase the number of bins of the observable 'mean'.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_mean_Int[mean]) using numeric integrator RooIntegrator1D to calculate Int(mean); [#0] WARNING:Integration -- RooRombergIntegrator::integral: integral of model_mean over range (-6,6) did not converge after 20 steps; [1] h = 1 , s = 0; [2] h = 0.25 , s = 6; [3] h = 0.0625 , s = 3; [4] h = 0.015625 , s = 4.5; [5] h = 0.00390625 , s = 3.75; [6] h = 0.000976562 , s = 4.125; [7] h = 0.000244141 , s = 3.9375; [8] h = 6.10352e-05 , s = 4.03125; [9] h = 1.52588e-05 , s = 3.98438; [10] h = 3.8147e-06 , s = 4.00781; [11] h = 9.53674e-07 , s = 3.99609; [12] h = 2.38419e-07 , s = 4.00195; [13] h = 5.96046e-08 , s = 3.99902; [14] h = 1.49012e-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf211__paramconv_8C.html:10213,error,error,10213,doc/master/rf211__paramconv_8C.html,https://root.cern,https://root.cern/doc/master/rf211__paramconv_8C.html,2,"['avail', 'error']","['available', 'error']"
Availability,"bserved one (default case). The expected error is instead estimated from the square-root of the bin function value.; 3947/// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; 3948/// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; 3949/// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; 3950/// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; 3951/// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; 3952/// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; 3953/// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; 3954/// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; 3955/// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; 3956/// ""Q"" | Quiet mode (minimum printing); 3957/// ""V"" | Verbose mode (default is between Q and V); 3958/// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; 3959/// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; 3960/// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; 3961/// ""R"" | Fit using a fitting range specified in the function range with `TF1::SetRange`.; 3962/// ""B"" | Use this option when yo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:157653,avail,available,157653,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['avail'],['available']
Availability,"bsocket_request.; 13261 */; 13262 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13263 }; 13264 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13265 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13266 }; 13267 ; 13268 /* Upgrade to another protocol */; 13269 return -1;; 13270}; 13271 ; 13272 ; 13273static int; 13274parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13275{; 13276 int n;; 13277 unsigned int a, b, c, d, slash;; 13278 ; 13279 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13280 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13281 // integer value, but function will not report conversion; 13282 // errors; consider using 'strtol' instead; 13283 slash = 32;; 13284 if (sscanf(vec->ptr, ""%u.%u.%u.%u%n"", &a, &b, &c, &d, &n); 13285 != 4) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to; 13286 // an integer value, but function will not report conversion; 13287 // errors; consider using 'strtol' instead; 13288 n = 0;; 13289 }; 13290 }; 13291 ; 13292 if ((n > 0) && ((size_t)n == vec->len)) {; 13293 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13294 /* IPv4 format */; 13295 if (sa->sa.sa_family == AF_INET) {; 13296 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13297 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13298 | ((uint32_t)c << 8) | (uint32_t)d;; 13299 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13300 return (ip & mask) == net;; 13301 }; 13302 return 0;; 13303 }; 13304 }; 13305#if defined(USE_IPV6); 13306 else {; 13307 char ad[50];; 13308 const char *p;; 13309 ; 13310 if (sscanf(vec->ptr, ""[%49[^]]]/%u%n"", ad, &slash, &n) != 2) {; 13311 slash = 128;; 13312 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13313 n = 0;; 13314 }; 13315 }; 13316 ; 13317 if ((n <= 0) && no_strict) {; 13318 /* no square brackets? */; 13319 p = strchr(vec->ptr, '/');; 13320 if (p && (p < (vec->ptr + vec->len))) {; 13321 if (((size_t)(p - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:388454,error,errors,388454,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"bsocket_request.; 13262 */; 13263 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13264 }; 13265 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13266 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13267 }; 13268 ; 13269 /* Upgrade to another protocol */; 13270 return -1;; 13271}; 13272 ; 13273 ; 13274static int; 13275parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13276{; 13277 int n;; 13278 unsigned int a, b, c, d, slash;; 13279 ; 13280 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13281 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13282 // integer value, but function will not report conversion; 13283 // errors; consider using 'strtol' instead; 13284 slash = 32;; 13285 if (sscanf(vec->ptr, ""%u.%u.%u.%u%n"", &a, &b, &c, &d, &n); 13286 != 4) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to; 13287 // an integer value, but function will not report conversion; 13288 // errors; consider using 'strtol' instead; 13289 n = 0;; 13290 }; 13291 }; 13292 ; 13293 if ((n > 0) && ((size_t)n == vec->len)) {; 13294 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13295 /* IPv4 format */; 13296 if (sa->sa.sa_family == AF_INET) {; 13297 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13298 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13299 | ((uint32_t)c << 8) | (uint32_t)d;; 13300 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13301 return (ip & mask) == net;; 13302 }; 13303 return 0;; 13304 }; 13305 }; 13306#if defined(USE_IPV6); 13307 else {; 13308 char ad[50];; 13309 const char *p;; 13310 ; 13311 if (sscanf(vec->ptr, ""[%49[^]]]/%u%n"", ad, &slash, &n) != 2) {; 13312 slash = 128;; 13313 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13314 n = 0;; 13315 }; 13316 }; 13317 ; 13318 if ((n <= 0) && no_strict) {; 13319 /* no square brackets? */; 13320 p = strchr(vec->ptr, '/');; 13321 if (p && (p < (vec->ptr + vec->len))) {; 13322 if (((size_t)(p - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:388487,error,errors,388487,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"bsolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::GSLNLSMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:11279,error,errors,11279,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,1,['error'],['errors']
Availability,"bsolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; vector<double>fErrors; TLinearFitter*fFitter; doublefMinVal; unsigned intfNFree; const ROOT::Math::IGradientFunctionMultiDim*fObjFunc; vector<double>fParams; boolfRobust. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearMinimizer(int type = 0); Default constructor implementation.; type is not used - needed for consistency with other minimizer plug-ins. TLinearMinimizer(const char* type); constructor passing a type of algorithm, (supported now robust via LTS regression). ~TLinearMinimizer(); Destructor implementation. TLinearMinimizer(const TLinearMinimizer& ); Implementation of copy constructor. void SetFunction(const ROOT::Math::IMultiGenFunction & ); Set function to be minimized. Flag an error since only support Gradient objective functions. void SetFunction(const ROOT::Math::IMultiGradFunction & objfunc); Set the function to be minimized. The function must be a Chi2 gradient function; When performing a linear fit we need the basis functions, which are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearMinimizer.html:5504,error,error,5504,root/html528/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html528/TLinearMinimizer.html,3,['error'],['error']
Availability,"bstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:45824,error,error,45824,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['error'],['error']
Availability,"bstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html:5921,error,error,5921,doc/master/classTASPaletteEditor_1_1LimitLine.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html,2,['error'],['error']
Availability,"bstractMethod(const char* method) const; voidAddIsotope(TGeoIsotope* isotope, Double_t relativeAbundance); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Int_tENDFCode() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static TGeoElementTable*GetElementTable(); virtual const char*TObject::GetIconName() const; TGeoIsotope*GetIsotope(Int_t i) const; virtual const char*TNamed::GetName() const; Int_tGetNisotopes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetRelativeAbundance(Int_t i) const; virtual Double_tGetSpecificActivity() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoElement.html:1852,error,error,1852,root/html534/TGeoElement.html,https://root.cern,https://root.cern/root/html534/TGeoElement.html,3,['error'],['error']
Availability,"bstractMethod(const char* method) const; voidAddIsotope(TGeoIsotope* isotope, Double_t relativeAbundance); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Int_tENDFCode() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static TGeoElementTable*GetElementTable(); virtual const char*TObject::GetIconName() const; TGeoIsotope*GetIsotope(Int_t i) const; virtual const char*TNamed::GetName() const; Int_tGetNisotopes() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetRelativeAbundance(Int_t i) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::Ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoElement.html:1852,error,error,1852,root/html528/TGeoElement.html,https://root.cern,https://root.cern/root/html528/TGeoElement.html,3,['error'],['error']
Availability,"btained converting the TFitResultPtr to an integer; 4104/// independently if the fit option ""S"" is used or not:; 4105///; 4106/// ~~~ {.cpp}; 4107/// TFitResultPtr r = h->Fit(myFunc,opt);; 4108/// Int_t fitStatus = r;; 4109/// ~~~; 4110///; 4111/// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; 4112/// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; 4113/// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; 4114/// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; 4115/// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; 4116/// only in Minos but not in Migrad a fitStatus of 40 will be returned.; 4117/// Minuit2 returns 0 in case of success and different values in migrad,minos or; 4118/// hesse depending on the error. See in this case the documentation of; 4119/// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; 4120/// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; 4121/// If other minimizers are used see their specific documentation for the status code returned.; 4122/// For example in the case of Fumili, see TFumili::Minimize.; 4123///; 4124/// \anchor HFitRange; 4125/// ### Fitting in a range; 4126///; 4127/// In order to fit in a sub-range of the histogram you have two options:; 4128/// - pass to this function the lower (`xxmin`) and upper (`xxmax`) values for the fitting range;; 4129/// - define a specific range in the fitted function and use the fitting option ""R"".; 4130/// For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian; 4131/// only in the interval 1 to 3, you can do:; 4132///; 4133/// ~~~ {.cpp}; 41",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:169039,error,error,169039,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"btractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general ar NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (0); GetEmatrix() (0)+(d)+(e); GetEmatrixTotal() (0)+(a)+(b)+(c)+(d)+(e). Example:. TH2D *histA,*histAsys1,*histAsys2,*histBgr1,*histBgr2;; TH1D *data;; assume the above histograms are filled:; histA: migration matrix from generator (x-axis) to detector (y-axis); the errors of histA are the uncorrelated systematic errors; histAsys1: alternative migration matrix, when systematic #1 is applied; histAsys1: alternative migration matrix, when systematic #2 is applied; histBgr: known background to the data, with errors. set up the unfolding:. TUnfoldSys unfold(histA,TUnfold::kHistMapOutputVert);; unfold.SetInput(input);; // this background has 5% scale uncertainty; unfold.SubtractBackground(histBgr1,""bgr1"",1.0,0.05);; // this background is scaled by 0.8 and has 10% scale uncertainty; unfold.Subtra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:2286,error,error,2286,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,6,['error'],['error']
Availability,"buf) - 32); 4473 * ==> (i + len) < sizeof(path_buf) */; 4474 path_buf[len + i - 1] = tstr[i];; 4475 }; 4476 /* buffer overrun is not possible here, since; 4477 * (i <= 32) && (len < sizeof(path_buf) - 32); 4478 * ==> (i + len) <= sizeof(path_buf) */; 4479 path_buf[len + i - 1] = 0;; 4480 ; 4481 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4482 DEBUG_TRACE(""Check error page %s - found"",; 4483 path_buf);; 4484 page_handler_found = 1;; 4485 break;; 4486 }; 4487 DEBUG_TRACE(""Check error page %s - not found"",; 4488 path_buf);; 4489 ; 4490 /* Continue with the next file extenstion from the; 4491 * configuration (if there is a next one). */; 4492 tstr = strchr(tstr + i, '.');; 4493 }; 4494 }; 4495 }; 4496 ; 4497 if (page_handler_found) {; 4498 conn->in_error_handler = 1;; 4499 handle_file_based_request(conn, path_buf, &error_page_file);; 4500 conn->in_error_handler = 0;; 4501 return 0;; 4502 }; 4503#endif /* NO_FILESYSTEMS */; 4504 }; 4505 ; 4506 /* No custom error page. Send default error page. */; 4507 conn->must_close = 1;; 4508 mg_response_header_start(conn, status);; 4509 send_no_cache_header(conn);; 4510 send_additional_header(conn);; 4511 if (has_body) {; 4512 mg_response_header_add(conn,; 4513 ""Content-Type"",; 4514 ""text/plain; charset=utf-8"",; 4515 -1);; 4516 }; 4517 mg_response_header_send(conn);; 4518 ; 4519 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4520 if (has_body) {; 4521 /* For other errors, send a generic error message. */; 4522 const char *status_text = mg_get_response_code_text(conn, status);; 4523 mg_printf(conn, ""Error %d: %s\n"", status, status_text);; 4524 mg_write(conn, errmsg_buf, strlen(errmsg_buf));; 4525 ; 4526 } else {; 4527 /* No body allowed. Close the connection. */; 4528 DEBUG_TRACE(""Error %i"", status);; 4529 }; 4530 }; 4531 return 0;; 4532}; 4533 ; 4534 ; 4535int; 4536mg_send_http_error(struct mg_connection *conn, int status, const char *fmt, ...); 4537{; 4538 va_list ap;; 4539 int ret;; 4540 ; 4541 va_start(ap, f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:134781,error,error,134781,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"buf) - 32); 4474 * ==> (i + len) < sizeof(path_buf) */; 4475 path_buf[len + i - 1] = tstr[i];; 4476 }; 4477 /* buffer overrun is not possible here, since; 4478 * (i <= 32) && (len < sizeof(path_buf) - 32); 4479 * ==> (i + len) <= sizeof(path_buf) */; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; 4484 path_buf);; 4485 page_handler_found = 1;; 4486 break;; 4487 }; 4488 DEBUG_TRACE(""Check error page %s - not found"",; 4489 path_buf);; 4490 ; 4491 /* Continue with the next file extenstion from the; 4492 * configuration (if there is a next one). */; 4493 tstr = strchr(tstr + i, '.');; 4494 }; 4495 }; 4496 }; 4497 ; 4498 if (page_handler_found) {; 4499 conn->in_error_handler = 1;; 4500 handle_file_based_request(conn, path_buf, &error_page_file);; 4501 conn->in_error_handler = 0;; 4502 return 0;; 4503 }; 4504#endif /* NO_FILESYSTEMS */; 4505 }; 4506 ; 4507 /* No custom error page. Send default error page. */; 4508 conn->must_close = 1;; 4509 mg_response_header_start(conn, status);; 4510 send_no_cache_header(conn);; 4511 send_additional_header(conn);; 4512 if (has_body) {; 4513 mg_response_header_add(conn,; 4514 ""Content-Type"",; 4515 ""text/plain; charset=utf-8"",; 4516 -1);; 4517 }; 4518 mg_response_header_send(conn);; 4519 ; 4520 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4521 if (has_body) {; 4522 /* For other errors, send a generic error message. */; 4523 const char *status_text = mg_get_response_code_text(conn, status);; 4524 mg_printf(conn, ""Error %d: %s\n"", status, status_text);; 4525 mg_write(conn, errmsg_buf, strlen(errmsg_buf));; 4526 ; 4527 } else {; 4528 /* No body allowed. Close the connection. */; 4529 DEBUG_TRACE(""Error %i"", status);; 4530 }; 4531 }; 4532 return 0;; 4533}; 4534 ; 4535 ; 4536int; 4537mg_send_http_error(struct mg_connection *conn, int status, const char *fmt, ...); 4538{; 4539 va_list ap;; 4540 int ret;; 4541 ; 4542 va_start(ap, f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:134813,error,error,134813,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"building ROOT. CMake will use default values for all build parameters. See the Build Options and Variables sections for fine-tuning your build; This can fail if CMake can’t detect your toolset, or if it thinks that the environment is not sane enough. On this case make sure that the toolset that you intend to use is the only one reachable from the shell and that the shell itself is the correct one for you development environment. You can force CMake to use a given build tool, see the Usage section.; After CMake has finished running, proceed to use IDE project files or start the build from the build directory:; $ cmake --build . [-- <options to the native tool>]. The --build option tells cmake to invoke the underlying build tool (make, ninja, xcodebuild, msbuild, etc).; The underlying build tool can also be invoked directly of course, but thecmake --build command is more portable.; On unix systems (with make or ninja) you can speedup the build with cmake --build . -- -jN where N is the number of available cores.; Setup the environment to run; $ source /path/to/install-or-build/dir/bin/thisroot.sh. Start ROOT interactive application; $ root. Installation methods; There are two main methods of installing ROOT from source: location independent and fix location. The former is advised for a personal installation of ROOT, while the later for a system wide installation. Both require to set the CMAKE_INSTALL_PREFIX variable at configuration time. The later requires in addition to set the gnuinstall option at configuration. It also allows the tuning of destinations for the various components, by setting the variablesCMAKE_INSTALL_xxxDIR, wherexxx isBIN,LIB,INCLUDE, etc. The full list is described in the variables section.; To use the location independent installation requires to set environment variables PATH and LD_LIBRARY_PATH. This is done by sourcing the script (depending on the shell family) source bin/thisroot.sh. While to use the fix location installation you do not need",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:4612,avail,available,4612,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['avail'],['available']
Availability,"but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \]. In the special case where s(j) is zero (eg, case of 1 entry only in one bin) the bin error e(j) is computed from the average of the s(j) for all bins if the static function TProfile::Approximate() has been called. This simple/crude approximation was suggested in order to keep the bin during a fit operation. But note that this approximation is not the default behaviour. See also TProfile::BuildOptions for more on error options. Creating and drawing a profile histogram; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }; Float_tfloat Float_tDefinition RtypesCore.h:57; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TCanvasThe Canvas class.Definition TCanvas.h:23; TProfile::TProfileTProfile()Default constructor for Profile histograms.Definition TProfile.cxx:92; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; int; c1return c1Definition legend1.C:41. Definition at line 32 of file TProfile.h. Public Member Functions;  TProfile ();  Default constructor for Profile histograms. ;  ;  TProfile (const char *name, const char *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:2653,error,error,2653,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['error']
Availability,"butes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters ;  ; Double_t * fAmpCalcX1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpCalcY1;  [fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:24021,error,errors,24021,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['errors']
Availability,"butions, as template statistical uncertainties are taken into account). ; Note that the name of this histogram will simply be the same as that of the ""data"" histogram, prefixed with the string ""Fraction fit to hist: "". Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if the class is deleted ; Definition at line 621 of file TFractionFitter.cxx. ◆ GetProb(). Double_t TFractionFitter::GetProb ; (; ); const. return the fit probability ; Definition at line 903 of file TFractionFitter.cxx. ◆ GetRanges(). void TFractionFitter::GetRanges ; (; Int_t & ; minX, . Int_t & ; maxX, . Int_t & ; minY, . Int_t & ; maxY, . Int_t & ; minZ, . Int_t & ; maxZ . ); const. private . Used internally to obtain the bin ranges according to the dimensionality of the histogram and the limits set by hand. ; Definition at line 639 of file TFractionFitter.cxx. ◆ GetResult(). void TFractionFitter::GetResult ; (; Int_t ; parm, . Double_t & ; value, . Double_t & ; error . ); const. Obtain the fit result for parameter <parm> (the parameter numbering follows that of the input template vector). ; Definition at line 602 of file TFractionFitter.cxx. ◆ IncludeBin(). void TFractionFitter::IncludeBin ; (; Int_t ; bin). Include the given bin in the fit, if it was excluded before using ExcludeBin(). ; The bin numbering to be used is that of TH1::GetBin(). ; Definition at line 435 of file TFractionFitter.cxx. ◆ IsA(). TClass * TFractionFitter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 112 of file TFractionFitter.h. ◆ IsExcluded(). bool TFractionFitter::IsExcluded ; (; Int_t ; bin); const. private . Function for internal use, checking whether the given bin is excluded from the fit or not. ; Definition at line 452 of file TFractionFitter.cxx. ◆ ReleaseRangeX(). void TFractionFitter::ReleaseRangeX ; (; ). Release restrictions on the X range of the histogram to be use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:28993,error,error,28993,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['error'],['error']
Availability,"button""); virtual~TControlBarButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBarButton.html:1618,error,error,1618,root/html526/TControlBarButton.html,https://root.cern,https://root.cern/root/html526/TControlBarButton.html,5,['error'],['error']
Availability,"button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier, int insert = kInsert); Set the key button mask; insert = -1 - remove; 0 - test; +1 - insert. void SetCanvasWidget(TQtWidget* widget); Associate this widget with the parent ROOT gui widget. void UnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); Unset the key button mask. void Accelerate(); Qt slot to respond to the ""Keyboard accelerator signal"". void Disconnect(); Disconnect the Canvas and ROOT gui widget before destroy. void paintEvent(QPaintEvent* ). bool DeleteNotify(). {return fDeleteNotify; }. TQtWidget * GetCanvasWidget() const. { return fCanvasWidget;}. bool IsClosing(). { return fIsClosing; }. UInt_t IsEventSelected(UInt_t evmask) const. void SetCursor(). void SetCursor(Cursor_t cursor). void SetClosing(bool flag = kTRUE). { fIsClosing = flag;}. void SetDeleteNotify(bool flag = true). {fDeleteNotify = flag;}. void SetAttributeEventMask(UInt_t evmask). { SelectInput (evmask);}. void SetButtonEventMask(UInt_t evmask, Cursor_t cursor = 0). { fGrabEventButtonMask = evmask; fGrabButtonCursor =(QCursor *) crsr; }. EMouseButton Button() const. { return fButton; }. UInt_t ButtonEventMask() const. { return fGrabEventButtonMask;}. UInt_t ButtonMask() const. { return fGrabButtonMask; }. UInt_t PointerMask()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtClientWidget.html:23467,mask,mask,23467,root/html602/TQtClientWidget.html,https://root.cern,https://root.cern/root/html602/TQtClientWidget.html,2,['mask'],['mask']
Availability,"by default, any previous function is deleted); = ""C"" In case of linear fitting, not calculate the chisquare; (saves time); = ""F"" If fitting a polN, switch to minuit fitter; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust(resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points. When the fit is drawn (by default), the parameter goption may be used; to specify a list of graphics options. See TGraph::Paint for a complete; list of these options. In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");. who is calling this function. Note that this function is called when calling TGraphErrors::Fit; or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit; see the discussion below on the errors calulation. Setting initial conditions. Parameters must be initialized before invoking the Fit function.; The setting of the parameter initial values is automatic for the; predefined functions : poln, expo, gaus, landau. One can however disable; this automatic computation by specifying the option ""B"".; You can specify boundary limits for some or all parameters via; f1->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters.; For example, if you fit a function with 6 parameters, you can do:; func->SetParameters(0,3.1,1.e-6,0.1,-8,100);; func->SetParLimits(4,-10,-4);; func->SetParLimits(5, 1,1);; With this setup, parameters 0->3 can vary freely; Parameter 4 has boundaries [-10,-4] with initial value -8; Parameter 5 is fixed to 100. Fit range. The fit range can be specified in two ways:; - specify rxmax > rxmin (default is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiGraph.html:11148,error,errors,11148,root/html528/TMultiGraph.html,https://root.cern,https://root.cern/root/html528/TMultiGraph.html,6,['error'],['errors']
Availability,"by default; 4089/// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; 4090/// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; 4091/// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); 4092///; 4093/// <tr><th> <th> Options to control informational output; 4094/// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; 4095/// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; 4096/// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; 4097/// messages are suppressed as well; 4098/// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); 4099/// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; 4100/// value suppress output completely, a zero value will only print the error count per p.d.f component,; 4101/// a positive value is will print details of each error up to numErr messages per p.d.f component.; 4102/// </table>; 4103///; 4104 ; 4105RooFit::OwningPtr<RooFitResult> RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2,; 4106 const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5,; 4107 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:178981,error,errors,178981,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errors']
Availability,"by instantiatiating; the SeedGenerator and MinimumBuilder for the Fumili minimization method. @see MnSeedGenerator. @see FumiliBuilder. {}. ~FumiliMinimizer(); {}. FunctionMinimum Minimize(const FCNBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1); for Fumili. FunctionMinimum Minimize(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html:4926,toler,toler,4926,root/html526/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__FumiliMinimizer.html,7,['toler'],['toler']
Availability,by this class ;  ; TUnfoldBinning * fRegularisationConditions;  binning scheme for the regularisation conditions ;  ;  Protected Attributes inherited from TUnfoldSys; TMatrixD * fAoutside;  Input: underflow/overflow bins. ;  ; TMap * fBgrErrScaleIn;  Input: background sources correlated error. ;  ; TMap * fBgrErrUncorrInSq;  Input: uncorr error squared from bgr sources. ;  ; TMap * fBgrIn;  Input: size of background sources. ;  ; TMatrixD * fDAinColRelSq;  Input: normalized column err.sq. (inp.matr.) ;  ; TMatrixDSparse * fDAinRelSq;  Input: normalized errors from input matrix. ;  ; TMap * fDeltaCorrAx;  Result: syst.shift from fSysIn on fAx. ;  ; TMap * fDeltaCorrX;  Result: syst.shift from fSysIn on fX. ;  ; TMatrixDSparse * fDeltaSysTau;  Result: systematic shift from tau. ;  ; Double_t fDtau;  Input: error on tau. ;  ; TMatrixDSparse * fEmatUncorrAx;  Result: syst.error from fDA2 on fAx. ;  ; TMatrixDSparse * fEmatUncorrX;  Result: syst.error from fDA2 on fX. ;  ; TMap * fSysIn;  Input: correlated errors. ;  ; TMatrixDSparse * fVyyData;  Input: error on fY prior to bgr subtraction. ;  ; TMatrixD * fYData;  Input: fY prior to bgr subtraction. ;  ;  Protected Attributes inherited from TUnfold; TMatrixDSparse * fA;  response matrix A ;  ; Double_t fBiasScale;  scale factor for the bias ;  ; EConstraint fConstraint;  type of constraint to use for the unfolding ;  ; TArrayI fHistToX;  mapping of histogram bins to matrix indices ;  ; TMatrixDSparse * fL;  regularisation conditions L ;  ; ERegMode fRegMode;  type of regularisation ;  ; TArrayD fSumOverY;  truth vector calculated from the non-normalized response matrix ;  ; Double_t fTauSquared;  regularisation parameter tau squared ;  ; TMatrixDSparse * fVyy;  covariance matrix Vyy corresponding to y ;  ; TMatrixD * fX0;  bias vector x0 ;  ; TArrayI fXToHist;  mapping of matrix indices to histogram bins ;  ; TMatrixD * fY;  input (measured) data y ;  . Additional Inherited Members;  Protected Types inherited from TObjec,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:38309,error,errors,38309,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['error'],['errors']
Availability,"by ‘@’ (e.g. “@out”) if one wants to normalize the corresponding value. Also, if the string ends with ‘!’, output neurons are set up for classification, i.e. with a sigmoid (1 neuron) or softmax (more neurons) activation function.; Many questions on the good usage of neural network, including rules of dumb to determine the best network topology are addressed at ftp://ftp.sas.com/pub/neural/FAQ.html; // a simple network: 2 inputs, 10 hidden and 1 normalized; // output neuron; TMultiLayerPerceptron network(""r,z:10:@Br"",tree);; Expressions are evaluated as for TTree::Draw(). Input and outputs are taken from the TTree associated with the network. This TTree can be given as argument of the constructor or defined later with TMultiLayerPerceptron::SetData(). Events can also be weighted. The weight expression can be given in the constructor or set later with the method SetWeight() of the class TMultiLayerPerceptron. Two datasets must be defined before learning the network: a training dataset that is used when minimizing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::SetLearningMethod() defines the learning method. Learning methods are:; TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS // default; The training can start with TMultiLayerPerceptron::Train(Int_t nepoch,Option_t* options). The first argument is the number of epochs while option is a string that can contain “text” (simple text output), “grap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:236094,error,error,236094,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"byshevApprox::Deriv ; (; ). Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ; The returned pointer must be managed by the user. ; Definition at line 120 of file ChebyshevApprox.cxx. ◆ EvalErr() [1/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x); const. Evaluate the series at a given point x estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 101 of file ChebyshevApprox.cxx. ◆ EvalErr() [2/2]. std::pair< double, double > ROOT::Math::ChebyshevApprox::EvalErr ; (; double ; x, . size_t ; n . ); const. evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ; The error estimate is made from the first neglected term in the series. A pair containing result and error is returned ; Definition at line 113 of file ChebyshevApprox.cxx. ◆ Initialize(). void ROOT::Math::ChebyshevApprox::Initialize ; (; GSLFuncPointer ; f, . void * ; params, . double ; a, . double ; b . ). protected . Initialize series passing function and range. ; Definition at line 82 of file ChebyshevApprox.cxx. ◆ Integral(). ChebyshevApprox * ROOT::Math::ChebyshevApprox::Integral ; (; ). Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ; The lower limit of the integration is the left range value a. The returned pointer must be managed by the user ; Definition at line 130 of file ChebyshevApprox.cxx. ◆ operator()() [1/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x); const. Evaluate the series at a given point x. ; Definition at line 96 of file ChebyshevApprox.cxx. ◆ operator()() [2/2]. double ROOT::Math::ChebyshevApprox::operator() ; (; double ; x, . size_t ; n . ); const. Evaluate the series at a given point, to (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:5101,error,error,5101,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,1,['error'],['error']
Availability,"byteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; RooRealProxy_true; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPullVar(); Default constructor. RooPullVar(const char* name, const char* title, RooRealVar& measurement, RooAbsReal& truth); Construct RooAbsReal representing the pull of a RooRealVar 'meas' providing the; measured value and its error and a RooAbsReal 'truth' providing the true value. RooPullVar(const RooPullVar& other, const char* name = 0); Copy constructor. ~RooPullVar(); Destructor. Double_t evaluate() const; Calculate pull. Use asymmetric error if defined in measurement,; otherwise use symmetric error. If measurement has no error; return zero. TObject* clone(const char* newname) const; { return new RooPullVar(*this, newname); }. » Last changed: Tue Mar 10 17:18:38 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPullVar.html:36071,error,error,36071,root/html534/RooPullVar.html,https://root.cern,https://root.cern/root/html534/RooPullVar.html,4,['error'],['error']
Availability,"b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file HypoTestResult.h. Public Member Functions;  HypoTestResult (const char *name, double nullp, double altp);  constructor from name, null and alternate p values ;  ;  HypoTestResult (const char *name=nullptr);  default constructor ;  ;  HypoTestResult (const HypoTestResult &other);  copy constructor ;  ;  ~HypoTestResult () override;  destructor ;  ; virtual double AlternatePValue () const;  Return p-value for alternate hypothesis. ;  ; virtual void Append (const HypoTestResult *other);  add values from another HypoTestResult ;  ; virtual double CLb () const;  Convert NullPValue into a ""confidence level"". ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; TObject * Clone (const char *newname=nullptr) const override;  clone method, required since some data members cannot rely on the streamers to copy them ;  ; virtual double CLs () const;  \(CL_{s}\) is simply \(CL_{s+b}/CL_{b}\) (not a method, but a quantity) ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; virtual double CLsplusb () const;  Convert AlternatePValue into a ""confidence level"". ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; const RooArgList * GetAllTestStatisticsData (void) const;  ; RooDataSet * GetAltDetailedOutput (void) const;  ; SamplingDistribution * GetAltDistribution (void) const;  ; bool GetBackGroundIsAlt (void) const;  ; RooDataSet * GetFitInfo () const;  ; RooDataSet * GetNullDetailedOutput (void) const;  ; SamplingDistribution * GetNullDistribution (void) const;  ; bool GetPValueIsRightTail (void) const;  ; double Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:2648,error,error,2648,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['error'],['error']
Availability,"c . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGraphBentErrors.h. ◆ DoMerge(). Bool_t TGraphBentErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with asymmetric errors. ; Reimplemented from TGraph.; Definition at line 367 of file TGraphBentErrors.cxx. ◆ FillZero(). void TGraphBentErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end] ; Reimplemented from TGraph.; Definition at line 474 of file TGraphBentErrors.cxx. ◆ GetErrorX(). Double_t TGraphBentErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 402 of file TGraphBentErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphBentErrors::GetErrorXhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on X[i]. ; Reimplemented from TGraph.; Definition at line 430 of file TGraphBentErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphBentErrors::GetErrorXlow ; (; Int_t ; bin); const. overridevirtual . Get low error on X[i]. ; Reimplemented from TGraph.; Definition at line 441 of file TGraphBentErrors.cxx. ◆ GetErrorY(). Double_t TGraphBentErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 416 of file TGraphBentErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphBentErrors::GetErrorYhigh ; (; Int_t ; bin); const. overridevirtual . Get high error on Y[i]. ; Reimplemented from TGraph.; Definition at line 452 of file TGraphBentErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphBentErrors::GetErrorYlow ; (; Int_t ; bin); const. overridevirtual . Get low error on Y[i]. ; Reimplemented from TGraph.; Definition at line 463 of file TGraphBentErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphBentErrors::GetEXhigh ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:40058,error,error,40058,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['error']
Availability,"c . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamTarget::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 71 of file PDEFoamTarget.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamTarget::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file PDEFoamTarget.h. ◆ FillFoamCells(). void TMVA::PDEFoamTarget::FillFoamCells ; (; const Event * ; ev, . Float_t ; wt . ). virtual . This function fills an event into the discriminant PDEFoam. ; The weight 'wt' is filled into cell element 0 if the event is of class 'fTarget', and filled into cell element 1 otherwise. ; Reimplemented from TMVA::PDEFoam.; Definition at line 93 of file PDEFoamTarget.cxx. ◆ Finalize(). void TMVA::PDEFoamTarget::Finalize ; (; ). virtual . Calculate average cell target in every cell and save them to the cell. ; Cell element 0 will contain the average target and cell element 1 will contain the error on the target. ; Reimplemented from TMVA::PDEFoam.; Definition at line 112 of file PDEFoamTarget.cxx. ◆ GetAverageNeighborsValue(). Float_t TMVA::PDEFoamTarget::GetAverageNeighborsValue ; (; std::vector< Float_t > & ; txvec, . ECellValue ; cv . ). protected . This function returns the average value 'cv' of only nearest neighbor cells. ; It is used in cases, where empty cells shall not be evaluated.; Parameters:; txvec - event vector, transformed into foam coordinates [0, 1]; cv - cell value, see definition of ECellValue . Definition at line 175 of file PDEFoamTarget.cxx. ◆ GetCellValue() [1/4]. Float_t TMVA::PDEFoam::GetCellValue ; (; const PDEFoamCell * ; cell, . ECellValue ; cv . ). virtual . Returns the cell value of 'cell' corresponding to the given option 'cv'. ; This function should be overridden by the subclass in order to specify which cell elements to return for a given cell value 'cv'. By default kValue returns cell element 0, and kValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html:21740,error,error,21740,doc/master/classTMVA_1_1PDEFoamTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html,1,['error'],['error']
Availability,"c Bool_tConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual void*GetSender(); virtual const char*GetSenderClassName() const. private:. TQObject(const TQObject& tqo); TQObject&operator=(const TQObject& tqo). Data Members; protected:. TList*fListOfConnections! list of connections to this object; TList*fListOfSignals! list of signals from this object; Bool_tfSignalsBlocked! flag used for suppression of signals; static Bool_tfgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Checking of consitency of sender/receiver methods/arguments.; Returns -1 on error, otherwise number or arguments of signal function.; Static method. TQObject(); TQObject Constructor.; Comment:; - In order to minimize memory allocation fListOfSignals and; fListOfConnections are allocated only if it is neccesary; - When fListOfSignals/fListOfConnections are empty they will; be deleted. ~TQObject(); TQObject Destructor.; - delete all connections and signal list. TList * GetListOfClassSignals() const; Returns pointer to list of signals of this class. void CollectClassSignalLists(TList& list, TClass* cls); Collect class signal lists from class cls and all its; base-classes. The recursive traversal is not performed for classes not; deriving from TQClass. void HighPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the first in the fListOfSignals, this decreases; the time for lookup.; 2. If slot_name != 0 => makes slot defined by the slot_name; to be executed first when signal_name is emitted.; Signal name i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQObject.html:4953,error,error,4953,root/html528/TQObject.html,https://root.cern,https://root.cern/root/html528/TQObject.html,4,['error'],['error']
Availability,"c TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(TObject* obj = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = 1, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); voidExecuteDefaultAction(TObject* obj); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBrowserImp*GetBrowserImp() const; TContextMenu*GetContextMenu() const; virtual Option_t*GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetRefreshFlag() const; TObject*GetSelected() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidIconify()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBrowser.html:3347,error,error,3347,root/html526/TBrowser.html,https://root.cern,https://root.cern/root/html526/TBrowser.html,5,['error'],['error']
Availability,"c TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tTMVA::FitterBase::EstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::GeneticFitterGeneticFitter(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*>& ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__GeneticFitter.html:1685,error,error,1685,root/html528/TMVA__GeneticFitter.html,https://root.cern,https://root.cern/root/html528/TMVA__GeneticFitter.html,4,['error'],['error']
Availability,"c TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tTMVA::FitterBase::EstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::Han",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MCFitter.html:1690,error,error,1690,root/html528/TMVA__MCFitter.html,https://root.cern,https://root.cern/root/html528/TMVA__MCFitter.html,8,['error'],['error']
Availability,"c TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& line) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TLine*DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual TLine*DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetX1() const; Double_tGetX2() const; Double_tGetY1() const; Double_tGetY2() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLine.html:1615,error,error,1615,root/html528/TLine.html,https://root.cern,https://root.cern/root/html528/TLine.html,3,['error'],['error']
Availability,"c TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& line) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TLine*DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual TLine*DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetX1() const; Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLine.html:1634,error,error,1634,root/html534/TLine.html,https://root.cern,https://root.cern/root/html534/TLine.html,3,['error'],['error']
Availability,"c TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidForceWriteInfoClones(TClonesArray* a); virtual Int_tGetBufferDisplacement() const; Int_tGetBufferVersion() const; static TClass*GetClass(const type_info& typeinfo); static TClass*GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*GetInfo(); virtual TProcessID*GetLastProcessID(TRefTable* reftable) const; virtual Int_tGetMapCount() const; virtual voidGetMappedObject(UInt_t tag, void*& ptr, TClass*& ClassPtr) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer.html:2002,error,error,2002,root/html526/TBuffer.html,https://root.cern,https://root.cern/root/html526/TBuffer.html,1,['error'],['error']
Availability,"c TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidForceWriteInfoClones(TClonesArray* a); virtual Int_tGetBufferDisplacement() const; Int_tGetBufferVersion() const; static TClass*GetClass(const type_info& typeinfo); static TClass*GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*GetInfo(); virtual TProcessID*GetLastProcessID(TRefTable* reftable) const; virtual Int_tGetMapCount() const; virtual voidGetMappedObject(UInt_t tag, void*& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBuffer.html:2002,error,error,2002,root/html528/TBuffer.html,https://root.cern,https://root.cern/root/html528/TBuffer.html,1,['error'],['error']
Availability,"c TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidForceWriteInfoClones(TClonesArray* a); virtual Int_tGetBufferDisplacement() const; Int_tGetBufferVersion() const; static TClass*GetClass(const type_info& typeinfo); static TClass*GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*GetInfo(); virtual TProcessID*GetLastProcessID(TRefTable* reftable) const; virtual Int_tGetMapCount() const; virtual voidGetMappedObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBuffer.html:2037,error,error,2037,root/html530/TBuffer.html,https://root.cern,https://root.cern/root/html530/TBuffer.html,5,['error'],['error']
Availability,"c TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TRecGuiEvent::ERootAtomskROOT_MESSAGE; static TObject::(anonymous)TObject::kSingleKey; static TRecGuiEvent::ERootAtomskWM_DELETE_WINDOW; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. UInt_tfCodeKey or button code; Int_tfCountIf non-zero, at least this many more exposes; Int_tfFormatNext fields only used by kClientMessageEvent; Handle_tfHandleGeneral resource handle (used for atoms or windows); UInt_tfHeightHeight of exposed area; Window_tfMaskedIf non-zero, event recorded in HandleMaskEvent(); Bool_tfSendEventTrue if event came from SendEvent; UInt_tfStateKey or button mask; Time_tfTimeTime event occured in ms; EGEventTypefTypeType of event (see EGEventType); Long_tfUser[5]5 longs can be used by client message events; UInt_tfWidthWidth of exposed area; Window_tfWindowWindow ID which reported event is relative to; Int_tfXPointer x coordinate in event window; Int_tfXRootx coordinate relative to root; Int_tfYPointer y coordinate in event window; Int_tfYRooty coordinate relative to root. Class Charts. Inheritance Chart:. TObject. ←; TRecEvent. ←; TRecGuiEvent. Function documentation; void ReplayEvent(Bool_t showMouseCursor = kTRUE); Replays stored GUI event. Event_t * CreateEvent(TRecGuiEvent* ge); Converts TRecGuiEvent type to Event_t type. ERecEventType GetType() const; Returns what kind of event it stores. TRecorder & operator=(const TRecorder&). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comment",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRecGuiEvent.html:9110,mask,mask,9110,root/html604/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html604/TRecGuiEvent.html,1,['mask'],['mask']
Availability,"c TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TRecGuiEvent::ERootAtomskROOT_MESSAGE; static TObject::(anonymous)TObject::kSingleKey; static TRecGuiEvent::ERootAtomskWM_DELETE_WINDOW; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. UInt_tfCodeKey or button code; Int_tfCountIf non-zero, at least this many more exposes; Int_tfFormatNext fields only used by kClientMessageEvent; Handle_tfHandleGeneral resource handle (used for atoms or windows); UInt_tfHeightHeight of exposed area; Window_tfMaskedIf non-zero, event recorded in HandleMaskEvent(); Bool_tfSendEventTrue if event came from SendEvent; UInt_tfStateKey or button mask; Time_tfTimeTime event occured in ms; EGEventTypefTypeType of event (see EGEventType); Long_tfUser[5]5 longs can be used by client message events; UInt_tfWidthWidth of exposed area; Window_tfWindowWindow ID which reported event is relative to; Int_tfXPointer x coordinate in event window; Int_tfXRootx coordinate relative to root; Int_tfYPointer y coordinate in event window; Int_tfYRooty coordinate relative to root. Class Charts. Inheritance Chart:. TObject. ←; TRecEvent. ←; TRecGuiEvent. Function documentation; void ReplayEvent(Bool_t showMouseCursor = kTRUE); Replays stored GUI event. Event_t * CreateEvent(TRecGuiEvent* ge); Converts TRecGuiEvent type to Event_t type. ERecEventType GetType() const; Returns what kind of event it stores. TRecorder & operator=(const TRecorder&). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comment",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecGuiEvent.html:9110,mask,mask,9110,root/html602/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html602/TRecGuiEvent.html,1,['mask'],['mask']
Availability,"c TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TMutexImp*fMutexImppointer to mutex implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMutex(Bool_t recursive = kFALSE); Create a mutex lock. The actual mutex implementation will be; provided via the TThreadFactory. Int_t Lock(); Lock the mutex. Returns 0 when no error, EDEADLK when mutex was already; locked by this thread and this mutex is not reentrant. Int_t TryLock(); Try to lock mutex. Returns 0 when no error, EDEADLK when mutex was; already locked by this thread and this mutex is not reentrant. Int_t UnLock(); Unlock the mutex. Returns 0 when no error, EPERM when mutex was already; unlocked by this thread. Int_t CleanUp(); Clean up of mutex. TVirtualMutex * Factory(Bool_t recursive = kFALSE); Create mutex and return pointer to it. Calling function must care; about proper deletion. The function is intended to be used in connection; with the R__LOCKGUARD2 macro for local thread protection. Since ""new"" is; used the TStorage class has to be protected by gGlobalMutex. TMutex(const TMutex& ). TMutex& operator=(const TMutex& ). virtual ~TMutex(); { delete fMutexImp; }. » Author: Fons Rademakers 26/06/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-02 16:23; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMutex.html:6249,error,error,6249,root/html604/TMutex.html,https://root.cern,https://root.cern/root/html604/TMutex.html,1,['error'],['error']
Availability,"c TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TMutexImp*fMutexImppointer to mutex implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMutex(Bool_t recursive = kFALSE); Create a mutex lock. The actual mutex implementation will be; provided via the TThreadFactory. Int_t Lock(); Lock the mutex. Returns 0 when no error, EDEADLK when mutex was already; locked by this thread and this mutex is not reentrant. Int_t TryLock(); Try to lock mutex. Returns 0 when no error, EDEADLK when mutex was; already locked by this thread and this mutex is not reentrant. Int_t UnLock(); Unlock the mutex. Returns 0 when no error, EPERM when mutex was already; unlocked by this thread. Int_t CleanUp(); Clean up of mutex. TVirtualMutex * Factory(Bool_t recursive = kFALSE); Create mutex and return pointer to it. Calling function must care; about proper deletion. The function is intended to be used in connection; with the R__LOCKGUARD2 macro for local thread protection. Since ""new"" is; used the TStorage class has to be protected by gGlobalMutex. TMutex(const TMutex& ). TMutex& operator=(const TMutex& ). virtual ~TMutex(); { delete fMutexImp; }. » Author: Fons Rademakers 26/06/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-30 15:21; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMutex.html:6249,error,error,6249,root/html602/TMutex.html,https://root.cern,https://root.cern/root/html602/TMutex.html,1,['error'],['error']
Availability,"c TTree::ELockStatusBitsTTree::kGetFriendAlias; static TTree::ELockStatusBitsTTree::kGetLeaf; static TTree::ELockStatusBitsTTree::kLoadTree; static TTree::ELockStatusBitsTTree::kPrint; static TTree::ELockStatusBitsTTree::kRemoveFriend; static TTree::ELockStatusBitsTTree::kSetBranchStatus. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofChain(); Crates a new PROOF chain proxy. TProofChain(TChain* chain, Bool_t gettreeheader); Crates a new PROOF chain proxy containing the files from the chain. TProofChain(TDSet* dset, Bool_t gettreeheader); Creates a new PROOF chain proxy containing the files from the dset. ~TProofChain(); Destructor. void Browse(TBrowser* b); Forwards the execution to the dummy tree header.; See TTree::Browse(). Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Forwards the execution to the TDSet.; Returns -1 in case of error or number of selected events in case of success.; See TDSet::Browse(). Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Forwards the execution to the TDSet.; Returns -1 in case of error or number of selected events in case of success.; See TDSet::Browse(). void AddAliases(); Aliases are added to the input list. The names are comma-separated in the; TNamed 'PROOF_ListOfAliases'. For each name, there is an trey named 'alias:<name>'. void FillDrawAttributes(TProof* p); Communicate the drawing attributes for this chain to the input list; so that the draw selectors can use them, in case of need.; The drawing attributes are:. LineColor Line color; LineStyle Line style; LineWidth Line width; MarkerColor Marker color index; MarkerSize Marker size; MarkerStyle Marker style; FillColor Area fill color; FillStyle Area fill style. TBranch * FindBranch(const char* name); Forwards the execution to the dummy tree header.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofChain.html:30491,error,error,30491,root/html602/TProofChain.html,https://root.cern,https://root.cern/root/html602/TProofChain.html,2,['error'],['error']
Availability,"c bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:47379,error,errors,47379,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['error'],['errors']
Availability,"c const char * TTreeFormulaManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeFormulaManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 73 of file TTreeFormulaManager.h. ◆ DeclFileName(). static const char * TTreeFormulaManager::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 73 of file TTreeFormulaManager.h. ◆ EnableMultiVarDims(). void TTreeFormulaManager::EnableMultiVarDims ; (; ). protectedvirtual . Set the manager as handling a formula with multiple variable dimensions. ; Definition at line 113 of file TTreeFormulaManager.cxx. ◆ GetMultiplicity(). virtual Int_t TTreeFormulaManager::GetMultiplicity ; (; ); const. inlinevirtual . Definition at line 66 of file TTreeFormulaManager.h. ◆ GetNdata(). Int_t TTreeFormulaManager::GetNdata ; (; bool ; forceLoadDim = false). virtual . Return number of available instances in the formulas. ; Definition at line 122 of file TTreeFormulaManager.cxx. ◆ IsA(). TClass * TTreeFormulaManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TTreeFormulaManager.h. ◆ Notify(). bool TTreeFormulaManager::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 68 of file TTreeFormulaManager.h. ◆ operator=(). TTreeFormulaManager & TTre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormulaManager.html:14668,avail,available,14668,doc/master/classTTreeFormulaManager.html,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html,1,['avail'],['available']
Availability,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for newsize points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:29649,error,errors,29649,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['errors']
Availability,"c constexpr Version_t TGeoOpticalSurface::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 165 of file TGeoOpticalSurface.h. ◆ DeclFileName(). static const char * TGeoOpticalSurface::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 165 of file TGeoOpticalSurface.h. ◆ FinishToString(). const char * TGeoOpticalSurface::FinishToString ; (; ESurfaceFinish ; finish). static . Definition at line 192 of file TGeoOpticalSurface.cxx. ◆ GetConstProperties(). TList const & TGeoOpticalSurface::GetConstProperties ; (; ); const. inline . Definition at line 135 of file TGeoOpticalSurface.h. ◆ GetConstProperty() [1/2]. Double_t TGeoOpticalSurface::GetConstProperty ; (; const char * ; property, . Bool_t * ; error = nullptr . ); const. Definition at line 280 of file TGeoOpticalSurface.cxx. ◆ GetConstProperty() [2/2]. Double_t TGeoOpticalSurface::GetConstProperty ; (; Int_t ; i, . Bool_t * ; error = nullptr . ); const. Definition at line 293 of file TGeoOpticalSurface.cxx. ◆ GetConstPropertyRef() [1/2]. const char * TGeoOpticalSurface::GetConstPropertyRef ; (; const char * ; property); const. Definition at line 272 of file TGeoOpticalSurface.cxx. ◆ GetConstPropertyRef() [2/2]. const char * TGeoOpticalSurface::GetConstPropertyRef ; (; Int_t ; i); const. inline . Definition at line 130 of file TGeoOpticalSurface.h. ◆ GetFinish(). ESurfaceFinish TGeoOpticalSurface::GetFinish ; (; ); const. inline . Definition at line 144 of file TGeoOpticalSurface.h. ◆ GetModel(). ESurfaceModel TGeoOpticalSurface::GetModel ; (; ); const. inline . Definition at line 143 of file TGeoOpticalSurface.h. ◆ GetNconstProperties(). Int_t TGeoOpticalSurface::GetNconstProperties ; (; ); const. inline . Definition at line 137 of file TGeoOpticalSurface.h. ◆ GetNproperties(). Int_t TGeoOpticalSurface::GetNproperties ; (; ); const. inline . Definition at line 136 of file TGeoOpticalSurface.h. ◆ GetPolish(). D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOpticalSurface.html:18583,error,error,18583,doc/master/classTGeoOpticalSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html,1,['error'],['error']
Availability,"c double rescale_error ; (; double ; err, . const double ; result_abs, . const double ; result_asc . ). static . Definition at line 992 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ reset_nrmax(). static void reset_nrmax ; (; gsl_integration_workspace * ; workspace). inlinestatic . Definition at line 1687 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ retrieve(). static void retrieve ; (; const gsl_integration_workspace * ; workspace, . double * ; a, . double * ; b, . double * ; r, . double * ; e . ). inlinestatic . Definition at line 688 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ RooAdaptiveGaussKronrodIntegrator1D_GSL_GlueFunction(). double RooAdaptiveGaussKronrodIntegrator1D_GSL_GlueFunction ; (; double ; x, . void * ; data . ). Glue function interacing to GSL code. ; Definition at line 301 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ set_initial_result(). static void set_initial_result ; (; gsl_integration_workspace * ; workspace, . double ; result, . double ; error . ). inlinestatic . Definition at line 514 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ subinterval_too_small(). static int subinterval_too_small ; (; double ; a1, . double ; a2, . double ; b2 . ). inlinestatic . Definition at line 727 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ sum_results(). static double sum_results ; (; const gsl_integration_workspace * ; workspace). inlinestatic . Definition at line 707 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ test_positivity(). static int test_positivity ; (; double ; result, . double ; resabs . ). inlinestatic . Definition at line 1987 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ update(). static void update ; (; gsl_integration_workspace * ; workspace, . double ; a1, . double ; b1, . double ; area1, . double ; error1, . double ; a2, . double ; b2, . double ; area2, . double ; error2 . ). inlinestatic . Definition at line 633 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. Variable Documentation. ◆ instance. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html:18630,error,error,18630,doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,https://root.cern,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,1,['error'],['error']
Availability,"c errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:7068,error,error,7068,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,4,['error'],['error']
Availability,"c errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:9962,error,error,9962,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"c from escchar and copy to dst. ;  . Variables; const UInt_t kHashShift = 5;  . Macro Definition Documentation. ◆ BIG_CONSTANT. #define BIG_CONSTANT; (;  ; x);    (x##LLU). Definition at line 726 of file TString.cxx. ◆ ROTL64. #define ROTL64; (;  ; x, .  ; y . );    rotl64(x,y). Definition at line 725 of file TString.cxx. Function Documentation. ◆ Compress(). char * Compress ; (; const char * ; str). Remove all blanks from the string str. ; The returned string has to be deleted by the user. ; Definition at line 2572 of file TString.cxx. ◆ EscChar(). int EscChar ; (; const char * ; src, . char * ; dst, . int ; dstlen, . char * ; specchars, . char ; escchar . ). Escape specchars in src with escchar and copy to dst. ; Definition at line 2593 of file TString.cxx. ◆ Form(). char * Form ; (; const char * ; fmt, .  ; ... . ). Formats a string in a circular formatting buffer. ; Removes the need to create and delete short lived strings. Don't pass Form() pointers from user code down to ROOT functions as the circular buffer may be overwritten downstream. Use Form() results immediately or use TString::Format() instead. ; Definition at line 2489 of file TString.cxx. ◆ Format(). static char * Format ; (; const char * ; format, . va_list ; ap . ). static . Format a string in a circular formatting buffer (using a printf style format descriptor). ; Definition at line 2442 of file TString.cxx. ◆ Hash(). UInt_t Hash ; (; const char * ; str). Return a case-sensitive hash value (endian independent). ; Definition at line 576 of file TString.cxx. ◆ Mash(). static void Mash ; (; UInt_t & ; hash, . UInt_t ; chars . ). inlinestatic . Utility used by Hash(). ; Definition at line 566 of file TString.cxx. ◆ MemIsEqual(). static int MemIsEqual ; (; const char * ; p, . const char * ; q, . Ssiz_t ; n . ). static . Returns false if strings are not equal. ; Definition at line 885 of file TString.cxx. ◆ operator+() [1/5]. TString operator+ ; (; char ; c, . const TString & ; s . ). Add string to char.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx.html:4599,down,down,4599,doc/master/TString_8cxx.html,https://root.cern,https://root.cern/doc/master/TString_8cxx.html,2,['down'],"['down', 'downstream']"
Availability,"c method which is called after the thread has been canceled. ; Definition at line 729 of file TThread.cxx. ◆ CancelPoint(). Int_t TThread::CancelPoint ; (; ). static . Static method to set a cancellation point. ; Returns 0 on success, otherwise an error number will be returned. ; Definition at line 676 of file TThread.cxx. ◆ Class(). static TClass * TThread::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TThread::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TThread::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 180 of file TThread.h. ◆ CleanUp(). Int_t TThread::CleanUp ; (; ). static . Static method to cleanup the calling thread. ; Definition at line 708 of file TThread.cxx. ◆ CleanUpPop(). Int_t TThread::CleanUpPop ; (; Int_t ; exe = 0). static . Static method which pops thread cleanup method off stack. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 697 of file TThread.cxx. ◆ CleanUpPush(). Int_t TThread::CleanUpPush ; (; void * ; free, . void * ; arg = nullptr . ). static . Static method which pushes thread cleanup method on stack. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 685 of file TThread.cxx. ◆ Constructor(). void TThread::Constructor ; (; ). private . Common thread constructor. ; Definition at line 364 of file TThread.cxx. ◆ DeclFileName(). static const char * TThread::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 180 of file TThread.h. ◆ Delete() [1/2]. void TThread::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 127 of file TThread.h. ◆ Delete() [2/2]. Int_t TTh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:21290,error,error,21290,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['error'],['error']
Availability,"c of the return value. Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the add parameter. Int_t SetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); Check if bname is already in the status list, and if not, create a TChainElement object and set its address.; See TTree::CheckBranchAddressType for the semantic of the return value. Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the add parameter. void SetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); -- Set branch status to Process or DoNotProcess. bname is the name of a branch. if bname=""*"", apply to all branches.; status = 1 branch will be processed; = 0 branch will not be processed; See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress. If found is not 0, the number of branch(es) found matching the regular; expression is returned in *found AND the error message 'unknown branch'; is suppressed. void SetDirectory(TDirectory* dir); Remove reference to this chain from current directory and add; reference to new directory dir. dir can be 0 in which case the chain; does not belong to any directory. void SetEntryList(TEntryList* elist, Option_t* opt = """"); Set the input entry list (processing the entries of the chain will then be; limited to the entries in the list); This function finds correspondance between the sub-lists of the TEntryList; and the trees of the TChain; By default (opt=""""), both the file names of the chain elements and; the file names of the TEntryList sublists are expanded to full path name.; If opt = ""ne"", the file names are taken as they are and not expanded. void SetEntryListFile(const char* filename = """", Option_t* opt = """"); Set the input entry list (processing the entries of the chain will then be; limited to the entries in the list). This function creates a special kind; of ent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:45177,error,error,45177,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,6,['error'],['error']
Availability,"c voidTGeoCone::DistToCone(const Double_t* point, const Double_t* dir, Double_t dz, Double_t r1, Double_t r2, Double_t& b, Double_t& delta); static Double_tDistToCons(const Double_t* point, const Double_t* dir, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Double_t phi1, Double_t phi2); static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoCone::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoCone::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoConeSeg.html:4759,error,error,4759,root/html534/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoConeSeg.html,3,['error'],['error']
Availability,"c voidTGeoVolume::CreateDummyMedium(); virtual voidCreateThreadData(Int_t nthreads); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGeoVolume::DistancetoPrimitive(Int_t px, Int_t py); TGeoVolume*Divide(TGeoVolume* cell, TGeoPatternFinder* pattern, Option_t* option = ""spacedout""); virtual TGeoVolume*Divide(const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed = 0, Option_t* option = """"); virtual voidTGeoVolume::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOnly(Option_t*); static TGeoMedium*TGeoVolume::DummyMedium(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoVolume::ExecuteEvent(Int_t event, Int_t px, Int_t py); Int_tTGeoVolume::Export(const char* filename, const char* name = """", Option_t* option = """"); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tTGeoVolume::FindMatrixOfDaughterVolume(TGeoVolume* vol) const; TGeoNode*TGeoVolume::FindNode(const char* name) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTGeoVolume::FindOverlaps() const; virtual Int_tTGeoVolume::GetByteCount() const; virtual Int_tGetCurrentNodeIndex() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TObject*TGeoVolume::GetField() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TGeoPatternFinder*TGeoVolume:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolumeAssembly.html:20120,error,error,20120,root/html534/TGeoVolumeAssembly.html,https://root.cern,https://root.cern/root/html534/TGeoVolumeAssembly.html,3,['error'],['error']
Availability,"c) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:3336,down,down,3336,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['down'],['down']
Availability,"c, . const char * ; dtdname, . const char * ; rootname . ). assigns dtd filename to document ; Definition at line 1274 of file TXMLEngine.cxx. ◆ Class(). static TClass * TXMLEngine::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TXMLEngine::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TXMLEngine::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 108 of file TXMLEngine.h. ◆ CleanNode(). void TXMLEngine::CleanNode ; (; XMLNodePointer_t ; xmlnode). remove all children node from xmlnode ; Definition at line 1235 of file TXMLEngine.cxx. ◆ DeclFileName(). static const char * TXMLEngine::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 108 of file TXMLEngine.h. ◆ DisplayError(). void TXMLEngine::DisplayError ; (; Int_t ; error, . Int_t ; linenumber . ). protected . Displays xml parsing error. ; Definition at line 2223 of file TXMLEngine.cxx. ◆ DocGetRootElement(). XMLNodePointer_t TXMLEngine::DocGetRootElement ; (; XMLDocPointer_t ; xmldoc). returns root node of document ; Definition at line 1339 of file TXMLEngine.cxx. ◆ DocSetRootElement(). void TXMLEngine::DocSetRootElement ; (; XMLDocPointer_t ; xmldoc, . XMLNodePointer_t ; xmlnode . ). set main (root) node for document ; Definition at line 1326 of file TXMLEngine.cxx. ◆ FindNs(). XMLNsPointer_t TXMLEngine::FindNs ; (; XMLNodePointer_t ; xmlnode, . const char * ; nsname . ). protected . define if namespace of that name exists for xmlnode ; Definition at line 1562 of file TXMLEngine.cxx. ◆ FreeAllAttr(). void TXMLEngine::FreeAllAttr ; (; XMLNodePointer_t ; xmlnode). Free all attributes of the node. ; Definition at line 647 of file TXMLEngine.cxx. ◆ FreeAttr(). void TXMLEngine::FreeAttr ; (; XMLNodePointer_t ; xmlnode, . const char * ; name . ). remove attribute from xmlnode ; Definition at line 622 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLEngine.html:24118,error,error,24118,doc/master/classTXMLEngine.html,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html,1,['error'],['error']
Availability,"c->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:136800,error,error,136800,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"c. Mathematically, since the limit is an absolute constraint on; 164the parameter, a parameter at its limit has no error, at least in one; 165direction. The error matrix, which can assign only symmetric errors, then; 166becomes essentially meaningless.; 167 ; 168### Interpretation of Parameter Errors:; 169 ; 170There are two kinds of problems that can arise: the reliability of; 171MINUIT's error estimates, and their statistical interpretation, assuming; 172they are accurate.; 173 ; 174### Statistical interpretation:; 175 ; 176For discussion of basic concepts, such as the meaning of the elements of; 177the error matrix, or setting of exact confidence levels see:; 178 ; 179 1. F.James.; 180 Determining the statistical Significance of experimental Results.; 181 Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; 182 ; 183 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; 184 Statistical Methods in Experimental Physics.; 185 North-Holland, 1971.; 186 ; 187### Reliability of MINUIT error estimates.; 188 ; 189MINUIT always carries around its own current estimates of the parameter; 190errors, which it will print out on request, no matter how accurate they; 191are at any given point in the execution. For example, at initialization,; 192these estimates are just the starting step sizes as specified by the user.; 193After a HESSE step, the errors are usually quite accurate,; 194unless there has been a problem. MINUIT, when it prints out error values,; 195also gives some indication of how reliable it thinks they are. For; 196example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; 197not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; 198been calculated but there is reason to believe that they may not be; 199accurate.; 200 ; 201If no mitigating adjective is given, then at least MINUIT believes the; 202errors are accurate, although there is always a small chance that MINUIT; 203has been fooled. Some visible signs that MIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:8943,error,error,8943,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"c. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setOffsetting(Bool_t flag); Enable internal likelihood offsetting for enhanced numeric precision. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. s - Run Hesse first to estimate initial step size; m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile timer; r - Save fit result; 0 - Run Migrad with strategy 0. Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:9992,error,errors,9992,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,3,['error'],['errors']
Availability,"c.SaveAs(""rf606_nllerrorhandling.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_argus_over_argus_Int[m]_argusData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-2417.08) to force MIGRAD to back out of this region. Error log follows.; Parameter values: k=-33.8075 m0=5.29014; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ]; getLogVal() top-level p.d.f not greater than zero @ numerator=argus=0.387202, denominator=argus_Int[m]=0.0305662; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-2417.08) to force MIGRAD to back out of this region. Error log follows.; Parameter values: k=-36.7074 m0=5.2901; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ]; getLogVal() top-level p.d.f not greater than zero @ numerator=argus=0.370612, denominator=argus_Int[m]=0.0290505; ; Minuit2Minimizer : Valid minimum - status = 0; FVAL = -2419.30692128725559; Edm = 2.90497786168460102e-06; Nfcn = 47; k = -35.3713 +/- 3.51942 (limited); m0 = 5.2904 +/- 0.000261877 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_argus_over_argus_Int[m]_argusData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html:4321,error,error,4321,doc/master/rf606__nllerrorhandling_8py.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8py.html,1,['error'],['error']
Availability,"c1"",""Exclusion graphs examples"",200,10,600,400);; c1->SetGrid();. TMultiGraph *mg = new TMultiGraph();; mg->SetTitle(""Exclusion graphs"");. const Int_t n = 35;; Double_t x1[n], x2[n], x3[n], y1[n], y2[n], y3[n];; for (Int_t i=0;i<n;i++) {; x1[i] = i*0.1;; x2[i] = x1[i];; x3[i] = x1[i]+.5;; y1[i] = 10*sin(x1[i]);; y2[i] = 10*cos(x1[i]);; y3[i] = 10*sin(x1[i])-2;; }. TGraph *gr1 = new TGraph(n,x1,y1);; gr1->SetLineColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);. TGraph *gr2 = new TGraph(n,x2,y2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; The following drawing options are specific to graphs with error bars:. ""Z""; Do not draw small horizontal and vertical lines the end of the error bars.; Without ""Z"", the default is to draw these. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; Do not draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:5283,error,error,5283,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,4,['error'],['error']
Availability,"c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile3D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax, Int_t nbinsz, Double_t zmin, Double_t zmax); -*-*-*-*-*-*-*Redefine x, y and z axis parameters*-*-*-*-*-*-*-*-*-*-*-*; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins, Int_t nz, const Double_t* zBins); -*-*-*-*-*-*-*Redefine x, y and z axis parameters with variable bin sizes *-*-*-*-*-*-*-*-*. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void SetBuffer(Int_t buffersize, Option_t* opt = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile3D errors; *-* =======================================. The computation of the bin errors is based on the parameter option:; option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; i.e. the standard error of the bin contents.; Note that if TProfile3D::Approximate() is called, an approximation is used when; the spread in T is 0 and the number of bin entries is > 0. 's' The bin errors are the standard deviations of the T bin values; Note that if TProfile3D::Approximate() is called, an approximation is used when; the spread in T is 0 and the number of bin entries is > 0. 'i' Errors are as in default case (standard errors of the bin contents); The only difference is for the case when the spread in T is zero.; In this case for N > 0 the error is 1./SQRT(12.*N). 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; W is the sum in the bin of the weights of the profile.; This option is for combining measurements t +/- dt,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:44397,error,errors,44397,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,3,['error'],['errors']
Availability,"c2, ""S"");; func2->IntegralError(a,b,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; IMPORTANT NOTE1:; A null pointer to the parameter values vector and to the covariance matrix can be passed. In this case, when the parameter values pointer is null, the parameter values stored in this TF1 function object are used in the integral error computation. When the poassed pointer to the covariance matrix is null, a covariance matrix from the last fit is retrieved from a global fitter instance when it exists. Note that the global fitter instance esists only when ROOT is not running with multi-threading enabled (ROOT::IsImplicitMTEnabled() == True). When the ovariance matrix from the last fit cannot be retrieved, an error message is printed and a zero value is returned.; IMPORTANT NOTE2:; When no covariance matrix is passed and in the meantime a fit is done using another function, the routine will signal an error and it will return zero only when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ). In the case that npar is the same, an incorrect result is returned.; IMPORTANT NOTE3:; The user must pass a pointer to the elements of the full covariance matrix dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()), including also the fixed parameters. The covariance matrix must be retrieved from the TFitResult class as shown above and not from TVirtualFitter::GetCovarianceMatrix() function. ; Definition at line 2758 of file TF1.cxx. ◆ IntegralFast(). Double_t TF1::IntegralFast ; (; Int_t ; num, . Double_t * ; x, . Double_t * ; w, . Double_t ; a, . Double_t ; b, . Double_t * ; params = nullptr, . Double_t ; epsilon = 1e-12 . ). virtual . Gauss-Legendre integral, see CalcGaussLegendreSamplingPoints. ; Definition at line 2778 of file TF1.cxx. ◆ IntegralMultiple() [1/3]. Double_t TF1::IntegralMultiple ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:97604,error,error,97604,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['error'],['error']
Availability,"c:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. vector<Double_t>fSampleWeightsvector of weights for the samples; vector<Double_t>fSamplingDistvector of points for the sampling distribution; vector<Double_t>fSumW! Chached vector with sum of the weight used to compute integral; vector<Double_t>fSumW2! Chached vector with sum of the weight used to compute integral error; TStringfVarName. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const char* varName = 0); SamplingDistribution constructor. SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, vector<Double_t>& sampleWeights, const char* varName = 0); SamplingDistribution constructor. SamplingDistribution(const char* name, const char* title, const char* varName = 0); SamplingDistribution constructor (with name and title). SamplingDistribution(const char* name, const char* title, RooDataSet& dataSet, const char* columnName = 0, const char* varName = 0); Creates a SamplingDistribution from a RooDataSet for debugging; purposes; e.g. if you need a Gaussian type SamplingDistribution; you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SamplingDistribution.html:8025,error,error,8025,root/html602/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html602/RooStats__SamplingDistribution.html,2,['error'],['error']
Availability,"c; 6677UInt_t TH1::GetAxisLabelStatus() const; 6678{; 6679 UInt_t bitMask = kNoAxis;; 6680 if (fXaxis.CanExtend() && fXaxis.IsAlphanumeric() ) bitMask |= kXaxis;; 6681 if (GetDimension() > 1 && fYaxis.CanExtend() && fYaxis.IsAlphanumeric()); 6682 bitMask |= kYaxis;; 6683 if (GetDimension() > 2 && fZaxis.CanExtend() && fZaxis.IsAlphanumeric()); 6684 bitMask |= kZaxis;; 6685 ; 6686 return bitMask;; 6687}; 6688 ; 6689////////////////////////////////////////////////////////////////////////////////; 6690/// Static function to set the default buffer size for automatic histograms.; 6691/// When a histogram is created with one of its axis lower limit greater; 6692/// or equal to its upper limit, the function SetBuffer is automatically; 6693/// called with the default buffer size.; 6694 ; 6695void TH1::SetDefaultBufferSize(Int_t buffersize); 6696{; 6697 fgBufferSize = buffersize > 0 ? buffersize : 0;; 6698}; 6699 ; 6700////////////////////////////////////////////////////////////////////////////////; 6701/// When this static function is called with `sumw2=kTRUE`, all new; 6702/// histograms will automatically activate the storage; 6703/// of the sum of squares of errors, ie TH1::Sumw2 is automatically called.; 6704 ; 6705void TH1::SetDefaultSumw2(Bool_t sumw2); 6706{; 6707 fgDefaultSumw2 = sumw2;; 6708}; 6709 ; 6710////////////////////////////////////////////////////////////////////////////////; 6711/// Change/set the title.; 6712///; 6713/// If title is in the form `stringt;stringx;stringy;stringz`; 6714/// the histogram title is set to `stringt`, the x axis title to `stringx`,; 6715/// the y axis title to `stringy`, and the z axis title to `stringz`.; 6716///; 6717/// To insert the character `;` in one of the titles, one should use `#;`; 6718/// or `#semicolon`.; 6719 ; 6720void TH1::SetTitle(const char *title); 6721{; 6722 fTitle = title;; 6723 fTitle.ReplaceAll(""#;"",2,""#semicolon"",10);; 6724 ; 6725 // Decode fTitle. It may contain X, Y and Z titles; 6726 TString str1 = fT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:264143,error,errors,264143,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"cCharFun_tfReAllocFunc! Realloc function to be used when extending the buffer.; Int_tfVersionBuffer format version. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBuffer(EMode mode); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. By default the I/O buffer has a size of; TBuffer::kInitialSize (1024) bytes. TBuffer(TBuffer::EMode mode, Int_t bufsiz); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. TBuffer(TBuffer::EMode mode, Int_t bufsiz, void* buf, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. By default the I/O buffer has a size of; TBuffer::kInitialSize (1024) bytes. An external buffer can be passed; to TBuffer via the buf argument. By default this buffer will be adopted; unless adopt is false.; If the new buffer is _not_ adopted and no memory allocation routine; is provided, a Fatal error will be issued if the Buffer attempts to; expand. ~TBuffer(); Delete an I/O buffer object. void AutoExpand(Int_t size_needed); Automatically calculate a new size and expand the buffer to fit at least size_needed.; The goals is to minimize the number of memory allocation and the memory allocation; which avoiding too much memory wastage.; If the size_needed is larger than the current size, the policy; is to expand to double the current size or the size_needed which ever is largest. void SetBuffer(void* buf, UInt_t bufsiz = 0, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; new buffer is expected to have the same size as the previous buffer.; The current buffer position is reset to the start of the buffer.; If the TBuffer owned the previous buffer, it will be deleted prior; to accepting the new buffer. By default the new buffer will be; adopted unless adopt is false.; If the new buffer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBuffer.html:18561,error,error,18561,root/html602/TBuffer.html,https://root.cern,https://root.cern/root/html602/TBuffer.html,2,['error'],['error']
Availability,"cModified()Definition RCanvas.hxx:82; ROOT::Experimental::RCanvas::GetUIDstd::string GetUID() constReturn unique identifier for the canvas Used in iPython display.Definition RCanvas.cxx:199; ROOT::Experimental::RCanvas::CreateJSONstd::string CreateJSON()Provide JSON which can be used for offline display.Definition RCanvas.cxx:211; ROOT::Experimental::RCanvas::Createstatic std::shared_ptr< RCanvas > Create(const std::string &title)Create new canvas instance.Definition RCanvas.cxx:89; ROOT::Experimental::RCanvas::ClearOnClosevoid ClearOnClose(const std::shared_ptr< void > &handle)Set handle which will be cleared when connection is closed.Definition RCanvas.cxx:239; ROOT::Experimental::RCanvas::Updatevoid Update(bool async=false, CanvasCallback_t callback=nullptr)update drawingDefinition RCanvas.cxx:78; ROOT::Experimental::RCanvas::Hidevoid Hide()Hide all canvas displays.Definition RCanvas.cxx:171; ROOT::Experimental::RChangeAttrRequest::Processstd::unique_ptr< RDrawableReply > Process() overrideApply attributes changes to the drawable Return mask with actions which were really applied.Definition RCanvas.cxx:327; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; int; nconst Int_t nDefinition legend1.C:16; ROOT::Experimental::Internal::RIOSharedVector_tstd::vector< RIOSharedBase * > RIOSharedVector_tDefinition RDrawable.hxx:52; ROOT::Experimental::CanvasCallback_tstd::function< void(bool)> CanvasCallback_tDefinition RVirtualCanvasPainter.hxx:22; ROOT::Experimental::GPadLogRLogChannel & GPadLog()Log channel for GPad diagnostics.Definition RAttrBase.cxx:17. graf2dgpadv7srcRCanvas.cxx. ROOT master - Reference Guide Generated on T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8cxx_source.html:16307,mask,mask,16307,doc/master/RCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8cxx_source.html,1,['mask'],['mask']
Availability,"cOpenStatus(TFileOpenHandle *handle); 4930{; 4931 if (handle && handle->fFile) {; 4932 if (!handle->fFile->IsZombie()); 4933 return handle->fFile->GetAsyncOpenStatus();; 4934 else; 4935 return TFile::kAOSFailure;; 4936 }; 4937 ; 4938 // Default is synchronous mode; 4939 return TFile::kAOSNotAsync;; 4940}; 4941 ; 4942////////////////////////////////////////////////////////////////////////////////; 4943/// Get final URL for file being opened asynchronously.; 4944/// Returns 0 is the information is not yet available.; 4945 ; 4946const TUrl *TFile::GetEndpointUrl(const char* name); 4947{; 4948 // Check the list of pending async open requests; 4949 if (fgAsyncOpenRequests && (fgAsyncOpenRequests->GetSize() > 0)) {; 4950 TIter nxr(fgAsyncOpenRequests);; 4951 TFileOpenHandle *fh = nullptr;; 4952 while ((fh = (TFileOpenHandle *)nxr())); 4953 if (fh->Matches(name)); 4954 if (fh->fFile); 4955 return fh->fFile->GetEndpointUrl();; 4956 }; 4957 ; 4958 // Check also the list of files open; 4959 R__LOCKGUARD(gROOTMutex);; 4960 TSeqCollection *of = gROOT->GetListOfFiles();; 4961 if (of && (of->GetSize() > 0)) {; 4962 TIter nxf(of);; 4963 TFile *f = nullptr;; 4964 while ((f = (TFile *)nxf())); 4965 if (f->Matches(name)); 4966 return f->GetEndpointUrl();; 4967 }; 4968 ; 4969 // Information not yet available; 4970 return (const TUrl *)nullptr;; 4971}; 4972 ; 4973////////////////////////////////////////////////////////////////////////////////; 4974/// Print file copy progress.; 4975 ; 4976void TFile::CpProgress(Long64_t bytesread, Long64_t size, TStopwatch &watch); 4977{; 4978 fprintf(stderr, ""[TFile::Cp] Total %.02f MB\t|"", (Double_t)size/1048576);; 4979 ; 4980 for (int l = 0; l < 20; l++) {; 4981 if (size > 0) {; 4982 if (l < 20*bytesread/size); 4983 fprintf(stderr, ""="");; 4984 else if (l == 20*bytesread/size); 4985 fprintf(stderr, "">"");; 4986 else if (l > 20*bytesread/size); 4987 fprintf(stderr, ""."");; 4988 } else; 4989 fprintf(stderr, ""="");; 4990 }; 4991 // Allow to update the GUI ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:181693,avail,available,181693,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['avail'],['available']
Availability,"cPath ; (; ). overridevirtual . Return the dynamic path (used to find shared libraries). ; Reimplemented from TSystem.; Definition at line 4738 of file TUnixSystem.cxx. ◆ GetEffectiveGid(). Int_t TUnixSystem::GetEffectiveGid ; (; ). overridevirtual . Returns the effective group id. ; The effective group id corresponds to the set id bit on the file being executed. ; Reimplemented from TSystem.; Definition at line 2045 of file TUnixSystem.cxx. ◆ GetEffectiveUid(). Int_t TUnixSystem::GetEffectiveUid ; (; ). overridevirtual . Returns the effective user id. ; The effective id corresponds to the set id bit on the file being executed. ; Reimplemented from TSystem.; Definition at line 2021 of file TUnixSystem.cxx. ◆ Getenv(). const char * TUnixSystem::Getenv ; (; const char * ; name). overridevirtual . Get environment variable. ; Reimplemented from TSystem.; Definition at line 2137 of file TUnixSystem.cxx. ◆ GetError(). const char * TUnixSystem::GetError ; (; ). overridevirtual . Return system error string. ; Reimplemented from TSystem.; Definition at line 719 of file TUnixSystem.cxx. ◆ GetFPEMask(). Int_t TUnixSystem::GetFPEMask ; (; ). overridevirtual . Return the bitmap of conditions that trigger a floating point exception. ; Reimplemented from TSystem.; Definition at line 916 of file TUnixSystem.cxx. ◆ GetFsInfo(). int TUnixSystem::GetFsInfo ; (; const char * ; path, . Long_t * ; id, . Long_t * ; bsize, . Long_t * ; blocks, . Long_t * ; bfree . ). overridevirtual . Get info about a file system: id, bsize, bfree, blocks. ; Id is file system type (machine dependend, see statfs()) Bsize is block size of file system Blocks is total number of blocks in file system Bfree is number of free blocks in file system The function returns 0 in case of success and 1 if the file system could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 1676 of file TUnixSystem.cxx. ◆ GetGid(). Int_t TUnixSystem::GetGid ; (; const char * ; group = nullptr). overridevirtual . Returns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:49999,error,error,49999,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['error'],['error']
Availability,"c_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<double>(); virtual TMatrixTBase<double>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<double>&Apply(const TElementActionT<double>& action); virtual TMatrixTBase<double>&Apply(const TElementPosActionT<double>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual doubleColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual voidDeterminant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTBase_double_.html:7454,avail,available,7454,root/html602/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTBase_double_.html,2,['avail'],['available']
Availability,"c_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TMatrixTBase<float>(); virtual TMatrixTBase<float>&Abs(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TMatrixTBase<float>&Apply(const TElementActionT<float>& action); virtual TMatrixTBase<float>&Apply(const TElementPosActionT<float>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual floatColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual voidDeterminant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTBase_float_.html:7451,avail,available,7451,root/html602/TMatrixTBase_float_.html,https://root.cern,https://root.cern/root/html602/TMatrixTBase_float_.html,2,['avail'],['available']
Availability,"c_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); Combines the specified rectangle of ""src"" with the specified rectangle; of ""dest"" according to the ""gc"". src_x, src_y - specify the x and y coordinates, which are relative; to the origin of the source rectangle and specify; upper-left corner.; width, height - the width and height, which are the dimensions of both; the source and destination rectangles; dest_x, dest_y - specify the upper-left corner of the destination; rectangle. GC components in use: function, plane-mask, subwindow-mode,; graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask.; (see also the GCValues_t structure). void ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); Changes the attributes of the specified window ""id"" according the; values provided in ""attr"". The mask data member of ""attr"" specifies; which window attributes are defined in the attributes argument.; This mask is the bitwise inclusive OR of the valid attribute mask; bits; if it is zero, the attributes are ignored. void ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); Alters the property for the specified window and causes the X server; to generate a PropertyNotify event on that window. id - the window whose property you want to change; property - specifies the property name; type - the type of the property; the X server does not; interpret the type but simply passes it back to; an application that might ask about the window; properties; data - the property data; len - the length of the specified data format. void DrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); Uses the components of the specified GC to draw a line between the; specified set of points (x1, y1) and (x2, y2). GC components in use: function, plane-mask, line-width, line-style,; cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin,; and clip-mask.; GC mode-dependent components: foreground, back",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:46250,mask,mask,46250,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,12,['mask'],['mask']
Availability,"cache is deleted. Int_t Sizeof() const; Return the size in bytes of the file header. void Streamer(TBuffer& ); Stream a TFile object. void SumBuffer(Int_t bufsize); Increment statistics for buffer sizes of objects in this file. Int_t Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); Write memory objects to this file.; Loop on all objects in memory (including subdirectories).; A new key is created in the KEYS linked list for each object.; The list of keys is then saved on the file (via WriteKeys); as a single data record.; For values of opt see TObject::Write().; The directory header info is rewritten on the directory header record.; The linked list of FREE segments is written.; The file header is written (bytes 1->fBEGIN). Int_t Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; One can not save a const TDirectory object. Bool_t WriteBuffer(const char* buf, Int_t len); Write a buffer to the file. This is the basic low level write operation.; Returns kTRUE in case of failure. Int_t WriteBufferViaCache(const char* buf, Int_t len); Write buffer via cache. Returns 0 if cache is not active, 1 in case; write via cache was successful, 2 in case write via cache failed. void WriteFree(); Write FREE linked list on the file.; The linked list of FREE segments (fFree) is written as a single data; record. void WriteHeader(); Write File Header. void MakeProject(const char* dirname, const char* classes = ""*"", Option_t* option = ""new""); Generate code in directory dirname for all classes specified in; argument classes If classes = ""*"" (default and currently the; only supported value), the function generates an include file; for each class in the StreamerInfo list for which a TClass; object does not exist. The code generated includes:; dirnameProjectHeaders.h // contains one #include statement per generated header file; dirnameProjectSource.cxx // contains all the constructors and destructors implementation.; and one header per class that is not nested insi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFile.html:42634,failure,failure,42634,root/html602/TFile.html,https://root.cern,https://root.cern/root/html602/TFile.html,2,['failure'],['failure']
Availability,"cache. If one or more; of the parameters change, the cache will be updated. The sampling density of the cache is controlled by the binning of the; the convolution observable, which can be changed from RooRealVar::setBins(N); For good results N should be large (>1000). Additional interpolation of; cache values may improve the result if courser binning are chosen. These can be; set in the constructor or through the setInterpolationOrder() member function.; For N>1000 interpolation will not substantially improve the performance. Additionial information on caching activities can be displayed by monitoring; the message stream with topic ""Caching"" at the INFO level, i.e.; do RooMsgService::instance().addStream(RooMsgService::INFO,Topic(""Caching"")); to see these message on stdout. Multi-dimensional convolutions are not supported yet, but will be in the future; as FFTW can calculate them. Installing a copy of FFTW on Linux and compiling ROOT to use it. 1) Go to www.fftw.org and download the latest stable version (a .tar.gz file). If you have root access to your machine and want to make a system installation of FFTW. 2) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure' followed by 'make install'.; This will install fftw in /usr/local/bin,lib etc... 3) Start from a source installation of ROOT. If you now have a binary distribution,; first download a source tar ball from root.cern.ch for your ROOT version and untar it.; Run 'configure', following the instruction from 'configure --help' but be sure run 'configure'; with additional flags '--enable-fftw3' and '--enable-roofit', then run 'make'. If you do not have root access and want to make a private installation of FFTW. 2) Make a private install area for FFTW, e.g. /home/myself/fftw. 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory; and type './configure --prefix=/home/myself/fftw' followed by 'make install'.; Substitute /home/myself/fftw with a directory of your choice. This;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:3272,down,download,3272,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,7,['down'],['download']
Availability,"cache; 1180/// - -1 on error; 1181 ; 1182Int_t TTree::DropBranchFromCache(TBranch *b, bool subbranches); 1183{; 1184 if (!GetTree()) {; 1185 if (LoadTree(0)<0) {; 1186 Error(""DropBranchFromCache"",""Could not load a tree"");; 1187 return -1;; 1188 }; 1189 }; 1190 if (GetTree()) {; 1191 if (GetTree() != this) {; 1192 Int_t res = GetTree()->DropBranchFromCache(b, subbranches);; 1193 if (res<0) {; 1194 Error(""DropBranchFromCache"", ""Error dropping branch"");; 1195 }; 1196 return res;; 1197 }; 1198 } else {; 1199 Error(""DropBranchFromCache"", ""No tree is available. Branch was not dropped from the cache"");; 1200 return -1;; 1201 }; 1202 ; 1203 TFile *f = GetCurrentFile();; 1204 if (!f) {; 1205 Error(""DropBranchFromCache"", ""No file is available. Branch was not dropped from the cache"");; 1206 return -1;; 1207 }; 1208 TTreeCache *tc = GetReadCache(f,true);; 1209 if (!tc) {; 1210 Error(""DropBranchFromCache"", ""No cache is available, branch not dropped"");; 1211 return -1;; 1212 }; 1213 return tc->DropBranch(b,subbranches);; 1214}; 1215 ; 1216////////////////////////////////////////////////////////////////////////////////; 1217/// Add a cloned tree to our list of trees to be notified whenever we change; 1218/// our branch addresses or when we are deleted.; 1219 ; 1220void TTree::AddClone(TTree* clone); 1221{; 1222 if (!fClones) {; 1223 fClones = new TList();; 1224 fClones->SetOwner(false);; 1225 // So that the clones are automatically removed from the list when; 1226 // they are deleted.; 1227 {; 1228 R__LOCKGUARD(gROOTMutex);; 1229 gROOT->GetListOfCleanups()->Add(fClones);; 1230 }; 1231 }; 1232 if (!fClones->FindObject(clone)) {; 1233 fClones->Add(clone);; 1234 }; 1235}; 1236 ; 1237// Check whether mainTree and friendTree can be friends w.r.t. the kEntriesReshuffled bit.; 1238// In particular, if any has the bit set, then friendTree must have a TTreeIndex and the; 1239// branches used for indexing must be present in mainTree.; 1240// Return true if the trees can be friends, false ot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:42785,avail,available,42785,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['avail'],['available']
Availability,"cachedIntegral->setCacheSource(true) ;; 561 if (normInt->operMode()==ADirty) {; 562 cachedIntegral->setOperMode(ADirty) ;; 563 }; 564 normInt= cachedIntegral ;; 565 }; 566 ; 567 }; 568 _norm = normInt ;; 569 }; 570 ; 571 // Register new normalization with manager (takes ownership); 572 cache = new CacheElem(*_norm) ;; 573 _normMgr.setObj(nset,cache) ;; 574 ; 575// cout << ""making new object "" << _norm->GetName() << endl ;; 576 ; 577 return true ;; 578}; 579 ; 580 ; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// Reset error counter to given value, limiting the number; 584/// of future error messages for this pdf to 'resetValue'; 585 ; 586void RooAbsPdf::resetErrorCounters(Int_t resetValue); 587{; 588 _errorCount = resetValue ;; 589 _negCount = resetValue ;; 590}; 591 ; 592 ; 593 ; 594////////////////////////////////////////////////////////////////////////////////; 595/// Reset trace counter to given value, limiting the; 596/// number of future trace messages for this pdf to 'value'; 597 ; 598void RooAbsPdf::setTraceCounter(Int_t value, bool allNodes); 599{; 600 if (!allNodes) {; 601 _traceCount = value ;; 602 return ;; 603 } else {; 604 RooArgList branchList ;; 605 branchNodeServerList(&branchList) ;; 606 for(auto * pdf : dynamic_range_cast<RooAbsPdf*>(branchList)) {; 607 if (pdf) pdf->setTraceCounter(value,false) ;; 608 }; 609 }; 610 ; 611}; 612 ; 613 ; 614 ; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Return the log of the current value with given normalization; 618/// An error message is printed if the argument of the log is negative.; 619 ; 620double RooAbsPdf::getLogVal(const RooArgSet* nset) const; 621{; 622 return getLog(getVal(nset), this);; 623}; 624 ; 625 ; 626////////////////////////////////////////////////////////////////////////////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:22511,error,error,22511,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,3,['error'],['error']
Availability,"cal Report DD/81/02 and CERN Report 81-03, CERN, 1981; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. 5.9.4 Reliability of Minuit Error Estimates; Minuit always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. Minuit, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least Minuit believes the errors are accurate, although there is always a small chance that Minuit has been fooled. Some visible signs that Minuit may have been fooled:. Warning messages produced during the minimization or error analysis; Failure to find new minimum; Value of EDM too big (estimated Distance to Minimum); Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterized so that individual errors are not very meaningful because they are so highly correlated; Parameter at limit. This condition, signaled by a Minuit warning message, may make both the function minimum and parameter errors unreliable. See the discussion above ‘Getting the right parameter errors with limits’. The best way to be absolutely sure of the errors is to use ‘’independent’’ calculations and compare them, or compare the calcu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:221949,error,errors,221949,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"cal and financial industries, many people are using ROOT. We estimate the current user base to be around several thousand people. In 1997, Eric Raymond analysed in his paper “The Cathedral and the Bazaar” the development method that makes Linux such a success. The essence of that method is: “release early, release often and listen to your customers”. This is precisely how ROOT is being developed. Over the last five years, many of our “customers” became co-developers. Here we would like to thank our main co-developers and contributors:; Masaharu Goto wrote the C++ interpreter CINT that was an essential part of ROOT before ROOT 6. Despite being 8 time zones ahead of us, we have the feeling he has been sitting in the room next door since 1995.; Andrei and Mihaela Gheata (Alice collaboration) are co-authors of the ROOT geometry classes and Virtual Monte-Carlo. They have been working with the ROOT team since 2000.; Olivier Couet, who after a successful development and maintenance of PAW, has joined the ROOT team in 2000 and has been working on the graphics sub-system.; Ilka Antcheva has been working on the Graphical User Interface classes. She is also responsible for this latest edition of the Users Guide with a better style, improved index and several new chapters (since 2002).; Bertrand Bellenot has been developing and maintaining the Win32GDK version of ROOT. Bertrand has also many other contributions like the nice RootShower example (since 2001).; Valeriy Onoutchin has been working on several ROOT packages, in particular the graphics sub-system for Windows and the GUI Builder (since 2000).; Gerri Ganis has been working on the authentication procedures to be used by the root daemons and the PROOF system (since 2002).; Maarten Ballintijn (MIT) is one of the main developers of the PROOF sub-system (since 1995).; Valeri Fine (now at BNL) ported ROOT to Windows and contributed largely to the 3-D graphics. He is currently working on the Qt layer of ROOT (since 1995).; Victo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:3362,mainten,maintenance,3362,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['mainten'],['maintenance']
Availability,"cal downward lines at end of curve to ensure proper closure; FillColor(Int_t color) -- Select fill color by ROOT color code. Range(const char* name) -- Only draw curve in range defined by given name. Range(double lo, double hi) -- Only draw curve in specified range. VLines() -- Add vertical lines to y=0 at end points of curve. Precision(Double_t eps) -- Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; will result in more and more densely spaced curve points. Invisible(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(). VisualizeError(const RooFitResult& fitres, Double_t Z=1, Bool_t linearMethod=kTRUE); -- Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, Double_t Z=1, Bool_t linearMethod=kTRUE) ;; -- Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma'. Details on error band visualization. By default (linMethod=kTRUE) a linearized error is shown which is calculated as follows; T; error(x) = Z* F_a(x) * Corr(a,a') F_a'(x). where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2, with f(x) the plotted curve and 'da' taken from the fit result; Corr(a,a') = the correlation matrix from the fit result; Z = requested significance 'Z sigma band'. The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Alternatively (linMethod=kFALSE), a more robust error is calculated using a sampling method. In this method a number of curves; is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; for each valye ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:48427,error,error,48427,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['error'],['error']
Availability,"cal uncertainties of the yields determined by the fit, and if, in addition, they are asymptotically correct, the error bars should be handled with care for low statistics and/or for too fine binning. This is because the error bars do not incorporate two known properties of the PDFs: PDFs are positive definite and can be non-zero in a given x-bin, even if in the particular data sample at hand, no event is observed in this bin. The latter limitation is not specific to \(\hbox {$_s$}{\cal P}lots\) , rather it is always present when one is willing to infer the PDF at the origin of an histogram, when, for some bins, the number of entries does not guaranty the applicability of the Gaussian regime. In such situations, a satisfactory practice is to attach allowed ranges to the histogram to indicate the upper and lower limits of the PDF value which are consistent with the actual observation, at a given confidence level. Figure 3 ; The \(\hbox {$_s$}{\cal P}lots\) (signal on top, background on bottom) obtained for \({m_{\rm ES}}\) are represented as dots with error bars. They are obtained from a fit using only information from \(\Delta E\) and \({\cal F}\); Choosing \({m_{\rm ES}}\) and \(\Delta E\) as discriminating variables to determine \(N_1\) and \(N_2\) through a maximum Likelihood fit, one builds, for the control variable \({\cal F}\) which is unknown to the fit, the two \(\hbox {$_s$}{\cal P}lots\) for signal and background shown in Fig. 4. In the \(\hbox{$_s$}{\cal P}lot\) for signal one observes that error bars are the largest in the \(x\) regions where the background is the largest. Figure 4 ; The \(\hbox {$_s$}{\cal P}lots\) (signal on top, background on bottom) obtained for \({\cal F}\) are represented as dots with error bars. They are obtained from a fit using only information from \({m_{\rm ES}}\) and \(\Delta E\); The results above can be obtained by running the tutorial TestSPlot.C ; Definition at line 21 of file TSPlot.h. Public Member Functions;  TSPlot (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:10472,error,error,10472,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['error'],['error']
Availability,"cal.return=TRUE)"");; 72 //int ibool = r.ParseEval(""optimxloaded"").ToScalar<Int_t>();; 73 int ibool = r.Eval(""optimxloaded"");; 74 if (ibool==1) optimxloaded=kTRUE;; 75 ; 76 //string for the command to be processed in R; 77 TString cmd;; 78 ; 79 //optimx is available and loaded; 80 if (optimxloaded==kTRUE) {; 81 if (!gGradFunction) { ; 82 // not using gradient function; 83 cmd = TString::Format(""result <- optimx( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 84 }; 85 else { ; 86 // using user provided gradient ; 87 cmd = TString::Format(""result <- optimx( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 88 ; 89 }; 90 } ; 91 ; 92 //optimx is not available; 93 else { ; 94 if (!gGradFunction) { ; 95 // not using gradient function; 96 cmd = TString::Format(""result <- optim( initialparams, minfunction,method='%s',control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 97 }; 98 else { ; 99 // using user provided gradient ; 100 cmd = TString::Format(""result <- optim( initialparams, minfunction,mingradfunction, method='%s', control = list(ndeps=stepsizes,maxit=%d,trace=%d,abstol=%e),hessian=TRUE)"",fMethod.c_str(),MaxIterations(),PrintLevel(),Tolerance());; 101 }; 102 }; 103 //execute the minimization in R ; 104 std::cout << ""Calling R with command "" << cmd << std::endl; ; 105 r.Execute(cmd.Data());; 106 ; 107 //results with optimx; 108 if (optimxloaded){; 109 //get result from R; 110 r.Execute(""par<-coef(result)"");; 111 //get hessian matrix (in list form); 112 r.Execute(""hess<-attr(result,\""details\"")[,\""nhatend\""]"");; 113 //convert hess to a matrix; 114 r.Execute(""hess<-sapply(hess,function(x) x)"");; 115 //convert to square matrix;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RMinimizer_8cxx_source.html:3452,avail,available,3452,doc/master/RMinimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html,1,['avail'],['available']
Availability,"calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned mean (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats.; Return mean value of this histogram along the X axis. ; Definition at line 7535 of file TH1.cxx. ◆ GetMeanError(). Double_t TH1::GetMeanError ; (; Int_t ; axis = 1); const. virtual . Return standard error of mean of this histogram along the X axis. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; Also note, that although the definition of standard error doesn't include the assumption of normality, many uses of this feature implicitly assume it.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned value is the (unbinned) one calculated at fill time. If a range has been set, however, the value is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned value (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 7575 of file TH1.cxx. ◆ GetMinimum(). Double_t TH1::GetMinimum ; (; Double_t ; minval = -FLT_MAX); const. virtual . Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ; This happens, for example, when the histogram is drawn and the y or z axi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:162788,error,error,162788,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"calculated value of background a0 parameter; Double_tfA0Errerror value of background a0 parameter; Double_tfA0Initinitial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfAlphaconvergence coefficient, input parameter, it should be positive number and <=1, for details see references; Int_tfAlphaOptimoptimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; Double_t*fAmpCalc[fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters; Double_t*fAmpCalcX1[fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters; Double_t*fAmpCalcY1[fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters; Double_t*fAmpErr[fNPeaks] array of amplitudes errors of 2D peaks, output parameters; Double_t*fAmpErrX1[fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters; Double_t*fAmpErrY1[fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters; Double_t*fAmpInit[fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters; Double_t*fAmpInitX1[fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters; Double_t*fAmpInitY1[fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters; Double_tfAxCalccalculated value of background ax parameter; Double_tfAxErrerror value of background ax parameter; Double_tfAxInitinitial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfAyCalccalculated value of background ay parameter; Double_tfAyErrerror value of background ay parameter ; Double_tfAyInitinitial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfBxCalccalculated value of b parameter for 1D ridges in x direction; Double_tfBxErrerror value of b parameter for 1D ridges in x direction; Double_tfBxInitinitial value of b parameter for 1D rid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:13265,error,errors,13265,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,4,['error'],['errors']
Availability,"calculated value of background a0 parameter; Double_tfA0Errerror value of background a0 parameter; Double_tfA0Initinitial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfAlphaconvergence coefficient, input parameter, it should be positive number and <=1, for details see references; Int_tfAlphaOptimoptimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; Double_t*fAmpCalc[fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters; Double_t*fAmpCalcX1[fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters; Double_t*fAmpCalcY1[fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters; Double_t*fAmpErr[fNPeaks] array of amplitudes errors of 2D peaks, output parameters; Double_t*fAmpErrX1[fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters; Double_t*fAmpErrY1[fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters; Double_t*fAmpInit[fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters; Double_t*fAmpInitX1[fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters; Double_t*fAmpInitY1[fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters; Double_tfAxCalccalculated value of background ax parameter; Double_tfAxErrerror value of background ax parameter; Double_tfAxInitinitial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfAyCalccalculated value of background ay parameter; Double_tfAyErrerror value of background ay parameter; Double_tfAyInitinitial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfBxCalccalculated value of b parameter for 1D ridges in x direction; Double_tfBxErrerror value of b parameter for 1D ridges in x direction; Double_tfBxInitinitial value of b parameter for 1D ridg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Fit.html:14314,error,errors,14314,root/html602/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Fit.html,2,['error'],['errors']
Availability,"calculated values of amplitudes of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitudes errors of 2D peaks, output parameters ;  ; Double_t * fAmpErrX1;  [fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters ;  ; Double_t * fAmpErrY1;  [fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters ;  ; Double_t * fAmpInitX1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters ;  ; Double_t * fAmpInitY1;  [fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters ;  ; Double_t fAxCalc;  calculated value of background ax parameter ;  ; Double_t fAxErr;  error value of background ax parameter ;  ; Double_t fAxInit;  initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fAyCalc;  calculated value of background ay parameter ;  ; Double_t fAyErr;  error value of background ay parameter ;  ; Double_t fAyInit;  initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:24864,error,error,24864,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,3,['error'],['error']
Availability,"call failed -2 = low level bind() call failed -3 = low level listen() call failed Every valid server socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 139 of file TServerSocket.cxx. ◆ TServerSocket() [4/4]. TServerSocket::TServerSocket ; (; const char * ; service, . Bool_t ; reuse = kFALSE, . Int_t ; backlog = kDefaultBacklog, . Int_t ; tcpwindowsize = -1 . ). Create a server socket object for a named service. ; Set reuse to true to force reuse of the server socket (i.e. do not wait for the time out to pass). Using backlog one can set the desirable queue length for pending connections. Use tcpwindowsize to specify the size of the receive buffer, it has to be specified here to make sure the window scale option is set (for tcpwindowsize > 65KB and for platforms supporting window scaling). Use IsValid() to check the validity of the server socket. In case server socket is not valid use GetErrorCode() to obtain the specific error value. These values are: 0 = no error (socket is valid) -1 = low level socket() call failed -2 = low level bind() call failed -3 = low level listen() call failed Every valid server socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 76 of file TServerSocket.cxx. ◆ ~TServerSocket(). TServerSocket::~TServerSocket ; (; ). virtual . Destructor: cleanup authentication stuff (if any) and close. ; Definition at line 162 of file TServerSocket.cxx. Member Function Documentation. ◆ Accept(). TSocket * TServerSocket::Accept ; (; UChar_t ; opt = 0). virtual . Accept a connection on a server socket. ; Returns a full-duplex communication TSocket object. If no pending connections are present on the queue and nonblocking mode has not been enabled with SetOption(kNoBlock,1) the call blocks until a connection is present. The returned socket must be deleted by the user.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:21386,error,error,21386,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['error'],['error']
Availability,"call failed Every valid server socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 76 of file TPServerSocket.cxx. ◆ ~TPServerSocket(). virtual TPServerSocket::~TPServerSocket ; (; ). inlinevirtual . Definition at line 47 of file TPServerSocket.h. Member Function Documentation. ◆ Accept(). TPSocket * TPServerSocket::Accept ; (; UChar_t ; Opt = kSrvNoAuth). overridevirtual . Accept a connection on a parallel server socket. ; Returns a full-duplex parallel communication TPSocket object. If no pending connections are present on the queue and nonblocking mode has not been enabled with SetOption(kNoBlock,1) the call blocks until a connection is present. The returned socket must be deleted by the user. The socket is also added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. In case of error 0 is returned and in case non-blocking I/O is enabled and no connections are available -1 is returned. ; Reimplemented from TServerSocket.; Definition at line 95 of file TPServerSocket.cxx. ◆ Class(). static TClass * TPServerSocket::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPServerSocket::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPServerSocket::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 51 of file TPServerSocket.h. ◆ DeclFileName(). static const char * TPServerSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 51 of file TPServerSocket.h. ◆ IsA(). TClass * TPServerSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 51 of file TPServerSocket.h. ◆ operator=(). void TPServerSocket::operator= ; (; const TPSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPServerSocket.html:22715,error,error,22715,doc/master/classTPServerSocket.html,https://root.cern,https://root.cern/doc/master/classTPServerSocket.html,2,"['avail', 'error']","['available', 'error']"
Availability,"called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:34671,down,down,34671,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,2,['down'],['down']
Availability,"called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns kTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). const void * DynamicCast(const TClass* base, const void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). If quiet is true, do no issue a message via Error on case; of problems, just return 0. The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:48311,down,down,48311,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['down'],['down']
Availability,"called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns kTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:36787,down,down,36787,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['down'],['down']
Availability,"cally recovered when you will connect the file; 1444/// in UPDATE mode.; 1445/// The Tree will be recovered at the status corresponding to the last AutoSave.; 1446///; 1447/// if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; 1448/// This allows another process to analyze the Tree while the Tree is being filled.; 1449///; 1450/// if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; 1451/// the current basket are closed-out and written to disk individually.; 1452///; 1453/// By default the previous header is deleted after having written the new header.; 1454/// if option contains ""Overwrite"", the previous Tree header is deleted; 1455/// before written the new header. This option is slightly faster, but; 1456/// the default option is safer in case of a problem (disk quota exceeded); 1457/// when writing the new header.; 1458///; 1459/// The function returns the number of bytes written to the file.; 1460/// if the number of bytes is null, an error has occurred while writing; 1461/// the header to the file.; 1462///; 1463/// ## How to write a Tree in one process and view it from another process; 1464///; 1465/// The following two scripts illustrate how to do this.; 1466/// The script treew.C is executed by process1, treer.C by process2; 1467///; 1468/// script treew.C:; 1469/// ~~~ {.cpp}; 1470/// void treew() {; 1471/// TFile f(""test.root"",""recreate"");; 1472/// TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; 1473/// Float_t px, py, pz;; 1474/// for ( Int_t i=0; i<10000000; i++) {; 1475/// gRandom->Rannor(px,py);; 1476/// pz = px*px + py*py;; 1477/// Float_t random = gRandom->Rndm(1);; 1478/// ntuple->Fill(px,py,pz,random,i);; 1479/// if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; 1480/// }; 1481/// }; 1482/// ~~~; 1483/// script treer.C:; 1484/// ~~~ {.cpp}; 1485/// void treer() {; 1486/// TFile f(""test.root"");; 1487/// TTree *ntuple = (TTree*)f.Get(""ntuple"");; 1488/// TCanvas c1;; 1489/// Int_t first = 0;; 149",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:54345,error,error,54345,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['error'],['error']
Availability,"canDataSet(const char* uri, const char* opt); Scans the dataset indicated by 'uri' following the 'opts' directives. The 'opts' string contains up to 4 directive fields separated by ':'. 'selection' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen | kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataSetManager.html:14877,failure,failure,14877,root/html602/TDataSetManager.html,https://root.cern,https://root.cern/root/html602/TDataSetManager.html,2,['failure'],['failure']
Availability,"canDataSet(const char* uri, const char* opt); Scans the dataset indicated by 'uri' following the 'opts' directives. The 'opts' string contains up to 4 directive fields separated by ':'. 'selection' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManager.html:13298,failure,failure,13298,root/html534/TDataSetManager.html,https://root.cern,https://root.cern/root/html534/TDataSetManager.html,1,['failure'],['failure']
Availability,canTauRhoMaxSys; kEScanTauRhoSquareAvg; kEScanTauRhoSquareAvgSys; };; enum TUnfoldSys::ESysErrMode { kSysErrModeMatrix; kSysErrModeShift; kSysErrModeRelative; };; enum TUnfold::EConstraint { kEConstraintNone; kEConstraintArea; };; enum TUnfold::ERegMode { kRegModeNone; kRegModeSize; kRegModeDerivative; kRegModeCurvature; kRegModeMixed; };; enum TUnfold::EHistMap { kHistMapOutputHoriz; kHistMapOutputVert; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*TUnfoldSys::fAoutsideInput: underflow/overflow bins; TMap*TUnfoldSys::fBgrErrScaleInInput: background sources correlated error; TMap*TUnfoldSys::fBgrErrUncorrInSqInput: uncorr error squared from bgr sources; TMap*TUnfoldSys::fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; const TUnfoldBinning*fConstInputBinsbinning scheme for the input; const TUnfoldBinning*fConstOutputBinsbinning scheme for the output; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*TUnfoldSys::fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*TUnfoldSys::fDAinRelSqInput: normalized errors from input matrix; TMap*TUnfoldSys::fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*TUnfoldSys::fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*TUnfoldSys::fDeltaSysTauResult: systematic shift from tau; Double_tTUnfoldSys::fDtauInput: error on tau; TMatrixDSparse*TUnfoldSys::fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*TUnfoldSys::fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLInput: regularisation conditions; TUnfoldBinning*fOwnedInputBinsinput binning sch,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldDensity.html:20598,error,error,20598,root/html534/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html534/TUnfoldDensity.html,2,['error'],['error']
Availability,"carefully, this function can be negative, and hence, it cannot be used as a PDF. In this case, RooFit passes an error to the minimiser, which might try to recover.; Before ROOT 6.24, RooFit always passed the highest function value that was encountered during the minimisation to the minimiser. If a parameter is far in a disallowed region, the minimiser has to blindly test various values of the parameters. It might find the correct values by chance, but often be unable to recover from bad starting values. Here, we use a model with such bad values.; Starting with ROOT 6.24, the minimiser receives more information. For example, when a PDF is negative, the magnitude of the ""undershoot"" is passed to the minimiser. The minimiser can use this to compute a gradient, which will eventually lead it out of the disallowed region. The steepness of this gradient can be chosen using RooFit::RecoverFromUndefinedRegions(double). A value of zero is equivalent to RooFit before ROOT 6.24. Positive values activate the recovery. Values between 1. and 10. were found to be a good default. If no argument is passed, RooFit uses 10.; ; #include <RooRealVar.h>; #include <RooPolynomial.h>; #include <RooPlot.h>; #include <RooDataSet.h>; #include <RooGlobalFunc.h>; #include <RooFitResult.h>; #include <RooMsgService.h>; ; #include <TCanvas.h>; #include <TLegend.h>; ; void rf612_recoverFromInvalidParameters() {; ; // Create a fit model:; // The polynomial is notoriously unstable, because it can quickly go negative.; // Since PDFs need to be positive, one often ends up with an unstable fit model.; RooRealVar x(""x"", ""x"", -15, 15);; RooRealVar a1(""a1"", ""a1"", -0.5, -10., 20.);; RooRealVar a2(""a2"", ""a2"", 0.2, -10., 20.);; RooRealVar a3(""a3"", ""a3"", 0.01);; RooPolynomial pdf(""pol3"", ""c + a1 * x + a2 * x*x + 0.01 * x*x*x"", x, RooArgSet(a1, a2, a3));; ; // Create toy data with all-positive coefficients:; std::unique_ptr<RooDataSet> data(pdf.generate(x, 10000));; ; // For plotting.; // We create pointers to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:1655,recover,recovery,1655,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,1,['recover'],['recovery']
Availability,"case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ; Definition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 81 of file TGraphErrors.h. ◆ Apply(). void TGraphErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply function to all the data points \( y = f(x,y) \). ; The error is calculated as \( ey=(f(x,y+ey)-f(x,y-ey))/2 \). This is the same as \( error(fy) = df/dy * ey \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( x \) doesn't change.; function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 396 of file TGraphErrors.cxx. ◆ ApplyX(). void TGraphErrors::ApplyX ; (; TF1 * ; f). virtual . Apply function to all the data points \( x = f(x,y) \). ; The error is calculated as \( ex=(f(x+ex,y)-f(x-ex,y))/2 \). This is the same as \( error(fx) = df/dx * ex \) for small errors.; For generic functions the symmetric errors might become non-symmetric and are averaged here. Use TGraphAsymmErrors if desired.; Error on \( y \) doesn't change. ; Definition at line 426 of file TGraphErrors.cxx. ◆ CalculateScanfFields(). Int_t TGraphErrors::CalculateScanfFields ; (; const char * ; fmt). static . Calculate scan fields. ; Definition at line 449 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:38260,error,error,38260,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,2,['error'],"['error', 'errors']"
Availability,"case of error. Int_t EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify a list of objects to be passed to the SETUP; functions via 'loadopts'; the objects must be streamable.; Returns 0 in case of success and -1 in case of error. Int_t DownloadPackage(const char* par, const char* dstdir = 0); Download a PROOF archive (PAR file) from the master package repository.; The PAR file is downloaded in the current directory or in the directory; specified by 'dstdir'. If a package with the same name already exists; at destination, a check on the MD5 sum is done and the user warned or; prompted for action, depending is the file is equal or different.; Returns 0 in case of success and -1 in case of error. Int_t UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); Upload a PROOF archive (PAR file). A PAR file is a compressed; tar file with one special additional directory, PROOF-INF; (blatantly copied from Java's jar format). It must have the extension; .par. A PAR file can be directly a binary or a source with a build; procedure. In the PROOF-INF directory there can be a build script:; BUILD.sh to be called to build the package, in case of a binary PAR; file don't specify a build script or make it a no-op. Then there is; SETUP.C which sets the right environment variables to use the package,; like LD_LIBRARY_PATH, etc.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), so triggering a full; re-build. The option if effective only for PROOF protocol > 8 .; The lab 'dirlab' (e.g. 'G0')",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:76299,error,error,76299,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['error'],['error']
Availability,"case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket&). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {return fEntryOffset;}. Int_t GetNevBuf() const; {return fNevBuf;}. Int_t GetNevBufSize() const; {return fNevBufSize;}. Int_t GetLast() const; {return fLast;}. void PrepareBasket(Long64_t ); {}. void SetBranch(TBranch* branch); { fBranch = branch; }. void SetNevBufSize(Int_t n); { fNevBufSize=n; }. void Update(Int_t newlast); { Update(newlast,newlast); }. » Author: Rene Brun 19/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBasket.h 26606 2008-12-02 20:36:09Z pcanal $ » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBasket.html:11138,error,error,11138,root/html526/TBasket.html,https://root.cern,https://root.cern/root/html526/TBasket.html,1,['error'],['error']
Availability,"case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns kTRUE on success. Int_t SetDataSetTreeName(const char* dataset, const char* treename); Set/Change the name of the default tree. The tree name may contain; subdir specification in the form ""subdir/name"".; Returns 0 on success, -1 otherwise. TMap * GetDataSets(const char* uri = """", const char* optStr = """"); Lists all datasets that match given uri.; The 'optStr' can contain a comma-separated list of servers for which the; information is wanted. If ':lite:' (case insensitive) is specified in 'optStr'; only the global information in the TFileCollection is retrieved; useful to only; get the list of available datasets. void ShowDataSets(const char* uri = """", const char* optStr = """"); Shows datasets in locations that match the uri.; By default shows the user's datasets and global ones. Bool_t ExistsDataSet(const char* dataset); Returns kTRUE if 'dataset' exists, kFALSE otherwise. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). TFileCollection * GetDataSet(const char* dataset, const char* optStr = """"); Get a list of TFileInfo objects describing the files of the specified; dataset.; To get the short version (containing only the global meta information); specify optStr = ""S:"" or optStr = ""short:"".; To get the sub-dataset of files located on a given server(s) specify; the list of servers (comma-separated) in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:82024,avail,available,82024,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['avail'],['available']
Availability,"cases when the arrays are zero; 623 // (like in a case of a graph); 624 else if (type == BinData::kValueError) {; 625 double errorY = gr->GetErrorY(i);; 626 // should consider error = 0 as 1 ? Decide to skip points with zero errors; 627 // in case want to keep points with error = 0 as errrors=1 need to set the option UseEmpty; 628 if (!HFitInterface::AdjustError(fitOpt,errorY) ) continue;; 629 dv.Add( gx[i], gy[i], errorY );; 630 ; 631#ifdef DEBUG; 632 std::cout << ""Point "" << i << "" "" << gx[i] << "" "" << gy[i] << "" "" << errorY << std::endl;; 633#endif; 634 ; 635 ; 636 }; 637 else { // case use error in x or asym errors; 638 double errorX = 0;; 639 if (fitOpt.fCoordErrors); 640 // shoulkd take combined average (sqrt(0.5(e1^2+e2^2)) or math average ?; 641 // gr->GetErrorX(i) returns combined average; 642 // use math average for same behaviour as before; 643 errorX = std::max( 0.5 * ( gr->GetErrorXlow(i) + gr->GetErrorXhigh(i) ) , 0. ) ;; 644 ; 645 ; 646 // adjust error in y according to option; 647 double errorY = std::max(gr->GetErrorY(i), 0.);; 648 // we do not check the return value since we check later if error in X and Y is zero for skipping the point; 649 HFitInterface::AdjustError(fitOpt, errorY);; 650 ; 651 // skip points with total error = 0; 652 if ( errorX <=0 && errorY <= 0 ) continue;; 653 ; 654 ; 655 if (type == BinData::kAsymError) {; 656 // asymmetric errors; 657 dv.Add( gx[i], gy[i], errorX, gr->GetErrorYlow(i), gr->GetErrorYhigh(i) );; 658 }; 659 else {; 660 // case symmetric Y errors; 661 dv.Add( gx[i], gy[i], errorX, errorY );; 662 }; 663 }; 664 ; 665 }; 666 ; 667#ifdef DEBUG; 668 std::cout << ""TGraphFitInterface::FillData Graph FitData size is "" << dv.Size() << std::endl;; 669#endif; 670 ; 671}; 672 ; 673void FillData(SparseData & dv, const TH1 * h1, TF1 * /*func*/); 674{; 675 const int dim = h1->GetDimension();; 676 std::vector<double> min(dim);; 677 std::vector<double> max(dim);; 678 ; 679 int ncells = h1->GetNcells();; 680 for ( int i = 0; i < n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:20790,error,error,20790,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,2,['error'],"['error', 'errorY']"
Availability,"cast<TFormula*>(this);; 3435 thisFormula->ReInitializeEvalMethod();; 3436 }; 3437 if (!fClingInitialized) {; 3438 Error(""DoEval"", ""Formula has error and it is not properly initialized "");; 3439 ROOT::Double_v res = TMath::QuietNaN();; 3440 return res;; 3441 }; 3442 }; 3443 ; 3444 ROOT::Double_v result = 0;; 3445 void *args[2];; 3446 ; 3447 ROOT::Double_v *vars = const_cast<ROOT::Double_v *>(x);; 3448 args[0] = &vars;; 3449 if (fNpar <= 0) {; 3450 (*fFuncPtr)(0, 1, args, &result);; 3451 }else {; 3452 double *pars = (params) ? const_cast<double *>(params) : const_cast<double *>(fClingParameters.data());; 3453 args[1] = &pars;; 3454 (*fFuncPtr)(0, 2, args, &result);; 3455 }; 3456 return result;; 3457}; 3458#endif // R__HAS_VECCORE; 3459 ; 3460 ; 3461//////////////////////////////////////////////////////////////////////////////; 3462/// Re-initialize eval method; 3463///; 3464/// This function is called by DoEval and DoEvalVector in case of a previous failure; 3465/// or in case of reading from a file; 3466////////////////////////////////////////////////////////////////////////////////; 3467void TFormula::ReInitializeEvalMethod() {; 3468 ; 3469 ; 3470 if (TestBit(TFormula::kLambda) ) {; 3471 Info(""ReInitializeEvalMethod"",""compile now lambda expression function using Cling"");; 3472 InitLambdaExpression(fFormula);; 3473 fLazyInitialization = false;; 3474 return;; 3475 }; 3476 fMethod.reset();; 3477 ; 3478 if (!fLazyInitialization) Warning(""ReInitializeEvalMethod"", ""Formula is NOT properly initialized - try calling again TFormula::PrepareEvalMethod"");; 3479 //else Info(""ReInitializeEvalMethod"", ""Compile now the formula expression using Cling"");; 3480 ; 3481 // check first if formula exists in the global map; 3482 {; 3483 ; 3484 R__LOCKGUARD(gROOTMutex);; 3485 ; 3486 // std::cout << ""gClingFunctions list"" << std::endl;; 3487 // for (auto thing : gClingFunctions); 3488 // std::cout << ""gClingFunctions : "" << thing.first << std::endl;; 3489 ; 3490 auto funcit = gClingFunctions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:131733,failure,failure,131733,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['failure'],['failure']
Availability,"cat(gRootclingOptions));  ; static llvm::cl::opt< bool > gOptSplit (""split"", llvm::cl::desc(""Split the dictionary into two parts: one containing the IO (ClassDef)\; information and another the interactivity support.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::list< std::string > gOptSysIncludePaths (""isystem"", llvm::cl::ZeroOrMore, llvm::cl::desc(""Specify a system include path.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< bool > gOptSystemModuleByproducts (""mSystemByproducts"", llvm::cl::Hidden, llvm::cl::desc(""Allow implicit build of system modules.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< bool > gOptUmbrellaInput (""umbrellaHeader"", llvm::cl::desc(""A single header including all headers instead of specifying them on the command line.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< VerboseLevel > gOptVerboseLevel (llvm::cl::desc(""Choose verbosity level:""), llvm::cl::values(clEnumVal(v, ""Show errors.""), clEnumVal(v0, ""Show only fatal errors.""), clEnumVal(v1, ""Show errors (the same as -v).""), clEnumVal(v2, ""Show warnings (default).""), clEnumVal(v3, ""Show notes.""), clEnumVal(v4, ""Show information."")), llvm::cl::init(v2), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::list< std::string > gOptWDiags (""W"", llvm::cl::Prefix, llvm::cl::ZeroOrMore, llvm::cl::desc(""Specify compiler diagnostics options.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< bool > gOptWriteEmptyRootPCM (""writeEmptyRootPCM"", llvm::cl::Hidden, llvm::cl::desc(""Does not include the header files as it assumes they exist in the pch.""), llvm::cl::cat(gRootclingOptions));  ; const std::string gPathSeparator (ROOT::TMetaUtils::GetPathSeparator());  ; llvm::StringRef GrabIndex (const cling::Interpreter &interp, const clang::FieldDecl &member, int printError);  GrabIndex returns a static string (so use it or copy it immediately, do not call GrabIndex twice in the same expression) containing the size of the array data membe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx.html:19349,error,errors,19349,doc/master/rootcling__impl_8cxx.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx.html,1,['error'],['errors']
Availability,"catedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::PyMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::vector< size_t > GetDataFromList (PyObject *listObject);  Utility function which retrieves and returns the values of the List object as a vector of size_t. ;  ; static std::vector< size_t > GetDataFromTuple (PyObject *tupleObject);  Utility function which retrieves and returns the values of the Tuple object as a vector of size_t. ;  ; static PyObject * GetValueFromDict (PyObject *dict, const char *key);  Utility function which checks if a given key is present in a Python dictionary object and returns the associated value or throws runtime error. ;  ; static void PyFinalize ();  ; static void PyInitialize ();  Initialize Python interpreter. ;  ; static int PyIsInitialized ();  Check Python interpreter initialization status. ;  ; static void PyRunString (TString code, PyObject *globalNS, PyObject *localNS);  Execute Python code from string. ;  ; static const char * PyStringAsString (PyObject *string);  Returns const char* from Python string in PyObject. ;  ; static void Serialize (TString file, PyObject *classifier);  Serialize Python object. ;  ; static Int_t UnSerialize (TString file, PyObject **obj);  Unserialize Python object. ;  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:27801,error,error,27801,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,3,['error'],['error']
Availability,"cation method can be attempted for the client. void MergeHostAuthList(TList* Std, TList* New, Option_t* Opt = """"); Tool for updating fgAuthInfo or fgProofAuthInfo; 'nin' contains list of last input information through (re)reading; of a rootauthrc-alike file. 'nin' info has priority.; 'std' is cleaned from inactive members.; 'nin' members used to update existing members in 'std' are; removed from 'nin', do that they do not leak; opt = ""P"" for proofauthinfo. void RemoveSecContext(TRootSecContext* ctx); Tool for removing SecContext ctx from THostAuth listed in; fgAuthInfo or fgProofAuthInfo. Int_t ProofAuthSetup(); Authentication related stuff setup in TProofServ.; This is the place where the buffer send by the client / master is; decoded. It contains also password information, if the case requires.; Return 0 on success, -1 on failure. Int_t ProofAuthSetup(TSocket* sock, Bool_t client); Setup of authetication related stuff in PROOF run after a; successful authentication.; Return 0 on success, -1 on failure. Int_t GetClientProtocol(); Static method returning supported client protocol. Bool_t GetPwHash() const; { return fPwHash; }. Int_t GetRSAKey() const; { return fRSAKey; }. ESecurity GetSecurity() const; { return fSecurity; }. Bool_t GetSRPPwd() const; { return fSRPPwd; }. Int_t GetVersion() const; { return fVersion; }. TAuthenticate(TSocket* sock, const char* remote, const char* proto, const char* user = """"); { }. THostAuth * GetHostAuth() const; { return fHostAuth; }. const char * GetProtocol() const; { return fProtocol; }. const char * GetRemoteHost() const; { return fRemote; }. Int_t GetRSAKeyType() const; { return fRSAKey; }. TRootSecContext * GetSecContext() const; { return fSecContext; }. TSocket * GetSocket() const; { return fSocket; }. const char * GetUser() const; { return fUser; }. Int_t HasTimedOut() const; { return fTimeOut; }. void SetRSAKeyType(Int_t key); { fRSAKey = key; }. void SetSecContext(TRootSecContext* ctx); { fSecContext = ctx; }. » Author: Fon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:22222,failure,failure,22222,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['failure'],['failure']
Availability,"cation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:2304,recover,recovered,2304,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['recover'],['recovered']
Availability,"cation, const char *msgfmt,...);  Use this function for informational messages. ;  ; void MayNotUse (const char *method);  This function can be used in classes that should override a certain function, but in the inherited class the function makes no sense. ;  ; void ROOT::Internal::MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void Obsolete (const char *function, const char *asOfVers, const char *removedFromVers);  Use this function to declare a function obsolete. ;  ; ErrorHandlerFunc_t SetErrorHandler (ErrorHandlerFunc_t newhandler);  Set an errorhandler function. Returns the old handler. ;  ; ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SysError (const char *location, const char *msgfmt,...);  Use this function in case a system (OS or GUI) related error occurred. ;  ; void Warning (const char *location, const char *msgfmt,...);  Use this function in warning situations. ;  . Variables; Int_t gErrorAbortLevel;  ; Int_t gErrorIgnoreLevel;  Error handling routines. ;  ; Bool_t gPrintViaErrorHandler;  ; const char * kAssertMsg;  ; constexpr Int_t kBreak = 4000;  ; const char * kCheckMsg;  ; constexpr Int_t kError = 3000;  ; constexpr Int_t kFatal = 6000;  ; constexpr Int_t kInfo = 1000;  ; constexpr Int_t kPrint = 0;  ; constexpr Int_t kSysError = 5000;  ; constexpr Int_t kUnset = -1;  ; constexpr Int_t kWarning = 2000;  . Macro Definition Documentation. ◆ R__ASSERT. #define R__ASSERT; (;  ; e). Value: do { \; if (R__unlikely(!(e))) \; ::Fatal("""", kAssertMsg, _QUOTE_(e), __LINE__, __FILE__); \; } while (false); _QUOTE_#define _QUOTE_(name)Definition RConfig.hxx:446; R__unlikely#define R__unlikely(expr)Definition RConfig.hxx:586; e#define e(i)Definition RSha256.hxx:103; kAssertMsgconst char * kAssertMsgDefinition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:3191,error,error,3191,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['error']
Availability,"cation::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofServ.html:18140,alive,alive,18140,root/html534/TXProofServ.html,https://root.cern,https://root.cern/root/html534/TXProofServ.html,1,['alive'],['alive']
Availability,"cationImp::Hidevirtual void Hide()Definition TApplicationImp.h:41; TApplicationImp::Initvirtual void Init()Definition TApplicationImp.h:44; TApplicationImp::Iconifyvirtual void Iconify()Definition TApplicationImp.h:42; TApplicationImp::Lowervirtual void Lower()Definition TApplicationImp.h:47; TApplicationImp::IsCmdThreadvirtual Bool_t IsCmdThread()Definition TApplicationImp.h:43; TApplicationImp::Openvirtual void Open()Definition TApplicationImp.h:45; TApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop...Definition TApplication.h:39; TApplication::ExitOnExceptionEExitOnException ExitOnException(EExitOnException opt=kExit)Set the exit on exception option.Definition TApplication.cxx:614; TApplication::KeyPressedvirtual void KeyPressed(Int_t key)Emit signal when console keyboard key was pressed.Definition TApplication.cxx:1949; TApplication::ProcessLinevirtual Longptr_t ProcessLine(const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr)Process a single command line, either a C++ statement or an interpreter command starting with a ""....Definition TApplication.cxx:1565; TApplication::fgApplicationsstatic TList * fgApplicationsDefinition TApplication.h:82; TApplication::Closestatic void Close(TApplication *app)Static function used to close a remote application.Definition TApplication.cxx:2070; TApplication::HandleTermInputvirtual Bool_t HandleTermInput()Definition TApplication.h:116; TApplication::IsRunningBool_t IsRunning() constDefinition TApplication.h:152; TApplication::SetEchoModevirtual void SetEchoMode(Bool_t mode)Set console echo mode:Definition TApplication.cxx:1968; TApplication::InputFilesTObjArray * InputFiles() constDefinition TApplication.h:146; TApplication::Helpvirtual void Help(const char *line)The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxy...Definition TApplication.cxx:1208; TApplication::LineProcessedvirtual void LineProcessed(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:10564,error,error,10564,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['error'],['error']
Availability,"cations; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TProofServ. TXHandler. ←; TXProofServ. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofServ.html:19046,alive,alive,19046,root/html602/TXProofServ.html,https://root.cern,https://root.cern/root/html602/TXProofServ.html,2,['alive'],['alive']
Availability,"catter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin J. 2; H(J) = sum Y E(J) = sum Y; l(J) = sum l L(J) = sum l; h(J) = H(J)/L(J) mean of Y,; s(J) = sqrt(E(J)/L(J)- h(J)**2) standard deviation of Y (e.g. RMS); e(J) = s(J)/sqrt(L(J)) standard error on the mean. The displayed bin content for bin J of a TProfile is always h(J). The corresponding bin error is by default; e(J). In case the option ""s"" is used (in the constructor or by calling TProfile::BuildOptions); the displayed error is s(J). In the special case where s(J) is zero (eg, case of 1 entry only in one bin); the bin error e(J) is computed from the average of the s(J) for all bins if; the static function TProfile::Approximate has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for other error options and more detailed explanations. Example of a profile histogram with its graphics output; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }. /*; ; */. Function Members (Methods); public:. TProfile(); TProfile(const TProfile& profile); TProfile(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Option_t* option = """"); TProfile(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:1685,error,error,1685,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,1,['error'],['error']
Availability,"catter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin J. 2; H(J) = sum Y E(J) = sum Y; l(J) = sum l L(J) = sum l; h(J) = H(J)/L(J) mean of Y,; s(J) = sqrt(E(J)/L(J)- h(J)**2) standard deviation of Y (e.g. RMS); e(J) = s(J)/sqrt(L(J)) standard error on the mean. The displayed bin content for bin J of a TProfile is always h(J). The corresponding bin error is by default; e(J). In case the option ""s"" is used (in the constructor or by calling TProfile::BuildOptions); the displayed error is s(J). In the special case where s(J) is zero (eg, case of 1 entry only in one bin); the bin error e(J) is computed from the average of the s(J) for all bins if; the static function TProfile::Approximate has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for other error options and more detailed explanations. Example of a profile histogram with its graphics output; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }. /*; ; */. Function Members (Methods); public:. virtual~TProfile(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tAdd(const TH1* h1, Double_t c1 = 1); virtual Bool_tAdd(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual Bool_tAdd(const TH1* h1, const TH1* h2,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile.html:1685,error,error,1685,root/html602/TProfile.html,https://root.cern,https://root.cern/root/html602/TProfile.html,2,['error'],['error']
Availability,"causes \({\displaystyle F'}\) to increase by the amount FCNBase::up(), where \({\displaystyle F'}\) is the minimum of \(\mbox{FCN}\) with respect to all other free parameters, and FCNBase::up() is the return value of the error definition specified by the user (default = 1.).; The algorithm for finding the positive and negative \(\mbox{MINOS}\) errors for parameter \(\mbox{n}\) consists of varying parameter \(\mbox{n}\), each time minimizing \(\mbox{FCN}\) with respect to all the other \(\mbox{npar - 1}\) variable parameters, to find numerically the two values of parameter \(\mbox{n}\) for which the minimum of \(\mbox{FCN}\) takes on the values \(\displaystyle F_{\mathrm{min}} + \mbox{up}\), where \(\displaystyle F_{\mathrm{min}}\) is the minimum of \(\mbox{FCN}\) with respect to all \(\mbox{npar}\) parameters. In order to make the procedure as fast as possible, \(\mbox{MINOS}\) uses the error matrix to predict the values of all parameters at the various sub-minima which it will have to find in the course of the calculation, and in the limit that the problem is nearly linear, the predictions of \(\mbox{MINOS}\) will be nearly exact, requiring very few iterations. On the other hand, when the problem is very non-linear (i.e., \(\mbox{FCN}\) is far from a quadratic function of its parameters), is precisely the situation when \(\mbox{MINOS}\) is needed in order to indicate the correct parameter errors.; 2.5.4 \(\mbox{CONTOURS}\) plotting; M offers a procedure for finding \(\mbox{FCN}\) \(\mbox{CONTOURS}\) (provided via the class MnContours, see [api:contours]).; The contour calculated by MnContours::operator() is dynamic, in the sense that it represents the minimum of \(\mbox{FCN}\) with respect to all the other \(\mbox{npar - 2}\) parameters (if any). In statistical terms, this means that MnContours takes account of the correlations between the two parameters being plotted, and all the other variable parameters, using a procedure analogous to that of \(\mbox{MINOS}\). (I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:24559,error,error,24559,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"cayChannel - a decay channel for a radionuclide; TGeoElementTable - table of elements. Function Members (Methods); public:. virtual~TGeoElementRN(); Double_tTGeoElement::A() const; voidTObject::AbstractMethod(const char* method) const; voidAddDecay(TGeoDecayChannel* dc); voidAddDecay(Int_t decay, Int_t diso, Double_t branchingRatio, Double_t qValue); voidTGeoElement::AddIsotope(TGeoIsotope* isotope, Double_t relativeAbundance); voidAddRatio(TGeoBatemanSol& ratio); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAtomicNo() const; virtual voidTObject::Browse(TBrowser* b); Bool_tCheckDecays() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tDecayResult(TGeoDecayChannel* dc) const; TObjArray*Decays() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Int_tENDF(Int_t a, Int_t z, Int_t iso); virtual Int_tENDFCode() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFillPopulation(TObjArray* population, Double_t precision = 0.001, Double_t factor = 1.); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoElementRN.html:1981,error,error,1981,root/html602/TGeoElementRN.html,https://root.cern,https://root.cern/root/html602/TGeoElementRN.html,4,['error'],['error']
Availability,"cayer&); virtual~TPythia8Decayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecay(Int_t pdg, TLorentzVector* p); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPartialBranchingRatio(Int_t ipart); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tImpo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPythia8Decayer.html:1410,error,error,1410,root/html528/TPythia8Decayer.html,https://root.cern,https://root.cern/root/html528/TPythia8Decayer.html,4,['error'],['error']
Availability,"ccess (1) or error (-1).; 5940 * Forward both to the caller. */; 5941 if ((check_pollerr); 5942 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5943 == POLLERR)) {; 5944 /* One and only file descriptor returned error */; 5945 return -1;; 5946 }; 5947 return result;; 5948 }; 5949 ; 5950 /* Poll returned timeout (0). */; 5951 if (milliseconds > 0) {; 5952 milliseconds -= ms_now;; 5953 }; 5954 ; 5955 } while (milliseconds > 0);; 5956 ; 5957 /* timeout: return 0 */; 5958 return 0;; 5959}; 5960 ; 5961 ; 5962/* Write data to the IO channel - opened file descriptor, socket or SSL; 5963 * descriptor.; 5964 * Return value:; 5965 * >=0 .. number of bytes successfully written; 5966 * -1 .. timeout; 5967 * -2 .. error; 5968 */; 5969static int; 5970push_inner(struct mg_context *ctx,; 5971 FILE *fp,; 5972 SOCKET sock,; 5973 SSL *ssl,; 5974 const char *buf,; 5975 int len,; 5976 double timeout); 5977{; 5978 uint64_t start = 0, now = 0, timeout_ns = 0;; 5979 int n, err;; 5980 unsigned ms_wait = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5981 ; 5982#if defined(_WIN32); 5983 typedef int len_t;; 5984#else; 5985 typedef size_t len_t;; 5986#endif; 5987 ; 5988 if (timeout > 0) {; 5989 now = mg_get_current_time_ns();; 5990 start = now;; 5991 timeout_ns = (uint64_t)(timeout * 1.0E9);; 5992 }; 5993 ; 5994 if (ctx == NULL) {; 5995 return -2;; 5996 }; 5997 ; 5998#if defined(NO_SSL) && !defined(USE_MBEDTLS); 5999 if (ssl) {; 6000 return -2;; 6001 }; 6002#endif; 6003 ; 6004 /* Try to read until it succeeds, fails, times out, or the server; 6005 * shuts down. */; 6006 for (;;) {; 6007 ; 6008#if defined(USE_MBEDTLS); 6009 if (ssl != NULL) {; 6010 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6011 if (n <= 0) {; 6012 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6013 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6014 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6015 n = 0;; 6016 } else {; 6017 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6018 return -2;; 6019 }; 6020 } else {; 602",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:175077,error,error,175077,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ccess (1) or error (-1).; 5941 * Forward both to the caller. */; 5942 if ((check_pollerr); 5943 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5944 == POLLERR)) {; 5945 /* One and only file descriptor returned error */; 5946 return -1;; 5947 }; 5948 return result;; 5949 }; 5950 ; 5951 /* Poll returned timeout (0). */; 5952 if (milliseconds > 0) {; 5953 milliseconds -= ms_now;; 5954 }; 5955 ; 5956 } while (milliseconds > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel - opened file descriptor, socket or SSL; 5964 * descriptor.; 5965 * Return value:; 5966 * >=0 .. number of bytes successfully written; 5967 * -1 .. timeout; 5968 * -2 .. error; 5969 */; 5970static int; 5971push_inner(struct mg_context *ctx,; 5972 FILE *fp,; 5973 SOCKET sock,; 5974 SSL *ssl,; 5975 const char *buf,; 5976 int len,; 5977 double timeout); 5978{; 5979 uint64_t start = 0, now = 0, timeout_ns = 0;; 5980 int n, err;; 5981 unsigned ms_wait = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5982 ; 5983#if defined(_WIN32); 5984 typedef int len_t;; 5985#else; 5986 typedef size_t len_t;; 5987#endif; 5988 ; 5989 if (timeout > 0) {; 5990 now = mg_get_current_time_ns();; 5991 start = now;; 5992 timeout_ns = (uint64_t)(timeout * 1.0E9);; 5993 }; 5994 ; 5995 if (ctx == NULL) {; 5996 return -2;; 5997 }; 5998 ; 5999#if defined(NO_SSL) && !defined(USE_MBEDTLS); 6000 if (ssl) {; 6001 return -2;; 6002 }; 6003#endif; 6004 ; 6005 /* Try to read until it succeeds, fails, times out, or the server; 6006 * shuts down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 602",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:175109,error,error,175109,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ccess to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; 1.6.4 $ROOTSYS/test; The test directory contains a set of examples example that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility. The list of source files is described in chapter “The Tutorials and Tests”.; The $ROOTSYS/test directory is a gold mine of ROOT-wisdom nuggets, and we encourage you to explore and exploit it. We recommend the new users to read the chapter “Getting Started”. The chapter “The Tutorials and Tests” has instructions on how to build all the programs and it goes over the examples Event and stress.; 1.6.5 $ROOTSYS/include; The include directory contains all header files. It is especially important because the header files contain the class definitions.; 1.6.6 $ROOTSYS/<library>; The directories we explored above are available when downloading the binaries. When downloading the source you also get a directory for each library with the corresponding header and source files, located in the inc and src subdirectories. To see what classes are in a library, you can check the <library>/inc directory for the list of class definitions. For example, the physics library libPhysics.so contains these class definitions:; > ls -m $ROOTSYS/math/physics/inc/; LinkDef.h, TFeldmanCousins.h, TGenPhaseSpace.h, TLorentzRotation.h,; TLorentzVector.h, TQuaternion.h, TRobustEstimator.h, TRolke.h,; TRotation.h, TVector2.h, TVector3.h; 1.7 How to Find More Information; website The ROOT web site has up to date documentation. The ROOT source code automatically generates this documentation, so each class is explicitly documented on its own web page, which is always up to date with the latest official release of ROOT.; The ROOT Reference Guide web pages can be found at class index reference guide https://root.cern/doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:27682,avail,available,27682,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['avail', 'down']","['available', 'downloading']"
Availability,"ccurately; calculated from UT1. If fSec and fNanoSec are in UTC (which they are by; default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; The conversion to sidereal time used here is given by; Aoki et. al. Astron. Astrophys. 105, 359-362 (1982); http://adsabs.harvard.edu/abs/1982A%26A...105..359A. Double_t AsGAST(Double_t UT1Offset = 0) const; Return Greenwich apparant sidereal time (GAST) in hour-angle. Return; value will always be between 0 and 24 (hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:6218,error,error,6218,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,2,['error'],['error']
Availability,"cdfBoundariesEnable the special boundary condition for a cdf: underflow bins are assumed to have weight zero and overflow bins have weight one. Otherwise, the histogram is mirrored at the boundaries for the interpolation. ; [in]oneSafeIgnored. . Definition at line 1434 of file RooDataHist.cxx. ◆ weight() [3/3]. double RooDataHist::weight ; (; std::size_t ; i); const. inline . Return weight of i-th bin. ; See alsogetIndex() ; Definition at line 110 of file RooDataHist.h. ◆ weightArray(). double const * RooDataHist::weightArray ; (; ); const. inline . Definition at line 216 of file RooDataHist.h. ◆ weightError() [1/2]. void RooDataHist::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; etype = Poisson . ); const. overridevirtual . Return the asymmetric errors on the current weight. ; See alsoweightError(ErrorType) const for symmetric error. ; Parameters. [out]loLow error. ; [out]hiHigh error. ; [in]etypeType of error to compute. May throw if not supported. Supported errors are; Poisson Default. Asymmetric Poisson errors (68% CL).; SumW2 The square root of the sum of weights. (Symmetric).; None Return zero. . Reimplemented from RooAbsData.; Definition at line 1570 of file RooDataHist.cxx. ◆ weightError() [2/2]. double RooDataHist::weightError ; (; ErrorType ; etype = Poisson); const. inlineoverridevirtual . Return the symmetric error on the current weight. ; See also weightError(double&,double&,ErrorType) const for asymmetric errors. ; Reimplemented from RooAbsData.; Definition at line 125 of file RooDataHist.h. ◆ weightFast(). double RooDataHist::weightFast ; (; const RooArgSet & ; bin, . int ; intOrder, . bool ; correctForBinSize, . bool ; cdfBoundaries . ). A faster version of RooDataHist::weight that assumes the passed arguments are aligned with the histogram variables. ; Parameters. [in]binCoordinates for which the weight should be calculated. Has to be aligned with the internal histogram variables. ; [in]intOrderInterpolation order, i.e. how many neig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:82199,error,errors,82199,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['error'],['errors']
Availability,"ce (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ;  ;  ~AdaptiveIntegratorMultiDim () override;  destructor (no operations) ;  ; double Error () const override;  return integration error ;  ; double Integral (const double *xmin, const double *xmax) override;  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double RelError () const;  return relative error ;  ; double Result () const override;  return result of integration ;  ; void SetAbsTolerance (double absTol) override;  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f) override;  set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim) ;  ; void SetMaxPts (unsigned int n);  set max points ;  ; void SetMinPts (unsigned int n);  set min points ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTol) override;  set relative tolerance ;  ; void SetSize (unsigned int size);  set workspace size ;  ; int Status () const override;  return status of integration ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; double DoIntegral (const double *xmin, const double *xmax, bool absVal=false",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:3637,error,error,3637,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,4,"['error', 'toler']","['error', 'tolerance']"
Availability,"ce file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBrentRootFinder. class RooBrentRootFinder: public RooAbsRootFinder. Implement the abstract 1-dimensional root finding interface using; the Brent-Decker method. This implementation is based on the one; in the GNU scientific library (v0.99).; . Function Members (Methods); public:. RooBrentRootFinder(const RooAbsFunc& function); RooBrentRootFinder(const RooBrentRootFinder&); virtual~RooBrentRootFinder(); static TClass*Class(); virtual Bool_tfindRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; virtual TClass*IsA() const; voidsetTol(Double_t tol); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. enum { MaxIterations; };. protected:. const RooAbsFunc*RooAbsRootFinder::_functionPointer to input function; Double_t_tol; Bool_tRooAbsRootFinder::_validTrue if current state is valid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBrentRootFinder(const RooAbsFunc& function); Constructor taking function binding as input. Bool_t findRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; Do the root finding using the Brent-Decker method. Returns a boolean status and; loads 'result' with our best guess at the root if true.; Prints a warning if the initial interval does not bracket a single; root or if the root is not found after a fixed number of iterations. RooBrentRootFinder(const RooAbsFunc& function). virtual ~RooBrentRootFinder(); { }. void setTol(Double_t tol); Set convergence tolerance parameter. » Last changed: Tue Mar 10 17:14:41 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBrentRootFinder.html:1862,toler,tolerance,1862,root/html534/RooBrentRootFinder.html,https://root.cern,https://root.cern/root/html534/RooBrentRootFinder.html,1,['toler'],['tolerance']
Availability,"ce level"". ; Definition at line 58 of file HypoTestResult.h. ◆ CLbError(). double HypoTestResult::CLbError ; (; ); const. The error on the ""confidence level"" of the null hypothesis. ; compute \(CL_{b}\) error \(CL_{b}\) = 1 - NullPValue() must use opposite condition that routine above ; Definition at line 267 of file HypoTestResult.cxx. ◆ Clone(). TObject * RooStats::HypoTestResult::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . clone method, required since some data members cannot rely on the streamers to copy them ; Reimplemented from TObject.; Definition at line 36 of file HypoTestResult.h. ◆ CLs(). virtual double RooStats::HypoTestResult::CLs ; (; ); const. inlinevirtual . \(CL_{s}\) is simply \(CL_{s+b}/CL_{b}\) (not a method, but a quantity) ; Definition at line 64 of file HypoTestResult.h. ◆ CLsError(). double HypoTestResult::CLsError ; (; ); const. The error on the ratio \(CL_{s+b}/CL_{b}\). ; Returns an estimate of the error on \(CL_{s}\) through combination of the errors on \(CL_{b}\) and \(CL_{s+b}\):. \[; \sigma_{CL_s} = CL_s; \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; \]. Definition at line 292 of file HypoTestResult.cxx. ◆ CLsplusb(). virtual double RooStats::HypoTestResult::CLsplusb ; (; ); const. inlinevirtual . Convert AlternatePValue into a ""confidence level"". ; Definition at line 61 of file HypoTestResult.h. ◆ CLsplusbError(). double HypoTestResult::CLsplusbError ; (; ); const. The error on the ""confidence level"" of the alternative hypothesis. ; Definition at line 273 of file HypoTestResult.cxx. ◆ DeclFileName(). static const char * RooStats::HypoTestResult::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 142 of file HypoTestResult.h. ◆ GetAllTestStatisticsData(). const RooArgList * RooStats::HypoTestResult::GetAllTestStatisticsData ; (; void ; ); const. inline . Definition at line 83 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:19923,error,error,19923,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,2,['error'],"['error', 'errors']"
Availability,"ce of instances of the same method with the same factory, e.g., by overriding variables in the same local namespace. ; Definition at line 153 of file PyMethodBase.cxx. ◆ PyIsInitialized(). int PyMethodBase::PyIsInitialized ; (; ). static . Check Python interpreter initialization status. ; ReturnsBoolean whether interpreter is initialized ; Definition at line 253 of file PyMethodBase.cxx. ◆ PyRunString() [1/2]. void PyMethodBase::PyRunString ; (; TString ; code, . PyObject * ; globalNS, . PyObject * ; localNS . ). static . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]globalNSGlobal Namespace for Python Session ; [in]localNSLocal Namespace for Python Session. Overloaded static Helper function to run python code from string and throw runtime error if the Python session is unable to execute the code ; Definition at line 347 of file PyMethodBase.cxx. ◆ PyRunString() [2/2]. void PyMethodBase::PyRunString ; (; TString ; code, . TString ; errorMessage = ""Failed to run python code"", . int ; start = 256 . ). protected . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]errorMessageError message which shall be shown if the execution fails ; [in]startStart symbol. Helper function to run python code from string in local namespace with error handling start defines the start symbol defined in PyRun_String (Py_eval_input, Py_single_input, Py_file_input) ; Definition at line 325 of file PyMethodBase.cxx. ◆ PyStringAsString(). const char * PyMethodBase::PyStringAsString ; (; PyObject * ; string). static . Returns const char* from Python string in PyObject. ; Parameters. [in]stringPython String object . ReturnsString representation in const char* ; Definition at line 362 of file PyMethodBase.cxx. ◆ ReadModelFromFile(). virtual void TMVA::PyMethodBase::ReadModelFromFile ; (; ). protectedpure virtual . Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, and TMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:35989,error,errorMessage,35989,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['error'],['errorMessage']
Availability,"ce the object actually into shared memory call Update(). void Update(TObject* obj = 0); Update an object (or all objects, if obj == 0) in shared memory. TObject * Remove(TObject* obj, Bool_t lock); Remove object from shared memory. Returns pointer to removed; object if successful, 0 otherwise. TObject * Remove(const char* name, Bool_t lock); Remove object by name from shared memory. Returns pointer to removed; object if successful, 0 otherwise. void RemoveAll(); Remove all objects from shared memory. TObject * Get(const char* name, TObject* retObj = 0); Return pointer to object retrieved from shared memory. The object must; be deleted after use. If delObj is a pointer to a previously allocated; object it will be deleted. Returns 0 in case object with the given; name does not exist. void CreateSemaphore(Int_t pid = 0); Create semaphore used for synchronizing access to shared memory. void DeleteSemaphore(); Delete the semaphore. Int_t AcquireSemaphore(); Acquire semaphore. Returns 0 if OK, -1 on error. Int_t ReleaseSemaphore(); Release semaphore. Returns 0 if OK, -1 on error. void Close(Option_t* option = """"); Close a mapped file. First detach mapped memory then close file.; No member functions of a TMapFile that was opened in write mode; may be called after Close() (this includes, of course, ""delete"" which; would call the dtors). The option=""dtor"" is only used when called; via the ~TMapFile. TMapFile * FindShadowMapFile(); Returns shadow map file. void Print(Option_t* option = """") const; Print some info about the mapped file. Bool_t IsFolder() const; Returns kTRUE in case object is a folder (i.e. contains browsable lists). void Browse(TBrowser* b); Browse contents of TMapFile. Bool_t cd(const char* path = 0); Cd to associated directory,. void ls(Option_t* option = """") const; List contents of TMapFile. void SumBuffer(Int_t bufsize); Increment statistics for buffer sizes of objects in this file. Int_t GetBestBuffer(); Return the best buffer size for objects in this fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMapFile.html:11824,error,error,11824,root/html528/TMapFile.html,https://root.cern,https://root.cern/root/html528/TMapFile.html,6,['error'],['error']
Availability,"ce using FOAM; for sampling arbitrary distributions. Function Members (Methods); public:. virtual~TFoamSampler(); ROOT::Math::DistSamplerROOT::Math::DistSampler::DistSampler(); ROOT::Math::DistSamplerROOT::Math::DistSampler::DistSampler(const ROOT::Math::DistSampler&); virtual boolROOT::Math::DistSampler::Generate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolROOT::Math::DistSampler::Generate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolROOT::Math::DistSampler::Generate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intROOT::Math::DistSampler::NDim() const; TFoamSampler&operator=(const TFoamSampler&); const ROOT::Math::IMultiGenFunction&ROOT::Math::DistSampler::ParentPdf() const; virtual boolSample(double* x); virtual doubleROOT::Math::DistSampler::Sample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolROOT::Math::DistSampler::SampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidROOT::Math::DistSampler::SetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); voidSetFunction(TF1* pdf); voidROOT::Math::DistSampler::SetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidROOT::Math::DistSampler::SetMode(double); virtual voidSetRandom(TRandom* r); voidROOT::Math::DistSampler::SetRange(const ROOT::Fit::DataRange& range); voidROOT::Math::DistSampler::SetRange(const double* xmin, const double* xmax); voidROOT::Math::DistSampler::SetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int seed); TFoamSampler(); TFoamSampler(const TFoamSampler&). protected:. virtual voidROOT::Math::DistSampler::DoSetFunction(const ROOT::Math::IMultiG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoamSampler.html:1464,error,error,1464,root/html602/TFoamSampler.html,https://root.cern,https://root.cern/root/html602/TFoamSampler.html,4,['error'],"['error', 'errors']"
Availability,"ce you presumably don’t know that yet), and minimize with respect to the others. Then release parameter four and minimize again. If the problem admits a “good” physical solution, you will normally find it this way. If it doesn’t work, you may see what is wrong by the following sequence (where \(\mbox{xxx}\) is the expected physical value for parameter four):; MnMigrad migrad(...);; migrad.setValue(4, xxx);; migrad.fix(4);; FunctionMinimum min = migrad();; migrad.release(4);; MnScan scan(...);; std::vector<std::pair<double, double> > points = scan(4);; where \(\mbox{SCAN}\) gives you a picture of \(\mbox{FCN}\) as a function of parameter four alone, the others being fixed at their current best values. If you suspect the difficulty is due to parameter five, then add; MnContours contour(...);; std::vector<std::pair<double, double> > points = contour(4, 5);; to see a two-dimensional picture.; 6.5 Interpretation of parameter errors; There are two kinds of problems that can arise: The reliability of M ’s error estimates, and their statistical interpretation, assuming they are accurate.; 6.5.1 Statistical interpretation; For discussion of basic concepts, such as the meaning of the elements of the error matrix, parabolic versus \(\mbox{MINOS}\) errors, the appropriate value for \(\mbox{up}\) (see [howto:errordef]), and setting of exact confidence levels, see (in order of increasing complexity and completeness):. “Interpretation of the Errors on Parameters”, see Part 3 of this write-up.; “Determining the Statistical Significance of Experimental Results”@bib-MIN81.; “Statistical Methods in Experimental Physics”@bib-EADIE. 6.5.2 The reliability of M error estimates; M always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a \(\mbox{MIGRAD}\) or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:69015,error,errors,69015,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,3,"['error', 'reliab']","['error', 'errors', 'reliability']"
Availability,"ce you presumably don’t know that yet), and minimize with respect to the others. Then release parameter four and minimize again. If the problem admits a “good” physical solution, you will normally find it this way. If it doesn’t work, you may see what is wrong by the following sequence (where \(\mbox{xxx}\) is the expected physical value for parameter four):; MnMigrad migrad(...);; migrad.setValue(4, xxx);; migrad.fix(4);; FunctionMinimum min = migrad();; migrad.release(4);; MnScan scan(...);; std::vector<std::pair<double, double> > points = scan(4);; where \(\mbox{SCAN}\) gives you a picture of \(\mbox{FCN}\) as a function of parameter four alone, the others being fixed at their current best values. If you suspect the difficulty is due to parameter five, then add; MnContours contour(...);; std::vector<std::pair<double, double> > points = contour(4, 5);; to see a two-dimensional picture.; 6.5 Interpretation of parameter errors; There are two kinds of problems that can arise: The reliability of M ’s error estimates, and their statistical interpretation, assuming they are accurate.; 6.5.1 Statistical interpretation; For discussuion of basic concepts, such as the meaning of the elements of the error matrix, parabolic versus \(\mbox{MINOS}\) errors, the appropriate value for \(\mbox{up}\) (see [howto:errordef]), and setting of exact confidence levels, see (in order of increasing complexity and completeness):. “Interpretation of the Errors on Parameters”, see Part 3 of this write-up.; “Determining the Statistical Significance of Experimental Results”@bib-MIN81.; “Statistical Methods in Experimental Physics”@bib-EADIE. 6.5.2 The reliability of M error estimates; M always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a \(\mbox{MIGRAD}\) or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:73003,error,errors,73003,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,3,"['error', 'reliab']","['error', 'errors', 'reliability']"
Availability,"ce: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.6.2 MnMigrad(const FCNBase&, const MnUserParameters&, unsigned int); Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.6.3 MnMigrad(const FCNBase&, const MnUserParameterState&, const MnStrategy&); Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.6.4 operator(); [api:migradop] MnMigrad::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum. The optional argument \(\mbox{maxfcn}\) specifies the (approximate) maximum number of function calls after which the calculation will be stopped even if it has not yet converged. The optional argument \(\mbox{tolerance}\) specifies the required tolerance on the function value at the minimum. The default \(\mbox{tolerance}\) value is \(0.1\), and the minimization will stop when the estimated vertical distance to the minimum (\(\mbox{EDM}\)) is less than \(0.001*\)\(\mbox{tolerance}\)\(*\)\(\mbox{up}\) (see [howto:errordef]).; 5.6.5 Parameter interaction; MnMigrad retains the result after each minimization (MnUserParameterStae, see [api:state]) and forwards the interface.; 5.6.6 VariableMetricMinimizer(); The VariableMetricMinimizer is instantiated using default constructor.; 5.6.7 minimize(const FCNBase&, …); The VariableMetricMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.7 MnMinimize and CombinedMinimizer; [api:minimize]; Causes minimization of the function by the method of \(\mbox{MIGRAD}\",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:48879,toler,tolerance,48879,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['toler'],['tolerance']
Availability,"ce::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooMsgService::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 246 of file RooMsgService.h. ◆ clearErrorCount(). void RooMsgService::clearErrorCount ; (; ). inline . Definition at line 200 of file RooMsgService.h. ◆ debugCode(). Int_t & RooMsgService::debugCode ; (; ). inline . Definition at line 207 of file RooMsgService.h. ◆ debugWorkspace(). RooWorkspace * RooMsgService::debugWorkspace ; (; ). Definition at line 147 of file RooMsgService.cxx. ◆ DeclFileName(). static const char * RooMsgService::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 246 of file RooMsgService.h. ◆ deleteStream(). void RooMsgService::deleteStream ; (; Int_t ; id). Delete stream with given unique ID code. ; Definition at line 293 of file RooMsgService.cxx. ◆ errorCount(). Int_t RooMsgService::errorCount ; (; ); const. inline . Definition at line 199 of file RooMsgService.h. ◆ getStream(). StreamConfig & RooMsgService::getStream ; (; Int_t ; id). inline . Definition at line 161 of file RooMsgService.h. ◆ getStreamStatus(). bool RooMsgService::getStreamStatus ; (; Int_t ; id); const. Get activation status of stream with given unique ID. ; Definition at line 331 of file RooMsgService.cxx. ◆ globalKillBelow(). RooFit::MsgLevel RooMsgService::globalKillBelow ; (; ); const. inline . Definition at line 170 of file RooMsgService.h. ◆ instance(). RooMsgService & RooMsgService::instance ; (; ). static . Return reference to singleton instance. ; Definition at line 345 of file RooMsgService.cxx. ◆ IsA(). TClass * RooMsgService::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 246 of file RooMsgService.h. ◆ isActive(). template<class T > . bool RooMsgService::isActive ; (; T ; self, . RooFit::MsgTopic ; to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:18718,error,errorCount,18718,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['error'],['errorCount']
Availability,"ce::CodeRepo::ClassRelInfo>_c2fmapList of contained classes; Bool_t_compiledOK! Flag indicating that classes compiled OK; map<TString,RooWorkspace::CodeRepo::ExtraHeader>_ehmapList of extra header files; map<TString,RooWorkspace::CodeRepo::ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& ); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. CodeRepo(const RooWorkspace::CodeRepo& other, RooWorkspace* wspace = 0); {}. virtual ~CodeRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooWorkspace__CodeRepo.html:7813,error,error,7813,root/html602/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html602/RooWorkspace__CodeRepo.html,2,['error'],['error']
Availability,"ce; Inherited Members; Includes; Libraries. Function documentation; TRFIOFile(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); Create a RFIO file object. A RFIO file is the same as a TFile; except that it is being accessed via a rfiod server. The url; argument must be of the form: rfio:/path/file.root (where file.root; is a symlink of type /shift/aaa/bbb/ccc) or rfio:server:/path/file.root.; If the file specified in the URL does not exist, is not accessable; or can not be created the kZombie bit will be set in the TRFIOFile; object. Use IsZombie() to see if the file is accessable.; For a description of the option and other arguments see the TFile ctor.; The preferred interface to this constructor is via TFile::Open(). ~TRFIOFile(); RFIO file dtor. Close and flush directory structure. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read a list of buffers given in pos[] and len[] and return it; in a single buffer. Returns kTRUE in case of error. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Interface to system write. All arguments like in POSIX write. Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Interface to system lseek. All arguments like in POSIX lseek; except that the offset and return value are Long_t to be able to; handle 64 bit file systems. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Interface to TSystem:GetPathInfo(). Generally implemented via; stat() or fstat(). Int_t GetErrno() const; Method returning rfio_errno. For RFIO files must use this; function since we need to check rfio_errno then serrno and finally errno. void Reset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRFIOFile.html:23800,error,error,23800,root/html530/TRFIOFile.html,https://root.cern,https://root.cern/root/html530/TRFIOFile.html,2,['error'],['error']
Availability,"ce; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, SummationRule rule,				 Int_t maxSteps, Double_t eps); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax,				const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration range. RooAbsInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:8232,toler,tolerance,8232,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,1,['toler'],['tolerance']
Availability,"ce; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Mon Dec 7 13:48:32 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:7435,avail,available,7435,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,1,['avail'],['available']
Availability,"ce; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Mon Jul 4 15:23:34 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumGenFactory.html:7490,avail,available,7490,root/html530/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html530/RooNumGenFactory.html,1,['avail'],['available']
Availability,"ce; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Thu Nov 3 20:08:51 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumGenFactory.html:7490,avail,available,7490,root/html532/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html532/RooNumGenFactory.html,1,['avail'],['available']
Availability,"ceDir, interp, linkdefFilename, moduleName.str())); 5026 return 1;; 5027 }; 5028 }; 5029 }; 5030 ; 5031 ; 5032 if (!gOptLibListPrefix.empty()) {; 5033 string liblist_filename = gOptLibListPrefix + "".out"";; 5034 ; 5035 ofstream outputfile(liblist_filename.c_str(), ios::out);; 5036 if (!outputfile) {; 5037 ROOT::TMetaUtils::Error(nullptr, ""%s: Unable to open output lib file %s\n"",; 5038 executableFileName, liblist_filename.c_str());; 5039 } else {; 5040 const size_t endStr = gLibsNeeded.find_last_not_of("" \t"");; 5041 outputfile << gLibsNeeded.substr(0, endStr + 1) << endl;; 5042 // Add explicit delimiter; 5043 outputfile << ""# Now the list of classes\n"";; 5044 // SELECTION LOOP; 5045 for (auto const & annRcd : scan.fSelectedClasses) {; 5046 // Shouldn't it be GetLong64_Name( cl_input.GetNormalizedName() ); 5047 // or maybe we should be normalizing to turn directly all long long into Long64_t; 5048 outputfile << annRcd.GetNormalizedName() << endl;; 5049 }; 5050 }; 5051 }; 5052 ; 5053 // Check for errors in module generation; 5054 rootclingRetCode += modGen.GetErrorCount();; 5055 if (0 != rootclingRetCode) return rootclingRetCode;; 5056 ; 5057 // Create the rootmap file; 5058 std::string rootmapLibName = std::accumulate(gOptRootmapLibNames.begin(),; 5059 gOptRootmapLibNames.end(),; 5060 std::string(),; 5061 [](const std::string & a, const std::string & b) -> std::string {; 5062 if (a.empty()) return b;; 5063 else return a + "" "" + b;; 5064 });; 5065 ; 5066 bool rootMapNeeded = !gOptRootMapFileName.empty() || !rootmapLibName.empty();; 5067 ; 5068 std::list<std::string> classesNames;; 5069 std::list<std::string> classesNamesForRootmap;; 5070 std::list<std::string> classesDefsList;; 5071 ; 5072 rootclingRetCode = ExtractClassesListAndDeclLines(scan,; 5073 classesNames,; 5074 classesNamesForRootmap,; 5075 classesDefsList,; 5076 interp);; 5077 ; 5078 std::list<std::string> enumNames;; 5079 rootclingRetCode += ExtractAutoloadKeys(enumNames,; 5080 scan.fSelectedEnums,; 5081 int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:205680,error,errors,205680,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['errors']
Availability,"ced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:132327,error,error,132327,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['error'],['error']
Availability,"ceiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTProofServ::DeletePlayer(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofServ::Fork(); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; Int_tTProofServ::GetSessionStatus(); virtual voidTProofServ::HandleArchive(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleCache(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleCheckFile(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleDataSets(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleFork(TMessage* mess); virtual voidTProofServ::HandleLibIncPath(TMessage* mess); virtual voidTProofServ::HandleProcess(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleQueryList(TMessage* mess); virtual voidTProofServ::HandleRemove(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleRetrieve(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleSubmerger(TMessage* mess); virtual voidTProofServ::HandleWorkerLists(TMessage* mess); virtual voidTApplication::Help(const char* line); Bool_tTProofServ::IsIdle(); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); virtual voidTProofServ::MakePlayer(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual voidTProofServ::ProcessNext(TString* slb = 0); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh); Int_tTProofServ::SetupCommon(); Bool_tTProofServ::UnlinkDataDir(const char* path).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofServ.html:15246,error,error,15246,root/html528/TXProofServ.html,https://root.cern,https://root.cern/root/html528/TXProofServ.html,1,['error'],['error']
Availability,"cent< Architecture_t >::TrainMomentum ; (; const Data_t & ; TrainingDataIn, . size_t ; nTrainingSamples, . const Data_t & ; TestDataIn, . size_t ; nTestSamples, . Net_t & ; net, . Scalar_t ; momentum, . size_t ; nThreads = 1 . ). Same as Train(...) but uses the given momentum. . Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fBatchSize. private . Batch size to use for the training. ; Definition at line 62 of file Minimizers.h. ◆ fConvergenceCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 66 of file Minimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 64 of file Minimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 71 of file Minimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 72 of file Minimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 63 of file Minimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 70 of file Minimizers.h. ◆ fTestI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:15297,error,error,15297,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['error'],['error']
Availability,"cerning memory management! Note that the vector, matrix and decomposition class are constructed outside the loop since the dimensions of vector/matrix are constant. If we would have replaced lu.SetMatrix(a) by TDecompLU lu(a), we would construct/deconstruct the array elements of lu on the stack.; TVectorD b(n);; TMatrixD a(n,n);; TDecompLU lu(n);; Bool_t ok;; for (....) {; b = ..;; a = ..;; lu.SetMatrix(a);; lu.Decompose();; lu.Solve(b,ok);; }; 14.6.1 Tolerances and Scaling; The tolerance parameter fTol (a member of the base class TDecompBase) plays a crucial role in all operations of the decomposition classes. It gives the user a tool to monitor and steer the operations its default value is \(\varepsilon\) where \(1+\varepsilon=1\).; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number. The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD that can handle singular matrices. This will be checked in a different way for any decomposition. For instance in LU, a matrix is considered singular in the solving stage when a diagonal element of the decomposed matrix is smaller than fTol. Here an important point is raised. The Decompose() method is successful as long no zero diagonal element is encountered. Therefore, the user could perform decomposition and only after this step worry about the tolerance number.; If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices or vectors that are invalid. If one would like to monitor the tolerance parameter but not have the code stop in case of a number smaller than fTol, one could proceed as follows:; TVectorD b = ..;; TMatrixD a = ..;; .; TDecompLU lu(a);; Bool_t ok;; TVectorD x = lu.Solve(b,ok);; Int_t nr = 0;; while (!ok) {; lu.SetMatrix(a);; lu.SetTol(0.1*lu.GetTol());; if (nr++ > 10) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:793004,toler,tolerance,793004,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['toler'],['tolerance']
Availability,"certainties""); # Plot data to enable automatic determination of model0 normalisation:; sumData.plotOn(frame); model0.plotOn(frame, LineColor=""b"", VisualizeError=result0); # Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame); # Plot model components; model0.plotOn(frame, LineColor=""b""); p_ph_sig_set = {p_h_sig}; p_ph_bkg_set = {p_h_bkg}; model0.plotOn(frame, Components=p_ph_sig_set, LineColor=""kAzure""); model0.plotOn(frame, Components=p_ph_bkg_set, LineColor=""r""); model0.paramOn(frame); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt_text1 = [; ""No template uncertainties"",; ""are taken into account."",; ""This leads to low errors"",; ""for the parameters A, since"",; ""the only source of errors"",; ""are the data statistics."",; ]; for text in pt_text1:; pt.AddText(text); ; pt.DrawClone(); ; ; can.cd(2); frame = x.frame(Title=""Barlow Beeston for Sig & Bkg separately""); sumData.plotOn(frame); model1.plotOn(frame, LineColor=""b"", VisualizeError=result1); # Plot data again to show it on top of error bands:; sumData.plotOn(frame); model1.plotOn(frame, LineColor=""b""); p_ph_sig1_set = {p_ph_sig1}; p_ph_bkg1_set = {p_ph_bkg1}; model1.plotOn(frame, Components=p_ph_sig1_set, LineColor=""kAzure""); model1.plotOn(frame, Components=p_ph_bkg1_set, LineColor=""r""); model1.paramOn(frame, Parameters={Asig1, Abkg1}); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text2 = [; ""With gamma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A."",; ]; ; for text in pt_text2:; pt.AddText(text); ; pt.DrawClone(); ; can.cd(3); frame = x.frame(Title=""Barlow Beeston light for (Sig+Bkg)""); sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b"", VisualizeError=result2); # Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b""); p_ph_sig2_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:5565,error,error,5565,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['error'],['error']
Availability,"ces from several uncertainty sources. ; Definition at line 760 of file TUnfoldSys.cxx. ◆ GetEmatrixTotal(). void TUnfoldSys::GetEmatrixTotal ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr . ). Get total error matrix, summing up all contributions. ; Parameters. [out]ematrixhistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins. the array binMap is explained with the method GetOutput(). ; Definition at line 1276 of file TUnfoldSys.cxx. ◆ GetRhoItotal(). void TUnfoldSys::GetRhoItotal ; (; TH1 * ; rhoi, . const Int_t * ; binMap = nullptr, . TH2 * ; invEmat = nullptr . ). Get global correlatiocn coefficients, summing up all contributions. ; Parameters. [out]rhoihistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins ; [out]invEmat(default=nullptr) inverse of error matrix. return the global correlation coefficients, including all error sources. If invEmat is nonzero, the inverse of the error matrix is returned in that histogram ; the array binMap is explained with the method GetOutput(). ; Definition at line 1401 of file TUnfoldSys.cxx. ◆ GetSummedErrorMatrixXX(). TMatrixDSparse * TUnfoldSys::GetSummedErrorMatrixXX ; (; void ; ). protected . determine total error matrix on the vector x ; Definition at line 1331 of file TUnfoldSys.cxx. ◆ GetSummedErrorMatrixYY(). TMatrixDSparse * TUnfoldSys::GetSummedErrorMatrixYY ; (; void ; ). protected . determine total error matrix on the vector Ax ; Definition at line 1296 of file TUnfoldSys.cxx. ◆ GetSysSources(). TSortedList * TUnfoldSys::GetSysSources ; (; void ; ); const. Get a new list of all systematic uuncertainty sources. ; The user is responsible for deleting the list ; Definition at line 1512 of file TUnfoldSys.cxx. ◆ InitTUnfoldSys(). void TUnfoldSys::InitTUnfoldSys ; (; void ; ). private . Definition at line 618 of file TUnfoldSys.cxx. ◆ IsA(). TClass * TUnfoldSys::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:43468,error,error,43468,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['error']
Availability,cess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TPolyMarker3D*fPolyMarker3D; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusSelector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula; Double_tTProofDraw::fWeightGlobal weight for fill actions; static TProofDraw::(anonymous)TProofDraw::kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(TTree* tree); See TProofDraw::Init(). void,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawPolyMarker3D.html:7614,avail,available,7614,root/html602/TProofDrawPolyMarker3D.html,https://root.cern,https://root.cern/root/html602/TProofDrawPolyMarker3D.html,2,['avail'],['available']
Availability,cess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TProfile*fProfile; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusSelector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula; Double_tTProofDraw::fWeightGlobal weight for fill actions; static TProofDraw::(anonymous)TProofDraw::kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(TTree* ); See TProofDraw::Init(). void DefVar(); Def,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawProfile.html:7534,avail,available,7534,root/html602/TProofDrawProfile.html,https://root.cern,https://root.cern/root/html602/TProofDrawProfile.html,2,['avail'],['available']
Availability,cess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TProfile2D*fProfile; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusSelector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula; Double_tTProofDraw::fWeightGlobal weight for fill actions; static TProofDraw::(anonymous)TProofDraw::kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(TTree* ); See TProofDraw::Init(). void DefVar(); D,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawProfile2D.html:7560,avail,available,7560,root/html602/TProofDrawProfile2D.html,https://root.cern,https://root.cern/root/html602/TProofDrawProfile2D.html,2,['avail'],['available']
Availability,cess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>*fPoints; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusSelector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula; Double_tTProofDraw::fWeightGlobal weight for fill actions; static TProofDraw::(anonymous)TProofDraw::kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SlaveBegin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawListOfGraphs.html:7621,avail,available,7621,root/html602/TProofDrawListOfGraphs.html,https://root.cern,https://root.cern/root/html602/TProofDrawListOfGraphs.html,2,['avail'],['available']
Availability,cess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>*fPoints; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusSelector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula; Double_tTProofDraw::fWeightGlobal weight for fill actions; static TProofDraw::(anonymous)TProofDraw::kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Sla,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawListOfPolyMarkers3D.html:7712,avail,available,7712,root/html602/TProofDrawListOfPolyMarkers3D.html,https://root.cern,https://root.cern/root/html602/TProofDrawListOfPolyMarkers3D.html,2,['avail'],['available']
Availability,"cessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:33806,error,error,33806,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['error'],['error']
Availability,"cessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RemoveClass(TClass* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TROOT.html:30804,error,error,30804,root/html534/TROOT.html,https://root.cern,https://root.cern/root/html534/TROOT.html,1,['error'],['error']
Availability,"cessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadSvnInfo(); Read Subversion revision information and branch name from the; etc/svnrev.txt file. const char * GetSvnDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RemoveClass(TClass* ); Remove a class from the list and map of classes. void Reset(Option_t* option = """"); Delete all global interpr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:29632,error,error,29632,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,2,['error'],['error']
Availability,"cessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadSvnInfo(); Read Subversion revision information and branch name from the; etc/svnrev.txt file. const char * GetSvnDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RemoveClass(TClass* ); Remove a class from the list and map of classes.; This routine is deprecated, use TClass::RemoveClass directl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TROOT.html:30309,error,error,30309,root/html532/TROOT.html,https://root.cern,https://root.cern/root/html532/TROOT.html,1,['error'],['error']
Availability,"cessed RDataFrame in memory for further usage. ;  ; file  df020_helpers.C;   Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelpers.hxx. ;  ; file  df021_createTGraph.C;   Fill a TGraph using RDataFrame. ;  ; file  df021_createTGraph.py;   Fill a TGraph using RDataFrame. ;  ; file  df022_useKahan.C;   Implement a custom action that evaluates a Kahan sum. ;  ; file  df023_aggregate.C;   Use the Aggregate action to specify arbitrary data aggregations. ;  ; file  df024_Display.C;   Use the Display action to inspect entry values. ;  ; file  df024_Display.py;   Use the Display action to inspect entry values. ;  ; file  df025_RNode.C;   Manipulate RDF objects in functions, loops and conditional branches. ;  ; file  df026_AsNumpyArrays.py;   Read data from RDataFrame into Numpy arrays. ;  ; file  df027_SQliteDependencyOverVersion.C;   Plot the ROOT downloads based on the version reading a remote sqlite3 file. ;  ; file  df028_SQliteIPLocation.C;   Plot the location of ROOT downloads reading a remote sqlite3 file. ;  ; file  df029_SQlitePlatformDistribution.C;   Use RDataFrame to display data about ROOT downloads. ;  ; file  df030_SQliteVersionsOfROOT.C;   Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ;  ; file  df031_Stats.C;   Use the Stats action to extract the statistics of a column. ;  ; file  df031_Stats.py;   Use the Stats action to extract the statistics of a column. ;  ; file  df032_RDFFromNumpy.py;   Read data from Numpy arrays into RDataFrame. ;  ; file  df033_Describe.py;   Get information about the dataframe with the convenience method Describe. ;  ; file  df034_SaveGraph.C;   Basic SaveGraph usage. ;  ; file  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__dataframe.html:5361,down,downloads,5361,doc/master/group__tutorial__dataframe.html,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html,1,['down'],['downloads']
Availability,"cessed, kFALSE otherwise. void WaitFor(TGWindow* w); Wait for window to be destroyed. void WaitForUnmap(TGWindow* w); Wait for window to be unmapped. void ResetWaitFor(TGWindow* w); reset waiting. Bool_t ProcessEventsFor(TGWindow* w); Like gSystem->ProcessEvents() but then only allow events for w to; be processed. For example to interrupt the processing and destroy; the window, call gROOT->SetInterrupt() before destroying the window. Bool_t DoRedraw(); Redraw all windows that need redrawing. Returns kFALSE if no redraw; was needed, kTRUE otherwise.; Only redraw the application's windows when the event queue; does not contain expose event anymore. Bool_t HandleEvent(Event_t* event); Handle a GUI event. Bool_t HandleMaskEvent(Event_t* event, Window_t wid); Handle masked events only if window wid is the window for which the; event was reported or if wid is a parent of the event window. The not; masked event are handled directly. The masked events are:; kButtonPress, kButtonRelease, kKeyPress, kKeyRelease, kEnterNotify,; kLeaveNotify, kMotionNotify. void ProcessLine(TString cmd, Long_t msg, Long_t parm1, Long_t parm2); Execute string ""cmd"" via the interpreter. Before executing replace; in the command string the token $MSG, $PARM1 and $PARM2 by msg,; parm1 and parm2, respectively. The function in cmd string must accept; these as longs. Bool_t IsEditDisabled() const; Returns kTRUE if edit/guibuilding is forbidden. void SetEditDisabled(Bool_t on = kTRUE); If on is kTRUE editting/guibuilding is forbidden. void ProcessedEvent(Event_t* event, Window_t wid); Emits a signal when an event has been processed.; Used in TRecorder. void RegisteredWindow(Window_t w); Emits a signal when a Window has been registered in TGClient.; Used in TRecorder. TGClient(const TGClient& ). TGClient& operator=(const TGClient& ). Bool_t IsEditable() const; { return fRoot != fDefaultRoot; }. void ForceRedraw(); { fForceRedraw = kTRUE; }. EGEventType GetWaitForEvent() const; { return fWaitForEvent;}. W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGClient.html:18173,mask,masked,18173,root/html528/TGClient.html,https://root.cern,https://root.cern/root/html528/TGClient.html,6,['mask'],['masked']
Availability,"cessing of the dataset to a range of entries. For this reason, the RDataFrame; 427offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 428actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 429exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Range(); 430hanging from another Range(). Here are some commented examples:; 431~~~{.cpp}; 432RDataFrame d(""myTree"", ""file.root"");; 433// Here we store a dataframe that loops over only the first 30 entries in a variable; 434auto d30 = d.Range(30);; 435// This is how you pick all entries from 15 onwards; 436auto d15on = d.Range(15, 0);; 437// We can specify a stride too, in this case we pick an event every 3; 438auto d15each3 = d.Range(0, 15, 3);; 439~~~; 440Note that ranges are not available when multi-threading is enabled. More information on ranges is available; 441[here](#ranges).; 442 ; 443### Executing multiple actions in the same event loop; 444As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; 445the filtered events.; 446By now, you should be able to easily understand what is happening:; 447~~~{.cpp}; 448RDataFrame d(""treeName"", ""file.root"");; 449auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; 450auto h2 = d.Histo1D(""pt_v"");; 451h1->Draw(); // event loop is run once here; 452h2->Draw(""SAME""); // no need to run the event loop again; 453~~~; 454RDataFrame executes all above actions by **running the event-loop only once**. The trick is that actions are not; 455executed at the moment they are called, but they are **lazy**, i.e. delayed until the moment one of their results is; 456accessed through the smart pointer. At that time, the event loop is triggered and *all* results are produced; 457simultaneously.; 458 ; 459It is therefore good practice to declare all y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:26939,avail,available,26939,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"cessing of the dataset to a range of entries. For this reason, the RDataFrame; 431offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; 432actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; 433exclusively on the entries passing the filter -- it will not even count the other entries! The same goes for a Range(); 434hanging from another Range(). Here are some commented examples:; 435~~~{.cpp}; 436RDataFrame d(""myTree"", ""file.root"");; 437// Here we store a dataframe that loops over only the first 30 entries in a variable; 438auto d30 = d.Range(30);; 439// This is how you pick all entries from 15 onwards; 440auto d15on = d.Range(15, 0);; 441// We can specify a stride too, in this case we pick an event every 3; 442auto d15each3 = d.Range(0, 15, 3);; 443~~~; 444Note that ranges are not available when multi-threading is enabled. More information on ranges is available; 445[here](#ranges).; 446 ; 447### Executing multiple actions in the same event loop; 448As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of; 449the filtered events.; 450By now, you should be able to easily understand what is happening:; 451~~~{.cpp}; 452RDataFrame d(""treeName"", ""file.root"");; 453auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; 454auto h2 = d.Histo1D(""pt_v"");; 455h1->Draw(); // event loop is run once here; 456h2->Draw(""SAME""); // no need to run the event loop again; 457~~~; 458RDataFrame executes all above actions by **running the event-loop only once**. The trick is that actions are not; 459executed at the moment they are called, but they are **lazy**, i.e. delayed until the moment one of their results is; 460accessed through the smart pointer. At that time, the event loop is triggered and *all* results are produced; 461simultaneously.; 462 ; 463### Properly exploiting RDataFrame laziness; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:27381,avail,available,27381,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"cetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPavevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTLegendvirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPavevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditEntryAttFill()TLegendvirtual; EditEntryAttLine()TLegendvirtual; EditEntryAttMarker()TLegendvirtual; EditEntryAttText()TLegendvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTPavevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBorderSizeTPaveprotected; fColumnSeparationTLegendprotected; fCornerRadiusTPaveprotected; fEntrySeparationTLegendprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInitTPaveprotected; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTLegendprotected; fNameTPaveprotected; fNColumnsTLegendprotected; fOptionTPaveprotected; fPrimitivesTLegendprotected; fResizingTBoxprotected; fShadowColorTPaveprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fTipTBoxp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend-members.html:2143,error,error,2143,doc/master/classTLegend-members.html,https://root.cern,https://root.cern/doc/master/classTLegend-members.html,2,['error'],['error']
Availability,"cetoPrimitive(Int_t px, Int_t py); virtual voidTF1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TF1*DrawCopy(Option_t* option = """") const; virtual TObject*TF1::DrawDerivative(Option_t* option = ""al"")MENU ; virtual voidTF1::DrawF1(const char* formula, Double_t xmin, Double_t xmax, Option_t* option = """"); virtual TObject*TF1::DrawIntegral(Option_t* option = ""al"")MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual Double_tEvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTF1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTF1::FixParameter(Int_t ipar, Double_t value); Double_tTF1::GetChisquare() const; static TF1*TF1::GetCurrent(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF12.html:3270,error,error,3270,root/html528/TF12.html,https://root.cern,https://root.cern/root/html528/TF12.html,5,['error'],['error']
Availability,"ch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; A more complete example including error handling and a few combinations of TTreeReaderValue and TTreeReaderArray would look like this:; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>; ; #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h""; ; #include <vector>; #include <iostream>; ; bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName() << '\n';; return false;; }; return true;; }; ; ; // Analyze the tree ""MyTree"" in the file passed into the function.; // Returns false in case of errors.; bool analyze(TFile* file) {; // Create a TTreeReader named ""MyTree"" from the given TDirectory.; // The TTreeReader gives access to the TTree to the TTreeReaderValue and; // TTreeReaderArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:2774,robust,robust,2774,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,1,['robust'],['robust']
Availability,"ch a TF1 you don't have to set the initial conditions and the linear fitter is used. Going via the linear fitter for functions, linear in parameters, gives a considerable advantage in speed. When using the linear fitting it is also possible to perform a robust fitting with the Least Trimmed Square (LTS) regression algorithm, by using the fit option ROB. See the tutorial fitLinearRobust.C. Notes on TGraph/TGraphErrors Fitting:. By using the ""effective variance"" method a simple linear regression becomes a non-linear case, which takes several iterations instead of 0 as in the linear case.; The effective variance technique assumes that there is no correlation between the x and y coordinate.; The standard chi2 (least square) method without error in the coordinates (x) can be forced by using option ""EX0""; The linear fitter doesn't take into account the errors in x. When fitting a TGraphErrors with a linear functions the errors in x will not be considered. If errors in x are important, use option ""F"" for linear function fitting.; When fitting a TGraph (i.e. no errors associated with each point), a correction is applied to the errors on the parameters with the following formula: parameter_error *= sqrt(chisquare/(ndf-1)). General Fitting documentation; See in TH1::Fit for the documentation of; Fit Result; Fit Status; Fit Statistics Box; Fitting in a Range; Setting Initial Conditions . Definition at line 1231 of file TGraph.cxx. ◆ FitPanel(). void TGraph::FitPanel ; (; ). virtual . Display a GUI panel with all graph fit options. ; See class TFitEditor for example ; Definition at line 1274 of file TGraph.cxx. ◆ GetCorrelationFactor(). Double_t TGraph::GetCorrelationFactor ; (; ); const. virtual . Return graph correlation factor. ; Definition at line 1296 of file TGraph.cxx. ◆ GetCovariance(). Double_t TGraph::GetCovariance ; (; ); const. virtual . Return covariance of vectors x,y. ; Definition at line 1308 of file TGraph.cxx. ◆ GetEditable(). Bool_t TGraph::GetEditable ; (; )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:52320,error,errors,52320,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['error'],['errors']
Availability,"ch a TF1 you don't have to set the initial conditions and the linear fitter is used.; 1199/// Going via the linear fitter for functions, linear in parameters, gives a; 1200/// considerable advantage in speed.; 1201/// When using the linear fitting it is also possible to perform a robust fitting with the; 1202/// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; 1203/// See the tutorial `fitLinearRobust.C`.; 1204///; 1205/// ### Notes on TGraph/TGraphErrors Fitting:; 1206///; 1207/// 1. By using the ""effective variance"" method a simple linear regression; 1208/// becomes a non-linear case, which takes several iterations; 1209/// instead of 0 as in the linear case.; 1210/// 2. The effective variance technique assumes that there is no correlation; 1211/// between the x and y coordinate.; 1212/// 3. The standard chi2 (least square) method without error in the coordinates (x) can; 1213/// be forced by using option ""EX0""; 1214/// 4. The linear fitter doesn't take into account the errors in x. When fitting a; 1215/// TGraphErrors with a linear functions the errors in x will not be considered.; 1216/// If errors in x are important, use option ""F"" for linear function fitting.; 1217/// 5. When fitting a TGraph (i.e. no errors associated with each point),; 1218/// a correction is applied to the errors on the parameters with the following; 1219/// formula:; 1220/// `parameter_error *= sqrt(chisquare/(ndf-1))`; 1221///; 1222/// ### General Fitting documentation; 1223///; 1224/// See in TH1::Fit for the documentation of; 1225/// - [Fit Result](\ref HFitRes); 1226/// - [Fit Status](\ref HFitStatus); 1227/// - [Fit Statistics Box](\ref HFitStatBox); 1228/// - [Fitting in a Range](\ref HFitRange); 1229/// - [Setting Initial Conditions](\ref HFitInitial); 1230 ; 1231TFitResultPtr TGraph::Fit(TF1 *f1, Option_t *option, Option_t *goption, Axis_t rxmin, Axis_t rxmax); 1232{; 1233 Foption_t fitOption;; 1234 ROOT::Fit::FitOptionsMake(ROOT::Fit::EFitObjectType:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:43578,error,errors,43578,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['error'],['errors']
Availability,"ch a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:1848,avail,available,1848,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['avail'],['available']
Availability,"ch allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional; Bool_tfFixBlogical value of b parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixPosition[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional; Bool_tfFixSlogical value of s parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmalogical value of sigma parameter, which allows to fix the parameter (not to fit).; Bool_tfFixTlogical value of t parameter, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalc[fNPeaks] array of calculated values of fitted positions, output parameters; Double_t*fPositionErr[fNPeaks] array of position errors; Double_t*fPositionInit[fNPeaks] array of initial values of peaks positions, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfSCalccalculated value of s parameter; Double_tfSErrerror value of s parameter; Double_tfSInitinitial value of s parameter (relative amplitude of step), for details see html manual and references; Double_tfSigmaCalccalculated value of sigma parameter; Double_tfSigmaErrerror value of sigma parameter; Double_tfSigmaInitinitial value of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumFit.html:12898,error,errors,12898,root/html602/TSpectrumFit.html,https://root.cern,https://root.cern/root/html602/TSpectrumFit.html,2,['error'],['errors']
Availability,"ch an object will be created (e.g. TRFIOFile), the library to be loaded (in short libRFIO.so to RFIO), and the constructor to be called (e.g. “TRFIOFile()”). This can be specified in the .rootrc which already contains many plugin definitions, or by calls to gROOT->GetPluginManager()->AddHandler().; 1.6.2.4 Library AutoLoading; When using a class in Cling, e.g. in an interpreted source file, ROOT will automatically load the library that defines this class. On start-up, ROOT parses all files ending on .rootmap rootmap that are in one of the $LD_LIBRARY_PATH (or $DYLD_LIBRARY_PATH for MacOS, or $PATH for Windows). They contain class names and the library names that the class depends on. After reading them, ROOT knows which classes are available, and which libraries to load for them.; When TSystem::Load(""ALib"") is called, ROOT uses this information to determine which libraries libALib.so depends on. It will load these libraries first. Otherwise, loading the requested library could cause a system (dynamic loader) error due to unresolved symbols.; 1.6.3 $ROOTSYS/tutorials; tutorials The tutorials directory contains many example example scripts. They assume some basic knowledge of ROOT, and for the new user we recommend reading the chapters: “Histograms” and “Input/Output” before trying the examples. The more experienced user can jump to chapter “The Tutorials and Tests” to find more explicit and specific information about how to build and run the examples.; The $ROOTSYS/tutorials/ directory include the following sub-directories:; fft: Fast Fourier Transform with the fftw package fit: Several examples illustrating minimization/fitting foam: Random generator in multidimensional space geom: Examples of use of the geometry package (TGeo classes) gl: Visualisation with OpenGL graphics: Basic graphics graphs: Use of TGraph, TGraphErrors, etc. gui: Scripts to create Graphical User Interface hist: Histogramming image: Image Processing io: Input/Output math: Maths and Statistics f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:24799,error,error,24799,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"ch bin center; The bin content of this bin is then set to the function value at the bin; center, and the bin error is set to the confidence interval value.; Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; Returns covariance matrix. void GetCovarianceMatrix(TMatrixD& matr); Returns covariance matrix. void GetDesignMatrix(TMatrixD& matr); Returns the internal design matrix. void GetErrors(TVectorD& vpar); Returns parameter errors. void GetParameters(TVectorD& vpar); Returns parameter values. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& , Double_t& , Double_t& ) const; Returns the value and the name of the parameter #ipar; NB: In the calling function the argument name must be set large enough. Double_t GetParError(Int_t ipar) const; Returns the error of parameter #ipar. const char * GetParName(Int_t ipar) const; Returns name of parameter #ipar. Double_t GetParTValue(Int_t ipar); Returns the t-value for parameter #ipar. Double_t GetParSignificance(Int_t ipar); Returns the significance of parameter #ipar. void GetFitSample(TBits& bits); For robust lts fitting, returns the sample, on which the best fit was based. Int_t Merge(TCollection* list); Merge objects in list. void SetBasisFunctions(TObjArray* functions); set the basis functions in case the fitting function is not; set directly; The TLinearFitter will manage and delete the functions contained in the list. void SetDim(Int_t n); set the number of dimensions. void SetFormula(const char* formula); Additive parts should be separated by ""++"".; Examples (ai are parameters to fit):; 1.fitting function: a0*x0 + a1*x1 + a2*x2; input formula ""x[0]++x[1]++x[2]""; 2.TMath functions can be used:; fitting function: a0*TMath::Gaus(x, 0, 1) + a1*y; input formula: ""TMath::Gaus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearFitter.html:26007,error,error,26007,root/html602/TLinearFitter.html,https://root.cern,https://root.cern/root/html602/TLinearFitter.html,2,['error'],['error']
Availability,"ch bin is used instead of the value of the function at; the centre of the bin.; Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. void Add(const TH1* h1, Double_t c1 = 1); Performs the operation: this = this + c1*h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE1: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; is used , ie this = this + c1*factor*h1; Use the other TH1::Add function if you do not want this feature. void Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*-*Replace contents of this histogram by the addition of h1 and h2*-*-*. this = c1*h1 + c2*h2; if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:40723,error,errors,40723,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['error'],['errors']
Availability,"ch interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . {}. double XMinimum() const; Return current estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iterations converged successfully; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position (default 1.E-8); \@param absTol desired relative error in the minimum position (default = 1.E-10). int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . void SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. int Status() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BrentMinimizer1D.html:3940,toler,tolerance,3940,root/html602/ROOT__Math__BrentMinimizer1D.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BrentMinimizer1D.html,2,['toler'],['tolerance']
Availability,"ch that at least 100 curves are expected to be outside the N% interval, is minimally; # 100 (e.g. Z=1.Ncurve=356, Z=2.Ncurve=2156)) Intervals from the sampling method can be asymmetric,; # and may perform better in the presence of strong correlations, may take; # (much) longer to calculate; model.plotOn(frame, VisualizeError=(r, 1, False), DrawOption=""L"", LineWidth=2, LineColor=""r""); ; # Perform the same type of error visualization on the background component only.; # The VisualizeError() option can generally applied to _any_ kind of; # plot (components, asymmetries, etc..); model.plotOn(frame, VisualizeError=(r, 1), FillColor=""kOrange"", Components=""bkg""); model.plotOn(; frame,; VisualizeError=(r, 1, False),; DrawOption=""L"",; LineWidth=2,; LineColor=""r"",; Components=""bkg"",; LineStyle=""--"",; ); ; # Overlay central value; model.plotOn(frame); model.plotOn(frame, Components=""bkg"", LineStyle=""--""); d.plotOn(frame); frame.SetMinimum(0); ; # Visualize partial fit error; # ------------------------------------------------------; ; # Make plot frame; frame2 = x.frame(Bins=40, Title=""Visualization of 2-sigma partial error from (m,m2)""); ; # Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); ; # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method; model.plotOn(frame2, VisualizeError=(r, {m, m2}, 2), FillColor=""c""); model.plotOn(frame2, Components=""bkg"", VisualizeError=(r, {m, m2}, 2), FillColor=""c""); ; model.plotOn(frame2); model.plotOn(frame2, Components=""bkg"", LineStyle=""--""); frame2.SetMinimum(0); ; # Make plot frame; frame3 = x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8py.html:3495,error,error,3495,doc/master/rf610__visualerror_8py.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8py.html,1,['error'],['error']
Availability,"ch(bname,subbranches);; 1171}; 1172 ; 1173////////////////////////////////////////////////////////////////////////////////; 1174/// Remove the branch b from the Tree cache.; 1175/// if subbranches is true all the branches of the subbranches are; 1176/// also removed from the cache.; 1177///; 1178/// Returns:; 1179/// - 0 branch dropped or not in cache; 1180/// - -1 on error; 1181 ; 1182Int_t TTree::DropBranchFromCache(TBranch *b, bool subbranches); 1183{; 1184 if (!GetTree()) {; 1185 if (LoadTree(0)<0) {; 1186 Error(""DropBranchFromCache"",""Could not load a tree"");; 1187 return -1;; 1188 }; 1189 }; 1190 if (GetTree()) {; 1191 if (GetTree() != this) {; 1192 Int_t res = GetTree()->DropBranchFromCache(b, subbranches);; 1193 if (res<0) {; 1194 Error(""DropBranchFromCache"", ""Error dropping branch"");; 1195 }; 1196 return res;; 1197 }; 1198 } else {; 1199 Error(""DropBranchFromCache"", ""No tree is available. Branch was not dropped from the cache"");; 1200 return -1;; 1201 }; 1202 ; 1203 TFile *f = GetCurrentFile();; 1204 if (!f) {; 1205 Error(""DropBranchFromCache"", ""No file is available. Branch was not dropped from the cache"");; 1206 return -1;; 1207 }; 1208 TTreeCache *tc = GetReadCache(f,true);; 1209 if (!tc) {; 1210 Error(""DropBranchFromCache"", ""No cache is available, branch not dropped"");; 1211 return -1;; 1212 }; 1213 return tc->DropBranch(b,subbranches);; 1214}; 1215 ; 1216////////////////////////////////////////////////////////////////////////////////; 1217/// Add a cloned tree to our list of trees to be notified whenever we change; 1218/// our branch addresses or when we are deleted.; 1219 ; 1220void TTree::AddClone(TTree* clone); 1221{; 1222 if (!fClones) {; 1223 fClones = new TList();; 1224 fClones->SetOwner(false);; 1225 // So that the clones are automatically removed from the list when; 1226 // they are deleted.; 1227 {; 1228 R__LOCKGUARD(gROOTMutex);; 1229 gROOT->GetListOfCleanups()->Add(fClones);; 1230 }; 1231 }; 1232 if (!fClones->FindObject(clone)) {; 1233 fClone",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:42598,avail,available,42598,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['avail'],['available']
Availability,"ch* parent, const char* name, TVirtualCollectionProxy* cont, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t compress = -1); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree* tree, TBranch* parent, const char* name, TVirtualCollectionProxy* cont, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t compress = -1); -- Init when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. ~TBranchElement(); -- Destructor. TStreamerInfo* GetInfo() const; -- Get streamer info for the branch class. void Browse(TBrowser* b); -- Browse the branch content. void BuildTitle(const char* name); -- Set branch and leaf name and title in the case of a container sub-branch. Int_t Fill(); -- Loop on all leaves of this branch to fill the basket buffer. The function returns the number of bytes committed to the; individual branches. If a write error occurs, the number of; bytes returned is -1. If no data are written, because, e.g.,; the branch is disabled, the number of bytes returned is 0. Note: We not not use any member functions from TLeafElement!. void FillLeaves(TBuffer& b); -- Fill a buffer from the leaves of this branch. Note: We do not use any member functions from TLeafElement!; Except in the MakeClass case of a TClonesArray sub-branch. TBranch* FindBranch(const char* name); Find the immediate sub-branch with passed name. TLeaf* FindLeaf(const char* name); -- Find the leaf corresponding to the name 'searchname'. char* GetAddress() const; -- Get the branch address. If we are *not* owned by a MakeClass() tree:. If we are a top-level branch, return a pointer; to the pointer to our object. If we are *not* a top-level branch, return a pointer; to our object. If we are owned by a MakeClass() tree:. Return a pointer to our object. void InitInfo(); -- Init the streamer info for the branch class, try to compensate for class code unload/reload ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchElement.html:20411,error,error,20411,root/html528/TBranchElement.html,https://root.cern,https://root.cern/root/html528/TBranchElement.html,1,['error'],['error']
Availability,"ch. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::MisClassificationError. class TMVA::MisClassificationError: public TMVA::SeparationBase. Implementation of the MisClassificationError as separation criterion. Function Members (Methods); public:. virtual~MisClassificationError(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::MisClassificationErrorMisClassificationError(); TMVA::MisClassificationErrorMisClassificationError(const TMVA::MisClassificationError& g); TMVA::MisClassificationError&operator=(const TMVA::MisClassificationError&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Misclassifiacton error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)). MisClassificationError(); consturctor for the Misclassification error. { fName = ""MisCl""; }. MisClassificationError(const TMVA::MisClassificationError& g); copy constructor. {}. virtual ~MisClassificationError(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MisClassificationError.html:1503,error,error,1503,root/html534/TMVA__MisClassificationError.html,https://root.cern,https://root.cern/root/html534/TMVA__MisClassificationError.html,2,['error'],['error']
Availability,"chElement, TBranchObject, and TBranchSTL.; Definition at line 1706 of file TBranch.cxx. ◆ GetEntryExport(). Int_t TBranch::GetEntryExport ; (; Long64_t ; entry, . Int_t ; getall, . TClonesArray * ; li, . Int_t ; nentries . ). virtual . Read all leaves of an entry and export buffers to real objects in a TClonesArray list. ; Returns total number of bytes read. ; Definition at line 1762 of file TBranch.cxx. ◆ GetEntryNumber(). Long64_t TBranch::GetEntryNumber ; (; ); const. inline . Definition at line 242 of file TBranch.h. ◆ GetEntryOffsetLen(). Int_t TBranch::GetEntryOffsetLen ; (; ); const. inline . Definition at line 227 of file TBranch.h. ◆ GetEvent(). Int_t TBranch::GetEvent ; (; Long64_t ; entry = 0). inline . Definition at line 228 of file TBranch.h. ◆ GetExpectedType(). Int_t TBranch::GetExpectedType ; (; TClass *& ; clptr, . EDataType & ; type . ). virtual . Fill expectedClass and expectedType with information on the data type of the object/values contained in this branch (and thus the type of pointers expected to be passed to Set[Branch]Address return 0 in case of success and > 0 in case of failure. ; Reimplemented in TBranchElement, TBranchObject, and TBranchSTL.; Definition at line 1834 of file TBranch.cxx. ◆ GetFile(). TFile * TBranch::GetFile ; (; Int_t ; mode = 0). virtual . Return pointer to the file where branch buffers reside, returns 0 in case branch buffers reside in the same file as tree header. ; If mode is 1 the branch buffer file is recreated. ; Definition at line 1853 of file TBranch.cxx. ◆ GetFileName(). const char * TBranch::GetFileName ; (; ); const. inline . Definition at line 234 of file TBranch.h. ◆ GetFirstEntry(). Long64_t TBranch::GetFirstEntry ; (; ); const. inline . Definition at line 243 of file TBranch.h. ◆ GetFreshBasket(). TBasket * TBranch::GetFreshBasket ; (; Int_t ; basketnumber, . TBuffer * ; user_buffer . ). protected . Return a fresh basket by either reusing an existing basket that needs to be drop (according to TTree::Memo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:50715,failure,failure,50715,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['failure'],['failure']
Availability,"chStyle(). void TTree::SetBranchStyle ; (; Int_t ; style = 1). static . Set the current branch style. ; (static function). style = 0 old Branch; style = 1 new Bronch . Definition at line 8660 of file TTree.cxx. ◆ SetCacheEntryRange(). Int_t TTree::SetCacheEntryRange ; (; Long64_t ; first, . Long64_t ; last . ). virtual . interface to TTreeCache to set the cache entry range ; Returns:; 0 entry range set; -1 on error . Definition at line 8821 of file TTree.cxx. ◆ SetCacheLearnEntries(). void TTree::SetCacheLearnEntries ; (; Int_t ; n = 10). virtual . Interface to TTreeCache to set the number of entries for the learning phase. ; Definition at line 8855 of file TTree.cxx. ◆ SetCacheSize(). Int_t TTree::SetCacheSize ; (; Long64_t ; cacheSize = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8676 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an existing autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false: this is a user requested cache. cacheSize is used to size the cache. This cache should never be automatically adjusted.; Returns:; 0 size set, or existing autosized cache almost large enough. (cache was created if possible); -1 on error . Definition at line 8702 of file TTree.cxx. ◆ SetChainOffset(). virtual void TTree::SetChainOffset ; (; Long64_t ; offset = 0). inlinevirtual . Definition at line 609 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:207894,error,error,207894,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['error'],['error']
Availability,"change; its position with these lines (""h"" being the pointer to the histogram):. Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. To change the type of information for an histogram with an existing; TPaveStats one should do:. st->SetOptStat(mode);. Where ""mode"" has the same meaning than when calling; gStyle->SetOptStat(mode) (see above).; One can delete the statistics box for a histogram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); . Function Members (Methods); public:. TPaveStats(); TPaveStats(const TPaveStats&); TPaveStats(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t* option = ""br""); virtual~TPaveStats(); voidTObject::AbstractMethod(const char* method) const; virtual TBox*AddBox(Double_t, Double_t, Double_t, Double_t); virtual TLine*AddLine(Double_t, Double_t, Double_t, Double_t); virtual TText*TPaveText::AddText(const char* label); virtual TText*TPaveText::AddText(Double_t x1, Double_t y1, const char* label); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTPaveText::Clear(Option_t* option = """")MENU ; virtual TObject*TObject::Clone(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaveStats.html:4637,error,errors,4637,root/html528/TPaveStats.html,https://root.cern,https://root.cern/root/html528/TPaveStats.html,3,['error'],['errors']
Availability,"change; its position with these lines (""h"" being the pointer to the histogram):. Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. To change the type of information for an histogram with an existing; TPaveStats one should do:. st->SetOptStat(mode);. Where ""mode"" has the same meaning than when calling; gStyle->SetOptStat(mode) (see above).; One can delete the statistics box for a histogram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); Statistics box editing; The following example show how to remove and add a line in a statistics box. Picture; Source. TCanvas *statsEditing() {; // This example shows:; // - how to remove a stat element from the stat box; // - how to add a new one; //; // Author: Olivier Couet. // Create and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();. // Retrieve the stat box; TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *list = ps->GetListOfLines();. // Remove the RMS line; TText *tconst = ps->GetLineWith(""RMS"");; list->Remove(tconst);. // Add a new line in the stat box.; // Note that ""="" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPaveStats.html:4700,error,errors,4700,root/html602/TPaveStats.html,https://root.cern,https://root.cern/root/html602/TPaveStats.html,2,['error'],['errors']
Availability,"change; its position with these lines (""h"" being the pointer to the histogram):. Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. To change the type of information for an histogram with an existing; TPaveStats one should do:. st->SetOptStat(mode);. Where ""mode"" has the same meaning than when calling; gStyle->SetOptStat(mode) (see above).; One can delete the statistics box for a histogram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); Statistics box editing; The following example show how to remove and add a line in a statistics box. Picture; Source. TCanvas *statsEditing() {; // This example shows:; // - how to remove a stat element from the stat box; // - how to add a new one; //n cte and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();. TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *list = ps->GetListOfLines();. ; TText *tconst = ps->GetLineWith(""RMS"");; list->Remove(tconst);. ; ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveStats.html:4700,error,errors,4700,root/html534/TPaveStats.html,https://root.cern,https://root.cern/root/html534/TPaveStats.html,1,['error'],['errors']
Availability,"change; its position with these lines (""h"" being the pointer to the histogram):. Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. To change the type of information for an histogram with an existing; TPaveStats one should do:. st->SetOptStat(mode);. Where ""mode"" has the same meaning than when calling; gStyle->SetOptStat(mode) (see above).; One can delete the statistics box for a histogram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); The error bars options. ""E""; Default. Shows only the error bars, not a marker. ""E1""; Small lines are drawn at the end of the error bars. ""E2""; Error rectangles are drawn. ""E3""; A filled area is drawn through the end points of the vertical error bars. ""E4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:18746,error,errors,18746,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['errors']
Availability,"changed appropriately; 367 // by a cd() or needs to be set to zero.; 368 if (gFile == this) {; 369 gFile = nullptr;; 370 }; 371 ; 372 TDirectory::CleanTargets();; 373}; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376/// Make a clone of an object using the Streamer facility.; 377///; 378/// If the object derives from TNamed, this function is called; 379/// by TNamed::Clone. TNamed::Clone uses the optional argument newname to set; 380/// a new name to the newly created object.; 381///; 382/// If autoadd is true and if the object class has a; 383/// DirectoryAutoAdd function, it will be called at the end of the; 384/// function with the parameter gDirectory. This usually means that; 385/// the object will be appended to the current ROOT directory.; 386 ; 387TObject *TDirectoryFile::CloneObject(const TObject *obj, Bool_t autoadd /* = kTRUE */); 388{; 389 // if no default ctor return immediately (error issued by New()); 390 char *pobj = (char*)obj->IsA()->New();; 391 if (!pobj) return nullptr;; 392 ; 393 Int_t baseOffset = obj->IsA()->GetBaseClassOffset(TObject::Class());; 394 if (baseOffset==-1) {; 395 // cl does not inherit from TObject.; 396 // Since this is not supported in this function, the only reason we could reach this code; 397 // is because something is screwed up in the ROOT code.; 398 Fatal(""CloneObject"",""Incorrect detection of the inheritance from TObject for class %s.\n"",; 399 obj->IsA()->GetName());; 400 }; 401 TObject *newobj = (TObject*)(pobj+baseOffset);; 402 ; 403 //create a buffer where the object will be streamed; 404 {; 405 // NOTE: do we still need to make this change to gFile?; 406 // NOTE: This can not be 'gDirectory=0' as at least roofit expect gDirectory to not be null; 407 // during the streaming ....; 408 TFile *filsav = gFile;; 409 gFile = nullptr;; 410 const Int_t bufsize = 10000;; 411 TBufferFile buffer(TBuffer::kWrite,bufsize);; 412 buffer.MapObject(obj); //register obj in map to handle self",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:12654,error,error,12654,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['error'],['error']
Availability,"changes; Bool_tTGedFrame::fAvoidSignalflag for executing slots; TGCompositeFrame*fBFrameFrame containing Apply/Undo; Pixel_tTGFrame::fBackgroundframe background color; Double_tfBl1iInitial half length in x at low z and y low edge; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; TGCompositeFrame*fDFrameFrame containing Delayed draw; Int_tTGFrame::fDNDStateEDNDFlags; TGCheckButton*fDelayedCheck button for delayed draw; Double_tfDziInitial Dz; TGNumberEntry*fEAlpha1Number entry for Alpha1; TGNumberEntry*fEBl1Number entry for Bl1; TGNumberEntry*fEDzNumber entry for DZ; TGNumberEntry*fEH1Number entry for H1; TGNumberEntry*fEPhiNumber entry for Theta; TGNumberEntry*fESc1Number entry for lower scale; TGNumberEntry*fESc2Number entry for upper scale; TGNumberEntry*fEThetaNumber entry for Theta; TGNumberEntry*fETl1Number entry for Tl1; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; Double_tfH1iInitial half length in y at low z; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tfIsModifiedFlag that volume was modified; Bool_tfIsShapeEditableFlag that the shape can be changed; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTrapEditor.html:19214,mask,mask,19214,root/html602/TGeoTrapEditor.html,https://root.cern,https://root.cern/root/html602/TGeoTrapEditor.html,2,['mask'],['mask']
Availability,"char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:77222,error,error,77222,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['error'],['error']
Availability,"char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . Parser(...) with non-const argv. ; Definition at line 1089 of file OptionParser.h. ◆ Parser() [4/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . const char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:9881,error,error,9881,doc/v632/classROOT_1_1option_1_1Parser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html,2,['error'],['error']
Availability,"char ** ; buffer, . EImageFileTypes ; type = TImage::kPng . ). overridevirtual . Create image from compressed buffer. ; Supported formats:. PNG - by default; XPM - two options exist:; xpm as a single string (raw buffer). Such string is returned by GetImageBuffer method. For example: char *buf;; int sz;; im1->GetImageBuffer(&buf, &int, TImage::kXpm); /*raw buffer*&zwj;/; TImage *im2 = TImage::Create();; im2->SetImageBuffer(&buf, TImage::kXpm);; TImage::kXpm@ kXpmDefinition TImage.h:37. xpm as an array of strings (pre-parsed) For example:; char *xpm[] = {; ""64 28 58 1"",; "" c #0A030C"",; "". c #1C171B""; ...; TImage *im = TImage::Create();; im->SetImageBuffer(xpm, TImage::kXpm);; . Reimplemented from TImage.; Definition at line 6042 of file TASImage.cxx. ◆ SetJpegDpi(). Bool_t TASImage::SetJpegDpi ; (; const char * ; name, . UInt_t ; set = 72 . ). Set an image printing resolution in Dots Per Inch units. ; Parameters. [in]name- the name of jpeg file. ; [in]set- dpi resolution. Returns kFALSE in case of error. ; Definition at line 6782 of file TASImage.cxx. ◆ SetPalette(). void TASImage::SetPalette ; (; const TImagePalette * ; palette). overridevirtual . Set a new palette to an image. ; Only images that were created with the SetImage() functions can be modified with this function. The previously used palette is destroyed. ; Reimplemented from TAttImage.; Definition at line 1861 of file TASImage.cxx. ◆ SetPaletteEnabled(). void TASImage::SetPaletteEnabled ; (; Bool_t ; on = kTRUE). overridevirtual . Switch on/off the image palette. ; That also invokes calling vectorization of image. ; Reimplemented from TAttImage.; Definition at line 6711 of file TASImage.cxx. ◆ SetTitle(). void TASImage::SetTitle ; (; const char * ; title = """"). overridevirtual . Set a title for an image. ; Reimplemented from TNamed.; Definition at line 6297 of file TASImage.cxx. ◆ Slice(). void TASImage::Slice ; (; UInt_t ; xStart, . UInt_t ; xEnd, . UInt_t ; yStart, . UInt_t ; yEnd, . UInt_t ; toWidth, . U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:75667,error,error,75667,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['error'],['error']
Availability,"char *expandedfname);; 279 Bool_t IsBatch() const { return fBatch; }; 280 Bool_t IsExecutingMacro() const { return fExecutingMacro; }; 281 Bool_t IsFolder() const override { return kTRUE; }; 282 Bool_t IsInterrupted() const { return fInterrupt; }; 283 Bool_t IsEscaped() const { return fEscape; }; 284 Bool_t IsLineProcessing() const { return fLineIsProcessing ? kTRUE : kFALSE; }; 285 Bool_t IsProofServ() const { return fName == ""proofserv"" ? kTRUE : kFALSE; }; 286 Bool_t IsRootFile(const char *filename) const;; 287 Bool_t IsWebDisplay() const { return fIsWebDisplay; }; 288 Bool_t IsWebDisplayBatch() const { return fIsWebDisplayBatch; }; 289 void ls(Option_t *option = """") const override;; 290 Int_t LoadClass(const char *classname, const char *libname, Bool_t check = kFALSE);; 291 TClass *LoadClass(const char *name, Bool_t silent = kFALSE) const;; 292 Int_t LoadMacro(const char *filename, Int_t *error = nullptr, Bool_t check = kFALSE);; 293 Longptr_t Macro(const char *filename, Int_t *error = nullptr, Bool_t padUpdate = kTRUE);; 294 TCanvas *MakeDefCanvas() const;; 295 void Message(Int_t id, const TObject *obj);; 296 Bool_t MustClean() const { return fMustClean; }; 297 Longptr_t ProcessLine(const char *line, Int_t *error = nullptr);; 298 Longptr_t ProcessLineSync(const char *line, Int_t *error = nullptr);; 299 Longptr_t ProcessLineFast(const char *line, Int_t *error = nullptr);; 300 Bool_t ReadingObject() const;; 301 void RecursiveRemove(TObject *obj) override;; 302 void RefreshBrowsers();; 303 static void RegisterModule(const char* modulename,; 304 const char** headers,; 305 const char** includePaths,; 306 const char* payLoadCode,; 307 const char* fwdDeclCode,; 308 void (*triggerFunc)(),; 309 const FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip,; 310 const char** classesHeaders,; 311 bool hasCxxModule = false);; 312 TObject *Remove(TObject*) override;; 313 void RemoveClass(TClass *);; 314 void Reset(Option_t *option="""");; 315 void ResetClassSaved();; 316 void SaveCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:14901,error,error,14901,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,2,['error'],['error']
Availability,"char *filter=""*"");  Create the index files for the product, modules, all types, etc. ;  ; void MakeTree (const char *className, Bool_t force=kFALSE);  Make an inheritance tree. ;  ; void ReplaceSpecialChars (std::ostream &, const char *);  ; void SetAuthorTag (const char *tag);  ; void SetBatch (Bool_t batch=kTRUE);  ; void SetCharset (const char *charset);  ; void SetClassDocTag (const char *tag);  ; void SetCopyrightTag (const char *tag);  ; void SetCounterFormat (const char *format);  ; void SetDeclFileName (TClass *cl, const char *filename);  Explicitly set a decl file name for TClass cl. ;  ; void SetDocPath (const char *path);  ; void SetDocStyle (const char *style);  ; void SetDotDir (const char *dir);  ; void SetEscape (char='\\');  ; void SetEtcDir (const char *dir);  ; void SetFileDefinition (const TFileDefinition &fd);  Set the file defining object to be used; can also be a user derived object (a la traits). ;  ; void SetFooter (const char *file);  ; void SetFoundDot (Bool_t found=kTRUE);  Set whether ""dot"" (a GraphViz utility) is available. ;  ; void SetHeader (const char *file);  ; void SetHomepage (const char *url);  ; void SetImplFileName (TClass *cl, const char *filename);  Explicitly set a impl file name for TClass cl. ;  ; void SetIncludePath (const char *dir);  ; void SetInputDir (const char *dir);  Set the directory containing the source files. ;  ; void SetLastUpdateTag (const char *tag);  ; void SetLibURL (const char *lib, const char *url);  ; void SetMacroPath (const char *path);  ; void SetModuleDefinition (const TModuleDefinition &md);  Set the module defining object to be used; can also be a user derived object (a la traits). ;  ; void SetOutputDir (const char *dir);  Set the directory where the HTML pages should be written to. ;  ; void SetPathDefinition (const TPathDefinition &pd);  Set the path defining object to be used; can also be a user derived object (a la traits). ;  ; void SetProductName (const char *product);  ; void SetRootURL (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:24432,avail,available,24432,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,2,['avail'],['available']
Availability,"char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphErrors::Streamervoid Streamer(TBuffer &) overrideStream an object of class TGraphErrors.Definition TGraphErrors.cxx:817; TGraphErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphErrors.cxx:598; TGraphErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)Add a point with errorbars to the graph.Definition TGraphErrors.cxx:377; TGraphErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraphErrors.h:29; TGraphErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphErrors.cxx:711; TGraphErrors::SetPointErrorvirtual void SetPointError(Double_t ex, Double_t ey)Set ex and ey values for point pointed by the mouse.Definition TGraphErrors.cxx:769; TGraphErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with errors.Definition TGraphErrors.cxx:573; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphErrors.cxx:856; TGraphErrors::ApplyXvirtual void ApplyX(TF1 *f)Apply function to all the data points .Definition TGraphErrors.cxx:426; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::operator=TGraphErrors & operator=(const TGraphErrors &gr)TGraphErrors assignment operator.Definition TGraphErrors.cxx:184;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:34384,error,errors,34384,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,1,['error'],['errors']
Availability,"char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetErrno ();  Static function returning system error number. ;  ; static void ResetErrno ();  Static function resetting system error number. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Bool_t ConsistentWith (const char *path, void *dirptr=nullptr);  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; virtual void DoBeep (Int_t=-1, Int_t=-1) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:29330,error,error,29330,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['error'],['error']
Availability,"char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF)TH3protectedstatic; DoProjectProfile2D(const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) constTH3protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; fArrayTArrayD; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t) overrideTH3protectedvirtual; Fill(Double_t, Double_t) overrideTH3inlineprotectedvirtual; Fill(const char *, Double_t) overrideTH3inlineprotectedvirtual; Fill(Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3D-members.html:5905,error,error,5905,doc/master/classTH3D-members.html,https://root.cern,https://root.cern/doc/master/classTH3D-members.html,2,['error'],['error']
Availability,"char * ; pack, . TString & ; par . ). static . Get the full path to PAR, looking also in the global dirs. ; Returns -1 if not found, 0 if available in global dirs, 1 if it can be uploaded from the local package dir. For the cases >= 0, par is filled with the path of the PAR file ; Definition at line 934 of file TPackMgr.cxx. ◆ GetDir(). const char * TPackMgr::GetDir ; (; ); const. inline . Definition at line 77 of file TPackMgr.h. ◆ GetDownloadDir(). Int_t TPackMgr::GetDownloadDir ; (; TString & ; dldir). Method to get the download dir; create if not existing Return -1 in case of error (not found; not created), 0 otherwise. ; Definition at line 534 of file TPackMgr.cxx. ◆ GetEnabledPackages(). void TPackMgr::GetEnabledPackages ; (; TString & ; packlist). Method to get a semi-colon separated list with the names of the enabled packages. ; Definition at line 501 of file TPackMgr.cxx. ◆ GetList(). TList * TPackMgr::GetList ; (; ); const. Get list of available packages Returns a pointer to a TList object, transferring ownership to the caller. ; Definition at line 621 of file TPackMgr.cxx. ◆ GetListOfEnabled(). TList * TPackMgr::GetListOfEnabled ; (; ); const. Get list of enabled packages Returns a pointer to a TList object, transferring ownership to the caller. ; Definition at line 644 of file TPackMgr.cxx. ◆ GetLock(). TLockPath * TPackMgr::GetLock ; (; ). inline . Definition at line 65 of file TPackMgr.h. ◆ GetMD5(). TMD5 * TPackMgr::GetMD5 ; (; const char * ; pack). Get MD5 checksum of the PAR file corresponding to given package Returns a pointer to a TMD5 object, transferring ownership to the caller. ; Definition at line 692 of file TPackMgr.cxx. ◆ GetName(). const char * TPackMgr::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TNamed.; Definition at line 61 of file TPackMgr.h. ◆ GetPackDir(). Int_t TPackMgr::GetPack",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:17763,avail,available,17763,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['avail'],['available']
Availability,"char * ; s2 . ). Compare TString with a char *. ; Definition at line 1482 of file TString.cxx. ◆ operator==() [2/4]. Bool_t operator== ; (; const TSubString & ; s1, . const TSubString & ; s2 . ). Compare two sub-strings. ; Definition at line 1731 of file TString.cxx. ◆ operator==() [3/4]. Bool_t operator== ; (; const TSubString & ; ss, . const char * ; cs . ). Compare sub-string to char *. ; Definition at line 1707 of file TString.cxx. ◆ operator==() [4/4]. Bool_t operator== ; (; const TSubString & ; ss, . const TString & ; s . ). Compare sub-string to string. ; Definition at line 1721 of file TString.cxx. ◆ operator>>(). TBuffer & operator>> ; (; TBuffer & ; buf, . TString *& ; s . ). Read string from TBuffer. Function declared in ClassDef. ; Definition at line 1461 of file TString.cxx. ◆ Printf(). void Printf ; (; const char * ; fmt, .  ; ... . ). Formats a string in a circular formatting buffer and prints the string. ; Appends a newline. If gPrintViaErrorHandler is true it will print via the currently active ROOT error handler. ; Definition at line 2503 of file TString.cxx. ◆ rotl64(). uint64_t rotl64 ; (; uint64_t ; x, . int8_t ; r . ). inline . Definition at line 720 of file TString.cxx. ◆ SlowFormat(). static char * SlowFormat ; (; const char * ; format, . va_list ; ap, . int ; hint . ). static . Format a string in a formatting buffer (using a printf style format descriptor). ; Definition at line 2394 of file TString.cxx. ◆ StrDup(). char * StrDup ; (; const char * ; str). Duplicate the string str. ; The returned string has to be deleted by the user. ; Definition at line 2557 of file TString.cxx. ◆ Strip(). char * Strip ; (; const char * ; s, . char ; c . ). Strip leading and trailing c (blanks by default) from a string. ; The returned string has to be deleted by the user. ; Definition at line 2521 of file TString.cxx. ◆ SwapInt(). static UInt_t SwapInt ; (; UInt_t ; x). inlinestatic . Definition at line 556 of file TString.cxx. ◆ ToLower(). TString ToLower ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx.html:7633,error,error,7633,doc/master/TString_8cxx.html,https://root.cern,https://root.cern/doc/master/TString_8cxx.html,1,['error'],['error']
Availability,"char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TInterpreter * Instance ();  returns gInterpreter global ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void Execute (TMethod *method, TObjArray *params, int *error=nullptr) override=0;  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual Bool_t SetSuspendAutoParsing (Bool_t value)=0;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Friends; class SuspendAutoParsing;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TInterpreter.h>. Inheritance diagram for TInterpreter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ AutoLoadCallBack_t. typedef int(* TInterpreter::AutoLoadCallBack_t) (const char *). Definition at line 132 of file TInterpreter.h. ◆ DeclId_t. typedef TDictionary::DeclId_t TInterpreter::DeclId_t. Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:34581,error,error,34581,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['error'],['error']
Availability,"char buf[MG_BUF_LEN];; 10879 int success = 0;; 10880 ; 10881 if (!conn) {; 10882 return 0;; 10883 }; 10884 ; 10885 expect = mg_get_header(conn, ""Expect"");; 10886 DEBUG_ASSERT(fp != NULL);; 10887 if (!fp) {; 10888 mg_send_http_error(conn, 500, ""%s"", ""Error: NULL File"");; 10889 return 0;; 10890 }; 10891 ; 10892 if ((expect != NULL) && (mg_strcasecmp(expect, ""100-continue"") != 0)) {; 10893 /* Client sent an ""Expect: xyz"" header and xyz is not 100-continue.; 10894 */; 10895 mg_send_http_error(conn, 417, ""Error: Can not fulfill expectation"");; 10896 } else {; 10897 if (expect != NULL) {; 10898 (void)mg_printf(conn, ""%s"", ""HTTP/1.1 100 Continue\r\n\r\n"");; 10899 conn->status_code = 100;; 10900 } else {; 10901 conn->status_code = 200;; 10902 }; 10903 ; 10904 DEBUG_ASSERT(conn->consumed_content == 0);; 10905 ; 10906 if (conn->consumed_content != 0) {; 10907 mg_send_http_error(conn, 500, ""%s"", ""Error: Size mismatch"");; 10908 return 0;; 10909 }; 10910 ; 10911 for (;;) {; 10912 int nread = mg_read(conn, buf, sizeof(buf));; 10913 if (nread <= 0) {; 10914 success = (nread == 0);; 10915 break;; 10916 }; 10917 if (push_all(conn->phys_ctx, fp, sock, ssl, buf, nread) != nread) {; 10918 break;; 10919 }; 10920 }; 10921 ; 10922 /* Each error code path in this function must send an error */; 10923 if (!success) {; 10924 /* NOTE: Maybe some data has already been sent. */; 10925 /* TODO (low): If some data has been sent, a correct error; 10926 * reply can no longer be sent, so just close the connection */; 10927 mg_send_http_error(conn, 500, ""%s"", """");; 10928 }; 10929 }; 10930 ; 10931 return success;; 10932}; 10933#endif; 10934 ; 10935 ; 10936#if defined(USE_TIMERS); 10937 ; 10938#define TIMER_API static; 10939#include ""timer.inl""; 10940 ; 10941#endif /* USE_TIMERS */; 10942 ; 10943 ; 10944#if !defined(NO_CGI); 10945/* This structure helps to create an environment for the spawned CGI; 10946 * program.; 10947 * Environment is an array of ""VARIABLE=VALUE\0"" ASCII strings,; 10948 * last elem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:314163,error,error,314163,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"char buf[MG_BUF_LEN];; 10880 int success = 0;; 10881 ; 10882 if (!conn) {; 10883 return 0;; 10884 }; 10885 ; 10886 expect = mg_get_header(conn, ""Expect"");; 10887 DEBUG_ASSERT(fp != NULL);; 10888 if (!fp) {; 10889 mg_send_http_error(conn, 500, ""%s"", ""Error: NULL File"");; 10890 return 0;; 10891 }; 10892 ; 10893 if ((expect != NULL) && (mg_strcasecmp(expect, ""100-continue"") != 0)) {; 10894 /* Client sent an ""Expect: xyz"" header and xyz is not 100-continue.; 10895 */; 10896 mg_send_http_error(conn, 417, ""Error: Can not fulfill expectation"");; 10897 } else {; 10898 if (expect != NULL) {; 10899 (void)mg_printf(conn, ""%s"", ""HTTP/1.1 100 Continue\r\n\r\n"");; 10900 conn->status_code = 100;; 10901 } else {; 10902 conn->status_code = 200;; 10903 }; 10904 ; 10905 DEBUG_ASSERT(conn->consumed_content == 0);; 10906 ; 10907 if (conn->consumed_content != 0) {; 10908 mg_send_http_error(conn, 500, ""%s"", ""Error: Size mismatch"");; 10909 return 0;; 10910 }; 10911 ; 10912 for (;;) {; 10913 int nread = mg_read(conn, buf, sizeof(buf));; 10914 if (nread <= 0) {; 10915 success = (nread == 0);; 10916 break;; 10917 }; 10918 if (push_all(conn->phys_ctx, fp, sock, ssl, buf, nread) != nread) {; 10919 break;; 10920 }; 10921 }; 10922 ; 10923 /* Each error code path in this function must send an error */; 10924 if (!success) {; 10925 /* NOTE: Maybe some data has already been sent. */; 10926 /* TODO (low): If some data has been sent, a correct error; 10927 * reply can no longer be sent, so just close the connection */; 10928 mg_send_http_error(conn, 500, ""%s"", """");; 10929 }; 10930 }; 10931 ; 10932 return success;; 10933}; 10934#endif; 10935 ; 10936 ; 10937#if defined(USE_TIMERS); 10938 ; 10939#define TIMER_API static; 10940#include ""timer.inl""; 10941 ; 10942#endif /* USE_TIMERS */; 10943 ; 10944 ; 10945#if !defined(NO_CGI); 10946/* This structure helps to create an environment for the spawned CGI; 10947 * program.; 10948 * Environment is an array of ""VARIABLE=VALUE\0"" ASCII strings,; 10949 * last elem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:314196,error,error,314196,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['error'],['error']
Availability,"char* = ""#000000"", UInt_t = 1); virtual voidDrawPolyLine(UInt_t, TPoint*, const char* = ""#000000"", UInt_t = 1, TImage::ECoordMode = kCoordModeOrigin); virtual voidDrawRectangle(UInt_t, UInt_t, UInt_t, UInt_t, const char* = ""#000000"", UInt_t = 1); virtual voidDrawSegments(UInt_t, Segment_t*, const char* = ""#000000"", UInt_t = 1); virtual voidDrawStraightEllips(Int_t, Int_t, Int_t, Int_t, const char* = ""#000000"", Int_t = 1); virtual voidDrawText(TText*, Int_t = 0, Int_t = 0); virtual voidDrawText(Int_t = 0, Int_t = 0, const char* = """", Int_t = 12, const char* = 0, const char* = ""fixed"", TImage::EText3DType = TImage::kPlain, const char* = 0, Float_t = 0); virtual voidTObject::Dump() constMENU ; virtual voidTAttImage::EditorClosed(); virtual voidEndPaint(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillPolygon(UInt_t, TPoint*, TImage*); virtual voidFillPolygon(UInt_t, TPoint*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual voidFillRectangle(const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, TImage*); virtual voidFillSpans(UInt_t, TPoint*, UInt_t*, const char* = ""#000000"", const char* = 0, UInt_t = 16, UInt_t = 16); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFlip(Int_t = 180); virtual voidFloodFill(Int_t, Int_t, const char*, const char*, const char* = 0); virtual voidFromGLBuffer(UChar_t*, UInt_t, UInt_t); virtual voidFromPad(TVirtualPad*, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TImage.html:3969,error,error,3969,root/html528/TImage.html,https://root.cern,https://root.cern/root/html528/TImage.html,6,['error'],['error']
Availability,"char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. void ForceReload(TClass* oldcl); we found at least one equivalent.; let's force a reload. void Init(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, const char* dfil, const char* ifil, Int_t dl, Int_t il, ClassInfo_t* classInfo, Bool_t silent); Initialize a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. ~TClass(); TClass dtor. Deletes all list that might have been created. Int_t ReadRules(); Read the class.rules files from the default location:.; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules). Int_t ReadRules(const char* filename); Read a class.rules file which contains one rule per line with comment; starting with a #; Returns the number of rules loaded.; Returns -1 in case of error. Bool_t AddRule(const char* rule); Add a schema evolution customization rule.; The syntax of the rule can be either the short form:; [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:27386,error,error,27386,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['error'],['error']
Availability,"char* env, const char* ord = ""0""); Get value of environment variable 'env' on node 'ord'. Int_t GetRC(const char* RCenv, Int_t& env, const char* ord = ""0""); Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, TString& env, const char* ord = ""0""); Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. Int_t SendCurrentState(TList* list); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. current) state of the master to all; slave servers. Currently the initial state includes: log level.; Returns the number of active slaves. Returns -1 in case of error. Bool_t CheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp | kCpBin)); Check if a file needs to be send to the slave. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:66769,error,error,66769,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['error'],['error']
Availability,"char* env, const char* ord = ""0""); Get value of environment variable 'env' on node 'ord'. Int_t GetRC(const char* RCenv, Int_t& env, const char* ord = ""0""); Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, TString& env, const char* ord = ""0""); Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. Int_t SendCurrentState(TList* list); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. current) state of the master to all; slave servers. Currently the initial state includes: log level.; Returns the number of active slaves. Returns -1 in case of error. Bool_t CheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp|kCpBin)); Check if a file needs to be send to the slave. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:63946,error,error,63946,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['error'],['error']
Availability,"char* method) const; virtual Int_tAddProcessed(TSlave*, TProofProgressStatus*, Double_t, TList**); virtual Int_tAddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tGetBytesRead() const; TList*GetConfigParams(Bool_t steal = kFALSE); Double_tGetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesProcessed() const; virtual Int_tGetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tGetInitTime() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* sl, TMessage* r); virtual char*TObject::GetObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPacketizer.html:2208,error,error,2208,root/html534/TVirtualPacketizer.html,https://root.cern,https://root.cern/root/html534/TVirtualPacketizer.html,1,['error'],['error']
Availability,"char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& text) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TText*DrawText(Double_t x, Double_t y, const char* text); virtual TText*DrawTextNDC(Double_t x, Double_t y, const char* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidGetControlBox(Int_t x, Int_t y, Double_t theta, Int_t* cBoxX, Int_t* cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidGetTextAdvance(UInt_t& a, const char* text, const Bool_t kern = kTRUE) const; virtual Short_tTAttText::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TText.html:1780,error,error,1780,root/html528/TText.html,https://root.cern,https://root.cern/root/html528/TText.html,3,['error'],['error']
Availability,"char* method) const; voidAddClass(TClassDocInfo* cl); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetClasses(); const char*GetDoc() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THashList&GetSub(); TModuleDocInfo*GetSuper() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TModuleDocInfo.html:2142,error,error,2142,root/html528/TModuleDocInfo.html,https://root.cern,https://root.cern/root/html528/TModuleDocInfo.html,6,['error'],['error']
Availability,"char* method, const char* msgfmt) const; virtual Double_tROOT::v5::TFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual TClass*EvalClass() const; virtual Double_tEvalInstance(Int_t i = 0, const char*[] stringStack = 0); virtual Long64_tEvalInstance64(Int_t i = 0, const char*[] stringStack = 0); doubleEvalInstance<double>(Int_t i = 0, const char*[] stringStack = 0); long doubleEvalInstance<long double>(Int_t i = 0, const char*[] stringStack = 0); Long64_tEvalInstance<long long>(Int_t i = 0, const char*[] stringStack = 0); virtual LongDouble_tEvalInstanceLD(Int_t i = 0, const char*[] stringStack = 0); virtual void*EvalObject(Int_t i = 0); virtual Double_tROOT::v5::TFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tROOT::v5::TFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual const char*EvalStringInstance(Int_t i = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringROOT::v5::TFormula::GetExpFormula(Option_t* option = """") const; virtual const char*TObject::GetIconName() const; virtual TLeaf*GetLeaf(Int_t n) const; TFormLeafInfo*GetLeafInfo(Int_t code) const; virtual const TObject*ROOT::v5::TFormula::GetLinearPart(Int_t i); TTreeFormulaManager*GetManager() const; static voidROOT::v5::TFormula::GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); TMethodCall*GetMethodCall(Int_t code) const; virtual Int_tGetMultiplicity() const; virtual const char*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeFormula.html:3926,error,error,3926,root/html604/TTreeFormula.html,https://root.cern,https://root.cern/root/html604/TTreeFormula.html,1,['error'],['error']
Availability,"char* name); TArchiveMember(const TArchiveMember& member); virtual~TArchiveMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetComment() const; Long64_tGetCompressedSize() const; Long64_tGetDecompressedSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetFilePosition() const; virtual const char*TObject::GetIconName() const; TDatimeGetModTime() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long64_tGetPosition() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TArchiveMember.html:1502,error,error,1502,root/html526/TArchiveMember.html,https://root.cern,https://root.cern/root/html526/TArchiveMember.html,5,['error'],['error']
Availability,"char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& arc) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTEllipse::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidDrawArc(Double_t x1, Double_t y1, Double_t radius, Double_t phimin = 0, Double_t phimax = 360, Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTEllipse::DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTEllipse::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TArc.html:1963,error,error,1963,root/html526/TArc.html,https://root.cern,https://root.cern/root/html526/TArc.html,4,['error'],['error']
Availability,"char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& arc) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTEllipse::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidDrawArc(Double_t x1, Double_t y1, Double_t radius, Double_t phimin = 0, Double_t phimax = 360, Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTEllipse::DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTEllipse::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTEllipse::GetBBox(); virtual TPointTEllipse::GetBBoxCenter(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TArc.html:1963,error,error,1963,root/html534/TArc.html,https://root.cern,https://root.cern/root/html534/TArc.html,3,['error'],['error']
Availability,"char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCountFailure(Int_t level); voidCountSuccess(Int_t level); TRootSecContext*CreateSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* details, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = -1); voidDeActivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; TList*Established() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDetails(Int_t level); const char*GetDetailsByIdx(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFailure(Int_t idx) const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; Int_tGetMethod(Int_t idx) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetServer() const; Int_tGetSuccess(Int_t idx) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* tim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THostAuth.html:2411,error,error,2411,root/html528/THostAuth.html,https://root.cern,https://root.cern/root/html528/THostAuth.html,6,['error'],['error']
Availability,"char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual TStringTSystem::SplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidTSystem::StackTrace(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual intTSystem::Symlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSystem::Syslog(ELogLevel level, const char* mess); virtual const char*TSystem::TempDirectory() const; virtual FILE*TSystem::TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TXNetSystem(Bool_t owner = kTRUE); TXNetSystem(const TXNetSystem&); TXNetSystem(const char* url, Bool_t owner = kTRUE); virtual intTSystem::Umask(Int_t mask); virtual const char*TSystem::UnixPathName(const char* unixpathname); virtual intUnlink(const char* path); virtual voidTSystem::Unload(const char* module); virtual voidTSystem::Unsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intTSystem::Utime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*TSystem::Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*TSystem::WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetSystem.html:14830,mask,mask,14830,root/html602/TXNetSystem.html,https://root.cern,https://root.cern/root/html602/TXNetSystem.html,2,['mask'],['mask']
Availability,"char* params, Bool_t objectIsConst = kFALSE). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode = ROOT::kConversionMatch). void GetInterpreterTypeName(const char* name, string& output, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params, Bool_t objectIsConst = kFALSE). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode = ROOT::kConversionMatch). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). void ExecuteWithArgsAndReturn(TMethod* method, void* address, const void*[] args = 0, int = 0, void* ret = 0) const. Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , const char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCling.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void GenericError(const char* ) const; {;}. Long_t GetExecByteCode() const; {return 0;}. Long_t Getgvp() const; {return 0;}. const char * Getp2f2funcname(void* ) const; {return 0;}. const char * GetTopLevelMacroName() const; {return 0;}. const char * GetCurrentMacroName() const; {return 0;}. int GetSecurityError() const; {return 0;}. int LoadFile(const char* ) const; {return 0;}. Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:29827,error,error,29827,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['error'],['error']
Availability,"char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: id, bsize, bfree, blocks.; Id is file system type (machine dependend, see statfs()); Bsize is block size of file system; Blocks is total number of blocks in file system; Bfree is number of free blocks in file system; The function returns 0 in case of success and 1 if the file system could; not be stat'ed. int Link(const char* from, const char* to); Create a link from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Symlink(const char* from, const char* to); Create a symlink from file1 to file2. Returns 0 when succesfull,; -1 in case of failure. int Unlink(const char* name); Unlink, i.e. remove, a file or directory. Returns 0 when succesfull,; -1 in case of failure. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set a files modification and access ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:26598,failure,failure,26598,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,3,['failure'],['failure']
Availability,"char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: id, bsize, bfree, blocks.; Id is file system type (machine dependend, see statfs()); Bsize is block size of file system; Blocks is total number of blocks in file system; Bfree is number of free blocks in file system; The function returns 0 in case of success and 1 if the file system could; not be stat'ed. int Link(const char* from, const char* to); Create a link from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Symlink(const char* from, const char* to); Create a symlink from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Unlink(const char* name); Unlink, i.e. remove, a file or directory. Returns 0 when successful,; -1 in case of failure. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set a files modification and access ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:26938,failure,failure,26938,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,3,['failure'],['failure']
Availability,"char* record); voidAddTXTRecord(const TString& record); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetRegisteredType() const; const char*GetReplyDomain() const; const char*GetServiceName() const; virtual const char*TObject::GetTitle() const; const char*GetTXTRecords() const; Int_tGetTXTRecordsLength() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBonjourRecord.html:1736,error,error,1736,root/html530/TBonjourRecord.html,https://root.cern,https://root.cern/root/html530/TBonjourRecord.html,2,['error'],['error']
Availability,"char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTGLViewer::EndScene(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGLViewer::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Bool_tTGLViewerBase::FindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); TGLLogicalShape*TGLViewerBase::FindLogicalInScenes(TObject* id); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLAutoRotator*TGLViewer::GetAutoRotator(); TGLCameraOverlay*TGLViewer::GetCameraOverlay() const; Bool_tTGLViewer::GetClipAutoUpdate() const; TGLClipSet*TGLViewer::GetClipSet() const; TGLOverlayElement*TGLViewer::GetCurrentOvlElm() const; static TGLColorSet&TGLViewer::GetDefaultColorSet(); Int_tTGLViewer::GetDev() const; TGLV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLEmbeddedViewer.html:5216,error,error,5216,root/html602/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html602/TGLEmbeddedViewer.html,2,['error'],['error']
Availability,"char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnableMenuBarHiding(); virtual voidTGLViewer::EndScene(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGLViewer::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Bool_tTGLViewerBase::FindClosestOpaqueRecord(TGLSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestOverlayRecord(TGLOvlSelectRecord& rec, Int_t& recIdx); Bool_tTGLViewerBase::FindClosestRecord(TGLSelectRecord& rec, Int_t& recIdx); TGLLogicalShape*TGLViewerBase::FindLogicalInScenes(TObject* id); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLAutoRotator*TGLViewer::GetAutoRotator(); TGLCameraOverlay*TGLViewer::GetCameraOverlay() const; Bool_tTGLViewer::GetClipAutoUpdate() const; TGLClipSet*TGLViewer::GetClipSet() const; TGLOverlayElement*TGLViewer::GetCurrentOvlElm() const; static TGLColorSet&TGLViewer::GetDefaultColorSet(); Int_tTGLViewer::GetDev() const; TGLViewer::EDragActionTGLViewer::GetDragAction() const; Bool_tTGLViewer::GetDrawCameraCe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:5547,error,error,5547,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,4,['error'],['error']
Availability,"char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableItem(const char* name, Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() const; virtual Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGShutter.html:4472,error,error,4472,root/html602/TGShutter.html,https://root.cern,https://root.cern/root/html602/TGShutter.html,2,['error'],['error']
Availability,"char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExcludeClassEditor(TClass* cl, Bool_t recurse = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTVirtualPadEditor::FillAttributes(Int_t, Int_t); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TCanvas*GetCanvas() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGedEditor.html:6583,error,error,6583,root/html602/TGedEditor.html,https://root.cern,https://root.cern/root/html602/TGedEditor.html,2,['error'],['error']
Availability,"char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Long_tTBrowserImp::ExecPlugin(const char*, const char*, const char*, Int_t, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTBrowserImp::ExecuteDefaultAction(TObject*); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; char*FormatFileInfo(const char* fname, Long64_t size, Long_t modtime); TStringFullPathName(TGListTreeItem* item); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileBrowser.html:5329,error,error,5329,root/html528/TGFileBrowser.html,https://root.cern,https://root.cern/root/html528/TGFileBrowser.html,4,['error'],['error']
Availability,"char* varList); RooCategory*createCategory(const char* name, const char* stateNameList = 0); RooRealVar*createVariable(const char* name, Double_t xmin, Double_t xmax); vector<string>ctorArgs(const char* className); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:3861,error,error,3861,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,2,['error'],['error']
Availability,"char* varexp = """", const char* selection = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidInitArrays(Int_t newsize); voidTObject::MakeZombie(). private:. TSelectorDraw(const TSelectorDraw&); TSelectorDraw&operator=(const TSelectorDraw&). Data Members; public:. enum { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tfAction! Action type; Bool_tfCleanElisttrue if original Tree elist must be saved; Int_tfDimensionDimension of the current expression; Long64_tfDraw! Last entry loop number when object was drawn; Int_tfForceReadForce Read flag; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusselector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; Double_t**fVal![fSelectedRows][fDimension] Local buffer fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelectorDraw.html:7571,avail,available,7571,root/html528/TSelectorDraw.html,https://root.cern,https://root.cern/root/html528/TSelectorDraw.html,2,['avail'],['available']
Availability,"char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoordSelect.html:2697,error,error,2697,root/html530/TParallelCoordSelect.html,https://root.cern,https://root.cern/root/html530/TParallelCoordSelect.html,3,['error'],['error']
Availability,"char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; TGeoElementRN*Daughter() const; UInt_tDecay() const; static voidDecayName(UInt_t decay, TString& name); virtual voidDecayShift(Int_t& dA, Int_t& dZ, Int_t& dI) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tDeltaIso() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetIndex() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoDecayChannel.html:1979,error,error,1979,root/html528/TGeoDecayChannel.html,https://root.cern,https://root.cern/root/html528/TGeoDecayChannel.html,6,['error'],['error']
Availability,"charAt(ULong64_t linidx) const; char&At(ULong64_t linidx); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTNDArray::GetBin(const Int_t* idx) const; Long64_tTNDArray::GetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tTNDArray::GetNbins() const; Int_tTNDArray::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_char_.html:2257,error,error,2257,root/html534/TNDArrayT_char_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_char_.html,3,['error'],['error']
Availability,"character value for a named resouce. Int_t GetValue(const char* name, Int_t dflt); Returns the integer value for a resource. If the resource is not found; return the dflt value. Double_t GetValue(const char* name, Double_t dflt); Returns the double value for a resource. If the resource is not found; return the dflt value. const char * GetValue(const char* name, const char* dflt); Returns the character value for a named resouce. If the resource is; not found the dflt value is returned. TEnvRec * Lookup(const char* n); Loop over all resource records and return the one with name.; Return 0 in case name is not in the resoucre table. void Print(Option_t* option = """") const; Print all resources or the global, user or local resources separately. void PrintEnv(EEnvLevel level = kEnvAll) const; Print all resources for a certain level (global, user, local, changed). Int_t ReadFile(const char* fname, EEnvLevel level); Read and parse the resource file for a certain level.; Returns -1 on case of error, 0 in case of success. Int_t WriteFile(const char* fname, EEnvLevel level = kEnvAll); Write resourse records to file fname for a certain level. Use; level kEnvAll to write all resources. Returns -1 on case of error,; 0 in case of success. void Save(); Write the resource files for each level. The new files have the same; name as the original files. The old files are renamed to *.bak. void SaveLevel(EEnvLevel level); Write the resource file for a certain level. void SetValue(const char* name, const char* value, EEnvLevel level = kEnvChange, const char* type = 0); Set the value of a resource or create a new resource. void SetValue(const char* name, EEnvLevel level = kEnvChange); Set the value of a resource or create a new resource.; Use this method to set a resource like, ""name=val"".; If just ""name"" is given it will be interpreted as ""name=1"". void SetValue(const char* name, Int_t value); Set or create an integer resource value. void SetValue(const char* name, Double_t value); Set or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEnv.html:9764,error,error,9764,root/html528/TEnv.html,https://root.cern,https://root.cern/root/html528/TEnv.html,6,['error'],['error']
Availability,"check for each class the number of training and testing events, the requested number and the available number; 1091 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""SPLITTING ========"" << Endl;; 1092 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1093 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""---- class "" << cls << Endl;; 1094 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""check number of training/testing events, requested and available number of events and for class "" << cls << Endl;; 1095 ; 1096 // check if enough or too many events are already in the training/testing eventvectors of the class cls; 1097 EventVector& eventVectorTraining = tmpEventVector[ Types::kTraining ].at(cls);; 1098 EventVector& eventVectorTesting = tmpEventVector[ Types::kTesting ].at(cls);; 1099 EventVector& eventVectorUndefined = tmpEventVector[ Types::kMaxTreeType ].at(cls);; 1100 ; 1101 Int_t availableTraining = eventVectorTraining.size();; 1102 Int_t availableTesting = eventVectorTesting.size();; 1103 Int_t availableUndefined = eventVectorUndefined.size();; 1104 ; 1105 Float_t presel_scale;; 1106 if (fScaleWithPreselEff) {; 1107 presel_scale = eventCounts[cls].cutScaling();; 1108 if (presel_scale < 1); 1109 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" you have opted for scaling the number of requested training/testing events\n to be scaled by the preselection efficiency""<< Endl;; 1110 }else{; 1111 presel_scale = 1.; // this scaling was too confusing to most people, including me! Sorry... (Helge); 1112 if (eventCounts[cls].cutScaling() < 1); 1113 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" you have opted for interpreting the requested number of training/testing events\n to be the number of events AFTER your preselection cuts"" << Endl;; 1114 ; 1115 }; 1116 ; 1117 // If TrainTestSplit_<class> is set, set number of requested training events to split*num_all_events; 1118 // Requested number of testing events is set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:47596,avail,availableTesting,47596,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['avail'],['availableTesting']
Availability,"checks.; 8770 */; 8771int; 8772mg_send_digest_access_authentication_request(struct mg_connection *conn,; 8773 const char *realm); 8774{; 8775 if (conn && conn->dom_ctx) {; 8776 send_authorization_request(conn, realm);; 8777 return 0;; 8778 }; 8779 return -1;; 8780}; 8781 ; 8782 ; 8783#if !defined(NO_FILES); 8784static int; 8785is_authorized_for_put(struct mg_connection *conn); 8786{; 8787 if (conn) {; 8788 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8789 const char *passfile = conn->dom_ctx->config[PUT_DELETE_PASSWORDS_FILE];; 8790 int ret = 0;; 8791 ; 8792 if (passfile != NULL; 8793 && mg_fopen(conn, passfile, MG_FOPEN_MODE_READ, &file)) {; 8794 ret = authorize(conn, &file, NULL);; 8795 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8796 }; 8797 ; 8798 return ret;; 8799 }; 8800 return 0;; 8801}; 8802#endif; 8803 ; 8804 ; 8805static int; 8806modify_passwords_file(const char *fname,; 8807 const char *domain,; 8808 const char *user,; 8809 const char *pass,; 8810 const char *ha1); 8811{; 8812 int found, i;; 8813 char line[512], u[512] = """", d[512] = """", ha1buf[33],; 8814 tmp[UTF8_PATH_MAX + 8];; 8815 FILE *fp, *fp2;; 8816 ; 8817 found = 0;; 8818 fp = fp2 = NULL;; 8819 ; 8820 /* Regard empty password as no password - remove user record. */; 8821 if ((pass != NULL) && (pass[0] == '\0')) {; 8822 pass = NULL;; 8823 }; 8824 ; 8825 /* Other arguments must not be empty */; 8826 if ((fname == NULL) || (domain == NULL) || (user == NULL)) {; 8827 return 0;; 8828 }; 8829 ; 8830 /* Using the given file format, user name and domain must not contain; 8831 * ':'; 8832 */; 8833 if (strchr(user, ':') != NULL) {; 8834 return 0;; 8835 }; 8836 if (strchr(domain, ':') != NULL) {; 8837 return 0;; 8838 }; 8839 ; 8840 /* Do not allow control characters like newline in user name and domain.; 8841 * Do not allow excessively long names either. */; 8842 for (i = 0; ((i < 255) && (user[i] != 0)); i++) {; 8843 if (iscntrl((unsigned char)user[i])) {; 8844 return 0;; 8845 }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:253317,error,error,253317,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"checks.; 8771 */; 8772int; 8773mg_send_digest_access_authentication_request(struct mg_connection *conn,; 8774 const char *realm); 8775{; 8776 if (conn && conn->dom_ctx) {; 8777 send_authorization_request(conn, realm);; 8778 return 0;; 8779 }; 8780 return -1;; 8781}; 8782 ; 8783 ; 8784#if !defined(NO_FILES); 8785static int; 8786is_authorized_for_put(struct mg_connection *conn); 8787{; 8788 if (conn) {; 8789 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8790 const char *passfile = conn->dom_ctx->config[PUT_DELETE_PASSWORDS_FILE];; 8791 int ret = 0;; 8792 ; 8793 if (passfile != NULL; 8794 && mg_fopen(conn, passfile, MG_FOPEN_MODE_READ, &file)) {; 8795 ret = authorize(conn, &file, NULL);; 8796 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8797 }; 8798 ; 8799 return ret;; 8800 }; 8801 return 0;; 8802}; 8803#endif; 8804 ; 8805 ; 8806static int; 8807modify_passwords_file(const char *fname,; 8808 const char *domain,; 8809 const char *user,; 8810 const char *pass,; 8811 const char *ha1); 8812{; 8813 int found, i;; 8814 char line[512], u[512] = """", d[512] = """", ha1buf[33],; 8815 tmp[UTF8_PATH_MAX + 8];; 8816 FILE *fp, *fp2;; 8817 ; 8818 found = 0;; 8819 fp = fp2 = NULL;; 8820 ; 8821 /* Regard empty password as no password - remove user record. */; 8822 if ((pass != NULL) && (pass[0] == '\0')) {; 8823 pass = NULL;; 8824 }; 8825 ; 8826 /* Other arguments must not be empty */; 8827 if ((fname == NULL) || (domain == NULL) || (user == NULL)) {; 8828 return 0;; 8829 }; 8830 ; 8831 /* Using the given file format, user name and domain must not contain; 8832 * ':'; 8833 */; 8834 if (strchr(user, ':') != NULL) {; 8835 return 0;; 8836 }; 8837 if (strchr(domain, ':') != NULL) {; 8838 return 0;; 8839 }; 8840 ; 8841 /* Do not allow control characters like newline in user name and domain.; 8842 * Do not allow excessively long names either. */; 8843 for (i = 0; ((i < 255) && (user[i] != 0)); i++) {; 8844 if (iscntrl((unsigned char)user[i])) {; 8845 return 0;; 8846 }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:253349,error,error,253349,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ched normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCategoryProxy _cat;  Accept/reject categort. ;  ; RooRealProxy _effFunc;  Efficiency modeling function. ;  ; TString _sigCatName;  Name of accept state of accept/reject category. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:68062,error,errors,68062,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['error'],['errors']
Availability,"ched, it will return an empty substring:. TObjArray *subStrL = TPRegexp(""(a|(z))(bc)"").MatchS(""abc"");; for (Int_t i = 0; i < subStrL->GetLast()+1; i++) {; const TString subStr = ((TObjString *)subStrL->At(i))->GetString();; cout << ""\"""" << subStr << ""\"" "";; }; cout << subStr << endl;. produces: ""abc"" ""a"" """" ""bc""; For meaning of mods see ParseMods(). Int_t SubstituteInternal(TString& s, const TString& replace, Int_t start, Int_t nMaxMatch0, Bool_t doDollarSubst); Perform pattern substitution with optional back-ref replacement; - protected method. Int_t Substitute(TString& s, const TString& replace, const TString& mods = """", Int_t start = 0, Int_t nMatchMax = 10); Substitute replaces the string s by a new string in which matching; patterns are replaced by the replacePattern string. The number of; substitutions are returned. TString s(""aap noot mies"");; const Int_t nrSub = TPRegexp(""(\\w*) noot (\\w*)"").Substitute(s,""$2 noot $1"");; cout << nrSub << "" \"""" << s << ""\"""" <<endl;. produces: 2 ""mies noot aap""; For meaning of mods see ParseMods(). Bool_t IsValid() const; Returns true if underlying PCRE structure has been successfully; generated via regexp compilation. Bool_t GetThrowAtCompileError(); Get value of static flag controlling whether exception should be thrown upon an; error during regular expression compilation by the PCRE engine. void SetThrowAtCompileError(Bool_t throwp); Set static flag controlling whether exception should be thrown upon an; error during regular expression compilation by the PCRE engine. Bool_t MatchB(const TString& s, const TString& mods = """", Int_t start = 0, Int_t nMaxMatch = 10). TString GetPattern() const; { return fPattern; }. » Author: Eddy Offermann 24/06/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPRegexp.html:6203,error,error,6203,root/html534/TPRegexp.html,https://root.cern,https://root.cern/root/html534/TPRegexp.html,2,['error'],['error']
Availability,"chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] \n"",x1,x2);; 203 }; 204#endif; 205 ; 206 // fill data; 207 std::shared_ptr<ROOT::Fit::BinData> fitdata(new ROOT::Fit::BinData(opt,range) );; 208 ROOT::Fit::FillData(*fitdata, h1, f1);; 209 if (fitdata->Size() == 0 ) {; 210 Warning(""Fit"",""Fit data is empty "");; 211 return -1;; 212 }; 213 ; 214#ifdef DEBUG; 215 printf(""HFit:: data size is %d \n"",fitdata->Size());; 216 for (unsigned int i = 0; i < fitdata->Size(); ++i) {; 217 if (fitdata->NDim() == 1) printf("" x[%d] = %f - value = %f \n"", i,*(fitdata->Coords(i)),fitdata->Value(i) );; 218 }; 219#endif; 220 ; 221 // switch off linear fitting in case data has coordinate errors and the option is set; 222 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kCoordError && fitdata->Opt().fCoordErrors ) linear = false;; 223 // linear fit cannot be done also in case of asymmetric errors; 224 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kAsymError && fitdata->Opt().fAsymErrors ) linear = false;; 225 ; 226 // this functions use the TVirtualFitter; 227 if (special != 0 && !fitOption.Bound && !linear) {; 228 if (special == 100) ROOT::Fit::InitGaus (*fitdata,f1); // gaussian; 229 else if (special == 110 || special == 112) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D gaussians ( xygaus or bigaus); 230 else if (special == 400) ROOT::Fit::InitGaus (*fitdata,f1); // landau (use the same); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:8020,error,errors,8020,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['error'],['errors']
Availability,"chmarks; TStringfDataSetName of the dataset; Bool_tfDebugDebug switch; TPBHistType*fHistTypeType of histograms for CPU runs; Int_tfNFilesWrkNumber of files generated files per worker; Int_tfNHistNumber of histograms to be created in default CPU runs; Int_tfNtriesNumber of times a measurement is repeated; TFile*fOutFileOutput file; TStringfOutFileNameName of the output file; TProof*fProofProof; TProof*fProofDSProof to be used for dataset actions; TPBReadType*fReadTypeType of read (partial, full); TProofBenchRunCPU*fRunCPUInstance to run CPU scans; TProofBenchRunDataRead*fRunDSInstance to run data-read scans. private:. Bool_tfUnlinkOutfileWhether to remove empty output files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); Constructor: check PROOF and load selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. void CloseOutFile(); Close output file. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:""); Draw the CPU speedup plot.; opt = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofBench.html:8118,error,error,8118,root/html532/TProofBench.html,https://root.cern,https://root.cern/root/html532/TProofBench.html,1,['error'],['error']
Availability,"chnical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:8548,error,errors,8548,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['errors']
Availability,"chosen) use SetEndErrorSize(np). By default np=1; np represents the number of pixels.; gStyle->SetEndErrorSize(np);; The four parameters of TGraphErrors are: X, Y (as in TGraph), X-errors, and Y-errors - the size of the errors in the x and y direction. Next example is $ROOTSYS/tutorials/graphs/gerrors.C.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetGrid();. // create the coordinate arrays; Int_t n = 10;; Float_t x[n] = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};; Float_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the error arrays; Float_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Float_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};. // create the TGraphErrors and draw it; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; c1->Update();; }; 4.4 Graphs with Asymmetric Error Bars. A graph with asymmetric error bars. A TGraphAsymmErrors is a TGraph with asymmetric error bars. It inherits the various draw format options from TGraph. Its method Paint(Option_t *option) paints the TGraphAsymmErrors with the current attributes. You can set the following additional options for drawing:. “z” or “Z”the horizontal and vertical small lines are not drawn at the end of error bars; “>”an arrow is drawn at the end of the error bars; “|>”a full arrow is drawn at the end of the error bar; its size is \(\frac{2}{3}\) of the marker size; “[]”only the end vertical/horizontal lines of the error bars are drawn; this option is interesting to superimpose systematic errors on top of a graph with statistical errors. The constructor has six arrays as parameters: X and Y as TGraph and low X-errors and high X-errors, low Y-errors and high Y-errors. The low value is the length of the error bar to the left and down, the high value is the length of the error bar to the right and up.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",; 200,10,700,500",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:147715,error,error,147715,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"ciated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; Bool_tTProofPlayerRemote::fUseTH1MergeIf kTRUE forces use of TH1::Merge [kFALSE]; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerSuperMaster.html:17015,error,error,17015,root/html530/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html530/TProofPlayerSuperMaster.html,2,['error'],['error']
Availability,"ciated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different efficiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:105106,error,errors,105106,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['error'],['errors']
Availability,"ciencies:. The assumption is that the entries in ""pass"" are a subset of those in; ""total"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used to normalise the bin contents which might lead to wrong results.; . The points are assigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian methods where the result depends on the chosen option. If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. 2) calculating ratios of two Poisson means (option 'pois'):. The two histograms are interpreted as independent Poisson processes and the ratio; ; The histogram 'pass' is interpreted as n_{1} and the total histogram; is used for n_{2}. The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; of efficiency by a parameter transformation:; . The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); - w : Wilson interval (see TEfficiency::Wilson); - n : normal approximation propagation (see TEfficiency::Normal); - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; (see TEfficiency::Bayesian); - mode : use mode of posterior for Bayesian interval (default is mean); - shortest: use shortest interval (done b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphAsymmErrors.html:19505,error,errors,19505,root/html532/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html532/TGraphAsymmErrors.html,4,['error'],['errors']
Availability,"cific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. TPServe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPServerSocket.html:12123,error,error,12123,root/html528/TPServerSocket.html,https://root.cern,https://root.cern/root/html528/TPServerSocket.html,6,['error'],['error']
Availability,"cific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TApplicationRemote.html:17122,error,error,17122,root/html534/TApplicationRemote.html,https://root.cern,https://root.cern/root/html534/TApplicationRemote.html,1,['error'],['error']
Availability,"cified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2810,error,error,2810,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,2,['error'],['error']
Availability,"cified; dataset.; To get the short version (containing only the global meta information); specify optStr = ""S:"" or optStr = ""short:"".; To get the sub-dataset of files located on a given server(s) specify; the list of servers (comma-separated) in the 'optStr' field. void ShowDataSet(const char* dataset = """", const char* opt = ""filter:SsCc""); display meta-info for given dataset usi. Int_t RemoveDataSet(const char* dataset, const char* optStr = """"); Remove the specified dataset from the PROOF cluster.; Files are not deleted. TList* FindDataSets(const char* searchString, const char* optStr = """"); Find datasets, returns in a TList all found datasets. Bool_t RequestStagingDataSet(const char* dataset); Allows users to request staging of a particular dataset. Requests are; saved in a special dataset repository and must be honored by the endpoint. Bool_t CancelStagingDataSet(const char* dataset); Cancels a dataset staging request. Returns kTRUE on success, kFALSE on; failure. Dataset not found equals to a failure. TFileCollection * GetStagingStatusDataSet(const char* dataset); Obtains a TFileCollection showing the staging status of the specified; dataset. A valid dataset manager and dataset staging requests repository; must be present on the endpoint. void ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); Like GetStagingStatusDataSet, but displays results immediately. Int_t VerifyDataSet(const char* dataset, const char* optStr = """"); Verify if all files in the specified dataset are available.; Print a list and return the number of missing files.; Returns -1 in case of error. Int_t VerifyDataSetParallel(const char* uri, const char* optStr); Internal function for parallel dataset verification used TProof::VerifyDataSet and; TProofLite::VerifyDataSet. TMap * GetDataSetQuota(const char* optStr = """"); returns a map of the quotas of all groups. void ShowDataSetQuota(Option_t* opt = 0); shows the quota and usage of all groups; if opt contains ""U"" sho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:94213,failure,failure,94213,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['failure'],['failure']
Availability,"cifying; 2023/// the option ""keep"".; 2024///; 2025/// The function returns the total number of files produced.; 2026/// To check that all files have been merged use something like:; 2027/// ~~~ {.cpp}; 2028/// if (newchain->GetEntries()!=oldchain->GetEntries()) {; 2029/// ... not all the file have been copied ...; 2030/// }; 2031/// ~~~; 2032 ; 2033Long64_t TChain::Merge(TFile* file, Int_t basketsize, Option_t* option); 2034{; 2035 // We must have been passed a file, we will use it; 2036 // later to reset the compression level of the branches.; 2037 if (!file) {; 2038 // FIXME: We need an error message here.; 2039 return 0;; 2040 }; 2041 ; 2042 // Options; 2043 bool fastClone = false;; 2044 TString opt = option;; 2045 opt.ToLower();; 2046 if (opt.Contains(""fast"")) {; 2047 fastClone = true;; 2048 }; 2049 ; 2050 // The chain tree must have a list of branches; 2051 // because we may try to change their basket; 2052 // size later.; 2053 TObjArray* lbranches = GetListOfBranches();; 2054 if (!lbranches) {; 2055 // FIXME: We need an error message here.; 2056 return 0;; 2057 }; 2058 ; 2059 // The chain must have a current tree because; 2060 // that is the one we will clone.; 2061 if (!fTree) {; 2062 // -- LoadTree() has not yet been called, no current tree.; 2063 // FIXME: We need an error message here.; 2064 return 0;; 2065 }; 2066 ; 2067 // Copy the chain's current tree without; 2068 // copying any entries, we will do that later.; 2069 TTree* newTree = CloneTree(0);; 2070 if (!newTree) {; 2071 // FIXME: We need an error message here.; 2072 return 0;; 2073 }; 2074 ; 2075 // Strip out the (potential) directory name.; 2076 // FIXME: The merged chain may or may not have the; 2077 // same name as the original chain. This is; 2078 // bad because the chain name determines the; 2079 // names of the trees in the chain by default.; 2080 newTree->SetName(gSystem->BaseName(GetName()));; 2081 ; 2082 // FIXME: Why do we do this?; 2083 newTree->SetAutoSave(2000000000);; 2084 ; 2085 // Ci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:73990,error,error,73990,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['error'],['error']
Availability,"cility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; The implementations of this function save internally the current state into; a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. void ShowOutput(RedirectHandle_t* h); Display the content associated with the redirection described by the; opaque handle 'h'. void AddDynamicPath(const char* pathname); Add a new directory to the dynamic path. const char* GetDynamicPath(); Return the dynamic path (used to find shared libraries). void SetDynamicPath(const char* pathname); Set the dynamic path to a new value.; If the value of 'path' is zero, the dynamic path is reset to its; default value. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1 in; case lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:32580,error,error,32580,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,6,['error'],['error']
Availability,"cision); From the mlpfit package (J.Schwindling 20-Jul-1999) ; Definition at line 91 of file TNeuron.cxx. ◆ Streamer(). void TNeuron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TNeuron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 87 of file TNeuron.h. ◆ UseBranch(). TTreeFormula * TNeuron::UseBranch ; (; TTree * ; input, . const char * ; formula . ). Sets a formula that can be used to make the neuron an input. ; The formula is automatically normalized to mean=0, RMS=1. This normalisation is used by GetValue() (input neurons) and GetError() (output neurons) ; Definition at line 874 of file TNeuron.cxx. Friends And Related Symbol Documentation. ◆ TSynapse. friend class TSynapse. friend . Definition at line 26 of file TNeuron.h. Member Data Documentation. ◆ fDeDw. Double_t TNeuron::fDeDw. private . ! buffer containing the last derivative of the error ; Definition at line 84 of file TNeuron.h. ◆ fDEDw. Double_t TNeuron::fDEDw. private . ! buffer containing the sum over all examples of DeDw ; Definition at line 85 of file TNeuron.h. ◆ fDerivative. Double_t TNeuron::fDerivative. private . ! buffer containing the last neuron derivative ; Definition at line 82 of file TNeuron.h. ◆ fExtD. TFormula* TNeuron::fExtD. private . derivative (external mode) ; Definition at line 74 of file TNeuron.h. ◆ fExtF. TFormula* TNeuron::fExtF. private . function (external mode) ; Definition at line 73 of file TNeuron.h. ◆ fFormula. TTreeFormula* TNeuron::fFormula. private . ! formula to be used for inputs and outputs ; Definition at line 75 of file TNeuron.h. ◆ fIndex. Int_t TNeuron::fIndex. private . ! index in the formula ; Definition at line 76 of file TNeuron.h. ◆ fInput. Double_t TNeuron::fInput. private . ! buffer containing the last neuron input ; Definition at line 78 of file TNeuron.h. ◆ flayer. TObjArray TNeuron::flayer. private . pointe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNeuron.html:22493,error,error,22493,doc/master/classTNeuron.html,https://root.cern,https://root.cern/doc/master/classTNeuron.html,1,['error'],['error']
Availability,"city = 0); virtual~TBuffer3D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearSectionsValid(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static UInt_tDecCSLevel(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UInt_tGetCSLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; UInt_tGetSections(UInt_t mask) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; static voidIncCSLevel(); virtual voidTObject::Info(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:10207,error,error,10207,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,5,['error'],['error']
Availability,"ck (const char *tname, const char *value);  add emulated data this used to place version or TObject raw data, read from normal tables ;  ; void AddUnpackInt (const char *tname, Int_t value);  emulate integer value in raw data ;  ; const char * GetBlobPrefixName () const;  ; const char * GetBlobTypeName () const;  ; TSQLClassInfo * GetInfo () const;  ; const char * GetLocatedField () const;  ; Long64_t GetObjId () const;  ; const char * GetValue () const;  ; TClass * IsA () const override;  ; Bool_t IsBlobData () const;  ; Bool_t LocateColumn (const char *colname, Bool_t isblob=kFALSE);  locate column of that name in results ;  ; Bool_t PrepareForRawData ();  prepare to read data from raw table ;  ; void ShiftToNextValue ();  shift to next column or next row in blob data ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t VerifyDataType (const char *tname, Bool_t errormsg=kTRUE);  checks if data type corresponds to that stored in raw table ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLObjectData.html:2031,error,errormsg,2031,doc/master/classTSQLObjectData.html,https://root.cern,https://root.cern/doc/master/classTSQLObjectData.html,1,['error'],['errormsg']
Availability,"ck Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalConfInterval(const char* name = 0); RooStats::ConfIntervalConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ConfInterval.html:1037,avail,available,1037,root/html602/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__ConfInterval.html,2,['avail'],['available']
Availability,"ck Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::ConfInterval. class RooStats::ConfInterval: public TNamed. ConfInterval is an interface class for a generic interval in the RooStats framework.; Any tool inheriting from IntervalCalculator can return a ConfInterval.; There are many types of intervals, they may be a simple range [a,b] in 1 dimension,; or they may be disconnected regions in multiple dimensions.; So the common interface is simply to ask the interval if a given point ""IsInInterval"".; The Interval also knows what confidence level it was constructed at and the space of ; parameters for which it was constructed.; Note, one could use the same class for a Bayesian ""credible interval"".; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ConfInterval(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ConfInterval.html:1037,avail,available,1037,root/html530/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html530/RooStats__ConfInterval.html,3,['avail'],['available']
Availability,"ck access */; 18905 ; 18906 conn->request_info.user_data = ctx->user_data;; 18907 /* Allocate a mutex for this connection to allow communication both; 18908 * within the request handler and from elsewhere in the application; 18909 */; 18910 if (0 != pthread_mutex_init(&conn->mutex, &pthread_mutex_attr)) {; 18911 mg_free(conn->buf);; 18912 mg_cry_ctx_internal(ctx, ""%s"", ""Cannot create mutex"");; 18913 return;; 18914 }; 18915 ; 18916#if defined(USE_SERVER_STATS); 18917 conn->conn_state = 1; /* not consumed */; 18918#endif; 18919 ; 18920 /* Call consume_socket() even when ctx->stop_flag > 0, to let it; 18921 * signal sq_empty condvar to wake up the master waiting in; 18922 * produce_socket() */; 18923 while (consume_socket(ctx, &conn->client, thread_index)) {; 18924 ; 18925 /* New connections must start with new protocol negotiation */; 18926 tls.alpn_proto = NULL;; 18927 ; 18928#if defined(USE_SERVER_STATS); 18929 conn->conn_close_time = 0;; 18930#endif; 18931 conn->conn_birth_time = time(NULL);; 18932 ; 18933 /* Fill in IP, port info early so even if SSL setup below fails,; 18934 * error handler would have the corresponding info.; 18935 * Thanks to Johannes Winkelmann for the patch.; 18936 */; 18937 conn->request_info.remote_port =; 18938 ntohs(USA_IN_PORT_UNSAFE(&conn->client.rsa));; 18939 ; 18940 conn->request_info.server_port =; 18941 ntohs(USA_IN_PORT_UNSAFE(&conn->client.lsa));; 18942 ; 18943 sockaddr_to_string(conn->request_info.remote_addr,; 18944 sizeof(conn->request_info.remote_addr),; 18945 &conn->client.rsa);; 18946 ; 18947 DEBUG_TRACE(""Incomming %sconnection from %s"",; 18948 (conn->client.is_ssl ? ""SSL "" : """"),; 18949 conn->request_info.remote_addr);; 18950 ; 18951 conn->request_info.is_ssl = conn->client.is_ssl;; 18952 ; 18953 if (conn->client.is_ssl) {; 18954 ; 18955#if defined(USE_MBEDTLS); 18956 /* HTTPS connection */; 18957 if (mbed_ssl_accept(&(conn->ssl),; 18958 conn->dom_ctx->ssl_ctx,; 18959 (int *)&(conn->client.sock),; 18960 conn->phys_ctx); 1896",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:563303,error,error,563303,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ck access */; 18906 ; 18907 conn->request_info.user_data = ctx->user_data;; 18908 /* Allocate a mutex for this connection to allow communication both; 18909 * within the request handler and from elsewhere in the application; 18910 */; 18911 if (0 != pthread_mutex_init(&conn->mutex, &pthread_mutex_attr)) {; 18912 mg_free(conn->buf);; 18913 mg_cry_ctx_internal(ctx, ""%s"", ""Cannot create mutex"");; 18914 return;; 18915 }; 18916 ; 18917#if defined(USE_SERVER_STATS); 18918 conn->conn_state = 1; /* not consumed */; 18919#endif; 18920 ; 18921 /* Call consume_socket() even when ctx->stop_flag > 0, to let it; 18922 * signal sq_empty condvar to wake up the master waiting in; 18923 * produce_socket() */; 18924 while (consume_socket(ctx, &conn->client, thread_index)) {; 18925 ; 18926 /* New connections must start with new protocol negotiation */; 18927 tls.alpn_proto = NULL;; 18928 ; 18929#if defined(USE_SERVER_STATS); 18930 conn->conn_close_time = 0;; 18931#endif; 18932 conn->conn_birth_time = time(NULL);; 18933 ; 18934 /* Fill in IP, port info early so even if SSL setup below fails,; 18935 * error handler would have the corresponding info.; 18936 * Thanks to Johannes Winkelmann for the patch.; 18937 */; 18938 conn->request_info.remote_port =; 18939 ntohs(USA_IN_PORT_UNSAFE(&conn->client.rsa));; 18940 ; 18941 conn->request_info.server_port =; 18942 ntohs(USA_IN_PORT_UNSAFE(&conn->client.lsa));; 18943 ; 18944 sockaddr_to_string(conn->request_info.remote_addr,; 18945 sizeof(conn->request_info.remote_addr),; 18946 &conn->client.rsa);; 18947 ; 18948 DEBUG_TRACE(""Incomming %sconnection from %s"",; 18949 (conn->client.is_ssl ? ""SSL "" : """"),; 18950 conn->request_info.remote_addr);; 18951 ; 18952 conn->request_info.is_ssl = conn->client.is_ssl;; 18953 ; 18954 if (conn->client.is_ssl) {; 18955 ; 18956#if defined(USE_MBEDTLS); 18957 /* HTTPS connection */; 18958 if (mbed_ssl_accept(&(conn->ssl),; 18959 conn->dom_ctx->ssl_ctx,; 18960 (int *)&(conn->client.sock),; 18961 conn->phys_ctx); 1896",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:563336,error,error,563336,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ck for ebuf */; 18591 ebuf,; 18592 sizeof(ebuf),; 18593 ""Invalid URI"");; 18594 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18595 conn->request_info.local_uri_raw = NULL;; 18596 break;; 18597 }; 18598 conn->request_info.local_uri =; 18599 (char *)conn->request_info.local_uri_raw;; 18600 }; 18601 ; 18602 if (ebuf[0] != '\0') {; 18603 conn->protocol_type = -1;; 18604 ; 18605 } else {; 18606 /* HTTP/1 allows protocol upgrade */; 18607 conn->protocol_type = should_switch_to_protocol(conn);; 18608 ; 18609 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18610 /* This will occur, if a HTTP/1.1 request should be upgraded; 18611 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18612 * Since most (all?) major browsers only support HTTP/2 using; 18613 * ALPN, this is hard to test and very low priority.; 18614 * Deactivate it (at least for now).; 18615 */; 18616 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18617 }; 18618 }; 18619 ; 18620 DEBUG_TRACE(""http: %s, error: %s"",; 18621 (ri->http_version ? ri->http_version : ""none""),; 18622 (ebuf[0] ? ebuf : ""none""));; 18623 ; 18624 if (ebuf[0] == '\0') {; 18625 if (conn->request_info.local_uri) {; 18626 ; 18627 /* handle request to local server */; 18628 handle_request_stat_log(conn);; 18629 ; 18630 } else {; 18631 /* TODO: handle non-local request (PROXY) */; 18632 conn->must_close = 1;; 18633 }; 18634 } else {; 18635 conn->must_close = 1;; 18636 }; 18637 ; 18638 /* Response complete. Free header buffer */; 18639 free_buffered_response_header_list(conn);; 18640 ; 18641 if (ri->remote_user != NULL) {; 18642 mg_free((void *)ri->remote_user);; 18643 /* Important! When having connections with and without auth; 18644 * would cause double free and then crash */; 18645 ri->remote_user = NULL;; 18646 }; 18647 ; 18648 /* NOTE(lsm): order is important here. should_keep_alive() call; 18649 * is using parsed request, which will be invalid after; 18650 * memmove's below.; 18651 * Therefore, memorize should_keep_alive() result now for la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:552628,error,error,552628,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ck for ebuf */; 18592 ebuf,; 18593 sizeof(ebuf),; 18594 ""Invalid URI"");; 18595 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18596 conn->request_info.local_uri_raw = NULL;; 18597 break;; 18598 }; 18599 conn->request_info.local_uri =; 18600 (char *)conn->request_info.local_uri_raw;; 18601 }; 18602 ; 18603 if (ebuf[0] != '\0') {; 18604 conn->protocol_type = -1;; 18605 ; 18606 } else {; 18607 /* HTTP/1 allows protocol upgrade */; 18608 conn->protocol_type = should_switch_to_protocol(conn);; 18609 ; 18610 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18611 /* This will occur, if a HTTP/1.1 request should be upgraded; 18612 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18613 * Since most (all?) major browsers only support HTTP/2 using; 18614 * ALPN, this is hard to test and very low priority.; 18615 * Deactivate it (at least for now).; 18616 */; 18617 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18618 }; 18619 }; 18620 ; 18621 DEBUG_TRACE(""http: %s, error: %s"",; 18622 (ri->http_version ? ri->http_version : ""none""),; 18623 (ebuf[0] ? ebuf : ""none""));; 18624 ; 18625 if (ebuf[0] == '\0') {; 18626 if (conn->request_info.local_uri) {; 18627 ; 18628 /* handle request to local server */; 18629 handle_request_stat_log(conn);; 18630 ; 18631 } else {; 18632 /* TODO: handle non-local request (PROXY) */; 18633 conn->must_close = 1;; 18634 }; 18635 } else {; 18636 conn->must_close = 1;; 18637 }; 18638 ; 18639 /* Response complete. Free header buffer */; 18640 free_buffered_response_header_list(conn);; 18641 ; 18642 if (ri->remote_user != NULL) {; 18643 mg_free((void *)ri->remote_user);; 18644 /* Important! When having connections with and without auth; 18645 * would cause double free and then crash */; 18646 ri->remote_user = NULL;; 18647 }; 18648 ; 18649 /* NOTE(lsm): order is important here. should_keep_alive() call; 18650 * is using parsed request, which will be invalid after; 18651 * memmove's below.; 18652 * Therefore, memorize should_keep_alive() result now for la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:552661,error,error,552661,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ck frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<void> can be used for a function without return value, like this; RResult<void> DoSomething(); {; if (failure); return R__FAIL(""user-facing error messge"");; return RResult<void>::Success();; }; RResult<T>::Unwrap() can be used as a short hand for ""give me the wrapped value or, in case of an error, throw"". For instance:; int value = FuncThatReturnsRResultOfInt().Unwrap(); // may throw; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; There is no implict operator that converts RResult<T> to T. This is intentional to make it clear in the calling code where an exception may be thrown. ; Definition at line 194 of file RError.hxx. Public Member Functions;  RResult (const RResult &other)=delete;  ;  RResult (const T &value);  ;  RResult (RError &&error);  ;  RResult (RResult &&other)=default;  ;  RResult (T &&value);  ;  ~RResult ()=default;  ; RResult & Forward (RError::RLocation &&sourceLocation);  Used by R__FORWARD_RESULT in order to keep track of the stack trace in cas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:2185,failure,failure,2185,doc/master/classROOT_1_1Experimental_1_1RResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html,3,"['error', 'failure']","['error', 'failure']"
Availability,"ck if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messages that are not routed through RooMsgService (such as Minuit printouts). { return _silentMode ; }. void setSilentMode(Bool_t flag); { _silentMode = flag ; }. Int_t errorCount() const; { return _errorCount ; }. void clearErrorCount(); { _errorCount = 0 ; }. Int_t& debugCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:11435,error,error,11435,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,6,['error'],['error']
Availability,"ck if we can re-use the original statistics from the previous histogram; 2343 bool reuseStats = false;; 2344 if ( ( GetStatOverflowsBehaviour() == false && firstbin == 1 && lastbin == inNbin ) ||; 2345 ( GetStatOverflowsBehaviour() == true && firstbin == 0 && lastbin == inNbin + 1 ) ); 2346 reuseStats = true;; 2347 else {; 2348 // also if total content match we can re-use; 2349 double eps = 1.E-12;; 2350 if (IsA() == TH2F::Class() ) eps = 1.E-6;; 2351 if (fTsumw != 0 && TMath::Abs( fTsumw - totcont) < TMath::Abs(fTsumw) * eps); 2352 reuseStats = true;; 2353 }; 2354 if (ncuts) reuseStats = false;; 2355 // retrieve the statistics and set in projected histogram if we can re-use it; 2356 bool reuseEntries = reuseStats;; 2357 // can re-use entries if underflow/overflow are included; 2358 reuseEntries &= (firstbin==0 && lastbin == inNbin+1);; 2359 if (reuseStats) {; 2360 Double_t stats[kNstat];; 2361 GetStats(stats);; 2362 if (!onX) { // case of projection on Y; 2363 stats[2] = stats[4];; 2364 stats[3] = stats[5];; 2365 }; 2366 h1->PutStats(stats);; 2367 }; 2368 else {; 2369 // the statistics is automatically recalculated since it is reset by the call to SetBinContent; 2370 // we just need to set the entries since they have not been correctly calculated during the projection; 2371 // we can only set them to the effective entries; 2372 h1->SetEntries( h1->GetEffectiveEntries() );; 2373 }; 2374 if (reuseEntries) {; 2375 h1->SetEntries(fEntries);; 2376 }; 2377 else {; 2378 // re-compute the entries; 2379 // in case of error calculation (i.e. when Sumw2() is set); 2380 // use the effective entries for the entries; 2381 // since this is the only way to estimate them; 2382 Double_t entries = TMath::Floor( totcont + 0.5); // to avoid numerical rounding; 2383 if (h1->GetSumw2N()) entries = h1->GetEffectiveEntries();; 2384 h1->SetEntries( entries );; 2385 }; 2386 ; 2387 if (opt.Contains(""d"")) {; 2388 TVirtualPad::TContext ctxt(gROOT->GetSelectedPad(), true, true);; 2389 opt.Remove(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:96770,error,error,96770,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['error'],['error']
Availability,"ck of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:16722,error,error,16722,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['error'],['error']
Availability,"ck of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelih",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:17807,error,error,17807,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['error'],['error']
Availability,"ck, const void *buffer, int length, int flag)Send exactly length bytes from buffer.Definition TSystem.cxx:2409; TSystem::SetFPEMaskvirtual Int_t SetFPEMask(Int_t mask=kDefaultMask)Set which conditions trigger a floating point exception.Definition TSystem.cxx:642; TSystem::fLevelInt_t fLevelDefinition TSystem.h:292; TSystem::GetBuildCompilervirtual const char * GetBuildCompiler() constReturn the build compiler.Definition TSystem.cxx:3883; TSystem::CloseConnectionvirtual void CloseConnection(int sock, Bool_t force=kFALSE)Close socket connection.Definition TSystem.cxx:2390; TSystem::GetLibrariesvirtual const char * GetLibraries(const char *regexp="""", const char *option="""", Bool_t isRegexp=kTRUE)Return a space separated list of loaded shared libraries.Definition TSystem.cxx:2136; TSystem::GetListOfSignalHandlersvirtual TSeqCollection * GetListOfSignalHandlers() constDefinition TSystem.h:379; TSystem::fBuildDirTString fBuildDirDefinition TSystem.h:307; TSystem::SetErrorStrvoid SetErrorStr(const char *errstr)Set the system error string.Definition TSystem.cxx:245; TSystem::RemoveSignalHandlervirtual TSignalHandler * RemoveSignalHandler(TSignalHandler *sh)Remove a signal handler from list of signal handlers.Definition TSystem.cxx:542; TSystem::SetSoExtvirtual void SetSoExt(const char *soExt)Set shared library extension, should be either .so, .sl, .a, .dll, etc.Definition TSystem.cxx:4236; TSystem::Closelogvirtual void Closelog()Close connection to system log daemon.Definition TSystem.cxx:1694; TSystem::fBuildCompilerTString fBuildCompilerDefinition TSystem.h:303; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TSystem::GetBuildArchvirtual const char * GetBuildArch() constReturn the build architecture.Definition TSystem.cxx:3875; TSystem::Linkvirtual int Link(const char *from, const char *to)Create a link from file1 to file2.Definition TSystem.cxx:1359; TSystem::SigAlarmInterruptsSyscallsvirtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:60110,error,error,60110,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['error'],['error']
Availability,"ck; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooArgSet_attachedBuffers! Currently attached buffers (if different from _varsww); TIterator*RooAbsDataStore::_cacheIter! Iterator over cached variables; const RooAbsArg*_cacheOwner! Object owning cache contents; TTree*_cacheTree! TTree holding the cached function values; RooArgSetRooAbsDataStore::_cachedVars; Double_t_curWgtWeight of current event; Double_t_curWgtErrWeight of current event; Double_t_curWgtErrHiWeight of current event; Double_t_curWgtErrLoWeight of current event; Bool_t_defCtor! Was object constructed with default ctor?; static Int_t_defTreeBufSize; Bool_tRooAbsDataStore::_doDirtyPropSwitch do (de)activate dirty state propagation when loading a data point; Double_t*_extSumW2Array! External sum of weights array; Double_t*_extWgtArray! External weight array; Double_t*_extWgtErrHiArray! External weight array - high error; Double_t*_extWgtErrLoArray! External weight array - low error; TIterator*RooAbsDataStore::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; TTree*_treeTTree holding the data points; RooArgSetRooAbsDataStore::_vars; RooArgSet_varsww; RooRealVar*_wgtVarPointer to weight variable (if set); TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooTreeDataStore(). RooTreeDataStore(TTree* t, const RooArgSet& vars, const char* wgtVarName = 0); Constructor to facilitate reading of legacy RooDataSets. RooTreeDataStore(const char* name, const char* title, const RooArgSet& vars, const char* wgtVarName = 0). RooTreeDataStore(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooTreeDataStore.html:11341,error,error,11341,root/html532/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html532/RooTreeDataStore.html,4,['error'],['error']
Availability,"ckAll(Int_t); voidCheckCells(Bool_t remove_empty_cells = false); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(const char* opt, Int_t nbin); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev, Bool_t NoNegWeights = kFALSE); voidFillFoamCells(const TMVA::Event* ev, Bool_t NoNegWeights = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAverageNeighborsValue(vector<Float_t>& txvec, TMVA::ECellValue cv); Double_tGetCellDensity(vector<Float_t>& xvec, TMVA::EKernel kernel = kNone); Double_tGetCellDiscr(vector<Float_t>& xvec, TMVA::EKernel kernel = kNone); Double_tGetCellRegValue0(vector<Float_t>&, TMVA::EKernel kernel = kNone); Double_tGetCellValue(vector<Float_t>&, TMVA::ECellValue); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetFillFoamWithOrigWeights() const; TStringGetFoamName() const; TMVA::EFoamTypeGetFoamType() const; virtual const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:2339,error,error,2339,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['error'],['error']
Availability,"ckPropagator.h. ◆ PrintMagField(). void TEveTrackPropagator::PrintMagField ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ); const. Definition at line 1055 of file TEveTrackPropagator.cxx. ◆ RebuildTracks(). void TEveTrackPropagator::RebuildTracks ; (; ). protected . Rebuild all tracks using this render-style. ; Definition at line 1019 of file TEveTrackPropagator.cxx. ◆ RefFVAtt(). TMarker & TEveTrackPropagator::RefFVAtt ; (; ). inline . Definition at line 334 of file TEveTrackPropagator.h. ◆ RefPMAtt(). TMarker & TEveTrackPropagator::RefPMAtt ; (; ). inline . Definition at line 333 of file TEveTrackPropagator.h. ◆ RefPTBAtt(). TMarker & TEveTrackPropagator::RefPTBAtt ; (; ). inline . Definition at line 335 of file TEveTrackPropagator.h. ◆ ResetTrack(). void TEveTrackPropagator::ResetTrack ; (; ). Reset cache holding particle trajectory. ; Definition at line 346 of file TEveTrackPropagator.cxx. ◆ SetDelta(). void TEveTrackPropagator::SetDelta ; (; Double_t ; x). Set maximum error and rebuild tracks. ; Definition at line 1127 of file TEveTrackPropagator.cxx. ◆ SetEditPathMarks(). void TEveTrackPropagator::SetEditPathMarks ; (; Bool_t ; x). inline . Definition at line 292 of file TEveTrackPropagator.h. ◆ SetFitCluster2Ds(). void TEveTrackPropagator::SetFitCluster2Ds ; (; Bool_t ; x). Set 2D-cluster fitting and rebuild tracks. ; Definition at line 1172 of file TEveTrackPropagator.cxx. ◆ SetFitDaughters(). void TEveTrackPropagator::SetFitDaughters ; (; Bool_t ; x). Set daughter creation point fitting and rebuild tracks. ; Definition at line 1136 of file TEveTrackPropagator.cxx. ◆ SetFitDecay(). void TEveTrackPropagator::SetFitDecay ; (; Bool_t ; x). Set decay fitting and rebuild tracks. ; Definition at line 1154 of file TEveTrackPropagator.cxx. ◆ SetFitLineSegments(). void TEveTrackPropagator::SetFitLineSegments ; (; Bool_t ; x). Set line segment fitting and rebuild tracks. ; Definition at line 1163 of file TEveTrackPropagator.cxx. ◆ SetFitReferences(). void TEveTr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:57486,error,error,57486,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['error'],['error']
Availability,"ckage. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify options for the loading step via 'loadopts';; the string will be passed passed as argument to SETUP.; Special option 'chkv=<o>' (or 'checkversion=<o>') can be used to control; plugin version checking during building: possible choices are:; off no check; failure may occur at loading; on check ROOT version [default]; svn check ROOT version and Git commit SHA1.; (Use ';', ' ' or '|' to separate 'chkv=<o>' from the rest.); If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify a list of objects to be passed to the SETUP; functions via 'loadopts'; the objects must be streamable.; Returns 0 in case of success and -1 in case of error. Int_t DownloadPackage(const char* par, const char* dstdir = 0); Download a PROOF archive (PAR file) from the master package repository.; The PAR file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:77158,failure,failure,77158,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['failure'],['failure']
Availability,"cket (may not be used in this class). ;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override;  Get output list. ;  ; TVirtualPacketizer * GetPacketizer () const override;  ; TProofProgressStatus * GetProgressStatus () const override;  ; TQueryResult * GetQueryResult (const char *ref) override;  Get query result instances referenced 'ref' from the list of results. ;  ; void HandleRecvHisto (TMessage *mess) override;  Receive histo from slave. ;  ; Bool_t IsClient () const override;  ; Bool_t JoinProcess (TList *workers) override;  Not implemented: meaningful only in the remote player. Returns kFALSE. ;  ; Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF worker. ;  ; Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF worker with TSelector object The return value is -1 in case of error and TSelector::GetStatus() in case of success. ;  ; void Progress (Long64_t total, Long64_t processed) override;  Report progress (may not be used in this class). ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti) override;  Report progress (may not be used in this class). ;  ; void Progress (TProofProgressInfo *pi) override;  Report progress (may not be used in this class). ;  ; void Progress (TSlave *, Long64_t total, Long64_t processed) override;  ; void Progress (TSlave *, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti) override;  ; void Progress (TSlave *, TProofProgressInfo *pi) override;  ; Int_t ReinitSelector (TQueryResult *qr) override;  Reinitialize fSelector using the selector files in the query result. ;  ; void Rem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:3991,error,error,3991,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,1,['error'],['error']
Availability,"cket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TUDPSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TUDPSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TUDPSocket(const TUDPSocket& s); TUDPSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUDPSocket.html:12722,error,error,12722,root/html534/TUDPSocket.html,https://root.cern,https://root.cern/root/html534/TUDPSocket.html,3,['error'],['error']
Availability,"cket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented in TServerSocket.; Definition at line 600 of file TSocket.cxx. ◆ SendProcessIDs(). void TSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on this socket. ; Definition at line 684 of file TSocket.cxx. ◆ SendRaw(). Int_t TSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 620 of file TSocket.cxx. ◆ SendStreamerInfos(). void TSocket::SendStreamerInfos ; (; const TMessage & ; mess). protected . Check if TStreamerInfo must be sent. ; The list of TStreamerInfo of classes in the object in the message is in the fInfos list of the message. We send only the TStreamerInfos not yet sent on this socket. ; Definition at line 649 of file TSocket.cxx. ◆ SetCompressionAlgorithm(). void TSocket::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). See comments for function SetCompressionSettings. ; Definition at line 1046 of file TSocket.cxx. ◆ SetCompressionLevel(). void TSocket::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). See comments for function Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:38058,error,error,38058,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['error'],['error']
Availability,"ckets; TStringfSelectionselection expression; Bool_tfShouldDrawif to draw the plot; TStringfVarExp[4]variable expression 0 - X, 1 - Y, 2 - Z, 3 - W. Class Charts. Inheritance Chart:. TObject. ←; TTreeDrawArgsParser. Function documentation; TTreeDrawArgsParser(); Constructor - cleans all the class variables. ~TTreeDrawArgsParser(); Destructor. Int_t GetMaxDimension(); return fgMaxDimension (cannot be inline). void ClearPrevious(); Resets all the variables of the class. Bool_t SplitVariables(TString variables); Parse expression [var1 [:var2 [:var3] ...]],; number of variables cannot be greater than fgMaxDimension.; A colon which is followed by (or that follows) another semicolon; is not regarded as a separator.; If there are more separating : than fgMaxDimension - 1 then; all characters after (fgMaxDimension - 1)th colon is put into; the last variable.; fDimension := <number of variables>; fVarExp[0] := <first variable string>; fVarExp[1] := <second variable string>; ..; Returns kFALSE in case of an error. Bool_t ParseName(TString name); Syntax:; [' '*][[\+][' '*]name[(num1 [, [num2] ] [, [num3] ] ...)]]; num's are floating point numbers; sets the fileds fNoParameters, fParameterGiven, fParameters, fAdd, fName; to apropriate values.; Returns kFALSE in case of an error. Bool_t ParseVarExp(); Split variables and parse name and parameters in brackets. Bool_t ParseOption(); Check if options contain some data important for choosing the type of the; drawn object. Bool_t Parse(const char* varexp, const char* selection, Option_t* option); Parses parameters from TTree::Draw().; varexp - Variable expression; see TTree::Draw(); selection - selection expression; see TTree::Draw(); option - Drawnig option; see TTree::Draw. TString GetProofSelectorName() const; Returns apropriate TSelector class name for proof for the object that is to be drawn; assumes that Parse() method has been called before. Double_t GetParameter(int num) const; returns *num*-th parameter from brackets in the e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeDrawArgsParser.html:8971,error,error,8971,root/html602/TTreeDrawArgsParser.html,https://root.cern,https://root.cern/root/html602/TTreeDrawArgsParser.html,2,['error'],['error']
Availability,"ckets; TStringfSelectionselection expression; Bool_tfShouldDrawif to draw the plot; TStringfVarExp[4]variable expression 0 - X, 1 - Y, 2 - Z, 3 - W. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeDrawArgsParser(); Constructor - cleans all the class variables. ~TTreeDrawArgsParser(); Destructor. Int_t GetMaxDimension(); return fgMaxDimension (cannot be inline). void ClearPrevious(); Resets all the variables of the class. Bool_t SplitVariables(TString variables); Parse expression [var1 [:var2 [:var3] ...]],; number of variables cannot be greater than fgMaxDimension.; A colon which is followed by (or that follows) another semicolon; is not regarded as a separator.; If there are more separating : than fgMaxDimension - 1 then; all characters after (fgMaxDimension - 1)th colon is put into; the last variable.; fDimension := <number of variables>; fVarExp[0] := <first variable string>; fVarExp[1] := <second variable string>; ..; Returns kFALSE in case of an error. Bool_t ParseName(TString name); Syntax:; [' '*][[\+][' '*]name[(num1 [, [num2] ] [, [num3] ] ...)]]; num's are floating point numbers; sets the fileds fNoParameters, fParameterGiven, fParameters, fAdd, fName; to apropriate values.; Returns kFALSE in case of an error. Bool_t ParseVarExp(); Split variables and parse name and parameters in brackets. Bool_t ParseOption(); Check if options contain some data important for choosing the type of the; drawn object. Bool_t Parse(const char* varexp, const char* selection, Option_t* option); Parses parameters from TTree::Draw().; varexp - Variable expression; see TTree::Draw(); selection - selection expression; see TTree::Draw(); option - Drawnig option; see TTree::Draw. TString GetProofSelectorName() const; Returns apropriate TSelector class name for proof for the object that is to be drawn; assumes that Parse() method has been called before. Double_t GetParameter(int num) const; returns *num*-th parameter from brackets in the e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeDrawArgsParser.html:7948,error,error,7948,root/html528/TTreeDrawArgsParser.html,https://root.cern,https://root.cern/root/html528/TTreeDrawArgsParser.html,4,['error'],['error']
Availability,"ckground color of headers. void SetOddRowBackground(Pixel_t pixel); Set the background color for all odd numbered rows. void SetEvenRowBackground(Pixel_t pixel); Set the background color for all even numbered rows. void SetHeaderBackground(Pixel_t pixel); Set the background color for the headers. void SetDefaultColors(); Set the background color for all rows and headers to their defaults. void MoveTable(Int_t rows, Int_t columns); Move and layout the table to the specified range. void GotoTableRange(Int_t xtl, Int_t ytl, Int_t xbr, Int_t ybr); Move and resize the table to the specified range. TGTableCell * operator()(UInt_t row, UInt_t column); Operator for easy cell acces. void ScrollCHeaders(Int_t xpos); Scroll the column headers horizontally. void ScrollRHeaders(Int_t ypos); Scroll the row headers vertically. void NextChunk(); Move the table to the next chunk of the data set with the same size. void PreviousChunk(); Move the table to the previous chunk of the data set with the same size. void Goto(); Slot used by the Goto button and whenever return is pressed in; on of the text entries in the range frame. void UserRangeChange(); Slot used when the text in one of the range frame text entries changes. void Update(); Update the range of the available data and refresh the current view. TGTable(const TGWindow* p = 0, Int_t id = 0, TVirtualTableInterface* interface = 0, UInt_t nrows = 50, UInt_t ncolumns = 20). TVirtualTableInterface * GetInterface(); { return fInterface; }. TGCanvas * GetCanvas(); { return fCanvas; }. const TGTableHeaderFrame * GetRHdrFrame(); { return fRHdrFrame; }. const TGTableHeaderFrame * GetCHdrFrame(); { return fCHdrFrame; }. » Author: Roel Aaij 21/07/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 30 14:57:56 2015 » Last generated: 2015-06-30 14:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTable.html:32244,avail,available,32244,root/html602/TGTable.html,https://root.cern,https://root.cern/root/html602/TGTable.html,1,['avail'],['available']
Availability,"ckground component only.; # The VisualizeError() option can generally applied to _any_ kind of; # plot (components, asymmetries, etc..); model.plotOn(frame, VisualizeError=(r, 1), FillColor=""kOrange"", Components=""bkg""); model.plotOn(; frame,; VisualizeError=(r, 1, False),; DrawOption=""L"",; LineWidth=2,; LineColor=""r"",; Components=""bkg"",; LineStyle=""--"",; ); ; # Overlay central value; model.plotOn(frame); model.plotOn(frame, Components=""bkg"", LineStyle=""--""); d.plotOn(frame); frame.SetMinimum(0); ; # Visualize partial fit error; # ------------------------------------------------------; ; # Make plot frame; frame2 = x.frame(Bins=40, Title=""Visualization of 2-sigma partial error from (m,m2)""); ; # Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); ; # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method; model.plotOn(frame2, VisualizeError=(r, {m, m2}, 2), FillColor=""c""); model.plotOn(frame2, Components=""bkg"", VisualizeError=(r, {m, m2}, 2), FillColor=""c""); ; model.plotOn(frame2); model.plotOn(frame2, Components=""bkg"", LineStyle=""--""); frame2.SetMinimum(0); ; # Make plot frame; frame3 = x.frame(Bins=40, Title=""Visualization of 2-sigma partial error from (s,s2)""); ; # Propagate partial error due to yield parameter using linear and sampling; # method; model.plotOn(frame3, VisualizeError=(r, {s, s2}, 2), FillColor=""g""); model.plotOn(frame3, Components=""bkg"", VisualizeError=(r, {fsig}, 2), FillColor=""g""); ; model.plotOn(frame3); model.plotOn(frame3, Components=""bkg"", LineStyle=""--""); frame3.SetMinimum(0); ; # Make plot frame; fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8py.html:3709,error,error,3709,doc/master/rf610__visualerror_8py.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8py.html,2,['error'],['error']
Availability,"ckground pixmap of the window ""id"" to the specified pixmap ""pxm"". ;  ; void SetWindowName (Window_t id, char *name) override;  Sets the window name. ;  ; void SetWMPosition (Window_t id, Int_t x, Int_t y) override;  Tells the window manager the desired position [x,y] of window ""id"". ;  ; void SetWMSize (Window_t id, UInt_t w, UInt_t h) override;  Tells window manager the desired size of window ""id"". ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Gives the window manager minimum and maximum size hints of the window ""id"". ;  ; void SetWMState (Window_t id, EInitialState state) override;  Sets the initial state of the window ""id"": either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ;  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtracts regb from rega and stores the results in result. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of the string ""s"" in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  Translates coordinates in one window to the coordinate space of another window. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Updates the destination region from a union of the specified rectangle and the specified source region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:27332,mask,mask,27332,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"ckgroundframe background color; TList*TGMainFrame::fBindListlist with key bindings; Int_tTGFrame::fBorderWidthframe border width; TGHorizontalFrame*fBotFrameBottom horizontal frame; TBrowser*TBrowserImp::fBrowserTBrowser associated with this implementation; const TGPicture*fCachedPicCached picture; TStringfCachedPicNameCached picture name; TGCanvas*fCanvasCanvas for the list tree; TStringTGMainFrame::fClassNameWM class name; TGClient*TGObject::fClientConnection to display server; Long_tfCntCounters for keys inside a Root file; TContextMenu*fContextMenupointer to context menu; TGListTreeItem*fCurrentDirCurrent (list tree) directory; Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; Bool_tfDblClickkTRUE if user double-clicked on a list tree item; TSystemDirectory*fDirActual (selected) system directory; TGComboBox*fDrawOptionDraw options combobox; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TSystemFile*fFileActual (selected) system file; const TGPicture*fFileIconSystem files icon; TGComboBox*fFileTypeFile type combobox; TRegexp*fFilterRegular expression used to filter files; Int_tfGroupSizetotal number of items when icon box switched to ""global view"" mode; Bool_tfGroupedkTRUE if Root file content (keys) is grouped; UInt_tTGFrame::fHeightframe height; TStringTGMainFrame::fIconNameicon name; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TGListTreeItem*fListLevelCurrent list tree level; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TGListTree*fListTreeMain list tree; UInt_tTGMainFrame::fMWMFuncs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFileBrowser.html:20887,mask,mask,20887,root/html528/TGFileBrowser.html,https://root.cern,https://root.cern/root/html528/TGFileBrowser.html,2,['mask'],['mask']
Availability,"ckleLoadsDefinition PyMethodBase.h:130; TMVA::PyMethodBase::~PyMethodBasevirtual ~PyMethodBase()Definition PyMethodBase.cxx:120; TMVA::PyMethodBase::fGlobalNSstatic PyObject * fGlobalNSDefinition PyMethodBase.h:133; TMVA::PyMethodBase::fModulePicklestatic PyObject * fModulePickleDefinition PyMethodBase.h:128; TMVA::PyMethodBase::fModuleBuiltinstatic PyObject * fModuleBuiltinDefinition PyMethodBase.h:123; TMVA::PyMethodBase::PyMethodBasePyMethodBase(const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""")Definition PyMethodBase.cxx:84; TMVA::PyMethodBase::fEvalstatic PyObject * fEvalDefinition PyMethodBase.h:124; TMVA::PyMethodBase::GetValueFromDictstatic PyObject * GetValueFromDict(PyObject *dict, const char *key)Utility function which checks if a given key is present in a Python dictionary object and returns the...Definition PyMethodBase.cxx:409; TMVA::PyMethodBase::PyRunStringvoid PyRunString(TString code, TString errorMessage=""Failed to run python code"", int start=256)Execute Python code from string.Definition PyMethodBase.cxx:325; TMVA::PyMethodBase::fLocalNSPyObject * fLocalNSDefinition PyMethodBase.h:134; TMVA::Tools::LogMsgLogger & Log() constDefinition Tools.h:228; TMVA::Types::EMVAEMVADefinition Types.h:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::GetFromPipevirtual TString GetFromPipe(const char *command)Execute command and return output in TString.Definition TSystem.cxx:680; int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::Python_ExecutableTString Python_Executable()Function to find current Python executable used by ROOT If ""Python3"" is installed,...Definition PyMethodBase.cxx:43; TMVA::gToolsTools & gTools(); TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:19081,error,errorMessage,19081,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,1,['error'],['errorMessage']
Availability,"cks.end_request != NULL) {; 6560 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6561 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6562 }; 6563 log_access(conn);; 6564}; 6565 ; 6566 ; 6567#if defined(USE_HTTP2); 6568#if defined(NO_SSL); 6569#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6570#endif; 6571#define USE_ALPN; 6572#include ""mod_http2.inl""; 6573/* Not supported with HTTP/2 */; 6574#define HTTP1_only \; 6575 { \; 6576 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) { \; 6577 http2_must_use_http1(conn); \; 6578 return; \; 6579 } \; 6580 }; 6581#else; 6582#define HTTP1_only; 6583#endif; 6584 ; 6585 ; 6586int; 6587mg_read(struct mg_connection *conn, void *buf, size_t len); 6588{; 6589 if (len > INT_MAX) {; 6590 len = INT_MAX;; 6591 }; 6592 ; 6593 if (conn == NULL) {; 6594 return 0;; 6595 }; 6596 ; 6597 if (conn->is_chunked) {; 6598 size_t all_read = 0;; 6599 ; 6600 while (len > 0) {; 6601 if (conn->is_chunked >= 3) {; 6602 /* No more data left to read */; 6603 return 0;; 6604 }; 6605 if (conn->is_chunked != 1) {; 6606 /* Has error */; 6607 return -1;; 6608 }; 6609 ; 6610 if (conn->consumed_content != conn->content_len) {; 6611 /* copy from the current chunk */; 6612 int read_ret = mg_read_inner(conn, (char *)buf + all_read, len);; 6613 ; 6614 if (read_ret < 1) {; 6615 /* read error */; 6616 conn->is_chunked = 2;; 6617 return -1;; 6618 }; 6619 ; 6620 all_read += (size_t)read_ret;; 6621 len -= (size_t)read_ret;; 6622 ; 6623 if (conn->consumed_content == conn->content_len) {; 6624 /* Add data bytes in the current chunk have been read,; 6625 * so we are expecting \r\n now. */; 6626 char x[2];; 6627 conn->content_len += 2;; 6628 if ((mg_read_inner(conn, x, 2) != 2) || (x[0] != '\r'); 6629 || (x[1] != '\n')) {; 6630 /* Protocol violation */; 6631 conn->is_chunked = 2;; 6632 return -1;; 6633 }; 6634 }; 6635 ; 6636 } else {; 6637 /* fetch a new chunk */; 6638 size_t i;; 6639 char lenbuf[64];; 6640 char *end = NULL;; 6641 unsigned long chunkSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:192102,error,error,192102,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"cks.end_request != NULL) {; 6561 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6562 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6563 }; 6564 log_access(conn);; 6565}; 6566 ; 6567 ; 6568#if defined(USE_HTTP2); 6569#if defined(NO_SSL); 6570#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6571#endif; 6572#define USE_ALPN; 6573#include ""mod_http2.inl""; 6574/* Not supported with HTTP/2 */; 6575#define HTTP1_only \; 6576 { \; 6577 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) { \; 6578 http2_must_use_http1(conn); \; 6579 return; \; 6580 } \; 6581 }; 6582#else; 6583#define HTTP1_only; 6584#endif; 6585 ; 6586 ; 6587int; 6588mg_read(struct mg_connection *conn, void *buf, size_t len); 6589{; 6590 if (len > INT_MAX) {; 6591 len = INT_MAX;; 6592 }; 6593 ; 6594 if (conn == NULL) {; 6595 return 0;; 6596 }; 6597 ; 6598 if (conn->is_chunked) {; 6599 size_t all_read = 0;; 6600 ; 6601 while (len > 0) {; 6602 if (conn->is_chunked >= 3) {; 6603 /* No more data left to read */; 6604 return 0;; 6605 }; 6606 if (conn->is_chunked != 1) {; 6607 /* Has error */; 6608 return -1;; 6609 }; 6610 ; 6611 if (conn->consumed_content != conn->content_len) {; 6612 /* copy from the current chunk */; 6613 int read_ret = mg_read_inner(conn, (char *)buf + all_read, len);; 6614 ; 6615 if (read_ret < 1) {; 6616 /* read error */; 6617 conn->is_chunked = 2;; 6618 return -1;; 6619 }; 6620 ; 6621 all_read += (size_t)read_ret;; 6622 len -= (size_t)read_ret;; 6623 ; 6624 if (conn->consumed_content == conn->content_len) {; 6625 /* Add data bytes in the current chunk have been read,; 6626 * so we are expecting \r\n now. */; 6627 char x[2];; 6628 conn->content_len += 2;; 6629 if ((mg_read_inner(conn, x, 2) != 2) || (x[0] != '\r'); 6630 || (x[1] != '\n')) {; 6631 /* Protocol violation */; 6632 conn->is_chunked = 2;; 6633 return -1;; 6634 }; 6635 }; 6636 ; 6637 } else {; 6638 /* fetch a new chunk */; 6639 size_t i;; 6640 char lenbuf[64];; 6641 char *end = NULL;; 6642 unsigned long chunkSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:192134,error,error,192134,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['error'],['error']
Availability,"cks; 1199 // -its secondary branchcount pointing to fTracks.fNpoint; 1200 Int_t stype = bre->GetStreamerType();; 1201 // FIXME: Should 60 be included here?; 1202 if ((stype > 40) && (stype < 61)) {; 1203 TString name2 (bre->GetName());; 1204 Ssiz_t bn = name2.Last('.');; 1205 if (bn<0) {; 1206 continue;; 1207 }; 1208 TStreamerBasicPointer *el = (TStreamerBasicPointer*)bre->GetInfoImp()->GetElements()->FindObject(name2.Data()+bn+1);; 1209 name2.Remove(bn+1);; 1210 if (el) name2 += el->GetCountName();; 1211 TBranchElement *bc2 = (TBranchElement*)fBranches.FindObject(name2);; 1212 bre->SetBranchCount2(bc2);; 1213 }; 1214 bre->SetReadLeavesPtr();; 1215 bre->SetFillLeavesPtr();; 1216 }; 1217}; 1218 ; 1219////////////////////////////////////////////////////////////////////////////////; 1220/// Loop on all leaves of this branch to fill the basket buffer.; 1221///; 1222/// The function returns the number of bytes committed to the; 1223/// individual branches. If a write error occurs, the number of; 1224/// bytes returned is -1. If no data are written, because, e.g.,; 1225/// the branch is disabled, the number of bytes returned is 0.; 1226///; 1227/// Note: We not not use any member functions from TLeafElement!; 1228 ; 1229Int_t TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper *imtHelper); 1230{; 1231 Int_t nbytes = 0;; 1232 Int_t nwrite = 0;; 1233 Int_t nerror = 0;; 1234 Int_t nbranches = fBranches.GetEntriesFast();; 1235 ; 1236 ValidateAddress();; 1237 ; 1238 //; 1239 // If we are a top-level branch, update addresses.; 1240 //; 1241 ; 1242 if (fID < 0) {; 1243 if (!fObject) {; 1244 Error(""Fill"", ""attempt to fill branch %s while address is not set"", GetName());; 1245 return 0;; 1246 }; 1247 }; 1248 ; 1249 //; 1250 // If the tree has a TRefTable, set the current branch if; 1251 // branch is not a basic type.; 1252 //; 1253 ; 1254 // FIXME: This test probably needs to be extended past 10.; 1255 if ((fType >= -1) && (fType < 10)) {; 1256 TBranchRef* bref = fTree->GetB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:42855,error,error,42855,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"clFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  TSelector (const TSelector &);  ; TSelector & operator= (const TSelector &);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSelector.h>. Inheritance diagram for TSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAbort. enum TSelector::EAbort. EnumeratorkContinue ; kAbortProcess ; kAbortFile . Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:13898,avail,available,13898,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['avail'],['available']
Availability,"clFileName(). static const char * TGQuartz::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 108 of file TGQuartz.h. ◆ DrawBox(). void TGQuartz::DrawBox ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . EBoxMode ; mode . ). overridevirtual . Draws a box between [x1,y1] and [x2,y2] according to the ""mode"". ; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]modedrawing mode:; mode = 0 hollow (kHollow); mode = 1 solid (kSolid) . Reimplemented from TVirtualX.; Definition at line 119 of file TGQuartz.mm. ◆ DrawCellArray(). void TGQuartz::DrawCellArray ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . Int_t * ; ic . ). overridevirtual . Draws a cell array. ; The drawing is done with the pixel precision if (x2-x1)/nx (or y) is not a exact pixel number the position of the top right corner may be wrong.; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]nx,nyarray size ; [in]icarray . Reimplemented from TVirtualX.; Definition at line 244 of file TGQuartz.mm. ◆ DrawFillArea(). void TGQuartz::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fills area described by the polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points. xy(2,n) . Reimplemented from TVirtualX.; Definition at line 186 of file TGQuartz.mm. ◆ DrawFTGlyphIntoPixmap(). void TGQuartz::DrawFTGlyphIntoPixmap ; (; void * ; pixmap, . FT_Bitmap * ; source, . ULong_t ; fore, . ULong_t ; back, . Int_t ; bx, . Int_t ; by . ). private . Definition at line 916 of file TGQuartz.mm. ◆ DrawLine() [1/2]. void TGCocoa::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ; GC components in use: function, plane-mask, line-width, line-style, cap-style, fill-st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGQuartz.html:55135,down,down,55135,doc/master/classTGQuartz.html,https://root.cern,https://root.cern/doc/master/classTGQuartz.html,1,['down'],['down']
Availability,"class Fitter. friend . Definition at line 340 of file FitResult.h. Member Data Documentation. ◆ fBoundParams. std::map<unsigned int, unsigned int> ROOT::Fit::FitResult::fBoundParams. protected . list of limited parameters ; Definition at line 358 of file FitResult.h. ◆ fChi2. double ROOT::Fit::FitResult::fChi2. protected . fit chi2 value (different than fval in case of chi2 fits) ; Definition at line 352 of file FitResult.h. ◆ fCovMatrix. std::vector<double> ROOT::Fit::FitResult::fCovMatrix. protected . covariance matrix (size is npar*(npar+1)/2) where npar is total parameters ; Definition at line 362 of file FitResult.h. ◆ fCovStatus. int ROOT::Fit::FitResult::fCovStatus. protected . covariance matrix status code ; Definition at line 349 of file FitResult.h. ◆ fEdm. double ROOT::Fit::FitResult::fEdm. protected . expected distance from minimum ; Definition at line 351 of file FitResult.h. ◆ fErrors. std::vector<double> ROOT::Fit::FitResult::fErrors. protected . errors ; Definition at line 361 of file FitResult.h. ◆ fFitData. std::shared_ptr<FitData> ROOT::Fit::FitResult::fFitData. protected . ! data set used in the fit ; Definition at line 356 of file FitResult.h. ◆ fFitFunc. std::shared_ptr<IModelFunction> ROOT::Fit::FitResult::fFitFunc. protected . ! model function resulting from the fit. ; Definition at line 355 of file FitResult.h. ◆ fFixedParams. std::map<unsigned int, bool> ROOT::Fit::FitResult::fFixedParams. protected . list of fixed parameters ; Definition at line 357 of file FitResult.h. ◆ fGlobalCC. std::vector<double> ROOT::Fit::FitResult::fGlobalCC. protected . global Correlation coefficient ; Definition at line 363 of file FitResult.h. ◆ fMinimizer. std::shared_ptr<ROOT::Math::Minimizer> ROOT::Fit::FitResult::fMinimizer. protected . ! minimizer object used for fitting ; Definition at line 353 of file FitResult.h. ◆ fMinimType. std::string ROOT::Fit::FitResult::fMinimType. protected . string indicating type of minimizer ; Definition at line 365 of file Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:25703,error,errors,25703,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['error'],['errors']
Availability,"class TAttFill. Fill Area Attributes class; This class is used (in general by secondary inheritance); by many other classes (graphics, histograms). It holds all the fill area; attributes.; Fill Area attributes; Fill Area attributes are:. Fill Area color.; Fill Area style. Fill Area color; The fill area color is a color index (integer) pointing in the ROOT; color table.; The fill area color of any class inheriting from TAttFill can; be changed using the method SetFillColor and retrieved using the; method GetFillColor.; The following table shows the first 50 default colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }. Color transparency; SetFillColorAlpha(), allows to set a transparent color.; In the following example the fill color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetFillColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; The ROOT Color Wheel.; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the Color Wheel are created by TColor::CreateColorWheel.; Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers.; Colors are grouped by hue, the aspect most important in human perception; Touching color chips have the same hue, but with different brightness and vividness.; Colors of slightly different hues clash. If you intend to display; colors of the same hue together, you should pick them from the same group.; Each color chip is identified by a mnemonic (eg kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file Rtyp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttFill.html:1240,avail,available,1240,root/html534/TAttFill.html,https://root.cern,https://root.cern/root/html534/TAttFill.html,1,['avail'],['available']
Availability,"class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also from the fitted function. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each graph. When TGraph::Fit is invoked, the fitted function is added to this list. Given a graph gr, one can retrieve an associated function with: TF1 *myfunc = gr->GetFunction(""myfunc"");; TGraph::GetFunctionTF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TGraph.cxx:1416; grTGraphErrors * grDefinition legend1.C:25; If the graph is made persistent, the list of associated functions is also persistent. Given a pointer (see above) to an associated function myfunc, one can retrieve the function/fit parameters with calls such as: Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::GetChisquareDouble_t GetChisquare() constReturn the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2()Definition TF1.h:472; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540. Fit Statistics; You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111). v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph):; Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:35968,error,error,35968,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['error'],['error']
Availability,"class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TASPluginGS::HashULong_t Hash() const overrideReturn hash value for this object.Definition TASPluginGS.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TASImagePlugin.; Definition at line 34 of file TASPluginGS.h. ◆ IsA(). TClass * TASPluginGS::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TASImagePlugin.; Definition at line 38 of file TASPluginGS.h. ◆ Streamer(). void TASPluginGS::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TASImagePlugin. ◆ StreamerNVirtual(). void TASPluginGS::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 38 of file TASPluginGS.h. Member Data Documentation. ◆ fInterpreter. char* TASPluginGS::fInterpreter. private . path to GhostScript interpreter ; Definition at line 28 of file TASPluginGS.h. Libraries for TASPluginGS:. [legend]; The documentatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPluginGS.html:13845,error,error,13845,doc/master/classTASPluginGS.html,https://root.cern,https://root.cern/doc/master/classTASPluginGS.html,1,['error'],['error']
Availability,"class. ; Definition at line 70 of file TClassDocOutput.cxx. ◆ Class_Name(). static const char * TClassDocOutput::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClassDocOutput::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file TClassDocOutput.h. ◆ ClassDotCharts(). Bool_t TClassDocOutput::ClassDotCharts ; (; std::ostream & ; out). This function builds the class charts for one class in GraphViz/Dot format, i.e. ; the inheritance diagram, the include dependencies, and the library dependency.; Input: out - output file stream ; Definition at line 393 of file TClassDocOutput.cxx. ◆ ClassHtmlTree(). void TClassDocOutput::ClassHtmlTree ; (; std::ostream & ; out, . TClass * ; classPtr, . ETraverse ; dir = kBoth, . int ; depth = 1 . ). protected . This function builds the class tree for one class in HTML (inherited and succeeding classes, called recursively) ; Input: out - output file stream classPtr - pointer to the class dir - direction to traverse tree: up, down or both ; Definition at line 466 of file TClassDocOutput.cxx. ◆ ClassTree(). void TClassDocOutput::ClassTree ; (; TVirtualPad * ; psCanvas, . Bool_t ; force = kFALSE . ). protected . It makes a graphical class tree. ; Input: psCanvas - pointer to the current canvas classPtr - pointer to the class ; Definition at line 586 of file TClassDocOutput.cxx. ◆ CreateClassHierarchy(). void TClassDocOutput::CreateClassHierarchy ; (; std::ostream & ; out, . const char * ; docFileName . ). Create the hierarchical class list part for the current class's base classes. ; docFileName contains doc for fCurrentClass. ; Definition at line 1059 of file TClassDocOutput.cxx. ◆ CreateDotClassChartIncl(). Bool_t TClassDocOutput::CreateDotClassChartIncl ; (; const char * ; filename). protected . Build the include dependency graph for one class in GraphViz/Dot format. ; Input: filename - output dot file incl. path ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocOutput.html:21522,down,down,21522,doc/master/classTClassDocOutput.html,https://root.cern,https://root.cern/doc/master/classTClassDocOutput.html,1,['down'],['down']
Availability,"class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLMultiRootFinder.cxx. ◆ GetType(). std::pair< bool, int > ROOT::Math::GSLMultiRootFinder::GetType ; (; const char * ; name). protected . Definition at line 207 of file GSLMultiRootFinder.cxx. ◆ Iterations(). int ROOT::Math::GSLMultiRootFinder::Iterations ; (; ); const. inline . Return number of iterations. ; Definition at line 228 of file GSLMultiRootFinder.h. ◆ Name(). const char * ROOT::Math::GSLMultiRootFinder::Name ; (; ); const. Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ; Definition at line 147 of file GSLMultiRootFinder.cxx. ◆ operator=() [1/2]. GSLMultiRootFinder & ROOT::Math::GSLMultiRootFinder::operator= ; (; const GSLMultiRootFinder & ; ). delete . ◆ operator=() [2/2]. GSLMultiRootFinder & ROOT::Math::GSLMultiRootFinder::operator= ; (; GSLMultiRootFinder && ; ). delete . ◆ PrintLevel(). int ROOT::Math::GSLMultiRootFinder::PrintLevel ; (; ); const. inline . return the print level ; Definition at line 249 of file GSLMultiRootFinder.h. ◆ PrintState(). void ROOT::Math::GSLMultiRootFinder::PrintState ; (; std::ostream & ; os = std::cout). print iteration state ; Definition at line 321 of file GSLMultiRootFinder.cxx. ◆ SetDefaultMaxIterations(). void ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterations ; (; int ; maxiter). static . set maximum number of iterations ; Definition at line 62 of file GSLMultiRootFinder.cxx. ◆ SetDefaultTolerance(). void ROOT::Math::GSLMultiRootFinder",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:9129,avail,available,9129,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['avail'],['available']
Availability,"class.Definition TClass.cxx:5045; TF11-Dim function classDefinition TF1.h:233; TF1::GetNumbervirtual Int_t GetNumber() constDefinition TF1.h:526; TF1::GetParLimitsvirtual void GetParLimits(Int_t ipar, Double_t &parmin, Double_t &parmax) constReturn limits for parameter ipar.Definition TF1.cxx:1940; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::Classstatic TClass * Class(); TF1::SetChisquarevirtual void SetChisquare(Double_t chi2)Definition TF1.h:640; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::GetNparvirtual Int_t GetNpar() constDefinition TF1.h:509; TF1::SetParErrorsvirtual void SetParErrors(const Double_t *errors)Set errors for all active parameters when calling this function, the array errors must have at least ...Definition TF1.cxx:3490; TF1::SetParentvirtual void SetParent(TObject *p=nullptr)Definition TF1.h:706; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::Copyvoid Copy(TObject &f1) const overrideCopy this F1 to a new F1.Definition TF1.cxx:1005; TF1::SetNumberFitPointsvirtual void SetNumberFitPoints(Int_t npfits)Definition TF1.h:652; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346; TF1::GetRangevirtual void GetRange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::IsLinearvirtual Bool_t IsLinear() constDefinition TF1.h:630; TF1::IsVectorizedbool IsVectorized()Definition TF1.h:467; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::Savevirtual void Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax)Save values of function in arra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:53031,error,errors,53031,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,3,['error'],['errors']
Availability,"classes | Graphics » Graphics attributes. ; Marker Attributes class. ; This class is used (in general by secondary inheritance) by many other classes (graphics, histograms). It holds all the markers attributes. Marker attributes; The marker attributes are:. Marker color; Marker style; Marker line width. Marker size. Marker color; The marker color is a color index (integer) pointing in the ROOT color table. The marker color of any class inheriting from TAttMarker can be changed using the method SetMarkerColor and retrieved using the method GetMarkerColor. The following table shows the first 50 default colors. Color transparency; SetMarkerColorAlpha(), allows to set a transparent color. In the following example the marker color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetMarkerColorAlpha(kBlue, 0.35);; kBlue@ kBlueDefinition Rtypes.h:66; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);. Marker style; The Marker style defines the markers' shape. The marker style of any class inheriting from TAttMarker can be changed using the method SetMarkerStyle and retrieved using the method GetMarkerStyle.; The following list gives the currently supported markers (screen and PostScript) style. Each marker style is identified by an integer number (first column) corresponding to a marker shape (second column) and can be also accessed via a global name (third column).; Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttMarker.html:1292,avail,available,1292,doc/master/classTAttMarker.html,https://root.cern,https://root.cern/doc/master/classTAttMarker.html,1,['avail'],['available']
Availability,"cle = """"); Delete object namecycle.; Namecycle identifies an object in the top directory of the file; namecycle has the format name;cycle; name = * means all; cycle = * means all cycles (memory and keys); cycle = """" or cycle = 9999 ==> apply to a memory object; When name=* use T* to delete subdirectories also. Examples:; foo : delete object named foo in memory; foo;1 : delete cycle 1 of foo on file; foo;* : delete all cycles of foo on disk and also from memory; *;2 : delete all objects on file having the cycle 2; *;* : delete all objects from memory and file; T*;* : delete all objects from memory and file and all subdirectories. void Draw(Option_t* option = """"); Fill Graphics Structure and Paint.; Loop on all objects (memory or file) and all subdirectories. void DrawMap(const char* keys = ""*"", Option_t* option = """"); Draw map of objects in this file. void Flush(); Synchronize a file's in-core and on-disk states. Bool_t FlushWriteCache(); Flush the write cache if active.; Return kTRUE in case of error. void FillBuffer(char*& buffer); Encode file output buffer.; The file output buffer contains only the FREE data record. Int_t GetBestBuffer() const; Return the best buffer size of objects on this file.; The best buffer size is estimated based on the current mean value; and standard deviation of all objects written so far to this file.; Returns mean value + one standard deviation. Float_t GetCompressionFactor(); Return the file compression factor.; Add total number of compressed/uncompressed bytes for each key.; return ratio of the two. Int_t GetErrno() const; Method returning errno. Is overriden in TRFIOFile. void ResetErrno() const; Method resetting the errno. Is overridden in TRFIOFile. TFileCacheRead * GetCacheRead() const; Return a pointer to the current read cache. TFileCacheWrite * GetCacheWrite() const; Return a pointer to the current write cache. Int_t GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:28637,error,error,28637,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,3,['error'],['error']
Availability,"cle = """"); Delete object namecycle.; Namecycle identifies an object in the top directory of the file; namecycle has the format name;cycle; name = * means all; cycle = * means all cycles (memory and keys); cycle = """" or cycle = 9999 ==> apply to a memory object; When name=* use T* to delete subdirectories also. Examples:; foo : delete object named foo in memory; foo;1 : delete cycle 1 of foo on file; foo;* : delete all cycles of foo on disk and also from memory; *;2 : delete all objects on file having the cycle 2; *;* : delete all objects from memory and file; T*;* : delete all objects from memory and file and all subdirectories. void Draw(Option_t* option = """"); Fill Graphics Structure and Paint.; Loop on all objects (memory or file) and all subdirectories. void DrawMap(const char* keys = ""*"", Option_t* option = """"); Draw map of objects in this file. void Flush(); Synchronize a file's in-core and on-disk states. Bool_t FlushWriteCache(); Flush the write cache if active.; Return kTRUE in case of error. void FillBuffer(char*& buffer); Encode file output buffer.; The file output buffer contains only the FREE data record. Int_t GetBestBuffer() const; Return the best buffer size of objects on this file.; The best buffer size is estimated based on the current mean value; and standard deviation of all objects written so far to this file.; Returns mean value + one standard deviation. Float_t GetCompressionFactor(); Return the file compression factor.; Add total number of compressed/uncompressed bytes for each key.; return ratio of the two. Int_t GetErrno() const; Method returning errno. Is overriden in TRFIOFile. void ResetErrno() const; Method resetting the errno. Is overridden in TRFIOFile. TFileCacheRead * GetCacheRead(TObject* tree = 0) const; Return a pointer to the current read cache. TFileCacheWrite * GetCacheWrite() const; Return a pointer to the current write cache. Int_t GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFile.html:30296,error,error,30296,root/html534/TFile.html,https://root.cern,https://root.cern/root/html534/TFile.html,3,['error'],['error']
Availability,"cle() const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBeauty() const; virtual voidTObject::Browse(TBrowser* b); Double_tCharge() const; Int_tCharm() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; TDecayChannel*DecayChannel(Int_t i); TObjArray*DecayList(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; Double_tI3() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParticlePDG.html:2771,error,error,2771,root/html534/TParticlePDG.html,https://root.cern,https://root.cern/root/html534/TParticlePDG.html,3,['error'],['error']
Availability,"cle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  fitLinear2.C Fit a 5d hyperplane by n points, using the linear fitter directly ;  fitLinearRobust.C This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers ;  fitMultiGraph.C fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  fitNormSum.C Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:105731,error,errors,105731,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['error'],['errors']
Availability,"clearStudies(); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tcommitTransaction(); virtual Int_tTNamed::Compare(const TObject* obj) const; TIterator*componentIterator() const; const RooArgSet&components() const; virtual voidTNamed::Copy(TObject& named) const; RooAbsData*data(const char* name) const; Bool_tdefineSet(const char* name, const char* contentList); Bool_tdefineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; RooAbsData*embeddedData(const char* name) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache(); voidexportToCint(const char* namespaceName = 0); Bool_textendSet(const char* name, const char* newContents); RooFactoryWSTool&factory(); RooAbsArg*factory(const char* expr); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsReal*function(const char* name) const; RooAbsArg*fundArg(const char* name) const; TObject*genobj(const char* name) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:3490,error,error,3490,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,3,['error'],['error']
Availability,"clicMode mode);  AclicMode indicates whether the library should be built in debug mode or optimized. ;  ; virtual void SetBuildDir (const char *build_dir, Bool_t isflat=kFALSE);  Set the location where ACLiC will create libraries and use as a scratch area. ;  ; virtual void SetDisplay ();  Set DISPLAY environment variable based on utmp entry. Only for UNIX. ;  ; virtual void SetDynamicPath (const char *pathname);  Set the dynamic path to a new value. ;  ; virtual void Setenv (const char *name, const char *value);  Set environment variable. ;  ; void SetErrorStr (const char *errstr);  Set the system error string. ;  ; virtual void SetFlagsDebug (const char *);  FlagsDebug should contain the options to pass to the C++ compiler in order to compile the library in debug mode. ;  ; virtual void SetFlagsOpt (const char *);  FlagsOpt should contain the options to pass to the C++ compiler in order to compile the library in optimized mode. ;  ; virtual Int_t SetFPEMask (Int_t mask=kDefaultMask);  Set which conditions trigger a floating point exception. ;  ; virtual void SetIncludePath (const char *includePath);  IncludePath should contain the list of compiler flags to indicate where to find user defined header files. ;  ; virtual void SetLinkdefSuffix (const char *suffix);  The 'suffix' will be appended to the name of a script loaded by ACLiC and used to locate any eventual additional linkdef information that ACLiC should used to produce the dictionary. ;  ; virtual void SetLinkedLibs (const char *linkedLibs);  LinkedLibs should contain the library directory and list of libraries needed to recreate the current executable. ;  ; virtual void SetMakeExe (const char *directives);  Directives has the same syntax as the argument of SetMakeSharedLib but is used to create an executable. ;  ; virtual void SetMakeSharedLib (const char *directives);  Directives should contain the description on how to compile and link a shared lib. ;  ; virtual void SetObjExt (const char *objExt);  Set o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:16664,mask,mask,16664,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,6,['mask'],['mask']
Availability,"clingdictversion.h "");; 2653 }; 2654 }; 2655#endif; 2656 {; 2657 const char *dictHeaders[] = { ""RVersion.h"", ""ROOT/RConfig.hxx"", ""TClass.h"",; 2658 ""TDictAttributeMap.h"",""TInterpreter.h"",""TROOT.h"",""TBuffer.h"",; 2659 ""TMemberInspector.h"",""TError.h"",""RtypesImp.h"",""TIsAProxy.h"",; 2660 ""TFileMergeInfo.h"",""TCollectionProxyInfo.h""};; 2661 ; 2662 for (unsigned int h=0; h < sizeof(dictHeaders)/sizeof(dictHeaders[0]); ++h); 2663 {; 2664 char *rootVersion = gSystem->Which(incPath,dictHeaders[h]);; 2665 if (rootVersion) {; 2666 R__AddPath(adddictdep,rootVersion);; 2667 delete [] rootVersion;; 2668 } else {; 2669 R__AddPath(adddictdep,rootsysInclude + ""/"" + dictHeaders[h]);; 2670 }; 2671 adddictdep += "" "";; 2672 }; 2673 }; 2674 {; 2675 // Add dependency on rootcling.; 2676 char *rootCling = gSystem->Which(gSystem->Getenv(""PATH""),""rootcling"");; 2677 if (rootCling) {; 2678 R__AddPath(adddictdep,rootCling);; 2679 adddictdep += "" "";; 2680 delete [] rootCling;; 2681 }; 2682 }; 2683 adddictdep += "" >> \""""+depfilename+""\"""";; 2684 ; 2685 TString addversiondep( ""echo "");; 2686 addversiondep += libname + version_var_prefix + "" \"""" + ROOT_RELEASE + ""\"" >> \""""+depfilename+""\"""";; 2687 ; 2688 if (gDebug > 4) {; 2689 ::Info(""ACLiC"", ""%s"", touch.Data());; 2690 ::Info(""ACLiC"", ""%s"", builddep.Data());; 2691 ::Info(""ACLiC"", ""%s"", adddictdep.Data());; 2692 }; 2693 ; 2694 Int_t depbuilt = !gSystem->Exec(touch);; 2695 if (depbuilt) depbuilt = !gSystem->Exec(builddep);; 2696 if (depbuilt) depbuilt = !gSystem->Exec(adddictdep);; 2697 if (depbuilt) depbuilt = !gSystem->Exec(addversiondep);; 2698 ; 2699 if (!depbuilt) {; 2700 ::Warning(""ACLiC"",""Failed to generate the dependency file for %s"",; 2701 library.Data());; 2702 } else {; 2703#ifdef WIN32; 2704 gSystem->Unlink(stderrfile);; 2705#endif; 2706 gSystem->Unlink(bakdepfilename);; 2707 }; 2708}; 2709 ; 2710////////////////////////////////////////////////////////////////////////////////; 2711/// This method compiles and loads a shared library containing; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:86677,echo,echo,86677,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['echo'],['echo']
Availability,"close logging file ; Definition at line 456 of file TSQLFile.cxx. ◆ StoreObjectInTables(). Long64_t TSQLFile::StoreObjectInTables ; (; Long64_t ; keyid, . const void * ; obj, . const TClass * ; cl . ). protected . Store object in database. Return stored object id or -1 if error. ; Definition at line 2511 of file TSQLFile.cxx. ◆ Streamer(). void TSQLFile::Streamer ; (; TBuffer & ; b). overridevirtual . Streamer for TSQLFile class. ; Stores only data for TDirectory. ; Reimplemented from TFile.; Definition at line 2668 of file TSQLFile.cxx. ◆ StreamerNVirtual(). void TSQLFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 254 of file TSQLFile.h. ◆ StreamKeysForDirectory(). Int_t TSQLFile::StreamKeysForDirectory ; (; TDirectory * ; dir, . Bool_t ; doupdate, . Long64_t ; specialkeyid = -1, . TKeySQL ** ; specialkey = nullptr . ). protected . read keys for specified directory (when update == kFALSE) or update value for modified keys when update == kTRUE Returns number of successfully read keys or -1 if error ; Definition at line 920 of file TSQLFile.cxx. ◆ SysClose(). Int_t TSQLFile::SysClose ; (; Int_t ; fd). inlinefinalprotectedvirtual . Interface to system close. All arguments like in POSIX close(). ; Reimplemented from TFile.; Definition at line 45 of file TSQLFile.h. ◆ SysOpen(). Int_t TSQLFile::SysOpen ; (; const char * ; pathname, . Int_t ; flags, . UInt_t ; mode . ). inlinefinalprotectedvirtual . Interface to system open. All arguments like in POSIX open(). ; Reimplemented from TFile.; Definition at line 44 of file TSQLFile.h. ◆ SysRead(). Int_t TSQLFile::SysRead ; (; Int_t ; fd, . void * ; buf, . Int_t ; len . ). inlinefinalprotectedvirtual . Interface to system read. All arguments like in POSIX read(). ; Reimplemented from TFile.; Definition at line 46 of file TSQLFile.h. ◆ SysSeek(). Long64_t TSQLFile::SysSeek ; (; Int_t ; fd, . Long64_t ; offset, . Int_t ; whence . ). inlinefinalprotectedvirtual . Interface to syst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:97950,error,error,97950,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['error'],['error']
Availability,"closing the coordinatesis returned. ; [in]correctForBinSizeEnable the inverse bin volume correction factor. ; [in]cdfBoundariesEnable the special boundary condition for a cdf: underflow bins are assumed to have weight zero and overflow bins have weight one. Otherwise, the histogram is mirrored at the boundaries for the interpolation. ; [in]oneSafeIgnored. . Definition at line 1434 of file RooDataHist.cxx. ◆ weight() [3/3]. double RooDataHist::weight ; (; std::size_t ; i); const. inline . Return weight of i-th bin. ; See alsogetIndex() ; Definition at line 110 of file RooDataHist.h. ◆ weightArray(). double const * RooDataHist::weightArray ; (; ); const. inline . Definition at line 216 of file RooDataHist.h. ◆ weightError() [1/2]. void RooDataHist::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; etype = Poisson . ); const. overridevirtual . Return the asymmetric errors on the current weight. ; See alsoweightError(ErrorType) const for symmetric error. ; Parameters. [out]loLow error. ; [out]hiHigh error. ; [in]etypeType of error to compute. May throw if not supported. Supported errors are; Poisson Default. Asymmetric Poisson errors (68% CL).; SumW2 The square root of the sum of weights. (Symmetric).; None Return zero. . Reimplemented from RooAbsData.; Definition at line 1570 of file RooDataHist.cxx. ◆ weightError() [2/2]. double RooDataHist::weightError ; (; ErrorType ; etype = Poisson); const. inlineoverridevirtual . Return the symmetric error on the current weight. ; See also weightError(double&,double&,ErrorType) const for asymmetric errors. ; Reimplemented from RooAbsData.; Definition at line 125 of file RooDataHist.h. ◆ weightFast(). double RooDataHist::weightFast ; (; const RooArgSet & ; bin, . int ; intOrder, . bool ; correctForBinSize, . bool ; cdfBoundaries . ). A faster version of RooDataHist::weight that assumes the passed arguments are aligned with the histogram variables. ; Parameters. [in]binCoordinates for which the weight should be calcula",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:82096,error,error,82096,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['error'],['error']
Availability,"clude ""TApplication.h""; 24#include ""TException.h""; 25#include ""TGuiFactory.h""; 26#include ""TVirtualX.h""; 27#include ""TROOT.h""; 28#include ""TSystem.h""; 29#include ""TString.h""; 30#include ""TError.h""; 31#include ""TObjArray.h""; 32#include ""TObjString.h""; 33#include ""TTimer.h""; 34#include ""TInterpreter.h""; 35#include ""TStyle.h""; 36#include ""TVirtualPad.h""; 37#include ""TEnv.h""; 38#include ""TColor.h""; 39#include ""TPluginManager.h""; 40#include ""TClassTable.h""; 41#include ""TBrowser.h""; 42#include ""TUrl.h""; 43#include ""TVirtualMutex.h""; 44#include ""TClassEdit.h""; 45#include ""TMethod.h""; 46#include ""TDataMember.h""; 47#include ""TApplicationCommandLineOptionsHelp.h""; 48#include ""TPRegexp.h""; 49#include <cstdlib>; 50#include <iostream>; 51#include <fstream>; 52 ; 53TApplication *gApplication = nullptr;; 54Bool_t TApplication::fgGraphNeeded = kFALSE;; 55Bool_t TApplication::fgGraphInit = kFALSE;; 56TList *TApplication::fgApplications = nullptr; // List of available applications; 57 ; 58////////////////////////////////////////////////////////////////////////////////; 59 ; 60class TIdleTimer : public TTimer {; 61public:; 62 TIdleTimer(Long_t ms) : TTimer(ms, kTRUE) {}; 63 Bool_t Notify() override;; 64};; 65 ; 66////////////////////////////////////////////////////////////////////////////////; 67/// Notify handler.; 68 ; 69Bool_t TIdleTimer::Notify(); 70{; 71 gApplication->HandleIdleTimer();; 72 Reset();; 73 return kFALSE;; 74}; 75 ; 76 ; 77ClassImp(TApplication);; 78 ; 79static void CallEndOfProcessCleanups(); 80{; 81 // Insure that the files, canvases and sockets are closed.; 82 ; 83 // If we get here, the tear down has started. We have no way to know what; 84 // has or has not yet been done. In particular on Ubuntu, this was called; 85 // after the function static in TSystem.cxx has been destructed. So we; 86 // set gROOT in its end-of-life mode which prevents executing code, like; 87 // autoloading libraries (!) that is pointless ...; 88 if (gROOT) {; 89 gROOT->SetBit(kInvalidObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:1966,avail,available,1966,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['avail'],['available']
Availability,"clude <Rtypes.h>; 17 ; 18#include <functional>; 19#include <stdexcept>; 20#include <string>; 21 ; 22#include <tuple>; 23 ; 24namespace ROOT {; 25namespace RDF {; 26 ; 27/// This type represents a sample identifier, to be used in conjunction with RDataFrame features such as; 28/// \ref ROOT::RDF::RInterface< Proxied, DS_t >::DefinePerSample ""DefinePerSample()"" and per-sample callbacks.; 29///; 30/// When the input data comes from a TTree, the string representation of RSampleInfo (which is returned by AsString(); 31/// and that can be queried e.g. with Contains()) is of the form ""<filename>/<treename>"".; 32///; 33/// In multi-thread runs, different tasks might process different entry ranges of the same sample,; 34/// so RSampleInfo also provides methods to inspect which part of a sample is being taken into consideration.; 35class RSampleInfo {; 36 std::string fID;; 37 std::pair<ULong64_t, ULong64_t> fEntryRange;; 38 ; 39 const ROOT::RDF::Experimental::RSample *fSample = nullptr; // non-owning; 40 ; 41 void ThrowIfNoSample() const; 42 {; 43 if (fSample == nullptr) {; 44 const auto msg = ""RSampleInfo: sample data was requested but no samples are available."";; 45 throw std::logic_error(msg);; 46 }; 47 }; 48 ; 49public:; 50 RSampleInfo(std::string_view id, std::pair<ULong64_t, ULong64_t> entryRange,; 51 const ROOT::RDF::Experimental::RSample *sample = nullptr); 52 : fID(id), fEntryRange(entryRange), fSample(sample); 53 {; 54 }; 55 RSampleInfo() = default;; 56 RSampleInfo(const RSampleInfo &) = default;; 57 RSampleInfo &operator=(const RSampleInfo &) = default;; 58 RSampleInfo(RSampleInfo &&) = default;; 59 RSampleInfo &operator=(RSampleInfo &&) = default;; 60 ~RSampleInfo() = default;; 61 ; 62 /// @brief Get the name of the sample as a string.; 63 const std::string &GetSampleName() const; 64 {; 65 ThrowIfNoSample();; 66 return fSample->GetSampleName();; 67 }; 68 ; 69 /// @brief Get the sample id as an int.; 70 unsigned int GetSampleId() const; 71 {; 72 ThrowIfNoSample();;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSampleInfo_8hxx_source.html:1910,avail,available,1910,doc/master/RSampleInfo_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RSampleInfo_8hxx_source.html,1,['avail'],['available']
Availability,"clude file; for each class in the StreamerInfo list for which a TClass; object does not exist. The code generated includes:; dirnameProjectHeaders.h // contains one #include statement per generated header file; dirnameProjectSource.cxx // contains all the constructors and destructors implementation.; and one header per class that is not nested inside another class.; The header file name is the fully qualified name of the class after all the special characters; ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is; pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class; are replaced by a vector of pair. set and multiset when the tempalte parameter; is a class are replaced by a vector. This is required since we do not have the; code needed to order and/or compare the object of the classes. If option = ""new"" (default) a new directory dirname is created.; If dirname already exist, an error message is printed; and the function returns.; If option = ""recreate"", then;; if dirname does not exist, it is created (like in ""new""); if dirname already exist, all existing files in dirname; are deleted before creating the new files.; If option = ""update"", then new classes are added to the existing directory.; Existing classes with the same name are replaced by the; new definition. If the directory dirname doest not exist,; same effect as ""new"".; If option = ""genreflex"", then use genreflex rather than rootcint to generate; the dictionary.; If option = ""par"", create a PAR file with the minimal set of code needed to read the content; of the ROOT file. The name of the PAR file is basename(dirname), with extension; '.par' enforced; the PAR file will be created at dirname(dirname) .; If, in addition to one of the 3 above options, the option ""+"" is specified,; the function will generate:; - a script called MAKEP to build the shared lib; - a dirnameLinkDef.h file; - rootcint will be run to gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFile.html:44265,error,error,44265,root/html602/TFile.html,https://root.cern,https://root.cern/root/html602/TFile.html,2,['error'],['error']
Availability,"cludes; Libraries. Function documentation; TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg""); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs' of the local file 'fin'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. virtual ~TProofMgrLite(); { }. » Author: G. Ganis, Apr 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TProofMgrLite.h 26823 2008-12-11 09:26:32Z ganis $ » Last generated: 2010-11-17 19:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofMgrLite.html:10011,failure,failure,10011,root/html528/TProofMgrLite.html,https://root.cern,https://root.cern/root/html528/TProofMgrLite.html,2,['failure'],['failure']
Availability,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:3236,toler,toler,3236,root/html602/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html,8,['toler'],['toler']
Availability,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:4041,toler,toler,4041,root/html602/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html,1,['toler'],['toler']
Availability,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__CombinedMinimizer.html:4041,toler,toler,4041,root/html604/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__CombinedMinimizer.html,1,['toler'],['toler']
Availability,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html:3855,toler,toler,3855,root/html602/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html,2,['toler'],['toler']
Availability,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::SimplexMinimizer&operator=(const ROOT::Minuit2::SimplexMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(); ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(const ROOT::Minuit2::SimplexMinimizer&). Data Members; private:. ROOT::Minuit2::SimplexBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimplexMinimizer(); {}. ~SimplexMinimizer(); {}. » Last changed: root/mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__SimplexMinimizer.html:3871,toler,toler,3871,root/html602/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__SimplexMinimizer.html,2,['toler'],['toler']
Availability,"cn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::VariableMetricMinimizer&operator=(const ROOT::Minuit2::VariableMetricMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::VariableMetricMinimizerVariableMetricMinimizer(); ROOT::Minuit2::VariableMetricMinimizerVariableMetricMinimizer(const ROOT::Minuit2::VariableMetricMinimizer&). Data Members; private:. ROOT::Minuit2::VariableMetricBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableMetricMinimiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html:3917,toler,toler,3917,root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__VariableMetricMinimizer.html,2,['toler'],['toler']
Availability,cn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.27133; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 166 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28726; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 9 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; Minuit2Minimizer : Invalid minimum - status = 3; FVAL = -2419.31; Edm = -nan; Nfcn = 34; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.2898; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28374; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 44 errors; ; RooAbsMinimizerFcn: Minimized function has error status but ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:11766,error,errors,11766,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,4,['error'],"['error', 'errors']"
Availability,"co; .Define(""weight"", [&] { return luminosity * xsec_SMHiggsToZZTo4L / nevt_SMHiggsToZZTo4L; }); .Histo1D({""h_sig_2el2mu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; const auto xsec_ZZTo2el2mu = 0.18; // ZZ->2el2mu: Standard Model cross-section; const auto nevt_ZZTo2el2mu = 1497445.0; // ZZ->2el2mu: Number of simulated events; auto df_bkg_2el2mu_reco = reco_higgs_to_2el2mu(df_bkg_2el2mu);; auto df_h_bkg_2el2mu = df_bkg_2el2mu_reco; .Define(""weight"", [&] { return luminosity * xsec_ZZTo2el2mu * scale_ZZTo4l / nevt_ZZTo2el2mu; }); .Histo1D({""h_bkg_2el2mu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; auto df_data_2el2mu_reco = reco_higgs_to_2el2mu(df_data_doublemu);; auto df_h_data_2el2mu = df_data_2el2mu_reco.Define(""weight"", [] { return 1.0; }); .Histo1D({""h_data_2el2mu_doublemu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; // RunGraphs allows to run the event loops of the separate RDataFrame graphs; // concurrently. This results in an improved usage of the available resources; // if each separate RDataFrame can not utilize all available resources, e.g.,; // because not enough data is available.; ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,; df_h_sig_4el, df_h_bkg_4el, df_h_data_4el,; df_h_sig_2el2mu, df_h_bkg_2el2mu, df_h_data_2el2mu});; ; // Make plots; plot(df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu, ""m_{4#mu} (GeV)"", ""higgs_4mu.pdf"");; plot(df_h_sig_4el, df_h_bkg_4el, df_h_data_4el, ""m_{4e} (GeV)"", ""higgs_4el.pdf"");; plot(df_h_sig_2el2mu, df_h_bkg_2el2mu, df_h_data_2el2mu, ""m_{2e2#mu} (GeV)"", ""higgs_2el2mu.pdf"");; ; // Combine channels for final plot; auto h_data_4l = df_h_data_4mu.GetPtr();; h_data_4l->Add(df_h_data_4el.GetPtr());; h_data_4l->Add(df_h_data_2el2mu.GetPtr());; auto h_sig_4l = df_h_sig_4mu.GetPtr();; h_sig_4l->Add(df_h_sig_4el.GetPtr());; h_sig_4l->Add(df_h_sig_2el2mu.GetPtr());; auto h_bkg_4l = df_h_bkg_4mu.GetPtr();; h_bkg_4l->Add(df_h_bkg_4el.GetPtr());; h_bkg_4l->Add(df_h_bkg_2el2mu.GetPtr());; plot(h_sig_4l, h_bkg_4l, h_da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html:20171,avail,available,20171,doc/master/df103__NanoAODHiggsAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html,2,['avail'],['available']
Availability,"coa.; Definition at line 228 of file TVirtualX.cxx. ◆ CreatePictureFromData(). Bool_t TVirtualX::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). virtual . Creates a picture pict from data in bitmap format. ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1453 of file TVirtualX.cxx. ◆ CreatePictureFromFile(). Bool_t TVirtualX::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). virtual . Creates a picture pict from data in file ""filename"". ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1438 of file TVirtualX.cxx. ◆ CreatePixmap() [1/2]. Pixmap_t TVirtualX::CreatePixmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height, . ULong_t ; forecolor, . ULong_t ; backcolor, . Int_t ; depth . ). virtual . Creates a pixmap from bitmap data of the width, height, and depth you specified and returns a pixmap that identifies it. ; The width and height arguments must be nonzero. The depth argument must be one of the depths supported by the screen of the specified drawable.; Parameters. [in]idspecifies which screen the pixmap is created on ; [in]bitmapthe data in bitmap format ; [in]width,heightdefine the dimensions of the pixmap ; [in]forecolorthe foreground pixel values to use ; [in]backcolorthe background pixel values to use ; [in]depththe depth of the pixmap . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:63710,mask,mask,63710,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['mask'],['mask']
Availability,"code == 304) {; 17960 conn->content_len = 0;; 17961 }; 17962 } else {; 17963 /* TODO: we should also consider HEAD method */; 17964 if (((conn->response_info.status_code >= 100); 17965 && (conn->response_info.status_code <= 199)); 17966 || (conn->response_info.status_code == 204); 17967 || (conn->response_info.status_code == 304)) {; 17968 conn->content_len = 0;; 17969 } else {; 17970 conn->content_len = -1; /* unknown content length */; 17971 }; 17972 }; 17973 ; 17974 return 1;; 17975}; 17976 ; 17977 ; 17978int; 17979mg_get_response(struct mg_connection *conn,; 17980 char *ebuf,; 17981 size_t ebuf_len,; 17982 int timeout); 17983{; 17984 int err, ret;; 17985 char txt[32]; /* will not overflow */; 17986 char *save_timeout;; 17987 char *new_timeout;; 17988 ; 17989 if (ebuf_len > 0) {; 17990 ebuf[0] = '\0';; 17991 }; 17992 ; 17993 if (!conn) {; 17994 mg_snprintf(conn,; 17995 NULL, /* No truncation check for ebuf */; 17996 ebuf,; 17997 ebuf_len,; 17998 ""%s"",; 17999 ""Parameter error"");; 18000 return -1;; 18001 }; 18002 ; 18003 /* Reset the previous responses */; 18004 conn->data_len = 0;; 18005 ; 18006 /* Implementation of API function for HTTP clients */; 18007 save_timeout = conn->dom_ctx->config[REQUEST_TIMEOUT];; 18008 ; 18009 if (timeout >= 0) {; 18010 mg_snprintf(conn, NULL, txt, sizeof(txt), ""%i"", timeout);; 18011 new_timeout = txt;; 18012 } else {; 18013 new_timeout = NULL;; 18014 }; 18015 ; 18016 conn->dom_ctx->config[REQUEST_TIMEOUT] = new_timeout;; 18017 ret = get_response(conn, ebuf, ebuf_len, &err);; 18018 conn->dom_ctx->config[REQUEST_TIMEOUT] = save_timeout;; 18019 ; 18020 /* TODO: here, the URI is the http response code */; 18021 conn->request_info.local_uri_raw = conn->request_info.request_uri;; 18022 conn->request_info.local_uri = conn->request_info.local_uri_raw;; 18023 ; 18024 /* TODO (mid): Define proper return values - maybe return length?; 18025 * For the first test use <0 for error and >0 for OK */; 18026 return (ret == 0) ? -1 : +1;; 18027}; 1802",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:534323,error,error,534323,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"code == 304) {; 17961 conn->content_len = 0;; 17962 }; 17963 } else {; 17964 /* TODO: we should also consider HEAD method */; 17965 if (((conn->response_info.status_code >= 100); 17966 && (conn->response_info.status_code <= 199)); 17967 || (conn->response_info.status_code == 204); 17968 || (conn->response_info.status_code == 304)) {; 17969 conn->content_len = 0;; 17970 } else {; 17971 conn->content_len = -1; /* unknown content length */; 17972 }; 17973 }; 17974 ; 17975 return 1;; 17976}; 17977 ; 17978 ; 17979int; 17980mg_get_response(struct mg_connection *conn,; 17981 char *ebuf,; 17982 size_t ebuf_len,; 17983 int timeout); 17984{; 17985 int err, ret;; 17986 char txt[32]; /* will not overflow */; 17987 char *save_timeout;; 17988 char *new_timeout;; 17989 ; 17990 if (ebuf_len > 0) {; 17991 ebuf[0] = '\0';; 17992 }; 17993 ; 17994 if (!conn) {; 17995 mg_snprintf(conn,; 17996 NULL, /* No truncation check for ebuf */; 17997 ebuf,; 17998 ebuf_len,; 17999 ""%s"",; 18000 ""Parameter error"");; 18001 return -1;; 18002 }; 18003 ; 18004 /* Reset the previous responses */; 18005 conn->data_len = 0;; 18006 ; 18007 /* Implementation of API function for HTTP clients */; 18008 save_timeout = conn->dom_ctx->config[REQUEST_TIMEOUT];; 18009 ; 18010 if (timeout >= 0) {; 18011 mg_snprintf(conn, NULL, txt, sizeof(txt), ""%i"", timeout);; 18012 new_timeout = txt;; 18013 } else {; 18014 new_timeout = NULL;; 18015 }; 18016 ; 18017 conn->dom_ctx->config[REQUEST_TIMEOUT] = new_timeout;; 18018 ret = get_response(conn, ebuf, ebuf_len, &err);; 18019 conn->dom_ctx->config[REQUEST_TIMEOUT] = save_timeout;; 18020 ; 18021 /* TODO: here, the URI is the http response code */; 18022 conn->request_info.local_uri_raw = conn->request_info.request_uri;; 18023 conn->request_info.local_uri = conn->request_info.local_uri_raw;; 18024 ; 18025 /* TODO (mid): Define proper return values - maybe return length?; 18026 * For the first test use <0 for error and >0 for OK */; 18027 return (ret == 0) ? -1 : +1;; 18028}; 1802",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:534356,error,error,534356,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"code). void EnableAutoLoading(). void EndOfLineAction(). TClass * GetClass(const type_info& typeinfo, Bool_t load) const. Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. TClass * GenerateTClass(const char* classname, Bool_t emulation, Bool_t silent = kFALSE). TClass * GenerateTClass(ClassInfo_t* classinfo, Bool_t silent = kFALSE). Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. void Initialize(). void InspectMembers(TMemberInspector& , const void* obj, const TClass* cl, Bool_t isTransient). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). void RegisterModule(const char* , const char** , const char** , const char* , const char* , void(*)() , const TInterpreter::FwdDeclArgsToKeepCollection_t& fwdDeclArgsToKeep, const char** classesHeaders). void UnRegisterTClassUpdate(const TClass* oldcl). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char*(*)(const char*) getlineFunc, void(*)(const char*) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:27148,error,error,27148,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['error'],['error']
Availability,"coefList=(a1 = 10 +/- 0,a2 = -1 +/- 0,a3 = 0.01); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = -1002.2262595660759; Edm = 2.95538313214564806e-09; Nfcn = 251; a1 = -0.498159 +/- 0.0227242 (limited); a2 = 0.198316 +/- 0.00564906 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 0, estimated distance to minimum: 0; covariance matrix quality: Not calculated at all; Status : MINIMIZE=-1 HESSE=302 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a1 1.0000e+01 +/- 0.00e+00; a2 -1.0000e+00 +/- 0.00e+00; ; ; RooFitResult: minimized FCN value: 29650.9, estimated distance to minimum: 2.95925e-09; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a1 -4.9816e-01 +/- 2.27e-02; a2 1.9832e-01 +/- 5.65e-03; ; ; ; ; -------------- Starting second fit ---------------; ; ; Without recovery, the fitter encountered 23 invalid function values. The parameters are unchanged.; ; With recovery, the fitter encountered 23 invalid function values, but the parameters are fitted.; ; DateJune 2021 ; AuthorHarshal Shende, Stephan Hageboeck (C++ version) ; Definition in file rf612_recoverFromInvalidParameters.py. tutorialsroofitrf612_recoverFromInvalidParameters.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:7843,recover,recovery,7843,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,2,['recover'],['recovery']
Availability,"color, Float_t falpha); 2052{; 2053 if (e == -1); 2054 SetFillColorAlpha(fcolor, falpha);; 2055 else if (e >= 0 && e < fNYErrors); 2056 fAttFill[e].SetFillColorAlpha(fcolor, falpha);; 2057}; 2058 ; 2059////////////////////////////////////////////////////////////////////////////////; 2060/// Set Fill Style of error e (-1 = Global and x errors).; 2061 ; 2062void TGraphMultiErrors::SetFillStyle(Int_t e, Style_t fstyle); 2063{; 2064 if (e == -1); 2065 SetFillStyle(fstyle);; 2066 else if (e >= 0 && e < fNYErrors); 2067 fAttFill[e].SetFillStyle(fstyle);; 2068}; 2069 ; 2070////////////////////////////////////////////////////////////////////////////////; 2071/// Set Line Color of error e (-1 = Global and x errors).; 2072 ; 2073void TGraphMultiErrors::SetLineColor(Int_t e, Color_t lcolor); 2074{; 2075 if (e == -1); 2076 SetLineColor(lcolor);; 2077 else if (e >= 0 && e < fNYErrors); 2078 fAttLine[e].SetLineColor(lcolor);; 2079}; 2080 ; 2081////////////////////////////////////////////////////////////////////////////////; 2082/// Set Line Color and Alpha of error e (-1 = Global and x errors).; 2083 ; 2084void TGraphMultiErrors::SetLineColorAlpha(Int_t e, Color_t lcolor, Float_t lalpha); 2085{; 2086 if (e == -1); 2087 SetLineColorAlpha(lcolor, lalpha);; 2088 else if (e >= 0 && e < fNYErrors); 2089 fAttLine[e].SetLineColorAlpha(lcolor, lalpha);; 2090}; 2091 ; 2092////////////////////////////////////////////////////////////////////////////////; 2093/// Set Line Style of error e (-1 = Global and x errors).; 2094 ; 2095void TGraphMultiErrors::SetLineStyle(Int_t e, Style_t lstyle); 2096{; 2097 if (e == -1); 2098 SetLineStyle(lstyle);; 2099 else if (e >= 0 && e < fNYErrors); 2100 fAttLine[e].SetLineStyle(lstyle);; 2101}; 2102 ; 2103////////////////////////////////////////////////////////////////////////////////; 2104/// Set Line Width of error e (-1 = Global and x errors).; 2105 ; 2106void TGraphMultiErrors::SetLineWidth(Int_t e, Width_t lwidth); 2107{; 2108 if (e == -1); 2109 SetLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:70133,error,error,70133,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"colors[27].red = 117; colors[27].green = 240; colors[27].blue = 240;; 94 }; 95 ; 96 ; 97 /*; 98 * Allocate memory for segments; 99 */; 100 ; 101 if (gSize3D.numSegs) {; 102 segs = (segment *) calloc (gSize3D.numSegs, sizeof (segment));; 103 if (!segs) {; 104 puts (""Unable to allocate memory for segments !"");; 105 ret = 0;; 106 }; 107 }; 108 ; 109 ; 110 /*; 111 * Allocate memory for polygons; 112 */; 113 ; 114 if (gSize3D.numPolys) {; 115 polys = (polygon *) calloc(gSize3D.numPolys, sizeof (polygon));; 116 if (!polys) {; 117 puts (""Unable to allocate memory for polygons !"");; 118 ret = 0;; 119 }; 120 }; 121 ; 122 /*; 123 * In case of error, free allocated memory; 124 */; 125 ; 126 ; 127 if (!ret) {; 128 if (points) free (points);; 129 if (colors) free (colors);; 130 if (segs) free (segs);; 131 if (polys) free (polys);; 132 ; 133 points = NULL;; 134 colors = NULL;; 135 segs = NULL;; 136 polys = NULL;; 137 }; 138 ; 139 return (ret);; 140}; 141 ; 142void FillX3DBuffer (X3DBuffer *buff); 143{; 144/******************************************************************************; 145 Read points, Read segments & Read polygons; 146******************************************************************************/; 147 ; 148 ; 149 int n, i, j, p, q, c;; 150 int oldNumOfPoints, oldNumOfSegments;; 151 ; 152 if (buff) {; 153 ; 154 oldNumOfPoints = currPoint;; 155 oldNumOfSegments = currSeg;; 156 ; 157 /*; 158 * Read points; 159 */; 160 ; 161 for (i = 0; i < buff->numPoints; i++, currPoint++) {; 162 points[currPoint].x = buff->points[3*i ];; 163 points[currPoint].y = buff->points[3*i+1];; 164 points[currPoint].z = buff->points[3*i+2];; 165 }; 166 ; 167 ; 168 /*; 169 * Read segments; 170 */; 171 ; 172 for (i = 0; i < buff->numSegs; i++, currSeg++) {; 173 c = buff->segs[3*i];; 174 p = oldNumOfPoints + buff->segs[3*i+1];; 175 q = oldNumOfPoints + buff->segs[3*i+2];; 176 ; 177 segs[currSeg].color = &(colors[c]);; 178 segs[currSeg].P = &(points[p]);; 179 segs[currSeg].Q = &(points[q]);; 180",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:4233,error,error,4233,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['error'],['error']
Availability,"commit:. Undo the commit:; git reset --soft HEAD^. Do stuff.; Recommit:; git commit -a -m <message> -c ORIG_HEAD. Note that the -c ORIG_HEAD clause causes git to use the meta-data from the previous HEAD (author, etc) with the exception of the commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the package name tig from the default repositories.; On RHEL-based systems it is available from the additional repository RepoForge.; On OS X it is easily installed via Homebrew:; brew install tig. Tig pager mode; Many git commands can be piped into tig. When tig is invoked this way, it is in pager mode: output will be colored according to the input format, and colored.; For instance it is possible to pipe the differences of one file like this:; git diff path/to/file.cxx | tig. or see the changes of one revision like this:; git show b204d4c87 | tig. The most important interactive tig commands are:. 'h': opens the help screen; 'q': closes current window; 'Q': closes all windows and exits. Log view; Tig invoked without any argument spawns a full log view with one line per commit including author, date and log message. Heads of the different branches are clearly indicated. To see a graph view indicating branching ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:16331,avail,available,16331,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['avail'],['available']
Availability,"compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpalettecolor.C Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:116263,error,error,116263,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['error'],['error']
Availability,"complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; this won't work... looks for a file in pwd starting with TDict. 11. the prototypes tend to omit the word ""const"" a lot.; this is a problem with ROOT or CINT. 12. when listing ambiguous matches, only one column is used,; even if there are many completions. 13. anonymous objects are not currently identified; so, for example,. root> printf( TString([TAB. gives an error message instead of listing TString's constructors.; (this could be fixed). 14. the routine that adds the ""appendage"" isn't smart enough to know; if it's already there:. root> TCanvas::Update(); press [TAB] here ^; root> TCanvas::Update()(); (this could be fixed). 15. the appendage is only applied if there is exactly 1 match.; eg, this. root> G__at[TAB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. TTabCom(); virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char* dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:2666,error,error,2666,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,4,['error'],['error']
Availability,"complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should be #ifdef'd for the different sytems?. 9. the TabCom.FileIgnore resource is always applied, even if you; are not trying to complete a filename. 10. anything in quotes is assumed to be a filename; so (among other things) you can't complete a quoted class name:; eg, TClass class1( ""TDict[TAB] //; this won't work... looks for a file in pwd starting with TDict. 11. the prototypes tend to omit the word ""const"" a lot.; this is a problem with ROOT or CINT. 12. when listing ambiguous matches, only one column is used,; even if there are many completions. 13. anonymous objects are not currently identified; so, for example,. root> printf( TString([TAB. gives an error message instead of listing TString's constructors.; (this could be fixed). 14. the routine that adds the ""appendage"" isn't smart enough to know; if it's already there:. root> TCanvas::Update(); press [TAB] here ^; root> TCanvas::Update()(); (this could be fixed). 15. the appendage is only applied if there is exactly 1 match.; eg, this. root> G__at[TAB]; root> G__ateval. happens instead of this. root> G__at[TAB]; root> G__ateval(. because there are several overloaded versions of G__ateval().; (this could be fixed). Function Members (Methods); public:. virtual~TTabCom(); static Char_tAllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); static voidAppendListOfFilesInDirectory(const char[] dirName, TSeqCollection* pList); static TClass*Class(); voidClearAll(); voidClearClasses(); voidClearCppDirectives(); voidClearEnvVars(); voidClearFiles(); voidClearGlobalFunctions(); voidClearGlobals(); voidClearPragmas(); voidClearSysIncFiles(); voidClearUsers(); static TStringDetermineClass(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:2683,error,error,2683,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['error'],['error']
Availability,"component of a point. ;  ; const std::vector< const double * > & GetCoordDataPtrs () const;  direct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Protected Member Functions; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  . Static Protected Member Functions; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  . Protected Attributes; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . Private Attributes; std::vector< std::vector< double > > fCoords;  This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ;  ; std::vector< const double * > fCoordsPtr;  ; DataOptions fOptions;  ; double * fpTmpCoordVector;  ; DataRange fRange;  . #include <Fit/FitData.h>. Inheritance diagram for ROOT::Fit::FitData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ FitData() [1/13]. ROOT::Fit::FitData::FitData ; (; unsigned int ; maxpoints = 0, . unsigned int ; dim = 1 . ). explicit . construct with default option and data range ; Definition at line 20 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:5106,avail,available,5106,doc/master/classROOT_1_1Fit_1_1FitData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html,1,['avail'],['available']
Availability,"cond; it != itEnd; ++it); 997 {; 998 Batch& batch = *it;; 999 pass_through_type settingsAndBatch (settings, batch, dropContainer);; 1000 Minimizer minimizerClone (minimizer);; 1001 localError += minimizerClone ((*this), weights, settingsAndBatch); /// call the minimizer; 1002 }; 1003 return localError;; 1004 }); 1005 );; 1006 }; 1007 ; 1008 for (auto& f : futures); 1009 error += f.get ();; 1010 }; 1011 else; 1012 {; 1013 for (auto& batch : batches); 1014 {; 1015 std::tuple<Settings&, Batch&, DropContainer&> settingsAndBatch (settings, batch, dropContainer);; 1016 error += minimizer ((*this), weights, settingsAndBatch);; 1017 }; 1018 }; 1019 ; 1020 numBatches_stored = std::max (numBatches_stored, size_t(1)); /// normalize the error; 1021 error /= numBatches_stored;; 1022 settings.testIteration ();; 1023 ; 1024 return error;; 1025 }; 1026 ; 1027 ; 1028 ; 1029 ; 1030 ; 1031/*! \brief compute the neural net; 1032 *; 1033 * \param input the input data; 1034 * \param weights the weight data; 1035 */; 1036 template <typename Weights>; 1037 std::vector<double> Net::compute (const std::vector<double>& input, const Weights& weights) const; 1038 {; 1039 std::vector<LayerData> layerData;; 1040 layerData.reserve (m_layers.size ()+1);; 1041 auto itWeight = begin (weights);; 1042 auto itInputBegin = begin (input);; 1043 auto itInputEnd = end (input);; 1044 layerData.push_back (LayerData (itInputBegin, itInputEnd));; 1045 size_t numNodesPrev = input.size ();; 1046 ; 1047 // -------------------- prepare layer data with one pattern -------------------------------; 1048 for (auto& layer: m_layers); 1049 {; 1050 layerData.push_back (LayerData (layer.numNodes (), itWeight,; 1051 layer.activationFunction (),; 1052 layer.modeOutputValues ()));; 1053 size_t _numWeights = layer.numWeights (numNodesPrev);; 1054 itWeight += _numWeights;; 1055 numNodesPrev = layer.numNodes ();; 1056 }; 1057 ; 1058 ; 1059 // --------- forward -------------; 1060 forwardPattern (m_layers, layerData);; 1061 ; 1062",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:32084,error,error,32084,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['error'],['error']
Availability,"confidence intervals at the x points of the created graph*/; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(grint);; //Now the ""grint"" graph contains function values as its y-coordinates; //and confidence intervals as the errors on these coordinates; //Draw the graph, the function and the confidence intervals; myc->cd(1);; grint->SetLineColor(kRed);; grint->Draw(""ap"");; gr->SetMarkerStyle(5);; gr->SetMarkerSize(0.7);; gr->Draw(""psame"");; ; //### 2. A histogram; myc->cd(2);; //Create, fill and fit a histogram; int nh=5000;; TH1D *h = new TH1D(""h"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; h->FillRandom(""gaus"", nh);; TF1 *f = new TF1(""fgaus"", ""gaus"", -3, 3);; f->SetLineWidth(2);; h->Fit(f, ""Q"");; h->Draw();; ; /*Create a histogram to hold the confidence intervals*/; TH1D *hint = new TH1D(""hint"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(hint);; //Now the ""hint"" histogram has the fitted function values as the; //bin contents and the confidence intervals as bin errors; hint->SetStats(false);; hint->SetFillColor(2);; hint->Draw(""e3 same"");; ; //### 3. A 2d graph; //Create and fill the graph; int ngr2 = 100;; double z, rnd, e=0.3;; TGraph2D *gr2 = new TGraph2D(ngr2);; gr2->SetName(""Graph2DNoError"");; TF2 *f2 = new TF2(""f2"",; ""1000*(([0]*sin(x)/x)*([1]*sin(y)/y))+250"",-6,6,-6,6);; f2->SetParameters(1,1);; for (i=0; i<ngr2; i++){; f2->GetRandom2(x,y);; // Generate a random number in [-e,e]; rnd = 2*gRandom->Rndm()*e-e;; z = f2->Eval(x,y)*(1+rnd);; gr2->SetPoint(i,x,y,z);; }; //Create a graph with errors to store the intervals; TGraph2DErrors *grint2 = new TGraph2DErrors(ngr2);; for (i=0; i<ngr2; i++); grint2->SetPoint(i, gr2->GetX()[i], gr2->GetY()[i], 0);; ; //Fit the graph; f2->SetParameters(0.5,1.5);; gr2->Fit(f2, ""Q"");; /*Compute the confidence intervals*/; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(grint2);; //Now the ""grint2"" graph contains function values as z-coordinates; /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ConfidenceIntervals_8C.html:2335,error,errors,2335,doc/master/ConfidenceIntervals_8C.html,https://root.cern,https://root.cern/doc/master/ConfidenceIntervals_8C.html,1,['error'],['errors']
Availability,"config"")) {; 376 fprintf(stderr, ""ROOT ./configure options:\n%s\n"", gROOT->GetConfigOptions());; 377 Terminate(0);; 378 } else if (!strcmp(argv[i], ""-a"")) {; 379 fprintf(stderr, ""ROOT splash screen is not visible with root.exe, use root instead.\n"");; 380 Terminate(0);; 381 } else if (!strcmp(argv[i], ""-b"")) {; 382 MakeBatch();; 383 argv[i] = null;; 384 } else if (!strcmp(argv[i], ""-n"")) {; 385 fNoLog = kTRUE;; 386 argv[i] = null;; 387 } else if (!strcmp(argv[i], ""-t"")) {; 388 ROOT::EnableImplicitMT();; 389 // EnableImplicitMT() only enables thread safety if IMT was configured;; 390 // enable thread safety even with IMT off:; 391 ROOT::EnableThreadSafety();; 392 argv[i] = null;; 393 } else if (!strcmp(argv[i], ""-q"")) {; 394 fQuit = kTRUE;; 395 argv[i] = null;; 396 } else if (!strcmp(argv[i], ""-l"")) {; 397 // used by front-end program to not display splash screen; 398 fNoLogo = kTRUE;; 399 argv[i] = null;; 400 } else if (!strcmp(argv[i], ""-x"")) {; 401 fExitOnException = kExit;; 402 argv[i] = null;; 403 } else if (!strcmp(argv[i], ""-splash"")) {; 404 // used when started by front-end program to signal that; 405 // splash screen can be popped down (TRint::PrintLogo()); 406 argv[i] = null;; 407 } else if (strncmp(argv[i], ""--web"", 5) == 0) {; 408 // the web mode is requested; 409 const char *opt = argv[i] + 5;; 410 argv[i] = null;; 411 gROOT->SetWebDisplay((*opt == '=') ? opt + 1 : """");; 412 } else if (!strcmp(argv[i], ""-e"")) {; 413 argv[i] = null;; 414 ++i;; 415 ; 416 if ( i < *argc ) {; 417 if (!fFiles) fFiles = new TObjArray;; 418 TObjString *expr = new TObjString(argv[i]);; 419 expr->SetBit(kExpression);; 420 fFiles->Add(expr);; 421 argv[i] = null;; 422 } else {; 423 Warning(""GetOptions"", ""-e must be followed by an expression."");; 424 }; 425 } else if (!strcmp(argv[i], ""--"")) {; 426 TObjString* macro = nullptr;; 427 bool warnShown = false;; 428 ; 429 if (fFiles) {; 430 for (auto f: *fFiles) {; 431 TObjString *file = dynamic_cast<TObjString *>(f);; 432 if (!file) {; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:14200,down,down,14200,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['down'],['down']
Availability,configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum Test error found - save the configuration ; : 168 | 7720.74 6752.64 0.0200614 0.00180502 43820.3 0; : 169 Minimum Test error found - save the configuration ; : 169 | 7657.59 6690.04 0.0201291 0.00181427 43680.6 0; : 170 Minimum Test error found - save the configuration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:29563,error,error,29563,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,configuration ; : 218 | 5125.25 4184.98 0.0205604 0.00182022 42689.1 0; : 219 Minimum Test error found - save the configuration ; : 219 | 5082.85 4144.99 0.0201692 0.00184819 43665.6 0; : 220 Minimum Test error found - save the configuration ; : 220 | 5041.97 4104.3 0.0201733 0.00183631 43627.6 0; : 221 Minimum Test error found - save the configuration ; : 221 | 5000.63 4064.07 0.0203116 0.00186316 43364 0; : 222 Minimum Test error found - save the configuration ; : 222 | 4960.27 4023.61 0.020233 0.0018342 43481.1 0; : 223 Minimum Test error found - save the configuration ; : 223 | 4919.35 3984.02 0.0201371 0.00181764 43669.4 0; : 224 Minimum Test error found - save the configuration ; : 224 | 4878.53 3945.89 0.0203286 0.0018483 43289.4 0; : 225 Minimum Test error found - save the configuration ; : 225 | 4840.32 3905.84 0.0201762 0.00181162 43562 0; : 226 Minimum Test error found - save the configuration ; : 226 | 4799.06 3868.52 0.0201024 0.00180874 43731 0; : 227 Minimum Test error found - save the configuration ; : 227 | 4760.29 3830.98 0.0201923 0.00181512 43532.4 0; : 228 Minimum Test error found - save the configuration ; : 228 | 4721.11 3793.89 0.0201034 0.00181119 43734.4 0; : 229 Minimum Test error found - save the configuration ; : 229 | 4683.32 3755.52 0.0201311 0.00181167 43669.5 0; : 230 Minimum Test error found - save the configuration ; : 230 | 4644.47 3718.53 0.0201323 0.00180638 43654.1 0; : 231 Minimum Test error found - save the configuration ; : 231 | 4606.79 3681.43 0.020129 0.00181323 43678.1 0; : 232 Minimum Test error found - save the configuration ; : 232 | 4567.71 3646.94 0.0201545 0.0018103 43610.4 0; : 233 Minimum Test error found - save the configuration ; : 233 | 4531.87 3609.69 0.0200999 0.00180936 43738.5 0; : 234 Minimum Test error found - save the configuration ; : 234 | 4493.9 3574.45 0.0204352 0.00182946 42997.5 0; : 235 Minimum Test error found - save the configuration ; : 235 | 4458.22 3537.88 0.0202146 0.00181434 43477.6 0; : 23,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:36581,error,error,36581,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91239,error,error,91239,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum Test error found - save the configuration ; : 752 | 17.2045 20.1301 0.0200899 0.00181385 43773 0; : 753 Minimum Test error found - save the configuration ; : 753 | 17.2492 20.0483 0.0200805 0.00181433 43796.8 0; : 754 Minimum Test error found - save the configuration ; : 754 | 16.8738 20.0271 0.0201173 0.00182078 43724.2 0; : 755 | 16.6744 20.3793 0.0200328 0.00175569 43770.5 1; : 756 Minimum Test error found - save the configuration ; : 756 | 16.5214 19.4549 0.0200975 0.00181399 43755.3 0; : 757 | 16.5493 20.0416 0.0200274 0.00175373 43778.7 1; : 758 | 16.7051 19.8344 0.0200284 0.00174826 43763.4 2; : 759 | 16.2032 19.717 0.0200656 0.00175048 43679.7 3; : 760 | 16.1221 19.4686 0.0200628 0.00175006 43685.5 4; : 761 Minimum Test error found - save the configuration ; : 761 | 15.7828 18.8348 0.0201031 0.00181849 43752.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:94177,error,error,94177,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test error found - save the configuration ; : 953 | 3.78482 5.22353 0.0202416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test error found - save the configuration ; : 959 | 3.68258 5.15386 0.0202548 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.97436 0.0200851 0.00180832 43771.4 0; : 961 | 3.60053 5.18492 0.0200347 0.00175376 43761.4 1; : 962 | 4.06747 4.98756 0.0202606 0.00194113 43669.3 2; : 963 | 3.72111 5.2317 0.020058 0.00176556 43733.9 3; : 964 | 3.60317 5.20936 0.020113 0.00175786 43584.5 4; : 965 | 3.63413 5.37485 0.0201057 0.00175921 43605 5; : 966 | 3.74764 5.16986 0.0200985 0.00180899 43741 6; : 967 | 3.64317 5.0911 0.0200896 0.00175556 43634.6 7; : 968 Minimum Test error found - save the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:110411,error,error,110411,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxywidth; RooRealProxyx. private:. Bool_t_doFast; Double_t_invRootPi. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooVoigtian(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _mean, RooAbsReal& _width, RooAbsReal& _sigma, Bool_t doFast = kFALSE). RooVoigtian(const RooVoigtian& other, const char* name = 0). Double_t evaluate() const. RooVoigtian(); {}. TObject* clone(const char* newname) const; { return new RooVoigtian(*this,newname); }. virtual ~RooVoigtian(); { }. void selectFastAlgorithm(); These methods allow the user to select the fast evaluation; of the complex error function using look-up tables; (default is the ""slow"" CERNlib algorithm). { _doFast = kTRUE; }. void selectDefaultAlgorithm(); { _doFast = kFALSE; }. » Last changed: Mon Dec 7 13:49:50 2009 » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooVoigtian.html:40383,error,error,40383,root/html526/RooVoigtian.html,https://root.cern,https://root.cern/root/html526/RooVoigtian.html,1,['error'],['error']
Availability,"configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxywidth; RooRealProxyx. private:. Bool_t_doFast; Double_t_invRootPi. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooVoigtian(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _mean, RooAbsReal& _width, RooAbsReal& _sigma, Bool_t doFast = kFALSE). RooVoigtian(const RooVoigtian& other, const char* name = 0). Double_t evaluate() const. RooVoigtian(); {}. TObject* clone(const char* newname) const; { return new RooVoigtian(*this,newname); }. virtual ~RooVoigtian(); { }. void selectFastAlgorithm(); These methods allow the user to select the fast evaluation; of the complex error function using look-up tables; (default is the ""slow"" CERNlib algorithm). { _doFast = kTRUE; }. void selectDefaultAlgorithm(); { _doFast = kFALSE; }. » Last changed: Mon Jul 4 15:24:49 2011 » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooVoigtian.html:41419,error,error,41419,root/html530/RooVoigtian.html,https://root.cern,https://root.cern/root/html530/RooVoigtian.html,1,['error'],['error']
Availability,"configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxymean; RooRealProxysigma; RooRealProxywidth; RooRealProxyx. private:. Bool_t_doFast; Double_t_invRootPi. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooVoigtian(const char* name, const char* title, RooAbsReal& _x, RooAbsReal& _mean, RooAbsReal& _width, RooAbsReal& _sigma, Bool_t doFast = kFALSE). RooVoigtian(const RooVoigtian& other, const char* name = 0). Double_t evaluate() const. RooVoigtian(); {}. TObject* clone(const char* newname) const; { return new RooVoigtian(*this,newname); }. virtual ~RooVoigtian(); { }. void selectFastAlgorithm(); These methods allow the user to select the fast evaluation; of the complex error function using look-up tables; (default is the ""slow"" CERNlib algorithm). { _doFast = kTRUE; }. void selectDefaultAlgorithm(); { _doFast = kFALSE; }. » Last changed: Thu Nov 3 20:10:08 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooVoigtian.html:41826,error,error,41826,root/html532/RooVoigtian.html,https://root.cern,https://root.cern/root/html532/RooVoigtian.html,1,['error'],['error']
Availability,"connected to the x-axis Range slider for initialising the values of the slider movement. ; Definition at line 1580 of file TH1Editor.cxx. ◆ DoSliderReleased(). void TH1Editor::DoSliderReleased ; (; ). virtual . Slot connected to the x-axis Range slider for finalizing the values of the slider movement. ; Definition at line 1635 of file TH1Editor.cxx. ◆ DoTitle(). void TH1Editor::DoTitle ; (; const char * ; text). virtual . Slot connected to the histogram title setting. ; Definition at line 892 of file TH1Editor.cxx. ◆ GetHistAddLabel(). TString TH1Editor::GetHistAddLabel ; (; ). private . Return the selected shape of the histogram (C, L, LF2). ; Definition at line 2252 of file TH1Editor.cxx. ◆ GetHistCoordsLabel(). TString TH1Editor::GetHistCoordsLabel ; (; ). private . Return the selected coordinate system of the histogram (POL,CYL,SPH,PSR). ; Definition at line 2211 of file TH1Editor.cxx. ◆ GetHistErrorLabel(). TString TH1Editor::GetHistErrorLabel ; (; ). private . Return the selected error type (E,E1-5). ; Definition at line 2232 of file TH1Editor.cxx. ◆ GetHistTypeLabel(). TString TH1Editor::GetHistTypeLabel ; (; ). private . Returns the selected histogram type (HIST, LEGO1-2, SURF1-5). ; Definition at line 2188 of file TH1Editor.cxx. ◆ PaintBox3D(). void TH1Editor::PaintBox3D ; (; Float_t * ; p1, . Float_t * ; p2, . Float_t * ; p3, . Float_t * ; p4 . ). virtual . Paint a 3D box. ; Definition at line 2400 of file TH1Editor.cxx. ◆ RecursiveRemove(). void TH1Editor::RecursiveRemove ; (; TObject * ; obj). overridevirtual . If the contained histogram obj is deleted we must set its pointer to zero. ; Reimplemented from TObject.; Definition at line 2449 of file TH1Editor.cxx. ◆ SetModel(). void TH1Editor::SetModel ; (; TObject * ; obj). overridevirtual . Pick up current values of histogram attributes. ; Implements TGedFrame.; Definition at line 602 of file TH1Editor.cxx. Member Data Documentation. ◆ f10. TGCompositeFrame* TH1Editor::f10. protected . Contains the Bar Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:53190,error,error,53190,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['error'],['error']
Availability,"connects to the remote host, sends the request and returns the buffer. Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 467 of file TWebFile.cxx. ◆ ReadBuffer10(). Bool_t TWebFile::ReadBuffer10 ; (; char * ; buf, . Int_t ; len . ). protectedvirtual . Read specified byte range from remote file via HTTP 1.0 daemon (without mod-root installed). ; This routine connects to the remote host, sends the request and returns the buffer. Returns kTRUE in case of error. ; Definition at line 478 of file TWebFile.cxx. ◆ ReadBuffers(). Bool_t TWebFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). overridevirtual . Read specified byte ranges from remote file via HTTP daemon. ; Reads the nbuf blocks described in arrays pos and len, where pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 517 of file TWebFile.cxx. ◆ ReadBuffers10(). Bool_t TWebFile::ReadBuffers10 ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). protectedvirtual . Read specified byte ranges from remote file via HTTP 1.0 daemon (without mod-root installed). ; Read the nbuf blocks described in arrays pos and len, where pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Definition at line 566 of file TWebFile.cxx. ◆ ReOpen(). Int_t TWebFile::ReOpen ; (; Option_t * ; mode). overridevirtual . Reopen a file with a different access mode, like from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. ; Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:54497,failure,failure,54497,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['failure'],['failure']
Availability,"const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Int_tDistToHype(const Double_t* point, const Double_t* dir, Double_t* s, Bool_t inner, Bool_t in) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:5018,error,error,5018,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,3,['error'],['error']
Availability,"const Double_t* dir, Double_t* norm); virtual Bool_tContains(const Double_t* point) const; virtual voidTObject::Copy(TObject& object) const; voidTGeoBoolNode::CreateThreadData(Int_t nthreads); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceToPrimitive(Int_t px, Int_t py); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGeoBoolNode::EGeoBoolTypeGetBooleanOperator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TGeoMatrix*TGeoBoolNode::GetLeftMatrix() const; TGeoShape*TGeoBoolNode::GetLeftShape() const; virtual const char*TObject::GetName() const; virtual Int_tGetNpoints(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGeoMatrix*TGeoBoolNode::GetRightMatrix() const; TGeoShape*TGeoBoolNode::GetRightShape() const; TGeoBoolNode::ThreadData_t&TGeoBool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoIntersection.html:3023,error,error,3023,root/html534/TGeoIntersection.html,https://root.cern,https://root.cern/root/html534/TGeoIntersection.html,9,['error'],['error']
Availability,"const Double_t* xBins, Int_t ny, const Double_t* yBins, Int_t nz, const Double_t* zBins); -*-*-*-*-*-*-*Redefine x, y and z axis parameters with variable bin sizes *-*-*-*-*-*-*-*-*. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void SetBuffer(Int_t buffersize, Option_t* opt = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile3D errors; *-* =======================================. The computation of the bin errors is based on the parameter option:; option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T),; i.e. the standard error of the bin contents.; Note that if TProfile3D::Approximate() is called, an approximation is used when; the spread in T is 0 and the number of bin entries is > 0. 's' The bin errors are the standard deviations of the T bin values; Note that if TProfile3D::Approximate() is called, an approximation is used when; the spread in T is 0 and the number of bin entries is > 0. 'i' Errors are as in default case (standard errors of the bin contents); The only difference is for the case when the spread in T is zero.; In this case for N > 0 the error is 1./SQRT(12.*N). 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; W is the sum in the bin of the weights of the profile.; This option is for combining measurements t +/- dt,; and the profile is filled with values t and weights w = 1/dt**2. See TProfile::BuildOptions for explanation of all options. void Sumw2(Bool_t flag = kTRUE); Create/Delete structure to store sum of squares of weights per bin *-*-*-*-*-*-*-*; This is needed to compute the correct statistical quantities; of a profile filled with weights. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before.; If flag = false the structure is deleted. Int_t Buffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:44823,error,errors,44823,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,3,['error'],['errors']
Availability,"const Float_t *exl=nullptr, const Float_t *exh=nullptr, const Float_t *eyl=nullptr, const Float_t *eyh=nullptr);  TGraphAsymmErrors normal constructor. ;  ;  ~TGraphAsymmErrors () override;  TGraphAsymmErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.);  Add a point with asymmetric errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on X. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on X. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on Y. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on Y. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Adds all graphs with asymmetric errors from the collection to this graph. ;  ; TGraphAsymmErrors & operator= (const TGraphAsymmErrors &gr);  TGraphAsymmErrors assignment operator. ;  ; void Print (Option_t *chop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:8277,error,error,8277,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,2,['error'],['error']
Availability,"const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). private:. THn&operator=(const THn&). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THn(); Destruct a THn. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all bins. Public interface is THnIter. void Sumw2(); Enable calculation of errors. void AllocCoordBuf() const; Create the coordinate buffer. Outlined to hide allocation; from inlined functions. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void Reset(Option_t* option = """"); Reset the contents of a THn. THn& operator=(const THn& ). void Fill",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THn.html:12937,error,error,12937,root/html534/THn.html,https://root.cern,https://root.cern/root/html534/THn.html,2,['error'],"['error', 'errors']"
Availability,"const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const RooAbsArg& var6, const RooAbsArg& var7, const RooAbsArg& var8, const RooAbsArg& var9, const char* name = """"); Constructor for set containing 9 initial objects. RooArgSet(const TCollection& tcoll, const char* name = """"); Constructor from a root TCollection. Elements in the collection that; do not inherit from RooAbsArg will be skipped. A warning message; will be printed for every skipped item. RooArgSet(const RooArgSet& other, const char* name = """"); Copy constructor. Note that a copy of a set is always non-owning,; even the source set is owning. To create an owning copy of; a set (owning or not), use the snaphot() method. ~RooArgSet(); Destructor. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE); Add element to non-owning set. The operation will fail if; a similarly named object already exists in the set, or; the set is specified to own its elements. Eventual error messages; can be suppressed with the silent flag. Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE); Add element to an owning set. The operation will fail if; a similarly named object already exists in the set, or; the set is not specified to own its elements. Eventual error messages; can be suppressed with the silent flag. RooAbsArg* addClone(const RooAbsArg& var, Bool_t silent = kFALSE); Add clone of specified element to an owning set. If sucessful, the; set will own the clone, not the original. The operation will fail if; a similarly named object already exists in the set, or; the set is not specified to own its elements. Eventual error messages; can be suppressed with the silent flag. RooAbsArg& operator[](const char* name) const; Array operator. Named element must exist in set, otherwise; code will abort. When used as lvalue in assignment operations, the element contained in; the list will not be changed, only the value of the existing element!. Bool_t checkForDup(const RooAbsArg& arg, Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgSet.html:17433,error,error,17433,root/html528/RooArgSet.html,https://root.cern,https://root.cern/root/html528/RooArgSet.html,6,['error'],['error']
Availability,"const RooCmdArg& arg4={},; 118 const RooCmdArg& arg5={},const RooCmdArg& arg6={}) const;; 119 virtual RooFit::OwningPtr<RooDataHist> generateBinned(const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;; 120 ; 121 virtual RooFit::OwningPtr<RooDataSet> generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents) ;; 122 ; 123 ///Helper calling plotOn(RooPlot*, RooLinkedList&) const; 124 RooPlot* plotOn(RooPlot* frame,; 125 const RooCmdArg& arg1={}, const RooCmdArg& arg2={},; 126 const RooCmdArg& arg3={}, const RooCmdArg& arg4={},; 127 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 128 const RooCmdArg& arg7={}, const RooCmdArg& arg8={},; 129 const RooCmdArg& arg9={}, const RooCmdArg& arg10={}; 130 ) const override {; 131 return RooAbsReal::plotOn(frame,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) ;; 132 }; 133 RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const override ;; 134 ; 135 /// Add a box with parameter values (and errors) to the specified frame; 136 virtual RooPlot* paramOn(RooPlot* frame,; 137 const RooCmdArg& arg1={}, const RooCmdArg& arg2={},; 138 const RooCmdArg& arg3={}, const RooCmdArg& arg4={},; 139 const RooCmdArg& arg5={}, const RooCmdArg& arg6={},; 140 const RooCmdArg& arg7={}, const RooCmdArg& arg8={}) ;; 141 ; 142 // Built-in generator support; 143 virtual Int_t getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, bool staticInitOK=true) const;; 144 virtual void initGenerator(Int_t code) ;; 145 virtual void generateEvent(Int_t code);; 146 virtual bool isDirectGenSafe(const RooAbsArg& arg) const ;; 147 ; 148 // Configuration of MC generators used for this pdf; 149 const RooNumGenConfig* getGeneratorConfig() const ;; 150 static RooNumGenConfig* defaultGeneratorConfig() ;; 151 RooNumGenConfig* specialGeneratorConfig() const ;; 152 RooNumGenConfig* specialGeneratorConfig(bool createOnTheFly) ;; 153 void setGeneratorConfig() ;; 154 void setGeneratorConfig(const RooNumGenConfig& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8h_source.html:6396,error,errors,6396,doc/master/RooAbsPdf_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8h_source.html,1,['error'],['errors']
Availability,"const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Plot dataset on specified frame. By default an unbinned dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default behavior. Data representation options. Asymmetry(const RooCategory& c) -- Show the asymmetry of the daya in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; Category must have two states with indices -1 and +1 or three states with indeces -1,0 and +1.; DataError(RooAbsData::EType) -- Select the type of error drawn: Poisson (default) draws asymmetric Poisson; confidence intervals. SumW2 draws symmetric sum-of-weights error; Binning(double xlo, double xhi, -- Use specified binning to draw dataset; int nbins); Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t factor) -- Apply global rescaling factor to histogram. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is black; LineWidth(Int_t width) -- Select line with in pixels, default is 3; MarkerStyle(Int_t style) -- Select the ROOT marker style, default is 21; MarkerColor(Int_t color) -- Select the ROOT marker color, default is black; MarkerSize(Double_t size) -- Select the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:18341,error,error,18341,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,4,['error'],['error']
Availability,"const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Plot dataset on specified frame. By default an unbinned dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default behavior. Data representation options. Asymmetry(const RooCategory& c) -- Show the asymmetry of the daya in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; Category must have two states with indices -1 and +1 or three states with indeces -1,0 and +1.; DataError(RooAbsData::EType) -- Select the type of error drawn: Poisson (default) draws asymmetric Poisson; confidence intervals. SumW2 draws symmetric sum-of-weights error; Binning(int nbins, double xlo, -- Use specified binning to draw dataset; double xhi); Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t factor) -- Apply global rescaling factor to histogram. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is black; LineWidth(Int_t width) -- Select line with in pixels, default is 3; MarkerStyle(Int_t style) -- Select the ROOT marker style, default is 21; MarkerColor(Int_t color) -- Select the ROOT marker color, default is black; MarkerSize(Double_t size) -- Select the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:19532,error,error,19532,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,3,['error'],['error']
Availability,"const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual RooAbsData*emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0, const char* wgtVarName = 0) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TH1*fillHistogram(TH1* hist, const RooArgList& plotVars, const char* cuts = """", const char* cutRange = 0) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const RooArgSet*get() const; virtual const RooArgSet*get(Int_t index) const; static RooAbsData::StorageTypegetDefaultStorageType(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:3660,error,error,3660,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,3,['error'],['error']
Availability,"const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:61873,error,error,61873,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,1,['error'],['error']
Availability,"const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  . Protected Attributes; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:67305,error,errors,67305,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTBufferFile::ForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidTBufferFile::ForceWriteInfoClones(TClonesArray* a); virtual Int_tTBufferFile::GetBufferDisplacement() const; Int_tTBuffer::GetBufferVersion() const; static TClass*TBuffer::GetClass(const type_info& typeinfo); static TClass*TBuffer::GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorFlag() const; static const char*GetFloatFormat(); static Int_tTBufferFile::GetGlobalReadParam(); static Int_tTBufferFile::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferSQL2.html:2509,error,error,2509,root/html530/TBufferSQL2.html,https://root.cern,https://root.cern/root/html530/TBufferSQL2.html,5,['error'],['error']
Availability,"const TGButton &)=delete; TGButton::fStateEButtonState fStatebutton stateDefinition TGButton.h:75; TGButton::SetEnabledvirtual void SetEnabled(Bool_t e=kTRUE)Set enabled or disabled state of button.Definition TGButton.cxx:459; TGButton::fgDefaultGCstatic const TGGC * fgDefaultGCDefinition TGButton.h:88; TGButton::~TGButton~TGButton() overrideDelete button.Definition TGButton.cxx:221; TGButton::SetStatevirtual void SetState(EButtonState state, Bool_t emit=kFALSE)Set button state.Definition TGButton.cxx:235; TGButton::fTipTGToolTip * fTiptool tip associated with buttonDefinition TGButton.h:79; TGButton::Toggledvirtual void Toggled(Bool_t on)Definition TGButton.h:136; TGButton::SetToggleButtonvirtual void SetToggleButton(Bool_t)Definition TGButton.h:85; TGButton::IsDownvirtual Bool_t IsDown() constDefinition TGButton.cxx:301; TGButton::HandleCrossingBool_t HandleCrossing(Event_t *event) overrideHandle mouse crossing event.Definition TGButton.cxx:404; TGButton::fStayDownBool_t fStayDowntrue if button has to stay downDefinition TGButton.h:76; TGButton::fNormGCGContext_t fNormGCgraphics context used for drawing buttonDefinition TGButton.h:77; TGCheckButtonSelects different options.Definition TGButton.h:264; TGCheckButton::fOffconst TGPicture * fOffbutton OFF pictureDefinition TGButton.h:274; TGCheckButton::fgDefaultFontstatic const TGFont * fgDefaultFontDefinition TGButton.h:283; TGCheckButton::fgDefaultGCstatic const TGGC * fgDefaultGCDefinition TGButton.h:284; TGCheckButton::HandleKeyBool_t HandleKey(Event_t *event) overrideHandle key event. This function will be called when the hotkey is hit.Definition TGButton.cxx:1403; TGCheckButton::fOnconst TGPicture * fOnbutton ON pictureDefinition TGButton.h:273; TGCheckButton::Initvoid Init()Common check button initialization.Definition TGButton.cxx:1179; TGCheckButton::HandleButtonBool_t HandleButton(Event_t *event) overrideHandle mouse button event.Definition TGButton.cxx:1330; TGCheckButton::GetDefaultGCstatic const TGGC & Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGButton_8h_source.html:24694,down,downDefinition,24694,doc/master/TGButton_8h_source.html,https://root.cern,https://root.cern/doc/master/TGButton_8h_source.html,1,['down'],['downDefinition']
Availability,"const TGLParametricEquation&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_tfConstrained; ParametricEquation_tfEquation; Bool_tfModified; auto_ptr<TGLHistPainter>fPainter; pair<double,double>fURange; pair<double,double>fVRange; auto_ptr<TF2>fXEquation; auto_ptr<TF2>fYEquation; auto_ptr<TF2>fZEquation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLParametricEquation(const TString& name, const TString& xEquation, const TString& yEquation, const TString& zEquation, Double_t uMin, Double_t uMax, Double_t vMin, Double_t vMax); Surface is defined by three strings.; ROOT does not use exceptions in ctors,; so, I have to use MakeZombie to let; external user know about errors. TGLParametricEquation(const TString& name, ParametricEquation_t equation, Double_t uMin, Double_t uMax, Double_t vMin, Double_t vMax); Surface defined by user's function (see ParametricEquation_t declaration in TGLParametricEquation.h). Rgl::Range_t GetURange() const; [uMin, uMax]. Rgl::Range_t GetVRange() const; [vMin, vMax]. Bool_t IsConstrained() const; Check is constrained. void SetConstrained(Bool_t c); Set constrained. Bool_t IsModified() const; Something was changed in parametric equation (or constrained option was changed). void SetModified(Bool_t m); Set modified. void EvalVertex(TGLVertex3& newVertex, Double_t u, Double_t v) const; Calculate vertex. Int_t DistancetoPrimitive(Int_t px, Int_t py); Check, if parametric surface is under cursor. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Pass event to painter. char * GetObjectInfo(Int_t px, Int_t py) const; No object info yet. void Paint(Option_t* option); Delegate p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLParametricEquation.html:7330,error,errors,7330,root/html528/TGLParametricEquation.html,https://root.cern,https://root.cern/root/html528/TGLParametricEquation.html,4,['error'],['errors']
Availability,"const TGeoMatrix *matrix);  Register a matrix to the list of matrices. ;  ; void RemoveMaterial (Int_t index);  Remove material at given index. ;  ; void RemoveNavigator (const TGeoNavigator *nav);  Clear a single navigator. ;  ; Int_t ReplaceVolume (TGeoVolume *vorig, TGeoVolume *vnew);  Replaces all occurrences of VORIG with VNEW in the geometry tree. ;  ; void ResetState ();  Reset current state flags. ;  ; void ResetUserData ();  Sets all pointers TGeoVolume::fField to NULL. ;  ; void RestoreMasterVolume ();  Restore the master volume of the geometry. ;  ; Double_t Safety (Bool_t inside=kFALSE);  Compute safe distance from the current point. ;  ; TGeoNode * SamplePoints (Int_t npoints, Double_t &dist, Double_t epsil=1E-5, const char *g3path="""");  shoot npoints randomly in a box of 1E-5 around current point. ;  ; void SaveAttributes (const char *filename=""tgeoatt.C"");  Save current attributes in a macro. ;  ; TGeoNode * SearchNode (Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr);  Returns the deepest node containing fPoint, which must be set a priori. ;  ; void SelectTrackingMedia ();  Define different tracking media. ;  ; TGeoPNEntry * SetAlignableEntry (const char *unique_name, const char *path, Int_t uid=-1);  Creates an alignable object with unique name corresponding to a path and adds it to the list of alignables. ;  ; void SetAllIndex ();  Assigns uid's for all materials,media and matrices. ;  ; void SetAnimateTracks (Bool_t flag=kTRUE);  ; void SetBombFactors (Double_t bombx=1.3, Double_t bomby=1.3, Double_t bombz=1.3, Double_t bombr=1.3);  Set factors that will ""bomb"" all translations in cartesian and cylindrical coordinates. ;  ; void SetCheckedNode (TGeoNode *node);  Assign a given node to be checked for overlaps. Any other overlaps will be ignored. ;  ; void SetCheckingOverlaps (Bool_t flag=kTRUE);  ; void SetCldirChecked (Double_t *dir);  ; void SetClipping (Bool_t flag=kTRUE);  ; void SetClippingShape (TGeoShape *clip);  Set a user-defined ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:45683,down,downwards,45683,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['down'],['downwards']
Availability,"const TMySQLResult&); virtual~TMySQLResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFieldCount(); virtual const char*GetFieldName(Int_t field); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTSQLResult::GetRowCount() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLResult.html:1375,error,error,1375,root/html528/TMySQLResult.html,https://root.cern,https://root.cern/root/html528/TMySQLResult.html,4,['error'],['error']
Availability,"const TQuaternion&); virtual~TRotation(); voidTObject::AbstractMethod(const char* method) const; voidAngleAxis(Double_t&, TVector3&) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXPhi() const; Double_tGetXPsi() const; Double_tGetXTheta() const; Double_tGetYPhi() const; Double_tGetYPsi() const; Double_tGetYTheta() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRotation.html:6595,error,error,6595,root/html528/TRotation.html,https://root.cern,https://root.cern/root/html528/TRotation.html,4,['error'],['error']
Availability,"const TRecGuiEvent&); ~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TTimeTRecEvent::GetTime() const; virtual const char*TObject::GetTitle() const; virtual TRecEvent::ERecEventTypeGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecGuiEvent.html:3719,error,error,3719,root/html528/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html528/TRecGuiEvent.html,4,['error'],['error']
Availability,"const char * TPluginHandler::GetOrigin ; (; ); const. inlineprivate . Definition at line 140 of file TPluginManager.h. ◆ GetPlugin(). const char * TPluginHandler::GetPlugin ; (; ); const. inlineprivate . Definition at line 138 of file TPluginManager.h. ◆ GetRegexp(). const char * TPluginHandler::GetRegexp ; (; ); const. inlineprivate . Definition at line 137 of file TPluginManager.h. ◆ IsA(). TClass * TPluginHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 254 of file TPluginManager.h. ◆ LoadPlugin(). Int_t TPluginHandler::LoadPlugin ; (; ). Load the plugin library for this handler. ; Returns 0 on successful loading and -1 in case the library does not exist or in case of error. ; Definition at line 293 of file TPluginManager.cxx. ◆ LoadPluginImpl(). void TPluginHandler::LoadPluginImpl ; (; ). private . Load the plugin library for this handler. ; Sets status to 0 on successful loading and -1 in case the library does not exist or in case of error. ; Definition at line 274 of file TPluginManager.cxx. ◆ operator=(). TPluginHandler & TPluginHandler::operator= ; (; const TPluginHandler & ; ). privatedelete . ◆ Print(). void TPluginHandler::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print info about the plugin handler. ; If option is ""a"" print also the ctor's that will be used. ; Reimplemented from TObject.; Definition at line 341 of file TPluginManager.cxx. ◆ SetupCallEnv(). void TPluginHandler::SetupCallEnv ; (; ). private . Setup ctor or static method call environment. ; Definition at line 198 of file TPluginManager.cxx. ◆ Streamer(). void TPluginHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPluginHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 254 of file TPluginManager.h. Friends And Related Symbol Docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPluginHandler.html:17490,error,error,17490,doc/master/classTPluginHandler.html,https://root.cern,https://root.cern/doc/master/classTPluginHandler.html,1,['error'],['error']
Availability,"const char * TSystem::TempDirectory ; (; ); const. virtual . Return a user configured or systemwide directory to create temporary files in. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1482 of file TSystem.cxx. ◆ TempFileName(). FILE * TSystem::TempFileName ; (; TString & ; base, . const char * ; dir = nullptr, . const char * ; suffix = nullptr . ). virtual . Create a secure temporary file by appending a unique 6 letter string to base. ; The file will be created in a standard (system) directory or in the directory provided in dir. Optionally one can provide suffix append to the final name - like extension "".txt"" or "".html"". The full filename is returned in base and a filepointer is returned for safely writing to the file (this avoids certain security problems). Returns 0 in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1499 of file TSystem.cxx. ◆ Umask(). int TSystem::Umask ; (; Int_t ; mask). virtual . Set the process file creation mode mask. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1517 of file TSystem.cxx. ◆ UnixPathName(). const char * TSystem::UnixPathName ; (; const char * ; name). virtual . Convert from a local pathname to a Unix pathname. ; E.g. from \user\root to /user/root. ; Reimplemented in TWinNTSystem.; Definition at line 1063 of file TSystem.cxx. ◆ Unlink(). int TSystem::Unlink ; (; const char * ; name). virtual . Unlink, i.e. ; remove, a file.; If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, while Windows does not allow the file to be deleted and the operation is a no-op). ; Reimplemented in TUnixSystem, TWinNTSystem, TDavixSystem, TNetSystem, TWebSystem, and TNetXNGSystem.; Definition at line 1381 of file TSystem.cxx. ◆ Unload(). void TSystem::Unload ; (; const char * ; module). virtual . Unload a shared library. ; Reimplemented in TUni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:95510,mask,mask,95510,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['mask'],['mask']
Availability,"const char *lab = label;; 323 ; 324 if (obj && (!label || strlen(label)==0)) lab = obj->GetTitle();; 325 TLegendEntry *newentry = new TLegendEntry( obj, lab, option );; 326 if ( !fPrimitives ) fPrimitives = new TList;; 327 fPrimitives->Add(newentry);; 328 return newentry;; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// Add a new entry to this legend. ""name"" is the name of an object in the pad to; 333/// be represented label is the text you wish to associate with obj in the legend; 334/// if label is null or empty, the title of the object will be used.; 335///; 336/// Options are:; 337///; 338/// - L: draw line associated with TAttLine if obj inherits from TAttLine; 339/// - P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; 340/// - F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; 341/// - E: draw vertical error bar if option ""L"" is also specified; 342 ; 343TLegendEntry *TLegend::AddEntry(const char *name, const char *label, Option_t *option); 344{; 345 if (!gPad) {; 346 Error(""AddEntry"", ""need to create a canvas first"");; 347 return nullptr;; 348 }; 349 ; 350 TObject *obj = gPad->FindObject(name);; 351 ; 352 // If the object ""name"" has not been found, the following code tries to; 353 // find it in TMultiGraph or THStack possibly present in the current pad.; 354 if (!obj) {; 355 TList *lop = gPad->GetListOfPrimitives();; 356 if (lop) {; 357 TIter next(lop);; 358 while(auto o = next()) {; 359 if ( o->InheritsFrom(TMultiGraph::Class() ) ) {; 360 TList * grlist = ((TMultiGraph *)o)->GetListOfGraphs();; 361 obj = grlist->FindObject(name);; 362 if (obj) break;; 363 }; 364 if ( o->InheritsFrom(THStack::Class() ) ) {; 365 TList * hlist = ((THStack *)o)->GetHists();; 366 obj = hlist->FindObject(name);; 367 if (obj) break;; 368 }; 369 }; 370 }; 371 }; 372 ; 373 return AddEntry( obj, label, option );; 374}; 375 ; 376/////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8cxx_source.html:12511,error,error,12511,doc/master/TLegend_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8cxx_source.html,1,['error'],['error']
Availability,"const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetNDF(Int_t ndf)TF1virtual; SetNdim(Int_t ndim)TF1inline; SetNormalized(Bool_t flag)TF1inlinevirtual; SetNpx(Int_t npx=100)TF1virtual; SetNpy(Int_t npy=100)TF2virtual; SetNumberFitPoints(Int_t npfits)TF1inlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t param, Double_t value)TF1inlinevirtual; SetParameter(const TString &name, Double_t value)TF1inlinevirtual; SetParameters(const Double_t *params)TF1inlinevirtual; SetParameters(double p0, double p1=TMath::QuietNaN(), double p2=TMath::QuietNaN(), double p3=TMath::QuietNaN(), double p4=TMath::QuietNaN(), double p5=TMath::QuietNaN(), double p6=TMath::QuietNaN(), double p7=TMath::QuietNaN(), double p8=TMath::QuietNaN(), double p9=TMath::QuietNaN(), double p10=TMath::QuietNaN())TF1inlinevirtual; SetParent(TObject *p=nullptr)TF1inlinevirtual; SetParError(Int_t ipar, Double_t error)TF1virtual; SetParErrors(const Double_t *errors)TF1virtual; SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)TF1virtual; SetParName(Int_t ipar, const char *name)TF1virtual; SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")TF1virtual; SetRange(Double_t xmin, Double_t xmax) overrideTF2inlinevirtual; SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) overrideTF2virtual; SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) overrideTF2inlinevirtual; SetSavedPoint(Int_t point, Double_t value)TF1virtual; SetTitle(const char *title="""") overrideTF1virtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVectorized(Bool_t vectorized)TF1inlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTF2virtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2-members.html:17795,error,errors,17795,doc/master/classTF2-members.html,https://root.cern,https://root.cern/doc/master/classTF2-members.html,1,['error'],['errors']
Availability,"const char * ; parname). Return the global correlation of the named parameter. ; Definition at line 430 of file RooFitResult.cxx. ◆ globalCorr() [3/3]. double RooFitResult::globalCorr ; (; const RooAbsArg & ; par). inline . Definition at line 137 of file RooFitResult.h. ◆ IsA(). TClass * RooFitResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 203 of file RooFitResult.h. ◆ isIdentical(). bool RooFitResult::isIdentical ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolCorr = 1e-4, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolCorrabsolute tolerance for correlation coefficients. ; [in]verboseIf this function will log to the standard output when comparisons fail. As the relative tolerance for the parameter errors, the default value of 1e-3 will be used. ; Definition at line 863 of file RooFitResult.cxx. ◆ isIdenticalNoCov(). bool RooFitResult::isIdenticalNoCov ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolErr = 1e-3, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolErrRelative tolerance for parameter errors. ; [in]verboseIf this function will log to the standard output when comparisons fail. . Definition at line 801 of file RooFitResult.cxx. ◆ lastMinuitFit(). RooFitResult * RooFitResult::lastMinuitFit ; (; const RooArgList & ; varList = RooArgList()). static . Import the results of the last fit performed by gMinuit, interpreting the fit parameters as the given varList of parameters. ; Definition at line 917 of file RooFitResult.cxx. ◆ minNll(). double RooFitResu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:29959,toler,tolerance,29959,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,2,"['error', 'toler']","['errors', 'tolerance']"
Availability,"const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:3836,error,error,3836,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,3,['error'],['error']
Availability,"const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCachedPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:57868,error,error,57868,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,3,['error'],['error']
Availability,"const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TNDArrayT< T > fArray;  Bin content. ;  ;  Protected Attributes inherited from THn; std::vector< Int_t > fCoordBuf;  ; TNDArrayT< Double_t > fSumw2;  ;  Protected Attributes inherited from THnBase; TObjArray fAxes;  Axes of the histogram. ;  ; TObjArray fBrowsables;  ! Browser-helpers for each axis ;  ; Double_t fEntries;  Number of entries, spread over chunks. ;  ; std::vector< Double_t > fIntegral;  ! vector with bin weight sums ;  ; enum THnBase:: { ... }  fIntegralStatus;  ! status of integral ;  ; Int_t fNdimensions;  Number of dimensions. ;  ; Double_t fTsumw;  Total sum of weights. ;  ; Double_t fTsumw2;  Total sum of weights squared; -1 if no errors are calculated. ;  ; TArrayD fTsumwx;  Total sum of weight*X for each dimension. ;  ; TArrayD fTsumwx2;  Total sum of weight*X*X for each dimension. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from THnBase; enum  { kNoInt; , kValidInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnT.html:19672,error,errors,19672,doc/master/classTHnT.html,https://root.cern,https://root.cern/doc/master/classTHnT.html,1,['error'],['errors']
Availability,"const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; Double_t * fEXhigh {nullptr};  [fNpoints] array of X high errors ;  ; Double_t * fEXlow {nullptr};  [fNpoints] array of X low errors ;  ; Double_t * fEYhigh {nullptr};  [fNpoints] array of Y high errors ;  ; Double_t * fEYlow {nullptr};  [fNpoints] array of Y low errors ;  ; Double_t * fEZhigh {nullptr};  [fNpoints] array of Z high errors ;  ; Double_t * fEZlow {nullptr};  [fNpoints] array of Z low errors ;  ;  Protected Attributes inherited from TGraph2D; TObject * fDelaunay;  ! Pointer to Delaunay interpolator object ;  ; TDirectory * fDirectory;  !Pointer to directory holding this 2D graph ;  ; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH2D * fHistogram;  !2D histogram of z values linearly interpolated on the triangles ;  ; Double_t fMargin;  Extra space (in %) around interpolated area for fHistogram. ;  ; Double_t fMaximum;  Maximum value for plotting along z. ;  ; Int_t fMaxIter;  Maximum number of iterations to find Delaunay triangles. ;  ; Double_t fMinimum;  Minimum value for plotting along z. ;  ; Int_t fNpoints;  Number of points in the data set. ;  ; Int_t fNpx;  Number of bins along X in fHistogram. ;  ; Int_t fNpy;  Number of bins along Y in fHistogram. ;  ; TVirtualHistPainter * fPainter;  !Pointer to histogram painter ;  ; Int_t fSize;  !Real size of fX, fY and fZ ;  ; Double_t * fX;  [fNpoints] ;  ; Double_t * fY;  [fNpoints] Data set to be plo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:26269,error,errors,26269,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,6,['error'],['errors']
Availability,"const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Long_t ExecPlugin(Int_t va_(nargs), ...); Execute ctor for this plugin and return pointer to object of specific; class. User must cast the returned long to the correct class.; This method accepts a variable number of arguments to be passed; to the ctor, where nargs is the number of arguments, followed; by nargs arguments. Returns 0 in case of error. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin; }. const char * GetClass() const; { return fClass; }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPluginManager.h 37497 2010-12-10 12:22:54Z rdm $ » Last generated: 2010-12-10 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPluginHandler.html:10380,error,error,10380,root/html528/TPluginHandler.html,https://root.cern,https://root.cern/root/html528/TPluginHandler.html,1,['error'],['error']
Availability,"const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Long_t ExecPlugin(Int_t va_(nargs), ...); Execute ctor for this plugin and return pointer to object of specific; class. User must cast the returned long to the correct class.; This method accepts a variable number of arguments to be passed; to the ctor, where nargs is the number of arguments, followed; by nargs arguments. Returns 0 in case of error. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin; }. const char * GetClass() const; { return fClass; }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPluginManager.h 37497 2010-12-10 12:22:54Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPluginHandler.html:10449,error,error,10449,root/html530/TPluginHandler.html,https://root.cern,https://root.cern/root/html530/TPluginHandler.html,1,['error'],['error']
Availability,"const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Long_t ExecPlugin(Int_t va_(nargs), ...); Execute ctor for this plugin and return pointer to object of specific; class. User must cast the returned long to the correct class.; This method accepts a variable number of arguments to be passed; to the ctor, where nargs is the number of arguments, followed; by nargs arguments. Returns 0 in case of error. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin; }. const char * GetClass() const; { return fClass; }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TPluginManager.h 37497 2010-12-10 12:22:54Z rdm $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPluginHandler.html:10449,error,error,10449,root/html532/TPluginHandler.html,https://root.cern,https://root.cern/root/html532/TPluginHandler.html,1,['error'],['error']
Availability,"const char* command); virtual~TExec(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExec(const char* command = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExec.html:4233,error,error,4233,root/html528/TExec.html,https://root.cern,https://root.cern/root/html528/TExec.html,4,['error'],['error']
Availability,"const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInitializeContext(); voidTObject::MakeZombie(); virtual voidOnValidateError(const TString& message); virtual voidOnValidateWarning(const TString& message); virtual voidReleaseUnderlying(); virtual voidSetParseCode(Int_t code). private:. TXMLParser&operator=(const TXMLParser&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:9666,error,errorcodes,9666,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,12,['error'],"['error', 'errorcodes']"
Availability,"const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDrawHist.html:1548,error,error,1548,root/html534/TProofDrawHist.html,https://root.cern,https://root.cern/root/html534/TProofDrawHist.html,9,['error'],['error']
Availability,"const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDrawHist.html:1548,error,error,1548,root/html528/TProofDrawHist.html,https://root.cern,https://root.cern/root/html528/TProofDrawHist.html,9,['error'],['error']
Availability,"const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; const char*Encoding() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TXMLNode*GetRootNode() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLDocument.html:1553,error,error,1553,root/html528/TXMLDocument.html,https://root.cern,https://root.cern/root/html528/TXMLDocument.html,6,['error'],['error']
Availability,"const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long_tGetResMemMax() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long_tGetVirtMemMax() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStatus.html:1627,error,error,1627,root/html530/TStatus.html,https://root.cern,https://root.cern/root/html530/TStatus.html,1,['error'],['error']
Availability,"const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Long_tGetResMemMax(Bool_t master = kFALSE) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long_tGetVirtMemMax(Bool_t master = kFALSE) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStatus.html:1627,error,error,1627,root/html532/TStatus.html,https://root.cern,https://root.cern/root/html532/TStatus.html,1,['error'],['error']
Availability,"const char* method) const; voidAdd(const char* mesg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStatus.html:1627,error,error,1627,root/html528/TStatus.html,https://root.cern,https://root.cern/root/html528/TStatus.html,1,['error'],['error']
Availability,"const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArcMode() const; const GCValues_t*GetAttributes() const; Pixel_tGetBackground() const; Int_tGetCapStyle() const; Pixmap_tGetClipMask() const; Int_tGetClipXOrigin() const; Int_tGetClipYOrigin() const; const char*GetDashes() const; Int_tGetDashLen() const; Int_tGetDashOffset() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFillRule() const; Int_tGetFillStyle() const; FontH_tGetFont() const; Pixel_tGetForeground() const; EGraphicsFunctionGetFunction() const; GContext_tGetGC() const; Bool_tGetGraphicsExposures() const; virtual const char*TObject::GetIconName() const; Int_tGetJoinStyle() const; Int_tGetLineStyle() const; Int_tGetLineWidth() const; Mask_tGetMas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGGC.html:1546,error,error,1546,root/html528/TGGC.html,https://root.cern,https://root.cern/root/html528/TGGC.html,6,['error'],['error']
Availability,"const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAttachBottom() const; UInt_tGetAttachLeft() const; UInt_tGetAttachRight() const; UInt_tGetAttachTop() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tTGLayoutHints::GetLayoutHints() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTGLayoutHints::GetPadBottom() const; Int_tTGLayoutHints::GetPadLeft() const; Int_tTGLayoutHints::GetPadRight() const; Int_tTGLayoutHints::GetPadTop() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTableLayoutHints.html:3321,error,error,3321,root/html528/TGTableLayoutHints.html,https://root.cern,https://root.cern/root/html528/TGTableLayoutHints.html,6,['error'],['error']
Availability,"const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tGetFlag() const; Double_tGetH() const; virtual const char*TObject::GetIconName() const; ULong_tTGLayoutHints::GetLayoutHints() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTGLayoutHints::GetPadBottom() const; Int_tTGLayoutHints::GetPadLeft() const; Int_tTGLayoutHints::GetPadRight() const; Int_tTGLayoutHints::GetPadTop() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetW() const; Double_tGetX() const; Double_tGet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGXYLayoutHints.html:4165,error,error,4165,root/html528/TGXYLayoutHints.html,https://root.cern,https://root.cern/root/html528/TGXYLayoutHints.html,6,['error'],['error']
Availability,"const char* method) const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tGetLayoutHints() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPadBottom() const; Int_tGetPadLeft() const; Int_tGetPadRight() const; Int_tGetPadTop() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLayoutHints.html:2529,error,error,2529,root/html528/TGLayoutHints.html,https://root.cern,https://root.cern/root/html528/TGLayoutHints.html,6,['error'],['error']
Availability,"const char* name) const; TH1F*TGraph::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TList*TGraph::GetListOfFunctions() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; const char*RooPlotable::getYAxisLabel() const; Double_tRooPlotable::getYAxisMax() const; Double_tRooPlotable::getYAxisMin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; Double_tinterpolate(Double_t x, Double_t tolerance = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:7381,toler,tolerance,7381,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,2,['toler'],['tolerance']
Availability,"const char* name). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl) const. void CreateListOfDataMembers(TClass* cl) const. void CreateListOfMethods(TClass* cl) const. void CreateListOfMethodArgs(TFunction* m) const. void UpdateListOfMethods(TClass* cl) const. TString GetMangledName(TClass* cl, const char* method, const char* params, Bool_t objectIsConst = kFALSE). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode = ROOT::kConversionMatch). void GetInterpreterTypeName(const char* name, string& output, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params, Bool_t objectIsConst = kFALSE). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode = ROOT::kConversionMatch). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). void ExecuteWithArgsAndReturn(TMethod* method, void* address, const void*[] args = 0, int = 0, void* ret = 0) const. Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsErrorMessagesEnabled() const. Bool_t SetErrorMessages(Bool_t enable = kTRUE). Bool_t IsProcessLineLocked() const. void SetProcessLineLock(Bool_t lock = kTRUE). const char * TypeName(const char* s). int DisplayClass(FILE* , const char* , int , int ) const; All the functions below must be virtual with a dummy implementation; These functions are redefined in TCling.; The dummy implementation avoids an implementation in TGWin32InterpreterProxy; Misc. {return 0;}. int DisplayIncludePath(FILE* ) const; {return 0;}. void * FindSym(const char* ) const; {return 0;}. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:29442,error,error,29442,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['error'],['error']
Availability,"const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(ostream& out, istream& in, const char* relpath, Bool_t isCode, Bool_t interpretDirectives); virtual voidTObject::Copy(TObject& object) const; virtual voidDecorateKeywords(TString& text); virtual voidDecorateKeywords(ostream& out, const char* text); voidDecrementMethodCount(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteDirectiveOutput() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetCurrentClass() const; voidGetCurrentModule(TString& out_module) const; const TList*GetDataMembers(TDocParser::EAccess access) const; TDocOutput*GetDocOutput() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetEnums(TDocParser::EAccess access) const; virtual const char*TObject::GetIconName() const; Long_tGetLineNumber() const; const TList*GetMethods(TDocParser::EAccess access) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetSourceInfo(TDocParser::ESourceInfo type) const; virtual const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocParser.html:2574,error,error,2574,root/html528/TDocParser.html,https://root.cern,https://root.cern/root/html528/TDocParser.html,5,['error'],['error']
Availability,"const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); Bool_tExecuteHttp(THttpCallArg* arg); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetItemField(const char* fullname, const char* name); static const char*GetMimeType(const char* path); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TRootSniffer*GetSniffer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpServer.html:2778,error,error,2778,root/html534/THttpServer.html,https://root.cern,https://root.cern/root/html534/THttpServer.html,2,['error'],['error']
Availability,"const char* remote, const char* proto, const char* user = """"); Create authentication object. void CatchTimeOut(); Called in connection with a timer timeout. Bool_t Authenticate(); Authenticate to remote rootd or proofd server. Return kTRUE if; authentication succeeded. void SetEnvironment(); Set default authentication environment. The values are inferred; from fSecurity and fDetails. Bool_t GetUserPasswd(TString& user, TString& passwd, Bool_t& pwhash, Bool_t srppwd); Try to get user name and passwd from several sources. Bool_t CheckNetrc(TString& user, TString& passwd); Try to get user name and passwd from the ~/.rootnetrc or; ~/.netrc files. For more info see the version with 4 arguments.; This version is maintained for backward compatability reasons. Bool_t CheckNetrc(TString& user, TString& passwd, Bool_t& pwhash, Bool_t srppwd); Try to get user name and passwd from the ~/.rootnetrc or; ~/.netrc files. First ~/.rootnetrc is tried, after that ~/.netrc.; These files will only be used when their access masks are 0600.; Returns kTRUE if user and passwd were found for the machine; specified in the URL. If kFALSE, user and passwd are """".; If srppwd == kTRUE then a SRP ('secure') pwd is searched for in; the files.; The boolean pwhash is set to kTRUE if the returned passwd is to; be understood as password hash, i.e. if the 'password-hash' keyword; is found in the 'machine' lines; not implemented for 'secure'; and the .netrc file.; The format of these files are:. # this is a comment line; machine <machine fqdn> login <user> password <passwd>; machine <machine fqdn> login <user> password-hash <passwd>. and in addition ~/.rootnetrc also supports:. secure <machine fqdn> login <user> password <passwd>. <machine fqdn> may be a domain name or contain the wild card '*'. for the secure protocols. All lines must start in the first column. const char * GetGlobalUser(); Static method returning the global user. Bool_t GetGlobalPwHash(); Static method returning the global password hash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:12143,mask,masks,12143,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['mask'],['masks']
Availability,"const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEveMenu(Int_t id); voidTRootBrowser::EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual Long_tTRootBrowser::ExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTRootBrowser::ExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGFrame*TRootBrowser::GetActFrame() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBrowser.html:5103,error,error,5103,root/html602/TEveBrowser.html,https://root.cern,https://root.cern/root/html602/TEveBrowser.html,2,['error'],['error']
Availability,"const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEraseStatusBar(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual TGFrame*ExecuteAction(); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGMdiFrame*FindEditableMdiFrame(const TGWindow* win); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGuiBldAction*TGuiBuilder::GetAction() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static ULong_tGetBgnd(); static TGGC*GetBgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootGuiBuilder.html:7251,error,error,7251,root/html528/TRootGuiBuilder.html,https://root.cern,https://root.cern/root/html528/TRootGuiBuilder.html,4,['error'],['error']
Availability,"const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tEnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tEnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tEnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tExec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tExec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tFinalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tFinalize(const char* queryref, Bool_t force = kFALSE); TList*FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Int_tGetClientProtocol() const; const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataPoolUrl() const; virtual TFileCollection*GetDataSet(const char* dataset, const char* optStr = """"); TMap*GetDataSetQuota(const char* optStr = """"); virtual TMap*GetDataSets(const char* uri = """", const char* optStr = """"); virtual Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:6155,error,error,6155,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['error'],['error']
Availability,"const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar); voidAddSeparator(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TControlBarButton::GetAction() const; TControlBarButton*GetClicked() const; TControlBarImp*GetControlBarImp() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfButtons() const; virtual const char*TNamed::GetName() const; Int_tGetNumberOfColumns() const; Int_tGetNumberOfRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetOrientation() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:4091,error,error,4091,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,7,['error'],['error']
Availability,"const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns 0 on success, -1 on fai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:17448,error,error,17448,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,6,['error'],['error']
Availability,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelector.html:4031,error,error,4031,root/html534/TSelector.html,https://root.cern,https://root.cern/root/html534/TSelector.html,3,['error'],['error']
Availability,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelector.html:4059,error,error,4059,root/html528/TSelector.html,https://root.cern,https://root.cern/root/html528/TSelector.html,3,['error'],['error']
Availability,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelVerifyDataSet.html:1526,error,error,1526,root/html534/TSelVerifyDataSet.html,https://root.cern,https://root.cern/root/html534/TSelVerifyDataSet.html,3,['error'],['error']
Availability,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDraw.html:1565,error,error,1565,root/html534/TProofDraw.html,https://root.cern,https://root.cern/root/html534/TProofDraw.html,3,['error'],['error']
Availability,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDraw.html:1565,error,error,1565,root/html528/TProofDraw.html,https://root.cern,https://root.cern/root/html528/TProofDraw.html,3,['error'],['error']
Availability,"const char*, double); const ROOT::Minuit2::MnUserParameterState&ROOT::Minuit2::MnApplication::State() const; const ROOT::Minuit2::MnStrategy&ROOT::Minuit2::MnApplication::Strategy() const; doubleROOT::Minuit2::MnApplication::Value(unsigned int) const; doubleROOT::Minuit2::MnApplication::Value(const char*) const; unsigned intROOT::Minuit2::MnApplication::VariableParameters() const. private:. ROOT::Minuit2::MnScan&operator=(const ROOT::Minuit2::MnScan&). Data Members; protected:. const ROOT::Minuit2::FCNBase&ROOT::Minuit2::MnApplication::fFCN; unsigned intROOT::Minuit2::MnApplication::fNumCall; ROOT::Minuit2::MnUserParameterStateROOT::Minuit2::MnApplication::fState; ROOT::Minuit2::MnStrategyROOT::Minuit2::MnApplication::fStrategy; boolROOT::Minuit2::MnApplication::fUseGrad. private:. ROOT::Minuit2::ScanMinimizerfMinimizer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnScan(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and errors. {}. MnScan(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and covariance. {}. MnScan(const FCNBase& fcn, const std::vector<double>& par, const MnUserCovariance& cov, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and MnUserCovariance. {}. MnScan(const FCNBase& fcn, const MnUserParameters& par, unsigned int stra = 1); construct from FCNBase + MnUserParameters. {}. MnScan(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, unsigned int stra = 1); construct from FCNBase + MnUserParameters + MnUserCovariance. {}. MnScan(const FCNBase& fcn, const MnUserParameterState& par, const MnStrategy& str); construct from FCNBase + MnUserParameterState + MnStrategy. {}. MnScan(const ROOT::Minuit2::MnScan& migr); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnScan.html:5263,error,errors,5263,root/html526/ROOT__Minuit2__MnScan.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnScan.html,1,['error'],['errors']
Availability,"const char*, double); const ROOT::Minuit2::MnUserParameterState&ROOT::Minuit2::MnApplication::State() const; const ROOT::Minuit2::MnStrategy&ROOT::Minuit2::MnApplication::Strategy() const; doubleROOT::Minuit2::MnApplication::Value(unsigned int) const; doubleROOT::Minuit2::MnApplication::Value(const char*) const; unsigned intROOT::Minuit2::MnApplication::VariableParameters() const. private:. ROOT::Minuit2::MnScan&operator=(const ROOT::Minuit2::MnScan&). Data Members; protected:. const ROOT::Minuit2::FCNBase&ROOT::Minuit2::MnApplication::fFCN; unsigned intROOT::Minuit2::MnApplication::fNumCall; ROOT::Minuit2::MnUserParameterStateROOT::Minuit2::MnApplication::fState; ROOT::Minuit2::MnStrategyROOT::Minuit2::MnApplication::fStrategy; boolROOT::Minuit2::MnApplication::fUseGrad. private:. ROOT::Minuit2::ScanMinimizerfMinimizer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnScan(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and errors. {}. MnScan(const ROOT::Minuit2::FCNBase& fcn, const vector<double>& par, unsigned int nrow, const vector<double>& cov, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and covariance. {}. MnScan(const FCNBase& fcn, const std::vector<double>& par, const MnUserCovariance& cov, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and MnUserCovariance. {}. MnScan(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameters& par, unsigned int stra = 1); construct from FCNBase + MnUserParameters. {}. MnScan(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, unsigned int stra = 1); construct from FCNBase + MnUserParameters + MnUserCovariance. {}. MnScan(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::MnUserParameterState& par, const ROOT::Minuit2::MnStrategy& str); construct from FCNBase + MnUserP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__MnScan.html:5263,error,errors,5263,root/html528/ROOT__Minuit2__MnScan.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__MnScan.html,6,['error'],['errors']
Availability,"const char*, double, double); voidSetPrecision(double); voidSetValue(unsigned int, double); voidSetValue(const char*, double); const ROOT::Minuit2::MnUserParameterState&State() const; const ROOT::Minuit2::MnStrategy&Strategy() const; doubleValue(unsigned int) const; doubleValue(const char*) const; unsigned intVariableParameters() const. Data Members; protected:. const ROOT::Minuit2::FCNBase&fFCN; unsigned intfNumCall; ROOT::Minuit2::MnUserParameterStatefState; ROOT::Minuit2::MnStrategyfStrategy; boolfUseGrad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~MnApplication(); { }. FunctionMinimum operator()(unsigned int maxfcn = 0, double tolerance = 0.1). Minimize the function; @param maxfcn : max number of function calls (if = 0) default is used which is set to; 200 + 100 * npar + 5 * npar**2; @param tolerance : value used for terminating iteration procedure.; For example, MIGRAD will stop iterating when edm (expected distance from minimum) will be:; edm < tolerance * 10**-3; Default value of tolerance used is 0.1. const FCNBase& Fcnbase() const; {return fFCN;}. unsigned int NumOfCalls() const; {return fNumCall;}. const std::vector<ROOT::Minuit2::MinuitParameter>& MinuitParameters() const; facade: forward interface of MnUserParameters and MnUserTransformation; via MnUserParameterState; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. void Add(const char* Name, double val, double err); add free Parameter. void Add(const char* Name, double val, double err, double , double ); add limited Parameter. void Add(const char* , double ); add const Parameter. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void RemoveLimits(unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__MnApplication.html:3093,toler,tolerance,3093,root/html528/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__MnApplication.html,8,['toler'],['tolerance']
Availability,"const char*, double, double); voidSetPrecision(double); voidSetValue(unsigned int, double); voidSetValue(const char*, double); const ROOT::Minuit2::MnUserParameterState&State() const; const ROOT::Minuit2::MnStrategy&Strategy() const; doubleValue(unsigned int) const; doubleValue(const char*) const; unsigned intVariableParameters() const. Data Members; protected:. const ROOT::Minuit2::FCNBase&fFCN; unsigned intfNumCall; ROOT::Minuit2::MnUserParameterStatefState; ROOT::Minuit2::MnStrategyfStrategy; boolfUseGrad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~MnApplication(); { }. FunctionMinimum operator()(unsigned int maxfcn = 0, double tolerance = 0.1). Minimize the function; @param maxfcn : max number of function calls (if = 0) default is used which is set to; 200 + 100 * npar + 5 * npar**2; @param tolerance : value used for terminating iteration procedure.; For example, MIGRAD will stop iterating when edm (expected distance from minimum) will be:; edm < tolerance * 10**-3; Default value of tolerance used is 0.1. const FCNBase& Fcnbase() const; {return fFCN;}. unsigned int NumOfCalls() const; {return fNumCall;}. const std::vector<ROOT::Minuit2::MinuitParameter>& MinuitParameters() const; facade: forward interface of MnUserParameters and MnUserTransformation; via MnUserParameterState; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. void Add(const char* Name, double val, double err); add free Parameter. void Add(const char* Name, double val, double err, double , double ); add limited Parameter. void Add(const char* , double ); add const Parameter. void Fix(unsigned int); interaction via external number of Parameter. void Release(unsigned int). void SetValue(unsigned int, double). void SetError(unsigned int, double). void SetLimits(unsigned int, double, double). void RemoveLimits(unsigned int). doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html:3093,toler,tolerance,3093,root/html526/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html,2,['toler'],['tolerance']
Availability,"const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject*) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBtree.html:9417,error,error,9417,root/html602/TBtree.html,https://root.cern,https://root.cern/root/html602/TBtree.html,2,['error'],['error']
Availability,"const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*First() const; virtual TObjLink*FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TList.html:3978,error,error,3978,root/html534/TList.html,https://root.cern,https://root.cern/root/html534/TList.html,3,['error'],['error']
Availability,"const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*GetListForObject(const char* name) const; TList*GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashList.html:3053,error,error,3053,root/html534/THashList.html,https://root.cern,https://root.cern/root/html534/THashList.html,3,['error'],['error']
Availability,"const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TOrdCollection.html:2692,error,error,2692,root/html602/TOrdCollection.html,https://root.cern,https://root.cern/root/html602/TOrdCollection.html,2,['error'],['error']
Availability,"const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(TObject* obj = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDestructor(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = 1, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); voidExecuteDefaultAction(TObject* obj); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBrowserImp*GetBrowserImp() const; TContextMenu*GetContextMenu() const; virtual Option_t*GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetRefreshFlag() const; TObject*GetSelected() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidIconify()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBrowser.html:2203,error,error,2203,root/html602/TBrowser.html,https://root.cern,https://root.cern/root/html602/TBrowser.html,2,['error'],['error']
Availability,"const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; TH1*GetOriginalHist() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDF.html:1701,error,error,1701,root/html602/TMVA__PDF.html,https://root.cern,https://root.cern/root/html602/TMVA__PDF.html,2,['error'],['error']
Availability,"const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21639,error,errors,21639,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,2,['error'],"['error', 'errors']"
Availability,"const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calcul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:6442,error,error,6442,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,1,['error'],['error']
Availability,"const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. bool LinearFit(const ROOT::Fit::BinData& data). do a linear fit on a set of bin-data. { return DoLinearFit(data); }. void SetFunction(const IModelFunction & func). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise an error (false) is returned.; The result will be appended in the fit result class; Optionally a vector of parameter indeces can be passed for selecting; the parameters to analyse using FitConfig::SetMinosErrors. bool IsBinFit() const. query if fit is binned. In cse of false teh fit can be unbinned; or is not defined (like in case of fitting through a ::FitFCN). { return fBinFit; }. ROOT::Math::Minimizer * GetMinimizer() const. return pointer to last used minimizer; (is NULL in case fit is not yet done); This pointer will be valid as far as the data, the objective function; and the fitter class have not been deleted.; To be used only after fitting.; The pointer should not be stored and will be invalided after performing a new fitting.; In this case a new instance of ROOT::Math::Minimizer will be re-created and can be; obtained calling again GetMinimizer(). { return fMinimizer.get(); }. ROOT::Math::IMultiGenFunction * GetFCN() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__Fitter.html:10639,error,error,10639,root/html530/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__Fitter.html,2,['error'],['error']
Availability,"const std::string &name, cf_t fac);  ; CPYCPPYY_EXTERN bool RegisterConverter (const std::string &name, ConverterFactory_t);  ; CPYCPPYY_EXTERN bool RegisterConverterAlias (const std::string &name, const std::string &target);  ; CPYCPPYY_EXTERN bool RegisterExecutor (const std::string &name, ExecutorFactory_t);  ; CPYCPPYY_EXTERN bool RegisterExecutorAlias (const std::string &name, const std::string &target);  ; bool ReleasesGIL (CallContext *ctxt);  ; static std::regex s_fnptr (""\\‍(:*\\*&*\\‍)"");  ; CPYCPPYY_EXTERN bool Scope_Check (PyObject *pyobject);  ; CPYCPPYY_EXTERN bool Scope_CheckExact (PyObject *pyobject);  ; static bool ScopeFlagCheck (CPPInstance *self, CPPScope::EFlags flag);  ; static void ScopeFlagSet (CPPInstance *self, CPPScope::EFlags flag);  ; static PyObject * SelectAndForward (TemplateProxy *pytmpl, CPPOverload *pymeth, CPyCppyy_PyArgs_t args, size_t nargsf, PyObject *kwds, bool implicitOkay, bool use_targs, uint64_t sighash, std::vector< Utility::PyError_t > &errors);  ; CPYCPPYY_EXTERN bool Sequence_Check (PyObject *pyobject);  ; static void sync_templates (PyObject *pyclass, const std::string &mtCppName, const std::string &mtName);  ; static std::string targs2str (TemplateProxy *pytmpl);  ; static PyObject * TC2CppName (PyObject *pytc, const char *cpd, bool allow_voidp);  ; template<typename T > ; bool TemplateProxy_Check (T *object);  ; template<typename T > ; bool TemplateProxy_CheckExact (T *object);  ; TemplateProxy * TemplateProxy_New (const std::string &cppname, const std::string &pyname, PyObject *pyclass);  ; static PyObject * tpp_call (TemplateProxy *pytmpl, PyObject *args, PyObject *kwds);  ; static int tpp_clear (TemplateProxy *pytmpl);  ; static void tpp_dealloc (TemplateProxy *pytmpl);  ; static TemplateProxy * tpp_descr_get (TemplateProxy *pytmpl, PyObject *pyobj, PyObject *);  ; static PyObject * tpp_doc (TemplateProxy *pytmpl, void *);  ; static int tpp_doc_set (TemplateProxy *pytmpl, PyObject *val, void *);  ; static PyObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceCPyCppyy.html:16172,error,errors,16172,doc/master/namespaceCPyCppyy.html,https://root.cern,https://root.cern/doc/master/namespaceCPyCppyy.html,1,['error'],['errors']
Availability,"const std::string &source, std::pair< Int_t, Int_t > &result)Definition TSchemaRuleProcessor.h:158; ROOT::Internal::TSchemaRuleProcessor::SplitListstatic void SplitList(const std::string &source, std::list< std::string > &result, char delimiter=',')Definition TSchemaRuleProcessor.h:26; ROOT::Internal::MembersMap_tstd::map< std::string, std::string > MembersMap_tDefinition TSchemaType.h:20; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::SourceTypeList_tstd::list< std::pair< ROOT::Internal::TSchemaType, std::string > > SourceTypeList_tDefinition RConversionRuleParser.cxx:51; ROOT::SchemaRuleClassMap_tstd::map< std::string, std::list< SchemaRuleMap_t > > SchemaRuleClassMap_tDefinition RConversionRuleParser.h:23; ROOT::WriteAutoVariablesstatic void WriteAutoVariables(const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output)Write down the sources.Definition RConversionRuleParser.cxx:490; ROOT::FindEndSymbolstatic std::string::size_type FindEndSymbol(std::string &command)Definition RConversionRuleParser.cxx:62; ROOT::StrReplacestatic void StrReplace(std::string &proc, const std::string &pat, const std::string &tr)Replace all accurances of given string with other string.Definition RConversionRuleParser.cxx:757; ROOT::ProcessReadPragmavoid ProcessReadPragma(const char *args, std::string &error_string)I am being called when a read pragma is encountered.Definition RConversionRuleParser.cxx:899; ROOT::WriteSchemaListvoid WriteSchemaList(std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output)Write schema rules.Definition RConversionRuleParser.cxx:779; ROOT::MembersTypeMap_tstd::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_tDefinition RConversionRuleParser.h:27; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConversionRuleParser_8cxx_source.html:40363,down,down,40363,doc/master/RConversionRuleParser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RConversionRuleParser_8cxx_source.html,2,['down'],['down']
Availability,"const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values.Definition TGraphAsymmErrors.cxx:1468; TGraphAsymmErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphAsymmErrors.cxx:1456; TGraphAsymmErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphAsymmErrors.h:75; TGraphAsymmErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphAsymmErrors.h:29; TGraphAsymmErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphAsymmErrors.cxx:468; TGraphAsymmErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphAsymmErrors.cxx:444; TGraphAsymmErrors::GetEYlowDouble_t * GetEYlow() const overrideDefinition TGraphAsymmErrors.h:76; TGraphAsymmErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with asymmetric errors.Definition TGraphAsymmErrors.cxx:1077; TGraphAsymmErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphAsymmErrors.cxx:1007; TGraphAsymmErrors::IsATClass * IsA() const overrideDefinition TGraphAsymmErrors.h:89; TGraphAsymmErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exh)Set EXhigh for point i.Definition TGraphAsymmErrors.cxx:1362; TGraphAsymmErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t i) const overrideGet low error on Y.Definition TGraphAsymmErrors.cxx:1184; TGraphAsymmErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideReturns the combined error along X at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1122; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:63438,error,errors,63438,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errors']
Availability,"const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values.Definition TGraphAsymmErrors.cxx:1468; TGraphAsymmErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphAsymmErrors.cxx:1456; TGraphAsymmErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphAsymmErrors.h:75; TGraphAsymmErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphAsymmErrors.h:29; TGraphAsymmErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphAsymmErrors.cxx:468; TGraphAsymmErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphAsymmErrors.cxx:444; TGraphAsymmErrors::GetEYlowDouble_t * GetEYlow() const overrideDefinition TGraphAsymmErrors.h:76; TGraphAsymmErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with asymmetric errors.Definition TGraphAsymmErrors.cxx:1077; TGraphAsymmErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphAsymmErrors.cxx:1007; TGraphAsymmErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exh)Set EXhigh for point i.Definition TGraphAsymmErrors.cxx:1362; TGraphAsymmErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t i) const overrideGet low error on Y.Definition TGraphAsymmErrors.cxx:1184; TGraphAsymmErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideReturns the combined error along X at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1122; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraphAsymmErrors::operator=TGraphAsymmErrors & operator=(const TGraphAsymmError",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html:12186,error,errors,12186,doc/master/TGraphAsymmErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html,1,['error'],['errors']
Availability,"const vector<TMVA::VariableInfo>& var); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTMVA::VariableTransformBase::CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Bool_tTMVA::VariableTransformBase::GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; virtual const char*TMVA::VariableTransformBase::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringTMVA::VariableTransformBase::GetShortName() const; virtual const char*TObject::GetTitle() const; virtual vector<TString>*GetTransformationStrings(Int_t cls) const; virtual UInt_tTObject::GetUniqueID() const; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableNormalizeTransform.html:1667,error,error,1667,root/html530/TMVA__VariableNormalizeTransform.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableNormalizeTransform.html,5,['error'],['error']
Availability,"const. inline . Return weight of i-th bin. ; See alsogetIndex() ; Definition at line 110 of file RooDataHist.h. ◆ weightArray(). double const * RooDataHist::weightArray ; (; ); const. inline . Definition at line 216 of file RooDataHist.h. ◆ weightError() [1/2]. void RooDataHist::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; etype = Poisson . ); const. overridevirtual . Return the asymmetric errors on the current weight. ; See alsoweightError(ErrorType) const for symmetric error. ; Parameters. [out]loLow error. ; [out]hiHigh error. ; [in]etypeType of error to compute. May throw if not supported. Supported errors are; Poisson Default. Asymmetric Poisson errors (68% CL).; SumW2 The square root of the sum of weights. (Symmetric).; None Return zero. . Reimplemented from RooAbsData.; Definition at line 1570 of file RooDataHist.cxx. ◆ weightError() [2/2]. double RooDataHist::weightError ; (; ErrorType ; etype = Poisson); const. inlineoverridevirtual . Return the symmetric error on the current weight. ; See also weightError(double&,double&,ErrorType) const for asymmetric errors. ; Reimplemented from RooAbsData.; Definition at line 125 of file RooDataHist.h. ◆ weightFast(). double RooDataHist::weightFast ; (; const RooArgSet & ; bin, . int ; intOrder, . bool ; correctForBinSize, . bool ; cdfBoundaries . ). A faster version of RooDataHist::weight that assumes the passed arguments are aligned with the histogram variables. ; Parameters. [in]binCoordinates for which the weight should be calculated. Has to be aligned with the internal histogram variables. ; [in]intOrderInterpolation order, i.e. how many neighbouring bins are used for the interpolation. If zero, the bare weight for the bin enclosing the coordinatesis returned. ; [in]correctForBinSizeEnable the inverse bin volume correction factor. ; [in]cdfBoundariesEnable the special boundary condition for a cdf: underflow bins are assumed to have weight zero and overflow bins have weight one. Otherwise, the hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:82567,error,error,82567,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['error'],['error']
Availability,"const. inlinefinalvirtual . One can not save a const TDirectory object. ; Reimplemented from TFile.; Definition at line 95 of file TXMLFile.h. ◆ Write() [2/2]. Int_t TXMLFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsiz = 0 . ). inlinefinalvirtual . Write memory objects to this file. ; Loop on all objects in memory (including subdirectories). A new key is created in the KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TFile.; Definition at line 94 of file TXMLFile.h. ◆ WriteBuffer(). Bool_t TXMLFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). inlinefinalvirtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 93 of file TXMLFile.h. ◆ WriteFree(). void TXMLFile::WriteFree ; (; ). inlinefinalvirtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented from TFile.; Definition at line 96 of file TXMLFile.h. ◆ WriteHeader(). void TXMLFile::WriteHeader ; (; ). inlinefinalvirtual . Write File Header. ; Reimplemented from TFile.; Definition at line 97 of file TXMLFile.h. ◆ WriteStreamerInfo(). void TXMLFile::WriteStreamerInfo ; (; ). finalvirtual . convert all TStreamerInfo, used in file, to xml format ; Reimplemented from TFile.; Definition at line 664 of file TXMLFile.cxx. ◆ XML(). TXMLEngine * TXMLFile::XML ; (; ). inline . Definition at line 112 of file TXMLFile.h. Member Data Documentation. ◆ fDoc. XMLDocPointer_t TXMLFile::fDoc {nullptr}. protected . Definition at line 130 of file TXMLFile.h. ◆ fIOVersion. Int_t TXMLFile::fIOVersion {0}. protected .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:75585,failure,failure,75585,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['failure'],['failure']
Availability,"const. overridevirtual . Returns \(CL_{s+b}\) : the S+B p-value. ; Reimplemented from RooStats::HypoTestResult.; Definition at line 147 of file HybridResult.cxx. ◆ Class(). static TClass * RooStats::HybridResult::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::HybridResult::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::HybridResult::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 88 of file HybridResult.h. ◆ CLbError(). double HybridResult::CLbError ; (; ); const. The error on the ""confidence level"" of the null hypothesis. ; Returns an estimate of the error on \(CL_{b}\) assuming a binomial error on \(CL_{b}\):. \[; \sigma_{CL_{b}} = \sqrt{CL_{b} \left( 1 - CL_{b} \right) / n_{toys}}; \]. Definition at line 181 of file HybridResult.cxx. ◆ CLsError(). double HybridResult::CLsError ; (; ); const. The error on the ratio \(CL_{s+b}/CL_{b}\). ; Returns an estimate of the error on \(CL_{s}\) through combination of the errors on \(CL_{b}\) and \(CL_{s+b}\):. \[; \sigma_{CL_s} = CL_s \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; \]. Definition at line 207 of file HybridResult.cxx. ◆ CLsplusbError(). double HybridResult::CLsplusbError ; (; ); const. The error on the ""confidence level"" of the alternative hypothesis. ; Returns an estimate of the error on \(CL_{s+b}\) assuming a binomial error on \(CL_{s+b}\):. \[; \sigma_{CL_{s+b}} = \sqrt{CL_{s+b} \left( 1 - CL_{s+b} \right) / n_{toys}}; \]. Definition at line 194 of file HybridResult.cxx. ◆ DeclFileName(). static const char * RooStats::HybridResult::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 88 of file HybridResult.h. ◆ GetPlot(). HybridPlot * HybridResult::GetPlot ; (; const char * ; name, . const char * ; title, . int ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:19927,error,error,19927,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,1,['error'],['error']
Availability,"const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMutex(const TMutex&); TMutex&operator=(const TMutex&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TMutexImp*fMutexImppointer to mutex implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMutex(Bool_t recursive = kFALSE); Create a mutex lock. The actual mutex implementation will be; provided via the TThreadFactory. Int_t Lock(); Lock the mutex. Returns 0 when no error, EDEADLK when mutex was already; locked by this thread and this mutex is not reentrant. Int_t TryLock(); Try to lock mutex. Returns 0 when no error, EDEADLK when mutex was; already locked by this thread and this mutex is not reentrant. Int_t UnLock(); Unlock the mutex. Returns 0 when no error, EPERM when mutex was already; unlocked by this thread. Int_t CleanUp(); Clean up of mutex. TVirtualMutex * Factory(Bool_t recursive = kFALSE); Create mutex and return pointer to it. Calling function must care; about proper deletion. The function is intended to be used in connection; with the R__LOCKGUARD2 macro for local thread protection. Since ""new"" is; used the TStorage class has to be protected by gGlobalMutex. TMutex(const TMutex& ). TMutex& operator=(const TMutex& ). virtual ~TMutex(); { delete fMutexImp; }. » Author: Fons Rademakers 26/06/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TMutex.h 29797 2009-08-17 14:35:51Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMutex.html:5848,error,error,5848,root/html528/TMutex.html,https://root.cern,https://root.cern/root/html528/TMutex.html,2,['error'],['error']
Availability,"const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMutex(const TMutex&); TMutex&operator=(const TMutex&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TMutexImp*fMutexImppointer to mutex implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMutex(Bool_t recursive = kFALSE); Create a mutex lock. The actual mutex implementation will be; provided via the TThreadFactory. Int_t Lock(); Lock the mutex. Returns 0 when no error, EDEADLK when mutex was already; locked by this thread and this mutex is not reentrant. Int_t TryLock(); Try to lock mutex. Returns 0 when no error, EDEADLK when mutex was; already locked by this thread and this mutex is not reentrant. Int_t UnLock(); Unlock the mutex. Returns 0 when no error, EPERM when mutex was already; unlocked by this thread. Int_t CleanUp(); Clean up of mutex. TVirtualMutex * Factory(Bool_t recursive = kFALSE); Create mutex and return pointer to it. Calling function must care; about proper deletion. The function is intended to be used in connection; with the R__LOCKGUARD2 macro for local thread protection. Since ""new"" is; used the TStorage class has to be protected by gGlobalMutex. TMutex(const TMutex& ). TMutex& operator=(const TMutex& ). virtual ~TMutex(); { delete fMutexImp; }. » Author: Fons Rademakers 26/06/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TMutex.h 29797 2009-08-17 14:35:51Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMutex.html:5917,error,error,5917,root/html530/TMutex.html,https://root.cern,https://root.cern/root/html530/TMutex.html,2,['error'],['error']
Availability,"const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMutex(const TMutex&); TMutex&operator=(const TMutex&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TMutexImp*fMutexImppointer to mutex implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMutex(Bool_t recursive = kFALSE); Create a mutex lock. The actual mutex implementation will be; provided via the TThreadFactory. Int_t Lock(); Lock the mutex. Returns 0 when no error, EDEADLK when mutex was already; locked by this thread and this mutex is not reentrant. Int_t TryLock(); Try to lock mutex. Returns 0 when no error, EDEADLK when mutex was; already locked by this thread and this mutex is not reentrant. Int_t UnLock(); Unlock the mutex. Returns 0 when no error, EPERM when mutex was already; unlocked by this thread. Int_t CleanUp(); Clean up of mutex. TVirtualMutex * Factory(Bool_t recursive = kFALSE); Create mutex and return pointer to it. Calling function must care; about proper deletion. The function is intended to be used in connection; with the R__LOCKGUARD2 macro for local thread protection. Since ""new"" is; used the TStorage class has to be protected by gGlobalMutex. TMutex(const TMutex& ). TMutex& operator=(const TMutex& ). virtual ~TMutex(); { delete fMutexImp; }. » Author: Fons Rademakers 26/06/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TMutex.h 29797 2009-08-17 14:35:51Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMutex.html:5917,error,error,5917,root/html532/TMutex.html,https://root.cern,https://root.cern/root/html532/TMutex.html,2,['error'],['error']
Availability,"const. virtual . Return the build compiler. ; Definition at line 3883 of file TSystem.cxx. ◆ GetBuildCompilerVersion(). const char * TSystem::GetBuildCompilerVersion ; (; ); const. virtual . Return the build compiler version. ; Definition at line 3891 of file TSystem.cxx. ◆ GetBuildCompilerVersionStr(). const char * TSystem::GetBuildCompilerVersionStr ; (; ); const. virtual . Return the build compiler version identifier string. ; Definition at line 3899 of file TSystem.cxx. ◆ GetBuildDir(). const char * TSystem::GetBuildDir ; (; ); const. virtual . Return the path of the build directory. ; Definition at line 3915 of file TSystem.cxx. ◆ GetBuildNode(). const char * TSystem::GetBuildNode ; (; ); const. virtual . Return the build node name. ; Definition at line 3907 of file TSystem.cxx. ◆ GetCpuInfo(). int TSystem::GetCpuInfo ; (; CpuInfo_t * ; info, . Int_t ; sampleTime = 1000 . ); const. virtual . Returns cpu load average and load info into the CpuInfo_t structure. ; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the interval over which the CPU load will be measured, in ms (default 1000). ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2469 of file TSystem.cxx. ◆ GetCryptoRandom(). Int_t TSystem::GetCryptoRandom ; (; void * ; buf, . Int_t ; len . ). virtual . Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 266 of file TSystem.cxx. ◆ GetDirEntry(). const char * TSystem::GetDirEntry ; (; void * ; dirp). virtual . Get a directory entry. Returns 0 if no more entries. ; Reimplemented in TDavixSystem, TUnixSystem, TWinNTSystem, TDCacheSystem, TWebSystem, TNetXNGSystem, and TNetSystem.; Definition at line 853 of file TSystem.cxx. ◆ GetDirName(). TString TSystem::GetDirName ; (; const char * ; pathname). virtual . Return the directory name in pathname. ; DirName of /user/root ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:55154,error,error,55154,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['error'],['error']
Availability,"const; -*-*-*-*-*Return error of bin number binx,biny,binz. NB: Function to be called for 3-D histograms only. Double_t GetCellContent(Int_t binx, Int_t biny) const; -*-*-*-*-*Return content of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetCellError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. void SetBinError(Int_t bin, Double_t error); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t binx, Int_t biny, Double_t content); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t binx, Int_t biny, Int_t binz, Double_t content); see convention for numbering bins in TH1::GetBin. void SetCellContent(Int_t binx, Int_t biny, Double_t content); Set cell content. void SetBinError(Int_t binx, Int_t biny, Double_t error); see convention for numbering bins in TH1::GetBin. void SetBinError(Int_t binx, Int_t biny, Int_t binz, Double_t error); see convention for numbering bins in TH1::GetBin. void SetCellError(Int_t binx, Int_t biny, Double_t content); see convention for numbering bins in TH1::GetBin. void SetBinContent(Int_t bin, Double_t content); see convention for numbering bins in TH1::GetBin. TH1 * ShowBackground(Int_t niter = 20, Option_t* option = ""same""); This function calculates the background spectrum in this histogram.; The background is returned as a histogram. Function parameters:; -niter, number of iterations (default value = 2); Increasing niter make the result smoother and lower.; -option: may contain one of the following options; - to set the direction parameter; ""BackDecreasingWindow"". By default the direction is BackIncreasingWindow; - filterOrder-order of clipping filter, (default ""BackOrder2""; -possible values= ""BackOrder4""; ""BackOrder6""; ""BackOrder8""; - ""nosmoothing""- if selected, the background is not smoothed; By default the background is smoothed.; - smoothWindow-width of smoothing window",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:119918,error,error,119918,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['error'],['error']
Availability,"const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. THnBase* RebinBase(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnBase.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void ResetBase(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnBase. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnBase& operator=(const THnBase& ). void UpdateXStat(const Double_t* x, Double_t w = 1.). void FillBin(Long64_t bin, Double_t w). void FillBinBase(Double_t w); Increment the statistics due to filled weight ""w"",. void InitStorage(Int_t* nbins, Int_t ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnBase.html:17377,error,error,17377,root/html534/THnBase.html,https://root.cern,https://root.cern/root/html534/THnBase.html,1,['error'],['error']
Availability,"const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. THnBase* RebinBase(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnBase.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void ResetBase(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnBase. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnBase(const THnBase& ). THnBase& operator=(const THnBase& ). THnBase(); {}. void UpdateXStat(const Double_t* x, Double_t w = 1.). void FillBin(Long64_t bin, Double_t w). void FillBinBase(Double_t w); Increment the statistics due to filled weight ""w"",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnBase.html:18474,error,error,18474,root/html602/THnBase.html,https://root.cern,https://root.cern/root/html602/THnBase.html,2,['error'],['error']
Availability,"const; Return set with all function objects. RooArgSet allCatFunctions() const; Return set with all category function objects. RooArgSet allResolutionModels() const; Return set with all resolution model objects. RooArgSet allPdfs() const; Return set with all probability density function objects. list<RooAbsData*> allData() const; Return list of all dataset in the workspace. list<TObject*> allGenericObjects() const; Return list of all generic objects in the workspace. Bool_t makeDir(); Create transient TDirectory representation of this workspace. This directory; will appear as a subdirectory of the directory that contains the workspace; and will have the name of the workspace suffixed with ""Dir"". The TDirectory; interface is read-only. Any attempt to insert objects into the workspace; directory representation will result in an error message. Note that some; ROOT object like TH1 automatically insert themselves into the current directory; when constructed. This will give error messages when done in a workspace; directory. Bool_t import(TObject& object, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container. Imported; object can be retrieved by name through the obj() method. The object is cloned upon; importation and the input argument does not need to live beyond the import call. Returns kTRUE if an error has occurred. Bool_t import(TObject& object, const char* aliasName, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container.; The imported object will be stored under the given alias name rather than its; own name. Imported object can be retrieved its alias name through the obj() method.; The object is cloned upon importation and the input argument does not need to live beyond the import call; This method is mostly useful for importing objects that do not have a settable name such as TMatrix. Returns kTRUE if an error has occurred. Bool_t addStudy(RooAbsStudy& s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace.html:19894,error,error,19894,root/html526/RooWorkspace.html,https://root.cern,https://root.cern/root/html526/RooWorkspace.html,4,['error'],['error']
Availability,"const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; intQFrame::lineWidth() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQFrame::midLineWidth() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtClientWidget.html:6730,mask,mask,6730,root/html602/TQtClientWidget.html,https://root.cern,https://root.cern/root/html602/TQtClientWidget.html,2,['mask'],['mask']
Availability,"const; unsigned intNPoints() const; ROOT::Fit::BinData&operator=(const ROOT::Fit::BinData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); unsigned intPointSize() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; doubleRefVolume() const; voidResize(unsigned int npoints); voidSetRefVolume(double value); unsigned intSize() const; doubleSumOfContent() const; doubleSumOfError2() const; doubleValue(unsigned int ipoint) const. protected:. voidSetNPoints(unsigned int n). Data Members; public:. enum ErrorType { kNoError; kValueError; kCoordError; kAsymError; };. private:. vector<double>fBinEdgevector containing the bin upper edge (coordinate will contain low edge) ; ROOT::Fit::DataVector*fDataVectorpointer to the copied in data vector; ROOT::Fit::DataWrapper*fDataWrapperpointer to the external data wrapper structure; unsigned intfDimcoordinate dimension; unsigned intfNPointsnumber of contained points in the data set (can be different than size of vector); unsigned intfPointSizetotal point size including value and errors (= fDim + 2 for error in only Y ) ; doublefRefVolumereference bin volume - used to normalize the bins in case of variable bins data; doublefSumContenttotal sum of the bin data content ; doublefSumError2total sum square of the errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int GetPointSize(ROOT::Fit::BinData::ErrorType err, unsigned int dim). ErrorType GetErrorType() const. explicit BinData(unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from dimension of point and max number of points (to pre-allocate vector); Give a zero value and then use Initialize later one if the size is not known. explicit BinData(const ROOT::Fit::DataOptions& opt, unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__BinData.html:5534,error,errors,5534,root/html534/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__BinData.html,3,['error'],"['error', 'errors']"
Availability,"const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::CombinedMinimizer&operator=(const ROOT::Minuit2::CombinedMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::CombinedMinimumBuilderfMinBuilder; ROOT::Minuit2::MnSeedGeneratorfMinSeedGen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedMinimizer(); {}. ~CombinedMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__CombinedMinimizer.html:3684,toler,toler,3684,root/html534/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__CombinedMinimizer.html,1,['toler'],['toler']
Availability,"const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static TStringTString::UItoa(UInt_t value, Int_t base); static TStringTString::ULLtoa(ULong64_t value, Int_t base); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. const TStringfFullStr; Int_tfPos; Bool_tfReturnVoid; TPRegexpfSplitRe. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE); Constructor. Bool_t NextToken(); Get the next token, it is stored in this TString.; Returns true if new token is available, false otherwise. TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE). virtual ~TStringToken(); {}. Bool_t AtEnd() const; { return fPos >= fFullStr.Length(); }. » Author: Eddy Offermann 24/06/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStringToken.html:8932,avail,available,8932,root/html534/TStringToken.html,https://root.cern,https://root.cern/root/html534/TStringToken.html,1,['avail'],['available']
Availability,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFindLimits(const RooRealVar& param, double& lower, double& upper); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const RooArgSet*GetBestFitParameters() const; Int_tGetContourPoints(const RooRealVar& paramX, const RooRealVar& paramY, Double_t* x, Double_t* y, Int_t npoints = 30); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; RooAbsReal*GetLikelihoodRatio(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*GetParameters() const; virtual const char*TNamed::GetTitle() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__LikelihoodInterval.html:2807,error,error,2807,root/html602/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__LikelihoodInterval.html,2,['error'],['error']
Availability,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetActualConfidenceLevel(); virtual RooArgList*GetAxes(); virtual const RooStats::MarkovChain*GetChain(); virtual const RooDataSet*GetChainAsConstDataSet(); virtual RooDataHist*GetChainAsDataHist(RooArgSet* whichVars = __null); virtual RooDataSet*GetChainAsDataSet(RooArgSet* whichVars = __null); virtual THnSparse*GetChainAsSparseHist(RooArgSet* whichVars = __null); virtual Int_tGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetHistCutoff(); virtual const char*TObject::GetIconName() const; virtual enum IntervalTypeGetIntervalType(); Double_tGetKeysMax(); virtual Double_tGetKeysPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MCMCInterval.html:3843,error,error,3843,root/html602/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__MCMCInterval.html,2,['error'],['error']
Availability,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooAbsData*GetParameterPoints() const; virtual RooArgSet*GetParameters() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__PointSetInterval.html:2094,error,error,2094,root/html602/RooStats__PointSetInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__PointSetInterval.html,2,['error'],['error']
Availability,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*GetParameters() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:1887,error,error,1887,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,2,['error'],['error']
Availability,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); const char*DeconvolutionRL(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:3055,error,error,3055,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,2,['error'],['error']
Availability,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetPlottedObject() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__LikelihoodIntervalPlot.html:1787,error,error,1787,root/html534/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html534/RooStats__LikelihoodIntervalPlot.html,1,['error'],['error']
Availability,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodIntervalPlot.html:1787,error,error,1787,root/html526/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodIntervalPlot.html,5,['error'],['error']
Availability,"const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; static voidClose(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisable(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnable(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Memstat::TMemStatMng*GetInstance(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Memstat__TMemStatMng.html:1406,error,error,1406,root/html602/Memstat__TMemStatMng.html,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html,2,['error'],['error']
Availability,"const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; static voidClose(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisable(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnable(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static memstat::TMemStatMng*GetInstance(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/memstat__TMemStatMng.html:1406,error,error,1406,root/html528/memstat__TMemStatMng.html,https://root.cern,https://root.cern/root/html528/memstat__TMemStatMng.html,4,['error'],['error']
Availability,"const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TQuaternionConjugate() const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); TQuaternion&DivideLeft(const TVector3& vector); TQuaternion&DivideLeft(const TQuaternion& quaternion); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetQAngle() const; voidGetRXYZ(Double_t* carray) const; voidGetRXYZ(Float_t* carray) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQuaternion.html:5826,error,error,5826,root/html528/TQuaternion.html,https://root.cern,https://root.cern/root/html528/TQuaternion.html,6,['error'],['error']
Availability,"const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecay(Int_t pdg, TLorentzVector* p); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPartialBranchingRatio(Int_t ipart); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tImportParticles(TClonesArray* particles); virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPythia8Decayer.html:1494,error,error,1494,root/html528/TPythia8Decayer.html,https://root.cern,https://root.cern/root/html528/TPythia8Decayer.html,6,['error'],['error']
Availability,"const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTGLCamera::Dolly(Int_t delta, Bool_t mod1, Bool_t mod2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGLCamera::DrawDebugAids() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); TGLVector3TGLCamera::EyeDirection() const; TGLVertex3TGLCamera::EyePoint() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLVertex3TGLCamera::FrustumCenter() const; Rgl::EOverlapTGLCamera::FrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&TGLCamera::FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&TGLCamera::GetCamBase() const; const TGLMatrix&TGLCamera::GetCamTrans() const; Double_t*TGLCamera::GetCenterVec(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGLCamera::GetExternalCenter(); Double_tTGLCamera::GetFarClip() const; Double_t*TGLCamera::GetFixDefCenterVec(); Double_tGetFOV() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLPerspectiveCamera.html:2133,error,error,2133,root/html534/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html534/TGLPerspectiveCamera.html,1,['error'],['error']
Availability,"const; virtual voidTObject::Copy(TObject& object) const; voidTGeoBoolNode::CreateThreadData(Int_t nthreads); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceToPrimitive(Int_t px, Int_t py); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGeoBoolNode::EGeoBoolTypeGetBooleanOperator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TGeoMatrix*TGeoBoolNode::GetLeftMatrix() const; TGeoShape*TGeoBoolNode::GetLeftShape() const; virtual const char*TObject::GetName() const; virtual Int_tGetNpoints(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TGeoMatrix*TGeoBoolNode::GetRightMatrix() const; TGeoShape*TGeoBoolNode::GetRightShape() const; TGeoBoolNode::ThreadData_t&TGeoBoolNode::GetThreadData() const; virtual const char*TObject::GetTitle() const; virtual U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoIntersection.html:3107,error,error,3107,root/html534/TGeoIntersection.html,https://root.cern,https://root.cern/root/html534/TGeoIntersection.html,9,['error'],['error']
Availability,"const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidEditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*GetLabel() const; virtual TText*GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*GetLineWith(const char* text) const; virtual TList*GetListOfLines() const; Float_tGetMargin() const; virtual Option_t*TPave::GetName() const; virtual TObject*GetObject(Double_t& ymouse, Double_t& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaveText.html:2311,error,error,2311,root/html528/TPaveText.html,https://root.cern,https://root.cern/root/html528/TPaveText.html,3,['error'],['error']
Availability,"const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidEditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*GetLabel() const; virtual TText*GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*GetLineWith(const char* text) const; virtual TList*GetListOfLines() const; Float_tGetMargin() const; virtual Option_t*TPave",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveText.html:2918,error,error,2918,root/html534/TPaveText.html,https://root.cern,https://root.cern/root/html534/TPaveText.html,3,['error'],['error']
Availability,"const; virtual voidTPave::ConvertNDCtoPad(); virtual voidTPave::Copy(TObject& pave) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidEditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*GetLabel() const; virtual TText*GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*GetLineWith(const char* text) const; virtual TList*GetListOfLines() const; Float_tGetMargin() const; virtual Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaveText.html:2227,error,error,2227,root/html528/TPaveText.html,https://root.cern,https://root.cern/root/html528/TPaveText.html,3,['error'],['error']
Availability,"const; virtual voidTPave::ConvertNDCtoPad(); virtual voidTPave::Copy(TObject& pave) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidEditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*GetLabel() const; virtual TText*GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*GetLineWith(const char* text) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveText.html:2834,error,error,2834,root/html534/TPaveText.html,https://root.cern,https://root.cern/root/html534/TPaveText.html,3,['error'],['error']
Availability,"const; voidAddSWeight(RooAbsPdf* pdf, const RooArgList& yieldsTmp, const RooArgSet& projDeps = RooArgSet(), bool includeWeights = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNumSWeightVars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooDataSet*GetSDataSet() const; Double_tGetSumOfEventSWeight(Int_t numEvent) const; Double_tGetSWeight(Int_t numEvent, const char* sVariable) const; RooArgListGetSWeightVars() const; virtual const char*TNamed::GetTitle() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SPlot.html:2184,error,error,2184,root/html526/RooStats__SPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__SPlot.html,7,['error'],['error']
Availability,"const; voidTObject::MakeZombie(). Data Members; public:. enum EProcStatus { kNotOk; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Int_tfExitStatusQuery exit status ((Int_t)TVirtualProofPlayer::EExitStatus or -1);; THashListfInfoMsgslist of info messages; TIterfIter!iterator in messages; TListfMsgslist of error messages; Long_tfResMaxMstMax resident memory used by the master; Long_tfResMemMaxMax resident memory used by the worker; Long_tfVirtMaxMstMax virtual memory used by the master; Long_tfVirtMemMaxMax virtual memory used by the worker. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStatus(); Default constructor. void Add(const char* mesg); Add an error message. void AddInfo(const char* mesg); Add an info message. Int_t Merge(TCollection* list); PROOF Merge() function. void Print(Option_t* option = """") const; Standard print function. void Reset(); Reset the iterator on the messages. const char * NextMesg(); Return the next message or 0. void SetMemValues(Long_t vmem = -1, Long_t rmem = -1, Bool_t master = kFALSE); Set max memory values. void Streamer(TBuffer& ); Stream an object of class TStatus. virtual ~TStatus(); { }. Bool_t IsOk() const; { return TestBit(kNotOk) ? kFALSE : kTRUE; }. Int_t GetExitStatus() const; { return fExitStatus; }. Long_t GetResMemMax(Bool_t master = kFALSE) const; { return ((master) ? fResMaxMst : fResMemMax); }. Long_t GetVirtMemMax(Bool_t master = kFALSE) const; { return ((master) ? fVirtMaxMst : fVirtMemMax); }. void SetExitStatus(Int_t est); { fExitStatus = est; }. » Author: Maarten Ballintijn 12/03/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStatus.html:6603,error,error,6603,root/html534/TStatus.html,https://root.cern,https://root.cern/root/html534/TStatus.html,1,['error'],['error']
Availability,"const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t Run(TThread* th); Create a pthread. Returns 0 on success, otherwise an error number will; be returned. Int_t Join(TThread* th, void** ret); Join suspends the execution of the calling thread until the; thread identified by th terminates, either by calling pthread_exit; or by being cancelled. Returns 0 on success, otherwise an error number will; be returned. Int_t Exit(void* ret); Terminates the execution of the calling thread. Return 0. Int_t Kill(TThread* th); Cancellation is the mechanism by which a thread can terminate the; execution of another thread. Returns 0 on success, otherwise an error; number will be returned. Int_t SetCancelOff(); Turn off the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelOn(); Turn on the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Set the cancellation response type of the calling thread to; asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Set the cancellation response type of the calling thread to; deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Introduce an explicit cancellation point. Returns 0. Int_t CleanUpPush(void** main, void* free, void* arg); Add thread cleanup function. Int_t CleanUpPop(void** main, Int_t exe); Pop thread cleanup function from stack. Int_t CleanUp(void** main); Default thread cleanup routine. Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPosixThread.html:6310,error,error,6310,root/html530/TPosixThread.html,https://root.cern,https://root.cern/root/html530/TPosixThread.html,3,['error'],['error']
Availability,"const; voidTRefCnt::AddReference(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); UInt_tGetHeight() const; virtual const char*TObject::GetIconName() const; Pixmap_tGetMask() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Pixmap_tGetPicture() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; UInt_tGetWidth() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; static const char*HashName(const char* name, Int_t width, Int_t height); virtual voidTObject::Info(const char* method, const char* msgf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGPicture.html:1684,error,error,1684,root/html528/TGPicture.html,https://root.cern,https://root.cern/root/html528/TGPicture.html,6,['error'],['error']
Availability,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:29338,error,error,29338,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,4,['error'],['error']
Availability,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrack.html:9072,error,error,9072,doc/master/classTGeoTrack.html,https://root.cern,https://root.cern/doc/master/classTGeoTrack.html,1,['error'],['error']
Availability,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:11187,error,error,11187,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['error'],['error']
Availability,"const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpider.html:7686,error,error,7686,doc/master/classTSpider.html,https://root.cern,https://root.cern/doc/master/classTSpider.html,1,['error'],['error']
Availability,"const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THnSparse * Rebin (const Int_t *group) const;  ; THnSparse * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Clear the histogram. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  Set content of bin with index ""bin"" to ""v"". ;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  Set error of bin with index ""bin"" to ""e"", enable errors if needed. ;  ; void SetFilledBins (Long64_t nbins) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Divide (const THnBase *h);  Divide this histogram by h this = this/(h) Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void Divide (const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""");  Replace contents of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:5518,error,error,5518,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,1,['error'],['error']
Availability,"const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:45823,error,error,45823,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,42,['error'],['error']
Availability,"const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TProofServ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void ErrorHandler (Int_t level, Bool_t abort, const char *location, const char *msg);  The PROOF error handler function. ;  ; static void FilterLocalroot (TString &path, const char *url=""root://dum/"");  If 'path' is local and 'dsrv' is Xrootd, apply 'path.Localroot' settings, if any. ;  ; static TMap * GetDataSetNodeMap (TFileCollection *fc, TString &emsg);  Get a map {server-name, list-of-files} for collection 'fc' to be used in TPacketizerFile. ;  ; static void GetLocalServer (TString &dsrv);  Extract LOCALDATASERVER info in 'dsrv'. ;  ; static Float_t GetMemHWM ();  MemHWM getter. ;  ; static Float_t GetMemStop ();  MemStop getter. ;  ; static Long_t GetResMemMax ();  ResMemMax getter. ;  ; static Long_t GetVirtMemMax ();  VirtMemMax getter. ;  ; static Bool_t IsActive ();  Static function that returns kTRUE in case we are a PROOF server. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLite.html:18363,error,error,18363,doc/master/classTProofServLite.html,https://root.cern,https://root.cern/doc/master/classTProofServLite.html,1,['error'],['error']
Availability,"const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; RBrowserData & fData;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html:7392,error,error,7392,doc/v632/classROOT_1_1RBrowserDataCleanup.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserDataCleanup.html,2,['error'],['error']
Availability,"const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:8491,error,errors,8491,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,1,['error'],['errors']
Availability,"const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  Retrieve extra options for a given minimizer name. ;  ; static double DefaultErrorDef ();  ; static IOptions * DefaultExtraOptions ();  ; static int DefaultMaxFunctionCalls ();  ; static int DefaultMaxIterations ();  ; static const std::string & DefaultMinimizerAlgo ();  ; static const std::string & DefaultMinimizerType ();  ; static double DefaultPrecision ();  ; static int DefaultPrintLevel ();  ; static int DefaultStrategy ();  ; static double DefaultTolerance ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  Find an extra options and return a nullptr if it is not existing. ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  Print all the default options including the extra one specific for a given minimizer name. ;  ; static void SetDefaultErrorDef (double up);  Set the default level for computing the parameter errors. ;  ; static void SetDefaultExtraOptions (const IOptions *extraoptions);  Set additional minimizer options as pair of (string,value). ;  ; static void SetDefaultMaxFunctionCalls (int maxcall);  Set the maximum number of function calls. ;  ; static void SetDefaultMaxIterations (int maxiter);  Set the maximum number of iterations. ;  ; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  Set the default Minimizer type and corresponding algorithms. ;  ; static void SetDefaultPrecision (double prec);  Set the default Minimizer precision. ;  ; static void SetDefaultPrintLevel (int level);  Set the default Print Level. ;  ; static void SetDefaultStrategy (int strat);  Set the default strategy. ;  ; static void SetDefaultTolerance (double tol);  Set the Minimization tolerance. ;  . Private Attributes; std::string fAlgoType;  Minimizer algorithmic specification (Migrad, Minimize, ...) ;  ; double fErrorDef;  error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:3505,error,errors,3505,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['error'],['errors']
Availability,"constDefinition TApplication.h:146; TApplication::Helpvirtual void Help(const char *line)The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxy...Definition TApplication.cxx:1208; TApplication::LineProcessedvirtual void LineProcessed(const char *line)Emit signal when a line has been processed.Definition TApplication.cxx:1941; TApplication::ClearInputFilesvoid ClearInputFiles()Clear list containing macro files passed as program arguments.Definition TApplication.cxx:318; TApplication::fAppImpTApplicationImp * fAppImpDefinition TApplication.h:60; TApplication::TApplicationTApplication(const TApplication &)=delete; TApplication::EExitOnExceptionEExitOnExceptionDefinition TApplication.h:51; TApplication::kDontExit@ kDontExitDefinition TApplication.h:52; TApplication::kAbort@ kAbortDefinition TApplication.h:54; TApplication::kExit@ kExitDefinition TApplication.h:53; TApplication::ExecuteFilestatic Longptr_t ExecuteFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Execute a file containing a C++ macro (static method).Definition TApplication.cxx:1729; TApplication::GetSignalHandlerTSignalHandler * GetSignalHandler() constDefinition TApplication.h:107; TApplication::InitializeGraphicsvoid InitializeGraphics(Bool_t only_web=kFALSE)Initialize the graphics environment.Definition TApplication.cxx:244; TApplication::Openvirtual void Open()Definition TApplication.h:132; TApplication::LoadGraphicsLibsvirtual void LoadGraphicsLibs()Load shared libs necessary for graphics.Definition TApplication.cxx:1333; TApplication::StopIdleingvirtual void StopIdleing()Called when system stops idleing.Definition TApplication.cxx:1907; TApplication::EStatusBitsEStatusBitsDefinition TApplication.h:43; TApplication::kProcessRemotely@ kProcessRemotelyDefinition TApplication.h:44; TApplication::kDefaultApplication@ kDefaultApplicationDefinition TApplication.h:45; TApplication::Iconifyvirtual void Iconify()Definition TApplication.h:131; TApplic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:12276,error,error,12276,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['error'],['error']
Availability,"constMENU ; voidDrawFaceGouraudShaded(Int_t* icodes, Double_t[][3] xyz, Int_t np, Int_t* iface, Double_t* t); voidDrawFaceMode1(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* t); voidDrawFaceMode2(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* t); voidDrawFaceMode3(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* t); voidDrawFaceMove1(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); voidDrawFaceMove2(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); voidDrawFaceMove3(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); voidDrawFaceRaster1(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); voidDrawFaceRaster2(Int_t* icodes, Double_t* xyz, Int_t np, Int_t* iface, Double_t* tt); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillPolygon(Int_t n, Double_t* p, Double_t* f); voidFillPolygonBorder(Int_t nn, Double_t* xy); voidFindLevelLines(Int_t np, Double_t* f, Double_t* t); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindPartEdge(Double_t* p1, Double_t* p2, Double_t f1, Double_t f2, Double_t fmin, Double_t fmax, Int_t& kpp, Double_t* pp); voidFindVisibleDraw(Double_t* r1, Double_t* r2); voidFindVisibleLine(Double_t* p1, Double_t* p2, Int_t ntmax, Int_t& nt, Double_t* t); voidFrontBox(Double_t ang); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPainter3dAlgorithms.html:2704,error,error,2704,root/html602/TPainter3dAlgorithms.html,https://root.cern,https://root.cern/root/html602/TPainter3dAlgorithms.html,2,['error'],['error']
Availability,"constant \(\beta\), then the errors will be decreased by a factor \(\sqrt{\beta}\). Additive constants do not change the parameter errors, but may imply a different goodness-of-fit confidence level.; Assuming that the user knows what the normalization of their \(\mbox{FCN}\) means, and also that they are interested in parameter errors, the user can change the error definition which allows them to define what they means by one “error”, in terms of the change in the \(\mbox{FCN}\) value which should be caused by changing one parameter by one “error”. If the \(\mbox{FCN}\) is the usual chisquare function (defined below) and if the user wants the usual one-standard-deviation errors, then the error definition (return value of the FCNBase::up() method, see [howto:errordef]) should be \(1.0\). If the \(\mbox{FCN}\) is a negative-log-likelihood function, then the one-standard-deviation value for FCNBase::up() to return is \(0.5\). If the \(\mbox{FCN}\) is a chisquare, but the user wants two-standard-deviation errors, then FCNBase::up() should return \(= 4.0\), etc.; Note that in the usual case where M is being used to perform a fit to some experimental data, the parameter errors will be proportional to the uncertainty in the data, and therefore meaningful parameter errors cannot be obtained unless the measurement errors of the data are known. In the common case of a least-squares fit, \(\mbox{FCN}\) is usually defined as a chisquare:; \[\chi^2 (\alpha) = \sum_{i=1}^{n} (\frac{f(x_i,\alpha) - m_i)^2}{\sigma_i^2}\]; where \(\alpha\) is the vector of free parameters being fitted, and the \(\sigma_i\) are the uncertainties in the individual measurements \(m_i\). If these uncertainties are not known, and are simply left out of the calculation, then the fit may still have meaning, but not the quantitative values of the resulting parameter errors. (Only the relative errors of different parameters with respect to each other may be meaningful.); If the \(\sigma_i\) are all overestim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:15654,error,errors,15654,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['error'],['errors']
Availability,"construction of p.d.f in terms of transformed angular coordinates, e.g. ;  ; file  rf211_paramconv.C;   Addition and convolution: working with a pdf with a convolution operator in terms of a parameter ;  ; file  rf211_paramconv.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #211 Working a with a p.d.f. ;  ; file  rf212_plottingInRanges_blinding.C;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf212_plottingInRanges_blinding.py;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:6608,avail,available,6608,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['avail'],['available']
Availability,"constructor. ;  ;  TGraphErrors (const TH1 *h);  TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vex, const TVectorD &vey);  Constructor with four vectors of doubles in input. ;  ;  TGraphErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vex, const TVectorF &vey);  Constructor with four vectors of floats in input. ;  ;  TGraphErrors (Int_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Int_t Merge ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolar.html:5337,error,errorbars,5337,doc/master/classTGraphPolar.html,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html,1,['error'],['errorbars']
Availability,"constructor. ;  ;  TGraphErrors (const TH1 *h);  TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ;  ;  TGraphErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vex, const TVectorD &vey);  Constructor with four vectors of doubles in input. ;  ;  TGraphErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vex, const TVectorF &vey);  Constructor with four vectors of floats in input. ;  ;  TGraphErrors (Int_t n);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Double_t *x, const Double_t *y, const Double_t *ex=nullptr, const Double_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  TGraphErrors (Int_t n, const Float_t *x, const Float_t *y, const Float_t *ex=nullptr, const Float_t *ey=nullptr);  TGraphErrors normal constructor. ;  ;  ~TGraphErrors () override;  TGraphErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.);  Add a point with errorbars to the graph. ;  ; void Apply (TF1 *f) override;  Apply function to all the data points \( y = f(x,y) \). ;  ; virtual void ApplyX (TF1 *f);  Apply function to all the data points \( x = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; TClass * IsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:3477,error,errorbars,3477,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['errorbars']
Availability,"constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); constructor with four vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); constructor with four vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TGraphErrors& gr); TGraphErrors copy constructor. TGraphErrors& operator=(const TGraphErrors& gr); TGraphErrors assignment operator. TGraphErrors(const TH1* h); TGraphErrors constructor importing its parameters from the TH1 object passed as argument. TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); GraphErrors constructor reading input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:16126,error,errors,16126,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,3,['error'],['errors']
Availability,"constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); constructor with four vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); constructor with four vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TGraphErrors& gr); TGraphErrors copy constructor. TGraphErrors& operator=(const TGraphErrors& gr); TGraphErrors assignment operator. TGraphErrors(const TH1* h); TGraphErrors constructor importing its parameters from the TH1 object passed as argument. TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); GraphErrors constructor reading input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. ~TGraphErrors(); TGraphErrors default destructor. void A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:15658,error,errors,15658,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,2,['error'],['errors']
Availability,"constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); constructor with four vectors of floats in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); constructor with four vectors of doubles in input; A grapherrors is built with the X coordinates taken from vx and Y coord from vy; and the errors from vectors vex and vey.; The number of points in the graph is the minimum of number of points; in vx and vy. TGraphErrors(const TGraphErrors& gr); TGraphErrors copy constructor. TGraphErrors& operator=(const TGraphErrors& gr); TGraphErrors assignment operator. TGraphErrors(const TH1* h); TGraphErrors constructor importing its parameters from the TH1 object passed as argument. TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); GraphErrors constructor reading input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY.; For files separated by a specific delimiter different f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphErrors.html:15820,error,errors,15820,root/html532/TGraphErrors.html,https://root.cern,https://root.cern/root/html532/TGraphErrors.html,1,['error'],['errors']
Availability,"contain the case-insensitive first 4 letters of the corresponding class name (e.g. “tubs” will match TGeoTubeSeg, “bbox” will match TGeoBBox); nmed: the medium number. This will create a special volume that will not be directly used in the geometry, but whenever positioned will require a list of actual parameters for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with TGeoManager::Node() method (see ‘Creating and Positioning Volumes’).; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by “fitting mother” parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume TGeoVolumeMulti will be created. Whenever positioned inside a mother volume, this will create a normal TGeoVolume object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations.; 18.4 Geometry Creation; A given geometry can be built in various ways, but one has to follow some mandatory steps. Even if we might use some terms that will be explained later, here are few general rules:. Volumes need media and shapes in order to be created.; Both containers and contained volumes must be created before linking them together, and the relative transformation matrix must be provided.; Any volume have to be positioned somewhere otherwise it will not be considered as part of the geometry.; Visibility or tracking properties of volumes can be provided both at build time or after geo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:927516,error,error,927516,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1C.html:2371,error,errors,2371,doc/master/classTH1C.html,https://root.cern,https://root.cern/doc/master/classTH1C.html,2,['error'],['errors']
Availability,"content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1I & operator= (const TH1I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1I.html:2311,error,errors,2311,doc/master/classTH1I.html,https://root.cern,https://root.cern/doc/master/classTH1I.html,2,['error'],['errors']
Availability,"content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1L & operator= (const TH1L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1L.html:2310,error,errors,2310,doc/master/classTH1L.html,https://root.cern,https://root.cern/doc/master/classTH1L.html,2,['error'],['errors']
Availability,"content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1S & operator= (const TH1S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:2306,error,errors,2306,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,2,['error'],['errors']
Availability,"contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of this curve. Double_t chiSquare(const RooHist& hist, int nFitParam) const; Calculate the chi^2/NDOF of this curve with respect to the histogram; 'hist' accounting nFitParam floating parameters in case the curve; was the result of a fit. Double_t average(Double_t lo, Double_t hi) const; Return average curve value in [xFirst,xLast] by integrating curve between points; and dividing by xLast-xFirst. Int_t findPoint(Double_t value, Double_t tolerance = 1.0E-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1.0E-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:23890,error,error,23890,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,2,['error'],['error']
Availability,"context *ctx,; 2555 const char *func,; 2556 unsigned line,; 2557 const char *fmt,; 2558 ...) PRINTF_ARGS(5, 6);; 2559 ; 2560 ; 2561#if !defined(NO_THREAD_NAME); 2562#if defined(_WIN32) && defined(_MSC_VER); 2563/* Set the thread name for debugging purposes in Visual Studio; 2564 * http://msdn.microsoft.com/en-us/library/xcb2z8hs.aspx; 2565 */; 2566#pragma pack(push, 8); 2567typedef struct tagTHREADNAME_INFO {; 2568 DWORD dwType; /* Must be 0x1000. */; 2569 LPCSTR szName; /* Pointer to name (in user addr space). */; 2570 DWORD dwThreadID; /* Thread ID (-1=caller thread). */; 2571 DWORD dwFlags; /* Reserved for future use, must be zero. */; 2572} THREADNAME_INFO;; 2573#pragma pack(pop); 2574 ; 2575#elif defined(__linux__); 2576 ; 2577#include <sys/prctl.h>; 2578#include <sys/sendfile.h>; 2579#if defined(ALTERNATIVE_QUEUE); 2580#include <sys/eventfd.h>; 2581#endif /* ALTERNATIVE_QUEUE */; 2582 ; 2583 ; 2584#if defined(ALTERNATIVE_QUEUE); 2585 ; 2586static void *; 2587event_create(void); 2588{; 2589 int evhdl = eventfd(0, EFD_CLOEXEC);; 2590 int *ret;; 2591 ; 2592 if (evhdl == -1) {; 2593 /* Linux uses -1 on error, Windows NULL. */; 2594 /* However, Linux does not return 0 on success either. */; 2595 return 0;; 2596 }; 2597 ; 2598 ret = (int *)mg_malloc(sizeof(int));; 2599 if (ret) {; 2600 *ret = evhdl;; 2601 } else {; 2602 (void)close(evhdl);; 2603 }; 2604 ; 2605 return (void *)ret;; 2606}; 2607 ; 2608 ; 2609static int; 2610event_wait(void *eventhdl); 2611{; 2612 uint64_t u;; 2613 int evhdl, s;; 2614 ; 2615 if (!eventhdl) {; 2616 /* error */; 2617 return 0;; 2618 }; 2619 evhdl = *(int *)eventhdl;; 2620 ; 2621 s = (int)read(evhdl, &u, sizeof(u));; 2622 if (s != sizeof(u)) {; 2623 /* error */; 2624 return 0;; 2625 }; 2626 (void)u; /* the value is not required */; 2627 return 1;; 2628}; 2629 ; 2630 ; 2631static int; 2632event_signal(void *eventhdl); 2633{; 2634 uint64_t u = 1;; 2635 int evhdl, s;; 2636 ; 2637 if (!eventhdl) {; 2638 /* error */; 2639 return 0;; 2640 }; 2641",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:81287,error,error,81287,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"context *ctx,; 2556 const char *func,; 2557 unsigned line,; 2558 const char *fmt,; 2559 ...) PRINTF_ARGS(5, 6);; 2560 ; 2561 ; 2562#if !defined(NO_THREAD_NAME); 2563#if defined(_WIN32) && defined(_MSC_VER); 2564/* Set the thread name for debugging purposes in Visual Studio; 2565 * http://msdn.microsoft.com/en-us/library/xcb2z8hs.aspx; 2566 */; 2567#pragma pack(push, 8); 2568typedef struct tagTHREADNAME_INFO {; 2569 DWORD dwType; /* Must be 0x1000. */; 2570 LPCSTR szName; /* Pointer to name (in user addr space). */; 2571 DWORD dwThreadID; /* Thread ID (-1=caller thread). */; 2572 DWORD dwFlags; /* Reserved for future use, must be zero. */; 2573} THREADNAME_INFO;; 2574#pragma pack(pop); 2575 ; 2576#elif defined(__linux__); 2577 ; 2578#include <sys/prctl.h>; 2579#include <sys/sendfile.h>; 2580#if defined(ALTERNATIVE_QUEUE); 2581#include <sys/eventfd.h>; 2582#endif /* ALTERNATIVE_QUEUE */; 2583 ; 2584 ; 2585#if defined(ALTERNATIVE_QUEUE); 2586 ; 2587static void *; 2588event_create(void); 2589{; 2590 int evhdl = eventfd(0, EFD_CLOEXEC);; 2591 int *ret;; 2592 ; 2593 if (evhdl == -1) {; 2594 /* Linux uses -1 on error, Windows NULL. */; 2595 /* However, Linux does not return 0 on success either. */; 2596 return 0;; 2597 }; 2598 ; 2599 ret = (int *)mg_malloc(sizeof(int));; 2600 if (ret) {; 2601 *ret = evhdl;; 2602 } else {; 2603 (void)close(evhdl);; 2604 }; 2605 ; 2606 return (void *)ret;; 2607}; 2608 ; 2609 ; 2610static int; 2611event_wait(void *eventhdl); 2612{; 2613 uint64_t u;; 2614 int evhdl, s;; 2615 ; 2616 if (!eventhdl) {; 2617 /* error */; 2618 return 0;; 2619 }; 2620 evhdl = *(int *)eventhdl;; 2621 ; 2622 s = (int)read(evhdl, &u, sizeof(u));; 2623 if (s != sizeof(u)) {; 2624 /* error */; 2625 return 0;; 2626 }; 2627 (void)u; /* the value is not required */; 2628 return 1;; 2629}; 2630 ; 2631 ; 2632static int; 2633event_signal(void *eventhdl); 2634{; 2635 uint64_t u = 1;; 2636 int evhdl, s;; 2637 ; 2638 if (!eventhdl) {; 2639 /* error */; 2640 return 0;; 2641 }; 2642",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:81319,error,error,81319,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,contribution to the of derivative dx_k/dA_ij ; Definition at line 205 of file TUnfold.h. ◆ fDXDtauSquared. TMatrixDSparse* TUnfold::fDXDtauSquared. private . derivative of the result wrt tau squared ; Definition at line 207 of file TUnfold.h. ◆ fDXDY. TMatrixDSparse* TUnfold::fDXDY. private . derivative of the result wrt dx/dy ; Definition at line 209 of file TUnfold.h. ◆ fE. TMatrixDSparse* TUnfold::fE. private . matrix E ; Definition at line 213 of file TUnfold.h. ◆ fEinv. TMatrixDSparse* TUnfold::fEinv. private . matrix E^(-1) ; Definition at line 211 of file TUnfold.h. ◆ fEpsMatrix. Double_t TUnfold::fEpsMatrix. private . machine accuracy used to determine matrix rank after eigenvalue analysis ; Definition at line 181 of file TUnfold.h. ◆ fHistToX. TArrayI TUnfold::fHistToX. protected . mapping of histogram bins to matrix indices ; Definition at line 170 of file TUnfold.h. ◆ fIgnoredBins. Int_t TUnfold::fIgnoredBins. private . number of input bins which are dropped because they have error=nullptr ; Definition at line 179 of file TUnfold.h. ◆ fL. TMatrixDSparse* TUnfold::fL. protected . regularisation conditions L ; Definition at line 156 of file TUnfold.h. ◆ fLXsquared. Double_t TUnfold::fLXsquared. private . chi**2 contribution from (x-s*x0)TLTL(x-s*x0) ; Definition at line 195 of file TUnfold.h. ◆ fNdf. Int_t TUnfold::fNdf. private . number of degrees of freedom ; Definition at line 201 of file TUnfold.h. ◆ fRegMode. ERegMode TUnfold::fRegMode. protected . type of regularisation ; Definition at line 176 of file TUnfold.h. ◆ fRhoAvg. Double_t TUnfold::fRhoAvg. private . average global correlation coefficient ; Definition at line 199 of file TUnfold.h. ◆ fRhoMax. Double_t TUnfold::fRhoMax. private . maximum global correlation coefficient ; Definition at line 197 of file TUnfold.h. ◆ fSumOverY. TArrayD TUnfold::fSumOverY. protected . truth vector calculated from the non-normalized response matrix ; Definition at line 172 of file TUnfold.h. ◆ fTauSquared. Double_t ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:60961,error,error,60961,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['error'],['error']
Availability,"convince yourself that the; old CERNLIB method is wrong is that it implies that the function defined as the; difference between a and b is multi-valued at x -- besides being ugly, this; would invalidate Kolmogorov's theorem). The solution is to just add while-loops into the equality-case handling to; perform the tally:. } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. Double_t Voigt(Double_t x, Double_t sigma, Double_t lg, Int_t R = 4); Computation of Voigt function (normalised).; Voigt is a convolution of; gauss(xx) = 1/(sqrt(2*pi)*sigma) * exp(xx*xx/(2*sigma*sigma); and; lorentz(xx) = (1/pi) * (lg/2) / (xx*xx + lg*lg/4); functions. The Voigt function is known to be the real part of Faddeeva function also; called complex error function [2]. The algoritm was developed by J. Humlicek [1].; This code is based on fortran code presented by R. J. Wells [2].; Translated and adapted by Miha D. Puc. To calculate the Faddeeva function with relative error less than 10^(-r).; r can be set by the the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its; Derivatives"" JQSRT 62 (1999), pp 29-48.; http://www-atm.physics.ox.ac.uk/user/wells/voigt.html. Bool_t RootsCubic(const Double_t* coef, Double_t& a, Double_t& b, Double_t& c); Calculates roots of polynomial of 3rd order a*x^3 + b*x^2 + c*x + d, where; a == coef[3], b == coef[2], c == coef[1], d == coef[0]; coef[3] must be different from 0; If the boolean returned by the method is false:; ==> there are 3 real roots a,b,c; If the boolean returned by the method is true:; ==> there is one real root a and 2 complex conjugates roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:20871,error,error,20871,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,2,['error'],['error']
Availability,"convince yourself that the; old CERNLIB method is wrong is that it implies that the function defined as the; difference between a and b is multi-valued at x -- besides being ugly, this; would invalidate Kolmogorov's theorem). The solution is to just add while-loops into the equality-case handling to; perform the tally:. } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. Double_t Voigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4); Computation of Voigt function (normalised).; Voigt is a convolution of; gauss(xx) = 1/(sqrt(2*pi)*sigma) * exp(xx*xx/(2*sigma*sigma); and; lorentz(xx) = (1/pi) * (lg/2) / (xx*xx + lg*lg/4); functions. The Voigt function is known to be the real part of Faddeeva function also; called complex error function [2]. The algoritm was developed by J. Humlicek [1].; This code is based on fortran code presented by R. J. Wells [2].; Translated and adapted by Miha D. Puc. To calculate the Faddeeva function with relative error less than 10^(-r).; r can be set by the the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its; Derivatives"" JQSRT 62 (1999), pp 29-48.; http://www-atm.physics.ox.ac.uk/user/wells/voigt.html. Bool_t RootsCubic(const Double_t* coef, Double_t& a, Double_t& b, Double_t& c); Calculates roots of polynomial of 3rd order a*x^3 + b*x^2 + c*x + d, where; a == coef[3], b == coef[2], c == coef[1], d == coef[0]; coef[3] must be different from 0; If the boolean returned by the method is false:; ==> there are 3 real roots a,b,c; If the boolean returned by the method is true:; ==> there is one real root a and 2 complex conjugates roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMath.html:20971,error,error,20971,root/html532/TMath.html,https://root.cern,https://root.cern/root/html532/TMath.html,2,['error'],['error']
Availability,"convince yourself that the; old CERNLIB method is wrong is that it implies that the function defined as the; difference between a and b is multi-valued at x -- besides being ugly, this; would invalidate Kolmogorov's theorem). The solution is to just add while-loops into the equality-case handling to; perform the tally:. } else {; double x = a[ia-1];; while(a[ia-1] == x && ia <= na) {; rdiff -= sa;; ia++;; }; while(b[ib-1] == x && ib <= nb) {; rdiff += sb;; ib++;; }; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. Double_t Voigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4); Computation of Voigt function (normalised).; Voigt is a convolution of; gauss(xx) = 1/(sqrt(2*pi)*sigma) * exp(xx*xx/(2*sigma*sigma); and; lorentz(xx) = (1/pi) * (lg/2) / (xx*xx + lg*lg/4); functions. The Voigt function is known to be the real part of Faddeeva function also; called complex error function [2]. The algoritm was developed by J. Humlicek [1].; This code is based on fortran code presented by R. J. Wells [2].; Translated and adapted by Miha D. Puc. To calculate the Faddeeva function with relative error less than 10^(-r).; r can be set by the the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its; Derivatives"" JQSRT 62 (1999), pp 29-48.; http://www-atm.physics.ox.ac.uk/user/wells/voigt.html. Bool_t RootsCubic(const Double_t[4] coef, Double_t& a, Double_t& b, Double_t& c); Calculates roots of polynomial of 3rd order a*x^3 + b*x^2 + c*x + d, where; a == coef[3], b == coef[2], c == coef[1], d == coef[0]; coef[3] must be different from 0; If the boolean returned by the method is false:; ==> there are 3 real roots a,b,c; If the boolean returned by the method is true:; ==> there is one real root a and 2 complex conjugates r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMath.html:15679,error,error,15679,root/html602/TMath.html,https://root.cern,https://root.cern/root/html602/TMath.html,2,['error'],['error']
Availability,"convolution: convolution in cyclical angular observables theta ;  ; file  rf210_angularconv.py;   Convolution in cyclical angular observables theta, and construction of p.d.f in terms of transformed angular coordinates, e.g. ;  ; file  rf211_paramconv.C;   Addition and convolution: working with a pdf with a convolution operator in terms of a parameter ;  ; file  rf211_paramconv.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #211 Working a with a p.d.f. ;  ; file  rf212_plottingInRanges_blinding.C;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf212_plottingInRanges_blinding.py;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpere",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:6456,avail,available,6456,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['avail'],['available']
Availability,"coordinates are required as input. It returns the bin number in the; histogram. Int_t AddBin(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Add a new bin to the histogram. The bin shape is a rectangle.; It returns the bin number of the bin in the histogram. void Add(const TH1* h1, Double_t c1); Performs the operation: this = this + c1*h1. void Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. void Add(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); Replace contents of this histogram by the addition of h1 and h2. void AddBinToPartition(TH2PolyBin* bin); Adds the input bin into the partition cell matrix. This method is called; in AddBin() and ChangePartition(). void ChangePartition(Int_t n, Int_t m); Changes the number of partition cells in the histogram.; Deletes the old partition and constructs a new one. void ClearBinContents(); Clears the contents of all bins in the histogram. void Reset(Option_t* option); Reset this histogram: contents, errors, etc. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Int_t FindBin(Double_t x, Double_t y, Double_t z = 0); Returns the bin number of the bin at the given coordinate. -1 to -9 are; the overflow and underflow bins. overflow bin -5 is the unbinned areas in; the histogram (also called ""the sea""). The third parameter can be left; blank.; The overflow/underflow bins are:. -1 | -2 | -3. -4 | -5 | -6. -7 | -8 | -9. where -5 means is the ""sea"" bin (i.e. unbinned areas). Int_t Fill(Double_t x, Double_t y); Increment the bin containing (x,y) by 1.; Uses the partitioning algorithm. Int_t Fill(Double_t x, Double_t y, Double_t w); Increment the bin containing (x,y) by w.; Uses the partitioning algorithm. Int_t Fill(const char* name, Double_t w); Increment the bin named ""name"" by w. void FillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1); Fills a 2-D histogram with an array of values and weights. ntimes: number of e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2Poly.html:32706,error,errors,32706,root/html530/TH2Poly.html,https://root.cern,https://root.cern/root/html530/TH2Poly.html,2,['error'],['errors']
Availability,"coordinates when available (default is true) ;  ; bool fErrors1;  use all errors equal to 1, i.e. fit without errors (default is false) ;  ; bool fExpErrors;  use expected errors from the function and not from the data ;  ; bool fIntegral;  use integral of bin content instead of bin center (default is false) ;  ; bool fNormBinVolume;  normalize data by a normalized the bin volume (bin volume divided by a reference value) ;  ; bool fUseEmpty;  use empty bins (default is false) with a fixed error of 1 ;  ; bool fUseRange;  use the function range when creating the fit data (default is false) ;  . #include <Fit/DataOptions.h>; Constructor & Destructor Documentation. ◆ DataOptions(). ROOT::Fit::DataOptions::DataOptions ; (; ). inline . Default constructor: use the default options. ; Definition at line 34 of file DataOptions.h. Member Data Documentation. ◆ fAsymErrors. bool ROOT::Fit::DataOptions::fAsymErrors. use asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true) ; Definition at line 55 of file DataOptions.h. ◆ fBinVolume. bool ROOT::Fit::DataOptions::fBinVolume. normalize data by the bin volume (it is used in the Poisson likelihood fits) ; Definition at line 48 of file DataOptions.h. ◆ fCoordErrors. bool ROOT::Fit::DataOptions::fCoordErrors. use errors on the x coordinates when available (default is true) ; Definition at line 54 of file DataOptions.h. ◆ fErrors1. bool ROOT::Fit::DataOptions::fErrors1. use all errors equal to 1, i.e. fit without errors (default is false) ; Definition at line 52 of file DataOptions.h. ◆ fExpErrors. bool ROOT::Fit::DataOptions::fExpErrors. use expected errors from the function and not from the data ; Definition at line 53 of file DataOptions.h. ◆ fIntegral. bool ROOT::Fit::DataOptions::fIntegral. use integral of bin content instead of bin center (default is false) ; Definition at line 47 of file DataOptions.h. ◆ fNormBinVolume. bool ROOT::Fit::DataOptions::fNormBinVolume. no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Fit_1_1DataOptions.html:1792,error,errors,1792,doc/master/structROOT_1_1Fit_1_1DataOptions.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Fit_1_1DataOptions.html,2,"['avail', 'error']","['available', 'errors']"
Availability,"coordinates,; *-* according to whether fISW[2] is zero or one.; *. void mndxdi(Double_t pint, Int_t ipar, Double_t& dxdi); -*-*Calculates the transformation factor between ext/internal values; *-* =====================================================================; *-* calculates the transformation factor between external and; *-* internal parameter values. this factor is one for; *-* parameters which are not limited. called from MNEMAT.; *. void mneig(Double_t* a, Int_t ndima, Int_t n, Int_t mits, Double_t* work, Double_t precis, Int_t& ifault); Compute matrix eigen values*-; *-* ===========================; System generated locals. void mnemat(Double_t* emat, Int_t ndim); Calculates the external error matrix from the internal matrix. Note that if the matrix is declared like Double_t matrix[5][5]; in the calling program, one has to call mnemat with, eg; gMinuit->mnemat(&matrix[0][0],5);. void mnerrs(Int_t number, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& gcc); Utility routine to get MINOS errors*-; *-* ===================================; *-* Called by user.; *-* NUMBER is the parameter number; *-* values returned by MNERRS:; *-* EPLUS, EMINUS are MINOS errors of parameter NUMBER,; *-* EPARAB is 'parabolic' error (from error matrix).; *-* (Errors not calculated are set = 0); *-* GCC is global correlation coefficient from error matrix; *. void mneval(Double_t anext, Double_t& fnext, Int_t& ierev); Evaluates the function being analyzed by MNCROS*-; *-* ===============================================; *-* Evaluates the function being analyzed by MNCROS, which is; *-* generally the minimum of FCN with respect to all remaining; *-* variable parameters. The class data members contains the; *-* data necessary to know the values of U(KE1CR) and U(KE2CR); *-* to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR; *-* and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR; *. void mnexcm(const char* comand, Double_t* plist, Int_t llist, Int_t& ierflg); In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:40123,error,errors,40123,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['errors']
Availability,"copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooNumConvolution*_conv! Actual convolution calculation; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvPdf.html:44279,error,errors,44279,root/html602/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html602/RooNumConvPdf.html,2,['error'],['errors']
Availability,"copied into the new dataset for each generated event and also used to set our PDF parameters.; The user can specify a number of events to generate that will override the default. The result is a; copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; are not in the prototype will be added as new columns to the generated dataset. RooDataSet * generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not specified. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. The following named arguments are supported. Name(const char* name) -- Name of the output dataset; Verbose(Bool_t flag) -- Print informational messages during event generation; NumEvent(int nevt) -- Generate specified number of events. AutoBinned(Bool_t flag) -- Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc); NB: Datasets that are generated in binned mode are returned as weighted unbinned datasets. GenBinned(const char* tag) -- Use binned generation for all component pdfs that have 'setAttribute(tag)' set; AllBinned() -- As above, but for all components. Note that the notion of components is only meaningful for simultaneous pdf; as binned generation is always executed at the top-level node for a regular; pdf, so for those it only mattes that the top-level node is tagged. Binned generation cannot be used when prototype data is supplied; Extended",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:61476,error,error,61476,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,4,['error'],['error']
Availability,"copied into the new dataset for each generated event and also used to set our PDF parameters.; The user can specify a number of events to generate that will override the default. The result is a; copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; are not in the prototype will be added as new columns to the generated dataset. RooDataSet * generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not specified. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. The following named arguments are supported. Name(const char* name) -- Name of the output dataset; Verbose(Bool_t flag) -- Print informational messages during event generation; NumEvent(int nevt) -- Generate specified number of events; Extended() -- The actual number of events generated will be sampled from a Poisson distribution; with mu=nevt. For use with extended maximum likelihood fits; ProtoData(const RooDataSet& data, -- Use specified dataset as prototype dataset. If randOrder is set to true; Bool_t randOrder, the order of the events in the dataset will be read in a random order; Bool_t resample) if the requested number of events to be generated does not match the; number of events in the prototype dataset. If resample is also set to; true, the prototype dataset will be resampled rather than be strictly; reshuffled. In this mode events of the protodata may be used more than; once. If ProtoData() is used, the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:58771,error,error,58771,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['error'],['error']
Availability,"copy sonstructor of TXMLSetup class. ~TXMLSetup(); TXMLSetup class destructor. TString GetSetupAsString(); return setup values as string. Bool_t IsValidXmlSetup(const char* setupstr); checks if string is valid setup. Bool_t ReadSetupFromStr(const char* setupstr); get values from string. void PrintSetup(); show setup values. const char* XmlConvertClassName(const char* name); convert class name to exclude any special symbols like ':', '<' '>' ',' and spaces. const char* XmlClassNameSpaceRef(const TClass* cl); produce string which used as reference in class namespace definition. const char* XmlGetElementName(const TStreamerElement* el); return converted name for TStreamerElement. const char* GetElItemName(TStreamerElement* el); get item name for given element. TClass* XmlDefineClass(const char* xmlClassName); define class for the converted class name, where; special symbols were replaced by '_'. Int_t AtoI(const char* sbuf, Int_t def = 0, const char* errinfo = 0); converts string to integer.; if error, returns default value. EXMLLayout GetXmlLayout() const; { return fXmlLayout; }. Bool_t IsStoreStreamerInfos() const; { return fStoreStreamerInfos; }. Bool_t IsUseDtd() const; { return fUseDtd; }. Bool_t IsUseNamespaces() const; { return fUseNamespaces; }. void SetXmlLayout(TXMLSetup::EXMLLayout layout); { fXmlLayout = layout; }. void SetStoreStreamerInfos(Bool_t iConvert = kTRUE); { fStoreStreamerInfos = iConvert; }. void SetUsedDtd(Bool_t use = kTRUE); { fUseDtd = use; }. void SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); { fUseNamespaces = iUseNamespaces; }. Int_t GetNextRefCounter(); { return fRefCounter++; }. » Author: Sergey Linev 10.05.2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/xml:$Id: TXMLSetup.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-27 10:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLSetup.html:3877,error,error,3877,root/html528/TXMLSetup.html,https://root.cern,https://root.cern/root/html528/TXMLSetup.html,1,['error'],['error']
Availability,"copy sonstructor of TXMLSetup class. ~TXMLSetup(); TXMLSetup class destructor. TString GetSetupAsString(); return setup values as string. Bool_t IsValidXmlSetup(const char* setupstr); checks if string is valid setup. Bool_t ReadSetupFromStr(const char* setupstr); get values from string. void PrintSetup(); show setup values. const char* XmlConvertClassName(const char* name); convert class name to exclude any special symbols like ':', '<' '>' ',' and spaces. const char* XmlClassNameSpaceRef(const TClass* cl); produce string which used as reference in class namespace definition. const char* XmlGetElementName(const TStreamerElement* el); return converted name for TStreamerElement. const char* GetElItemName(TStreamerElement* el); get item name for given element. TClass* XmlDefineClass(const char* xmlClassName); define class for the converted class name, where; special symbols were replaced by '_'. Int_t AtoI(const char* sbuf, Int_t def = 0, const char* errinfo = 0); converts string to integer.; if error, returns default value. EXMLLayout GetXmlLayout() const; { return fXmlLayout; }. Bool_t IsStoreStreamerInfos() const; { return fStoreStreamerInfos; }. Bool_t IsUseDtd() const; { return fUseDtd; }. Bool_t IsUseNamespaces() const; { return fUseNamespaces; }. void SetXmlLayout(TXMLSetup::EXMLLayout layout); { fXmlLayout = layout; }. void SetStoreStreamerInfos(Bool_t iConvert = kTRUE); { fStoreStreamerInfos = iConvert; }. void SetUsedDtd(Bool_t use = kTRUE); { fUseDtd = use; }. void SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); { fUseNamespaces = iUseNamespaces; }. Int_t GetNextRefCounter(); { return fRefCounter++; }. » Author: Sergey Linev 10.05.2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/xml:$Id: TXMLSetup.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXMLSetup.html:3877,error,error,3877,root/html530/TXMLSetup.html,https://root.cern,https://root.cern/root/html530/TXMLSetup.html,1,['error'],['error']
Availability,"copy sonstructor of TXMLSetup class. ~TXMLSetup(); TXMLSetup class destructor. TString GetSetupAsString(); return setup values as string. Bool_t IsValidXmlSetup(const char* setupstr); checks if string is valid setup. Bool_t ReadSetupFromStr(const char* setupstr); get values from string. void PrintSetup(); show setup values. const char* XmlConvertClassName(const char* name); convert class name to exclude any special symbols like ':', '<' '>' ',' and spaces. const char* XmlClassNameSpaceRef(const TClass* cl); produce string which used as reference in class namespace definition. const char* XmlGetElementName(const TStreamerElement* el); return converted name for TStreamerElement. const char* GetElItemName(TStreamerElement* el); get item name for given element. TClass* XmlDefineClass(const char* xmlClassName); define class for the converted class name, where; special symbols were replaced by '_'. Int_t AtoI(const char* sbuf, Int_t def = 0, const char* errinfo = 0); converts string to integer.; if error, returns default value. EXMLLayout GetXmlLayout() const; { return fXmlLayout; }. Bool_t IsStoreStreamerInfos() const; { return fStoreStreamerInfos; }. Bool_t IsUseDtd() const; { return fUseDtd; }. Bool_t IsUseNamespaces() const; { return fUseNamespaces; }. void SetXmlLayout(TXMLSetup::EXMLLayout layout); { fXmlLayout = layout; }. void SetStoreStreamerInfos(Bool_t iConvert = kTRUE); { fStoreStreamerInfos = iConvert; }. void SetUsedDtd(Bool_t use = kTRUE); { fUseDtd = use; }. void SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); { fUseNamespaces = iUseNamespaces; }. Int_t GetNextRefCounter(); { return fRefCounter++; }. » Author: Sergey Linev 10.05.2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/xml:$Id: TXMLSetup.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXMLSetup.html:3877,error,error,3877,root/html532/TXMLSetup.html,https://root.cern,https://root.cern/root/html532/TXMLSetup.html,1,['error'],['error']
Availability,"cords; 76 - Leaf count arrays are translated to anonymous collections with generic names (`_collection0`, `_collection1`, etc.).; 77 In order to keep field names and branch names aligned, RNTuple projects the members of these collections and; 78 its collection counter to the input branch names. For instance, the following input leafs:; 79~~~; 80Int_t njets; 81float jet_pt[njets]; 82float jet_eta[njets]; 83~~~; 84 will be converted to the following RNTuple schema:; 85~~~; 86 _collection0 (untyped collection); 87 |- float jet_pt; 88 |- float jet_eta; 89 std::size_t (RNTupleCardinality) njets (projected from _collection0 without subfields); 90 ROOT::RVec<float> jet_pt (projected from _collection0.jet_pt); 91 ROOT::RVec<float> jet_eta (projected from _collection0.jet_eta); 92~~~; 93 These projections are meta-data only operations and don't involve duplicating the data.; 94 ; 95Current limitations of the importer:; 96 - No support for trees containing TClonesArray collections; 97 - Due to RNTuple currently storing data fully split, ""don't split"" markers are ignored; 98 - Some types are not available in RNTuple. Please refer to the; 99 [RNTuple specification](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md) for; 100 an overview of all types currently supported.; 101*/; 102// clang-format on; 103class RNTupleImporter {; 104public:; 105 /// Used to make adjustments to the fields of the output model.; 106 using FieldModifier_t = std::function<void(RFieldBase &)>;; 107 ; 108 /// Used to report every ~100 MB (compressed), and at the end about the status of the import.; 109 class RProgressCallback {; 110 public:; 111 virtual ~RProgressCallback() = default;; 112 void operator()(std::uint64_t nbytesWritten, std::uint64_t neventsWritten); 113 {; 114 Call(nbytesWritten, neventsWritten);; 115 }; 116 virtual void Call(std::uint64_t nbytesWritten, std::uint64_t neventsWritten) = 0;; 117 virtual void Finish(std::uint64_t nbytesWritten, std::uint64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:4011,avail,available,4011,doc/master/RNTupleImporter_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html,1,['avail'],['available']
Availability,"corr error squared from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLInput: regularisation conditions; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance Chart:. TObject. ←; TUnfold. ←; TUnfoldSys. ←. TUnfoldDensity. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. void DoBackgroundSubtraction(void); performs background subtraction; fY = fYData - fBgrIn; fVyy = fVyyData + fBgrErrUncorr^2 + fBgrErrCorr * fBgrErrCorr#; fVyyinv = fVyy^(-1). Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0., Double_t oneOverZeroError = 0., const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:16842,error,error,16842,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,6,['error'],"['error', 'errors']"
Availability,"corr error squared from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLInput: regularisation conditions; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. void DoBackgroundSubtraction(void); performs background subtraction; fY = fYData - fBgrIn; fVyy = fVyyData + fBgrErrUncorr^2 + fBgrErrCorr * fBgrErrCorr#; fVyyinv = fVyy^(-1). Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0, const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:16086,error,error,16086,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,3,['error'],"['error', 'errors']"
Availability,"corresponding directory. TFile* pFile = new TFile(""total.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyTotalHisto();; copy->SetDirectory(gDirectory);; pFile->Write();. Int_t GetDimension() const; returns the dimension of the current TEfficiency object. Double_t GetEfficiency(Int_t bin) const; returns the efficiency in the given global bin. Note: - The estimated efficiency depends on the chosen statistic option:; for frequentist ones:; ; for bayesian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - GetPassedEvents(bin), SetPassedEvents(bin), GetTotalEvents(bin),; SetTotalEvents(bin). see TH1::GetBin() for conventions on numbering bins. Long64_t Merge(TCollection* list); merges the TEfficiency objects in the given list to the given; TEfficiency object using",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEfficiency.html:56729,error,error,56729,root/html530/TEfficiency.html,https://root.cern,https://root.cern/root/html530/TEfficiency.html,1,['error'],['error']
Availability,"corresponding directory. TFile* pFile = new TFile(""total.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyTotalHisto();; copy->SetDirectory(gDirectory);; pFile->Write();. Int_t GetDimension() const; returns the dimension of the current TEfficiency object. Double_t GetEfficiency(Int_t bin) const; returns the efficiency in the given global bin. Note: - The estimated efficiency depends on the chosen statistic option:; for frequentist ones:; ; for bayesian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - GetPassedEvents(bin), SetPassedEvents(bin), GetTotalEvents(bin),; SetTotalEvents(bin). see TH1::GetBin() for conventions on numbering bins. void Merge(TCollection* list); merges the TEfficiency objects in the given list to the given; TEfficiency object using the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:55886,error,error,55886,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,1,['error'],['error']
Availability,"corresponding directory. TFile* pFile = new TFile(""total.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyTotalHisto();; copy->SetDirectory(gDirectory);; pFile->Write();. Int_t GetDimension() const; returns the dimension of the current TEfficiency object. Double_t GetEfficiency(Int_t bin) const; returns the efficiency in the given global bin. Note: - The estimated efficiency depends on the chosen statistic option:; for frequentist ones:; ; for bayesian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - GetPassedEvents(bin), SetPasse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEfficiency.html:57460,error,error,57460,root/html532/TEfficiency.html,https://root.cern,https://root.cern/root/html532/TEfficiency.html,1,['error'],['error']
Availability,"corresponding directory. TFile* pFile = new TFile(""total.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyTotalHisto();; copy->SetDirectory(gDirectory);; pFile->Write();. Int_t GetDimension() const; returns the dimension of the current TEfficiency object. Double_t GetEfficiency(Int_t bin) const; returns the efficiency in the given global bin. Note: - The estimated efficiency depends on the chosen statistic option:; for frequentist ones:; ; for bayesian ones the expectation value of the resulting posterior; distribution is returned:; ; If the bit kPosteriorMode is set (or the method TEfficiency::UsePosteriorMode() has been called ) the; mode (most probable value) of the posterior is returned:; . - If the denominator is equal to 0, an efficiency of 0 is returned.; - When or the above; formula for the mode is not valid. In these cases values the estimated efficiency is 0 or 1. Double_t GetEfficiencyErrorLow(Int_t bin) const; returns the lower error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Double_t GetEfficiencyErrorUp(Int_t bin) const; returns the upper error on the efficiency in the given global bin. The result depends on the current confidence level fConfLevel and the; chosen statistic option fStatisticOption. See SetStatisticOption(Int_t) for; more details. Note: If the histograms are filled with weights, only bayesian methods and the; normal approximation are supported. Int_t GetGlobalBin(Int_t binx, Int_t biny = 0, Int_t binz = 0) const; returns the global bin number which can be used as argument for the; following functions:. - GetEfficiency(bin), GetEfficiencyErrorLow(bin), GetEfficiencyErrorUp(bin); - SetPassedEvents(bin), SetTotal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEfficiency.html:59914,error,error,59914,root/html534/TEfficiency.html,https://root.cern,https://root.cern/root/html534/TEfficiency.html,3,['error'],['error']
Availability,"cos;; 2071 ug->fShell = apwd->pw_shell;; 2072 UserGroup_t *gr = GetGroupInfo(apwd->pw_gid);; 2073 if (gr) ug->fGroup = gr->fGroup;; 2074 delete gr;; 2075 ; 2076 gUserInfo[uid] = *ug;; 2077 return ug;; 2078 }; 2079 return nullptr;; 2080}; 2081 ; 2082////////////////////////////////////////////////////////////////////////////////; 2083/// Returns all user info in the UserGroup_t structure. If user = 0, returns; 2084/// current user's id info. The returned structure must be deleted by the; 2085/// user. In case of error 0 is returned.; 2086 ; 2087UserGroup_t *TUnixSystem::GetUserInfo(const char *user); 2088{; 2089 return GetUserInfo(GetUid(user));; 2090}; 2091 ; 2092////////////////////////////////////////////////////////////////////////////////; 2093/// Returns all group info in the UserGroup_t structure. The only active; 2094/// fields in the UserGroup_t structure for this call are:; 2095/// fGid and fGroup; 2096/// The returned structure must be deleted by the user. In case of; 2097/// error 0 is returned.; 2098 ; 2099UserGroup_t *TUnixSystem::GetGroupInfo(Int_t gid); 2100{; 2101 struct group *grp = getgrgid(gid);; 2102 if (grp) {; 2103 UserGroup_t *gr = new UserGroup_t;; 2104 gr->fUid = 0;; 2105 gr->fGid = grp->gr_gid;; 2106 gr->fGroup = grp->gr_name;; 2107 return gr;; 2108 }; 2109 return nullptr;; 2110}; 2111 ; 2112////////////////////////////////////////////////////////////////////////////////; 2113/// Returns all group info in the UserGroup_t structure. The only active; 2114/// fields in the UserGroup_t structure for this call are:; 2115/// fGid and fGroup; 2116/// If group = 0, returns current user's group. The returned structure; 2117/// must be deleted by the user. In case of error 0 is returned.; 2118 ; 2119UserGroup_t *TUnixSystem::GetGroupInfo(const char *group); 2120{; 2121 return GetGroupInfo(GetGid(group));; 2122}; 2123 ; 2124//---- environment manipulation ------------------------------------------------; 2125 ; 2126/////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:64761,error,error,64761,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['error'],['error']
Availability,"costhe, Double_t sinthe, Double_t cospsi, Double_t sinpsi, Double_t* tnorm, Double_t* tback); Define view direction (in spherical coordinates). Compute transformation matrix from world coordinates; to normalised coordinates (-1 to +1). Input: S(3) - scale factors; C(3) - centre of scope; COSPHI - longitude COS; SINPHI - longitude SIN; COSTHE - latitude COS (angle between +Z and view direc.); SINTHE - latitude SIN; COSPSI - screen plane rotation angle COS; SINPSI - screen plane rotation angle SIN. void DrawOutlineCube(TList* outline, Double_t* rmin, Double_t* rmax); Draw the outline of a cube while rotating a 3-d object in the pad. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void ExecuteRotateView(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a object is clicked with the locator. If Left button clicked in the object area, while the button is kept down; the cube representing the surrounding frame for the corresponding; new latitude and longitude position is drawn. void FindNormal(Double_t x, Double_t y, Double_t z, Double_t& zn); Find Z component of NORMAL in normalized coordinates. Input: X - X-component of NORMAL; Y - Y-component of NORMAL; Z - Z-component of NORMAL. Output: ZN - Z-component of NORMAL in normalized coordinates. void FindPhiSectors(Int_t iopt, Int_t& kphi, Double_t* aphi, Int_t& iphi1, Int_t& iphi2); Find critical PHI sectors. Input: IOPT - options: 1 - from BACK to FRONT 'BF'; 2 - from FRONT to BACK 'FB'; KPHI - number of phi sectors; APHI(*) - PHI separators (modified internally). Output: IPHI1 - initial sector; IPHI2 - final sector. void FindThetaSectors(Int_t iopt, Double_t phi, Int_t& kth, Double_t* ath, Int_t& ith1, Int_t& ith2); Find critical THETA sectors for given PHI sector. Input: IOPT - options: 1 - from BACK to FRONT 'BF'; 2 - from FRONT to BACK 'FB'; PHI - PHI sector; KTH - number of THETA sectors; ATH(*) - THETA separato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TView3D.html:15650,down,down,15650,root/html530/TView3D.html,https://root.cern,https://root.cern/root/html530/TView3D.html,5,['down'],['down']
Availability,"count); virtual voidTObject::AppendPad(Option_t* option = """"); TObject*RooLinkedList::At(Int_t index) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidRooLinkedList::Clear(Option_t* o = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidRooLinkedList::Delete(Option_t* o = 0); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TObject*RooLinkedList::find(const char* name) const; virtual TObject*RooLinkedList::FindObject(const char* name) const; virtual TObject*RooLinkedList::FindObject(const TObject* obj) const; TObject*RooLinkedList::First() const; RooFIterRooLinkedList::fwdIterator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tRooLinkedList::getHashTableSize() const; virtual const char*TObject::GetIconName() const; virtual const char*RooLinkedList::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tRooLinkedList::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRefCountList.html:1845,error,error,1845,root/html532/RooRefCountList.html,https://root.cern,https://root.cern/root/html532/RooRefCountList.html,1,['error'],['error']
Availability,"count); virtual voidTObject::AppendPad(Option_t* option = """"); TObject*RooLinkedList::At(Int_t index) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidRooLinkedList::Clear(Option_t* o = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidRooLinkedList::Delete(Option_t* o = 0); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TObject*RooLinkedList::find(const char* name) const; virtual TObject*RooLinkedList::FindObject(const char* name) const; virtual TObject*RooLinkedList::FindObject(const TObject* obj) const; TObject*RooLinkedList::First() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tRooLinkedList::getHashTableSize() const; virtual const char*TObject::GetIconName() const; virtual const char*RooLinkedList::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tRooLinkedList::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Int_tRooLinkedList::IndexOf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRefCountList.html:1845,error,error,1845,root/html526/RooRefCountList.html,https://root.cern,https://root.cern/root/html526/RooRefCountList.html,3,['error'],['error']
Availability,"covariance matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 721 of file TMinuitMinimizer.cxx. ◆ DeclFileName(). static const char * TMinuitMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 272 of file TMinuitMinimizer.h. ◆ DoClear(). void TMinuitMinimizer::DoClear ; (; ). protected . reset ; Definition at line 826 of file TMinuitMinimizer.cxx. ◆ DoReleaseFixParameter(). void TMinuitMinimizer::DoReleaseFixParameter ; (; int ; ivar). protected . release a parameter that is fixed when it is redefined ; Definition at line 841 of file TMinuitMinimizer.cxx. ◆ Edm(). double TMinuitMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 654 of file TMinuitMinimizer.cxx. ◆ Errors(). const double * TMinuitMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:15469,error,errors,15469,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,1,['error'],['errors']
Availability,"covariance(Int_t row, Int_t col) const; Return the covariance matrix element addressed with numeric indices. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print fit result to stream 'os'. In Verbose mode, the contant parameters and; the initial and final values of the floating parameters are printed.; Standard mode only the final values of the floating parameters are printed. void fillCorrMatrix(const vector<double>& globalCC, const TMatrixDSym& corrs, const TMatrixDSym& covs); Function called by RooMinimizer. void fillLegacyCorrMatrix() const; Sanity check. void fillCorrMatrix(); Internal utility method to extract the correlation matrix and the; global correlation coefficients from the MINUIT memory buffer and; fill the internal arrays. Bool_t isIdentical(const RooFitResult& other, Double_t tol = 5.0000000000000002E-5, Double_t tolCorr = 1.0E-4, Bool_t verbose = kTRUE) const; Return true if this fit result is identical to other within tolerance 'tol' on fitted values; and tolerance 'tolCor' on correlation coefficients. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed by gMinuit, interpreting; the fit parameters as the given varList of parameters. void setCovarianceMatrix(TMatrixDSym& V); Store externally provided correlation matrix in this RooFitResult ;. TH2* correlationHist(const char* name = ""correlation_matrix"") const; Return TH2D of correlation matrix. const TMatrixDSym& covarianceMatrix() const; Return covariance matrix. TMatrixDSym reducedCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix (Note that Vred _is_ a simple sub-matrix of V,; row/columns are ordered to matched the convention given in input argument 'params'. TMatrixDSym conditionalCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix, which is calculated as; ___ -1; Vred = V22 = V11 - V12 * V22 * V21. Where V11,V1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFitResult.html:15269,toler,tolerance,15269,root/html602/RooFitResult.html,https://root.cern,https://root.cern/root/html602/RooFitResult.html,4,['toler'],['tolerance']
Availability,"covered, the file will be declared Zombie by; the calling function. This function is automatically called when; opening a file. If the file is open in read only mode, the file is not modified.; If open in update mode and the function finds something to recover,; a new directory header is written to the file. When opening the file gain; no message from Recover will be reported.; If keys have been recovered, the file is usable and you can safely; read the corresponding objects.; If the file is not usable (a zombie), you can test for this case; with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {file is unusable); If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; You can test if the file has been recovered with; if (f.TestBit(TFile::kRecovered)) {.. the file has been recovered}. When writing TTrees to a file, it is important to save the Tree header; at regular intervals (see TTree::AutoSave). If a file containing a Tree; is recovered, the last Tree header written to the file will be used.; In this case all the entries in all the branches written before writing; the header are valid entries. One can disable the automatic recovery procedure by setting; TFile.Recover 0; in the system.rootrc file. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. The current directory (gFile) is changed to this file. void SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. void SetComp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:35624,recover,recovered,35624,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['recover'],['recovered']
Availability,"cpp}; 222 TAxis *xaxis = h->GetXaxis(); etc.; 223 Double_t binCenter = xaxis->GetBinCenter(bin), etc.; 224~~~; 225 See class TAxis for a description of all the access functions.; 226 The axis range is always stored internally in double precision.; 227 ; 228\anchor convention; 229### Convention for numbering bins; 230 ; 231 For all histogram types: nbins, xlow, xup; 232~~~ {.cpp}; 233 bin = 0; underflow bin; 234 bin = 1; first bin with low-edge xlow INCLUDED; 235 bin = nbins; last bin with upper-edge xup EXCLUDED; 236 bin = nbins+1; overflow bin; 237~~~; 238 In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; 239 For example, assuming a 3-D histogram with (binx, biny, binz), the function; 240~~~ {.cpp}; 241 Int_t gbin = h->GetBin(binx, biny, binz);; 242~~~; 243 returns a global/linearized gbin number. This global gbin is useful; 244 to access the bin content/error information independently of the dimension.; 245 Note that to access the information other than bin content and errors; 246 one should use the TAxis object directly with e.g.:; 247~~~ {.cpp}; 248 Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; 249~~~; 250 returns the center along z of bin number 27 (not the global bin); 251 in the 3-D histogram h3.; 252 ; 253\anchor alpha; 254### Alphanumeric Bin Labels; 255 ; 256 By default, a histogram axis is drawn with its numeric bin labels.; 257 One can specify alphanumeric labels instead with:; 258 ; 259 - call TAxis::SetBinLabel(bin, label);; 260 This can always be done before or after filling.; 261 When the histogram is drawn, bin labels will be automatically drawn.; 262 See examples labels1.C and labels2.C; 263 - call to a Fill function with one of the arguments being a string, e.g.; 264~~~ {.cpp}; 265 hist1->Fill(somename, weight);; 266 hist2->Fill(x, somename, weight);; 267 hist2->Fill(somename, y, weight);; 268 hist2->Fill(somenamex, somenamey, weight);; 269~~~; 270 See examples hlabels1.C and hlabels2.C; 271 - via TTree::Draw. see for exa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:11042,error,errors,11042,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"cpwindowsize);; 3245}; 3246 ; 3247////////////////////////////////////////////////////////////////////////////////; 3248/// Announce UDP service.; 3249 ; 3250int TUnixSystem::AnnounceUdpService(int port, int backlog); 3251{; 3252 return UnixUdpService(port, backlog);; 3253}; 3254 ; 3255////////////////////////////////////////////////////////////////////////////////; 3256/// Announce unix domain service on path ""kServerPath/<port>""; 3257 ; 3258int TUnixSystem::AnnounceUnixService(int port, int backlog); 3259{; 3260 return UnixUnixService(port, backlog);; 3261}; 3262 ; 3263////////////////////////////////////////////////////////////////////////////////; 3264/// Announce unix domain service on path 'sockpath'; 3265 ; 3266int TUnixSystem::AnnounceUnixService(const char *sockpath, int backlog); 3267{; 3268 return UnixUnixService(sockpath, backlog);; 3269}; 3270 ; 3271////////////////////////////////////////////////////////////////////////////////; 3272/// Accept a connection. In case of an error return -1. In case; 3273/// non-blocking I/O is enabled and no connections are available; 3274/// return -2.; 3275 ; 3276int TUnixSystem::AcceptConnection(int sock); 3277{; 3278 int soc = -1;; 3279 ; 3280 while ((soc = ::accept(sock, nullptr, nullptr)) == -1 && GetErrno() == EINTR); 3281 ResetErrno();; 3282 ; 3283 if (soc == -1) {; 3284 if (GetErrno() == EWOULDBLOCK); 3285 return -2;; 3286 else {; 3287 SysError(""AcceptConnection"", ""accept"");; 3288 return -1;; 3289 }; 3290 }; 3291 ; 3292 return soc;; 3293}; 3294 ; 3295////////////////////////////////////////////////////////////////////////////////; 3296/// Close socket.; 3297 ; 3298void TUnixSystem::CloseConnection(int sock, Bool_t force); 3299{; 3300 if (sock < 0) return;; 3301 ; 3302#if !defined(R__AIX) || defined(_AIX41) || defined(_AIX43); 3303 if (force); 3304 ::shutdown(sock, 2); // will also close connection of parent; 3305#endif; 3306 ; 3307 while (::close(sock) == -1 && GetErrno() == EINTR); 3308 ResetErrno();; 3309}; 3310",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:104773,error,error,104773,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['error'],['error']
Availability,"create a new parameter setting list. void SetParamsSettings(const vector<ROOT::Fit::ParameterSettings>& pars). Set the parameter settings from a vector of parameter settings. void SetFromFitResult(const ROOT::Fit::FitResult& rhs). Set the parameter settings from a fit Result. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizerOptions(const ROOT::Math::MinimizerOptions& minopt). set all the minimizer options using class MinimizerOptions. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros computation to be performed after fitting. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__FitConfig.html:5115,error,errors,5115,root/html602/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__FitConfig.html,2,['error'],['errors']
Availability,"created as needed: Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; TColor::GetColorBrightstatic Int_t GetColorBright(Int_t color)Static function: Returns the bright color number corresponding to n If the TColor object does not exi...Definition TColor.cxx:2087; TColor::GetColorDarkstatic Int_t GetColorDark(Int_t color)Static function: Returns the dark color number corresponding to n If the TColor object does not exist...Definition TColor.cxx:2130. Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and interpret. Factors like colorblindness and converting colors to grayscale for publications can impact accessibility. Furthermore, results should be aesthetically pleasing. The following three color schemes, recommended by M. Petroff in arXiv:2107.02270v2 and available on GitHub under the MIT License, meet these criteria.; These three color schemes are available as color sets with 6, 8, and 10 colors, named kP[6, 8, 10]ColorName. For example, kP6Red represents the red color within the P6 color scheme (P for Petroff or Preferred). The example thstackcolorscheme.C illustrates how to use these color schemes in THStack drawings. It also demonstrates that they are effective in grayscale. Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using TCanvas::SetGrayscale(). Note that in grayscale mode, access via RGB will return grayscale values according to ITU standards (and close to b&w printer gray-scales), while access via HLS returns de-saturated gray-scales. The image below shows the ROOT color wheel in grayscale mode.; {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; cw->GetCanvas()->SetGrayscale();; w->SetCanvas(cw);; w->Draw();; }. Color palettes; It is often very useful to represent a variable with a color map. The concept of ""color palette"" allows to do that. One c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:6581,avail,available,6581,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['avail'],['available']
Availability,"cribing this class . ◆ Class_Name(). static const char * TProofBenchDataSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofBenchDataSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 47 of file TProofBenchDataSet.h. ◆ CopyFiles(). Int_t TProofBenchDataSet::CopyFiles ; (; const char * ; dset, . const char * ; destdir . ). Copy the files of dataset 'dset' to another directory Return 0 on success, -1 on error. ; Definition at line 84 of file TProofBenchDataSet.cxx. ◆ DeclFileName(). static const char * TProofBenchDataSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file TProofBenchDataSet.h. ◆ Handle(). Int_t TProofBenchDataSet::Handle ; (; const char * ; dset, . TObject * ; type . ). protected . Physically remove the dataset 'dset', i.e. ; remove the dataset and the files it describes Return 0 on success, -1 on error ; Definition at line 111 of file TProofBenchDataSet.cxx. ◆ IsA(). TClass * TProofBenchDataSet::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 47 of file TProofBenchDataSet.h. ◆ IsProof(). Bool_t TProofBenchDataSet::IsProof ; (; TProof * ; p). inline . Definition at line 41 of file TProofBenchDataSet.h. ◆ ReleaseCache(). Int_t TProofBenchDataSet::ReleaseCache ; (; const char * ; dset). Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ; Definition at line 46 of file TProofBenchDataSet.cxx. ◆ RemoveFiles(). Int_t TProofBenchDataSet::RemoveFiles ; (; const char * ; dset). Physically remove the dataset 'dset', i.e. ; remove the dataset and the files it describes Return 0 on success, -1 on error ; Definition at line 63 of file TProofBenchDataSet.cxx. ◆ Streamer(). void TProofBenchDataSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchDataSet.html:12179,error,error,12179,doc/master/classTProofBenchDataSet.html,https://root.cern,https://root.cern/doc/master/classTProofBenchDataSet.html,1,['error'],['error']
Availability,"cription(); TPackageDescription(const TPackageDescription&); ~TPackageDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPackageDescription.html:1471,error,error,1471,root/html528/TPackageDescription.html,https://root.cern,https://root.cern/root/html528/TPackageDescription.html,4,['error'],['error']
Availability,"cription(); TSessionDescription(const TSessionDescription&); ~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionDescription.html:1497,error,error,1497,root/html528/TSessionDescription.html,https://root.cern,https://root.cern/root/html528/TSessionDescription.html,4,['error'],['error']
Availability,"criterion. Function Members (Methods); public:. virtual~GiniIndexWithLaplace(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); TMVA::GiniIndexWithLaplaceGiniIndexWithLaplace(); TMVA::GiniIndexWithLaplaceGiniIndexWithLaplace(const TMVA::GiniIndexWithLaplace& g); virtual TClass*IsA() const; TMVA::GiniIndexWithLaplace&operator=(const TMVA::GiniIndexWithLaplace&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2; Where: M is a smaple of whatever N elements (events); that belong to K different classes; c(k) is the number of elements that belong to class k; Laplace's correction to the prob.density c/N --> (c+1)/(N+2); for just Signal and Background classes this then boils down to:; Gini(Sample) = 2(s*b+s+b+1)/(s+b+2)^2. GiniIndexWithLaplace(); construtor for the GiniIndexWithLaplace. { fName=""GiniLaplace""; }. GiniIndexWithLaplace(const TMVA::GiniIndexWithLaplace& g); copy constructor. {}. virtual ~GiniIndexWithLaplace(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: GiniIndexWithLaplace.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__GiniIndexWithLaplace.html:1761,down,down,1761,root/html532/TMVA__GiniIndexWithLaplace.html,https://root.cern,https://root.cern/root/html532/TMVA__GiniIndexWithLaplace.html,1,['down'],['down']
Availability,"cs label. These buttons may appear alone or placed in a group at the window’s top or side. They are most frequently used to quickly access commands, many of which are normally accessed through the tool bar. For example, the picture buttons below can be used to provide different styles of a histogram drawing. Here is the example how to create the first button:; TGPictureButton *fPicture = new TGPictureButton(parent,; gClient->GetPicture(""h1_s.xpm""), 11);; The picture of file h1_s.xpm is used in the button. All .xpm files are located in the directory $ROOTSYS/icons. You can assign a command directly as a parameter of the picture button constructor. The picture of TGPictureButton can be changed by:; fPicture->SetPicture(""h2_s.xpm"");; The advantage of command buttons is that they are always visible, providing a reminder of their existence. They can be inscribed with a meaningful description of what they do by TGToolTip(""Some describing text""). Their activation is much easier and faster than using a two-step menu bar/pull-down sequence. The only disadvantage of the text and picture buttons is that they consume considerable screen space if they are many. Having no more than six command buttons per window or dialog box helps to appropriately balance the application’s effectiveness, its real efficiency, and the operational simplicity.; The classes TGRadioButton and TGCheckButton present the option buttons in ROOT. Like the text buttons, they have text or hot string as a label. Radio buttons are grouped in logical sets of two or more and appear with a text label to the right. The choices are mutually exclusive and only one setting is permitted at one time. They represent visually all alternatives and it is easy to access and compare choices. They facilitate the situations where all alternatives cannot be easily remembered or where displaying the alternatives together helps to understand and select the proper choice. It is very useful to provide a default setting whenever it ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1180207,down,down,1180207,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['down']
Availability,"ct &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TImage * fImage;  image ;  ; TString fPath;  directory of image ;  ; const TGPicture * fPic;  icon picture ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGIcon (const TGIcon &)=delete;  ; TGIcon & operator= (const TGIcon &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGIcon.html:23320,mask,mask,23320,doc/master/classTGIcon.html,https://root.cern,https://root.cern/doc/master/classTGIcon.html,1,['mask'],['mask']
Availability,"ct * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. TProofPlayerRemote(const TProofPlayerRemote& ); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerRemote.html:23056,error,error,23056,root/html604/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html,1,['error'],['error']
Availability,"ct * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. TProofPlayerRemote(const TProofPlayerRemote& ); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerRemote.html:22814,error,error,22814,root/html602/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html602/TProofPlayerRemote.html,1,['error'],['error']
Availability,"ct a TProofPlayer object. ; The player string specifies which player should be created: remote, slave, sm (supermaster) or base. Default is remote. Socket is needed in case a slave player is created. ; Reimplemented in TProofSuperMaster.; Definition at line 10211 of file TProof.cxx. ◆ MarkBad() [1/2]. void TProof::MarkBad ; (; TSlave * ; wrk, . const char * ; reason = 0 . ). private . Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor objects. ; Assume that the work done by this worker was lost and ask packerizer to reassign it. ; Definition at line 4521 of file TProof.cxx. ◆ MarkBad() [2/2]. void TProof::MarkBad ; (; TSocket * ; s, . const char * ; reason = 0 . ). private . Add slave with socket s to the bad slave list and remove if from the active list and from the two monitor objects. ; Definition at line 4682 of file TProof.cxx. ◆ Mgr(). TProofMgr * TProof::Mgr ; (; const char * ; url). static . Get instance of the effective manager for 'url' Return 0 on failure. ; Definition at line 11724 of file TProof.cxx. ◆ ModifyWorkerLists(). Int_t TProof::ModifyWorkerLists ; (; const char * ; ord, . Bool_t ; add, . Bool_t ; save . ). private . Modify the worker active/inactive list by making the worker identified by the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE). ; The string 'ord' can also be a comma-separated list of ordinal numbers the status of which will be modified at once. If needed, the request will be forwarded to the master in direct contact with the worker. The end-master will move the worker from one list to the other active and rebuild the list of unique active workers. Use ord = ""*"" to deactivate all active workers. If save is TRUE the current active list is saved before any modification is done; re-running with ord = ""restore"" restores the saved list Return <0 if something went wrong (-2 if at least one worker was not found) or the number of workers with status change (on master;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:117089,failure,failure,117089,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['failure'],['failure']
Availability,"ct a bin range along an axis, use TAxis::SetRange, eg; h3.GetYaxis()->SetRange(23,56);. TProfile2D * DoProjectProfile2D(const char* name, const char* title, TAxis* projX, TAxis* projY, bool originalRange, bool useUF, bool useOF) const; internal method to project to a 2D Profile; called from TH3::Project3DProfile but re-implemented in case of the TPRofile3D since what is done is different. void PutStats(Double_t* stats); Replace current statistics with the values in array stats. void Reset(Option_t* option = """"); -*-*Reset contents of a Profile3D histogram; *-* =======================================. void RebinAxis(Double_t x, TAxis* axis); Profile histogram is resized along axis such that x is in the axis range.; The new axis limits are recomputed by doubling iteratively; the current axis range until the specified value x is within the limits.; The algorithm makes a copy of the histogram, then loops on all bins; of the old histogram to fill the rebinned histogram.; Takes into account errors (Sumw2) if any.; The bit kCanRebin must be set before invoking this function.; Ex: h->SetBit(TH1::kCanRebin);. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Scale(Double_t c1 = 1, Option_t* option = """"); *-*-*-*-*Multiply this profile2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile3D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax, Int_t nbinsz, Double_t zmin, Double_t zmax); -*-*-*-*-*-*-*Redefine x, y and z axis parameters*-*-*-*-*-*-*-*-*-*-*-*; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins, Int_t nz, const Double_t* zBins); -*-*-*-*-*-*-*Redefine x, y and z axis paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:43049,error,errors,43049,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,1,['error'],['errors']
Availability,"ct access to coord data ptrs ;  ; unsigned int NDim () const;  return coordinate data dimension ;  ; unsigned int NPoints () const;  return number of fit points ;  ; FitData & operator= (const FitData &rhs);  ; DataOptions & Opt ();  ; const DataOptions & Opt () const;  access to options ;  ; const DataRange & Range () const;  access to range ;  ; unsigned int Size () const;  return number of fit points ;  . Private Attributes; std::unique_ptr< ProxyListBox > fList;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Fit::FitData; void InitCoordsVector ();  initializer routines to set the corresponding pointers right The vectors must NOT be resized after this initialization without setting the corresponding pointers in the same moment ( has to be an atomic operation in case of multithreading ). ;  ; template<class Iterator > ; void InitFromRange (Iterator dataItr);  ; void UnWrap ();  ;  Static Protected Member Functions inherited from ROOT::Fit::FitData; static constexpr unsigned VectorPadding (const unsigned);  If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ;  ;  Protected Attributes inherited from ROOT::Fit::FitData; unsigned int fDim;  ; unsigned int fMaxPoints;  ; unsigned int fNPoints;  ; bool fWrapped;  . #include <Fit/SparseData.h>. Inheritance diagram for ROOT::Fit::SparseData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ; max . ). Constructor with a vector. ; Definition at line 193 of file SparseData.cxx. ◆ SparseData() [2/3]. ROOT::Fit::SparseData::SparseData ; (; const unsigned int ; dim, . double ; min[], . double ; max[] . ). Constructor with a dimension and two arrays. ; Definition at line 203 of file SparseData.cxx. ◆ SparseData() [3/3]. ROOT::Fit::Sparse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:6399,avail,available,6399,doc/master/classROOT_1_1Fit_1_1SparseData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html,1,['avail'],['available']
Availability,"ct is a TF2 or TF3). Double_t GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); Compute the gradient (derivative) wrt a parameter ipar; Parameters:; ipar - index of parameter for which the derivative is computed; x - point, where the derivative is computed; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); Compute the gradient wrt parameters; Parameters:; x - point, were the gradient is computed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 9.9999999999999998E-13); use IntegralOneDim or analytical integral. Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t& err); Return Integral of function between a and b using the given parameter values and; relative and absolute tolerance.; The defult integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; If ROOT contains the MathMore library the default integrator is set to be; the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; ROOT::Math::GaussIntegrator is used; See the reference documentation of these classes for more inf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:45186,error,errors,45186,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,1,['error'],['errors']
Availability,"ct is a TF2 or TF3). Double_t GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); Compute the gradient (derivative) wrt a parameter ipar; Parameters:; ipar - index of parameter for which the derivative is computed; x - point, where the derivative is computed; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); Compute the gradient wrt parameters; Parameters:; x - point, were the gradient is computed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 9.9999999999999998E-13); use IntegralOneDim. Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t& err); Return Integral of function between a and b using the given parameter values and; relative and absolute tolerance.; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; If ROOT contains the MathMore library the default integrator is set to be; the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; ROOT::Math::GaussIntegrator is used; See the reference documentation of these classes for more information about the; in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:52425,error,errors,52425,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,1,['error'],['errors']
Availability,"ct is a TF2 or TF3). Double_t GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); Compute the gradient (derivative) wrt a parameter ipar; Parameters:; ipar - index of parameter for which the derivative is computed; x - point, where the derivative is computed; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); Compute the gradient wrt parameters; Parameters:; x - point, were the gradient is computed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 1e-12); Return Integral of function between a and b. based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A, B: End-points of integration interval. Note that B may be less; than A.; - params: Array of function parameters. If 0, use current parameters.; - epsilon: Accuracy parameter (see Accuracy). Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:48850,error,errors,48850,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['error'],['errors']
Availability,"ct on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:46961,error,error,46961,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['error'],['error']
Availability,ct statistical quantities of a profile filled with weights; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag is false the structure is deleted ; Reimplemented from TH1.; Definition at line 1825 of file TProfile.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 36 of file TProfile.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 35 of file TProfile.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile::fBinEntries. protected . number of entries per bin ; Definition at line 39 of file TProfile.h. ◆ fBinSumw2. TArrayD TProfile::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 46 of file TProfile.h. ◆ fErrorMode. EErrorType TProfile::fErrorMode. protected . Option to compute errors. ; Definition at line 40 of file TProfile.h. ◆ fgApproximate. Bool_t TProfile::fgApproximate = kFALSE. staticprotected . bin error approximation option ; Definition at line 48 of file TProfile.h. ◆ fScaling. Bool_t TProfile::fScaling. protected . ! True when TProfile::Scale is called ; Definition at line 43 of file TProfile.h. ◆ fTsumwy. Double_t TProfile::fTsumwy. protected . Total Sum of weight*Y. ; Definition at line 44 of file TProfile.h. ◆ fTsumwy2. Double_t TProfile::fTsumwy2. protected . Total Sum of weight*Y*Y. ; Definition at line 45 of file TProfile.h. ◆ fYmax. Double_t TProfile::fYmax. protected . Upper limit in Y (if set) ; Definition at line 42 of file TProfile.h. ◆ fYmin. Double_t TProfile::fYmin. protected . Lower limit in Y (if set) ; Definition at line 41 of file TProfile.h. Libraries for TProfile:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile.h; hist/hist/src/TProfile.cxx. TProfile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:90722,error,error,90722,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['error']
Availability,"ct to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProtoClass.html:4320,error,error,4320,doc/master/classTProtoClass.html,https://root.cern,https://root.cern/doc/master/classTProtoClass.html,2,['error'],['error']
Availability,"ct to the base specified (2-36).; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of; http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; Usage: the following statement produce the same output, namely ""1111""; std::cout << TString::Itoa(15,2) ;; std::cout << TString::Itoa(0xF,2) ; /// 0x prefix to handle hex; std::cout << TString::Itoa(017,2) ; /// 0 prefix to handle oct; In case of error returns the ""!"" string. TString UItoa(UInt_t value, Int_t base); Converts a UInt_t (twice the range of an Int_t) to a TString with respect; to the base specified (2-36). Thus it is an enhanced version of sprintf; (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString LLtoa(Long64_t value, Int_t base); Converts a Long64_t to a TString with respect to the base specified (2-36).; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of; http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString ULLtoa(ULong64_t value, Int_t base); Converts a ULong64_t (twice the range of an Long64_t) to a TString with; respect to the base specified (2-36). Thus it is an enhanced version of; sprintf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString BaseConvert(const TString& s_in, Int_t base_in, Int_t base_out); Converts string from base base_in to base base_out. Supported bases; are 2-36. At most 64 bit data can be converted. Bool_t EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Return true if string ends with the specified string. TObjArray * Tokenize(const TString& delim) const; This function is used to isolate sequential tokens in a TString.; These tokens are separated in the string by at least one of the; characters in delim. The returned array contains the tokens; as TObjString's. The returned array is the owner of the objects,; and must be deleted by the user.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TString.html:19264,error,error,19264,root/html602/TString.html,https://root.cern,https://root.cern/root/html602/TString.html,2,['error'],['error']
Availability,"ct to the other parameters is followed until it crosses the value FMIN+UP. ; Definition at line 5463 of file TMinuit.cxx. ◆ mnparm(). void TMinuit::mnparm ; (; Int_t ; k1, . TString ; cnamj, . Double_t ; uk, . Double_t ; wk, . Double_t ; a, . Double_t ; b, . Int_t & ; ierflg . ). virtual . Implements one parameter definition. ; Called from MNPARS and user-callable Implements one parameter definition, that is:; K (external) parameter number; CNAMK parameter name; UK starting value; WK starting step size or uncertainty; A, B lower and upper physical parameter limits and sets up (updates) the parameter lists. Output:; IERFLG=0 if no problems; >0 if MNPARM unable to implement definition . Definition at line 5665 of file TMinuit.cxx. ◆ mnpars(). void TMinuit::mnpars ; (; TString & ; crdbuf, . Int_t & ; icondn . ). virtual . Implements one parameter definition. ; Called from MNREAD and user-callable Implements one parameter definition, that is: parses the string CRDBUF and calls MNPARM; output conditions:; ICONDN = 0 all OK; ICONDN = 1 error, attempt to define parameter is ignored; ICONDN = 2 end of parameter definitions . Definition at line 5867 of file TMinuit.cxx. ◆ mnpfit(). void TMinuit::mnpfit ; (; Double_t * ; parx2p, . Double_t * ; pary2p, . Int_t ; npar2p, . Double_t * ; coef2p, . Double_t & ; sdev2p . ). virtual . To fit a parabola to npar2p points. . npar2p no. of points; parx2p(i) x value of point i; pary2p(i) y value of point i; coef2p(1...3) coefficients of the fitted parabola; y=coef2p(1) + coef2p(2)*x + coef2p(3)*x**2; sdev2p= variance; method : chi**2 = min equation solved explicitly . Definition at line 5956 of file TMinuit.cxx. ◆ mnpint(). void TMinuit::mnpint ; (; Double_t & ; pexti, . Int_t ; i1, . Double_t & ; pinti . ). virtual . Calculates the internal parameter value PINTI. ; corresponding to the external value PEXTI for parameter I. ; Definition at line 6017 of file TMinuit.cxx. ◆ mnplot(). void TMinuit::mnplot ; (; Double_t * ; xpt, . Double_t * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:58042,error,error,58042,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['error']
Availability,"ct w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, lines containing 'pattern' in 'file'.; Returns a TObjString with the content or 0, in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. void SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofMgr.html:13228,failure,failure,13228,root/html530/TXProofMgr.html,https://root.cern,https://root.cern/root/html530/TXProofMgr.html,2,['failure'],['failure']
Availability,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorWheel.html:5403,error,error,5403,doc/master/classTColorWheel.html,https://root.cern,https://root.cern/doc/master/classTColorWheel.html,1,['error'],['error']
Availability,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:8506,error,error,8506,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,1,['error'],['error']
Availability,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoArb8.html:12027,error,error,12027,doc/master/classTGeoArb8.html,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html,36,['error'],['error']
Availability,"ct& object) const; Double_tCosTheta() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeltaPhi(const TLorentzVector& v) const; Double_tDeltaR(const TLorentzVector& v) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Double_tDot(const TLorentzVector& q) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; Double_tDrEtaPhi(const TLorentzVector& v) const; virtual voidTObject::Dump() constMENU ; Double_tE() const; Double_tEnergy() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEt() const; Double_tEt(const TVector3& v) const; Double_tEt2() const; Double_tEt2(const TVector3& v) const; Double_tEta() const; TVector2EtaPhiVector(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGamma() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetXYZT(Double_t* carray) const; voidGetXYZT(Float_t* carray) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLorentzVector.html:8613,error,error,8613,root/html528/TLorentzVector.html,https://root.cern,https://root.cern/root/html528/TLorentzVector.html,4,['error'],['error']
Availability,"ct() [2/2]. Int_t TProof::BroadcastObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT, . ESlaves ; list = kActive . ). private . Broadcast an object to all slaves in the specified list. ; Use kind to set the TMEssage what field. Returns the number of slaves the message was sent to. Returns -1 in case of error. ; Definition at line 2555 of file TProof.cxx. ◆ BroadcastRaw() [1/2]. Int_t TProof::BroadcastRaw ; (; const void * ; buffer, . Int_t ; length, . ESlaves ; list = kActive . ). private . Broadcast a raw buffer of specified length to all slaves in the specified list. ; Returns the number of slaves the buffer was sent to. Returns -1 in case of error. ; Definition at line 2594 of file TProof.cxx. ◆ BroadcastRaw() [2/2]. Int_t TProof::BroadcastRaw ; (; const void * ; buffer, . Int_t ; length, . TList * ; slaves . ). private . Broadcast a raw buffer of specified length to all slaves in the specified list. ; Returns the number of slaves the buffer was sent to. Returns -1 in case of error. ; Definition at line 2567 of file TProof.cxx. ◆ Browse(). void TProof::Browse ; (; TBrowser * ; b). overridevirtual . Build the PROOF's structure in the browser. ; Reimplemented from TObject.; Definition at line 10179 of file TProof.cxx. ◆ BuildPackage(). Int_t TProof::BuildPackage ; (; const char * ; package, . EBuildPackageOpt ; opt = kBuildAll, . Int_t ; chkveropt = TPackMgr::kCheckROOT, . TList * ; workers = 0 . ). private . Build specified package. ; Executes the PROOF-INF/BUILD.sh script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait then submit build command to slaves, but don't wait for results. If opt is kCollectBuildResults then collect result from slaves. To be used on the master. If opt = kBuildAll (default) then submit and wait for results (to be used on the client). Returns 0 in case of success and -1 in case of error. ; Definition at line 7990 of file TProof.cxx. ◆ CancelStagingDataSet(). Bool_t TProof::CancelStagingDataSet ; (; const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:71232,error,error,71232,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"ct) const; TStreamerInfoActions::TActionSequence*CreateCopy(); static TStreamerInfoActions::TActionSequence*CreateReadMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); TStreamerInfoActions::TActionSequence*CreateSubSequence(const vector<Int_t>& element_ids, size_t offset); static TStreamerInfoActions::TActionSequence*CreateWriteMemberWiseActions(TVirtualStreamerInfo* info, TVirtualCollectionProxy& proxy); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html:1931,error,error,1931,root/html532/TStreamerInfoActions__TActionSequence.html,https://root.cern,https://root.cern/root/html532/TStreamerInfoActions__TActionSequence.html,4,['error'],['error']
Availability,"ct* obj, Bool_t autoadd = kTRUE); virtual voidTDirectoryFile::Close(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTDirectoryFile::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTDirectoryFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTDirectoryFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual TObject*TDirectoryFile::Get(const char* namecycle); virtual Int_tTDirectoryFile::GetBufferSize() const; const TDatime&TDirectoryFile::GetCreationDate() const; virtual TDirectory*TDirectoryFile::GetDirectory(const char* apath, Bool_t printError = false, const char* funcname = ""GetDirectory""); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace__WSDir.html:3175,error,error,3175,root/html534/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html534/RooWorkspace__WSDir.html,3,['error'],['error']
Availability,"ct*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*CreateHn(const char* name, const char* title, const TH1* h1); static THn*CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THn.html:4175,error,error,4175,root/html534/THn.html,https://root.cern,https://root.cern/root/html534/THn.html,2,['error'],['error']
Availability,"ct*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*CreateHn(const char* name, const char* title, const TH1* h1); static THn*CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char*[] name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char*[] name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long64_tGetBin(const D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THn.html:4175,error,error,4175,root/html602/THn.html,https://root.cern,https://root.cern/root/html602/THn.html,4,['error'],['error']
Availability,"ct*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_tCosTheta() const; TVector3Cross(const TVector3& p) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeltaPhi(const TVector3& v) const; Double_tDeltaR(const TVector3&) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Double_tDot(const TVector3& p) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; Double_tDrEtaPhi(const TVector3& v) const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEta() const; TVector2EtaPhiVector() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetXYZ(Double_t* carray) const; voidGetXYZ(Float_t* carray) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVector3.html:5817,error,error,5817,root/html528/TVector3.html,https://root.cern,https://root.cern/root/html528/TVector3.html,4,['error'],['error']
Availability,"ct. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:29139,error,error,29139,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['error'],['error']
Availability,"ct. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  Ping PROOF slaves. Returns the number of slaves that responded. ;  ; Int_t UploadDataSet (const char *, const char *, const char *=0, Int_t=0, TList *=0);  *** This function is deprecated and will disappear in future versions *** *** It is just a wrapper around TFile::Cp. ;  ; Int_t UploadDataSet (const char *, TList *, const char *=0, Int_t=0, TList *=0);  *** This function is deprecated and will disappear in future versions *** *** It is just a wrapper around TFile::Cp. ;  ; Int_t UploadDataSetFromFile (const char *, const char *, const char *=0, Int_t=0, TList *=0);  *** This function is deprecated and will disappear in future versions *** *** It is just a wrapper around TFile::Cp. ;  ; Int_t UploadPackage (const char *par, EUploadPackageOpt opt=kUntar, TList *workers=0);  Upload a PROOF archive (PAR file). ;  ; Bool_t UseDynamicStartup () const;  ; virtual Int_t VerifyDataSet (const char *dataset, const char *optStr="""");  Verify if all files in the specified dataset are available. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:22297,avail,available,22297,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['avail'],['available']
Availability,"ct. Double_t getPropagatedError(const RooFitResult& fr); Calculate error on self by propagated errors on parameters with correlations as given by fit result; The linearly propagated error is calculated as follows; T; error(x) = F_a(x) * Corr(a,a') F_a'(x). where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2, with f(x) this function and 'da' taken from the fit result; Corr(a,a') = the correlation matrix from the fit result. RooPlot* plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Plot function or p.d.f. on frame with support for visualization of the uncertainty encoded in the given fit result fr.; If params is non-zero, only the subset of the parameters in fr that occur in params is considered for the error evaluation; Argument argList can contain any RooCmdArg named argument that can be applied to a regular plotOn() operation. By default (linMethod=kTRUE) a linearized error is shown which is calculated as follows; T; error(x) = Z* F_a(x) * Corr(a,a') F_a'(x). where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2, with f(x) the plotted curve and 'da' taken from the fit result; Corr(a,a') = the correlation matrix from the fit result; Z = requested signifance 'Z sigma band'. The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be suc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:52995,error,error,52995,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,14,['error'],['error']
Availability,"ct. Use IsZombie() to see if the; file is accessable. For a description of the option and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. void SetReplyHostName(const char* host_name); Set reply host name. const char * GetDcapVersion(); Return dCache version string. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read. Int_t SysWrite(Int_t fd, const void* buf, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheFile.html:23780,error,error,23780,root/html528/TDCacheFile.html,https://root.cern,https://root.cern/root/html528/TDCacheFile.html,3,['error'],['error']
Availability,"ct.fMyInt1 = i; mystruct.fMyInt2 = i*i; mystruct.fMyInt3 = i*i*i; mystruct.fMyCode = ""%03d"" % i # note string assignment. tree.Fill(). f.Write(); f.Close(); The C++ class is defined through the gROOT.ProcessLine() call, and note how the AddressOf() function is used for data members of built-in type. Most of the above is for ROOT version 5.02 and later only. For older releases, and without further support, here is an example as to how you can get hold of a pointer-to-pointer to a ROOT object:; h = TH1F(); addressofobject = array('i',[h.IsA().DynamicCast(h.IsA(),h)]); 19.1.10 Using Your Own Classes; A user’s own classes can be accessed after loading, either directly or indirectly, the library that contains the dictionary. One easy way of obtaining such a library, is by using ACLiC:; $ cat MyClass.C; class MyClass {; public:. MyClass(int value = 0) {; m_value = value;; }. void SetValue(int value) {; m_value = value;; }. int GetValue() {; return m_value;; }. private:; int m_value;; };. $ echo .L MyClass.C+ | root.exe -b; [...]; Info in <TUnixSystem::ACLiC>: creating shared library [..]/./MyClass_C.so; $; Then you can use it, for example, like so:; from ROOT import gSystem. # load library with MyClass dictionary; gSystem.Load('MyClass_C'). # get MyClass from ROOT; from ROOT import MyClass; # use MyClass; m = MyClass(42); print(m.GetValue()); You can also load a macro directly, but if you do not use ACLiC, you will be restricted to use the default constructor of your class, which is otherwise fully functional. For example:; from ROOT import gROOT. # load MyClass definition macro (append '+' to use ACLiC); gROOT.LoadMacro('MyClass.C'). # get MyClass from ROOT; from ROOT import MyClass. # use MyClass; m = MyClass(); m.SetValue(42); print(m.GetValue()); 20 The Tutorials and Tests; This chapter is a guide to the examples that come with the installation of ROOT. They are located in two directories: $ROOTSYS/tutorials and $ROOTSYS/test.; 20.1 $ROOTSYS/tutorials. The tutorials di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1072985,echo,echo,1072985,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['echo'],['echo']
Availability,"ct.h:119; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TObject::kCannotPick@ kCannotPickif object in a pad cannot be pickedDefinition TObject.h:67; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPainter3dAlgorithms::DrawFaceMove3void DrawFaceMove3(Int_t *icodes, Double_t *xyz, Int_t np, Int_t *iface, Double_t *tt)Draw face - 3rd variant for ""MOVING SCREEN"" algorithm (draw level lines only)Definition TPainter3dAlgorithms.cxx:705; TPainter3dAlgorithms::DrawLevelLinesvoid DrawLevelLines(Int_t *icodes, Double_t *xyz, Int_t np, Int_t *iface, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:479961,error,error,479961,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['error']
Availability,"ct::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEvePointSetArray*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePointSetArrayEditor.html:18225,mask,mask,18225,root/html602/TEvePointSetArrayEditor.html,https://root.cern,https://root.cern/root/html602/TEvePointSetArrayEditor.html,2,['mask'],['mask']
Availability,"ct::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMonitor*fAllMonitormonitor activity on all valid slave sockets; TList*fAvailablePackageslist of available packages; TList*fBadSlavesdead slaves (subset of all slaves); Long64_tfBytesReadynumber of bytes staged; Int_tfCollectTimeoutTimeout for (some) collect actions; TStringfConfDirdirectory containing cluster config information; TStringfConfFilefile containing config information; TStringfDataPoolUrldefault data pool entry point URL; Bool_tfDataReadytrue if data is ready to be analyzed; Bool_tfDynamicStartupare the workers started dynamically?; TList*fEnabledPackageslist of enabled packages; TStringfImagemaster's image name; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TProofMgr*fManagermanager to which this session belongs (if any); Bool_tfMasterServtrue if we are a master server; TStringTNamed::fNameobject identifier; Int_tfProtocolremote PROOF server protocol version number; TProof::EQueryModefQueryModedefault query mode; TList*fRunningDSetsTemporary datasets used for async running; TSelector*fSelectorSelector to be processed, if any; TProofMgr::EServTypefServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*fSlaveslist of all slave servers as in config file; TList*fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tfTotalBytesnumber of bytes to be analyzed; TUrlfUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlaveskActive; static TProof::ESlaveskAll; static TProof::ESlaveskAllUnique; static TProof::ESlaveskUnique. private:. TMonitor*fActiveMonitormonitor activity on all active slave sockets; TList*fActiveS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:28305,avail,available,28305,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['avail'],['available']
Availability,"ct::AbstractMethod(const char* method) const; virtual voidAppend(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; boolConvertOldToNew(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tFindValues(Long64_t major, Long64_t minor) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntryNumberFriend(const TTree* parent); virtual Long64_tGetEntryNumberWithBestIndex(Long64_t major, Long64_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Long64_t major, Long64_t minor) const; virtual const char*TObject::GetIconName() const; virtual Long64_t*GetIndex() const; virtual Long64_t*GetIndexValues() const; virtual Long64_t*GetIndexValuesMinor() const; virtual TTreeFormula*GetMajorFormula(); virtual TTreeFormu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeIndex.html:1499,error,error,1499,root/html534/TTreeIndex.html,https://root.cern,https://root.cern/root/html534/TTreeIndex.html,3,['error'],['error']
Availability,"ct::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tareTHidentical(TH1* htest, TH1* href); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearSilentMode(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Double_tctol(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tfctol(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tfptol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; RooWorkspace*getWS(const char* refName); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnitTest.html:2026,error,error,2026,root/html534/RooUnitTest.html,https://root.cern,https://root.cern/root/html534/RooUnitTest.html,3,['error'],['error']
Availability,"ct::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Bool_tattach(RooWorkspace&); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; RooLinkedList*detailedData(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_texecute(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Bool_tfinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsStudy.html:1540,error,error,1540,root/html526/RooAbsStudy.html,https://root.cern,https://root.cern/root/html526/RooAbsStudy.html,2,['error'],['error']
Availability,"ct::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t, Int_t); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetRadiusOffset(); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPieSlice.html:1578,error,error,1578,root/html528/TPieSlice.html,https://root.cern,https://root.cern/root/html528/TPieSlice.html,6,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); TDataSet*TDataSet::At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObjectSet::Delete(Option_t* opt = """"); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTObjectSet::DoOwner(Bool_t done = kTRUE); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetGlobalRange(const TVolumeView* rootNode, Float_t* min, Float_t* max); virtual const char*TObject::GetIconName() const; TList*TDataSet::GetList()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolumeView.html:3060,error,error,3060,root/html528/TVolumeView.html,https://root.cern,https://root.cern/root/html528/TVolumeView.html,6,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); virtual Int_tTVirtualPacketizer::AssignWork(TDSet*, Long64_t, Long64_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); Double_tGetCurrentTime(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTVirtualPacketizer::GetEntriesProcessed() const; virtual Int_tTVirtualPacketizer::GetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPacketizer::GetInitTime() const; virtual const char*TObject::GetName() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPacketizerFile.html:1780,error,error,1780,root/html602/TPacketizerFile.html,https://root.cern,https://root.cern/root/html602/TPacketizerFile.html,2,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); virtual Int_tTVirtualPacketizer::AssignWork(TDSet*, Long64_t, Long64_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesProcessed(TSlave* sl) const; virtual Int_tTVirtualPacketizer::GetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPacketizer::GetInitTime() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPacketizer.html:2054,error,error,2054,root/html602/TPacketizer.html,https://root.cern,https://root.cern/root/html602/TPacketizer.html,2,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); virtual Int_tTVirtualPacketizer::AssignWork(TDSet*, Long64_t, Long64_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTVirtualPacketizer::GetEntriesProcessed() const; virtual Int_tGetEstEntriesProcessed(Float_t f, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPacketizer::GetInitTime() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* wrk, TMes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPacketizerMulti.html:1961,error,error,1961,root/html602/TPacketizerMulti.html,https://root.cern,https://root.cern/root/html602/TPacketizerMulti.html,2,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::CombinedCalculator::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual RooStats::HypoTestResult*GetHypoTest() const; virtual const char*TObject::GetIconName() const; virtual RooStats::LikelihoodInterval*GetInterval() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:3530,error,error,3530,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,1,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConstrain(Int_t parm, Double_t low, Double_t high); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidErrorAnalysis(Double_t UP); Double_tEvaluateFCN(const Double_t* par); voidExcludeBin(Int_t bin); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrFit(); Double_tGetChisquare() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); ROOT::Fit::Fitter*GetFitter() const; virtual const char*TObject::GetIconName() const; TH1*GetMCPrediction(Int_t parm) const; virtual const char*TObject::GetName() const; Int_tGetNDF() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1*GetPlot(); Double_tGetProb() const; voidGetResult(Int_t parm, Double_t& value, Double_t& error) const; virtual const char*TObject::GetTitle() const; virtual UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:6520,error,error,6520,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,2,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckIfOnline(Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tDeselectFile(const char*, Int_t = -1, Int_t = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDownscaleSelection(UInt_t = 2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExportXML(const char*, Bool_t = kTRUE, Bool_t = kTRUE, const char* = ""ROOT xml"", const char* = ""Exported XML""); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCollectionName() const; virtual TDSet*GetDataset(const char*, const char*, const char*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TEntryList*GetEntryList(const char*); virtual const char*GetExportUrl(); virtual TFileCollection*GetFileCollection(const char* = """", const char* = """") const; virtual TList*GetFileGroupList() const; virtual TGridResult*GetGridResult(const char* = """", Bool_t = kTRUE, Bool_t = kFALSE); virtual const char*TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGridCollection.html:1573,error,error,1573,root/html528/TGridCollection.html,https://root.cern,https://root.cern/root/html528/TGridCollection.html,6,['error'],['error']
Availability,"ct::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableConfigurable(const TString& theOption = """"); TMVA::ConfigurableConfigurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetConfigDescription() const; const char*GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Configurable.html:1533,error,error,1533,root/html602/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html602/TMVA__Configurable.html,2,['error'],['error']
Availability,"ct::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsStudy*clone(const char* newname = """") const; virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; RooLinkedList*detailedData(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voiddump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Bool_texecute(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Bool_tfinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsStudy.html:1722,error,error,1722,root/html530/RooAbsStudy.html,https://root.cern,https://root.cern/root/html530/RooAbsStudy.html,5,['error'],['error']
Availability,"ct::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>&); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFDA.html:2669,error,error,2669,root/html528/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFDA.html,6,['error'],['error']
Availability,"ct::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInspectCanvas.html:6219,error,error,6219,root/html602/TInspectCanvas.html,https://root.cern,https://root.cern/root/html602/TInspectCanvas.html,2,['error'],['error']
Availability,"ct::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDialogCanvas.html:6584,error,error,6584,root/html602/TDialogCanvas.html,https://root.cern,https://root.cern/root/html602/TDialogCanvas.html,2,['error'],['error']
Availability,"ct::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEntryCallback(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGValuator.html:4337,error,error,4337,root/html528/TEveGValuator.html,https://root.cern,https://root.cern/root/html528/TEveGValuator.html,4,['error'],['error']
Availability,"ct::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGFrame*GetActFrame() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootBrowser.html:5152,error,error,5152,root/html528/TRootBrowser.html,https://root.cern,https://root.cern/root/html528/TRootBrowser.html,3,['error'],['error']
Availability,"ct::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEncodeText(TGString* str, const char* z); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGHtmlElement*FindEndNest(TGHtmlElement* sp, int en, TGHtmlElement* lp); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual intFormAction(TGHtmlForm*, int); virtual intFormCreate(TGHtmlForm*, const char*, const char*); virtual Pixel_tTGFrame::GetBackground() const; const char*GetBaseUri() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGViewFrame*TGView::GetCanvas() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtml.html:4625,error,error,4625,root/html602/TGHtml.html,https://root.cern,https://root.cern/root/html602/TGHtml.html,2,['error'],['error']
Availability,"ct::ResetBit(UInt_t f); static voidTProof::ResetEnvVars(); voidTProof::ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent)SIGNAL ; voidTProof::ResetProgressDialogStatus(); Int_tTProof::Retrieve(Int_t query, const char* path = 0); Int_tTProof::Retrieve(const char* queryref, const char* path = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; Int_tTProof::SavePerfTree(const char* pf = 0, const char* qref = 0); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTProof::SendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Bool_tTProof::SendingLogToWindow() const; voidTProof::SendLogToWindow(Bool_t mode); virtual voidSetActive(); virtual voidSetActive(Bool_t active); virtual voidTProof::SetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTProof::SetDataPoolUrl(const char* url); virtual Int_tTProof::SetDataSetTreeName(const char* dataset, const char* treename); voidTProof::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTProof::SetInputDataFile(const char* datafile); voidTProof::SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); voidTProof::SetManager(TProofMgr* mgr); voidTProof::SetMaxDrawQueries(Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tTProof::SetParallel(Int_t nodes = -1, Bool_t random = kFALSE); voidTProof::SetParameter(const char* par, const char* value); voidTProof::SetParameter(const char* par, Int_t value); voidTProof::SetParameter(const char* par, Long_t value); voidTProof::SetParameter(const char* par, Long64_t value); voidTProof::SetParameter(const char* par, Double_t value); voidTProof::SetPerfTree(const char* pf = ""perftree.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:17152,mask,mask,17152,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,3,['mask'],['mask']
Availability,"ct::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSystem::Select(TList* active, Long_t timeout); virtual Int_tTSystem::Select(TFileHandler* fh, Long_t timeout); virtual intTSystem::SendBuf(int sock, const void* buffer, int length); virtual intTSystem::SendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidTSystem::SetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSystem::SetDynamicPath(const char* pathname); virtual voidTSystem::Setenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tTSystem::SetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs(const char* linkedLibs); virtual voidTSystem::SetMakeExe(const char* directives); virtual voidTSystem::SetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetSystem.html:14408,mask,mask,14408,root/html602/TNetSystem.html,https://root.cern,https://root.cern/root/html602/TNetSystem.html,8,['mask'],['mask']
Availability,"ct::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSystem::Select(TList* active, Long_t timeout); virtual Int_tTSystem::Select(TFileHandler* fh, Long_t timeout); virtual intTSystem::SendBuf(int sock, const void* buffer, int length); virtual intTSystem::SendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidTSystem::SetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSystem::SetDynamicPath(const char* pathname); virtual voidTSystem::Setenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tTSystem::SetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs(const char* linkedLibs); virtual voidTSystem::SetMakeExe(const char* directives); virtual voidTSystem::SetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDCacheSystem.html:12323,mask,mask,12323,root/html530/TDCacheSystem.html,https://root.cern,https://root.cern/root/html530/TDCacheSystem.html,10,['mask'],['mask']
Availability,"ct::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSystem::Select(TList* active, Long_t timeout); virtual Int_tTSystem::Select(TFileHandler* fh, Long_t timeout); virtual intTSystem::SendBuf(int sock, const void* buffer, int length); virtual intTSystem::SendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidTSystem::SetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSystem::SetDynamicPath(const char* pathname); virtual voidTSystem::Setenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tTSystem::SetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs(const char* linkedLibs); virtual voidTSystem::SetMakeExe(const char* directives); virtual voidTSystem::SetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetSystem.html:14450,mask,mask,14450,root/html534/TNetSystem.html,https://root.cern,https://root.cern/root/html534/TNetSystem.html,4,['mask'],['mask']
Availability,"ct::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfAbsTolabsolute tolerance deviation; Double_t(*)(Double_t)fGetRootVal; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; Double_tfRootMaxmaximum root value; Double_tfRootMinminimum root value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RootFinder(const TMVA::RootFinder& ). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const TMVA::RootFinder& ); usually copying is non trivial, so we make this unaccessible. {}. double Root(). Return the current and latest estimate of the Root. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__RootFinder.html:6489,toler,tolerance,6489,root/html602/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html602/TMVA__RootFinder.html,1,['toler'],['tolerance']
Availability,"ct::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfAbsTolabsolute tolerance deviation; Double_t(*)(Double_t)fGetRootVal; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; Double_tfRootMaxmaximum root value; Double_tfRootMinminimum root value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RootFinder(const TMVA::RootFinder& ). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const TMVA::RootFinder& ); usually copying is non trivial, so we make this unaccessible. {}. double Root(). Return the current and latest estimate of the Root. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__RootFinder.html:6489,toler,tolerance,6489,root/html604/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html604/TMVA__RootFinder.html,1,['toler'],['tolerance']
Availability,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMonitor*fAllMonitormonitor activity on all valid slave sockets; TList*fAvailablePackageslist of available packages; TList*fBadSlavesdead slaves (subset of all slaves); Long64_tfBytesReadynumber of bytes staged; Int_tfCollectTimeoutTimeout for (some) collect actions; TStringfConfDirdirectory containing cluster config information; TStringfConfFilefile containing config information; TStringfDataPoolUrldefault data pool entry point URL; Bool_tfDataReadytrue if data is ready to be analyzed; Bool_tfDynamicStartupare the workers started dynamically?; TList*fEnabledPackageslist of enabled packages; TStringfImagemaster's image name; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TProofMgr*fManagermanager to which this session belongs (if any); Bool_tfMasterServtrue if we are a master server; TStringTNamed::fNameobject identifier; Float_tfPrepTimePreparation time; Int_tfProtocolremote PROOF server protocol version number; TProof::EQueryModefQueryModedefault query mode; TStopwatchfQuerySTWStopwatch to measure query times; TList*fRunningDSetsTemporary datasets used for async running; TSelector*fSelectorSelector to be processed, if any; TProofMgr::EServTypefServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*fSlaveslist of all slave servers as in config file; TList*fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tfTotalBytesnumber of bytes to be analyzed; TUrlfUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*fgSemaphoresemaphore to control no of parallel startup threads. private:. TMonitor*fActiveMonitormonitor activity on all active slave sockets; TList*fActiveSlaveslist of activ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:28513,avail,available,28513,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['avail'],['available']
Availability,"ct::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TXMLDocument*fTXMLDocxmlDoc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDOMParser(); TDOMParser constructor. ~TDOMParser(); TDOMParser destructor, it calls ReleaseUnderlying(). void ReleaseUnderlying(); Release any existing document. Int_t ParseFile(const char* filename); Parse the XML file where filename is the XML file name.; It will create a TXMLDocument if the file is parsed without; any error. It returns parse code error in case of parse error,; see TXMLParser. Int_t ParseBuffer(const char* buffer, Int_t len); It parses a buffer, much like ParseFile(). Int_t ParseContext(); Creates a XML docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDOMParser.html:10392,error,errorcodes,10392,root/html602/TDOMParser.html,https://root.cern,https://root.cern/root/html602/TDOMParser.html,6,['error'],"['error', 'errorcodes']"
Availability,"ct::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. _xmlSAXHandler*fSAXHandlerlibxml2 SAX handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSAXParser.html:11063,error,errorcodes,11063,root/html602/TSAXParser.html,https://root.cern,https://root.cern/root/html602/TSAXParser.html,6,['error'],"['error', 'errorcodes']"
Availability,"ct::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t_epsAbsAbsolute precision; Double_t_epsRelRelative precision; RooMultiGenFunction*_func! ROOT::Math multi-parameter function binding; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; TString_intNameIntegrand name; ROOT::Math::AdaptiveIntegratorMultiDim*_integrator; Int_t_nErrorNumber of error occurrences; Int_t_nWarnMax number of warnings to be issued ;; Int_t_nmaxMax number of divisions; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_xmaxUpper bound in each dimension; Double_t*_xminLower bound in each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory. RooAdaptiveIntegratorND(); Default ctor. RooAdaptiveIntegratorND(const RooAbsFunc& function, const RooNumIntConfig& config); Constructor of integral on given function binding and with given configuration. The; integration limits are taken from the definition in the function binding; _func = function. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAdaptiveIntegratorND.html:7030,error,error,7030,root/html602/RooAdaptiveIntegratorND.html,https://root.cern,https://root.cern/root/html602/RooAdaptiveIntegratorND.html,2,['error'],['error']
Availability,"ct::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t Run(TThread* th); Create a pthread. Returns 0 on success, otherwise an error number will; be returned. Int_t Join(TThread* th, void** ret); Join suspends the execution of the calling thread until the; thread identified by th terminates, either by calling pthread_exit; or by being cancelled. Returns 0 on success, otherwise an error number will; be returned. Int_t Exit(void* ret); Terminates the execution of the calling thread. Return 0. Int_t Kill(TThread* th); Cancellation is the mechanism by which a thread can terminate the; execution of another thread. Returns 0 on success, otherwise an error; number will be returned. Int_t SetCancelOff(); Turn off the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelOn(); Turn on the cancellation state of the calling thread. Returns 0 on; success, otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Set the cancellation response type of the calling thread to; asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Set the cancellation response type of the calling thread to; deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Introduce an explicit cancellation point. Returns 0. Int_t CleanUpPush(void** main, void* free, void* arg); Add thread cleanup function. Int_t CleanUpPop(void** main, Int_t exe); Pop thread cleanup function from stack. Int_t CleanUp(void** main); Default thread cleanup routine. Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPosixThread.html:6790,error,error,6790,root/html602/TPosixThread.html,https://root.cern,https://root.cern/root/html602/TPosixThread.html,2,['error'],['error']
Availability,"ct::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. char*fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tfBufferSizeAllocated size of fBuffer; TFile*fFilePointer to file; Int_tfNtotTotal size of cached blocks; Bool_tfRecursiveflag to avoid recursive calls; Long64_tfSeekStartSeek value of first block in cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileCacheWrite(); Default Constructor. TFileCacheWrite(TFile* file, Int_t buffersize); Creates a TFileCacheWrite data structure.; The write cache will be connected to file.; The size of the cache will be buffersize,; if buffersize < 10000 a default size of 512 Kbytes is used. ~TFileCacheWrite(); Destructor. Bool_t Flush(); Flush the current write buffer to the file.; Returns kTRUE in case of error. void Print(Option_t* option = """") const; Print class internal structure. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Called by the read cache to check if the requested data is not; in the write cache buffer.; Returns -1 if data not in write cache,; 0 otherwise. Int_t WriteBuffer(const char* buf, Long64_t pos, Int_t len); Write buffer at position pos in the write buffer.; The function returns 1 if the buffer has been successfully entered into the write buffer.; The function returns 0 in case WriteBuffer() was recusively called via Flush().; The function returns -1 in case of error. void SetFile(TFile* file); Set the file using this cache.; Any write not yet flushed will be lost. TFileCacheWrite(const TFileCacheWrite& ). TFileCacheWrite& operator=(const TFileCacheWrite& ). Int_t GetBytesInCache() const; { return fNtot; }. » Author: Rene Brun 19/05/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-02 15:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFileCacheWrite.html:7759,error,error,7759,root/html604/TFileCacheWrite.html,https://root.cern,https://root.cern/root/html604/TFileCacheWrite.html,1,['error'],['error']
Availability,"ct::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. char*fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tfBufferSizeAllocated size of fBuffer; TFile*fFilePointer to file; Int_tfNtotTotal size of cached blocks; Bool_tfRecursiveflag to avoid recursive calls; Long64_tfSeekStartSeek value of first block in cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileCacheWrite(); Default Constructor. TFileCacheWrite(TFile* file, Int_t buffersize); Creates a TFileCacheWrite data structure.; The write cache will be connected to file.; The size of the cache will be buffersize,; if buffersize < 10000 a default size of 512 Kbytes is used. ~TFileCacheWrite(); Destructor. Bool_t Flush(); Flush the current write buffer to the file.; Returns kTRUE in case of error. void Print(Option_t* option = """") const; Print class internal structure. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Called by the read cache to check if the requested data is not; in the write cache buffer.; Returns -1 if data not in write cache,; 0 otherwise. Int_t WriteBuffer(const char* buf, Long64_t pos, Int_t len); Write buffer at position pos in the write buffer.; The function returns 1 if the buffer has been successfully entered into the write buffer.; The function returns 0 in case WriteBuffer() was recusively called via Flush().; The function returns -1 in case of error. void SetFile(TFile* file); Set the file using this cache.; Any write not yet flushed will be lost. TFileCacheWrite(const TFileCacheWrite& ). TFileCacheWrite& operator=(const TFileCacheWrite& ). Int_t GetBytesInCache() const; { return fNtot; }. » Author: Rene Brun 19/05/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 14:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileCacheWrite.html:7759,error,error,7759,root/html602/TFileCacheWrite.html,https://root.cern,https://root.cern/root/html602/TFileCacheWrite.html,1,['error'],['error']
Availability,"ct::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::TNeuron&operator=(const TMVA::TNeuron&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); TMVA::TSynapse*PostLinkAt(Int_t index) const; TMVA::TSynapse*PreLinkAt(Int_t index) const; virtual voidPrint(Option_t* = """") const; voidPrintActivationEqn(); voidPrintPostLinks() const; voidPrintPreLinks() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetActivationEqn(TMVA::TActivation* activation); voidSetBiasNeuron(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDEDw(Double_t DEDw); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetError(Double_t error); voidSetInputCalculator(TMVA::TNeuronInput* calculator); voidSetInputNeuron(); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutputNeuron(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TNeuronTNeuron(); TMVA::TNeuronTNeuron(const TMVA::TNeuron&); voidUpdateSynapsesBatch(); voidUpdateSynapsesSequential(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__TNeuron.html:5406,error,error,5406,root/html602/TMVA__TNeuron.html,https://root.cern,https://root.cern/root/html602/TMVA__TNeuron.html,2,['error'],['error']
Availability,"ctMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tDrag(Int_t x_root, Int_t y_root, Atom_t action, Time_t timestamp); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; Bool_tDrop(); virtual voidTObject::Dump() constMENU ; Bool_tEndDrag(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static Atom_tGetDNDActionAsk(); static Atom_tGetDNDActionCopy(); static Atom_tGetDNDActionDescrip(); static Atom_tGetDNDActionLink(); static Atom_tGetDNDActionList(); static Atom_tGetDNDActionMove(); static Atom_tGetDNDActionPrivate(); static Atom_tGetDNDAware(); static Atom_tGetDNDDrop(); static Atom_tGetDNDEnter(); static Atom_tGetDNDFinished(); static Atom_tGetDNDLeave(); static Atom_tGetDNDPosition(); static Atom_tGetDNDProxy(); static Atom_tGetDNDSelection(); static Atom_tGetDNDStatus(); static Atom_tGetDNDTypeList(); static Atom_tGetDNDVersion(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDNDManager.html:1477,error,error,1477,root/html528/TGDNDManager.html,https://root.cern,https://root.cern/root/html528/TGDNDManager.html,6,['error'],['error']
Availability,"ctMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearContent(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t w); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetArea(); Int_tGetBinNumber() const; Bool_tGetChanged() const; Double_tGetContent() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetPolygon() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXMax(); Double_tGetXMin(); Double_tGetYMax(); Double_tGetYMin(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2PolyBin.html:1474,error,error,1474,root/html528/TH2PolyBin.html,https://root.cern,https://root.cern/root/html528/TH2PolyBin.html,6,['error'],['error']
Availability,"ctMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet& point) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetActualConfidenceLevel(); virtual RooArgList*GetAxes(); virtual const RooStats::MarkovChain*GetChain(); virtual const RooDataSet*GetChainAsConstDataSet(); virtual RooDataHist*GetChainAsDataHist(RooArgSet* whichVars = NULL); virtual RooDataSet*GetChainAsDataSet(RooArgSet* whichVars = NULL); virtual THnSparse*GetChainAsSparseHist(RooArgSet* whichVars = NULL); virtual Int_tGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetHistCutoff(); virtual const char*TObject::GetIconName() const; virtual Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCInterval.html:3586,error,error,3586,root/html526/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCInterval.html,1,['error'],['error']
Availability,"ctMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet& point) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetActualConfidenceLevel(); virtual RooArgList*GetAxes(); virtual const RooStats::MarkovChain*GetChain(); virtual const RooDataSet*GetChainAsConstDataSet(); virtual RooDataHist*GetChainAsDataHist(RooArgSet* whichVars = NULL); virtual RooDataSet*GetChainAsDataSet(RooArgSet* whichVars = NULL); virtual THnSparse*GetChainAsSparseHist(RooArgSet* whichVars = NULL); virtual Int_tGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetHistCutoff(); virtual const char*TObject::GetIconName() const; virtual RooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCInterval.html:3586,error,error,3586,root/html528/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCInterval.html,4,['error'],['error']
Availability,"ctNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ULong_tGetAllMembersCount() const; Float_tGetCenter() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetHeight() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; UInt_tGetMaxLevel() const; UInt_tGetMaxObjects() const; TList*GetMembers() const; ULong_tGetMembersCount() const; Float_tGetMiddle() const; virtual const char*GetName() const; ENodeTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStructNode*GetParent() const; void*GetPointer() const; ULong_tGetRelativeMembersCount() const; ULong_tGetRelativeSize() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructNode.html:1943,error,error,1943,root/html530/TStructNode.html,https://root.cern,https://root.cern/root/html530/TStructNode.html,5,['error'],['error']
Availability,"ctNotify(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QObject. ←; TQtRootSlot. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void ProcessLine(const char* ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void Terminate(int status) const; the dedicated slot to terminate the ROOT application; with ""status"". void Terminate() const; the dedicated slot to terminate the ROOT application; and return the ""0"" status. void TerminateAndQuit() const; the dedicated slot to terminate the ROOT application; and quit the Qt Application if any. TQtRootSlot(const TQtRootSlot& ). void operator=(const TQtRootSlot& ). TQtRootSlot(); {}. virtual ~TQtRootSlot(); {}. void Error(int error). » Author: Valery Fine 18/01/2007 » Copyright (C) 2007 by Valeri Fine. Brookhaven National Laboratory.; » Last changed: root/qt:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtRootSlot.html:4824,error,error,4824,root/html602/TQtRootSlot.html,https://root.cern,https://root.cern/root/html602/TQtRootSlot.html,1,['error'],['error']
Availability,"cted . Definition at line 812 of file RooCurve.cxx. ◆ chiSquare(). double RooCurve::chiSquare ; (; const RooHist & ; hist, . int ; nFitParam . ); const. Calculate the chi^2/NDOF of this curve with respect to the histogram 'hist' accounting nFitParam floating parameters in case the curve was the result of a fit. ; Definition at line 535 of file RooCurve.cxx. ◆ Class(). static TClass * RooCurve::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooCurve::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooCurve::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 106 of file RooCurve.h. ◆ DeclFileName(). static const char * RooCurve::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file RooCurve.h. ◆ findPoint(). Int_t RooCurve::findPoint ; (; double ; xvalue, . double ; tolerance = 1e-10 . ); const. Find the nearest point to xvalue. ; Return -1 if distance exceeds tolerance ; Definition at line 633 of file RooCurve.cxx. ◆ getFitRangeBinW(). double RooCurve::getFitRangeBinW ; (; ); const. overridevirtual . Get the bin width associated with this plotable object. ; It is alwats zero for curves ; Implements RooPlotable.; Definition at line 479 of file RooCurve.cxx. ◆ getFitRangeNEvt() [1/2]. double RooCurve::getFitRangeNEvt ; (; ); const. overridevirtual . Return the number of events associated with the plotable object, it is always 1 for curves. ; Implements RooPlotable.; Definition at line 460 of file RooCurve.cxx. ◆ getFitRangeNEvt() [2/2]. double RooCurve::getFitRangeNEvt ; (; double ; xlo, . double ; xhi . ); const. overridevirtual . Return the number of events associated with the plotable object, in the given range. ; It is always 1 for curves ; Implements RooPlotable.; Definition at line 469 of file RooCurve.cxx. ◆ initialize(). void RooCurve::initializ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:45860,toler,tolerance,45860,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['toler'],['tolerance']
Availability,"cted . Rms of F(bkg) ; Definition at line 249 of file RuleFitParams.h. ◆ fFstar. std::vector<Double_t> TMVA::RuleFitParams::fFstar. protected . vector of F*() - filled in CalcFStar() ; Definition at line 234 of file RuleFitParams.h. ◆ fFstarMedian. Double_t TMVA::RuleFitParams::fFstarMedian. protected . median value of F*() using ; Definition at line 235 of file RuleFitParams.h. ◆ fGDCoefLinTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefLinTst. protected . linear coeffs - one per tau ; Definition at line 218 of file RuleFitParams.h. ◆ fGDCoefTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefTst. protected . rule coeffs - one per tau ; Definition at line 217 of file RuleFitParams.h. ◆ fGDErrScale. Double_t TMVA::RuleFitParams::fGDErrScale. protected . stop scan at error = scale*errmin ; Definition at line 230 of file RuleFitParams.h. ◆ fGDErrTst. std::vector<Double_t> TMVA::RuleFitParams::fGDErrTst. protected . error rates per tau ; Definition at line 215 of file RuleFitParams.h. ◆ fGDErrTstOK. std::vector<Char_t> TMVA::RuleFitParams::fGDErrTstOK. protected . error rate is sufficiently low <— stores boolean ; Definition at line 216 of file RuleFitParams.h. ◆ fGDNPathSteps. Int_t TMVA::RuleFitParams::fGDNPathSteps. protected . number of path steps ; Definition at line 229 of file RuleFitParams.h. ◆ fGDNTau. UInt_t TMVA::RuleFitParams::fGDNTau. protected . number of tau-paths - calculated in SetGDTauPrec ; Definition at line 222 of file RuleFitParams.h. ◆ fGDNTauTstOK. UInt_t TMVA::RuleFitParams::fGDNTauTstOK. protected . number of tau in the test-phase that are ok ; Definition at line 221 of file RuleFitParams.h. ◆ fGDNtuple. TTree* TMVA::RuleFitParams::fGDNtuple. protected . Gradient path ntuple, contains params for each step along the path. ; Definition at line 237 of file RuleFitParams.h. ◆ fGDOfsTst. std::vector<Double_t> TMVA::RuleFitParams::fGDOfsTst. protected . offset per tau ; Definition at line 219 of file RuleFitPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:21407,error,error,21407,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['error'],['error']
Availability,"cted Attributes; Double_t * fAlpha;  [fDim] Internal parameters of the hyper-rectangle ;  ; TFoamCell ** fCells = nullptr;  [fNCells] Array of ALL cells ;  ; std::vector< Long_t > fCellsAct;  Index of active cells, constructed at the end of foam build-up. ;  ; Int_t fChat;  Chat=0,1,2 chat level in output, Chat=1 normal level. ;  ; TString fDate;  Release date of FOAM. ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; TObjArray * fHistDbg;  Histograms of wt, for debug. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; TH1D * fHistWt;  Histogram of the MC wt. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; Double_t fMaxWtRej;  Maximum weight in rejection for getting wt=1 events. ;  ; Double_t fMCerror;  and its error ;  ; TFoamMaxwt * fMCMonit;  Monitor of the MC weight for measuring MC efficiency. ;  ; Double_t fMCresult;  True Integral R from MC series. ;  ; Double_t * fMCvect;  [fDim] Generated MC vector for the outside user ;  ; Double_t fMCwt;  MC weight. ;  ; TMethodCall * fMethodCall;  ! ROOT's pointer to user-defined global distribution function ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin;  No. of bins in the edge histogram for cell MC exploration. ;  ; Long_t fNCalls;  Total number of the function calls. ;  ; Int_t fNCells;  Maximum number of cells. ;  ; Long_t fNEffev;  Total number of effective events (wt=1) in the foam buildup. ;  ; Double_t fNevGen;  Total number of the generated MC events. ;  ; Int_t fNoAct;  Number of active cells. ;  ; Int_t fNSampl;  No. of MC events, when dividing (exploring) cell. ;  ; Int_t fOptDrive;  Optimization switch =1,2 for variance or maximum weight optimization. ;  ; Int_t fOptPRD;  Option switch for predefined division, for quick check",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:21140,error,error,21140,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['error'],['error']
Availability,"cted Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TStatus.h>. Inheritance diagram for TStatus:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EProcStatus. enum TStatus::EProcStatus. EnumeratorkNotOk . Definition at line 35 of file TStatus.h. Constructor & Destructor Documentation. ◆ TStatus(). TStatus::TStatus ; (; ). Default constructor. ; Definition at line 34 of file TStatus.cxx. ◆ ~TStatus(). TStatus::~TStatus ; (; ). inlineoverride . Definition at line 52 of file TStatus.h. Member Function Documentation. ◆ Add(). void TStatus::Add ; (; const char * ; mesg). Add an error message. ; Definition at line 47 of file TStatus.cxx. ◆ AddInfo(). void TStatus::AddInfo ; (; const char * ; mesg). Add an info message. ; Definition at line 57 of file TStatus.cxx. ◆ Class(). static TClass * TStatus::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStatus::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStatus::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 69 of file TStatus.h. ◆ DeclFileName(). static const char * TStatus::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file TStatus.h. ◆ GetExitStatus(). Int_t TStatus::GetExitStatus ; (; ); const. inline . Definition at line 62 of file TStatus.h. ◆ GetResMemMax(). Long_t TStatus::GetResMemMax ; (; Bool_t ; master = kFALSE); const. inline . Definition at line 63 of file TStatus.h. ◆ GetVirtMem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatus.html:12704,error,error,12704,doc/master/classTStatus.html,https://root.cern,https://root.cern/doc/master/classTStatus.html,1,['error'],['error']
Availability,"cted via the parameter mod...Definition TStyle.cxx:1640; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ratioplot1Definition ratioplot1.py:1; . Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted function. The function is used to calculate the residual between the fit and the histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the difference between the histogram and the fit function at each point and divides it by the uncertainty. There are a few option to steer which error is used (as is the case for diffsig). The default is to use the statistical uncertainty from h1 using TH1::GetBinError. If the option string contains errasym, asymmetric errors will be used. The type of error can be steered by TH1::SetBinErrorOption. The corresponding error will be used, depending on if the function is below or above the bin content. The third option errfunc uses the square root of the function value as the error.; ; void ratioplot2() {; gStyle->SetOptStat(0);; auto c1 = new TCanvas(""c1"", ""fit residual simple"");; auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);; h1->FillRandom(""gaus"", 2000);; h1->Fit(""gaus"", ""0"");; h1->GetXaxis()->SetTitle(""x"");; auto rp1 = new TRatioPlot(h1);; rp1->Draw();; rp1->GetLowerRefYaxis()->SetTitle(""ratio"");; rp1->GetUpperRefYaxis()->SetTitle(""entries"");; }; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; c1return c1Definition legend1.C:41; ratioplot2Definition ratioplot2.py:1; . Error options for difference divided by uncertainty and fit residual; The uncertainty that is used in the calculation can be steered by providing options",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:4915,error,error,4915,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['error'],['error']
Availability,"cted:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; UInt_tTRandom::fSeedRandom number generator seed; UInt_tfSeed1Random number generator seed 1; UInt_tfSeed2Random number generator seed 2; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRandom2(UInt_t seed = 1); default constructor*-*-*-*-; *-* ===================. ~TRandom2(); default destructor*-*-*-*-; *-* ==================. Double_t Rndm(Int_t i = 0); TausWorth generator from L'Ecuyer, uses as seed 3x32bits integers; Use a mask of 0xffffffffUL to make in work on 64 bit machines; Periodicity of about 10**26; Generate number in interval (0,1) : 0 and 1 are not included in the interval. void RndmArray(Int_t n, Float_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void RndmArray(Int_t n, Double_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void SetSeed(UInt_t seed = 0); Set the generator seed.; If the seed given is zero, generate automatically seed values which; are different every time by using TRandom3 and TUUID; If a seed is given generate the other two needed for the generator state using; a linear congruential generator; The only condition, stated at the end of the 1999 L'Ecuyer paper is that the seeds; must be greater than 1,7 and 15. TRandom2(UInt_t seed = 1). » Author: Rene Brun 04/03/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRandom2.html:7567,mask,mask,7567,root/html534/TRandom2.html,https://root.cern,https://root.cern/root/html534/TRandom2.html,1,['mask'],['mask']
Availability,"cting as a view on a memory buffer it does not own. ; Definition at line 171 of file RVec.hxx. ◆ report_at_maximum_capacity(). void ROOT::Internal::VecOps::SmallVectorBase::report_at_maximum_capacity ; (; ). staticprotected . Report that this vector is already at maximum capacity. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 44 of file RVec.cxx. ◆ report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of file RVec.cxx. ◆ set_size(). void ROOT::Internal::VecOps::SmallVectorBase::set_size ; (; size_t ; N). inline . Set the array size to N, which the current array must have enough capacity for. ; This does not construct or destroy any elements in the vector.; Clients can use this in conjunction with capacity() to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. ; Definition at line 188 of file RVec.hxx. ◆ size(). size_t ROOT::Internal::VecOps::SmallVectorBase::size ; (; ); const. inline . Definition at line 174 of file RVec.hxx. ◆ SizeTypeMax(). static constexpr size_t ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMax ; (; ). inlinestaticconstexprprotected . The maximum value of the Size_T used. ; Definition at line 153 of file RVec.hxx. Member Data Documentation. ◆ fBeginX. void* ROOT::Internal::VecOps::SmallVectorBase::fBeginX. protected . Definition at line 145 of file RVec.hxx. ◆ fCapacity. Size_T ROOT::Internal::VecOps::SmallVectorBase::fCapacity. protected . Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ; Definition at line 150 of file RVec.hxx. ◆ fSize. Size_T ROOT::Internal::VecOps::SmallVectorBase::fSize = 0. protected . Always >= ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:4301,avail,available,4301,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,1,['avail'],['available']
Availability,"ction = C; Layer 0 DENSE Layer: ( Input = 4 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 2 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 3 DENSE Layer: ( Input = 128 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity Dropout prob. = 0.5; : Using 1600 events for training and 400 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.01 regularization 0 minimum error = 0.699892; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.548477 0.466013 0.191275 0.014698 9061.23 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.431501 0.379356 0.191981 0.0145985 9020.06 0; : 3 | 0.40241 0.379482 0.19151 0.014162 9021.8 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.408996 0.379041 0.192713 0.0146534 8985.76 0; : 5 | 0.41143 0.414316 0.191728 0.014237 9014.55 1; : 6 | 0.385066 0.478603 0.19226 0.0142608 8988.82 2; : 7 | 0.404168 0.388159 0.192259 0.0142353 8987.58 3; : 8 Minimum Test error found - save the configuration ; : 8 | 0.394387 0.377539 0.19273 0.0147168 8988.1 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.386834 0.375541 0.192946 0.014741 8978.44 0; : 10 | 0.381359 0.385778 0.195351 0.0142527 8835 1; : 11 | 0.391916 0.415129 0.193961 0.0143386 8907.56 2; : 12 | 0.390755 0.379468 0.194376 0.0145555 8897.75 3; : 13 | 0.409355 0.396515 0.195082 0.0144231 8856.49 4; : 14 | 0.400917 0.375809 0.194321 0.0142902 8887.36 5; : 15",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:47396,error,error,47396,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['error'],['error']
Availability,"ction Members (Methods); public:. ~MnMinos(); ROOT::Minuit2::MnCrossLoval(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; doubleLower(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MinosErrorMinos(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::MnMinos&); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); ROOT::Minuit2::MnMinosMnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); pair<double,double>operator()(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const; returns the negative (pair.first) and the positive (pair.second); Minos Error of the Parameter. double Lower(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const; calculate one side (negative or positive Error) of the Parameter; give as input (optionally) maxc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__MnMinos.html:1510,toler,toler,1510,root/html530/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__MnMinos.html,3,['toler'],['toler']
Availability,"ction do; func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );. Double_t IntegralError(Int_t n, const Double_t* a, const Double_t* b, const Double_t* params = 0, const Double_t* covmat = 0, Double_t epsilon = 1e-12); Return Error on Integral of a parameteric function with dimension larger tan one; between a[] and b[] due to the parameters uncertainties.; For a TF1 with dimension larger than 1 (for example a TF2 or TF3); TF1::IntegralMultiple is used for the integral calculation. A pointer to a vector of parameter values and to the elements of the covariance matrix (covmat) can be optionally passed.; By default (i.e. when a zero pointer is passed) the current stored parameter values are used to estimate the integral error; together with the covariance matrix from the last fit (retrieved from the global fitter instance). IMPORTANT NOTE1: When no covariance matrix is passed and in the meantime a fit is done; using another function, the routine will signal an error and it will return zero only; when the number of fit parameter is different than the values stored in TF1 (TF1::GetNpar() ).; In the case that npar is the same, an incorrect result is returned. IMPORTANT NOTE2: The user must pass a pointer to the elements of the full covariance matrix; dimensioned with the right size (npar*npar), where npar is the total number of parameters (TF1::GetNpar()),; including also the fixed parameters. When there are fixed parameters, the pointer returned from; TVirtualFitter::GetCovarianceMatrix() cannot be used.; One should use the TFitResult class, as shown in the example below. To get the matrix and values from an old fit do for example:; TFitResultPtr r = histo->Fit(func, ""S"");; ..... after performing other fits on the same function do; func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatrix()->GetMatrixArray() );. Double_t IntegralFast(const TGraph *g, Double_t a, Double_t b, Double_t *params); Gauss-Legendre integral, see CalcGaussL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:55470,error,error,55470,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['error'],['error']
Availability,"ction documentation; ~TBuffer(); Delete an I/O buffer object. void AutoExpand(Int_t size_needed); Automatically calculate a new size and expand the buffer to fit at least size_needed.; The goals is to minimize the number of memory allocation and the memory allocation; which avoiding too much memory wastage.; If the size_needed is larger than the current size, the policy; is to expand to double the current size or the size_needed which ever is largest. void SetBuffer(void* buf, UInt_t bufsiz = 0, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; new buffer is expected to have the same size as the previous buffer.; The current buffer position is reset to the start of the buffer.; If the TBuffer owned the previous buffer, it will be deleted prior; to accepting the new buffer. By default the new buffer will be; adopted unless adopt is false.; If the new buffer is _not_ adopted and no memory allocation routine; is provided, a Fatal error will be issued if the Buffer attempts to; expand. void Expand(Int_t newsize, Bool_t copy = kTRUE); Expand (or shrink) the I/O buffer to newsize bytes.; If copy is true (the default), the existing content of the; buffer is preserved, otherwise the buffer is returned zero-ed out. In order to avoid losing data, if the current length is greater than; the requested size, we only shrink down to the current length. TObject * GetParent() const; Return pointer to parent of this buffer. void SetParent(TObject* parent); Set parent owning this buffer. ReAllocCharFun_t GetReAllocFunc() const; Return the reallocation method currently used. void SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); Set which memory reallocation method to use. If reallocafunc is null,; reset it to the defaul value (TStorage::ReAlloc). void SetReadMode(); Set buffer in read mode. void SetWriteMode(); Set buffer in write mode. TClass * GetClass(const type_info& typeinfo); Forward to TROOT::GetClass()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBuffer.html:18028,error,error,18028,root/html534/TBuffer.html,https://root.cern,https://root.cern/root/html534/TBuffer.html,1,['error'],['error']
Availability,"ction documentation; ~TBuffer(); Delete an I/O buffer object. void AutoExpand(Int_t size_needed); Automatically calculate a new size and expand the buffer to fit at least size_needed.; The goals is to minimize the number of memory allocation and the memory allocation; which avoiding too much memory wastage.; If the size_needed is larger than the current size, the policy; is to expand to double the current size or the size_needed which ever is largest. void SetBuffer(void* buf, UInt_t bufsiz = 0, Bool_t adopt = kTRUE, ReAllocCharFun_t reallocfunc = 0); Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; new buffer is expected to have the same size as the previous buffer.; The current buffer position is reset to the start of the buffer.; If the TBuffer owned the previous buffer, it will be deleted prior; to accepting the new buffer. By default the new buffer will be; adopted unless adopt is false.; If the new buffer is _not_ adopted and no memory allocation routine; is provided, a Fatal error will be issued if the Buffer attempts to; expand. void Expand(Int_t newsize, Bool_t copy = kTRUE); Expand (or shrink) the I/O buffer to newsize bytes.; If copy is true (the default), the existing content of the; buffer is preserved, otherwise the buffer is returned zero-ed out. TObject * GetParent() const; Return pointer to parent of this buffer. void SetParent(TObject* parent); Set parent owning this buffer. ReAllocCharFun_t GetReAllocFunc() const; Return the reallocation method currently used. void SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); Set which memory reallocation method to use. If reallocafunc is null,; reset it to the defaul value (TStorage::ReAlloc). void SetReadMode(); Set buffer in read mode. void SetWriteMode(); Set buffer in write mode. TClass * GetClass(const type_info& typeinfo); Forward to TROOT::GetClass(). TClass * GetClass(const char* className); Forward to TROOT::GetClass(). TProcessID * ReadProcessID(UShort_t pidf); Return the curre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBuffer.html:17474,error,error,17474,root/html530/TBuffer.html,https://root.cern,https://root.cern/root/html530/TBuffer.html,2,['error'],['error']
Availability,"ction documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetValidateWarning() const; { return fValidateWarning; }. » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id: TXMLParser.h 29654 2009-07-31 14:34:14Z rdm $ » Last generated: 2010-09-23 20:22; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:11141,error,error,11141,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,2,['error'],['error']
Availability,"ction documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetValidateWarning() const; { return fValidateWarning; }. » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id: TXMLParser.h 29654 2009-07-31 14:34:14Z rdm $ » Last generated: 2011-07-04 15:39; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXMLParser.html:11210,error,error,11210,root/html530/TXMLParser.html,https://root.cern,https://root.cern/root/html530/TXMLParser.html,2,['error'],['error']
Availability,"ction documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetValidateWarning() const; { return fValidateWarning; }. » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id: TXMLParser.h 29654 2009-07-31 14:34:14Z rdm $ » Last generated: 2011-11-03 20:24; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXMLParser.html:11210,error,error,11210,root/html532/TXMLParser.html,https://root.cern,https://root.cern/root/html532/TXMLParser.html,2,['error'],['error']
Availability,"ction documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetValidateWarning() const; { return fValidateWarning; }. » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:11229,error,error,11229,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,2,['error'],['error']
Availability,"ction erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t Freq (Double_t x);  Computation of the normal frequency function freq(x). ;  ; constexpr Double_t G ();  Gravitational constant in: \( m^{3} kg^{-1} s^{-2} \). ;  ; Double_t GamCf (Double_t a, Double_t x);  Computation of the incomplete gamma function P(a,x) via its continued fraction representation. ;  ; Double_t Gamma (Double_t a, Double_t x);  Computation of the normalized lower incomplete gamma function P(a,x) as defined in the Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 . ;  ; Double_t Gamma (Double_t z);  Computation of gamma(z) for all z. ;  ; Double_t GammaDist (Double_t x, Double_t gamma, Double_t mu=0, Double_t beta=1);  Computes the density function of Gamma di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:7055,mask,mask,7055,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['mask'],['mask']
Availability,"ction f must be of a type implementing the operator() method, double operator() ( double x ) Returns non zero if interval is not valid (i.e. ;  ; bool SetFunction (const IGradFunction &f, double xstart);  Provide to the solver the function and an initial estimate of the root, for algorithms using derivatives. ;  ; bool SetMethod (RootFinder::EType type=RootFinder::kBRENT);  ; template<class Function , class Derivative > ; bool Solve (Function &f, Derivative &d, double start, int maxIter=100, double absTol=1E-8, double relTol=1E-10);  Solve f(x) = 0, given a derivative d. ;  ; template<class Function > ; bool Solve (Function &f, double min, double max, int maxIter=100, double absTol=1E-8, double relTol=1E-10);  Solve f(x) = 0 numerically. ;  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10);  Compute the roots iterating until the estimate of the Root is within the required tolerance returning the iteration Status. ;  ; int Status () const;  Return the status of the last estimate of the Root = 0 OK, not zero failure. ;  . Private Attributes; IRootFinderMethod * fSolver;  . #include <Math/RootFinder.h>; Member Enumeration Documentation. ◆ EType. enum ROOT::Math::RootFinder::EType. EnumeratorkBRENT ; kGSL_BISECTION ; kGSL_FALSE_POS ; kGSL_BRENT ; kGSL_NEWTON ; kGSL_SECANT ; kGSL_STEFFENSON . Definition at line 77 of file RootFinder.h. Constructor & Destructor Documentation. ◆ RootFinder() [1/3]. ROOT::Math::RootFinder::RootFinder ; (; RootFinder::EType ; type = RootFinder::kBRENT). Construct a Root-Finder algorithm. ; Definition at line 40 of file RootFinder.cxx. ◆ ~RootFinder(). ROOT::Math::RootFinder::~RootFinder ; (; ). virtual . Definition at line 142 of file RootFinder.cxx. ◆ RootFinder() [2/3]. ROOT::Math::RootFinder::RootFinder ; (; const RootFinder & ; ). delete . ◆ RootFinder() [3/3]. ROOT::Math::RootFinder::RootFinder ; (; RootFinder && ; ). delete . Member Function Documentation. ◆ Iterate(). int ROOT::Math::RootFinder::Iterate ; (; ). i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html:3161,failure,failure,3161,doc/master/classROOT_1_1Math_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html,1,['failure'],['failure']
Availability,ction has error status.; Returning maximum FCN so far (-848.597) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.577138 a1=-0.518554 mean=5.09299 nbkg=144.203 nsig=156.938 sig1frac=0.54541; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 740; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 730; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 720; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 710; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 700; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-814.549) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.848973 a1=-0.489149 mean=5.08811 nbkg=132.911 nsig=150.647 sig1frac=0.826731; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 690; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 680; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 670; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-809.662) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.713661 a1=-0.606754 mean=5.02862 nbkg=142.583 nsig=145.399 sig1frac=0.623944; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-861.002) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.744046 a1=-0.311529 mean=5.09799 nbkg=161.409 nsig=148.884 sig1frac=0.512806; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 660; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 650; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 640; [#0] PROGRESS:Generation -- RooMCStudy::run: sample ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:15251,error,errors,15251,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,4,['error'],"['error', 'errors']"
Availability,"ction must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Static Protected Attributes; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . Private Member Functions; virtual double DoIntegral (double a, double b, const IGenFunction *func);  Integration surrogate method. ;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::Math::GaussIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GaussIntegrator(). ROOT::Math::GaussIntegrator::~GaussIntegrator ; (; ). override . Destructor. ; Definition at line 44 of file GaussIntegrator.cxx. ◆ GaussIntegrator(). ROOT::Math::GaussIntegrator::GaussIntegrator ; (; double ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2985,error,error,2985,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['error'],['error']
Availability,"ction obsolete. ; Specify as of which version the method is obsolete and as from which version it will be removed. ; Definition at line 177 of file TError.cxx. ◆ SetErrorHandler(). ErrorHandlerFunc_t SetErrorHandler ; (; ErrorHandlerFunc_t ; newhandler). Set an errorhandler function. Returns the old handler. ; Definition at line 90 of file TError.cxx. ◆ SysError(). void SysError ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case a system (OS or GUI) related error occurred. ; Definition at line 196 of file TError.cxx. ◆ Warning(). void Warning ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in warning situations. ; Definition at line 229 of file TError.cxx. Variable Documentation. ◆ gErrorAbortLevel. Int_t gErrorAbortLevel. extern . Definition at line 32 of file TError.cxx. ◆ gErrorIgnoreLevel. Int_t gErrorIgnoreLevel. extern . Error handling routines. ; This file defines a number of global error handling routines: Warning(), Error(), SysError() and Fatal(). They all take a location string (where the error happened) and a printf style format string plus vararg's. In the end these functions call an errorhandler function. Initially the MinimalErrorHandler, which is supposed to be replaced by the proper DefaultErrorHandler() ; Definition at line 31 of file TError.cxx. ◆ gPrintViaErrorHandler. Bool_t gPrintViaErrorHandler. extern . Definition at line 33 of file TError.cxx. ◆ kAssertMsg. const char* kAssertMsg. extern . Definition at line 35 of file TError.cxx. ◆ kBreak. constexpr Int_t kBreak = 4000. constexpr . Definition at line 48 of file TError.h. ◆ kCheckMsg. const char* kCheckMsg. extern . Definition at line 36 of file TError.cxx. ◆ kError. constexpr Int_t kError = 3000. constexpr . Definition at line 47 of file TError.h. ◆ kFatal. constexpr Int_t kFatal = 6000. constexpr . Definition at line 50 of file TError.h. ◆ kInfo. constexpr Int_t kInfo = 1000. constexpr . Definition at line 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:8680,error,error,8680,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['error']
Availability,"ction return type, e,g.: ""class TDirectory*"". std::string GetReturnTypeNormalizedName() const; Get the normalized name of the return type. A normalized name is fully; qualified and has all typedef desugared except for the 'special' typedef; which include Double32_t, Float16_t, [U]Long64_t and std::string. It; also has std:: removed [This is subject to change]. Int_t GetNargs() const; Number of function arguments. Int_t GetNargsOpt() const; Number of function optional (default) arguments. Long_t Property() const; Get property description word. For meaning of bits see EProperty. Long_t ExtraProperty() const; Get property description word. For meaning of bits see EProperty. TDictionary::DeclId_t GetDeclId() const. void * InterfaceMethod() const; Return pointer to the interface method. Using this pointer we; can find which TFunction belongs to a CINT MethodInfo object.; Both need to have the same InterfaceMethod pointer. Bool_t IsValid(); Return true if this function object is pointing to a currently; loaded function. If a function is unloaded after the TFunction; is created, the TFunction will be set to be invalid. const char * GetMangledName() const; Returns the mangled name as defined by CINT, or 0 in case of error. const char * GetPrototype() const; Returns the prototype of a function as defined by CINT, or 0 in; case of error. void ls(Option_t* option = """") const; List TFunction name and title. void Print(Option_t* option = """") const; Print TFunction name and title. Bool_t Update(MethodInfo_t* info); Update the TFunction to reflect the new info. This can be used to implement unloading (info == 0) and then reloading; (info being the 'new' decl address). » Author: Fons Rademakers 07/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-02 15:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFunction.html:9877,error,error,9877,root/html604/TFunction.html,https://root.cern,https://root.cern/root/html604/TFunction.html,2,['error'],['error']
Availability,"ction return type, e,g.: ""class TDirectory*"". std::string GetReturnTypeNormalizedName() const; Get the normalized name of the return type. A normalized name is fully; qualified and has all typedef desugared except for the 'special' typedef; which include Double32_t, Float16_t, [U]Long64_t and std::string. It; also has std:: removed [This is subject to change]. Int_t GetNargs() const; Number of function arguments. Int_t GetNargsOpt() const; Number of function optional (default) arguments. Long_t Property() const; Get property description word. For meaning of bits see EProperty. Long_t ExtraProperty() const; Get property description word. For meaning of bits see EProperty. TDictionary::DeclId_t GetDeclId() const. void * InterfaceMethod() const; Return pointer to the interface method. Using this pointer we; can find which TFunction belongs to a CINT MethodInfo object.; Both need to have the same InterfaceMethod pointer. Bool_t IsValid(); Return true if this function object is pointing to a currently; loaded function. If a function is unloaded after the TFunction; is created, the TFunction will be set to be invalid. const char * GetMangledName() const; Returns the mangled name as defined by CINT, or 0 in case of error. const char * GetPrototype() const; Returns the prototype of a function as defined by CINT, or 0 in; case of error. void ls(Option_t* option = """") const; List TFunction name and title. void Print(Option_t* option = """") const; Print TFunction name and title. Bool_t Update(MethodInfo_t* info); Update the TFunction to reflect the new info. This can be used to implement unloading (info == 0) and then reloading; (info being the 'new' decl address). » Author: Fons Rademakers 07/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFunction.html:9588,error,error,9588,root/html602/TFunction.html,https://root.cern,https://root.cern/root/html602/TFunction.html,2,['error'],['error']
Availability,"ction should be called only fro...Definition TGraphMultiErrors.cxx:718; TGraphMultiErrors::fExHDouble_t * fExH[fNpoints] array of X high errorsDefinition TGraphMultiErrors.h:36; TGraphMultiErrors::SetPointEYvirtual void SetPointEY(Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH)Set ey values for point i.Definition TGraphMultiErrors.cxx:1885; TGraphMultiErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exL)Set exL value for point i.Definition TGraphMultiErrors.cxx:1853; TGraphMultiErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Int_t ne, const Double_t *eyH)Set eyH values for point i.Definition TGraphMultiErrors.cxx:1907; TGraphMultiErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphMultiErrors.cxx:1379; TGraphMultiErrors::fNYErrorsInt_t fNYErrorsThe amount of different y-errors.Definition TGraphMultiErrors.h:32; TGraphMultiErrors::fEyLstd::vector< TArrayD > fEyLTwo dimensional array of Y low errors.Definition TGraphMultiErrors.h:37; TGraphMultiErrors::GetErrorYDouble_t GetErrorY(Int_t i) const overrideGet error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1454; TGraphMultiErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphMultiErrors.cxx:933; TGraphMultiErrors::DoMergeBool_t DoMerge(const TGraph *tg) overrideProtected function to perform the merge operation of a graph with multiple asymmetric errors.Definition TGraphMultiErrors.cxx:838; TGraphMultiErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t i) const overrideGet high error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1530; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TVectorTTVectorT.Definition TVectorT.h:27; bool; double; int; yDouble_t y[n]Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:25197,error,errors,25197,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['errors']
Availability,"ction to check for common elements. ; [out]outCollOutput collection. . Definition at line 807 of file RooAbsCollection.cxx. ◆ setAttribAll(). void RooAbsCollection::setAttribAll ; (; const Text_t * ; name, . bool ; value = true . ). Set given attribute in each element of the collection by calling each elements setAttribute() function. ; Definition at line 768 of file RooAbsCollection.cxx. ◆ setCatIndex(). bool RooAbsCollection::setCatIndex ; (; const char * ; name, . Int_t ; newVal = 0, . bool ; verbose = false . ). Set index value of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1075 of file RooAbsCollection.cxx. ◆ setCatLabel(). bool RooAbsCollection::setCatLabel ; (; const char * ; name, . const char * ; newVal = """", . bool ; verbose = false . ). Set state name of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1032 of file RooAbsCollection.cxx. ◆ setHashTableSize(). void RooAbsCollection::setHashTableSize ; (; Int_t ; number). inline . Set the size at which the collection will automatically start using an extra lookup table instead of performing a linear search. ; Definition at line 106 of file RooAbsCollection.h. ◆ setName(). void RooAbsCollection::setName ; (; const char * ; name). inline . Definition at line 361 of file RooAbsCollection.h. ◆ setRealValue(). bool RooAbsCollection::setRealValue ; (; const char * ; name, . double ; newVal = 0.0, . bool ; verbose = false . ). Set value of a RooAbsRealLValue stored in set with given name to newVal No error messages are printed unless the verbose flag is set. ; Definition at line 989 of file RooAbsCollection.cxx. ◆ setStringValue(). bool RooAbsCollection::setStringValue ; (; const char * ; name, . const char * ; newVal = """", . bool ; verbose = false . ). Set string value of a RooStringVar stored in set with given name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:58351,error,error,58351,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['error'],['error']
Availability,"ction to check for common elements. ; [out]outCollOutput collection. . Definition at line 817 of file RooAbsCollection.cxx. ◆ setAttribAll(). void RooAbsCollection::setAttribAll ; (; const Text_t * ; name, . bool ; value = true . ). Set given attribute in each element of the collection by calling each elements setAttribute() function. ; Definition at line 778 of file RooAbsCollection.cxx. ◆ setCatIndex(). bool RooAbsCollection::setCatIndex ; (; const char * ; name, . Int_t ; newVal = 0, . bool ; verbose = false . ). Set index value of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1085 of file RooAbsCollection.cxx. ◆ setCatLabel(). bool RooAbsCollection::setCatLabel ; (; const char * ; name, . const char * ; newVal = """", . bool ; verbose = false . ). Set state name of a RooAbsCategoryLValue stored in set with given name to newVal. ; No error messages are printed unless the verbose flag is set ; Definition at line 1042 of file RooAbsCollection.cxx. ◆ setHashTableSize(). void RooAbsCollection::setHashTableSize ; (; Int_t ; number). inline . Set the size at which the collection will automatically start using an extra lookup table instead of performing a linear search. ; Definition at line 106 of file RooAbsCollection.h. ◆ setName(). void RooAbsCollection::setName ; (; const char * ; name). inline . Definition at line 338 of file RooAbsCollection.h. ◆ setRealValue(). bool RooAbsCollection::setRealValue ; (; const char * ; name, . double ; newVal = 0.0, . bool ; verbose = false . ). Set value of a RooAbsRealLValue stored in set with given name to newVal No error messages are printed unless the verbose flag is set. ; Definition at line 999 of file RooAbsCollection.cxx. ◆ setStringValue(). bool RooAbsCollection::setStringValue ; (; const char * ; name, . const char * ; newVal = """", . bool ; verbose = false . ). Set string value of a RooStringVar stored in set with given name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:56568,error,error,56568,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['error'],['error']
Availability,"ction will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. TH1D * ProjectionX(const char* name = ""_px"", Int_t iymin = 0, Int_t iymax = -1, Int_t izmin = 0, Int_t izmax = -1, Option_t* option = """") const; Project a 3-D histogram into a 1-D histogram along X. The projection is always of the type TH1D.; The projection is made from the cells along the X axis; ranging from iymin to iymax and izmin to izmax included.; By default, underflow and overflows are included in both the Y and Z axis.; By Setting iymin=1 and iymax=NbinsY the underflow and/or overflow in Y will be excluded; By setting izmin=1 and izmax=NbinsZ the underflow and/or overflow in Z will be excluded. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * ProjectionY(const char* name = ""_py"", Int_t ixmin = 0, Int_t ixmax = -1, Int_t izmin = 0, Int_t izmax = -1, Option_t* option = """") const; Project a 3-D histogram into a 1-D histogram along Y. The projection is always of the type TH1D.; The projection is made from the cells along the Y axis; ranging from ixmin to ixmax and izmin to izmax included.; By default, underflow and overflow are included in both the X and Z axis.; By setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded; By setting izmin=1 and izmax=NbinsZ the underflow and/or overflow in Z w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:43072,error,errors,43072,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,2,['error'],['errors']
Availability,"ction"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:62271,error,error,62271,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,2,['error'],['error']
Availability,"ction"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumili",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:54629,error,error,54629,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['error'],['error']
Availability,"ction"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:61137,error,error,61137,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['error'],['error']
Availability,"ction*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. private:. set<void*>fDirPtrs; XrdCl::FileSystem*fFileSystemCached for convenience; XrdCl::URL*fUrlURL of this TSystem. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNetXNGSystem(Bool_t owner = kTRUE); Constructor: Create system class without connecting to server. param owner: (unused). TNetXNGSystem(const char* url, Bool_t owner = kTRUE); Constructor: Create system class and connect to server. param url: URL of the entry-point server to be contacted; param owner: (unused). ~TNetXNGSystem(); Destructor. void* OpenDirectory(const char* dir); Open a directory. param dir: the name of the directory to open; returns: a non-zero pointer (with no special purpose) in case of; success, 0 in case of error. Int_t MakeDirectory(const char* dir); Create a directory. param dir: the directory name; returns: 0 on success, -1 otherwise. void FreeDirectory(void* dirp); Free a directory. param dirp: the pointer to the directory to be freed. const char* GetDirEntry(void* dirp); Get a directory entry. param dirp: the directory pointer; returns: 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file (stat). param path: the path of the file to stat (in); param buf: structure that will hold the stat info (out); returns: 0 if success, 1 if the file could not be stat'ed. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required by 'path' or; 'dirptr'. param path: the path to check; param dirptr: the directory pointer to check. int Unlink(const char* path); Unlink a file on the remote server. param path: the path of the file t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetXNGSystem.html:20582,error,error,20582,root/html602/TNetXNGSystem.html,https://root.cern,https://root.cern/root/html602/TNetXNGSystem.html,2,['error'],['error']
Availability,"ction*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t ProcessEvents(); Process pending events (GUI, timers, sockets). Returns the re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:18126,error,error,18126,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,5,['error'],['error']
Availability,"ction, but location or scale different parameters,; they should still fall on the straight line, but not the 45 degrees one.; The greater their departure from the straight line, the more evidence there; is, that the datasets come from different distributions.; The advantage of qq-plot is that it not only shows that the underlying; distributions are different, but, unlike the analytical methods, it also; gives information on the nature of this difference: heavier tails,; different location/scale, different shape, etc. Some examples of qqplots of 2 datasets:. /*. */. 1 dataset:; Quantile-quantile plots are used to determine if the dataset comes from the; specified theoretical distribution, such as normal.; A qq-plot draws quantiles of the dataset against quantiles of the specified; theoretical distribution.; (NOTE, that density, not CDF should be specified); A straight line, going through 0.25 and 0.75 quantiles can also be plotted; for reference. It represents a robust linear fit, not sensitive to the; extremes of the dataset.; As in the 2 datasets case, departures from straight line indicate departures; from the specified distribution. "" The correlation coefficient associated with the linear fit to the data ; in the probability plot (qq plot in our case) is a measure of the; goodness of the fit.; Estimates of the location and scale parameters of the distribution; are given by the intercept and slope. Probability plots can be generated; for several competing distributions to see which provides the best fit,; and the probability plot generating the highest correlation coefficient; is the best choice since it generates the straightest probability plot.""; From ""Engineering statistic handbook"",; http://www.itl.nist.gov/div898/handbook/eda/section3/probplot.htm. Example of a qq-plot of a dataset from N(3, 2) distribution and; TMath::Gaus(0, 1) theoretical function. Fitting parameters; are estimates of the distribution mean and sigma. /*. */; //. References:; http://www.it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphQQ.html:2028,robust,robust,2028,root/html528/TGraphQQ.html,https://root.cern,https://root.cern/root/html528/TGraphQQ.html,4,['robust'],['robust']
Availability,"ction, but location or scale different parameters,; they should still fall on the straight line, but not the 45 degrees one.; The greater their departure from the straight line, the more evidence there; is, that the datasets come from different distributions.; The advantage of qq-plot is that it not only shows that the underlying; distributions are different, but, unlike the analytical methods, it also; gives information on the nature of this difference: heavier tails,; different location/scale, different shape, etc. Some examples of qqplots of 2 datasets:. /*. */. 1 dataset:; Quantile-quantile plots are used to determine if the dataset comes from the; specified theoretical distribution, such as normal.; A qq-plot draws quantiles of the dataset against quantiles of the specified; theoretical distribution.; (NOTE, that density, not CDF should be specified); A straight line, going through 0.25 and 0.75 quantiles can also be plotted; for reference. It represents a robust linear fit, not sensitive to the; extremes of the dataset.; As in the 2 datasets case, departures from straight line indicate departures; from the specified distribution. "" The correlation coefficient associated with the linear fit to the data; in the probability plot (qq plot in our case) is a measure of the; goodness of the fit.; Estimates of the location and scale parameters of the distribution; are given by the intercept and slope. Probability plots can be generated; for several competing distributions to see which provides the best fit,; and the probability plot generating the highest correlation coefficient; is the best choice since it generates the straightest probability plot.""; From ""Engineering statistic handbook"",; http://www.itl.nist.gov/div898/handbook/eda/section3/probplot.htm. Example of a qq-plot of a dataset from N(3, 2) distribution and; TMath::Gaus(0, 1) theoretical function. Fitting parameters; are estimates of the distribution mean and sigma. /*. */; //. References:; http://www.itl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphQQ.html:2028,robust,robust,2028,root/html602/TGraphQQ.html,https://root.cern,https://root.cern/root/html602/TGraphQQ.html,2,['robust'],['robust']
Availability,"ction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relative amplitude of step), for details see html manual and references; �� Double_t�; fSxyCalc;���������������������� //calculated value of s parameter for 2D peaks; �� Double_t�; fSxyErr;����������������������� //error value of s parameter for 2D peaks; �� Double_t�; fTxInit;����������������������� //initial value of t parameter for 1D ridges in; x direction (relative amplitude of tail), for details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:43275,error,error,43275,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['error'],['error']
Availability,"ction. ; startStarting point for iteration. ; maxIterMaximum number of iterations, passed to Solve(int,double,double) ; absTolAbsolute tolerance, as in Solve(int,double,double) ; relTolRelative tolerance, passed to Solve(int,double,double) . Returnstrue if a root was found. Retrieve the result using Root(). ; Definition at line 219 of file RootFinder.h. ◆ Solve() [2/3]. template<class Function > . bool ROOT::Math::RootFinder::Solve ; (; Function & ; f, . double ; min, . double ; max, . int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). Solve f(x) = 0 numerically. ; Parameters. fFunction whose root should be found. ; minMinimum allowed value of x. ; maxMaximum allowed value of x. ; maxIterMaximum number of iterations, passed to Solve(int,double,double) ; absTolAbsolute tolerance, as in Solve(int,double,double) ; relTolRelative tolerance, passed to Solve(int,double,double) . Returnstrue if a root was found. Retrieve the result using Root(). ; Definition at line 240 of file RootFinder.h. ◆ Solve() [3/3]. bool ROOT::Math::RootFinder::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). inline . Compute the roots iterating until the estimate of the Root is within the required tolerance returning the iteration Status. ; Definition at line 134 of file RootFinder.h. ◆ Status(). int ROOT::Math::RootFinder::Status ; (; ); const. inline . Return the status of the last estimate of the Root = 0 OK, not zero failure. ; Definition at line 163 of file RootFinder.h. Member Data Documentation. ◆ fSolver. IRootFinderMethod* ROOT::Math::RootFinder::fSolver. private . Definition at line 195 of file RootFinder.h. Libraries for ROOT::Math::RootFinder:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/RootFinder.h; math/mathcore/src/RootFinder.cxx. ROOTMathRootFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html:7923,toler,tolerance,7923,doc/master/classROOT_1_1Math_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html,2,"['failure', 'toler']","['failure', 'tolerance']"
Availability,"ction::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjArray.html:3602,error,error,3602,root/html528/TObjArray.html,https://root.cern,https://root.cern/root/html528/TObjArray.html,1,['error'],['error']
Availability,"ction::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRefArray.html:4121,error,error,4121,root/html528/TRefArray.html,https://root.cern,https://root.cern/root/html528/TRefArray.html,1,['error'],['error']
Availability,"ction; Double_tfSxErrerror value of s parameter for 1D ridges in x direction; Double_tfSxInitinitial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references; Double_tfSxyCalccalculated value of s parameter for 2D peaks; Double_tfSxyErrerror value of s parameter for 2D peaks; Double_tfSxyInitinitial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references; Double_tfSyCalccalculated value of s parameter for 1D ridges in y direction; Double_tfSyErrerror value of s parameter for 1D ridges in y direction; Double_tfSyInitinitial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references; TStringTNamed::fTitleobject title; Double_tfTxCalccalculated value of t parameter for 1D ridges in x direction; Double_tfTxErrerror value of t parameter for 1D ridges in x direction; Double_tfTxInitinitial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references; Double_tfTxyCalccalculated value of t parameter for 2D peaks; Double_tfTxyErrerror value of t parameter for 2D peaks; Double_tfTxyInitinitial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references; Double_tfTyCalccalculated value of t parameter for 1D ridges in y direction; Double_tfTyErrerror value of t parameter for 1D ridges in y direction; Double_tfTyInitinitial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references; Double_t*fVolume[fNPeaks] array of calculated volumes of 2D peaks, output parameters; Double_t*fVolumeErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:21721,error,errors,21721,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['error'],['errors']
Availability,"ction; TStatus*fStatus; Long64_tTSelector::fStatusselector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TProofDraw.h 39173 2011-05-12 18:04:44Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDraw.html:8538,error,error,8538,root/html530/TProofDraw.html,https://root.cern,https://root.cern/root/html530/TProofDraw.html,1,['error'],['error']
Availability,"ction; TStatus*fStatus; Long64_tTSelector::fStatusselector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TProofDraw.h 39173 2011-05-12 18:04:44Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofDraw.html:8538,error,error,8538,root/html532/TProofDraw.html,https://root.cern,https://root.cern/root/html532/TProofDraw.html,1,['error'],['error']
Availability,"ctionMinimizer * GetMinimizer () const;  ; int RunMinosError (unsigned int i, double &errLow, double &errUp, int runopt);  ; bool SetCovariance (std::span< const double > cov, unsigned int nrow) override;  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n) override;  set initial second derivatives ;  ; virtual void SetMinimizer (ROOT::Minuit2::ModularFunctionMinimizer *m);  ; void SetMinimizerType (ROOT::Minuit2::EMinimizerType type);  . Private Attributes; unsigned int fDim;  ; std::vector< double > fErrors;  ; ROOT::Minuit2::ModularFunctionMinimizer * fMinimizer;  ; ROOT::Minuit2::FunctionMinimum * fMinimum;  ; int fMinosStatus = -1;  ; ROOT::Minuit2::FCNBase * fMinuitFCN;  ; ROOT::Minuit2::MnUserParameterState fState;  ; bool fUseFumili;  ; std::vector< double > fValues;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Minuit2/Minuit2Minimizer.h>. Inheritance diagram for ROOT::Minuit2::Minuit2Minimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Minuit2Minimizer() [1/2]. ROOT::Minuit2::Minuit2Minimizer::Minuit2Minimizer ; (; ROOT::Minuit2::EMinimizerType ; type = ROOT::Minuit2::kMigrad). Default constructor. ; Definition at line 86 of file Minuit2Minimizer.cxx. ◆ Minuit2Minimizer() [2/2]. ROOT::Minuit2::Minuit2Minimizer::Minuit2Minimizer ; (; const char * ; type). Constructor with a char (used by PM) ; Definition at line 93 of file Minuit2Minimizer.cxx. ◆ ~Minuit2Minimizer(). ROOT::Minuit2::Minuit2Minimizer::~Minuit2Minimizer ; (; ). override . Destructor (no operations) ; Definition at line 145 of file Minuit2Minimizer.cxx. Member Function Docume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:12212,error,errors,12212,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['error'],['errors']
Availability,"ctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:7259,error,errors,7259,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['error'],['errors']
Availability,"ctionOneDim. class ROOT::Math::IGradientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. This class is also known as (typedefs to this class)ROOT::Math::IParametricGradFunctionOneDim::BaseGradFunc, ROOT::Math::IGradFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__IGradientFunctionOneDim.html:1282,avail,available,1282,root/html534/ROOT__Math__IGradientFunctionOneDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__IGradientFunctionOneDim.html,1,['avail'],['available']
Availability,"ctionTemplates::Get ; (; DeclId_t ; id). Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ; Definition at line 253 of file TListOfFunctionTemplates.cxx. ◆ GetListForObject() [1/2]. TList * TListOfFunctionTemplates::GetListForObject ; (; const char * ; name); const. virtual . Return the set of overloads for this name, collecting all available ones. ; Can construct and insert new TFunction-s. ; Definition at line 233 of file TListOfFunctionTemplates.cxx. ◆ GetListForObject() [2/2]. TList * TListOfFunctionTemplates::GetListForObject ; (; const TObject * ; obj); const. virtual . Return the set of overloads for function obj, collecting all available ones. ; Can construct and insert new TFunction-s. ; Definition at line 242 of file TListOfFunctionTemplates.cxx. ◆ GetListForObjectNonConst(). TList * TListOfFunctionTemplates::GetListForObjectNonConst ; (; const char * ; name). private . Return the set of overloads for this name, collecting all available ones. ; Can construct and insert new TFunction-s. ; Definition at line 194 of file TListOfFunctionTemplates.cxx. ◆ IsA(). TClass * TListOfFunctionTemplates::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from THashList.; Definition at line 87 of file TListOfFunctionTemplates.h. ◆ Load(). void TListOfFunctionTemplates::Load ; (; ). Load all the functions known to the interpreter for the scope 'fClass' into this collection. ; Definition at line 356 of file TListOfFunctionTemplates.cxx. ◆ MapObject(). void TListOfFunctionTemplates::MapObject ; (; TObject * ; obj). private . Add pair<id, object> to the map of functions and their ids. ; Definition at line 53 of file TListOfFunctionTemplates.cxx. ◆ operator=(). TListOfFunctionTemplates & TListOfFunctionTemplates::operator= ; (; const TListOfFunctionTemplates & ; ). privatedelete . ◆ RecursiveRemove(). void TListOfFunctionTemplates::RecursiveRemove ; (; TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctionTemplates.html:29461,avail,available,29461,doc/master/classTListOfFunctionTemplates.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html,1,['avail'],['available']
Availability,"ctionary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TDictionary. class TDictionary: public TNamed. TDictionary. This class defines an abstract interface that must be implemented; by all classes that contain dictionary information. The dictionary is defined by the followling classes:; TDataType (typedef definitions); TGlobal (global variables); TGlobalFunc (global functions); TClass (classes); TBaseClass (base classes); TDataMember (class datamembers); TMethod (class methods); TMethodArg (method arguments). All the above classes implement the TDictionary abstract interface.; Note: the indentation shows aggregation not inheritance. TMethodCall (method call environment). /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TDictionary(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDictionary.html:1013,avail,available,1013,root/html528/TDictionary.html,https://root.cern,https://root.cern/root/html528/TDictionary.html,3,['avail'],['available']
Availability,"ctionary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TDictionary. class TDictionary: public TNamed. TDictionary. This class defines an abstract interface that must be implemented; by all classes that contain dictionary information. The dictionary is defined by the followling classes:; TDataType (typedef definitions); TGlobal (global variables); TGlobalFunc (global functions); TClass (classes); TBaseClass (base classes); TDataMember (class datamembers); TMethod (class methods); TMethodArg (method arguments). All the above classes implement the TDictionary abstract interface.; Note: the indentation shows aggregation not inheritance. TMethodCall (method call environment). /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TDictionary(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDictionary.html:1013,avail,available,1013,root/html534/TDictionary.html,https://root.cern,https://root.cern/root/html534/TDictionary.html,3,['avail'],['available']
Availability,"ctions and the combination function:; // Quadratic background function; Double_t background(Double_t *x, Double_t *par) {; return par[0] + par[1]*x[0] + par[2]*x[0]*x[0];; }. // Lorentzian Peak function; Double_t lorentzianPeak(Double_t *x, Double_t *par) {; return (0.5*par[0]*par[1]/TMath::Pi()) / TMath::Max(1.e-10,; (x[0]-par[2])*(x[0]-par[2])+ .25*par[1]*par[1]);; }. // Sum of background and peak function; Double_t fitFunction(Double_t *x, Double_t *par) {; return background(x,par) + lorentzianPeak(x,&par[3]);; }. void FittingDemo() {; // bevington exercise by P. Malzacher, modified by R. Brun; const int nBins = 60;; Stat_t data[nBins] = { 6, 1,10,12, 6,13,23,22,15,21,; 23,26,36,25,27,35,40,44,66,81,; 75,57,48,45,46,41,35,36,53,32,; 40,37,38,31,36,44,42,37,32,32,; 43,44,35,33,33,39,29,41,32,44,; 26,39,29,35,32,21,21,15,25,15};; TH1F *histo = new TH1F(""example_9_1"",; ""Lorentzian Peak on Quadratic Background"",60,0,3);. for(int i=0; i < nBins; i++) {; // we use these methods to explicitly set the content; // and error instead of using the fill method.; histo->SetBinContent(i+1,data[i]);; histo->SetBinError(i+1,TMath::Sqrt(data[i]));; }; // create a TF1 with the range from 0 to 3 and 6 parameters; TF1 *fitFcn = new TF1(""fitFcn"",fitFunction,0,3,6);. // first try without starting values for the parameters; // this defaults to 1 for each param.; histo->Fit(""fitFcn"");; // this results in an ok fit for the polynomial function however; // the non-linear part (Lorentzian. The output of the FittingDemo() example. 5.5 Result of the fit; Here we will show how to obtain the result of the fit (fitted function, parameter values, errors and eventually the covariance and correlation matrix).; 5.5.1 Associated Function; One or more objects (typically a TF1\*) can be added to the list of functions (fFunctions) associated to each histogram. A call to TH1::Fit adds the fitted function to this list. Given a histogram h, one can retrieve the associated function with:; TF1 *myfunc = h->Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:178865,error,error,178865,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"ctions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and upper (xxmax) values for the fitting range;; define a specific range in the fitted function and use the fitting option ""R"". For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do:. TF1 *f1 = new TF1(""f1"", ""gaus"", 1, 3);; histo->Fit(""f1"", ""R"");; f1TF1 * f1Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:137254,error,error,137254,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"ctions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager for EVE windows. ; Provides the concept of the current window and takes care for proper destruction of the windows.; It is also the EVE-parent of windows that are not attached into the hierarchy of EVE-windows.; Window-manager is created by the EVE-manager and can be retrieved via: gEve->GetWindowManager.; gEveR__EXTERN TEveManager * gEveDefinition TEveManager.h:243; TEveManager::GetWindowManagerTEveWindowManager * GetWindowManager() constDefinition TEveManager.h:142. Definition at line 21 of file TEveWindowManager.h. Public Member Functions;  TEveWindowManager (const char *n=""TEveWindowManager"", const char *t="""");  Constructor. ;  ;  ~TEveWindowManager () override;  Destructor. ;  ; void DeleteWindow (TEveWindow *w);  Called by a window before it gets deleted. ;  ; void DestroyWindows ();  Wait for all windows to shut-down. ;  ; TEveWindow * GetCurrentWindow () const;  ; TEveWindowSlot * GetCurrentWindowAsSlot () const;  Return current window dynamic-casted to TEveWindowSlot. ;  ; TEveWindow * GetDefaultContainer () const;  ; Bool_t HasDefaultContainer () const;  ; void HideAllEveDecorations ();  Hide all eve decorations (title-bar and mini-bar) on all frames. ;  ; TClass * IsA () const override;  ; Bool_t IsCurrentWindow (const TEveWindow *w) const;  ; void SelectWindow (TEveWindow *w);  Entry-point for communicating the fact that a window was acted upon in such a way that it should become the current window. ;  ; void SetDefaultContainer (TEveWindow *w);  ; void SetShowTitleBars (Bool_t state);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Show eve decorations (title-bar or mini-bar) as specified for the contained window on all frames. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowManager.html:1226,down,down,1226,doc/master/classTEveWindowManager.html,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html,1,['down'],['down']
Availability,"ctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); -*-*-*-*-*Display a panel with all histogram fit options*-*-*-*-*-*. See class TFitPanel for example. Option_t * GetGraphDrawOption(const TGraph* gr) const; Return the draw option for the TGraph gr in this TMultiGraph; The return option is the one specified when calling TMultiGraph::Add(gr,option). void InitGaus(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin, Double_t xmax); Compute Initial values of parameters for an exponential. void InitPolynom(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a polynom. void LeastSquareFit(Int_t m, Double_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiGraph.html:14812,error,errors,14812,root/html528/TMultiGraph.html,https://root.cern,https://root.cern/root/html528/TMultiGraph.html,3,['error'],['errors']
Availability,"ctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a panel with all histogram fit options.; See class TFitPanel for example. Option_t * GetGraphDrawOption(const TGraph* gr) const; Return the draw option for the TGraph gr in this TMultiGraph.; The return option is the one specified when calling TMultiGraph::Add(gr,option). void InitGaus(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin, Double_t xmax); Compute Initial values of parameters for an exponential. void InitPolynom(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a polynom. void LeastSquareFit(Int_t m, Double_t* a, Double_t xmin, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiGraph.html:21254,error,errors,21254,root/html534/TMultiGraph.html,https://root.cern,https://root.cern/root/html534/TMultiGraph.html,3,['error'],['errors']
Availability,"ctions:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooRealConstant. class RooRealConstant. RooRealConstant provides static functions to create and keep track; of RooRealVar constants. Instead of creating such constants by; hand (e.g. RooRealVar one(""one"",""one"",1)), simply use; ; RooRealConstant::value(1.0); ; whenever a reference to RooRealVar with constant value 1.0 is needed.; RooRealConstant keeps an internal database of previously created; RooRealVar objects and will recycle them as appropriate.; . Function Members (Methods); public:. virtual~RooRealConstant(); static TClass*Class(); static voidcleanup(); virtual TClass*IsA() const; RooRealConstant&operator=(const RooRealConstant&); static RooConstVar&removalDummy(); RooRealConstant(); RooRealConstant(const RooRealConstant&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static RooConstVar&value(Double_t value). protected:. static voidinit(). Data Members; protected:. static RooArgList*_constDBList of already instantiated constants; static TIterator*_constDBIterIterator over constants list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup function register with RooSentinel for cleanup in atexit(). RooConstVar& value(Double_t value); Return a constant value object with given value.; Return previously created object if available,; otherwise create a new one on the fly. RooConstVar& removalDummy(); Create a dummy node used in node-removal operations. void init(); One-time initialization of constants database. inline RooRealConstant(); {}. virtual ~RooRealConstant(); {}. » Last changed: Tue Jun 2 15:33:20 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooRealConstant.html:1666,avail,available,1666,root/html604/RooRealConstant.html,https://root.cern,https://root.cern/root/html604/RooRealConstant.html,1,['avail'],['available']
Availability,"ctions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSocket * CreateAuthSocket (const char *url, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server. ;  ; static TSocket * CreateAuthSocket (const char *user, const char *host, Int_t port, Int_t size=0, Int_t tcpwindowsize=-1, TSocket *s=nullptr, Int_t *err=nullptr);  Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ;  ; static const char * DeclFileName ();  ; static Int_t GetClientProtocol ();  Static method returning supported client protocol. ;  ; static ULong64_t GetSocketBytesRecv ();  Get total number of bytes received via all sockets. ;  ; static ULong64_t GetSocketBytesSent ();  Get total number of bytes sent via all sockets. ;  ; static void NetError (const char *where, Int_t error);  Print error string depending on error code. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:14672,error,error,14672,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,3,['error'],['error']
Availability,"ctions`.; 4099///; 4100/// \anchor HFitStatus; 4101/// ### Fit status; 4102///; 4103/// The status of the fit is obtained converting the TFitResultPtr to an integer; 4104/// independently if the fit option ""S"" is used or not:; 4105///; 4106/// ~~~ {.cpp}; 4107/// TFitResultPtr r = h->Fit(myFunc,opt);; 4108/// Int_t fitStatus = r;; 4109/// ~~~; 4110///; 4111/// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; 4112/// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; 4113/// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; 4114/// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; 4115/// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; 4116/// only in Minos but not in Migrad a fitStatus of 40 will be returned.; 4117/// Minuit2 returns 0 in case of success and different values in migrad,minos or; 4118/// hesse depending on the error. See in this case the documentation of; 4119/// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; 4120/// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; 4121/// If other minimizers are used see their specific documentation for the status code returned.; 4122/// For example in the case of Fumili, see TFumili::Minimize.; 4123///; 4124/// \anchor HFitRange; 4125/// ### Fitting in a range; 4126///; 4127/// In order to fit in a sub-range of the histogram you have two options:; 4128/// - pass to this function the lower (`xxmin`) and upper (`xxmax`) values for the fitting range;; 4129/// - define a specific range in the fitted function and use the fitting option ""R"".; 4130/// For example, if your histogram has a defined range between -4 and 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:168838,error,error,168838,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"ctive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:2835,mask,mask,2835,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['mask'],['mask']
Availability,"ctive graphical editing operations ;  greyscale.C Create grey scale of 200 x 200 boxes ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  bent.py Bent error bars ;  exclusiongraph.C Draw three graphs wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:113391,avail,available,113391,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['avail'],['available']
Availability,"ctor constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Get variable buffer. TTreeFormula* GetVar(Int_t i) const; Get variable formula. void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelectorDraw.html:10128,avail,available,10128,root/html528/TSelectorDraw.html,https://root.cern,https://root.cern/root/html528/TSelectorDraw.html,1,['avail'],['available']
Availability,"ctor from a C array; 13.13.1.2 Accessing and Setting Methods; The single vector elements can be set or retrieved using the operator[i], operator(i) or the iterator interface. Notice that the index starts from zero and not from one as in FORTRAN. Also no check is performed on the passed index. The full vector elements can be set also by using the SetElements function passing a generic iterator.; double x = m(i); // return the i-th element; x = *(m.begin()+i); // return the i-th element; v[0] = 1; // set the first element; v(1) = 2; // set the second element; *(v.begin()+3) = 3; // set the third element; std::vector<double> w(3);. // set vector elements from a std::vector<double>::iterator; v.SetElements(w.begin(),w.end());; In addition there are methods to place a sub-vector in a vector. If the size of the sub-vector is larger than the vector size a static assert (a compilation error) is produced.; SVector>double,N> v;; SVector>double,M> w;; // M <= N otherwise a compilation error is obtained later; // place a vector of size M starting from; // element ioff, v[ioff+i]=w[i]; v.Place_at(w,ioff);; // return a sub-vector of size M starting from; // v[ioff]: w[i]=v[ioff+i]; w = v.Sub < SVector>double,M> > (ioff);; For the vector functions see later in the Matrix and Vector Operators and Functions paragraph.; 13.13.2 Example: Matrix Class (SMatrix); The template class ROOT::Math::SMatrix represents a matrix of arbitrary type with nrows x ncol dimension. The class has 4 template parameters, which define at compile time, its properties:. type of the contained elements, T, for example float or double;; number of rows;; number of columns;; representation type. This is a class describing the underlined storage model of the Matrix. Presently exists only two types of this class:; ROOT::Math::MatRepStd for a general nrows x ncols matrix. This class is itself a template on the contained type T, the number of rows and the number of columns. Its data member is an array T[nrows*ncols] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:752871,error,error,752871,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"ctor of efficiencies. E^-1 = ((A# Vyy^-1 A)+tau^2 Lsquared). x = E (A# Vyy^-1 y + tau^2 Lsquared x0 +lambda/2 * epsilon) is the result. The derivatives; dx_k/dy_i; dx_k/dA_ij; dx_k/d(tau^2); are calculated for further usage. The covariance matrix V_xx is calculated as:; Vxx_ij = sum_kl dx_i/dy_k Vyy_kl dx_j/dy_l. Warning:. The algorithm is based on ""standard"" matrix inversion, with the; known limitations in numerical accuracy and computing cost for; matrices with large dimensions. Thus the algorithm should not used for large dimensions of x and y; nx should not be much larger than 200; ny should not be much larger than 1000. Proper choice of tau. One of the difficult questions is about the choice of tau.; The method implemented in TUnfold is the L-curve method:; a two-dimensional curve is plotted; x-axis: log10(chisquare); y-axis: log10(regularisation condition); In many cases this curve has an L-shape. The best choice of tau is in the; kink of the L. Within TUnfold a simple version of the L-curve analysis is available.; It tests a given number of points in a predefined tau-range and searches; for the maximum of the curvature in the L-curve (kink position).; if no tau range is given, the range of the scan is determined automatically. A nice overview of the L-curve method is given in:; The L-curve and Its Use in the Numerical Treatment of Inverse Problems; (2000) by P. C. Hansen, in Computational Inverse Problems in; Electrocardiology, ed. P. Johnston,; Advances in Computational Bioengineering; http://www.imm.dtu.dk/~pch/TR/Lcurve.ps. Alternative Regularisation conditions. Regularisation is needed for most unfolding problems, in order to avoid; large oscillations and large correlations on the output bins.; It means that some extra conditions are applied on the output bins. Within TUnfold these conditions are posed on the difference (x-x0), where; x: unfolding output; x0: the bias distribution, by default calculated from; the input matrix A. There is a method SetBias(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:4913,avail,available,4913,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['avail'],['available']
Availability,"ctor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const char * GetLinkedLibraries () override;  Get list of shared libraries loaded at the start of the executable. ;  ;  Protected Member Functions inherited from TSystem; virtual Bool_t ConsistentWith (const char *path, void *dirptr=nullptr);  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local storage for the custom last error message. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static int UnixFilestat (const char *path, FileStat_t &buf);  Get info about a file. ;  ; static int UnixFSstat (const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *bfree);  Get info about a file system: id, bsize, bfree, blocks. ;  ; static const char * UnixGetdirentry (void *dir);  Returns the next directory entry. ;  ; static const char * UnixHomedirectory (const char *user, char *path, char *mydir);  Returns the user's home directory. ;  ; static const char * UnixHomedirectory (const char *user=nullptr);  Returns the user's home directory. ;  ; stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:31243,error,error,31243,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['error'],['error']
Availability,"ctor with option for the method of minimization, can be any of the following: ""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"", ""Brent"" (Brent only for 1D minimization); See R optim or optimx descriptions for more details and options. ; Definition at line 38 of file RMinimizer.cxx. ◆ ~RMinimizer(). ROOT::Math::RMinimizer::~RMinimizer ; (; ). inlineoverride . Destructor. ; Definition at line 53 of file RMinimizer.h. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::RMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. inlineoverridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 68 of file RMinimizer.h. ◆ Errors(). const double * ROOT::Math::RMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 63 of file RMinimizer.h. ◆ GetCovMatrix(). bool ROOT::Math::RMinimizer::GetCovMatrix ; (; double * ; covMat); const. inlineoverridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 79 of file RMinimizer.h. ◆ HessMatrix(). double ROOT::Math::RMinimizer::HessMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. Returns the ith jth component of the Hessian matrix. . ◆ Minimize(). bool ROOT::Math::RMinimizer::Minimize ; (; ). overridevirtual . Function to find the minimum. ; function for finding the minimum ; Reimplemented from ROOT::Math::BasicMinimi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html:13032,error,errors,13032,doc/master/classROOT_1_1Math_1_1RMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html,1,['error'],['errors']
Availability,"ctor&); virtual voidTGTextView::ShowTop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); boolios_base::sync_with_stdio(bool sync = true); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; basic_ostream<char,char_traits<char> >::pos_typebasic_ostream<char,char_traits<char> >::tellp(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie() const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie(basic_ostream<char,char_traits<char> >* tie_arg); virtual Long_tTGTextView::ToObjXCoord(Long_t xCoord, Long_t line); virtual Long_tTGTextView::ToObjYCoord(Long_t yCoord); TGLongPositionTGView::ToPhysical(TGLongPosition coord) const; virtual Long_tTGTextView::ToScrXCoord(Long_t xCoord, Long_t line); virtual Long_tTGTextView::ToScrYCoord(Long_t yCoord); TGLongPositionTGView::ToVirtual(TGLongPosition coord) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidios_base::unsetf(ios_base::fmtflags mask); virtual voidTGTextView::Update(); virtual voidTGView::UpdateBackgroundStart(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; charbasic_ios<char,char_traits<char> >::widen(char) const; Int_tTGWidget::WidgetId() const; streamsizeios_base::width() const; streamsizeios_base::width(streamsize wide); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::write(const basic_ostream<char,char_traits<char> >::char_type* s, streamsize n); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; static intios_base::xalloc().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewostream.html:20696,mask,mask,20696,root/html534/TGTextViewostream.html,https://root.cern,https://root.cern/root/html534/TGTextViewostream.html,1,['mask'],['mask']
Availability,"ctor( TMVA::DataSetInfo& dsi,; 729 TMVA::DataInputHandler& dataInput,; 730 EventVectorOfClassesOfTreeType& eventsmap,; 731 EvtStatsPerClass& eventCounts); 732{; 733 const UInt_t nclasses = dsi.GetNClasses();; 734 ; 735 eventsmap[ Types::kTraining ] = EventVectorOfClasses(nclasses);; 736 eventsmap[ Types::kTesting ] = EventVectorOfClasses(nclasses);; 737 eventsmap[ Types::kMaxTreeType ] = EventVectorOfClasses(nclasses);; 738 ; 739 // create the type, weight and boostweight branches; 740 const UInt_t nvars = dsi.GetNVariables();; 741 const UInt_t ntgts = dsi.GetNTargets();; 742 const UInt_t nvis = dsi.GetNSpectators();; 743 ; 744 for (size_t i=0; i<nclasses; i++) {; 745 eventCounts[i].varAvLength = new Float_t[nvars];; 746 for (UInt_t ivar=0; ivar<nvars; ivar++); 747 eventCounts[i].varAvLength[ivar] = 0;; 748 }; 749 ; 750 //Bool_t haveArrayVariable = kFALSE;; 751 //Bool_t *varIsArray = new Bool_t[nvars];; 752 ; 753 // If there are NaNs in the tree:; 754 // => warn if used variables/cuts/weights contain nan (no problem if event is cut out); 755 // => fatal if cut value is nan or (event not cut out and nans somewhere); 756 // Count & collect all these warnings/errors and output them at the end.; 757 std::map<TString, int> nanInfWarnings;; 758 std::map<TString, int> nanInfErrors;; 759 ; 760 // if we work with chains we need to remember the current tree if; 761 // the chain jumps to a new tree we have to reset the formulas; 762 for (UInt_t cl=0; cl<nclasses; cl++) {; 763 ; 764 //Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;; 765 ; 766 EventStats& classEventCounts = eventCounts[cl];; 767 ; 768 // info output for weights; 769 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 770 << ""\tWeight expression for class \'"" << dsi.GetClassInfo(cl)->GetName() << ""\': \""""; 771 << dsi.GetClassInfo(cl)->GetWeight() << ""\"""" << Endl;; 772 ; 773 // used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:31554,error,errors,31554,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['error'],['errors']
Availability,"ctor); 162 const std::vector<double> & Errors() const { return fErrors; }; 163 /// parameter errors (return const pointer); 164 const double * GetErrors() const { return fErrors.empty() ? nullptr : &fErrors.front(); }; 165 ; 166 /// parameter values (return std::vector); 167 const std::vector<double> & Parameters() const { return fParams; }; 168 /// parameter values (return const pointer); 169 const double * GetParams() const { return &fParams.front(); }; 170 ; 171 /// parameter value by index; 172 double Value(unsigned int i) const { return fParams[i]; }; 173 /// parameter value by index; 174 double Parameter(unsigned int i) const { return fParams[i]; }; 175 ; 176 /// parameter error by index; 177 // (NOTE: this due to conflict with TObject::Error cannot used in derived class which; 178 // inherits from TObject. Use instead ParError (or Errors()[i] ); 179 double Error(unsigned int i) const {; 180 return (i < fErrors.size() ) ? fErrors[i] : 0;; 181 }; 182 /// parameter error by index; 183 double ParError(unsigned int i) const {; 184 return (i < fErrors.size() ) ? fErrors[i] : 0;; 185 }; 186 ; 187 /// name of the parameter; 188 std::string ParName(unsigned int i) const;; 189 ; 190 /// set the Minos errors for parameter i (called by the Fitter class when running Minos); 191 void SetMinosError(unsigned int i, double elow, double eup);; 192 ; 193 /// Set the chi2 and the ndf; 194 /// This function should be called when using an external FCN for fitting; 195 /// and one provides the chi2 and the number of fitting data points) to store; 196 /// and have them printed in the FitResult class; 197 void SetChi2AndNdf(double chi2, unsigned int npoints);; 198 ; 199 /// query if parameter i has the Minos error; 200 bool HasMinosError(unsigned int i) const;; 201 ; 202 /// lower Minos error. If Minos has not run for parameter i return the parabolic error; 203 double LowerError(unsigned int i) const;; 204 ; 205 /// upper Minos error. If Minos has not run for parameter i return the p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:6725,error,error,6725,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,1,['error'],['error']
Availability,"ctor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of ru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodRuleFit.html:20436,avail,available,20436,root/html528/TMVA__MethodRuleFit.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodRuleFit.html,6,['avail'],['available']
Availability,"ctor. TProofMgr * Mgr(const char* url); Get instance of the effective manager for 'url'; Return 0 on failure. void Reset(const char* url, Bool_t hard = kFALSE); Wrapper around TProofMgr::Reset(...). const TList * GetEnvVars(); Get environemnt variables. void AddEnvVar(const char* name, const char* value); Add an variable to the list of environment variables passed to proofserv; on the master and slaves. void DelEnvVar(const char* name); Remove an variable from the list of environment variables passed to proofserv; on the master and slaves. void ResetEnvVars(); Clear the list of environment variables passed to proofserv; on the master and slaves. void SaveWorkerInfo(); Save informations about the worker set in the file .workers in the working; dir. Called each time there is a change in the worker setup, e.g. by; TProof::MarkBad(). Int_t GetParameter(TCollection* c, const char* par, TString& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Int_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long64_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Double_t& value); Get the value from the specified parameter from the spe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:85763,error,error,85763,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['error'],['error']
Availability,"ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSocket.html:14003,error,error,14003,root/html534/TSocket.html,https://root.cern,https://root.cern/root/html534/TSocket.html,6,['error'],['error']
Availability,"ctor< unsigned int > &paramInd);  set parameter indices for running Minos this can be used for running Minos on a subset of parameters - otherwise is run on all of them if MinosErrors() is set ;  ; void SetNormErrors (bool on=true);  set the option to normalize the error on the result according to chi2/ndf ;  ; void SetParabErrors (bool on=true);  set parabolic errors ;  ; void SetParamsSettings (const std::vector< ROOT::Fit::ParameterSettings > &pars);  ; void SetParamsSettings (unsigned int npar, const double *params, const double *vstep=nullptr);  set the parameter settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:3925,error,error,3925,doc/master/classROOT_1_1Fit_1_1FitConfig.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html,1,['error'],['error']
Availability,"ctorT<double>& select); virtual voidTObject::AppendPad(Option_t* option = """"); TVectorT<double>&Apply(const TElementActionT<double>& action); TVectorT<double>&Apply(const TElementPosActionT<double>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetLwb() const; double*GetMatrixArray(); const double*GetMatrixArray() const; virtual const char*TObject::GetName() const; Int_tGetNoElements() const; Int_tGetNrows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TVectorT<double>GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const; TVectorT<double>&GetSub(Int_t row_lwb, Int_t row_upb, TVectorT<double>& target, Option_t* option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_double_.html:2866,error,error,2866,root/html528/TVectorT_double_.html,https://root.cern,https://root.cern/root/html528/TVectorT_double_.html,6,['error'],['error']
Availability,"ctor` class for wrapping functions providing both evaluation and gradient. Some methods, like Fumili, Fumili2 and GSLMultiFit are; 104 specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition; 105 the `ROOT::Math::FitMethodFunction` interface.; 106 - The interface for setting the initial values for the function variables (which are the parameters in; 107 of the model function in case of solving for fitting) and specifying their limits.; 108 - The interface to set and retrieve basic minimization parameters. These parameter are controlled by the class `ROOT::Math::MinimizerOptions`.; 109 When no parameters are specified the default ones are used. Specific Minimizer options can also be passed via the `MinimizerOptions` class.; 110 For the list of the available option parameter one must look at the documentation of the corresponding derived class.; 111 - The interface to retrieve the result of minimization ( minimum X values, function value, gradient, error on the minimum, etc...); 112 - The interface to perform a Scan, Hesse or a Contour plot (for the minimizers that support this, i.e. Minuit and Minuit2); 113 ; 114 An example on how to use this interface is the tutorial NumericalMinimization.C in the tutorials/fit directory.; 115 ; 116 @ingroup MultiMin; 117*/; 118 ; 119class Minimizer {; 120 ; 121public:; 122 ; 123 /// Default constructor.; 124 Minimizer () {}; 125 ; 126 /// Destructor (no operations).; 127 virtual ~Minimizer () {}; 128 ; 129 // usually copying is non trivial, so we delete this; 130 Minimizer(Minimizer const&) = delete;; 131 Minimizer &operator=(Minimizer const&) = delete;; 132 Minimizer(Minimizer &&) = delete;; 133 Minimizer &operator=(Minimizer &&) = delete;; 134 ; 135 /// reset for consecutive minimization - implement if needed; 136 virtual void Clear() {}; 137 ; 138 /// set the function to minimize; 139 virtual void SetFunction(const ROOT::Math::IMultiGenFunction & func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:5001,error,error,5001,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['error'],['error']
Availability,"ctors `tvExL`, `tvExH` and `tvEyL`, `tvEyH`.; 420/// The number of points in the graph is the minimum of number of points; 421/// in `tvX` and `tvY`.; 422 ; 423TGraphMultiErrors::TGraphMultiErrors(const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL,; 424 const TVectorF &tvExH, const TVectorF &tvEyL, const TVectorF &tvEyH, Int_t m); 425 : fNYErrors(1), fSumErrorsMode(m); 426{; 427 fNpoints = TMath::Min(tvX.GetNrows(), tvY.GetNrows());; 428 ; 429 if (!TGraph::CtorAllocate()); 430 return;; 431 ; 432 if (!CtorAllocate()); 433 return;; 434 ; 435 Int_t itvXL = tvX.GetLwb();; 436 Int_t itvYL = tvY.GetLwb();; 437 Int_t itvExLL = tvExL.GetLwb();; 438 Int_t itvExHL = tvExH.GetLwb();; 439 Int_t itvEyLL = tvEyL.GetLwb();; 440 Int_t itvEyHL = tvEyH.GetLwb();; 441 ; 442 for (Int_t i = 0; i < fNpoints; i++) {; 443 fX[i] = tvX(itvXL + i);; 444 fY[i] = tvY(itvYL + i);; 445 fExL[i] = tvExL(itvExLL + i);; 446 fExH[i] = tvExH(itvExHL + i);; 447 fEyL[0][i] = tvEyL(itvEyLL + i);; 448 fEyH[0][i] = tvEyH(itvEyHL + i);; 449 }; 450 ; 451 CalcYErrorsSum();; 452}; 453 ; 454////////////////////////////////////////////////////////////////////////////////; 455/// Constructor with six vectors of doubles in input and a single y error dimension.; 456/// The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors.; 457/// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; 458/// and the errors from vectors `tvExL`, `tvExH` and `tvEyL`, `tvEyH`.; 459/// The number of points in the graph is the minimum of number of points; 460/// in `tvX` and `tvY`.; 461 ; 462TGraphMultiErrors::TGraphMultiErrors(const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL,; 463 const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m); 464 : fNYErrors(1), fSumErrorsMode(m); 465{; 466 fNpoints = TMath::Min(tvX.GetNrows(), tvY.GetNrows());; 467 ; 468 if (!TGraph::CtorAllocate()); 469 return;; 470 ; 471 if (!Ct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:16514,error,error,16514,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"ctory on file; TStringTNamed::fTitleobject title; Int_tTKey::fVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBasket(); Default contructor. TBasket(TDirectory* motherDir); Constructor used during reading. TBasket(const char* name, const char* title, TBranch* branch); Basket normal constructor, used during writing. ~TBasket(); Basket destructor. void AdjustSize(Int_t newsize); Increase the size of the current fBuffer up to newsize. Long64_t CopyTo(TFile* to); Copy the basket of this branch onto the file to. void DeleteEntryOffset(); Delete fEntryOffset array. Int_t DropBuffers(); Drop buffers of this basket if it is not the current basket. Int_t GetEntryPointer(Int_t Entry); Get pointer to buffer for internal entry. Int_t LoadBasketBuffers(Long64_t pos, Int_t len, TFile* file, TTree* tree = 0); Load basket buffers in memory without unziping.; This function is called by TTreeCloner.; The function returns 0 in case of success, 1 in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffersUncompressedCase(); By-passing buffer unzipping has been requested and is; possible (only 1 entry in this basket). Int_t ReadBasketBuffersUnzip(char* , Int_t , Bool_t , TFile* ); We always create the TBuffer for the basket but it hold the buffer from the cache. void inline InitializeCompressedBuffer(Int_t len, TFile* file); Initialize the compressed buffer; either from the TTree or create a local one. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBasket.html:10260,error,error,10260,root/html534/TBasket.html,https://root.cern,https://root.cern/root/html534/TBasket.html,3,['error'],['error']
Availability,"ctory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBranchRef*TTree::GetBranchRef() const; virtual Bool_tTTree::GetBranchStatus(const char* branch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeSQL.html:3833,error,error,3833,root/html528/TTreeSQL.html,https://root.cern,https://root.cern/root/html528/TTreeSQL.html,2,['error'],['error']
Availability,"ctory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Double_t* x); virtual Int_tFill(Double_t x0, Double_t x1, Double_t x2 = 0, Double_t x3 = 0, Double_t x4 = 0, Double_t x5 = 0, Double_t x6 = 0, Double_t x7 = 0, Double_t x8 = 0, Double_t x9 = 0, Double_t x10 = 0, Double_t x11 = 0, Double_t x12 = 0, Double_t x13 = 0, Double_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNtupleD.html:4699,error,error,4699,root/html528/TNtupleD.html,https://root.cern,https://root.cern/root/html528/TNtupleD.html,2,['error'],['error']
Availability,"ctory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Float_t* x); Int_tFill(Int_t x0); Int_tFill(Double_t x0); virtual Int_tFill(Float_t x0, Float_t x1 = 0, Float_t x2 = 0, Float_t x3 = 0, Float_t x4 = 0, Float_t x5 = 0, Float_t x6 = 0, Float_t x7 = 0, Float_t x8 = 0, Float_t x9 = 0, Float_t x10 = 0, Float_t x11 = 0, Float_t x12 = 0, Float_t x13 = 0, Float_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaske",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNtuple.html:4688,error,error,4688,root/html528/TNtuple.html,https://root.cern,https://root.cern/root/html528/TNtuple.html,2,['error'],['error']
Availability,"ctory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tTTree::Fill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBranchRef*TTree::GetBranchRef() const; virtual Bool_tTTree::GetBranchStatus(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THbookTree.html:5332,error,error,5332,root/html528/THbookTree.html,https://root.cern,https://root.cern/root/html528/THbookTree.html,2,['error'],['error']
Availability,"ctory. param dirp: the pointer to the directory to be freed. const char* GetDirEntry(void* dirp); Get a directory entry. param dirp: the directory pointer; returns: 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file (stat). param path: the path of the file to stat (in); param buf: structure that will hold the stat info (out); returns: 0 if success, 1 if the file could not be stat'ed. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required by 'path' or; 'dirptr'. param path: the path to check; param dirptr: the directory pointer to check. int Unlink(const char* path); Unlink a file on the remote server. param path: the path of the file to unlink; returns: 0 on success, -1 otherwise. Bool_t IsPathLocal(const char* path); Is this path a local path?. param path: the URL of the path to check; returns: kTRUE if the path is local, kFALSE otherwise. Int_t Locate(const char* path, TString& endurl); Get the endpoint URL of a file. param path: the entry-point URL of the file (in); param endurl: the endpoint URL of the file (out); returns: 0 in case of success and 1 if the file could not be; stat'ed. Int_t Stage(const char* path, UChar_t priority); Issue a stage request for a single file. param path: the path of the file to stage; param opt: defines 'option' and 'priority' for 'Prepare': the format is; opt = ""option=o priority=p""; returns: 0 for success, -1 for error. Int_t Stage(TCollection* files, UChar_t priority); Issue stage requests for multiple files. param pathlist: list of paths of files to stage; param opt: defines 'option' and 'priority' for 'Prepare': the; format is opt = ""option=o priority=p""; returns: 0 for success, -1 for error. » Last changed: root/netxng:$Id$ » Last generated: 2015-07-30 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGSystem.html:21502,error,error,21502,root/html534/TNetXNGSystem.html,https://root.cern,https://root.cern/root/html534/TNetXNGSystem.html,2,['error'],['error']
Availability,"cts and the TRefArray already contains other objects.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; When running out of TProcessIds, you will see:; Warning in <TProcessID::AddProcessID>: Maximum number of TProcessID (65535) is almost reached (one left). TRef will stop being functional when the limit is reached.; Fatal in <TProcessID::AddProcessID>: Maximum number of TProcessID (65535) has been reached. TRef are not longer functional.; whenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void whenDefinition TGWin32VirtualXProxy.cxx:136; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TRefPersistent Reference link to a TObject A TRef is a lightweight object pointing to any TObject.Definition TRef.h:32. Definition at line 33 of file TRefArray.h. Public Types; typedef TRefArrayIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefArray.html:4703,error,error,4703,doc/master/classTRefArray.html,https://root.cern,https://root.cern/doc/master/classTRefArray.html,1,['error'],['error']
Availability,"cts from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TFunction * Find (DeclId_t id) const;  Return the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a function just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; TObjLink * FirstLink () const override;  ; TFunction * Get (DeclId_t id);  Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; Int_t GetLast () const override;  Returns index of last object in collection. ;  ; virtual TList * GetListForObject (const char *name) const;  Return the set of overloads for this name, collecting all available ones. ;  ; virtual TList * GetListForObject (const TObject *obj) const;  Return the set of overloads for function obj, collecting all available ones. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ; Int_t IndexOf (const TObject *obj) const override;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; TObjLink * LastLink () const override;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' into this collection. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:3904,avail,available,3904,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['avail'],['available']
Availability,"cts may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:28420,error,error,28420,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,6,['error'],['error']
Availability,"cts. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:52793,error,errors,52793,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"cu = c1*f1->Integral(fXaxis.GetBinLowEdge(binx), fXaxis.GetBinUpEdge(binx), 0.) / fXaxis.GetBinWidth(binx);; 871 } else {; 872 cu = c1*f1->EvalPar(xx);; 873 }; 874 if (TF1::RejectedPoint()) continue;; 875 AddBinContent(bin,cu);; 876 }; 877 }; 878 }; 879 ; 880 return kTRUE;; 881}; 882 ; 883int TH1::LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge) const; 884{; 885 const auto inconsistency = CheckConsistency(h1, h2);; 886 ; 887 if (inconsistency & kDifferentDimensions) {; 888 if (useMerge); 889 Info(name, ""Histograms have different dimensions - trying to use TH1::Merge"");; 890 else {; 891 Error(name, ""Histograms have different dimensions"");; 892 }; 893 } else if (inconsistency & kDifferentNumberOfBins) {; 894 if (useMerge); 895 Info(name, ""Histograms have different number of bins - trying to use TH1::Merge"");; 896 else {; 897 Error(name, ""Histograms have different number of bins"");; 898 }; 899 } else if (inconsistency & kDifferentAxisLimits) {; 900 if (useMerge); 901 Info(name, ""Histograms have different axis limits - trying to use TH1::Merge"");; 902 else; 903 Warning(name, ""Histograms have different axis limits"");; 904 } else if (inconsistency & kDifferentBinLimits) {; 905 if (useMerge); 906 Info(name, ""Histograms have different bin limits - trying to use TH1::Merge"");; 907 else; 908 Warning(name, ""Histograms have different bin limits"");; 909 } else if (inconsistency & kDifferentLabels) {; 910 // in case of different labels -; 911 if (useMerge); 912 Info(name, ""Histograms have different labels - trying to use TH1::Merge"");; 913 else; 914 Info(name, ""Histograms have different labels"");; 915 }; 916 ; 917 return inconsistency;; 918}; 919 ; 920////////////////////////////////////////////////////////////////////////////////; 921/// Performs the operation: `this = this + c1*h1`; 922/// If errors are defined (see TH1::Sumw2), errors are also recalculated.; 923///; 924/// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; 9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:36754,error,errors,36754,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['error'],['errors']
Availability,"cularly important if you fit the histogram after TH1::Add. IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; is used , ie this = this + c1*factor*h1; Use the other TH1::Add function if you do not want this feature. void Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*-*Replace contents of this histogram by the addition of h1 and h2*-*-*. this = c1*h1 + c2*h2; if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; do a scaling this = c1 * h1 / (bin Volume). void AddBinContent(Int_t bin); -*-*-*-*-*-*-*-*Increment bin content by 1*-*-*-*-*-*-*-*-*-*-*-*-*-*. void AddBinContent(Int_t bin, Double_t w); -*-*-*-*-*-*-*-*Increment bin content by a weight w*-*-*-*-*-*-*-*-*-*-*. void AddDirectory(Bool_t add = kTRUE); Sets the flag controlling the automatic add of histograms in memory. By default (fAddDirectory = kTRUE), histograms are automatically added; to the list of objects in memory.; Note that one histogram can be removed from its support directory; by calling h->SetDirectory(0) or h->SetDirectory(dir) to add it; to the list of objects in the directory dir. NOTE that this is a static function. To call it, use;; TH1::AddDirectory. Int_t BufferEmpty(Int_t action = 0); Fill histogram with all entries in the buffer.; action ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:42223,error,errors,42223,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,1,['error'],['errors']
Availability,"cularly important if you fit the histogram after TH1::Add. IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; is used , ie this = this + c1*factor*h1; Use the other TH1::Add function if you do not want this feature. void Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*-*Replace contents of this histogram by the addition of h1 and h2*-*-*. this = c1*h1 + c2*h2; if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. void AddBinContent(Int_t bin); -*-*-*-*-*-*-*-*Increment bin content by 1*-*-*-*-*-*-*-*-*-*-*-*-*-*. void AddBinContent(Int_t bin, Double_t w); -*-*-*-*-*-*-*-*Increment bin content by a weight w*-*-*-*-*-*-*-*-*-*-*. void AddDirectory(Bool_t add = kTRUE); Sets the flag controlling the automatic add of histograms in memory. By default (fAddDirectory = kTRUE), histograms are automatically added; to the list of objects in memory.; Note that one histogram can be removed from its support directory; by calling h->SetDirectory(0) or h->SetDirectory(dir) to add it; to the list of objects in the directory dir. NOTE that this is a static function. To call it, use;; TH1::AddDirectory. Int_t BufferEmpty(Int_t action = 0); Fill histogram with all entries in the buffer.; action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:41801,error,errors,41801,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['error'],['errors']
Availability,"culated using Eq. (2) where the covariance matrix is taken from Minuit. Histograms of  are filled by weighting the events with . Error bars per bin are given by Eq. (6). The ; reproduce the true distributions of the species in the control variable , within the above defined statistical uncertainties. Illustrations. To illustrate the technique, one considers an example derived from the analysis where . have been first used (charmless B decays). One is dealing with a data; sample in which two species are present: the first is termed signal and; the second background. A maximum Likelihood fit is performed to obtain; the two yields and . The fit relies on two discriminating variables collectively denoted  which are chosen within three possible variables denoted , and .; The variable which is not incorporated in  is used as the control variable . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1:; Distributions of the three discriminating variables available to perform the Likelihood fit:; , , .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPlot.html:5633,avail,available,5633,root/html602/TSPlot.html,https://root.cern,https://root.cern/root/html602/TSPlot.html,2,['avail'],['available']
Availability,"culation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GaussIntegrator.html:3935,error,error,3935,root/html534/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GaussIntegrator.html,3,['error'],['error']
Availability,"culation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html:3822,error,error,3822,root/html528/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GaussIntegrator.html,3,['error'],['error']
Availability,"cumentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator() to different integrators. Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class Possible methods are : Vegas, Miser or Plain IN case of MC integration the accuracy is determined by the number of function calls, one should be careful not to use a too large value of maxpts ; Definition at line 2851 of file TF1.cxx. ◆ IntegralMultiple() [3/3]. virtual Double_t TF1::IntegralMultiple ; (; Int_t ; n, . const Double_t * ; a, . const Double_t * ; b, . Int_t ; , . Int_t ; maxpts, . Double_t ; epsrel, . Double_t & ; relerr, . Int_t & ; nfnevl, . Int_t & ; ifail . ). inlinevirtual . Definition at line 616 of file TF1.h. ◆ IntegralOneDim(). Double_t TF1::IntegralOneDim ; (; Double_t ; a, . Double_t ; b, . Double_t ; epsrel, . Double_t ; epsabs, . Double_t & ; error . ). virtual . Return Integral of function between a and b using the given parameter values and relative and absolute tolerance. ; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used If ROOT contains the MathMore library the default integrator is set to be the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the ROOT::Math::GaussIntegrator is used See the reference documentation of these classes for more information about the integration algorithms To change integration algorithm just do : ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName); Valid integrator names are:; Gauss : for ROOT::Math::GaussIntegrator; GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed; Note 1:; Val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:101534,toler,tolerance,101534,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['toler'],['tolerance']
Availability,"cumentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:20788,avail,available,20788,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,4,['avail'],['available']
Availability,"cumentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. TGraph2DErrors(const TGraph2DErrors& ). TGraph2DErrors& operator=(const TGraph2DErrors& ). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2011-07-04 15:32; This page has been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraph2DErrors.html:13376,error,errors,13376,root/html530/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html530/TGraph2DErrors.html,1,['error'],['errors']
Availability,"cumentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. TGraph2DErrors(const TGraph2DErrors& ). TGraph2DErrors& operator=(const TGraph2DErrors& ). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2011-11-03 20:17; This page has been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraph2DErrors.html:13376,error,errors,13376,root/html532/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html532/TGraph2DErrors.html,1,['error'],['errors']
Availability,"cumentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSlave.html:10524,alive,alive,10524,root/html602/TXSlave.html,https://root.cern,https://root.cern/root/html602/TXSlave.html,2,['alive'],['alive']
Availability,"cur at loading; on check ROOT version [default]; svn check ROOT version and SVN revision number.; (Use ';', ' ' or '|' to separate 'chkv=<o>' from the rest.); If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify a list of objects to be passed to the SETUP; functions via 'loadopts'; the objects must be streamable.; Returns 0 in case of success and -1 in case of error. Int_t DownloadPackage(const char* par, const char* dstdir = 0); Download a PROOF archive (PAR file) from the master package repository.; The PAR file is downloaded in the current directory or in the directory; specified by 'dstdir'. If a package with the same name already exists; at destination, a check on the MD5 sum is done and the user warned or; prompted for action, depending is the file is equal or different.; Returns 0 in case of success and -1 in case of error. Int_t UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); Upload a PROOF archive (PAR file). A PAR file is a compressed; tar file with one special additional directory, PROOF-INF; (blatantly copied from Java's jar format). It must have the extension; .par. A PAR file can be directly a binary or a source with a build; procedure. In the PROOF-INF directory there can be a build script:; BUILD.sh to be called to build the package, in case of a binary PAR; file don't specify a build script or make it a no-op. Then there is; SETUP.C which sets the right environment variables to use the package,; like LD_LIBRARY_PATH, etc.; The 'opt' allows to specify whether the .PAR s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:75986,down,downloaded,75986,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['down'],['downloaded']
Availability,"current directory or in 'path/' if it is specified.; The class generated will be named 'fileprefix'. ""macrofilename"" and optionally ""cutfilename"" are expected to point; to source file which will be included in by the generated skeletong.; Method of the same name as the file(minus the extension and path); will be called by the generated skeleton's Process method as follow:; [if (cutfilename())] htemp->Fill(macrofilename());. ""option"" can be used select some of the optional features during; the code generation. The possible options are:; nohist : indicates that the generated ProcessFill should not; fill the histogram. 'maxUnrolling' controls how deep in the class hierarchy does the; system 'unroll' class that are not split. 'unrolling' a class; will allow direct access to its data members a class (this; emulates the behavior of TTreeFormula). The main features of this skeleton are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bound; * ability to use the branch data as object (when the user code is available). For example with Event.root, if; Double_t somepx = fTracks.fPx[2];; is executed by one of the method of the skeleton,; somepx will be updated with the current value of fPx of the 3rd track. Both macrofilename and the optional cutfilename are expected to be; the name of source files which contain at least a free standing; function with the signature:; x_t macrofilename(); // i.e function with the same name as the file; and; y_t cutfilename(); // i.e function with the same name as the file. x_t and y_t needs to be types that can convert respectively to a double; and a bool (because the skeleton uses:; if (cutfilename()) htemp->Fill(macrofilename());. This 2 functions are run in a context such that the branch names are; available as local variables of the correct (read-only) type. Note that if you use the same 'variable' twice, it is more efficient; to 'cache' the value. For example",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:44137,avail,available,44137,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['avail'],['available']
Availability,"current position first line in window by scrolling up. ; Reimplemented in TGListTree, and TGLVContainer.; Definition at line 1927 of file TGCanvas.cxx. ◆ NumItems(). virtual Int_t TGContainer::NumItems ; (; ); const. inlinevirtual . Definition at line 105 of file TGCanvas.h. ◆ NumSelected(). virtual Int_t TGContainer::NumSelected ; (; ); const. inlinevirtual . Definition at line 104 of file TGCanvas.h. ◆ OnAutoScroll(). void TGContainer::OnAutoScroll ; (; ). protectedvirtual . Autoscroll while close to & beyond The Wall. ; Reimplemented in TGLBContainer.; Definition at line 1495 of file TGCanvas.cxx. ◆ OnMouseOver(). void TGContainer::OnMouseOver ; (; TGFrame * ; f). virtual . Signal emitted when pointer is over entry. ; Reimplemented in TGListTree.; Definition at line 501 of file TGCanvas.cxx. ◆ operator=(). TGContainer & TGContainer::operator= ; (; const TGContainer & ; ). privatedelete . ◆ PageDown(). void TGContainer::PageDown ; (; Bool_t ; select = kFALSE). virtual . Move position one page down. ; Reimplemented in TGListTree.; Definition at line 2027 of file TGCanvas.cxx. ◆ PageUp(). void TGContainer::PageUp ; (; Bool_t ; select = kFALSE). virtual . Move position one page up. ; Reimplemented in TGListTree.; Definition at line 1983 of file TGCanvas.cxx. ◆ RemoveAll(). void TGContainer::RemoveAll ; (; ). overridevirtual . Remove all items from the container. ; Reimplemented from TGCompositeFrame.; Reimplemented in TGLBContainer, and TRootIconBox.; Definition at line 641 of file TGCanvas.cxx. ◆ RemoveItem(). void TGContainer::RemoveItem ; (; TGFrame * ; item). virtual . Remove item from container. ; Definition at line 660 of file TGCanvas.cxx. ◆ RepeatSearch(). void TGContainer::RepeatSearch ; (; ). protectedvirtual . Repeats search. ; Definition at line 1623 of file TGCanvas.cxx. ◆ ReturnPressed(). void TGContainer::ReturnPressed ; (; TGFrame * ; f). virtual . Signal emitted when Return/Enter key pressed. ; It's equivalent to ""double click"" of mouse button. ; Reim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:50293,down,down,50293,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['down'],['down']
Availability,"current);  Return the next selected item. ;  ; const TGPicture * GetObjPicture (TGFrame *f);  Retrieve icons associated with class ""name"". ;  ; virtual TGPosition GetPagePosition () const;  Returns page position. ;  ; virtual TGVScrollBar * GetVScrollbar () const;  returns pointer to vert. scroll bar ;  ; Bool_t HandleDNDFinished () override;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click mouse event. ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. Do not use double buffer. ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler converts a key press to some line editor action. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; virtual void Home (Bool_t select=kFALSE);  Move to upper-left corner of container. ;  ; virtual void InvertSelection ();  Invert the selection, all selected items become unselected and vice versa. ;  ; virtual void KeyPressed (TGFrame *, UInt_t keysym, UInt_t mask);  Signal emitted when keyboard key pressed. ;  ; void Layout () override;  Layout container entries. ;  ; virtual Int_t NumItems () const;  ; virtual Int_t NumSelected () const;  ; virtual void OnMouseOver (TGFrame *);  Signal emitted when pointer is over entry. ;  ; virtual void PageDown (Bool_t select=kFALSE);  Move position one page down. ;  ; virtual void PageUp (Bool_t select=kFALSE);  Move position one page up. ;  ; void RemoveAll () override;  Remove all items from the container. ;  ; virtual void RemoveItem (TGFrame *item);  Remove item from container. ;  ; virtual void ReturnPressed (TGFrame *);  Signal emitted when Return/Enter key pressed. ;  ; virtual void Search (Bool_t close=kTRUE);  Invokes search dialog. Looks for item with the entered name. ;  ; virtual void SelectAll ();  Select all items in the container. ;  ; virtual void SetDragPixmap (const TGPicture *pic);  Set drag window pixmaps and hotpoint. ;  ; virtual void SetHsbPosition (Int_t newPos);  set ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileContainer.html:8322,mask,mask,8322,doc/master/classTGFileContainer.html,https://root.cern,https://root.cern/doc/master/classTGFileContainer.html,2,['mask'],['mask']
Availability,"cuted on the PROOF master and/or slaves.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t SendCommand(const char* cmd, TProof::ESlaves list = kActive); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command, however commands; like "".x file.C"" or "".L file.C"" will not cause the file.C to be; transfered to the PROOF cluster. In that case use TProof::Exec().; Returns the status send by the remote server as part of the; kPROOF_LOGDONE message. Typically this is the return code of the; command on the remote side. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. current) state of the master to all; slave servers. Currently the initial state includes: log level.; Returns the number of active slaves. Returns -1 in case of error. Bool_t CheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp|kCpBin)); Check if a file needs to be send to the slave. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:54979,error,error,54979,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['error'],['error']
Availability,"cuted when slider is changed ;  ; Double_t fMinimum {0};  Slider minimum value in [0,1]. ;  ; TObject * fObject {nullptr};  !Pointer to associated object ;  ;  Protected Attributes inherited from TPad; Bool_t fAbsCoord;  Use absolute coordinates. ;  ; Double_t fAbsHNDC;  Absolute Height of pad along Y in NDC. ;  ; Double_t fAbsPixeltoXk;  Conversion coefficient for absolute pixel to X World. ;  ; Double_t fAbsPixeltoYk;  Conversion coefficient for absolute pixel to Y World. ;  ; Double_t fAbsWNDC;  Absolute Width of pad along X in NDC. ;  ; Double_t fAbsXlowNDC;  Absolute X top left corner of pad in NDC [0,1]. ;  ; Double_t fAbsYlowNDC;  Absolute Y top left corner of pad in NDC [0,1]. ;  ; Double_t fAspectRatio;  ratio of w/h in case of fixed ratio ;  ; Short_t fBorderMode;  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize;  pad bordersize in pixels ;  ; TCanvas * fCanvas {nullptr};  ! Pointer to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlider.html:44187,down,down,44187,doc/master/classTSlider.html,https://root.cern,https://root.cern/doc/master/classTSlider.html,1,['down'],['down']
Availability,"cxx. ◆ GetEntries() [1/2]. Long64_t TProofChain::GetEntries ; (; ); const. overridevirtual . Returns the total number of entries in the TProofChain, which is the number of entries in the TDSet that it holds. ; Reimplemented from TChain.; Definition at line 398 of file TProofChain.cxx. ◆ GetEntries() [2/2]. Long64_t TProofChain::GetEntries ; (; const char * ; selection). overridevirtual . See TTree::GetEntries(const char *selection) Not implemented in TProofChain. ; Shouldn't be used. ; Reimplemented from TChain.; Definition at line 412 of file TProofChain.cxx. ◆ GetListOfAliases(). TList * TProofChain::GetListOfAliases ; (; ); const. inlineoverridevirtual . Reimplemented from TTree.; Definition at line 68 of file TProofChain.h. ◆ GetListOfBranches(). TObjArray * TProofChain::GetListOfBranches ; (; ). inlineoverridevirtual . Return a pointer to the list of branches of the current tree. ; Warning: If there is no current TTree yet, this routine will open the first in the chain.; Returns 0 on failure. ; Reimplemented from TChain.; Definition at line 65 of file TProofChain.h. ◆ GetListOfClones(). TList * TProofChain::GetListOfClones ; (; ). inlineoverridevirtual . Reimplemented from TTree.; Definition at line 64 of file TProofChain.h. ◆ GetListOfFriends(). TList * TProofChain::GetListOfFriends ; (; ); const. inlineoverridevirtual . Reimplemented from TTree.; Definition at line 67 of file TProofChain.h. ◆ GetListOfLeaves(). TObjArray * TProofChain::GetListOfLeaves ; (; ). inlineoverridevirtual . Return a pointer to the list of leaves of the current tree. ; Warning: May set the current tree! ; Reimplemented from TChain.; Definition at line 66 of file TProofChain.h. ◆ GetMakeClass(). Int_t TProofChain::GetMakeClass ; (; ); const. inline . Definition at line 72 of file TProofChain.h. ◆ GetPlayer(). TVirtualTreePlayer * TProofChain::GetPlayer ; (; ). Forwards the execution to the dummy tree header. ; See TTree::GetPlayer(). ; Definition at line 335 of file TProofChain.cxx. ◆ G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:59958,failure,failure,59958,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['failure'],['failure']
Availability,"cxx. ◆ GetEpsMatrix(). Double_t TUnfold::GetEpsMatrix ; (; void ; ); const. inline . get numerical accuracy for Eigenvalue analysis when inverting matrices with rank problems ; Definition at line 352 of file TUnfold.h. ◆ GetFoldedOutput(). void TUnfold::GetFoldedOutput ; (; TH1 * ; out, . const Int_t * ; binMap = nullptr . ); const. get unfolding result on detector level ; Parameters. [out]outhistogram to store the correlation coefficiencts. The bin contents and errors are overwritten. ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. This method returns the unfolding output folded by the response matrix, i.e. the vector Ax.; The use of binMap is explained with the documentation of the GetOutput() method ; Definition at line 2962 of file TUnfold.cxx. ◆ GetInput(). void TUnfold::GetInput ; (; TH1 * ; out, . const Int_t * ; binMap = nullptr . ); const. Input vector of measurements. ; Parameters. [out]outhistogram to store the measurements. Bin content and bin errors are overwritte. ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. Bins which had an uncertainty of zero in the call to SetInput() maye acquire bin contents or bin errors different from the original settings in SetInput().; The use of binMap is explained with the documentation of the GetOutput() method ; Definition at line 3069 of file TUnfold.cxx. ◆ GetInputInverseEmatrix(). void TUnfold::GetInputInverseEmatrix ; (; TH2 * ; out). get inverse of the measurement's covariance matrix ; Parameters. [out]outhistogram to store the inverted covariance . Definition at line 3098 of file TUnfold.cxx. ◆ GetL(). void TUnfold::GetL ; (; TH2 * ; out); const. get matrix of regularisation conditions ; Parameters. [out]outhistogram to store the regularisation conditions. the bincontents are overwritten. The histogram should have dimension nr (y-axis) times nx (x-axis). nr corresponds to the number of regularisation conditions, it can be obtained using the method GetNr()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:36586,error,errors,36586,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['error'],['errors']
Availability,"cxx. ◆ ProcessEvents(). Bool_t TWinNTSystem::ProcessEvents ; (; ). overridevirtual . process pending events, i.e. DispatchOneEvent(kTRUE) ; Reimplemented from TSystem.; Definition at line 1612 of file TWinNTSystem.cxx. ◆ RecvBuf(). int TWinNTSystem::RecvBuf ; (; int ; sock, . void * ; buf, . int ; length . ). overridevirtual . Receive a buffer headed by a length indicator. ; Length is the size of the buffer. Returns the number of bytes received in buf or -1 in case of error. ; Reimplemented from TSystem.; Definition at line 4920 of file TWinNTSystem.cxx. ◆ RecvRaw(). int TWinNTSystem::RecvRaw ; (; int ; sock, . void * ; buf, . int ; length, . int ; opt . ). overridevirtual . Receive exactly length bytes into buffer. ; Use opt to receive out-of-band data or to have a peek at what is in the buffer (see TSocket). Buffer must be able to store at least length bytes. Returns the number of bytes received (can be 0 if other side of connection was closed) or -1 in case of error, -2 in case of MSG_OOB and errno == EWOULDBLOCK, -3 in case of MSG_OOB and errno == EINVAL and -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented from TSystem.; Definition at line 4972 of file TWinNTSystem.cxx. ◆ RedirectOutput(). Int_t TWinNTSystem::RedirectOutput ; (; const char * ; file, . const char * ; mode = ""a"", . RedirectHandle_t * ; h = nullptr . ). overridevirtual . Redirect standard output (stdout, stderr) to the specified file. ; If the file argument is 0 the output is set again to stderr, stdout. The second argument specifies whether the output should be added to the file (""a"", default) or the file be truncated before (""w""). This function saves internally the current state into a static structure. The call can be made reentrant by specifying the opaque structure pointed by 'h', which is filled with the relevant information. The handle 'h' obtained on the first call must then be used in any subsequent call, inc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:65435,error,error,65435,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['error'],['error']
Availability,"cxx. ◆ SetBatch(). void TCanvas::SetBatch ; (; Bool_t ; batch = kTRUE). overridevirtual . Toggle batch mode. ; However, if the canvas is created without a window then batch mode always stays set. ; Implements TVirtualPad.; Definition at line 1953 of file TCanvas.cxx. ◆ SetCanvasImp(). void TCanvas::SetCanvasImp ; (; TCanvasImp * ; i). inline . Definition at line 205 of file TCanvas.h. ◆ SetCanvasSize(). void TCanvas::SetCanvasSize ; (; UInt_t ; ww, . UInt_t ; wh . ). overridevirtual . Set Width and Height of canvas to ww and wh respectively. ; If ww and/or wh are greater than the current canvas window a scroll bar is automatically generated. Use this function to zoom in a canvas and navigate via the scroll bars. The Width and Height in this method are different from those given in the TCanvas constructors where these two dimension include the size of the window decoration whereas they do not in this method. When both ww==0 and wh==0, auto resize mode will be enabled again and canvas drawing area will automatically fit available window size ; Implements TVirtualPad.; Definition at line 1971 of file TCanvas.cxx. ◆ SetClickSelected(). void TCanvas::SetClickSelected ; (; TObject * ; obj). inline . Definition at line 209 of file TCanvas.h. ◆ SetClickSelectedPad(). void TCanvas::SetClickSelectedPad ; (; TPad * ; pad). inline . Definition at line 211 of file TCanvas.h. ◆ SetCursor(). void TCanvas::SetCursor ; (; ECursor ; cursor). overridevirtual . Set cursor. ; Implements TVirtualPad.; Definition at line 1985 of file TCanvas.cxx. ◆ SetDoubleBuffer(). void TCanvas::SetDoubleBuffer ; (; Int_t ; mode = 1). overridevirtual . Set Double Buffer On/Off. ; Implements TVirtualPad.; Definition at line 1994 of file TCanvas.cxx. ◆ SetFixedAspectRatio(). void TCanvas::SetFixedAspectRatio ; (; Bool_t ; fixed = kTRUE). overridevirtual . Fix canvas aspect ratio to current value if fixed is true. ; Implements TVirtualPad.; Definition at line 2012 of file TCanvas.cxx. ◆ SetFolder(). void TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:86717,avail,available,86717,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['avail'],['available']
Availability,"cxx. ◆ SetBatch(). void TCanvas::SetBatch ; (; Bool_t ; batch = kTRUE). overridevirtual . Toggle batch mode. ; However, if the canvas is created without a window then batch mode always stays set. ; Implements TVirtualPad.; Definition at line 1957 of file TCanvas.cxx. ◆ SetCanvasImp(). void TCanvas::SetCanvasImp ; (; TCanvasImp * ; i). inline . Definition at line 205 of file TCanvas.h. ◆ SetCanvasSize(). void TCanvas::SetCanvasSize ; (; UInt_t ; ww, . UInt_t ; wh . ). overridevirtual . Set Width and Height of canvas to ww and wh respectively. ; If ww and/or wh are greater than the current canvas window a scroll bar is automatically generated. Use this function to zoom in a canvas and navigate via the scroll bars. The Width and Height in this method are different from those given in the TCanvas constructors where these two dimension include the size of the window decoration whereas they do not in this method. When both ww==0 and wh==0, auto resize mode will be enabled again and canvas drawing area will automatically fit available window size ; Implements TVirtualPad.; Definition at line 1975 of file TCanvas.cxx. ◆ SetClickSelected(). void TCanvas::SetClickSelected ; (; TObject * ; obj). inline . Definition at line 209 of file TCanvas.h. ◆ SetClickSelectedPad(). void TCanvas::SetClickSelectedPad ; (; TPad * ; pad). inline . Definition at line 211 of file TCanvas.h. ◆ SetCursor(). void TCanvas::SetCursor ; (; ECursor ; cursor). overridevirtual . Set cursor. ; Implements TVirtualPad.; Definition at line 1989 of file TCanvas.cxx. ◆ SetDoubleBuffer(). void TCanvas::SetDoubleBuffer ; (; Int_t ; mode = 1). overridevirtual . Set Double Buffer On/Off. ; Implements TVirtualPad.; Definition at line 1998 of file TCanvas.cxx. ◆ SetFixedAspectRatio(). void TCanvas::SetFixedAspectRatio ; (; Bool_t ; fixed = kTRUE). overridevirtual . Fix canvas aspect ratio to current value if fixed is true. ; Implements TVirtualPad.; Definition at line 2016 of file TCanvas.cxx. ◆ SetFolder(). void TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:87093,avail,available,87093,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['avail'],['available']
Availability,"cxx:213; TObject::UseCurrentStylevirtual void UseCurrentStyle()Set current style settings in this object This function is called when either TCanvas::UseCurrentStyl...Definition TObject.cxx:807; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SaveAsvirtual void SaveAs(const char *filename="""", Option_t *option="""") constSave this object in the file specified by filename.Definition TObject.cxx:692; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TPluginHandler::LoadPluginInt_t LoadPlugin()Load the plugin library for this handler.Definition TPluginManager.cxx:293; TProfile::Classstatic TClass * Class(); TRandomThis is the base class for the ROOT R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:466101,error,error,466101,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"cxx:3240; TH1::GetIntegralvirtual Double_t * GetIntegral()Return a pointer to the array of bins integral.Definition TH1.cxx:2586; TH1::fZaxisTAxis fZaxisZ axis descriptor.Definition TH1.h:92; TH1::fStatOverflowsEStatOverflows fStatOverflowsPer object flag to use under/overflows in statistics.Definition TH1.h:114; TH1::FillNvirtual void FillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)Fill this histogram with an array x and weights w.Definition TH1.cxx:3447; TH1::UpdateBinContentvirtual void UpdateBinContent(Int_t bin, Double_t content)Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin...Definition TH1.cxx:9449; TH1::GetLabelOffsetvirtual Float_t GetLabelOffset(Option_t *axis=""X"") constReturn the ""axis"" label offset.Definition Haxis.cxx:79; TH1::CheckEqualAxesstatic bool CheckEqualAxes(const TAxis *a1, const TAxis *a2)Check that the axis are the same.Definition TH1.cxx:1611; TH1::EBinErrorOptEBinErrorOptEnumeration specifying type of statistics for bin errors.Definition TH1.h:64; TH1::kPoisson2@ kPoisson2Errors from Poisson interval at 95% CL (~ 2 sigma)Definition TH1.h:67; TH1::kNormal@ kNormalErrors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N)Definition TH1.h:65; TH1::kPoisson@ kPoissonErrors from Poisson interval at 68.3% (1 sigma)Definition TH1.h:66; TH1::GetBinContentvirtual Double_t GetBinContent(Int_t bin) constReturn content of bin number bin.Definition TH1.cxx:5061; TH1::GetSumw2virtual TArrayD * GetSumw2()Definition TH1.h:313; TH1::GetContourvirtual Int_t GetContour(Double_t *levels=nullptr)Return contour values into array levels if pointer levels is non zero.Definition TH1.cxx:8411; TH1::fXaxisTAxis fXaxisX axis descriptor.Definition TH1.h:90; TH1::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1, Option_t *axis=""X"")Specify a parameter offset to control the distance between the axis and the axis' title.Definition Haxis.cxx:345; TH1::GetBufferconst Double_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:77583,error,errors,77583,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['error'],['errors']
Availability,"cxx:3362; TMinuit::fXmidcrDouble_t fXmidcrDefinition TMinuit.h:63; TMinuit::fMIGRxxsDouble_t * fMIGRxxsDefinition TMinuit.h:112; TMinuit::fNpagwdInt_t fNpagwdDefinition TMinuit.h:134; TMinuit::fPARSplistDouble_t * fPARSplistDefinition TMinuit.h:124; TMinuit::fApsiDouble_t fApsiDefinition TMinuit.h:54; TMinuit::fBigedmDouble_t fBigedmDefinition TMinuit.h:61; TMinuit::~TMinuit~TMinuit() overrideMinuit default destructor.Definition TMinuit.cxx:497; TMinuit::fCstatuTString fCstatuDefinition TMinuit.h:167; TMinuit::fNwrmesInt_t fNwrmes[2]Definition TMinuit.h:151; TMinuit::fVlimloDouble_t fVlimloDefinition TMinuit.h:58; TMinuit::mnrazzvirtual void mnrazz(Double_t ynew, Double_t *pnew, Double_t *y, Int_t &jh, Int_t &jl)Called only by MNSIMP (and MNIMPR) to add a new point.Definition TMinuit.cxx:6568; TMinuit::fChptchar * fChptDefinition TMinuit.h:164; TMinuit::fIsysrdInt_t fIsysrdDefinition TMinuit.h:131; TMinuit::fXdircrDouble_t fXdircrDefinition TMinuit.h:65; TMinuit::mnmnosvirtual void mnmnos()Performs a MINOS error analysis.Definition TMinuit.cxx:5388; TMinuit::fUpdfltDouble_t fUpdfltDefinition TMinuit.h:62; TMinuit::mnlinevirtual void mnline(Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler)Perform a line search from position START.Definition TMinuit.cxx:4736; TMinuit::fNpfixInt_t fNpfixDefinition TMinuit.h:37; TMinuit::fMaxextInt_t fMaxextDefinition TMinuit.h:42; TMinuit::fNvarlInt_t * fNvarlDefinition TMinuit.h:126; TMinuit::mncuvevirtual void mncuve()Makes sure that the current point is a local minimum.Definition TMinuit.cxx:2130; TMinuit::fMATUvlineDouble_t * fMATUvlineDefinition TMinuit.h:107; TMinuit::fBlimDouble_t * fBlimDefinition TMinuit.h:70; TMinuit::fVthmatDouble_t * fVthmatDefinition TMinuit.h:90; TMinuit::mnscanvirtual void mnscan()Scans the values of FCN as a function of one parameter.Definition TMinuit.cxx:6708; TMinuit::fCundefTString fCundefDefinition TMinuit.h:170; TMinuit::fMIGRflnuDouble_t * fMIGRflnuDefinition TMinu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:263027,error,error,263027,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"cy histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE1: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor; is used , ie this = this + c1*factor*h1; Use the other TH1::Add function if you do not want this feature. The function return kFALSE if the Add operation failed. Bool_t Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); Replace contents of this histogram by the addition of h1 and h2. this = c1*h1 + c2*h2; if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; Note also that adding histogram with labels is not supported, histogram will be; added merging them by bin number independently of the labels.; For adding histogram ith labels one should use TH1::Merge. SPECIAL CASE (Average/Efficiency histograms); For histograms representing averages or efficiencies, one should compute the average; of the two histograms and not the sum. One can mark a histogram to be an average; histogram by setting its bit kIsAverage with; myhist.SetBit(TH1::kIsAverage);; Note that the two histograms must have their kIsAverage bit set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Add. ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0; do a scaling this = c1 * h1 / (bin Volume). The function returns kFALSE if the Add operation failed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:44160,error,errors,44160,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['error'],['errors']
Availability,"cy to be as small as 3 digits . Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompBase.html:2414,toler,tolerance,2414,root/html528/TDecompBase.html,https://root.cern,https://root.cern/root/html528/TDecompBase.html,6,['toler'],['tolerance']
Availability,"cy::GetDimensionInt_t GetDimension() constreturns the dimension of the current TEfficiency objectDefinition TEfficiency.cxx:2659; TEfficiency::fPaintGraph2DTGraph2DAsymmErrors * fPaintGraph2D! Temporary graph for paintingDefinition TEfficiency.h:56; TEfficiency::operator+=TEfficiency & operator+=(const TEfficiency &rhs)Adds the histograms of another TEfficiency object to current histograms.Definition TEfficiency.cxx:2979; TEfficiency::SetBinsBool_t SetBins(Int_t nx, Double_t xmin, Double_t xmax)Set the bins for the underlined passed and total histograms If the class have been already filled the...Definition TEfficiency.cxx:3389; TEfficiency::Buildvoid Build(const char *name, const char *title)Building standard data structure of a TEfficiency object.Definition TEfficiency.cxx:1505; TEfficiency::GetCopyPassedHistoTH1 * GetCopyPassedHisto() constReturns a cloned version of fPassedHistogram.Definition TEfficiency.cxx:2617; TEfficiency::GetEfficiencyErrorUpDouble_t GetEfficiencyErrorUp(Int_t bin) constReturns the upper error on the efficiency in the given global bin.Definition TEfficiency.cxx:2812; TEfficiency::fBeta_alphaDouble_t fBeta_alphaGlobal parameter for prior beta distribution (default = 1)Definition TEfficiency.h:47; TEfficiency::UsesBayesianStatBool_t UsesBayesianStat() constDefinition TEfficiency.h:161; TEfficiency::GetPassedHistogramconst TH1 * GetPassedHistogram() constDefinition TEfficiency.h:125; TEfficiency::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *opt="""") overrideHave histograms fixed bins along each axis?Definition TEfficiency.cxx:3155; TEfficiency::SetBetaBetavoid SetBetaBeta(Double_t beta)Sets the shape parameter β.Definition TEfficiency.cxx:3347; TEfficiency::GetConfidenceLevelDouble_t GetConfidenceLevel() constDefinition TEfficiency.h:112; TEfficiency::CheckBinningstatic Bool_t CheckBinning(const TH1 &pass, const TH1 &total)Checks binning for each axis.Definition TEfficiency.cxx:1527; TEfficiency::SetNamevoid SetName(const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8h_source.html:18298,error,error,18298,doc/master/TEfficiency_8h_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8h_source.html,1,['error'],['error']
Availability,"cy::GetDimensionInt_t GetDimension() constreturns the dimension of the current TEfficiency objectDefinition TEfficiency.cxx:2659; TEfficiency::fPaintGraph2DTGraph2DAsymmErrors * fPaintGraph2D! Temporary graph for paintingDefinition TEfficiency.h:56; TEfficiency::operator+=TEfficiency & operator+=(const TEfficiency &rhs)Adds the histograms of another TEfficiency object to current histograms.Definition TEfficiency.cxx:2979; TEfficiency::SetBinsBool_t SetBins(Int_t nx, Double_t xmin, Double_t xmax)Set the bins for the underlined passed and total histograms If the class have been already filled the...Definition TEfficiency.cxx:3389; TEfficiency::Buildvoid Build(const char *name, const char *title)Building standard data structure of a TEfficiency object.Definition TEfficiency.cxx:1505; TEfficiency::GetCopyPassedHistoTH1 * GetCopyPassedHisto() constReturns a cloned version of fPassedHistogram.Definition TEfficiency.cxx:2617; TEfficiency::GetEfficiencyErrorUpDouble_t GetEfficiencyErrorUp(Int_t bin) constReturns the upper error on the efficiency in the given global bin.Definition TEfficiency.cxx:2812; TEfficiency::fBeta_alphaDouble_t fBeta_alphaGlobal parameter for prior beta distribution (default = 1)Definition TEfficiency.h:47; TEfficiency::UsesBayesianStatBool_t UsesBayesianStat() constDefinition TEfficiency.h:161; TEfficiency::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *opt="""") overrideHave histograms fixed bins along each axis?Definition TEfficiency.cxx:3155; TEfficiency::SetBetaBetavoid SetBetaBeta(Double_t beta)Sets the shape parameter β.Definition TEfficiency.cxx:3347; TEfficiency::GetConfidenceLevelDouble_t GetConfidenceLevel() constDefinition TEfficiency.h:112; TEfficiency::CheckBinningstatic Bool_t CheckBinning(const TH1 &pass, const TH1 &total)Checks binning for each axis.Definition TEfficiency.cxx:1527; TEfficiency::SetNamevoid SetName(const char *name) overrideSets the name.Definition TEfficiency.cxx:3547; TEfficiency::CreateGraph2DTGraph2DAsym",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:166967,error,error,166967,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['error'],['error']
Availability,"d ""DATE"".; 1543/// The DATE attributes can also be edited interactively (position; 1544/// and attributes) via the normal context menu.; 1545 ; 1546void TStyle::SetOptDate(Int_t optdate); 1547{; 1548 fOptDate = optdate;; 1549 Int_t mode = optdate % 10;; 1550 if (mode == 1) {; 1551 SetDateX(0.01);; 1552 SetDateY(0.01);; 1553 fAttDate.SetTextAlign(11);; 1554 }; 1555 if (mode == 2) {; 1556 SetDateX(0.99);; 1557 SetDateY(0.01);; 1558 fAttDate.SetTextAlign(31);; 1559 }; 1560 if (mode == 3) {; 1561 SetDateX(0.99);; 1562 SetDateY(0.99);; 1563 fAttDate.SetTextAlign(33);; 1564 }; 1565}; 1566 ; 1567////////////////////////////////////////////////////////////////////////////////; 1568/// The type of information about fit parameters printed in the histogram; 1569/// statistics box can be selected via the parameter `mode`.; 1570/// The parameter mode can be = `pcev`:; 1571/// - p = 1; print Probability; 1572/// - c = 1; print Chisquare/Number of degrees of freedom; 1573/// - e = 1; print errors (if e=1, v must be 1); 1574/// - v = 1; print name/values of parameters; 1575/// Example: `gStyle->SetOptFit(1011);`; 1576/// print fit probability, parameter names/values and errors.; 1577/// - When ""v""=1 is specified, only the non-fixed parameters are shown.; 1578/// - When ""v""=2 all parameters are shown.; 1579///; 1580/// #### Notes:; 1581///; 1582/// - never call `SetOptFit(000111);` but `SetOptFit(111)`, 000111 will; 1583/// be taken as an octal number !!; 1584/// - `gStyle->SetOptFit(1)` is a shortcut allowing to set the most common; 1585/// case and is equivalent to `gStyle->SetOptFit(111)`; 1586/// - At ROOT startup the option fit is set to `0`. So, to see the fit parameters; 1587/// on all plot resulting from a fit, a call to `gStyle->SetOptFit()` with a; 1588/// non null value should be done. One can put it in the `rootlogon.C` file to; 1589/// always have it.; 1590///; 1591/// see also SetOptStat below.; 1592 ; 1593void TStyle::SetOptFit(Int_t mode); 1594{; 1595 fOptFit = mode;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8cxx_source.html:51518,error,errors,51518,doc/master/TStyle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8cxx_source.html,2,['error'],['errors']
Availability,"d ""sigma"" in 2 sepate pads. ;  ;  FittingDemo.C;   Example for fitting signal/background. ;  ;  graph2dfit.C;   Fitting a TGraph2D ;  ;  Ifit.C;   Example of a program to fit non-equidistant data points ;  ;  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ;  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ;  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ;  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ;  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ;  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ;  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ;  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ;  NumericalMinimization.py;  ;  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ;  TestBinomial.C;   Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ;  ;  TwoHistoFit2D.C;   Example to fit two histograms at the same time. ;  ;  vectorizedFit.C;   Tutorial for creating a Vectorized TF1 function using a formula expression and use it for fitting an histogram ;  . tutorialsfit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html:4390,error,errors,4390,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,2,['error'],['errors']
Availability,"d (or zero if no limits); *-* XUPLIM: the upper bound (or zero if no limits); *-* IUINT: the internal parameter number (or zero if not variable,; *-* or negative if undefined).; *-* Note also: If IUEXT is negative, then it is -internal parameter; *-* number, and IUINT is returned as the EXTERNAL number.; *-* Except for IUINT, this is exactly the inverse of MNPARM; *-* User-called; *. void mnprin(Int_t inkode, Double_t fval); Prints the values of the parameters at the time of the call*-; *-* ===========================================================; *-* also prints other relevant information such as function value,; *-* estimated distance to minimum, parameter errors, step sizes.; -; *-* According to the value of IKODE, the printout is:; *-* IKODE=INKODE= 0 only info about function value; *-* 1 parameter values, errors, limits; *-* 2 values, errors, step sizes, internal values; *-* 3 values, errors, step sizes, first derivs.; *-* 4 values, parabolic errors, MINOS errors; *-* when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]; *. void mnpsdf(); -*Calculates the eigenvalues of v to see if positive-def; *-* ======================================================; *-* if not, adds constant along diagonal to make positive.; *. void mnrazz(Double_t ynew, Double_t* pnew, Double_t* y, Int_t& jh, Int_t& jl); Called only by MNSIMP (and MNIMPR) to add a new point*-*-; *-* =====================================================; *-* and remove an old one from the current simplex, and get the; *-* estimated distance to minimum.; *. void mnrn15(Double_t& val, Int_t& inseed); This is a super-portable random number generator; *-* ================================================; *-* It should not overflow on any 32-bit machine.; *-* The cycle is only ~10**9, so use with care!; *-* Note especially that VAL must not be undefined on input.; *-* Set Default Starting Seed; *. void mnrset(Int_t iopt); Resets function value and errors to UNDEFINED; *-* ======================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:51325,error,errors,51325,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,12,['error'],['errors']
Availability,"d *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TSysEvtHandler.h>. Inheritance diagram for TFileHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkRead ; kWrite . Definition at line 75 of file TSysEvtHandler.h. Constructor & Destructor Documentation. ◆ TFileHandler() [1/2]. TFileHandler::TFileHandler ; (; ). inlineprotected . Definition at line 72 of file TSysEvtHandler.h. ◆ TFileHandler() [2/2]. TFileHandler::TFileHandler ; (; int ; fd, . int ; mask . ). Create a file descriptor event handler. ; If mask=kRead then we want to monitor the file for read readiness, if mask=kWrite then we monitor the file for write readiness, if mask=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 59 of file TSysEvtHandler.cxx. ◆ ~TFileHandler(). virtual TFileHandler::~TFileHandler ; (; ). inlinevirtual . Definition at line 78 of file TSysEvtHandler.h. Member Function Documentation. ◆ Add(). void TFileHandler::Add ; (; ). overridevirtual . Add file event handler to system file handler list. ; Implements TSysEvtHandler.; Definition at line 126 of file TSysEvtHandler.cxx. ◆ Class(). static TClass * TFileHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFileHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFileHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileHandler.html:16751,mask,mask,16751,doc/master/classTFileHandler.html,https://root.cern,https://root.cern/doc/master/classTFileHandler.html,1,['mask'],['mask']
Availability,"d * ; buffer, . Int_t ; bytes . ). protected . Read a 8 byte long little-endian integer value from ""buffer"". ; Definition at line 535 of file TZIPFile.cxx. ◆ IsA(). TClass * TZIPFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TArchiveFile.; Definition at line 144 of file TZIPFile.h. ◆ OpenArchive(). Int_t TZIPFile::OpenArchive ; (; ). overridevirtual . Open archive and read end-header and directory. ; Returns -1 in case of error, 0 otherwise. ; Implements TArchiveFile.; Definition at line 88 of file TZIPFile.cxx. ◆ operator=(). TZIPFile & TZIPFile::operator= ; (; const TZIPFile & ; ). protecteddelete . ◆ Print(). void TZIPFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Pretty print ZIP archive members. ; Reimplemented from TObject.; Definition at line 557 of file TZIPFile.cxx. ◆ ReadDirectory(). Int_t TZIPFile::ReadDirectory ; (; ). protected . Read the directory of the ZIP archive. ; Returns -1 in case of error, 0 otherwise. ; Definition at line 278 of file TZIPFile.cxx. ◆ ReadEndHeader(). Int_t TZIPFile::ReadEndHeader ; (; Long64_t ; pos). protected . Read the end header of the ZIP archive including the archive comment at the current file position. ; Check that it really was a single-disk archive with all the entries as expected. Most importantly, figure out where the central directory begins. Returns -1 in case of error, 0 otherwise. ; Definition at line 139 of file TZIPFile.cxx. ◆ ReadMemberHeader(). Int_t TZIPFile::ReadMemberHeader ; (; TZIPMember * ; member). protected . Read the member header of the ZIP archive. ; Sets the position where the data starts in the member object. Returns -1 in case of error, 0 otherwise. ; Definition at line 404 of file TZIPFile.cxx. ◆ ReadZip64EndLocator(). Long64_t TZIPFile::ReadZip64EndLocator ; (; Long64_t ; pos). protected . Read Zip64 end of central directory locator. ; Returns -1 in case of error, -2 in case end locator magic is not found (i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:25155,error,error,25155,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['error'],['error']
Availability,"d * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:19160,error,error,19160,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,2,['error'],['error']
Availability,"d * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:23384,error,error,23384,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['error'],['error']
Availability,"d . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration performed to find the Root. int Iterate(). Perform a single iteration and return the Status. double Root() const. Return the current and latest estimate of the Root. int Status() const. Return the status of the last estimate of the Root; = 0 OK, not zero failure. const char * Name() const. Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms). double XLower() const {; return fSolver->XLower();; }. Return the current and latest estimate of the upper value of the Root-finding interval (for bracketing algorithms). double XUpper() const {; return fSolver->XUpper();; }. Get Name of the Root-finding solver algorithm. » Last changed: root/mathmore:$Id: RootFinder.h 33942 2010-06-16 13:12:17Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__RootFinder.html:3167,failure,failure,3167,root/html528/ROOT__Math__RootFinder.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__RootFinder.html,1,['failure'],['failure']
Availability,"d . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration performed to find the Root. int Iterate(). Perform a single iteration and return the Status. double Root() const. Return the current and latest estimate of the Root. int Status() const. Return the status of the last estimate of the Root; = 0 OK, not zero failure. const char * Name() const. Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms). double XLower() const {; return fSolver->XLower();; }. Return the current and latest estimate of the upper value of the Root-finding interval (for bracketing algorithms). double XUpper() const {; return fSolver->XUpper();; }. Get Name of the Root-finding solver algorithm. » Last changed: root/mathmore:$Id: RootFinder.h 33942 2010-06-16 13:12:17Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__RootFinder.html:3169,failure,failure,3169,root/html530/ROOT__Math__RootFinder.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__RootFinder.html,1,['failure'],['failure']
Availability,"d . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration performed to find the Root. int Iterate(). Perform a single iteration and return the Status. double Root() const. Return the current and latest estimate of the Root. int Status() const. Return the status of the last estimate of the Root; = 0 OK, not zero failure. const char * Name() const. Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms). double XLower() const {; return fSolver->XLower();; }. Return the current and latest estimate of the upper value of the Root-finding interval (for bracketing algorithms). double XUpper() const {; return fSolver->XUpper();; }. Get Name of the Root-finding solver algorithm. » Last changed: root/mathmore:$Id: RootFinder.h 33942 2010-06-16 13:12:17Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RootFinder.html:3169,failure,failure,3169,root/html532/ROOT__Math__RootFinder.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RootFinder.html,1,['failure'],['failure']
Availability,"d . Definition at line 268 of file THttpWSHandler.cxx. ◆ SendCharStarWS(). Int_t THttpWSHandler::SendCharStarWS ; (; UInt_t ; wsid, . const char * ; str . ). Send string via given websocket id. ; Returns:. -1 - in case of error,; 0 - when operation was executed immediately,; 1 - when send operation will be performed in different thread, . Definition at line 476 of file THttpWSHandler.cxx. ◆ SendHeaderWS(). Int_t THttpWSHandler::SendHeaderWS ; (; UInt_t ; wsid, . const char * ; hdr, . const void * ; buf, . int ; len . ). Send binary data with text header via given websocket id. ; Returns:. -1 - in case of error,; 0 - when operation was executed immediately,; 1 - when send operation will be performed in different thread, . Definition at line 431 of file THttpWSHandler.cxx. ◆ SendWS(). Int_t THttpWSHandler::SendWS ; (; UInt_t ; wsid, . const void * ; buf, . int ; len . ). Send binary data via given websocket id. ; Returns:. -1 - in case of error; 0 - when operation was executed immediately; 1 - when send operation will be performed in different thread . Definition at line 386 of file THttpWSHandler.cxx. ◆ SetDisabled(). void THttpWSHandler::SetDisabled ; (; ). inline . Disable all processing of websockets, normally called shortly before destructor. ; Definition at line 94 of file THttpWSHandler.h. ◆ Streamer(). void THttpWSHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THttpWSHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 114 of file THttpWSHandler.h. ◆ VerifyDefaultPageContent(). virtual void THttpWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented in ROOT::RWebWindowWSHandler.; Definition at line 60 of file THttpWSHandler.h. Friends And Relat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpWSHandler.html:24145,error,error,24145,doc/master/classTHttpWSHandler.html,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html,1,['error'],['error']
Availability,d . logical page size of scrollbar ; Definition at line 73 of file TGScrollBar.h. ◆ fRange. Int_t TGScrollBar::fRange. protected . logical upper range of scrollbar ; Definition at line 72 of file TGScrollBar.h. ◆ fRepeat. TTimer* TGScrollBar::fRepeat. protected . repeat rate timer (when mouse stays pressed) ; Definition at line 83 of file TGScrollBar.h. ◆ fSlider. TGScrollBarElement* TGScrollBar::fSlider. protected . slider ; Definition at line 80 of file TGScrollBar.h. ◆ fSliderRange. Int_t TGScrollBar::fSliderRange. protected . logical slider range ; Definition at line 76 of file TGScrollBar.h. ◆ fSliderSize. Int_t TGScrollBar::fSliderSize. protected . logical slider size ; Definition at line 75 of file TGScrollBar.h. ◆ fSmallInc. Int_t TGScrollBar::fSmallInc. protected . Small Increment in the sliding algorithm. ; Definition at line 77 of file TGScrollBar.h. ◆ fSubw. Window_t TGScrollBar::fSubw. protected . sub window in which mouse is pressed ; Definition at line 84 of file TGScrollBar.h. ◆ fTail. TGScrollBarElement* TGScrollBar::fTail. protected . tail button of scrollbar ; Definition at line 79 of file TGScrollBar.h. ◆ fTailPic. const TGPicture* TGScrollBar::fTailPic. protected . picture in tail (down or right arrow) ; Definition at line 82 of file TGScrollBar.h. ◆ fX0. Int_t TGScrollBar::fX0. protected . Definition at line 68 of file TGScrollBar.h. ◆ fXp. Int_t TGScrollBar::fXp. protected . Definition at line 69 of file TGScrollBar.h. ◆ fY0. Int_t TGScrollBar::fY0. protected . current slider position in pixels ; Definition at line 68 of file TGScrollBar.h. ◆ fYp. Int_t TGScrollBar::fYp. protected . previous slider position in pixels ; Definition at line 69 of file TGScrollBar.h. Libraries for TGScrollBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGScrollBar.h; gui/gui/src/TGScrollBar.cxx. TGScrollBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBar.html:40227,down,down,40227,doc/master/classTGScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGScrollBar.html,1,['down'],['down']
Availability,"d 2D peaks and 1D ridges. . amplitudeErrors - gets vector of amplitudes errors of 2D peaks; amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:65307,error,errors,65307,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['errors']
Availability,"d AddEnvVar(const char* name, const char* value); Add an variable to the list of environment variables passed to proofserv; on the master and slaves. void DelEnvVar(const char* name); Remove an variable from the list of environment variables passed to proofserv; on the master and slaves. void ResetEnvVars(); Clear the list of environment variables passed to proofserv; on the master and slaves. void SaveWorkerInfo(); Save informations about the worker set in the file .workers in the working; dir. Called each time there is a change in the worker setup, e.g. by; TProof::MarkBad(). Int_t GetParameter(TCollection* c, const char* par, TString& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Int_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Long64_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t GetParameter(TCollection* c, const char* par, Double_t& value); Get the value from the specified parameter from the specified collection.; Returns -1 in case of error (i.e. list is 0, parameter does not exist; or value type does not match), 0 otherwise. Int_t AssertDataSet(TDSet* dset, TList* input, TDataSetManager* mgr, TString& emsg); Make sure that dataset is in the form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:86020,error,error,86020,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['error'],['error']
Availability,"d Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TWinNTSystem.h>. Inheritance diagram for TWinNTSystem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ThreadMsgFunc_t. typedef Bool_t(* TWinNTSystem::ThreadMsgFunc_t) (MSG *). Definition at line 61 of file TWinNTSystem.h. Constructor & Destructor Documentation. ◆ TWinNTSystem(). TWinNTSystem::TWinNTSystem ; (; ). ctor ; Definition at line 985 of file TWinNTSystem.cxx. ◆ ~TWinNTSystem(). TWinNTSystem::~TWinNTSystem ; (; ). virtual . dtor ; Definition at line 1048 of file TWinNTSystem.cxx. Member Function Documentation. ◆ Abort(). void TWinNTSystem::Abort ; (; int ; code = 0). overridevirtual . Abort the application. ; Reimplemented from TSystem.; Definition at line 3949 of file TWinNTSystem.cxx. ◆ AcceptConnection(). int TWinNTSystem::AcceptConnection ; (; int ; socket). overridevirtual . Accept a connection. ; In case of an error return -1. In case non-blocking I/O is enabled and no connections are available return -2. ; Reimplemented from TSystem.; Definition at line 5525 of file TWinNTSystem.cxx. ◆ AccessPathName(). Bool_t TWinNTSystem::AccessPathName ; (; const char * ; path, . EAccessMode ; mode = kFileExists . ). overridevirtual . Returns FALSE if one can access a file using the specified access mode. ; Mode is the same as for the WinNT access(2) function. Attention, bizarre convention of return value!! ; Reimplemented from TSystem.; Definition at line 2557 of file TWinNTSystem.cxx. ◆ AddDynamicPath(). void TWinNTSystem::AddDynamicPath ; (; const char * ; dir). overridevirtual . Add a new directory to the dynamic path. ; Reimplemented from TSystem.; Definition at line 4077 of file TWinNTSystem.cxx. ◆ AddFileHandler(). void TWinNTSystem::AddFileHandler ; (; TFileHandler * ; h). overridevirtual . Add a file handler to the list of system file handlers. ; Only adds the handler if it is not already in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:37477,error,error,37477,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['error'],['error']
Availability,"d Attributes |; Static Protected Attributes |; Private Attributes |; List of all members ; TProofBench Class ReferencePROOF » PROOF benchmark utilities. ; Steering class for PROOF benchmarks. ; Definition at line 37 of file TProofBench.h. Public Member Functions;  TProofBench (const char *url, const char *outfile=""<default>"", const char *proofopt=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBench () override;  Destructor. ;  ; void CloseOutFile ();  Close output file. ;  ; Int_t CopyDataSet (const char *dset, const char *dsetdst, const char *destdir);  Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst' decribing them. ;  ; Bool_t GetDebug ();  ; const char * GetOutFileName () const;  ; TClass * IsA () const override;  ; Int_t MakeDataSet (const char *dset=0, Long64_t nevt=-1, const char *fnroot=""event"", Bool_t regenerate=kFALSE);  Create the largest dataset for the run. ;  ; Int_t OpenOutFile (Bool_t wrt=kFALSE, Bool_t verbose=kTRUE);  Set the otuput file Return 0 on success, -1 on error. ;  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveDataSet (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; Int_t RunCPU (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1, Int_t step=-1);  Perform the CPU run Return 0 on success, -1 on error. ;  ; Int_t RunCPUx (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1);  Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ;  ; Int_t RunDataSet (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1, Int_t step=1);  Perform a test using dataset 'dset' Return 0 on success, -1 on error Open the file for the results. ;  ; Int_t RunDataSetx (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1);  Perform a test using dataset 'dset' scanning over the number of workers per node. ;  ; void SetCPUPar (const char *par);  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:1302,error,error,1302,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,1,['error'],['error']
Availability,"d BuildOptions(Double_t tmin, Double_t tmax, Option_t *option)Set Profile3D histogram structure and options.Definition TProfile3D.cxx:141; TProfile3D::FillInt_t Fill(const Double_t *v)Definition TProfile3D.h:53; TProfile3D::fBinSumw2TArrayD fBinSumw2Array of sum of squares of weights per bin.Definition TProfile3D.h:41; TProfile3D::GetBDouble_t * GetB()Definition TProfile3D.h:73; TProfile3D::BufferEmptyInt_t BufferEmpty(Int_t action=0) overrideFill histogram with all entries in the buffer.Definition TProfile3D.cxx:246; TProfile3D::SetBuffervoid SetBuffer(Int_t buffersize, Option_t *opt="""") overrideSet the buffer size in units of 8 bytes (double).Definition TProfile3D.cxx:1327; TProfile3D::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TProfile3D.cxx:1223; TProfile3D::GetTmaxvirtual Double_t GetTmax() constDefinition TProfile3D.h:125; TProfile3D::SetErrorOptionvirtual void SetErrorOption(Option_t *option="""")Set option to compute profile3D errors.Definition TProfile3D.cxx:1365; TProfile3D::BufferFillInt_t BufferFill(Double_t, Double_t, Double_t) overrideDefinition TProfile3D.h:45; TProfile3D::SetBinsvoid SetBins(Int_t, Double_t, Double_t) overrideRedefine x axis parameters.Definition TProfile3D.h:77; TProfile3D::ProjectionXYZvirtual TH3D * ProjectionXYZ(const char *name=""_pxyz"", Option_t *option=""e"") constProject this profile3D into a 3-D histogram along X,Y,Z.Definition TProfile3D.cxx:961; TProfile3D::GetBinErrorDouble_t GetBinError(Int_t, Int_t) const overrideDefinition TProfile3D.h:115; TProfile3D::GetB2Double_t * GetB2()Definition TProfile3D.h:74; TProfile3D::AddBool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""") overridePerforms the operation: this = this + c1*f1 .Definition TProfile3D.cxx:172; TProfile3D::GetBinContentDouble_t GetBinContent(Int_t bin) const overrideReturn bin content of a Profile3D histogram.Definition TProfile3D.cxx:691; TProfile3D::fErrorMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8h_source.html:16948,error,errors,16948,doc/master/TProfile3D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8h_source.html,1,['error'],['errors']
Availability,"d CreateParamsSettings(const ROOT::Math::IParamMultiFunction& func). set the parameter settings from a model function.; Create always new parameter setting list from a given model function. void SetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0). set the parameter settings from number of parameters and a vector of values and optionally step values. If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetMinosErrors(const std::vector<unsigned int> & paramInd ); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetDefaultMinimizer(const char* type, const char* algo = 0). static f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__FitConfig.html:4011,error,errors,4011,root/html526/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__FitConfig.html,1,['error'],['errors']
Availability,"d CreateParamsSettings(const ROOT::Math::IParamMultiFunction& func). set the parameter settings from a model function.; Create always new parameter setting list from a given model function. void SetParamsSettings(unsigned int npar, const double* params, const double* vstep = 0). set the parameter settings from number of parameters and a vector of values and optionally step values. If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetDefaultMinimizer(const char* type, const char* algo = 0). static function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitConfig.html:4033,error,errors,4033,root/html528/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitConfig.html,1,['error'],['errors']
Availability,"d EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInterpreter.html:19237,error,error,19237,root/html534/TInterpreter.html,https://root.cern,https://root.cern/root/html534/TInterpreter.html,1,['error'],['error']
Availability,"d EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). void SetGetline(char *(*)(const char* prompt) getlineFunc, void (*)(char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void RewindDictionary(). Int_t DeleteGlobal(void* obj). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:18637,error,error,18637,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,1,['error'],['error']
Availability,"d EndOfLineAction(). Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. Int_t InitializeDictionaries(). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE). void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TInterpreter.html:18757,error,error,18757,root/html530/TInterpreter.html,https://root.cern,https://root.cern/root/html530/TInterpreter.html,2,['error'],['error']
Availability,"d FcnGrad(int& , double* g, double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; provided gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double ); set the value of an existing variable; parameter must exist or return false. std::string VariableName(unsigned int ivar) const; return the variable name. int VariableIndex(const string& name) const; return variable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. bool GetCovMatrix(double* cov) const; get covariance matrix. bool GetHessianMatrix(double* h) const; get Hessian - inverse of covariance matrix; just invert it; but need to get the compact form to avoid the zero for the fixed parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= appro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMinuitMinimizer.html:8499,error,errors,8499,root/html530/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html530/TMinuitMinimizer.html,2,['error'],['errors']
Availability,"d FcnGrad(int& , double* g, double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; provided gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double ); set the value of an existing variable; parameter must exist or return false. std::string VariableName(unsigned int ivar) const; return the variable name. int VariableIndex(const string& name) const; return variable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix. double GlobalCC(unsigned int ) const; global correlation coefficient for parameter i. bool GetMinosError(unsigned int i, double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuitMinimizer.html:8407,error,errors,8407,root/html528/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html528/TMinuitMinimizer.html,1,['error'],['errors']
Availability,"d FreeGC(const TGGC* gc); Free a graphics context. void FreeGC(GContext_t gc); Free a graphics context. TGFont * GetFont(const char* font, Bool_t fixedDefault = kTRUE); Get a font from the font pool. Fonts must be freed via; TGClient::FreeFont(). Returns 0 in case of error or if font; does not exist. If fixedDefault is false the ""fixed"" font; will not be substituted as fallback when the asked for font; does not exist. TGFont * GetFont(const TGFont* font); Get again specified font. Will increase its usage count. void FreeFont(const TGFont* font); Free a font. void NeedRedraw(TGWindow* w, Bool_t force = kFALSE); Set redraw flags. void CancelRedraw(TGWindow* w). Bool_t GetColorByName(const char* name, Pixel_t& pixel) const; Get a color by name. If color is found return kTRUE and pixel is; set to the color's pixel value, kFALSE otherwise. FontStruct_t GetFontByName(const char* name, Bool_t fixedDefault = kTRUE) const; Get a font by name. If font is not found, fixed font is returned,; if fixed font also does not exist return 0 and print error.; The loaded font needs to be freed using TVirtualX::DeleteFont().; If fixedDefault is false the ""fixed"" font will not be substituted; as fallback when the asked for font does not exist. Pixel_t GetHilite(Pixel_t base_color) const; Return pixel value of hilite color based on base_color. Pixel_t GetShadow(Pixel_t base_color) const; Return pixel value of shadow color based on base_color.; Shadow is 60% of base_color intensity. void FreeColor(Pixel_t color) const; Free color. void RegisterWindow(TGWindow* w); Add a TGWindow to the clients list of windows. void UnregisterWindow(TGWindow* w); Remove a TGWindow from the list of windows. void RegisterPopup(TGWindow* w); Add a popup menu to the list of popups. This list is used to pass; events to popup menus that are popped up over a transient window which; is waited for (see WaitFor()). void UnregisterPopup(TGWindow* w); Remove a popup menu from the list of popups. void AddUnknownWindowHand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGClient.html:15456,error,error,15456,root/html534/TGClient.html,https://root.cern,https://root.cern/root/html534/TGClient.html,3,['error'],['error']
Availability,"d GetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double* x, double* ci, double cl = 0.95) const. get confidence intervals for an array of n points x.; stride1 indicates the stride in the coordinate space while stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors(); flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter. void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 31604 2009-12-07 19:04:33Z moneta $ » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__FitResult.html:9522,error,errors,9522,root/html526/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__FitResult.html,1,['error'],['errors']
Availability,"d Members; Includes; Libraries. Function documentation; TFTP(const char* url, Int_t parallel = 1, Int_t wsize = kDfltWindowSize, TSocket* sock = 0); Open connection to host specified by the url using par parallel sockets.; The url has the form: [root[s,k]://]host[:port].; If port is not specified the default rootd port (1094) will be used.; Using wsize one can specify the tcp window size. Normally this is not; needed when using parallel sockets.; An existing connection (TSocket *sock) can also be used to establish; the FTP session. void Init(const char* url, Int_t parallel, Int_t wsize); Set up the actual connection. ~TFTP(); TFTP dtor. Send close message and close socket. void Print(Option_t* opt = """") const; Print some info about the FTP connection. void PrintError(const char* where, Int_t err) const; Print error string depending on error code. Int_t Recv(Int_t& status, EMessageTypes& kind) const; Return status from rootd server and message kind. Returns -1 in; case of error otherwise 8 (sizeof 2 words, status and kind). void SetBlockSize(Int_t blockSize); Make sure the block size is a power of two, with a minimum of 32768. Long64_t PutFile(const char* file, const char* remoteName = 0); Transfer file to remote host. Returns number of bytes; sent or < 0 in case of error. Error -1 connection is still; open, error -2 connection has been closed. In case of failure; fRestartAt is set to the number of bytes correclty transfered.; Calling PutFile() immediately afterwards will restart at fRestartAt.; If this is not desired call SetRestartAt(0) before calling PutFile().; If rootd reports that the file is locked, and you are sure this is not; the case (e.g. due to a crash), you can force unlock it by prepending; the remoteName with a '-'. Long64_t GetFile(const char* file, const char* localName = 0); Transfer file from remote host. Returns number of bytes; received or < 0 in case of error. Error -1 connection is still; open, error -2 connection has been closed. In case of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:8737,error,error,8737,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,6,['error'],['error']
Availability,"d Multiplying; Many types of operations are supported on histograms or between histograms:. Addition of a histogram to the current histogram; Additions of two histograms with coefficients and storage into the current histogram; Multiplications and divisions are supported in the same way as additions.; The Add , Divide and Multiply methods also exist to add, divide or multiply a histogram by a function. Histograms objects (not pointers) TH1F h1 can be multiplied by a constant using:; h1.Scale(const); A new histogram can be created without changing the original one by doing:; TH1F h3 = 8*h1;; To multiply two histogram objects and put the result in a 3rd one do:; TH1F h3 = h1*h2;; The same operations can be done with histogram pointers TH1F *h1, *h2 following way:; h1->Scale(const) TH1F h3 = 8*(*h1); TH1F h3 = (*h1)*(*h2);; Of course, the TH1 methods Add , Multiply and Divide can be used instead of these operators.; If a histogram has associated error bars ( TH1::Sumw2() has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, binomial errors are also supported.; 3.7 Projections; One can make:. a 1-D projection of a 2-D histogram or profile. See TH2::ProfileX, TH2::ProfileY,TProfile::ProjectionX, TProfile2D::ProjectionXY, TH2::ProjectionX, TH2::ProjectionY .; a 1-D, 2-D or profile out of a 3-D histogram see TH3::ProjectionZ, TH3::Project3D. These projections can be fit via: TH2::FitSlicesX, TH2::FitSlicesY, TH3::FitSlicesZ.; 3.8 Drawing Histograms; When you call the Draw method of a histogram ( TH1::Draw ) for the first time, it creates a THistPainter object and saves a pointer to painter as a data member of the histogram. The THistPainter class specializes in the drawing of histograms. It allows logarithmic axes (x, y, z) when the CONT drawing option is using. The THistPainter class is separated from the histogram so that one can have histograms without the graphics overhead, for example in a batch program. The",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:80921,error,error,80921,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['error']
Availability,"d Plot:; 'Contour' : ComboBox: draw a contour plot (None, Cont0..4); 'Cont #' : TGNumberEntry: set the number of Contours; 2d Plot checkboxes:; 'Arrow' : arrow mode. Shows gradient between adjacent cells; 'Col' : a box is drawn for each cell with a color scale; varying with contents; 'Text' : Draw bin contents as text; 'Box' : a box is drawn for each cell with surface; proportional to contents; 'Scat' : Draw a scatter-plot (default); 'Palette' : the color palette is drawn. 3d Plot:; 'Type' : ComboBox: set histogram type Lego or Surface-Plot; draw(Lego, Lego1.2, Surf, Surf1..5); see THistPainter::Paint; 'Coords' : ComboBox: set the coordinate system (Cartesian, ..; Spheric) see THistPainter::Paint; 'Cont #' : TGNumberEntry: set the number of Contours (for e.g.; Lego2 drawoption; 3d Plot checkboxes:; 'Errors' : draw errors in a cartesian lego plot; 'Palette' : the color palette is drawn; 'Front' : draw the front box of a cartesian lego plot; 'Back' : draw the back box of a cartesian lego plot; Available for a 3D lego plot:; 'Bar' : change the bar attributes; 'W' : change Bar Width; 'O' : change Bar Offset; Further Editor:; 'Marker' : change the Marker attributes (color, appearance,; thickness) see TAttMarkerEditor. /*. */. /*. */. Rebinning Tab:; This Tab has two different layouts. One is for a histogram which; is not drawn from an ntuple. The other one is available for a; histogram which is drawn from an ntuple. In this case the rebin; algorithm can create a rebinned histogram from the original data; i.e. the ntuple.; To see te differences do for example:; TFile f(""hsimple.root"");; hpxpy->Draw(""Lego2""); // non ntuple histogram; ntuple->Draw(""px:py"","""",""Lego2""); // ntuple histogram; Non ntuple histogram:; 'Rebin': with the Sliders (one for the x, one for the y axis); the number of bins (shown in the field below the; Slider) can be changed to any number which divides; the number of bins of the original histogram.; Pushing 'Apply' will delete the origin histogram and; re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2Editor.html:1857,error,errors,1857,root/html528/TH2Editor.html,https://root.cern,https://root.cern/root/html528/TH2Editor.html,4,['error'],['errors']
Availability,"d ROOT session showing how to perform various interactive graphical editing operations ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:115138,avail,available,115138,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['avail'],['available']
Availability,"d ROOT session showing how to perform various interactive graphical editing operations ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:114813,avail,available,114813,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['avail'],['available']
Availability,"d S_inv - the inverse of its covariance matrix, then; htotal elements with smallest distances will have covariance matrix with determinant; less or equal to the determinant of the input subset covariance matrix. determinant for this htotal-subset with smallest distances is returned. Int_t Exact(Double_t* ndist); for the exact fit situaions; returns number of observations on the hyperplane. Int_t Exact2(TMatrixD& mstockbig, TMatrixD& cstockbig, TMatrixD& hyperplane, Double_t* deti, Int_t nbest, Int_t kgroup, TMatrixD& sscp, Double_t* ndist); This function is called if determinant of the covariance matrix of a subset=0. If there are more then fH vectors on a hyperplane,; returns this hyperplane and stops; else stores the hyperplane coordinates in hyperplane matrix. Int_t Partition(Int_t nmini, Int_t* indsubdat); divides the elements into approximately equal subgroups; number of elements in each subgroup is stored in indsubdat; number of subgroups is returned. Int_t RDist(TMatrixD& sscp); Calculates robust distances.Then the samples with robust distances; greater than a cutoff value (0.975 quantile of chi2 distribution with; fNvar degrees of freedom, multiplied by a correction factor), are given; weiht=0, and new, reweighted estimates of location and scatter are calculated; The function returns the number of outliers. void RDraw(Int_t* subdat, Int_t ngroup, Int_t* indsubdat); Draws ngroup nonoverlapping subdatasets out of a dataset of size n; such that the selected case numbers are uniformly distributed from 1 to n. Double_t KOrdStat(Int_t ntotal, Double_t* arr, Int_t k, Int_t* work); because I need an Int_t work array. TRobustEstimator(). virtual ~TRobustEstimator(); {;}. void GetCovariance(TMatrixDSym& matr). void GetCorrelation(TMatrixDSym& matr). Int_t GetNHyp(); {return fExact;}. void GetMean(TVectorD& means). void GetRDistances(TVectorD& rdist). Int_t GetNumberObservations() const; {return fN;}. Int_t GetNvar() const; {return fNvar;}. const TArrayI* GetOuliers() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRobustEstimator.html:16610,robust,robust,16610,root/html528/TRobustEstimator.html,https://root.cern,https://root.cern/root/html528/TRobustEstimator.html,6,['robust'],['robust']
Availability,"d SetDiagonal(const Vector & v);; 623 ; 624 /**; 625 return the trace of a matrix; 626 Sum of the diagonal elements; 627 */; 628 T Trace() const;; 629 ; 630 ; 631 /**; 632 return the upper Triangular block of the matrices (including the diagonal) as; 633 a vector of sizes N = D1 * (D1 + 1)/2.; 634 It works only for square matrices with D1==D2, otherwise it will produce a compile error; 635 */; 636#ifndef UNSUPPORTED_TEMPLATE_EXPRESSION; 637 SVector<T, D1 * (D2 +1)/2> UpperBlock() const;; 638#else; 639 template<class SubVector>; 640 SubVector UpperBlock() const;; 641#endif; 642 ; 643 /**; 644 return the lower Triangular block of the matrices (including the diagonal) as; 645 a vector of sizes N = D1 * (D1 + 1)/2.; 646 It works only for square matrices with D1==D2, otherwise it will produce a compile error; 647 */; 648#ifndef UNSUPPORTED_TEMPLATE_EXPRESSION; 649 SVector<T, D1 * (D2 +1)/2> LowerBlock() const;; 650#else; 651 template<class SubVector>; 652 SubVector LowerBlock() const;; 653#endif; 654 ; 655 ; 656 /** @name --- Other Functions --- */; 657 ; 658 /**; 659 Function to check if a matrix is sharing same memory location of the passed pointer; 660 This function is used by the expression templates to avoid the alias problem during; 661 expression evaluation. When the matrix is in use, for example in operations; 662 like A = B * A, a temporary object storing the intermediate result is automatically; 663 created when evaluating the expression.; 664 ; 665 */; 666 bool IsInUse(const T* p) const;; 667 ; 668 // submatrices; 669 ; 670 /// Print: used by operator<<(); 671 std::ostream& Print(std::ostream& os) const;; 672 ; 673 ; 674 ; 675 ; 676public:; 677 ; 678 /** @name --- Data Member --- */; 679 ; 680 /**; 681 Matrix Storage Object containing matrix data; 682 */; 683 R fRep;; 684 ; 685}; // end of class SMatrix; 686 ; 687 ; 688 ; 689 ; 690//==============================================================================; 691// operator<<; 692//==========================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SMatrix_8h_source.html:22400,error,error,22400,doc/master/SMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/SMatrix_8h_source.html,1,['error'],['error']
Availability,"d SetEntries(Double_t n)Definition TH1.h:391; TH1::fgDefaultSumw2static Bool_t fgDefaultSumw2! Flag to call TH1::Sumw2 automatically at histogram creation timeDefinition TH1.h:118; TH1::fTsumwxDouble_t fTsumwxTotal Sum of weight*X.Definition TH1.h:98; TH1::ComputeIntegralvirtual Double_t ComputeIntegral(Bool_t onlyPositive=false)Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fInt...Definition TH1.cxx:2537; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH2D::Classstatic TClass * Class(); TH3C3-D histogram with a byte per channel (see TH1 documentation)Definition TH3.h:157; TH3C::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bins including under/overflow Reallocate bin contents array.Definition TH3.cxx:3647; TH3C::IsATClass * IsA() const overrideDefinition TH3.h:192; TH3C::~TH3C~TH3C() overrideDestructor.Definition TH3.cxx:3540; TH3C::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH3.cxx:3635; TH3C::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH3.cxx:3603; TH3C::operator=TH3C & operator=(const TH3C &h1)Operator =.Definition TH3.cxx:3720; TH3C::TH3CTH3C()Constructor.Definition TH3.cxx:3530; TH3C::Classstatic TClass * Class(); TH3C::Streamervoid Streamer(TBuffer &) overrideStream an object of class TH3C.Definition TH3.cxx:3687; TH3C::Copyvoid Copy(TObject &hnew) const overrideCopy this 3-D histogram structure to newth3.Definition TH3.cxx:3626; TH3D3-D histogram with a double per channel (see TH1 documentation)Definition TH3.h:363; TH3D::IsATClass * IsA() const overrideDefinition TH3.h:403; TH3D::TH3DTH3D()Constructor.Definition TH3.cxx:4669; TH3D::Streamervoid Streamer(TBuffer &) overrideStream an object of class TH3D.Definition TH3.cxx:4774; TH3D::Classstatic TClass * Class(); TH3D::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:200338,error,errors,200338,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['errors']
Availability,"d SetFCN(void fcn); this for CINT (interactive functions). void SetFCN(void* ). void SetMinuitFCN(ROOT::Minuit2::FCNBase* f); set FCN using Minuit interface; you pass to the class ownership of FCNBase pointer. const ROOT::Minuit2::FCNBase * GetMinuitFCN() const; { return fMinuitFCN; }. const ROOT::Minuit2::ModularFunctionMinimizer * GetMinimizer() const; { return fMinimizer; }. int Minimize(int nfcn = 0, double edmval = 0.1); additional abstract methods to be implemented by derived classes. int GetStrategy(); { return fStrategy; }. int PrintLevel(); { return fDebug; }. void SetStrategy(int stra); { fStrategy = stra; }. void SetPrintLevel(int level); { fDebug = level; }. void SetMinimumTolerance(double mintol); set minimum tolerance to avoid having clients (as TGraf::Fit) setting tolerances too small. { fMinTolerance = mintol; }. double MinimumTolerance() const; { return fMinTolerance; }. void CreateMinimizer(TFitterMinuit::EMinimizerType = kMigrad); create the minimizer type (Migard or Simplex); can be re-implemented in the derived classes. void SetMinimizer(ROOT::Minuit2::ModularFunctionMinimizer* m); { fMinimizer = m; }. void CreateChi2FCN(); functions to create FCN - re-implemented in derived class (GFumili). void CreateChi2ExtendedFCN(). void CreateBinLikelihoodFCN(). void CreateUnbinLikelihoodFCN(); {}. ROOT::Minuit2::FunctionMinimum DoMinimization(int nfcn = 0, double edmval = 0.1); internal function to perform the actual minimization (could be implemented by derived classes). int ExamineMinimum(const ROOT::Minuit2::FunctionMinimum& ); internal funcition to study Function minimum results; return 0 if function minimum is OK or an error code. void Initialize(). » Author: L. Moneta 10/2005 » Copyright (c) 2005 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFitterMinuit.html:14593,error,error,14593,root/html534/TFitterMinuit.html,https://root.cern,https://root.cern/root/html534/TFitterMinuit.html,1,['error'],['error']
Availability,"d SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::SetNamevoid SetName(const char *name="""") overrideSet graph name.Definition TGraph.cxx:2381; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TLegend::TLegendTLegend()Default constructor.Definition TLegend.cxx:200; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:3552,error,error,3552,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['error'],['error']
Availability,"d SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::SetNamevoid SetName(const char *name="""") overrideSet graph name.Definition TGraph.cxx:2381; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; yDouble_t y[n]Definition legend1.C:17; c1return c1Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/legend1_8C_source.html:2648,error,error,2648,doc/master/legend1_8C_source.html,https://root.cern,https://root.cern/doc/master/legend1_8C_source.html,1,['error'],['error']
Availability,"d SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1335; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::SetNamevoid SetName(const char *name="""") overrideSet graph name.Definition TGraph.cxx:2364; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:814; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:621; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1636; yDouble_t y[n]Definition legend1.C:17; c1return c1Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/legend1_8C_source.html:2647,error,error,2647,doc/v632/legend1_8C_source.html,https://root.cern,https://root.cern/doc/v632/legend1_8C_source.html,1,['error'],['error']
Availability,"d SetFromFitResult(const ROOT::Fit::FitResult& rhs). Set the parameter settings from a fit Result. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros computation to be performed after fitting. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__FitConfig.html:5222,error,error,5222,root/html534/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__FitConfig.html,1,['error'],['error']
Availability,"d SetFromFitResult(const ROOT::Fit::FitResult& rhs). Set the parameter settings from a fit Result. ROOT::Math::Minimizer * CreateMinimizer(). create a new minimizer according to chosen configuration. void SetMinimizer(const char* type, const char* algo = 0). set minimizer type. const std::string & MinimizerType() const. return type of minimizer package. { return fMinimizerOpts.MinimizerType(); }. const std::string & MinimizerAlgoType() const. return type of minimizer algorithms. { return fMinimizerOpts.MinimizerAlgorithm(); }. bool NormalizeErrors() const. flag to check if resulting errors are be normalized according to chi2/ndf. { return fNormErrors; }. bool ParabErrors() const; do analysis for parabolic errors. { return fParabErrors; }. bool MinosErrors() const; do minos errros analysis on the parameters. { return fMinosErrors; }. bool UpdateAfterFit() const; Update configuration after a fit using the FitResult. { return fUpdateAfterFit; }. bool UseWeightCorrection() const; Apply Weight correction for error matrix computation. { return fWeightCorr; }. const std::vector<unsigned int> & MinosParams() const; return vector of parameter indeces for which the Minos Error will be computed. { return fMinosParams; }. void SetNormErrors(bool on = true). set the option to normalize the error on the result according to chi2/ndf. { fNormErrors= on; }. void SetParabErrors(bool on = true); set parabolic erros. { fParabErrors = on; }. void SetMinosErrors(bool on = true); set Minos erros. { fMinosErrors = on; }. void SetWeightCorrection(bool on = true); apply the weight correction for error matric computation. { fWeightCorr = on; }. void SetMinosErrors(const vector<unsigned int>& paramInd); set parameter indeces for running Minos; this can be used for running Minos on a subset of parameters - otherwise is run on all of them; if MinosErrors() is set. void SetUpdateAfterFit(bool on = true); Update configuration after a fit using the FitResult. { fUpdateAfterFit = on; }. void SetDefa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitConfig.html:5222,error,error,5222,root/html532/ROOT__Fit__FitConfig.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitConfig.html,1,['error'],['error']
Availability,"d TArrayD.; Data member is public for historical reasons. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TArray.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2009-12-07 13:50; This page has been automatically generated. For ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TArray.html:1405,error,error,1405,root/html526/TArray.html,https://root.cern,https://root.cern/root/html526/TArray.html,1,['error'],['error']
Availability,"d TInterpreter::Execute ; (; TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). overrideprotectedpure virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented from TObject.; Implemented in TCling. ◆ Execute() [3/4]. virtual void TInterpreter::Execute ; (; TObject * ; obj, . TClass * ; cl, . const char * ; method, . const char * ; params, . int * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ Execute() [4/4]. virtual void TInterpreter::Execute ; (; TObject * ; obj, . TClass * ; cl, . TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ ExecuteMacro(). virtual Longptr_t TInterpreter::ExecuteMacro ; (; const char * ; filename, . EErrorCode * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ ExecuteWithArgsAndReturn(). virtual void TInterpreter::ExecuteWithArgsAndReturn ; (; TMethod * ; method, . void * ; address, . const void * ; args[] = nullptr, . int ; = 0, . void * ; ret = nullptr . ); const. pure virtual . Implemented in TCling. ◆ FindSym(). virtual void * TInterpreter::FindSym ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 253 of file TInterpreter.h. ◆ ForgetMutexState(). virtual void TInterpreter::ForgetMutexState ; (; ). pure virtual . Implemented in TCling. ◆ FuncTempInfo_Delete(). virtual void TInterpreter::FuncTempInfo_Delete ; (; FuncTempInfo_t * ; ); const. pure virtual . Implemented in TCling. ◆ FuncTempInfo_ExtraProperty(). virtual Long_t TInterpreter::FuncTempInfo_ExtraProperty ; (; FuncTempInfo_t * ; ); const. pure virtual . Implemented in TCling. ◆ FuncTempInfo_Factory(). virtual FuncTempInfo_t * TInterpreter::FuncTempInfo_Factory ; (; DeclId_t ; decli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:65898,error,error,65898,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['error'],['error']
Availability,"d XdndAware property and the list of drag and drop types to the Window win. ; Reimplemented from TVirtualX. ◆ SetDoubleBuffer(). void TGWin32VirtualXProxy::SetDoubleBuffer ; (; Int_t ; wid, . Int_t ; mode . ). overridevirtual . Sets the double buffer on/off on the window ""wid"". ; Parameters. [in]widwindow identifier.; 999 means all opened windows. . [in]modethe on/off switch; mode = 1 double buffer is on; mode = 0 double buffer is off . Reimplemented from TVirtualX. ◆ SetDoubleBufferOFF(). void TGWin32VirtualXProxy::SetDoubleBufferOFF ; (; ). overridevirtual . Turns double buffer mode off. ; Reimplemented from TVirtualX. ◆ SetDoubleBufferON(). void TGWin32VirtualXProxy::SetDoubleBufferON ; (; ). overridevirtual . Turns double buffer mode on. ; Reimplemented from TVirtualX. ◆ SetDrawMode(). void TGWin32VirtualXProxy::SetDrawMode ; (; EDrawMode ; mode). overridevirtual . Sets the drawing mode. ; Parameters. [in]modedrawing mode.; mode = 1 copy; mode = 2 xor; mode = 3 invert; mode = 4 set the suitable mode for cursor echo according to the vendor . Reimplemented from TVirtualX. ◆ SetFillAttributes(). void TGWin32VirtualXProxy::SetFillAttributes ; (; ). overridevirtual . Invoke the DialogCanvas Fill attributes. ; Reimplemented from TAttFill. ◆ SetFillColor(). void TGWin32VirtualXProxy::SetFillColor ; (; Color_t ; fcolor). overridevirtual . Set the fill area color. ; Reimplemented from TAttFill. ◆ SetFillStyle(). void TGWin32VirtualXProxy::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set the fill area style. ; Reimplemented from TAttFill. ◆ SetForeground(). void TGWin32VirtualXProxy::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Sets the foreground color for the specified GC (shortcut for ChangeGC with only foreground mask set). ; Parameters. [in]gcspecifies the GC ; [in]foregroundthe foreground you want to set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ SetIconName(). void TGWin32VirtualXProxy::SetI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:110868,echo,echo,110868,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['echo'],['echo']
Availability,"d a single point result (an HypoTestResult). double GetXValue(int index) const; function to return the value of the parameter of interest for the i^th entry in the results. double GetYValue(int index) const; function to return the value of the confidence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:11630,error,error,11630,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"d a single point result (an HypoTestResult). double GetXValue(int index) const; function to return the value of the parameter of interest for the i^th entry in the results. double GetYValue(int index) const; function to return the value of the confidence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch, double& xmin, double& xmax) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target, int mode = 0, double xtarget = 0); if mode = 0; find closest point to target in Y, the object closest to the target which is 3 sigma from th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:12422,error,error,12422,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,3,['error'],['error']
Availability,"d allocate an object directly in shared memory in the producer, but the consumer still has to copy the object from shared memory into a local object which has the correct vtbl pointer for that process (copy ctor's can be used for creating the local copy).; Another possibility is to only allow objects without virtual functions in shared memory (like simple C structs), or to forbid (how?) the consumer from calling any virtual functions of the objects in shared memory.; A last option is to copy the object internals to shared memory and copy them again from there. This is what is done in the TMapFile (using the object Streamer() to make a deep copy). Option 1) saves one copy, but requires solid copy ctor's (along the full inheritance chain) to rebuild the object in the consumer. Most classes don't provide these copy ctor's, especially not when objects contain collections, etc. 2) is too limiting or dangerous (calling accidentally a virtual function will segv). So since we have a robust Streamer mechanism I opted for 3). ; Definition at line 26 of file TMapFile.h. Public Types; enum  { kDefaultMapSize = 0x80000; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TMapFile () override;  TMapFiles may not be deleted, since we want to keep the complete TMapFile object in the mapped file for later re-use. ;  ; void Add (const TObject *obj, const char *name="""");  Add an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:2501,robust,robust,2501,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['robust'],['robust']
Availability,"d an axis with fixed bins. This case is not supported - return a null pointer"");; 985 return nullptr;; 986 }; 987 ; 988 ; 989 Bool_t computeErrors = kFALSE;; 990 Bool_t cequalErrors = kFALSE;; 991 Bool_t binEntries = kFALSE;; 992 Bool_t binWeight = kFALSE;; 993 ; 994 if (opt.Contains(""b"")) binEntries = kTRUE;; 995 if (opt.Contains(""e"")) computeErrors = kTRUE;; 996 if (opt.Contains(""w"")) binWeight = kTRUE;; 997 if (opt.Contains(""c=e"")) {cequalErrors = kTRUE; computeErrors=kFALSE;}; 998 if (computeErrors || binWeight || (binEntries && fBinSumw2.fN) ) h1->Sumw2();; 999 ; 1000 // Fill the projected histogram; 1001 Int_t bin,binx,biny,binz;; 1002 Double_t cont;; 1003 for (binx =0;binx<=nx+1;binx++) {; 1004 for (biny =0;biny<=ny+1;biny++) {; 1005 for (binz =0;binz<=nz+1;binz++) {; 1006 bin = GetBin(binx,biny,binz);; 1007 ; 1008 if (binEntries) cont = GetBinEntries(bin);; 1009 else if (cequalErrors) cont = GetBinError(bin);; 1010 else if (binWeight) cont = GetBinContent(bin) * GetBinEntries(bin);; 1011 else cont = GetBinContent(bin); // default case; 1012 ; 1013 h1->SetBinContent(bin ,cont);; 1014 ; 1015 // if option E projected histogram errors are same as profile; 1016 if (computeErrors ) h1->SetBinError(bin , GetBinError(bin) );; 1017 // in case of option W bin error is deduced from bin sum of z**2 values of profile; 1018 // this is correct only if the profile is unweighted; 1019 if (binWeight) h1->GetSumw2()->fArray[bin] = fSumw2.fArray[bin];; 1020 // in case of bin entries and profile is weighted, we need to set also the bin error; 1021 if (binEntries && fBinSumw2.fN ) {; 1022 R__ASSERT( h1->GetSumw2() );; 1023 h1->GetSumw2()->fArray[bin] = fBinSumw2.fArray[bin];; 1024 }; 1025 }; 1026 }; 1027 }; 1028 h1->SetEntries(fEntries);; 1029 return h1;; 1030}; 1031////////////////////////////////////////////////////////////////////////////////; 1032/// Project a 3-D profile into a 2D-profile histogram depending on the option parameter.; 1033///; 1034/// option may contain a com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:36959,error,errors,36959,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"d an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval ...Definition TMap.h:40; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:973; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:403; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1015; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:961; TPairClass used by TMap to store (key,value) pairs.Definition TMap.h:102; TProtoClassPersistent version of a TClass.Definition TProtoClass.h:38; TROOT::Initializedstatic Bool_t Initialized()Return kTRUE if the TROOT object has been initialized.Definition TROOT.cxx:2906; TRegexpRegular expression class.Definition TRegexp.h:31; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; bool; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClassTable_8cxx_source.html:47677,error,error,47677,doc/v632/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClassTable_8cxx_source.html,1,['error'],['error']
Availability,"d an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval ...Definition TMap.h:40; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPairClass used by TMap to store (key,value) pairs.Definition TMap.h:102; TProtoClassPersistent version of a TClass.Definition TProtoClass.h:38; TROOT::Initializedstatic Bool_t Initialized()Return kTRUE if the TROOT object has been initialized.Definition TROOT.cxx:2910; TRegexpRegular expression class.Definition TRegexp.h:31; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; bool; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:47677,error,error,47677,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,1,['error'],['error']
Availability,"d arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; By default the error bars are drawn. If option ""X"" is specified,; the errors are not drawn. The graph with errors in drawn like a normal graph. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""3"" allows to shows the error as band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(4);; ge->SetFillStyle(3010);; g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:6268,error,error,6268,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,1,['error'],['error']
Availability,"d asynchronously by sending it to the CINT interpreter thread. For explicit synchronous processing use ProcessLineSync(). On non-Win32 platforms there is no difference between ProcessLine() and ProcessLineSync(). The possible error codes are defined by TInterpreter::EErrorCode. In particular, error will equal to TInterpreter::kProcessing until the CINT interpreted thread has finished executing the line. Returns the result of the command, cast to a Longptr_t. ; Definition at line 2370 of file TROOT.cxx. ◆ ProcessLineFast(). Longptr_t TROOT::ProcessLineFast ; (; const char * ; line, . Int_t * ; error = nullptr . ). Process interpreter command directly via CINT interpreter. ; Only executable statements are allowed (no variable declarations), In all other cases use TROOT::ProcessLine(). The possible error codes are defined by TInterpreter::EErrorCode. ; Definition at line 2407 of file TROOT.cxx. ◆ ProcessLineSync(). Longptr_t TROOT::ProcessLineSync ; (; const char * ; line, . Int_t * ; error = nullptr . ). Process interpreter command via TApplication::ProcessLine(). ; On Win32 the line will be processed synchronously (i.e. it will only return when the CINT interpreter thread has finished executing the line). On non-Win32 platforms there is no difference between ProcessLine() and ProcessLineSync(). The possible error codes are defined by TInterpreter::EErrorCode. Returns the result of the command, cast to a Longptr_t. ; Definition at line 2390 of file TROOT.cxx. ◆ ReadGitInfo(). void TROOT::ReadGitInfo ; (; ). protected . Read Git commit SHA1 and branch name. ; Read Git commit information and branch name from the etc/gitinfo.txt file. ; Definition at line 2429 of file TROOT.cxx. ◆ ReadingObject(). Bool_t TROOT::ReadingObject ; (; ); const. Deprecated (will be removed in next release). ; Definition at line 2460 of file TROOT.cxx. ◆ RecursiveRemove(). void TROOT::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Recursively remove this object from the list of Cleanu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:70831,error,error,70831,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"d but not operator; 73// delete, we can still use it to detect the cases where the destructor was called.; 74 ; 75ATTRIBUTE_NO_SANITIZE_ADDRESS; 76bool DeleteChangesMemoryImpl(); 77{; 78 static constexpr UInt_t kGoldenUUID = 0x00000021;; 79 static constexpr UInt_t kGoldenbits = 0x03000000;; 80 ; 81 TObject *o = new TObject;; 82 o->SetUniqueID(kGoldenUUID);; 83 UInt_t *o_fuid = &(o->fUniqueID);; 84 UInt_t *o_fbits = &(o->fBits);; 85 ; 86 if (*o_fuid != kGoldenUUID) {; 87 Error(""CheckingDeleteSideEffects"",; 88 ""fUniqueID is not as expected, we got 0x%.8x instead of 0x%.8x"",; 89 *o_fuid, kGoldenUUID);; 90 }; 91 if (*o_fbits != kGoldenbits) {; 92 Error(""CheckingDeleteSideEffects"",; 93 ""fBits is not as expected, we got 0x%.8x instead of 0x%.8x"",; 94 *o_fbits, kGoldenbits);; 95 }; 96 if (gDebug >= 9) {; 97 unsigned char *oc = reinterpret_cast<unsigned char *>(o); // for address calculations; 98 unsigned char references[sizeof(TObject)];; 99 memcpy(references, oc, sizeof(TObject));; 100 ; 101 // The effective part of this code (the else statement is just that without; 102 // any of the debug statement); 103 delete o;; 104 ; 105 // Not using the error logger, as there routine is meant to be called; 106 // during library initialization/loading.; 107 fprintf(stderr,; 108 ""DEBUG: Checking before and after delete the content of a TObject with uniqueID 0x21\n"");; 109 for(size_t i = 0; i < sizeof(TObject); i += 4) {; 110 fprintf(stderr, ""DEBUG: 0x%.8x vs 0x%.8x\n"", *(int*)(references +i), *(int*)(oc + i));; 111 }; 112 } else; 113 delete o; // the 'if' part is that surrounded by the debug code.; 114 ; 115 // Intentionally accessing the deleted memory to check whether it has been changed as; 116 // a consequence (side effect) of executing operator delete. If there no change, we; 117 // can guess this is always the case and we can rely on the changes to fBits made; 118 // by ~TObject to detect use-after-delete error (and print a message rather than; 119 // stop the program with a seg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:3638,error,error,3638,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['error'],['error']
Availability,"d by TSocket::Send(). void SetWhat(UInt_t what); Using this method one can change the message type a-posteriory.; In case you OR ""what"" with kMESS_ACK, the message will wait for; an acknowledgement from the remote side. This makes the sending; process synchronous. void SetCompressionLevel(Int_t level = 1); Set the message compression level. Can be between 0 and 9 with 0; being no compression and 9 maximum compression. In general the default; level of 1 is the best compromise between achieved compression and; cpu time. Compression will only happen when the message is > 256 bytes. Int_t Compress(); Compress the message. The message will only be compressed if the; compression level > 0 and the if the message is > 256 bytes.; Returns -1 in case of error (when compression fails or; when the message increases in size in some pathological cases),; otherwise returns 0. Int_t Uncompress(); Uncompress the message. The message will only be uncompressed when; kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. void WriteObject(const TObject* obj); Write object to message buffer.; When support for schema evolution is enabled the list of TStreamerInfo; used to stream this object is kept in fInfos. This information is used; by TSocket::Send that sends this list through the socket. This list is in; turn used by TSocket::Recv to store the TStreamerInfo objects in the; relevant TClass in case the TClass does not know yet about a particular; class version. This feature is implemented to support clients and servers; with either different ROOT versions or different user classes versions. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pid is already in the message.; If not, then:; - mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; - mark bit uid+1 where uid id the uid of the ProcessID. TMessage(const TMessage& ); TMessage objects cannot be copied or assigned. void operator=(const TMessage& ). Bool_t TestBitNumber(UInt_t bitnumber) const; used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMessage.html:23293,error,error,23293,root/html528/TMessage.html,https://root.cern,https://root.cern/root/html528/TMessage.html,1,['error'],['error']
Availability,"d by this site: http://www.network-science.de/ascii/ ;  ; TH2F * TransposeHist (const TH2F &);  Transpose quadratic histogram. ;  ; void UsefulSortAscending (std::vector< Double_t > &);  sort vector ;  ; void UsefulSortAscending (std::vector< std::vector< Double_t > > &, std::vector< TString > *vs=nullptr);  sort 2D vector (AND in parallel a TString vector) in such a way that the ""first vector is sorted"" and the other vectors are reshuffled in the same way as necessary to have the first vector sorted. ;  ; void UsefulSortDescending (std::vector< Double_t > &);  sort vector ;  ; void UsefulSortDescending (std::vector< std::vector< Double_t > > &, std::vector< TString > *vs=nullptr);  sort 2D vector (AND in parallel a TString vector) in such a way that the ""first vector is sorted"" and the other vectors are reshuffled in the same way as necessary to have the first vector sorted. ;  ; void WriteFloatArbitraryPrecision (Float_t val, std::ostream &os);  writes a float value with the available precision to a stream ;  ; void WriteTMatrixDToXML (void *node, const char *name, TMatrixD *mat);  XML helpers. ;  ; void WriteTVectorDToXML (void *node, const char *name, TVectorD *vec);  ; TXMLEngine & xmlengine ();  ; int xmlenginebuffersize ();  . Static Public Member Functions; static void DestroyInstance ();  ; static Tools & Instance ();  . Public Attributes; MsgLogger * fLogger;  ; const TString fRegexp;  ; TXMLEngine * fXMLEngine;  . Static Public Attributes; static std::atomic< Tools * > fgTools {0};  . Private Member Functions;  Tools ();  constructor ;  ; Double_t GetYMean_binX (const TH2 &, Int_t bin_x);  Compute the mean in Y for a given bin X of a 2D histogram. ;  . Private Attributes; int fXMLBufferSize = 10000000;  . #include <TMVA/Tools.h>; Member Enumeration Documentation. ◆ ECitation. enum TMVA::Tools::ECitation. EnumeratorkPlainText ; kBibTeX ; kLaTeX ; kHtmlLink . Definition at line 209 of file Tools.h. ◆ EWelcomeMessage. enum TMVA::Tools::EWelcomeMessage. Enumer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:9423,avail,available,9423,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['avail'],['available']
Availability,"d calling afterwards the method TF1::GetHistogram(). TH1 * DoCreateHistogram(Double_t xmin, Double_t xmax, Bool_t recreate = kFALSE); create histogram with bin content equal to function value; computed at the bin center; This histogram will be used to paint the function; A re-creation is forced and a new histogram is done if recreate=true. void ReleaseParameter(Int_t ipar); Release parameter number ipar If used in a fit, the parameter; can vary freely. The parameter limits are reset to 0,0. void Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); Save values of function in array fSave. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetCurrent(TF1* f1); Static function setting the current function.; the current function may be accessed in static C-like functions; when fitting or painting a function. void SetFitResult(const ROOT::Fit::FitResult& result, const Int_t* indpar = 0); Set the result from the fit; parameter values, errors, chi2, etc...; Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed; This is useful in the case of a combined fit with different functions, and the FitResult contains the global result; By default it is assume that indpar = {0,1,2,....,fNpar-1}. void SetMaximum(Double_t maximum = -1111); Set the maximum value along Y for this function; In case the function is already drawn, set also the maximum in the; helper histogram. void SetMinimum(Double_t minimum = -1111); Set the minimum value along Y for this function; In case the function is already drawn, set also the minimum in the; helper histogram. void SetNDF(Int_t ndf); Set the number of degrees of freedom; ndf should be the number of points used in a fit - the number of free parameters. void SetNpx(Int_t npx = 100); Set the number of points used to draw the function. The default number of points along x is 100 for 1-d func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:55437,error,errors,55437,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,1,['error'],['errors']
Availability,d char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window FontStruct_t. Pointer to font structure. ; Definition at line 39 of file GuiTypes.h. ◆ GContext_t. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GContext_t. Graphics context handle. ; Definition at line 38 of file GuiTypes.h. ◆ Handle_t. typedef ULongptr_t Handle_t. Generic resource handle. ; Definition at line 26 of file GuiTypes.h. ◆ KeySym_t. typedef Handle_t KeySym_t. Key symbol handle. ; Definition at line 36 of file GuiTypes.h. ◆ Mask_t. typedef UInt_t Mask_t. Structure mask type. ; Definition at line 41 of file GuiTypes.h. ◆ Pixel_t. typedef ULong_t Pixel_t. Pixel value. ; Definition at line 40 of file GuiTypes.h. ◆ Pixmap_t. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Pixmap_t. Pixmap handle. ; Definition at line 30 of file GuiTypes.h. ◆ Region_t. Option_t Option_t TPoint TPoint const char GetTextMagnitude,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GuiTypes_8h.html:13392,mask,mask,13392,doc/master/GuiTypes_8h.html,https://root.cern,https://root.cern/doc/master/GuiTypes_8h.html,1,['mask'],['mask']
Availability,"d class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjString::HashULong_t Hash() const overrideReturn hash value for this object.Definition TObjString.h:39; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 39 of file TObjString.h. ◆ IsA(). TClass * TObjString::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 50 of file TObjString.h. ◆ IsEqual(). Bool_t TObjString::IsEqual ; (; const TObject * ; obj); const. overridevirtual . Return kTRUE if the argument has the same content as this object. ; Reimplemented from TObject.; Definition at line 45 of file TObjString.cxx. ◆ IsSortable(). Bool_t TObjString::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 42 of file TObjString.h. ◆ Print(). void TObjString::Print ; (; Option_t * ; option); const. inlineoverridevirtual . This method must be overridden when a class wants to print its",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjString.html:13264,error,error,13264,doc/master/classTObjString.html,https://root.cern,https://root.cern/doc/master/classTObjString.html,1,['error'],['error']
Availability,"d colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t wid, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t wid, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &x, Int_t &y) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t wid, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t wid) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t wid) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void ReconfigureDisplay ();  ; void RemoveWindow (ULong_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentChild (Window_t wid, Window_t pid, Int_t x, Int_t y);  ; void ReparentTopLevel (Window_t wid, Window_t pid, Int_t x, Int_t y);  ; void ReparentWindow (Window_t wid, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:20135,mask,mask,20135,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['mask'],['mask']
Availability,"d dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default behavior. Data representation options. Asymmetry(const RooCategory& c) -- Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; Category must have two states with indices -1 and +1 or three states with indeces -1,0 and +1.; Efficiency(const RooCategory& c)-- Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1; DataError(RooAbsData::EType) -- Select the type of error drawn:; - Auto(default) results in Poisson for unweighted data and SumW2 for weighted data; - Poisson draws asymmetric Poisson confidence intervals.; - SumW2 draws symmetric sum-of-weights error ( sum(w)^2/sum(w^2) ); - None draws no error bars; Binning(int nbins, double xlo, double xhi) -- Use specified binning to draw dataset; Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t f) -- Rescale drawn histogram by given factor. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is black; LineWidth(Int_t width) -- Select line with in pixels, default is 3; MarkerStyle(Int_t style) -- Select the ROOT marker style, default is 21; MarkerColor(Int_t color) -- Select the ROOT marker color, default is black; MarkerSize(Double_t si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsData.html:30698,error,error,30698,root/html532/RooAbsData.html,https://root.cern,https://root.cern/root/html532/RooAbsData.html,8,['error'],['error']
Availability,"d distributions from detector to truth level. ; TUnfoldDensity is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldDensity has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . or multiple times in a scan to determine the best chouce of tau, method ScanTau() . Unfolding results are retrieved using various GetXXX() methods . A detailed documentation of the various GetXXX() methods to control systematic u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:1364,avail,available,1364,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['avail'],['available']
Availability,"d draw it; gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; c1->Update();; }; 4.4 Graphs with Asymmetric Error Bars. A graph with asymmetric error bars. A TGraphAsymmErrors is a TGraph with asymmetric error bars. It inherits the various draw format options from TGraph. Its method Paint(Option_t *option) paints the TGraphAsymmErrors with the current attributes. You can set the following additional options for drawing:. “z” or “Z”the horizontal and vertical small lines are not drawn at the end of error bars; “>”an arrow is drawn at the end of the error bars; “|>”a full arrow is drawn at the end of the error bar; its size is \(\frac{2}{3}\) of the marker size; “[]”only the end vertical/horizontal lines of the error bars are drawn; this option is interesting to superimpose systematic errors on top of a graph with statistical errors. The constructor has six arrays as parameters: X and Y as TGraph and low X-errors and high X-errors, low Y-errors and high Y-errors. The low value is the length of the error bar to the left and down, the high value is the length of the error bar to the right and up.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",; 200,10,700,500);; c1->SetGrid();. // create the arrays for the points; Int_t n = 10;; Double_t x[n] = {-.22,.05,.25,.35,.5, .61,.7,.85,.89,.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the arrays with high and low errors; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};. // create TGraphAsymmErrors with the arrays; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; 4.5 Graphs with Asymmetric Bent Errors. A graph with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:148429,error,errors,148429,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,['error'],['errors']
Availability,"d for this; if not already set. void Multiply(TF1* f, Double_t c = 1.); Performs the operation: this = this*c*f1; if errors are defined, errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after THnSparse::Multiply. void Divide(const THnSparse* h); Divide this histogram by h; this = this/(h); Note that if h has Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content. void Divide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); Replace contents of this histogram by multiplication of h1 by h2; this = (c1*h1)/(c2*h2); Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for; this if not already set.; The resulting errors are calculated assuming uncorrelated content.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. Bool_t CheckConsistency(const THnSparse* h, const char* tag) const; Consistency check on (some of) the parameters of two histograms (for operations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetBinContent(const Int_t* x, Double_t v); Set content of bin with coordinates ""coord"" to ""v"". void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError(const Int_t* x, Double_t e); Set error of bin with coordinates ""coord"" to ""e"", enable errors if needed. void SetBinError(Long64_t bin, Double_t e); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void Sumw2(); Enable calculation of errors. THnSparse* Rebin(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:23055,error,errors,23055,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,3,['error'],['errors']
Availability,"d for visualisation; vector<Double_t>TF1::fIntegral!Integral of function binned on fNpx bins; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Double_tTF1::fMaximumMaximum value for plotting; TMethodCall*TF1::fMethodCall!Pointer to MethodCall in case of interpreted function; Double_tTF1::fMinimumMinimum value for plotting; Int_tTF1::fNDFNumber of degrees of freedom in the fit; TStringTNamed::fNameobject identifier; Int_tTF1::fNdimFunction dimension; Double_tTF1::fNormIntegralIntegral of the function before being normalized; Bool_tTF1::fNormalizedNormalization option (false by default); Int_tTF1::fNparNumber of parameters; Int_tTF1::fNpfitsNumber of points used in the fit; Int_tTF1::fNpxNumber of points used for the graphical representation; vector<Double_t>TF1::fParErrorsArray of errors of the fNpar parameters; vector<Double_t>TF1::fParMaxArray of upper limits of the fNpar parameters; vector<Double_t>TF1::fParMinArray of lower limits of the fNpar parameters; TF1Parameters*TF1::fParamsPointer to Function parameters object (exusts only for not-formula functions); TObject*TF1::fParent!Parent object hooking this function (if one); vector<Double_t>TF1::fSaveArray of fNsave function values; TStringTNamed::fTitleobject title; Int_tTF1::fType(=0 for standard functions, 1 if pointer to function); Double_tfXYValue along Y (if projection X) or X (if projection Y); Double_tTF1::fXmaxUpper bounds for the range; Double_tTF1::fXminLower bounds for the range; static Bool_tTF1::fgAbsValueuse absolute value of function when computing integral; static Bool_tTF1::fgAddToGlobListTrue if we want to register the function in the global list; static TF1*TF1::fgCurrentpointer to current function being processed; static Bool_tTF1::fgRejectPointTrue if point must be rejected in a fit; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF12.html:18295,error,errors,18295,root/html604/TF12.html,https://root.cern,https://root.cern/root/html604/TF12.html,1,['error'],['errors']
Availability,"d from TFile.; Definition at line 238 of file TSQLFile.h. ◆ ReadConfigurations(). Bool_t TSQLFile::ReadConfigurations ; (; ). protected . read table configurations as special table ; Definition at line 1054 of file TSQLFile.cxx. ◆ ReadFree(). void TSQLFile::ReadFree ; (; ). inlinefinalvirtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented from TFile.; Definition at line 239 of file TSQLFile.h. ◆ ReadSpecialObject(). TObject * TSQLFile::ReadSpecialObject ; (; Long64_t ; keyid, . TObject * ; obj = nullptr . ). protected . Read data of special kind of objects. ; Definition at line 851 of file TSQLFile.cxx. ◆ ReadSQLClassInfos(). void TSQLFile::ReadSQLClassInfos ; (; ). protected . Read all class infos from IdsTable. ; Definition at line 1911 of file TSQLFile.cxx. ◆ Recover(). Int_t TSQLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:84458,recover,recover,84458,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['recover'],['recover']
Availability,d from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodDL::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . Implements TMVA::MethodBase.; Definition at line 2112 of file MethodDL.cxx. ◆ SetArchitectureString(). void TMVA::MethodDL::SetArchitectureString ; (; TString ; architectureString). inline . Definition at line 307 of file MethodDL.h. ◆ SetBatchDepth(). void TMVA::MethodDL::SetBatchDepth ; (; size_t ; batchDepth). inline . Definition at line 292 of file MethodDL.h. ◆ SetBatchHeight(). void TMVA::MethodDL::SetBatchHeight ; (; size_t ; batchHeight). inline . Definition at line 293 of file MethodDL.h. ◆ SetBatchSize(). void TMVA::MethodDL::SetBatchSize ; (; size_t ; batchSize). inline . Definition at line 291 of file MethodDL.h. ◆ SetBatchWidth(). void TMVA::MethodDL::SetBatchWidth ; (; size_t ; batchWidth). inline . Definition at line 294 of file MethodDL.h. ◆ SetErrorStrategyString(). void TMVA::MethodDL::SetErrorStrategyString ; (; TString ; errorStrategy). inline . Definition at line 301 of file MethodDL.h. ◆ SetInputDepth(). void TMVA::MethodDL::SetInputDepth ; (; int ; inputDepth). inline . Setters. ; Definition at line 286 of file MethodDL.h. ◆ SetInputHeight(). void TMVA::MethodDL::SetInputHeight ; (; int ; inputHeight). inline . Definition at line 287 of file MethodDL.h. ◆ SetInputShape(). void TMVA::MethodDL::SetInputShape ; (; std::vector< size_t > ; inputShape). inline . Definition at line 289 of file MethodDL.h. ◆ SetInputWidth(). void TMVA::MethodDL::SetInputWidth ; (; int ; inputWidth). inline . Definition at line 288 of file MethodDL.h. ◆ SetLayoutString(). void TMVA::MethodDL::SetLayoutString ; (; TString ; layoutString). inline . Definition at line 308 of file MethodDL.h. ◆ SetOutputFunction(). void TMVA::MethodDL::SetOutputFunction ; (; DNN::EOutputFunction ; outputFunction). inline . Definition at line 300 of file MethodDL.h. ◆ SetTrainingStrategyString(). void TMVA::MethodDL::SetTrai,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:49714,error,errorStrategy,49714,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['error'],['errorStrategy']
Availability,"d from TVirtualX.; Definition at line 2715 of file TGCocoa.mm. ◆ GrabPointer(). void TGCocoa::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX.; Definition at line 2678 of file TGCocoa.mm. ◆ HasTTFonts(). Bool_t TGCocoa::HasTTFonts ; (; ); const. overridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX.; Definition at line 2841 of file TGCocoa.mm. ◆ IconifyWindow(). void TGCocoa::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconifies the window ""id"". ; Reimplemented from TVirtualX.; Definition at line 1308 of file TGCocoa.mm. ◆ Init(). Bool_t TGCocoa::Init ; (; void * ; display). overridevirtual . Initializes the X system. ; Returns kFALSE in case of failure. It is implementation dependent. ; Reimplemented from TVirtualX.; Definition at line 491 of file TGCocoa.mm. ◆ InitWindow(). Int_t TGCocoa::InitWindow ; (; ULong_t ; window). overridevirtual . Creates a new window and return window number. ; Returns -1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 640 of file TGCocoa.mm. ◆ InternAtom(). Atom_t TGCocoa::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Returns the atom identifier associated with the specified ""atom_name"" string. ; If ""only_if_exists"" is False, the atom is created if it does not exist. If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent. Uppercase and lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all designate different atoms. ; Reimplemented from TVirtualX.; Definition at line 3577 of file TGCocoa.mm. ◆ IntersectRegion(). void TGCocoa::IntersectRegion ; (; Regi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:92871,failure,failure,92871,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['failure'],['failure']
Availability,d from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutableprotected . ! Transient cache with transformed values of coefficients ; Definition at line 107 of file RooAddPdf.h. ◆ _coefErrCount. Int_t RooAddPdf::_coefErrCount. mutableprotected . ! Coefficient error counter ; Definition at line 139 of file RooAddPdf.h. ◆ _coefList. RooListProxy RooAddPdf::_coefList. protected . List of coefficients. ; Definition at line 132 of file RooAddPdf.h. ◆ _copyOfLastNormSet. std::unique_ptr<const RooArgSet> RooAddPdf::_copyOfLastNormSet = nullptr. mutableprivate . ! ; Definition at line 146 of file RooAddPdf.h. ◆ _haveLastCoef. bool RooAddPdf::_haveLastCoef = false. protected . Flag indicating if last PDFs coefficient was supplied in the constructor. ; Definition at line 135 of file RooAddPdf.h. ◆ _idOfLastUsedNormSet. RooFit::UniqueId<RooArgSet>::Value_t RooAddPdf::_idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval. mutableprivate . ! ; Definition at line 145 of file RooAddPdf.h. ◆ _pdfList. RooListProxy RooAddPdf::_pdfList. protected . List of component PDFs. ; Definition at line 131 of file RooAddPdf.h. ◆ _projCacheMgr. RooObjCacheManager RooAddPdf::_projCacheMgr. mutableprotected . Definition at line 110 of file RooAddPdf.h. ◆ _recursive. bool RooAddPdf::_re,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:96955,error,error,96955,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['error'],['error']
Availability,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:25054,error,error,25054,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,19,['error'],['error']
Availability,"d has already been executed."");; 3534 goto L99;; 3535 }; 3536//______________________________________________________________________________; 3537//; 3538// Command FIX; 3539//; 3540 if( !strncmp(comd.Data(),""FIX"",3) ) {; 3541 Printf("" ***>FIX} <parno> [parno] ... [parno]"");; 3542 Printf("" Causes parameter(s) <parno> to be removed from the list of"");; 3543 Printf("" variable parameters, and their value(s) will remain constant"");; 3544 Printf("" during subsequent minimizations, etc., until another command"");; 3545 Printf("" changes their value(s) or status."");; 3546 goto L99;; 3547 }; 3548//______________________________________________________________________________; 3549//; 3550// Command HESSE; 3551//; 3552 if( !strncmp(comd.Data(),""HES"",3) ) {; 3553 Printf("" ***>HESse [maxcalls]"");; 3554 Printf("" Calculate, by finite differences, the Hessian or error matrix."");; 3555 Printf("" That is, it calculates the full matrix of second derivatives"");; 3556 Printf("" of the function with respect to the currently variable"");; 3557 Printf("" parameters, and inverts it, printing out the resulting error"");; 3558 Printf("" matrix. The optional argument [maxcalls] specifies the"");; 3559 Printf("" (approximate) maximum number of function calls after which"");; 3560 Printf("" the calculation will be stopped."");; 3561 goto L99;; 3562 }; 3563//______________________________________________________________________________; 3564//; 3565// Command IMPROVE; 3566//; 3567 if( !strncmp(comd.Data(),""IMP"",3) ) {; 3568 Printf("" ***>IMPROVE [maxcalls]"");; 3569 Printf("" If a previous minimization has converged, and the current"");; 3570 Printf("" values of the parameters therefore correspond to a local"");; 3571 Printf("" minimum of the function, this command requests a search for"");; 3572 Printf("" additional distinct local minima."");; 3573 Printf("" The optional argument [maxcalls] specifies the (approximate"");; 3574 Printf("" maximum number of function calls after which the calculation"");; 3575 Printf("" will ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:113820,error,error,113820,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"d histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REvePointSelector (const REvePointSelector &)=delete;  ; REvePointSelector & operator= (const REvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:16503,avail,available,16503,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,1,['avail'],['available']
Availability,"d histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  REveSelectorToEventList (const REveSelectorToEventList &)=delete;  ; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:15733,avail,available,15733,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,1,['avail'],['available']
Availability,"d histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  TEvePointSelector (const TEvePointSelector &)=delete;  ; TEvePointSelector & operator= (const TEvePointSelector &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSelector.html:16501,avail,available,16501,doc/master/classTEvePointSelector.html,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html,1,['avail'],['available']
Availability,"d histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  TEveSelectorToEventList (const TEveSelectorToEventList &)=delete;  ; TEveSelectorToEventList & operator= (const TEveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelectorToEventList.html:15653,avail,available,15653,doc/master/classTEveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html,1,['avail'],['available']
Availability,"d histogram ;  ; TTreeFormula * fSelect;  Pointer to selection formula. ;  ; Long64_t fSelectedRows;  Number of selected entries. ;  ; bool fSelectMultiple;  True if selection has a variable index. ;  ; TTree * fTree;  Pointer to current Tree. ;  ; TObject * fTreeElist;  Pointer to Tree Event list. ;  ; TEntryListArray * fTreeElistArray;  ! Pointer to Tree Event list array ;  ; Double_t ** fVal;  ![fSelectedRows][fDimension] Local buffer for the variables ;  ; Int_t fValSize;  ; TTreeFormula ** fVar;  ![fDimension] Array of pointers to variables formula ;  ; bool * fVarMultiple;  ![fDimension] True if fVar[i] has a variable index ;  ; Double_t * fVmax;  ![fDimension] Maxima of varexp columns ;  ; Double_t * fVmin;  ![fDimension] Minima of varexp columns ;  ; Double_t * fW;  ![fSelectedRows]Local buffer for weights ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  TSelectorDraw (const TSelectorDraw &);  ; TSelectorDraw & operator= (const TSelectorDraw &);  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:15647,avail,available,15647,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['avail'],['available']
Availability,"d histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:48319,error,error,48319,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['error'],['error']
Availability,"d histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. The following named",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:46106,error,error,46106,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['error'],['error']
Availability,"d histogram is a good approximation of the true integral value.; The improved convergence behavior is a result of making the value of the normalization; integral deterministic for each value of the parameters. If (multi-dimensional) numeric; integrals are calculated at insufficient precision (>=1e-7) MINUIT convergence may; be impaired by the effects numerical noise that can cause that subsequent evaluations; of an integral at the same point in parameter space can give slightly different answers. Bool_t traceEvalHook(Double_t value) const; WVE 08/21/01 Probably obsolete now. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:46728,error,error,46728,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['error'],['error']
Availability,"d in ROOT;; 3976/// - only the last fitted function is saved in the histogram;; 3977/// - the histogram is drawn after fitting overalyed with the resulting fitting function; 3978///; 3979/// \anchor HFitMinimizer; 3980/// ### Minimizer Configuration; 3981///; 3982/// The Fit is perfomed using the default Minimizer, defined in the `ROOT::Math::MinimizerOptions` class.; 3983/// It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling `TH1::Fit`):; 3984/// - `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm)` for changing the minmizer and/or the corresponding algorithm.; 3985/// For example `ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS"");` will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization; 3986/// The current defaults are (""Minuit"",""Migrad"").; 3987/// See the documentation of the `ROOT::Math::MinimizerOptions` for the available minimizers in ROOT and their corresponding algorithms.; 3988/// - `ROOT::Math::MinimizerOptions::SetDefaultTolerance` for setting a different tolerance value for the minimization.; 3989/// - `ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls` for setting the maximum number of function calls.; 3990/// - `ROOT::Math::MinimizerOptions::SetDefaultPrintLevel` for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing; 3991///; 3992/// Other options are possible depending on the Minimizer used, see the corresponding documentation.; 3993/// The default minimizer can be also set in the resource file in etc/system.rootrc. For example; 3994///; 3995/// ~~~ {.cpp}; 3996/// Root.Fitter: Minuit2; 3997/// ~~~; 3998///; 3999/// \anchor HFitChi2; 4000/// ### Chi-square Fits; 4001///; 4002/// By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method; 4003/// is used where the resid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:161227,avail,available,161227,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['avail'],['available']
Availability,"d in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at line 1798 of file TProof.cxx. ◆ CloseProgressDialog(). void TProof::CloseProgressDialog ; (; ). Close progress dialog. ; Definition at line 9283 of file TProof.cxx. ◆ Collect() [1/4]. Int_t TProof::Collect ; (; const TSlave * ; sl, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from slave sl. ; Returns the number of slaves that responded (=1). If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2669 of file TProof.cxx. ◆ Collect() [2/4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:76411,error,error,76411,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"d in TProofLite.; Definition at line 9612 of file TProof.cxx. ◆ SendLogToWindow(). void TProof::SendLogToWindow ; (; Bool_t ; mode). inline . Definition at line 1017 of file TProof.h. ◆ SendObject(). Int_t TProof::SendObject ; (; const TObject * ; obj, . ESlaves ; list = kActive . ). private . Send object to master or slave servers. ; Returns number of slaves object was sent to, -1 in case of error. ; Definition at line 7054 of file TProof.cxx. ◆ SendPrint(). Int_t TProof::SendPrint ; (; Option_t * ; option = """"). private . Send print command to master server. ; Returns number of slaves message was sent to. Returns -1 in case of error. ; Definition at line 7068 of file TProof.cxx. ◆ SetActive(). void TProof::SetActive ; (; Bool_t ; = kTRUE). inline . Definition at line 988 of file TProof.h. ◆ SetAlias(). void TProof::SetAlias ; (; const char * ; alias = """"). virtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 10583 of file TProof.cxx. ◆ SetDataPoolUrl(). void TProof::SetDataPoolUrl ; (; const char * ; url). inline . Definition at line 1044 of file TProof.h. ◆ SetDataSetTreeName(). Int_t TProof::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedbackOption(). void TProof::SetDrawFeedbackOption ; (; TDrawFeedback * ; f, . Option_t * ; opt . ). Set draw feedback option. ; Definition at line 10102 of file TProof.cxx. ◆ SetDSet(). void TProof::SetDSet ; (; TDSet * ; dset). inlineprotected . Definition at line 737 of file TProof.h. ◆ SetFeedback(). void TProof::SetFeedback ; (; TString & ; opt, . TString & ; optfb, . Int_t ; action . ). protected . Extra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:141693,recover,recovered,141693,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['recover'],['recovered']
Availability,"d in TUnixSystem, and TWinNTSystem.; Definition at line 716 of file TSystem.cxx. ◆ ExitLoop(). void TSystem::ExitLoop ; (; ). virtual . Exit from event loop. ; Reimplemented in TWinNTSystem.; Definition at line 392 of file TSystem.cxx. ◆ ExpandFileName() [1/3]. const char * TSystem::ExpandFileName ; (; const char * ; fname). protectedvirtual . Expand a pathname getting rid of special shell characters like ~. ; $, etc. For Unix/Win32 compatibility use instead of $XXX when using environment variables in a pathname. If compatibility is not an issue you can use on Unix directly $XXX. This is a protected function called from the OS specific system classes, like TUnixSystem and TWinNTSystem. Returns the expanded filename or 0 in case of error. ; Definition at line 1098 of file TSystem.cxx. ◆ ExpandFileName() [2/3]. Bool_t TSystem::ExpandFileName ; (; const char * ; fname, . char * ; xname, . const int ; kBufSize . ). private . Private method for pathname expansion. ; Returns kTRUE in case of error and kFALSE otherwise. ; Definition at line 1132 of file TSystem.cxx. ◆ ExpandFileName() [3/3]. Bool_t TSystem::ExpandFileName ; (; TString & ; fname). protectedvirtual . Expand a pathname getting rid of special shell characters like ~. ; $, etc. This function is analogous to ExpandFileName(const char *), except that it receives a TString reference of the pathname to be expanded. Returns kTRUE in case of error and kFALSE otherwise. ; Definition at line 1116 of file TSystem.cxx. ◆ ExpandPathName() [1/2]. char * TSystem::ExpandPathName ; (; const char * ; path). virtual . Expand a pathname getting rid of special shell characters like ~. ; $, etc. For Unix/Win32 compatibility use instead of $XXX when using environment variables in a pathname. If compatibility is not an issue you can use on Unix directly $XXX. The user must delete returned string. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1285 of file TSystem.cxx. ◆ ExpandPathName() [2/2]. Bool_t TSystem::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:50380,error,error,50380,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['error'],['error']
Availability,"d in h1analysis.C. TPrincipal * Principal(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Interface to the Principal Components Analysis class. Create an instance of TPrincipal; Fill it with the selected variables; if option ""n"" is specified, the TPrincipal object is filled with; normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" generate standard histograms; If option ""p"" and ""c"" generate code of conversion functions; return a pointer to the TPrincipal object. It is the user responsibility; to delete this object.; The option default value is ""np"". See TTreePlayer::DrawSelect for explanation of the other parameters. Long64_t Process(const char* filename, Option_t* option, Long64_t nentries, Long64_t firstentry); Process this tree executing the TSelector code in the specified filename.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector,; where TSelector has the following member functions:. Begin(): called every time a loop on the tree starts,; a convenient place to create your histograms.; SlaveBegin(): called after Begin(), when on PROOF called only on the; slave servers.; Process(): called for each event, in this function you decide what; to read and fill your histograms.; SlaveTerminate: called at the end of the loop on the tree, when on PROOF; called only on the slave servers.; Terminate(): called at the end of the loop on the tree,; a convenient place to draw/fit your histograms. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:48775,error,error,48775,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,6,['error'],['error']
Availability,"d in the statistics box (""Mean"", ""Std Dev"", ...) can be changed from; 656`$ROOTSYS/etc/system.rootrc` or `.rootrc` (look for the string `Hist.Stats.`).; 657 ; 658 ; 659\anchor HP08; 660### Fit Statistics; 661 ; 662 ; 663The type of information about fit parameters printed in the histogram statistics; 664box can be selected via the parameter mode. The parameter mode can be; 665`= pcev` (default `= 0111`); 666 ; 667 p = 1; print Probability; 668 c = 1; print Chisquare/Number of degrees of freedom; 669 e = 1; print errors (if e=1, v must be 1); 670 v = 1; print name/values of parameters; 671 ; 672Example:; 673 ; 674 gStyle->SetOptFit(1011);; 675 ; 676print fit probability, parameter names/values and errors.; 677 ; 6781. When `v = 1` is specified, only the non-fixed parameters are shown.; 6792. When `v = 2` all parameters are shown.; 680 ; 681Note: `gStyle->SetOptFit(1)` means ""default value"", so it is equivalent; 682to `gStyle->SetOptFit(111)`; 683 ; 684 ; 685\anchor HP09; 686### The error bars options; 687 ; 688 ; 689| Option | Description |; 690|----------|-------------------------------------------------------------------|; 691| ""E"" | Default. Shows only the error bars, not a marker.|; 692| ""E1"" | Small lines are drawn at the end of the error bars.|; 693| ""E2"" | Error rectangles are drawn.|; 694| ""E3"" | A filled area is drawn through the end points of the vertical error bars.|; 695| ""E4"" | A smoothed filled area is drawn through the end points of the vertical error bars.|; 696| ""E0"" | Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping|; 697| ""E5"" | Like E3 but ignore the bins with 0 contents.|; 698| ""E6"" | Like E4 but ignore the bins with 0 contents.|; 699| ""X0"" | When used with one of the ""E"" option, it suppress the error bar along X as `gStyle->SetErrorX(0)` would do.|; 700 ; 701Begin_Macro(source); 702{; 703 auto c1 = new TCanvas(""c1"",""c1"",600,400);; 704 auto he = new TH1F(""he"",""Distribution drawn with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:30195,error,error,30195,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['error']
Availability,"d int ) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. { return std::string();}. int VariableIndex(const string& ) const; get index of variable given a variable given a name; return -1 if variable is not found. { return -1; }. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fDebug; }. unsigned int MaxFunctionCalls(); max number of function calls. { return fMaxCalls; }. unsigned int MaxIterations(); max iterations. { return fMaxIter; }. double Tolerance() const; absolute tolerance. { return fTol; }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fPrec; }. int Strategy() const; strategy. { return fStrategy; }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fUp; }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fDebug = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTol = tol; }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fPrec = prec; }. void SetStrategy(int strategyLevel); set the strategy. { fStrategy = strategyLevel; }. void SetErrorDef(double up); set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:9590,error,error,9590,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,1,['error'],['error']
Availability,"d int DataSize() const. return the size of internal data (number of fit points); if data are not copied in but used externally the size is 0. bool HaveCoordErrors() const. flag to control if data provides error on the coordinates. bool HaveAsymErrors() const. flag to control if data provides asymmetric errors on the value. void Add(double x, double y). add one dim data with only coordinate and values. void Add(double x, double y, double ey). add one dim data with no error in the coordinate (x); in this case store the inverse of the error in the value (y). void Add(double x, double y, double ex, double ey). add one dim data with error in the coordinate (x); in this case store the value (y) error and not the inverse. void Add(double x, double y, double ex, double eyl, double eyh). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); in this case store the y errors and not the inverse. void Add(const double* x, double val). add multi-dim coordinate data with only value (no errors). void Add(const double* x, double val, double eval). add multi-dim coordinate data with only error in value. void Add(const double* x, double val, const double* ex, double eval). add multi-dim coordinate data with both error in coordinates and value. void Add(const double* x, double val, const double* ex, double elval, double ehval). add multi-dim coordinate data with both error in coordinates and value. const double * Coords(unsigned int ipoint) const. return a pointer to the coordinates data for the given fit point. double Value(unsigned int ipoint) const. return the value for the given fit point. double Error(unsigned int ipoint) const. return error on the value for the given fit point; Safe (but slower) method returning correctly the error on the value; in case of asymm errors return the average 0.5(eu + el). double InvError(unsigned int ipoint) const. Return the inverse of error on the value for the given fit point; useful when error in the coordinates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__BinData.html:9070,error,errors,9070,root/html528/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__BinData.html,6,['error'],['errors']
Availability,"d int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from option and default range. BinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from options and range; efault is 1D and value errors. BinData(unsigned int n, const double* dataX, const double* val, const double* ex, const double* eval); constructurs using external data . constructor from external data for 1D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* val, const double* ex, const double* ey, const double* eval). constructor from external data for 2D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* dataZ, const double* val, const double* ex, const double* ey, const double* ez, const double* eval). constructor from external data for 3D with errors on coordinate and value. BinData(const ROOT::Fit::BinData& ). copy constructor. BinData & operator=(const ROOT::Fit::BinData& ). assignment operator. virtual ~BinData(). destructor. void Initialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints). unsigned int PointSize() const. return the size of a fit point (is the coordinate dimension + 1 for the value and eventually; the number of all errors. unsigned int DataSize() const. return the size of internal data (number of fit points); if data are not copied in but used externally the size is 0. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__BinData.html:7196,error,errors,7196,root/html528/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__BinData.html,2,['error'],['errors']
Availability,"d int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from option and default range. BinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from options and range; efault is 1D and value errors. BinData(unsigned int n, const double* dataX, const double* val, const double* ex, const double* eval); constructurs using external data . constructor from external data for 1D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* val, const double* ex, const double* ey, const double* eval). constructor from external data for 2D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* dataZ, const double* val, const double* ex, const double* ey, const double* ez, const double* eval). constructor from external data for 3D with errors on coordinate and value. BinData(const ROOT::Fit::BinData& ). copy constructors. BinData & operator=(const ROOT::Fit::BinData& ). assignment operator. virtual ~BinData(). destructor. void Initialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints). unsigned int PointSize() const. return the size of a fit point (is the coordinate dimension + 1 for the value and eventually; the number of all errors. unsigned int DataSize() const. return the size of internal data (number of fit points); if data are not copied in but used externally the size is 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__BinData.html:7198,error,errors,7198,root/html532/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__BinData.html,4,['error'],['errors']
Availability,"d intAt(const Int_t* idx) const; unsigned int&At(const Int_t* idx); unsigned intAt(ULong64_t linidx) const; unsigned int&At(ULong64_t linidx); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTNDArray::GetBin(const Int_t* idx) const; Long64_tTNDArray::GetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tTNDArray::GetNbins() const; Int_tTNDArray::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_unsigned_int_.html:2253,error,error,2253,root/html534/TNDArrayT_unsigned_int_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_unsigned_int_.html,3,['error'],['error']
Availability,"d integer bin contents; and using an error bar calculated with Poisson statistics. The bin width; is used to set the relative scale of bins with different widths. void addBinWithError(Axis_t binCenter, Double_t n, Double_t elow, Double_t ehigh, Double_t binWidth = 0, Double_t xErrorFrac = 1., Bool_t correctForBinWidth = kTRUE, Double_t scaleFactor = 1.); Add a bin to this histogram with the specified bin contents; and error. The bin width is used to set the relative scale of; bins with different widths. void addBinWithXYError(Axis_t binCenter, Double_t n, Double_t exlow, Double_t exhigh, Double_t eylow, Double_t eyhigh, Double_t scaleFactor = 1.); Add a bin to this histogram with the specified bin contents; and error. The bin width is used to set the relative scale of; bins with different widths. void addAsymmetryBin(Axis_t binCenter, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addAsymmetryBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBin(Axis_t binCenter, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1., Double_t scaleFactor = 1.); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. ~RooHist(); Destructor. Bool_t hasIdenticalBinning(const RooHist& other) const; Return kTRUE if binning of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHist.html:24624,error,error,24624,root/html602/RooHist.html,https://root.cern,https://root.cern/root/html602/RooHist.html,2,['error'],['error']
Availability,"d is painted (if needed). This allows; to draw the grid and the axis separately. In THistPainter::Paint this; feature is used to make sure that the grid is drawn in the background and; the axis tick marks in the foreground of the pad.; ; . void PaintBar(Option_t* option). Draw a bar-chart in a normal pad.; . void PaintBarH(Option_t* option). Draw a bar char in a rotated pad (X vertical, Y horizontal).; . void PaintBoxes(Option_t* option). Control function to draw a 2D histogram as a box plot.; . void PaintColorLevels(Option_t* option). Control function to draw a 2D histogram as a color plot.; . void PaintContour(Option_t* option). Control function to draw a 2D histogram as a contour plot.; . Int_t PaintContourLine(Double_t elev1, Int_t icont1, Double_t x1, Double_t y1, Double_t elev2, Int_t icont2, Double_t x2, Double_t y2, Double_t* xarr, Double_t* yarr, Int_t* itarr, Double_t* levels). Fill the matrix XARR YARR for Contour Plot.; ; . void PaintErrors(Option_t* option). Draw 1D histograms error bars.; . void Paint2DErrors(Option_t* option). Draw 2D histograms errors.; ; . void PaintFrame(). Calculate range and clear pad (canvas).; ; . void PaintFunction(Option_t* option). Paint functions associated to an histogram.; . void PaintHist(Option_t* option). Control routine to draw 1D histograms.; . void PaintH3(Option_t* option = """"). Control function to draw a 3D histograms.; . Int_t PaintInit(). Compute histogram parameters used by the drawing routines.; ; . Int_t PaintInitH(). Compute histogram parameters used by the drawing routines for a rotated pad.; ; . void PaintH3Iso(). Control function to draw a 3D histogram with Iso Surfaces.; . void PaintLego(Option_t* option). Control function to draw a 2D histogram as a lego plot.; . void PaintLegoAxis(TGaxis* axis, Double_t ang). Draw the axis for legos and surface plots.; ; . void PaintPalette(). Paint the color palette on the right side of the pad.; . void PaintScatterPlot(Option_t* option). Control function to draw a 2D ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:84994,error,error,84994,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['error']
Availability,"d libraries. ; This list is of a format suitable for a linker, i.e it may contain -Lpathname and/or -lNameOfLib. Option can be any of: S: shared libraries loaded at the start of the executable, because they were specified on the link line. D: shared libraries dynamically loaded after the start of the program. L: list the .LIB rather than the .DLL (this is intended for linking) [This options is not the default] ; Reimplemented from TSystem.; Definition at line 4307 of file TWinNTSystem.cxx. ◆ GetLinkedLibraries(). const char * TWinNTSystem::GetLinkedLibraries ; (; ). overrideprivatevirtual . Get list of shared libraries loaded at the start of the executable. ; Returns 0 in case list cannot be obtained or in case of error. ; Reimplemented from TSystem.; Definition at line 4153 of file TWinNTSystem.cxx. ◆ GetMemInfo(). Int_t TWinNTSystem::GetMemInfo ; (; MemInfo_t * ; info); const. overridevirtual . Returns ram and swap memory usage info into the MemInfo_t structure. ; Returns -1 in case of error, 0 otherwise. ; Reimplemented from TSystem.; Definition at line 6144 of file TWinNTSystem.cxx. ◆ GetNbGroups(). Bool_t TWinNTSystem::GetNbGroups ; (; ). private . Definition at line 3256 of file TWinNTSystem.cxx. ◆ GetPathInfo(). int TWinNTSystem::GetPathInfo ; (; const char * ; path, . FileStat_t & ; buf . ). overridevirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 2643 of file TWinNTSystem.cxx. ◆ GetPeerName(). TInetAddress TWinNTSystem::GetPeerName ; (; int ; sock). overridevirtual . Get Internet Protocol (IP) address of remote host and port #. ; Reimplemented from TSystem.; Definition at line 4743 of file TWinNTSystem.cxx. ◆ GetPid(). int TWinNTSystem::GetPid ; (; ). overridevirtual . Get process id. ; Reimplemented from TSystem.; Definition at line 3897 of file TWinNTSystem.cxx. ◆ GetP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:54689,error,error,54689,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['error'],['error']
Availability,"d must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemFile.html:9030,error,error,9030,doc/master/classTSystemFile.html,https://root.cern,https://root.cern/doc/master/classTSystemFile.html,1,['error'],['error']
Availability,"d must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSystemFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemDirectory.html:10385,error,error,10385,doc/master/classTSystemDirectory.html,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html,1,['error'],['error']
Availability,"d must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:20484,error,error,20484,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['error'],['error']
Availability,"d must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttAxis;  TAttAxis ();  ; virtual ~TAttAxis ();  Destructor. ;  ; void Copy (TAttAxis &attaxis) const;  Copy of the object. ;  ; virtual Color_t GetAxisColor () const;  ; virtual Color_t GetLabelColor () const;  ; virtual Style_t GetLabelFont () const;  ; virtual Float_t GetLabelOffset () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classAxis2.html:15024,error,error,15024,doc/master/classAxis2.html,https://root.cern,https://root.cern/doc/master/classAxis2.html,2,['error'],['error']
Availability,"d ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:10320,error,error,10320,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"d normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments. TH1D* GetD() const; Returns d vector (for choosing appropriate regularisation). TH1D* GetSV() const; Returns singular values vector. TH2D* GetXtau() const; Returns the computed regularized covariance matrix corresponding to total uncertainties on measured spectrum as passed in the constructor.; Note that this covariance matrix will not contain the effects of forced normalization if spectrum is normalized to unit area. TH2D* GetXinv() const; Returns the computed inverse of the covariance matrix. TH2D* GetBCov() const; Returns the covariance matrix. void H2V(const TH1D* histo, TVectorD& vec); Fill 1D histogram into vector. void H2Verr(const TH1D* histo, TVectorD& vec); Fill 1D histogram errors into vector. void V2H(const TVectorD& vec, TH1D& histo); Fill vector into 1D histogram. void H2M(const TH2D* histo, TMatrixD& mat); Fill 2D histogram into matrix. void M2H(const TMatrixD& mat, TH2D& histo); Fill 2D histogram into matrix. TVectorD VecDiv(const TVectorD& vec1, const TVectorD& vec2, Int_t zero = 0); Divide entries of two vectors. TMatrixD MatDivVec(const TMatrixD& mat, const TVectorD& vec, Int_t zero = 0); Divide matrix entries by vector. TVectorD CompProd(const TVectorD& vec1, const TVectorD& vec2); Multiply entries of two vectors. Double_t GetCurvature(const TVectorD& vec, const TMatrixD& curv); Compute curvature of vector. void FillCurvatureMatrix(TMatrixD& tCurv, TMatrixD& tC) const. void InitHistos(). void RegularisedSymMatInvert(TMatrixDSym& mat, Double_t eps = 0.001); naive regularised inversion cuts off small elements. Double_t ComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); Helper routine to compute chi-squared between d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSVDUnfold.html:12768,error,errors,12768,root/html602/TSVDUnfold.html,https://root.cern,https://root.cern/root/html602/TSVDUnfold.html,2,['error'],['errors']
Availability,"d normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments. TH1D* GetD() const; Returns d vector (for choosing appropriate regularisation). TH1D* GetSV() const; Returns singular values vector. TH2D* GetXtau() const; Returns the computed regularized covariance matrix corresponding to total uncertainties on measured spectrum as passed in the constructor.; Note that this covariance matrix will not contain the effects of forced normalization if spectrum is normalized to unit area. TH2D* GetXinv() const; Returns the computed inverse of the covariance matrix. TH2D* GetBCov() const; Returns the covariance matrix. void H2V(const TH1D* histo, TVectorD& vec); Fill 1D histogram into vector. void H2Verr(const TH1D* histo, TVectorD& vec); Fill 1D histogram errors into vector. void V2H(const TVectorD& vec, TH1D& histo); Fill vector into 1D histogram. void H2M(const TH2D* histo, TMatrixD& mat); Fill 2D histogram into matrix. void M2H(const TMatrixD& mat, TH2D& histo); Fill 2D histogram into matrix. TVectorD VecDiv(const TVectorD& vec1, const TVectorD& vec2, Int_t zero = 0); Divide entries of two vectors. TMatrixD MatDivVec(const TMatrixD& mat, const TVectorD& vec, Int_t zero = 0); Divide matrix entries by vector. TVectorD CompProd(const TVectorD& vec1, const TVectorD& vec2); Multiply entries of two vectors. Double_t GetCurvature(const TVectorD& vec, const TMatrixD& curv); Compute curvature of vector. void FillCurvatureMatrix(TMatrixD& tCurv, TMatrixD& tC) const. void InitHistos(). void RegularisedSymMatInvert(TMatrixDSym& mat, Double_t eps = 1e-3); naive regularised inversion cuts off small elements. Double_t ComputeChiSquared(const TH1D& truspec, const TH1D& unfspec); Helper routine to compute chi-squared between di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSVDUnfold.html:12298,error,errors,12298,root/html534/TSVDUnfold.html,https://root.cern,https://root.cern/root/html534/TSVDUnfold.html,1,['error'],['errors']
Availability,"d of curve with given name with respect; to histogram with given name. If nFitParam is non-zero, it is used to reduce the; number of degrees of freedom for a chi^2 for a curve that was fitted to the; data with that number of floating parameters. RooHist* residHist(const char* histname = 0, const char* pdfname = 0, bool normalize = false, bool useAverage = kFALSE) const; Return a RooHist containing the residuals of histogram 'histname' with respect; to curve 'curvename'. If normalize is true the residuals are divided by the error; on the histogram, effectively returning a pull histogram. Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const; Return the number of events that is associated with the range [xlo,xhi]; This method is only fully functional for ranges not equal to the full; range if the object that inserted the normalization data provided; a link to an external object that can calculate the event count in; in sub ranges. An error will be printed if this function is used; on sub-ranges while that information is not available. void SetName(const char* name); Set the name of the RooPlot to 'name'. void SetNameTitle(const char* name, const char* title); Set the name and title of the RooPlot to 'name' and 'title'. void SetTitle(const char* name); Set the title of the RooPlot to 'title'. Int_t defaultPrintContents(Option_t* opt) const; Define default print options, for a given print style. TAxis* GetXaxis() const; { return _hist->GetXaxis() ; }. TAxis* GetYaxis() const; { return _hist->GetYaxis() ; }. Int_t GetNbinsX() const; { return _hist->GetNbinsX() ; }. Int_t GetNdivisions(Option_t* axis = ""X"") const; { return _hist->GetNdivisions(axis) ; }. Double_t GetMinimum(Double_t minval = -3.40282347E+38F) const; { return _hist->GetMinimum(minval) ; }. Double_t GetMaximum(Double_t maxval = 3.40282347E+38F) const; { return _hist->GetMaximum(maxval) ; }. void SetAxisColor(Color_t color = 1, Option_t* axis = ""X""); { _hist->SetAxisColor(color,axis) ; }. void SetAxisRa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPlot.html:23503,error,error,23503,root/html602/RooPlot.html,https://root.cern,https://root.cern/root/html602/RooPlot.html,4,"['avail', 'error']","['available', 'error']"
