quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qubits.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_rand.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:33090,test,tests,33090,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_spinchain.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:37559,test,tests,37559,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_spmath.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_states.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:39794,test,tests,39794,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_gates.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_graph.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:13720,test,tests,13720,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_noise.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:20424,test,tests,20424,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_pulse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qft.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:27876,test,tests,27876,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_rand.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:33834,test,tests,33834,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_mkl.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_noise.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:19680,test,tests,19680,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qft.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qobjevo.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:28620,test,tests,28620,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"mport_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ...etc etc...; ________________________________________________________________________________________________________________ TestSESolve.test_06_4_compare_state_and_unitary_list_str ________________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); w",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:17576,Test,TestSESolve,17576,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"mporting test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python na",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13168,test,tests,13168,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"mputes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple C",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1828,Test,Tests,1828,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['Test'],['Tests']
Testability,"mpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29904,test,tests,29904,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,mpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctio,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32294,test,tests,32294,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,mpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35570,test,tests,35570,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ms[0]))]; full_oper = tensor(list(map(Qobj, op_iter_list))); - rho_out = rho_out + full_oper * state * full_oper.dag(); + rho_out += full_oper * state * full_oper.dag(); return Qobj(rho_out); diff --git a/qutip/superoperator.py b/qutip/superoperator.py; index dacc0e1e..8d099484 100644; --- a/qutip/superoperator.py; +++ b/qutip/superoperator.py; @@ -112,19 +112,19 @@ def liouvillian(H, c_ops=[], data_only=False, chi=None):; c_ = c_op; ; if c_.issuper:; - data = data + c_.data; + data += c_.data; else:; cd = c_.data.H; c = c_.data; if chi:; - data = data + np.exp(1j * chi[idx]) * \; + data += np.exp(1j * chi[idx]) * \; zcsr_kron(c.conj(), c); else:; - data = data + zcsr_kron(c.conj(), c); + data += zcsr_kron(c.conj(), c); cdc = cd * c; cdct = cdc.T; - data = data - 0.5 * zcsr_kron(spI, cdc); - data = data - 0.5 * zcsr_kron(cdct, spI); + data -= 0.5 * zcsr_kron(spI, cdc); + data -= 0.5 * zcsr_kron(cdct, spI); ; if not td:; if data_only:; diff --git a/qutip/tests/test_expect.py b/qutip/tests/test_expect.py; index 45568110..17491981 100644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:22758,test,tests,22758,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"n ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... ok; > > > Steady state: Thermal harmonic oscillator ... ok; > > > Steady state: Driven cavity ... ok; > > > Stochastic: smesolve: photo-current ... ok; > > > Stochastic: smesolve: homodyne ... ok; > > > Stochastic: smesolve: heterodyne ... ok; > > > Stochastic: ssesolve: photo-current ... ; > > > ok; > > > Stochastic: ssesolve: homodyne ... ok; > > > Stochastic: ssesolve: heterodyne ... ok; > > > Composite system, operator on Hilbert space. ... ok; > > > Superoperator: Efficient numerics and reference return same result, ... ok; > > > Non-composite system, operator on Hilbert space. ... ok; > > > Non-composite system, operator on Liouville space. ... ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_choi(q) returns q if q is already Choi. ... ok; > > > Superoperator: Test that converting a two-qubit superoperator through ... /usr/local/lib/python2.7/dist-packages/qutip/qobj.py:412: UserWarning: Multiplying superoperators with different representations; > > > warnings.warn(msg); > > > ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector con",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:10310,Test,Test,10310,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['Test'],['Test']
Testability,"n _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_su",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16238,test,tests,16238,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"n and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:14819,test,tests,14819,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['tests']
Testability,"n't put much thought into it before, and I think I was just generally writing in my default style. #### Test ordering; I hadn't much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:2074,log,logic,2074,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['log'],['logic']
Testability,"n(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4714,test,tests,4714,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['tests']
Testability,"n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001704, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:2029,test,tests,2029,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['test'],['tests']
Testability,"n-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:2623,log,logging,2623,https://qutip.org,https://github.com/qutip/qutip/pull/1695,1,['log'],['logging']
Testability,"n.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2197,log,logger,2197,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"n/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27621,test,test,27621,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"n/Includes/numpy/__init__.pxd.; Compiling qutip/cy/graph_utils.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/interpolate.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/spmath.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/heom.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/math.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/cy/spconvert.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/ptrace.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/testing.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/control/cy_grape.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/12] Cythonizing qutip/control/cy_grape.pyx; [ 2/12] Cythonizing qutip/cy/graph_utils.pyx; [ 3/12] Cythonizing qutip/cy/heom.pyx; [ 4/12] Cythonizing qutip/cy/interpolate.pyx; [ 5/12] Cythonizing qutip/cy/math.pyx; [ 6/12] Cythonizing qutip/cy/ptrace.pyx; [ 7/12] Cythonizing qutip/cy/sparse_utils.pyx; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/state/partition1/local-scratch/kilian/16342884/pip-build-7c5rN_/qutip/setup.py"", line 216, in <module>; ext_modules = cythonize(EXT_MODULES),; File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1016, in cythonize; cythonize_one(*args); File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Depend",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:2784,test,testing,2784,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['test'],['testing']
Testability,"n/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27490,test,test,27490,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"n: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris G",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2608,test,testing,2608,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22776,test,testing,22776,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23678,test,testing,23678,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR col",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5690,test,testing,5690,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27284,test,testing,27284,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"n_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18198,test,testing,18198,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"name = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _correlation_me_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:13919,Test,TestTimeDependence,13919,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,"nction, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_457",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24524,test,tests,24524,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ne 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 246 in _main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 196 in wrap_session; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 239 in pytest_cmdline_main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/config/__init__.py"", line 92 in main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/testing.py"", line 45 in run; File ""<stdin>"", line 1 in <module>; Abort trap: 6; ```; This is in a conda environment with qutip development version with ; ```; Python 3.7.4 (default, Aug 13 2019, 15:17:50); [Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin; ```; and ; ```; QuTiP Version: 4.5.0.dev0+d13f5435; Numpy Version: 1.17.2; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.4; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:4454,test,testing,4454,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['test'],['testing']
Testability,"ng 3LS emission corr., c_ops td (str-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concur",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6567,test,tests,6567,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"ng Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10357,test,test,10357,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,ng numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30637,test,tests,30637,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ng numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32195,test,tests,32195,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ng/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19288,test,tests,19288,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ng/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test mo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21993,test,tests,21993,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ngs regarding porting it directly into qutip, and we agreed it would be a good addition as a separate solver. There are a couple of we-believe-good reasons to provide <code>krylovsolve</code> as another qutip solver. As you mention, the method is currently limited to constant closed system Hamiltonians. Another possible addition discussed during the meetings was support for open quantum systems, which provides another unitary-fund grant opportunity for some students!. Another important application for many-body systems comes in handy with Krylov. Given the memory limitations from matrix representation of operators and the exponential growth of many-body systems Hilbert spaces, the limit of qubits on which the solvers live is around 15 qubits. This limitation gets expanded (in exchange for some slow down in the computations) to a few more qubits exploiting the binary operational nature of many-body systems. While any solver could use operations instead of matrices, it is a good testing bead to use Krylov's algorithm because of a property when constructing this space. This feature is a must-have within our research group, and everyone could also benefit from it. More importantly, Krylov is gaining increasing interest in the research community, and we believe that providing it as a qutip solver will increase the traffic of the repository. Regarding benchmarks and some documentation, we have a public jupyter notebook with some benchmarks here [krylov use examples](https://colab.research.google.com/drive/1f7ng8q9QNEzaZ97vGop3aIip8GPtl3GR?usp=sharing), and there's also a [medium blog post](https://medium.com/@julian.ruffinelli/krylov-approximation-method-for-quantum-evolution-148b3f023ec4) with some other details. As for maintenance, yes, the way this code-block fits in should not be problematic to update even with qutip changes. We use <code>krylovsolve</code> for research and will keep the solver repo outside qutip up to date and (hopefully!) inside of it for the communi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668#issuecomment-926236528:1112,test,testing,1112,https://qutip.org,https://github.com/qutip/qutip/issues/1668#issuecomment-926236528,1,['test'],['testing']
Testability,nit__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45711,test,testing,45711,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['testing']
Testability,"nnot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14672,test,testing,14672,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,nomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43912,test,tests,43912,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,nomkl mac test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1036:10,test,test,10,https://qutip.org,https://github.com/qutip/qutip/pull/1036,1,['test'],['test']
Testability,"note the reversal) a non-square operator that takes a two-qubit state to a tensor-product space between a 4-element space and 5-element space; - `[[[2], [2]], [[2], [2]]]` = `Map(Space(Map(Space(2), Space(2))), Space(Map(Space(2), Space(2))))`: a superoperator acting on square operators on qubit spaces.; - `[[1], [5]]` = `Map(Space(5), Field)` is a bra for a 5-element space. The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be re",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:4022,test,test,4022,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['test'],['test']
Testability,"nother exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ---------- coverage: platform linux, python 3.6.10-final-0 -----------; Name Stmts Miss Cover; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec3",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:49296,test,test-environment,49296,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + return total_R_tensor; > +; > +; > +def flimesolve(; > + H,; > + rho0,; > + taulist,; > + T,; > + Nt=None,; >; > There is no docstring entry for Nt.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245620508>:; >; > > + if isinstance(floquet_basis, FloquetBasis):; > + self.floquet_basis = floquet_basis; > + else:; > + raise TypeError(; > + ""The ``floquet_basis`` must be a FloquetBasis""); >; > Check done twice; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245632475>:; >; > > + Rate_Qobj_list = [Qobj(; > + RateMat, dims=[[self.Hdim, self.Hdim], [; > + self.Hdim, self.Hdim]],; >; > You go the Hdim from the shape, not the dimension. dims has the; > information about subsystem, shape does not. This should make test fail if; > there where some.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245632794>:; >; > > + c_ops = []; > + c_op_rates = []; > + for entry in c_ops_and_rates:; > + c_ops.append(entry[0]); > + c_op_rates.append(entry[1]); >; > Small trick:; > ⬇️ Suggested change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops, c_op_rates = zip(*c_ops_and_rates); >; > or do the check here while you are looping over all elements.; > ⬇️ Suggested change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops = []; > + c_op_rates = []; > + for c_op, rate in c_ops_and_rates:; > + if not isinstance(c_op, Qobj):; > + raise TypeError(""c_ops must be type Qobj""); > + c_ops.append(c_op); > + c_op_rates.append(rate); >; > ------------------------",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:9403,test,test,9403,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['test'],['test']
Testability,ns.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/te,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38105,test,tests,38105,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"nswer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1394,test,tests,1394,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"numpy give deprecation warning in some test related to mcsolve:; ```Monte-carlo: Constant H (str format) with no collapse ops (expect) ... /home/ericgig/.local/lib/python3.6/site-packages/qutip-4.4.0.dev0+7af31179-py3.6-linux-x86_64.egg/qutip/mcsolve.py:1152: DeprecationWarning: Calling np.sum(generator) is deprecated, and in the future will give a different result. Use np.sum(np.fromiter(generator)) or the python sum builtin instead.```. I replaced the 2 np.sum causing problem by the python builtin sum. Since we are not doing the sum on a numpy array and it's in the solver setup phase, there is only a negligible effect on performance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/945:39,test,test,39,https://qutip.org,https://github.com/qutip/qutip/pull/945,1,['test'],['test']
Testability,numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36037,test,tests,36037,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39817,test,tests,39817,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40517,test,tests,40517,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,nvs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - A,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:50903,test,tests,50903,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"o2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15013,test,test,15013,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"o2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16806,test,test,16806,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"o2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Librar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19499,test,test,19499,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,o_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[QFT-Qobj propagation]; 2.65s call test_control_pulseoptim.py::TestOptimization::test_crab[Qobj propagation]; 2.57s call test,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:2542,Test,TestSESolve,2542,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestSESolve']
Testability,"o_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ===================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25899,test,tests,25899,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,oadparams.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; copying qutip/control/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11107,test,tests,11107,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"od = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:4187,Assert,AssertionError,4187,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Assert'],['AssertionError']
Testability,"odel now and a partial implementation of Pauli; > tracking; > <https://www.date-conference.com/files/proceedings/2014/pdffiles/05.6_7_ip2-19.pdf>; > which pushes all the corrections and measurement to the end of the circuit.; > I have written a quick example which demonstrates the use of this :; >; > https://github.com/sahmed95/notebooks/blob/icm/qutip_icm/; > icm_pauli_tracked.ipynb; > Circuit with a rotation gate (T gate); >; > [image: t_example]; > <https://cloud.githubusercontent.com/assets/6968324/21744332/c723fc5e-d556-11e6-9007-83187de75867.png>; > Pauli tracked ICM representation of circuit; >; > [image: t_pauli_tracked]; > <https://cloud.githubusercontent.com/assets/6968324/21744335/c997f300-d556-11e6-9202-f3ed33955b8a.png>; >; > Thus, we get a quantum circuit with qubit initializations in the begining,; > a mesh of CNOT gates in the middle and measurements in the end. This seems; > to be very useful as the starting point of topological quantum circuit; > optimization.; >; > Future work:; >; > 1.; >; > Represent qubit initializations in some way. Right now I consider; > everything as a gate. (Perhaps make new objects for qubit intializations,; > measurement, correction etc.); > 2.; >; > Better visualization such that all initializations, measurements and; > corrections can be stacked in one line.; > 3.; >; > Representing the information regarding P_dagger, T_dagger, V_dagger; > gate teleportation in some way. The difference is just based on the; > interpretation of the measurement.; > 4.; >; > Complete the Pauli tracking algorithm to get the gate sequence for; > correction based on measurement.; >; > Tests, tests and more tests.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/603#issuecomment-271102783>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7QWYdk0P9IXAB6gPwnl0o86zvrktks5rP-DQgaJpZM4LYs8G>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-271126423:2054,Test,Tests,2054,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-271126423,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"odname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:176: in <module>; from qutip.qobj import *; E File ""/home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/qobj.py"", line 2026; E """"""; E Checks whether qobj is a valid density matrix; E """"""; E ; E ; E ^; E IndentationError: expected an indented block; ___________________ ERROR collecting tests/test_brmesolve.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:1539,test,test-environment,1539,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"odule; 447 . F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 module_name = name; 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path); 218 if is_package and not hasattr(mod, '__path__'):. F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 setup_args=sargs,; 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path; 194 . F:\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 100 try:; 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]; 104 if obj_build_ext.inplace:. F:\Anaconda3\lib\distutils\dist.py in run_commands(self); 953 """"""; 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 ; 957 # -- Methods that operate on its Commands --------------------------. F:\Anaconda3\lib\distutils\dist.py in run_command(self, command); 972 cmd_obj = self.get_command_obj(command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1; 976 . F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 183 optimization.disable_optimization(); 184 ; --> 185 _build_ext.build_ext.run(self); 186 ; 187 def ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:6268,assert,assert,6268,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['assert'],['assert']
Testability,"odule_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29101,test,testing,29101,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"odule_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24500,test,testing,24500,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"oeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests should probably be skipped if there is a dependency missing? (Just like they already are if cython is missing.) ; In case they are not skipped, the reason for the failure should somehow become more clear. Regarding the actual behavior, qutip could print a warning if `cython` is installed and `filelock` is not, but I am not sure whether that would be a good idea. ---. For completeness, my `qutip.about()` output:. ```; QuTiP Version: 5.0.0.dev0+7892453; Numpy Version: 1.24.3; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.7.1; Python Version: 3.11.3; Number of CPUs: 16; BLAS Info: INTEL MKL; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/paul/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:8988,test,tests,8988,https://qutip.org,https://github.com/qutip/qutip/issues/2162,2,['test'],['tests']
Testability,"of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time left: 00:00:00:06; 60.0%. Run time: 7.37s. Est. time left: 00:00:00:04; 72.0%. Run time: 8.34s. Est. time left: 00:00:00:03; 80.0%. Run time: 9.25s. Est. time left: 00:00:00:02; Total run time: 9.33s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 59, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.30s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.23s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.61s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.61s. Est. time left: 00:00:00:06; 52.0%. Run time: 4.99s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.01s.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:6242,test,tests,6242,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"oh man, I don't know what I did locally to have my tests work but everything fail on Travis...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1436#issuecomment-774315439:51,test,tests,51,https://qutip.org,https://github.com/qutip/qutip/pull/1436#issuecomment-774315439,1,['test'],['tests']
Testability,"oise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5491,test,testing,5491,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ok i see, i was confsued about this error. travis is killing the tests. are we taking too long to finish the tests maybe? i was thinking that dropping 3.2 would be ok because i cant remember a case when the py 3.2 and 3.4 gave different results (unless errors due to random number stuff, which are not interesting..)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276#issuecomment-66583790:65,test,tests,65,https://qutip.org,https://github.com/qutip/qutip/pull/276#issuecomment-66583790,2,['test'],['tests']
Testability,"ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6855,test,tests,6855,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"olve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4586,test,testing,4586,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"olve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23815,Test,TestMESolveStepFuncCoeff,23815,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestMESolveStepFuncCoeff']
Testability,omebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/numpy/random; creating build/temp.macosx-11.0-arm64-3.9/numpy/random/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/random/src/distributions; compile options: '-Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; clang: numpy/random/src/distributions/distributions.c; clang: numpy/random/src/distributions/random_mvhg_marginals.c; clang: numpy/random/src/distributions/random_mvhg_count.c; clang: numpy/random/src/distributions/logfactorial.c; clang: numpy/random/src/distributions/random_hypergeometric.c; ar: adding 5 object files to build/temp.macosx-11.0-arm64-3.9/libnpyrandom.a; ranlib:@ build/temp.macosx-11.0-arm64-3.9/libnpyrandom.a; running build_ext; customize UnixCCompiler; customize UnixCCompiler using new_build_ext; building 'numpy.core._multiarray_tests' extension; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/common; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -Inumpy/core/include -Ibu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:59048,log,logfactorial,59048,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['log'],['logfactorial']
Testability,"on 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2741,test,tests,2741,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"on F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coef",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:4467,test,test,4467,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['test']
Testability,on aarch64 linux? same test passes on x64 linux and x64 / aarch64 darwin.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316#issuecomment-1927803355:23,test,test,23,https://qutip.org,https://github.com/qutip/qutip/issues/2316#issuecomment-1927803355,1,['test'],['test']
Testability,"on/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4216,test,test,4216,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,on/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30614,test,tests,30614,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"on/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framewo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14119,test,test,14119,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"on/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29815,test,tests,29815,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"on/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4994,test,test,4994,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"onstant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 4.37e+12); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4965,Test,Test,4965,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,"ootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23438,test,tests,23438,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"op; ; if c_.issuper:; - data = data + c_.data; + data += c_.data; else:; cd = c_.data.H; c = c_.data; if chi:; - data = data + np.exp(1j * chi[idx]) * \; + data += np.exp(1j * chi[idx]) * \; zcsr_kron(c.conj(), c); else:; - data = data + zcsr_kron(c.conj(), c); + data += zcsr_kron(c.conj(), c); cdc = cd * c; cdct = cdc.T; - data = data - 0.5 * zcsr_kron(spI, cdc); - data = data - 0.5 * zcsr_kron(cdct, spI); + data -= 0.5 * zcsr_kron(spI, cdc); + data -= 0.5 * zcsr_kron(cdct, spI); ; if not td:; if data_only:; diff --git a/qutip/tests/test_expect.py b/qutip/tests/test_expect.py; index 45568110..17491981 100644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:23193,assert,assert,23193,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['assert'],['assert']
Testability,"operator. I want to; > solve the dynamics of a 1D Hamiltonian which consists in two terms, the; > first one a displaced harmonic oscillator and the second one a cosine of; > the position operator.; > Before writing all the Hamiltonian I tried several examples with different; > potentials :; >; > 1. V(x) = 0.5*x**2 --> H_0 = num(dim)+0.5*qeye(dim) I found the good; > eigenvalues [0.5,1.5,2.5,....] no matter what was the dimension; > 2. V(x) = 0.5*(x-3)**2 --> H_1 = displace(dim,3)*H_0*(displace(dim,3).dag()); > I also found the same eigenvalues [0.5,1.5,2.5...] which seems normal; > because the HO is just shifted on the right of the x axis and its shape; > doesn't change.; >; > But when I tried V(x) = 0.5*(x-3)**2+x --> H_2 = H_1 + position(dim) with; > dim = 8 for example, I found the following eigenvalues :; > [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; > 7.35499586 8.06325407] .; > The problem is that the first eigenvalues have really decreased which; > seems not logical because with the x added, the potential should be; > slightly higher. I also use in parallel the PySlise package for Python; > which enables to solve Schödinger equation and finds eigenfunctions and; > eigenvalues and it gives me :; > [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it; > was giving the good results for 1) and 2)); > So I don't understant why qutip doesn't give me the same result, I know I; > use two different methods; qutip is just finding eigenvalues of a matrix; > and PySlise solve differential equations but when I don't use displacement; > operator both always give the same result. I tried to write the; > displacement operator my self with the create & destroy operators and the; > Glauber formula because I noticed that the commutation relations were not; > respected cause of the truncation but I didn't work.; >; > If anyone has any ideas I would be very grateful, I have already spent a; > lot of time looking and I am getting despe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597#issuecomment-873889697:1880,log,logical,1880,https://qutip.org,https://github.com/qutip/qutip/issues/1597#issuecomment-873889697,1,['log'],['logical']
Testability,"ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and 'manual' calculations. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.3; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.2; Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:1300,test,testcorr,1300,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['test'],['testcorr']
Testability,opying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31106,test,tests,31106,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/lib/shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35194,test,tests,35194,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40625,test,tests,40625,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42827,test,tests,42827,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,opying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/setup_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/c,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:13101,test,tests,13101,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,"or instance, if we start from the most excited state for N = 2,; >; > Here where you give an example you could use the; >; > Example; > -----------; >; > heading. It formats nicely in the docs; > see:; > http://qutip.org/docs/latest/apidoc/functions.html#quantum-states; > file qutip.states.py; > for example; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168800674>:; >; > > + -------; > + identity: Qobj matrix (QuTiP class); > + With the correct dimensions (dims); > + """"""; > + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:7462,test,tests,7462,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability,"or while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5977,test,tests,5977,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"or while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceba",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14077,test,tests,14077,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"or: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjPower; assert_equal(all(q3.data.todense() - matrix(data) *_ 3), 0); File ""/usr/lib/python2.7/dist-packages/numpy/testing/utils.py"", line 317, in assert_equal; raise AssertionError(msg); AssertionError: ; Items are not equal:; ACTUAL: True; DESIRED: 0. ---. Ran 221 tests in 256.712s. FAILED (SKIP=1, errors=1, failures=1)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:12182,test,test,12182,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,8,"['Assert', 'test']","['AssertionError', 'test', 'testing', 'tests']"
Testability,"or: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; qutip/tests/solver/test_integrator.py:20: in TestIntegratorCte; me_system = qutip.liouvillian(qutip.QobjEvo(qutip.qeye(2)),; qutip/core/superoperator.py:96: in liouvillian; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:96: in <genexpr>; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:169: in lindblad_dissipator; ad_b = a.dag() * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:2614,test,tests,2614,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,ore/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16389,test,tests,16389,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,orrelation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; 12.37s call test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; 11.43s call test_qobjevo.py::test_QobjEvo_mul_mat; 10.89s call test_spmath.py::test_csr_kron; 10.83s call test_qobjevo.py::test_QobjEvo_expect_psi; 9.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[QFT-Qobj propagation]; 9.40s call test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; 9.32s call test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; 8.74s call test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; 8.38s call test_qobjevo.py::test_QobjEvo_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dim,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:1839,Test,TestScattering,1839,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,2,"['Test', 'test']","['TestScattering', 'testScatteringProbability']"
Testability,"ort name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19166,test,testing,19166,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ort name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21874,test,testing,21874,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ort/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 name, traceback.format_exception_only(*sys.exc_info()[:2]))); 231 if sys.version_info[0] >= 3:; --> 232 raise exc.with_traceback(tb); 233 else:; 234 exec(""raise exc, None, tb"", {'exc': exc, 'tb': tb}). /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 module_name = name; 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path); 218 if is_package and not hasattr(mod, '__path__'):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 setup_args=sargs,; 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path; 194 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/pyximport/pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 100 try:; 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]; 104 if obj_build_ext.inplace:. /home/caidish1234/anaconda3/lib/python3.6/distutils/dist.py in run_commands(self); 953 """"""; 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 ; 957 # -- Methods that operate on its Commands --------------------------. /home/caidish1234/anaconda3/lib/python3.6/distutils/dist.py in run_command(self, command); 972 cmd_obj = self.get_command_obj(command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1; 976 . /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in run(self); 1",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:2896,assert,assert,2896,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['assert'],['assert']
Testability,"ortError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have v",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12251,test,tests,12251,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ortError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24865,test,tests,24865,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ortError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10151,test,testing,10151,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:4777,test,tests,4777,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting tests/test_qubit_evolution.py ________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_qubitcircuit.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qubits.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:31596,test,tests,31596,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:42026,test,tests,42026,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:42771,test,tests,42771,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:43516,test,tests,43516,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:7757,test,tests,7757,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:15207,test,tests,15207,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:41281,test,tests,41281,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_states.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:40537,test,tests,40537,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_tensor.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_three_level.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_utilities.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:46497,test,tests,46497,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_graph.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:14462,test,tests,14462,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"ort_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29735,test,tests,29735,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 349, in testMESimpleConstDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs1. ---. Ran 111 tests in 33.425s. FAILED (errors=3). I can reproduce this on 2 different systems (both 64 bit and 14.04).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:16036,test,test,16036,https://qutip.org,https://github.com/qutip/qutip/issues/126,4,['test'],"['test', 'testMESimpleConstDecayAsStrList', 'tests']"
Testability,osx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11276,test,tests,11276,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12928,test,tests,12928,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,osx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12837,test,tests,12837,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,osx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo_codegen.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/topology.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/settings.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/tomography.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/bloch3d.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/testing.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/pdpsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/essolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/matplotlib_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/logging_utils.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; copying qutip/partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip; creating build/lib.macosx-10.9-x86_64-3.7/qutip/ui; copying qutip/ui/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/ui; copying qutip/ui/progressbar.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/ui; creating build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:4765,test,testing,4765,https://qutip.org,https://github.com/qutip/qutip/issues/1404,1,['test'],['testing']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18016,test,tests,18016,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:20026,test,tests,20026,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19930,test,tests,19930,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17442,test,tests,17442,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ot import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23179,Test,TestTimeDependence,23179,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,"otFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_args, tol=5e-5). /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:322: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:223: in compare_evolution; out_s = sesolve(H, psi0, tlist, [sigmax(), sigmay(), sigmaz()],; /usr/lib/python3/dist-packages/qutip/sesolve.py:124: in sesolve; ss = _sesolve_QobjEvo(H, tlist, args, options); /usr/lib/python3/dist-packages/qutip/sesolve.py:155: in _sesolve_QobjEvo; H_td.compile(omp=nthread); /usr/lib/python3/dist-packages/qutip/qobjevo.py:1641: in compile; self.coeff_get, Code, file_ = _compiled_coeffs(; /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:94: in _compiled_coeffs; coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:20092,test,tests,20092,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"otstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'ru",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8177,test,tests,8177,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"otstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28851,test,tests,28851,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ould not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahme",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26268,test,tests,26268,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"p-0008/). >I did the `pycodestyle` on my code, but it is highlighting errors that were there in the original code. It returned lines that have >linespace errors and more, should I edit them too?; >Output:. > ```; > D:\qutip\qutip\core\cy>pycodestyle --first qobjevo.pyx; > qobjevo.pyx:1:1: E265 block comment should start with '# '; > qobjevo.pyx:2:80: E501 line too long (83 > 79 characters); > qobjevo.pyx:20:37: E211 whitespace before '('; > qobjevo.pyx:46:56: W605 invalid escape sequence '\s'; > qobjevo.pyx:190:30: E225 missing whitespace around operator; > qobjevo.pyx:423:5: E303 too many blank lines (2); > qobjevo.pyx:426:5: E301 expected 1 blank line, found 0; > qobjevo.pyx:451:34: E127 continuation line over-indented for visual indent; > qobjevo.pyx:572:21: E128 continuation line under-indented for visual indent; > qobjevo.pyx:987:39: E231 missing whitespace after ','; > qobjevo.pyx:989:20: E124 closing bracket does not match visual indentation; > ```. - [ ] Please add tests to cover your changes if applicable. > The issue was to add `__repr__` function to `QobjEvo` class. Do I need to add a test? If so, can someone help me with it?. - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure. > I am not sure in what bracket this issue falls. The issue was labeled as `ENH`. - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). > Related to the previous point. **Description**; Added `__repr__` to `QobjEvo`. It is showing the following attributes: `dims`, `shape`, `type`, `superop` (if a super operator is present), `isconstant` and `num_elements`. Output:; ```; >>> impo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111:1116,test,tests,1116,https://qutip.org,https://github.com/qutip/qutip/pull/2111,1,['test'],['tests']
Testability,"p.exp(1j * chi[idx]) * \; zcsr_kron(c.conj(), c); else:; - data = data + zcsr_kron(c.conj(), c); + data += zcsr_kron(c.conj(), c); cdc = cd * c; cdct = cdc.T; - data = data - 0.5 * zcsr_kron(spI, cdc); - data = data - 0.5 * zcsr_kron(cdct, spI); + data -= 0.5 * zcsr_kron(spI, cdc); + data -= 0.5 * zcsr_kron(cdct, spI); ; if not td:; if data_only:; diff --git a/qutip/tests/test_expect.py b/qutip/tests/test_expect.py; index 45568110..17491981 100644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break; return qutip.Qobj(flat.reshape(qobj.shape), dims=qobj.dims); ; @@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1,",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:23366,test,tests,23366,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"p.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] _________________________________________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:2197,test,testing,2197,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['testing']
Testability,p/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11799,test,tests,11799,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"p/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; __________________________________________ ERROR collecting qutip/tests/solver/test_mesolve.py ___________________________________________; qutip/tests/solver/test_mesolve.py:28: in <module>; class TestMESolveDecay:; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:4219,Test,TestMESolveDecay,4219,https://qutip.org,https://github.com/qutip/qutip/issues/2472,2,"['Test', 'test']","['TestMESolveDecay', 'tests']"
Testability,"p/pull/753#discussion_r168803599>:; >; > > +; > + if collective_emission != 0:; > + c_ops.append(np.sqrt(collective_emission) * jm); > +; > + if collective_dephasing != 0:; > + c_ops.append(np.sqrt(collective_dephasing) * jz); > +; > + if collective_pumping != 0:; > + c_ops.append(np.sqrt(collective_pumping) * jp); > +; > + return c_ops; > +; > +# ============================================================================; > +# State definitions in the Dicke basis with an option for basis transformation; > +# ============================================================================; > +def dicke_basis(N, jmm1 = None, basis = ""dicke""):; >; > pep8: no spaces in kwargs jmm1 = None should be jmm1=None.; > There are lots of examples in this file. I'll not mark them all; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168803988>:; >; > > + assert_equal(d3, d3_correct); > + assert_equal(d4, d4_correct); > +; > + def test_lindbladian(self):; > + """"""; > + Test the generation of the Lindbladian matrix; > + """"""; > + N = 1; > + gCE = 0.5; > + gCD = 0.5; > + gCP = 0.5; > + gE = 0.1; > + gD = 0.1; > + gP = 0.1; > +; > + system = Piqs(N = N, emission = gE, pumping = gP, dephasing = gD,; >; > spaces in kwargs. Quite a few other examples too, which I will not mark; > all of them; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168804323>:; >; > > @@ -0,0 +1,645 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168807920>:; >; > > + The number of two level systems; > + Returns; > + -------; > + nds: int; > + The number of Dicke states; > + """"""; > + if (not float(N).is_integer()):; > + raise ValueError(""Number of TLS shou",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:10017,Test,Test,10017,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['Test'],['Test']
Testability,"p/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/step",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4107,test,tests,4107,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:4390,test,test-environment,4390,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_entropy.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:8860,test,test-environment,8860,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:22270,test,test-environment,22270,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_partial_transpose.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_piqs.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:23760,test,test-environment,23760,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting tests/test_qubit_evolution.py ________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_qubitcircuit.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:31210,test,test-environment,31210,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:2155,test,test-environment,2155,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_qubitcircuit.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qubits.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:31955,test,test-environment,31955,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:41640,test,test-environment,41640,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:42385,test,test-environment,42385,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:43130,test,test-environment,43130,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:43875,test,test-environment,43875,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:5135,test,test-environment,5135,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:6625,test,test-environment,6625,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:7370,test,test-environment,7370,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:8115,test,test-environment,8115,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_fastsparse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_fileio.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:11095,test,test-environment,11095,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:14820,test,test-environment,14820,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:15565,test,test-environment,15565,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_propagator.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_ptrace.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:25995,test,test-environment,25995,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:35680,test,test-environment,35680,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:40895,test,test-environment,40895,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_td_formats.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_tensor.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:45365,test,test-environment,45365,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_three_level.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_utilities.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:46855,test,test-environment,46855,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:3645,test,test-environment,3645,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:5880,test,test-environment,5880,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:21525,test,test-environment,21525,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_partial_transpose.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:23015,test,test-environment,23015,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_processor.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_propagator.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:25250,test,test-environment,25250,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:34935,test,test-environment,34935,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_spinchain.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_spmath.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:38660,test,test-environment,38660,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_td_formats.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:44620,test,test-environment,44620,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_utilities.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_wigner.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:47600,test,test-environment,47600,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:2900,test,test-environment,2900,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_entropy.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_expect.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:9605,test,test-environment,9605,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_expect.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_fastsparse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:10350,test,test-environment,10350,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_fileio.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_floquet.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:11840,test,test-environment,11840,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_floquet.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_gates.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:12585,test,test-environment,12585,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:16310,test,test-environment,16310,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:17055,test,test-environment,17055,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_metrics.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:17800,test,test-environment,17800,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_metrics.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_mkl.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:18545,test,test-environment,18545,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:20780,test,test-environment,20780,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_ptrace.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_pulse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:26740,test,test-environment,26740,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qobjevo.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qpt.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:29720,test,test-environment,29720,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qubits.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_rand.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:32700,test,test-environment,32700,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:34190,test,test-environment,34190,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:36425,test,test-environment,36425,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:37170,test,test-environment,37170,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_spinchain.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:37915,test,test-environment,37915,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_spmath.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_states.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:39405,test,test-environment,39405,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_states.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:40150,test,test-environment,40150,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_tensor.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_three_level.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:46110,test,test-environment,46110,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_wigner.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ---------- coverage: platform linux, python 3.6.10-final-0 -----------; Name Stmts Miss Cover; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:48345,test,test-environment,48345,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_gates.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_graph.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:13330,test,test-environment,13330,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_graph.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:14075,test,test-environment,14075,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_noise.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:20035,test,test-environment,20035,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_piqs.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_processor.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:24505,test,test-environment,24505,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_pulse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qft.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:27485,test,test-environment,27485,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qobjevo.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:28975,test,test-environment,28975,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_rand.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:33445,test,test-environment,33445,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_mkl.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_noise.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:19290,test,test-environment,19290,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qft.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:28230,test,test-environment,28230,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qpt.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting tests/test_qubit_evolution.py ________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:30465,test,test-environment,30465,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_ses",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17585,test,test,17585,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tens",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25692,test,test,25692,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"pagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/gugl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11762,test,testing,11762,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:171: in <module>; from qutip.qobj import *; qutip/qobj.py:60: in <module>; from qutip.fastsparse import fast_csr_matrix, fast_identity; qutip/fastsparse.py:406: in <module>; from qutip.cy.spmath import (zcsr_transpose, zcsr_adjoint, zcsr_mult); qutip/cy/__init__.py:1: in <module>; from qutip.cy.spmatfuncs import *; stringsource:105: in init qutip.cy.spmatfuncs; ???; E AttributeError: type object 'qutip.cy.spmatfuncs.array' has no attribute '__reduce_cython__'; ________________ ERROR collecting qutip/tests/test_brmesolve.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_brmesolve_td.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_brtools.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:1634,test,tests,1634,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"pe[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Versi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16897,test,tests,16897,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,"perator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]]).norm. qutip/tests/test_superop_reps.py:115: AssertionError; ============================================================= warnings summary ==============================================================; ../anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51; /home/felipe/anaconda3/envs/extratests/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses; import imp. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================== short test summary info ==========================================================; FAILED qutip/tests/test_superop_reps.py::TestSuperopReps::test_SuperChoiChiSuper[8] - assert 313.53468707624677 < 1e-05; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:3363,test,tests,3363,https://qutip.org,https://github.com/qutip/qutip/issues/1495,6,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'TestSuperopReps', 'assert', 'test', 'tests']"
Testability,"perators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:1148,test,testcorrM,1148,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['test'],['testcorrM']
Testability,"platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5566,Test,TestTimeDependence,5566,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestTimeDependence', 'tests']"
Testability,"pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1441,test,tests,1441,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"port(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13537,test,tests,13537,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"portError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12803,test,testing,12803,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_entropy.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_expect.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:9249,test,tests,9249,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_partial_transpose.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:22658,test,tests,22658,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:2544,test,tests,2544,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_td_formats.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:44263,test,tests,44263,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:5523,test,tests,5523,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:7012,test,tests,7012,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:15954,test,tests,15954,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:36069,test,tests,36069,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_three_level.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_utilities.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_wigner.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:47243,test,tests,47243,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:6267,test,tests,6267,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_processor.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_propagator.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_ptrace.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:25637,test,tests,25637,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:35322,test,tests,35322,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_td_formats.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_tensor.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:45007,test,tests,45007,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:3288,test,tests,3288,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_expect.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_fastsparse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_fileio.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:10737,test,tests,10737,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_fileio.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_floquet.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_gates.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:12229,test,tests,12229,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:16699,test,tests,16699,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_metrics.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:17444,test,tests,17444,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_metrics.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_mkl.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:18189,test,tests,18189,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:21168,test,tests,21168,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:34578,test,tests,34578,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:36814,test,tests,36814,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_spinchain.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_spmath.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:38303,test,tests,38303,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_piqs.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_processor.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_propagator.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:24893,test,tests,24893,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"port__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qobjevo.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qpt.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTH",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:29364,test,tests,29364,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"portable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; =====================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26974,Test,Tests,26974,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['Tests']
Testability,"precate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a>; [gofr, radarhere]</p>; </li>; <li>; <p>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:7642,test,test,7642,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['test'],['test']
Testability,"precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up and call as opposed to just call), but it encapsulates the state.; ```python; >>> qfunc_calculator = qutip.QFunc(xs, xs); >>> husimiqs = [qfunc_calculator(state) for state in states]; ```; This is much much faster. The class version `QFunc` also takes a memory option, but since this is designed to be the precompute version, it errors out if the amount of memory needed is too great, rather than trying to fall back. This gives users a way to put a limit on the amount of memory used:; ```python; >>> qfunc_calculator_low_memory = qutip.QFunc(xs, xs, memory=0); >>> qfunc_calculator_low_memory(states[0]); MemoryError: Refusing to precompute up to 32 basis states. This would require 78.52 MB, but only 0 MB is allowed.; ```. ## Timings. These benchmarks were taken on a Macbook Pro 2.9GHz i5 (2015) with 8GB of RAM. The different tests had different numbers of phase-space coordinates (the first number in the first column) in each dimension, and the number after 'ket' or 'dm' is the Hilbert space dimension. The columns are:. - `original`: The state of the code before this and the previous commit; - `prev def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for #934; - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calculation of `pre` was done outside the timing. This times how long it would take to call in a loop many times.; - `cur def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for this commit.; - `cur pre`: Calls to a pre-constructed `qutip.QFunc` instance (which was excluded from the timings) for this commit. This times how long it would take to call in a loop many times. ```text;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:3221,benchmark,benchmarks,3221,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['benchmark'],['benchmarks']
Testability,"previous core contributors, are listed on the QuTiP website (at qutip.org/devs), governance (github.com/qutip/governance) and documentation. **<span style=""text-decoration:underline;"">Decisions</span>**; Each admin team member has a vote in decisions. As much as possible, admins try to take in feedback on changes from the wider community and timely communicate major changes in the software. . **<span style=""text-decoration:underline;"">Communications</span>**; The admin team agrees to keep in touch regularly, through the qutip-admin channel or chosed communication medium, through the repositories’ maintenance, and with regular virtual or in-person meetings. The admin team drafts a report, [once] a year and submits it to the Board to inform it of developments on the project. ### 3. Board; **Members of the Board make sure that the Admin Team and project is well supported financially and logistically.** Thanks to them helping enable the financial and logistics support, through scientific advisory and by keeping an eye on the project, they make the life of the admin team easier. . **<span style=""text-decoration:underline;"">Tasks</span>**; Board members are volunteers that pledge to:. - Meet** [once] **a year to review the development of the project (also online).; - Be consulted for scientific advice by the admins. ; - Help settle conflicts or roadblocks that may arise on the project development. ; - Help review student applications of interns that may volunteer or work on the QuTiP project.; - Try to provide funding for QuTiP development and maintenance.; - Become ambassadors for scientific open source in general and QuTiP in particular.; - Take formal decisions to allocate eventual funds, upon recommendation of the Admin Team. . **<span style=""text-decoration:underline;"">Composition</span>**; Initial board members are invited by the admin team, based on their track-record in supporting the project and future helping it grow. The admins elect new board members, in agree",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:10621,log,logistics,10621,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['log'],['logistics']
Testability,"processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2714,test,test,2714,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['test']
Testability,processor plot tests succeed but return error,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1703:1630,test,tests,1630,https://qutip.org,https://github.com/qutip/qutip/issues/1703,8,['test'],"['test', 'tests']"
Testability,"psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3679,test,tests,3679,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"ptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. At the present state, `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. The eigenstate fix in #1820 is already merged since it would create `Qobj` which dims and shape did not match. ToDo:. - [x] Tensor using dimension directly instead of list.; - [x] QobjEvo.dims use dimension object.; - [x] state and operator accept dimension.; - [ ] Super operator representation.; - [ ] Ptrace, partial_transpose and permute use dimension object (supported with enr states).; - [ ] Flags / new types for rectangular operator?; - [ ] List dimension manipulation function in dimension.py should support the class/ be integrated in it / removed. **Related issues or PRs**; #1476. **Changelog**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1826:2256,test,test,2256,https://qutip.org,https://github.com/qutip/qutip/pull/1826,1,['test'],['test']
Testability,"py"", line 2026; E """"""; E Checks whether qobj is a valid density matrix; E """"""; E ; E ; E ^; E IndentationError: expected an indented block; ___________________ ERROR collecting tests/test_brmesolve.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:1870,test,test-environment,1870,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test mo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22895,test,tests,22895,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportEr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5807,test,tests,5807,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27404,test,tests,27404,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test mo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4910,test,tests,4910,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,py/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30544,test,tests,30544,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,py/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43613,test,tests,43613,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"py/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14790,test,tests,14790,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests should probably be skipped if there is a dependency missing? (Just like they already are if cython is missing.) ; I",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:8119,test,test,8119,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability,py3.6 tests run without cvxopt,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2215:6,test,tests,6,https://qutip.org,https://github.com/qutip/qutip/pull/2215,1,['test'],['tests']
Testability,"py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/gug",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12661,test,testing,12661,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7000,test,tests,7000,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,py::TestMESolveSuperInit::testMETDDecayAsStrList; 17.73s call test_qobjevo.py::test_QobjEvo_expect_rho; 16.52s call test_stochastic_me.py::test_smesolve_homodyne; 15.79s call test_qobjevo.py::test_QobjEvo_call; 12.67s call test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; 12.37s call test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; 11.43s call test_qobjevo.py::test_QobjEvo_mul_mat; 10.89s call test_spmath.py::test_csr_kron; 10.83s call test_qobjevo.py::test_QobjEvo_expect_psi; 9.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[QFT-Qobj propagation]; 9.40s call test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; 9.32s call test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; 8.74s call test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; 8.38s call test_qobjevo.py::test_QobjEvo_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:1609,Test,TestMESolveTDDecay,1609,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,2,"['Test', 'test']","['TestMESolveTDDecay', 'testMETDDecayAsStrList']"
Testability,"py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(0, 10, 100); kappa = 0.2; exact = 9 * np.exp(-2 * kappa * (1 - np.exp(-times))); a_o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7787,Test,TestSESolve,7787,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestSESolve', 'tests']"
Testability,"py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singular(5); q = Qobj(data); randN = 10 * np.random.random(); - q = q / randN; + q /= randN; assert np.allclose(q.full(), data / randN); ; ; diff --git a/qutip/visualization.py b/qutip/visualization.py; index 47f40fc1..21ef765e 100644; --- a/qutip/visualization.py; +++ b/qutip/visualization.py; @@ -416,7 +416,7 @@ def _stick_to_planes(stick, azim, ax, M, spacing):; Stick to xz and yz planes; """"""; if stick is True:; - azim = azim % 360; + azim %= 360; if 0 <= azim <= 90:; ax.set_ylim(1 - .5,); ax.set_xlim(1 - .5,); @@ -879,7 +879,7 @@ def plot_energy_levels(H_list, N=0, labels=Non",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:26284,test,tests,26284,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,pying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:41053,test,tests,41053,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,pying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11882,test,tests,11882,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2788,test,testing,2788,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26588,test,test,26588,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/spmath.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/heom.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/math.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/libc/math.pxd.; Compiling qutip/cy/spconvert.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/ptrace.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/cy/testing.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; Compiling qutip/control/cy_grape.pyx because it depends on /home/kilian/qutip/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd.; [ 1/12] Cythonizing qutip/control/cy_grape.pyx; [ 2/12] Cythonizing qutip/cy/graph_utils.pyx; [ 3/12] Cythonizing qutip/cy/heom.pyx; [ 4/12] Cythonizing qutip/cy/interpolate.pyx; [ 5/12] Cythonizing qutip/cy/math.pyx; [ 6/12] Cythonizing qutip/cy/ptrace.pyx; [ 7/12] Cythonizing qutip/cy/sparse_utils.pyx; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/state/partition1/local-scratch/kilian/16342884/pip-build-7c5rN_/qutip/setup.py"", line 216, in <module>; ext_modules = cythonize(EXT_MODULES),; File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1016, in cythonize; cythonize_one(*args); File ""/home/kilian/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1138, in cythonize_one; raise CompileError(None, pyx_file); Cython.Compiler.Errors.CompileError: qutip/cy/sparse_utils.pyx; ```. Tested with:; * Cython 0.26; * numpy 1.13.1; * gcc 4.9.1. Any recommendation on how to fix this? . Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723:3924,Test,Tested,3924,https://qutip.org,https://github.com/qutip/qutip/issues/723,1,['Test'],['Tested']
Testability,"pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_457496861",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24355,test,tests,24355,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"qual; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3807,test,testing,3807,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,qutip 4.5.0 tests fail when scipy 1.5.0 (released 8 days ago) is used,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1304:12,test,tests,12,https://qutip.org,https://github.com/qutip/qutip/issues/1304,1,['test'],['tests']
Testability,qutip 4.7.3 QobjEvo test failures on Python 3.12,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:20,test,test,20,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['test']
Testability,qutip testing on ubuntu 14.04: 3 errors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['testing']
Testability,"qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic os",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2018,log,logger,2018,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,qutip-doc/guide/scripts/floquet_ex3.py raises an exception in `floquet_master_equation_tensor`; ```; TypeError: Qobj data must be in fast_csr format.; ```; This should have been picked up by a test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/624:193,test,test,193,https://qutip.org,https://github.com/qutip/qutip/issues/624,1,['test'],['test']
Testability,qutip.testing broken after installing with f90 solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/46:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/46,1,['test'],['testing']
Testability,qutip.testing.run() NameErrors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1158:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/1158,1,['test'],['testing']
Testability,qutip.testing.run() failed,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2245:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/2245,1,['test'],['testing']
Testability,qutip.testing.run() failed on test testPropHOSteadyPar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/1711,3,['test'],"['test', 'testPropHOSteadyPar', 'testing']"
Testability,"qutip.testing.run() returns ""Ran 0 tests in 0.000s \ OK"" after installing QuTip 2.2.0 with f90 solver on OSX 10.8. This was reproducible on two macs. Before installing with fortran solver the QuTip installation and testing function normally. After installation with fortran solver the testing returns the above message. The installation seems to be fine though: mcsolve_f90 ran successfully in my simulation, and QuTip examples appear to work normally. To get fortran to compile I installed Xcode developer tools, and gfortran for OSX Mountain Lion from HPC following instructions from http://web.mit.edu/mfloyd/www/computing/mac/gfortran/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/46:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/issues/46,4,['test'],"['testing', 'tests']"
Testability,"r convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2288,log,logger,2288,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"r us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1156,test,tests,1156,https://qutip.org,https://github.com/qutip/qutip/pull/1551,2,['test'],"['testing', 'tests']"
Testability,"r while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8708,test,tests,8708,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,r.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11447,test,tests,11447,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,r/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/g95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcom,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26473,test,tests,26473,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"r/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% ███",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3873,test,tests,3873,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"r: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjPower; assert_equal(all(q3.data.todense() - matrix(data) *_ 3), 0); File """,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11699,test,test,11699,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['test']
Testability,"rallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8236,test,testing,8236,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"rallel_map and mpi_pmap are basically the same, except that the `multiprocessing.ProcessPoolExecutor` gets replaced by the `mpi4py.MPIPoolExecutor`, and we allow users to provide arbitrary keyword arguments to be passed on to the MPIPoolExecutor. **Detailed list of changes**; * Added `mpi_pmap`. Extracted the common functionality of parallel_map, loky_pmap and mpi_pmap into a `_generic_pmap` function. The behavior of parallel_map and loky_pmap should be unchanged (except for a tiny change in loky_pmap regarding the order in which reduce_func is called).; * Added a section showcasing QuTiP's MPI capabilities in the tutorial notebook ""Non-Markovian Monte Carlo Solver"", see [PR 78](https://github.com/qutip/qutip-tutorials/pull/78) in qutip-tutorials.; * Added `mpi_options` to the options of MultiTrajSolver and all its subclasses. This option only takes effect if the 'map' option is set to 'mpi', in which case the mpi_options are added to the map_kwargs.; * For MultiTrajSolver, all its subclasses and corresponding XXsolve functions, I double-checked that the descriptions of the options in the docstrings correspond to the `solver_options`. That is, I did not touch the solver options except for adding 'mpi_options', but I edited the docstrings in some places in order to reflect the actually available solver options.; * While creating the new section in the tutorial notebook, I noticed some bugs in `MultiTrajResult#__add__` and fixed them.; * Added tests. Tests are skipped if the mpi4py module is not available (like with loky_pmap and the loky module). **Todo**; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information).; - [x] Finish qutip-tutorials PR. **Related issues or PRs**; Continuing work started in [2280](https://github.com/qutip/qutip/pull/2280)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296:1793,test,tests,1793,https://qutip.org,https://github.com/qutip/qutip/pull/2296,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"rap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportEr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18038,test,tests,18038,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26145,test,tests,26145,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,rary/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30295,test,tests,30295,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,rary/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30374,test,tests,30374,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rary/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22213,test,test,22213,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"rator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Checks that mul and tensor of skew-Hermitian operators report `isherm = True`. ... ok; > > > Tensor: Checks that super_tensor correctly tensors on underlying spaces. ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... ok; > > > Steady state: Thermal harmonic oscillator ... ok; > > > Steady state: Driven cavity ... ok; > > > Stochastic: smesolve: photo-current ... ok; > > > Stochastic: smesolve: homodyne ... ok; > > > Stochastic: smesolve: heterodyne ... ok; > > > Stochastic: ssesolve: photo-current ... ; > > > ok; > > > Stochastic: ssesolve: homodyne ... ok; > > > Stochastic: ssesolve: heterodyne ... ok; > > > Composite system, operator on Hilbert s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:8973,Test,Test,8973,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['Test'],['Test']
Testability,"ravis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/qobj.py"", line 2026; E """"""; E Checks whether qobj is a valid density matrix; E """"""; E ; E ; E ^; E IndentationError: expected an indented block; ___________________ ERROR collecting tests/test_brmesolve.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:1796,test,tests,1796,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,raypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35758,test,tests,35758,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"rcsolve.py b/qutip/rcsolve.py; index 4d537648..6af6cd1b 100644; --- a/qutip/rcsolve.py; +++ b/qutip/rcsolve.py; @@ -104,12 +104,11 @@ def rcsolve(Hsys, psi0, tlist, e_ops, Q, wc, alpha, N, w_th, sparse=False,; (2 * w_th)))) * A); eta = (0.5 * np.pi * gamma *; (all_energy[j] - all_energy[k]) * A); - PsipreX = PsipreX + X * all_state[j] * all_state[k].dag(); - PsipreEta = PsipreEta + (eta * all_state[j]; - * all_state[k].dag()); + PsipreX += X * all_state[j] * all_state[k].dag(); + PsipreEta += eta * all_state[j] * all_state[k].dag(); else:; X = 0.5 * np.pi * gamma * A * 2 * w_th; - PsipreX = PsipreX + X * all_state[j] * all_state[k].dag(); + PsipreX += X * all_state[j] * all_state[k].dag(); ; A = a + a.dag(); L = ((-spre(A * PsipreX)) + (sprepost(A, PsipreX)); diff --git a/qutip/states.py b/qutip/states.py; index 10ac9e32..075eb777 100644; --- a/qutip/states.py; +++ b/qutip/states.py; @@ -405,7 +405,7 @@ shape = [5, 5], type = oper, isHerm = True; if method == 'operator':; beta = np.log(1.0 / n + 1.0); diags = np.exp(-beta * i); - diags = diags / np.sum(diags); + diags /= np.sum(diags); # populates diagonal terms using truncated operator expression; rm = sp.spdiags(diags, 0, N, N, format='csr'); elif method == 'analytic':; diff --git a/qutip/steadystate.py b/qutip/steadystate.py; index 1f60f942..680b04c7 100644; --- a/qutip/steadystate.py; +++ b/qutip/steadystate.py; @@ -873,7 +873,7 @@ def _steadystate_power(L, ss_args):; check)); if check < 0:; raise Exception(""Breakdown in {}"".format(ss_args['method'])); - v = v / la.norm(v, np.inf); + v /= la.norm(v, np.inf); it += 1; if ss_args['method'] == 'power' and ss_args['solver'] == 'mkl':; lu.delete(); @@ -901,7 +901,7 @@ def _steadystate_power(L, ss_args):; trow = v[::rhoss.shape[0]+1]; data = v / np.sum(trow); else:; - data = data / la.norm(v); + data /= la.norm(v); ; data = dense2D_to_fastcsr_fmode(vec2mat(data),; rhoss.shape[0],; diff --git a/qutip/stochastic.py b/qutip/stochastic.py; index 49786aca..b9866527 100644;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:19468,log,log,19468,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['log'],['log']
Testability,re latest commit: I have tested some but not all of the `StochasticSolverOptions.__init__()` checking exceptions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547310886:25,test,tested,25,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547310886,1,['test'],['tested']
Testability,"regarding porting it directly into qutip, and we agreed it would be a good addition as a separate solver. There are a couple of we-believe-good reasons to provide <code>krylovsolve</code> as another qutip solver. As you mention, the method is currently limited to constant closed system Hamiltonians. Another possible addition discussed during the meetings was support for open quantum systems, which provides another unitary-fund grant opportunity for some students!. Another important application for many-body systems comes in handy with Krylov. Given the memory limitations from matrix representation of operators and the exponential growth of many-body systems Hilbert spaces, the limit of qubits on which the solvers live is around 15 qubits. This limitation gets expanded (in exchange for some slow down in the computations) to a few more qubits exploiting the binary operational nature of many-body systems. While any solver could use operations instead of matrices, it is a good testing bead to use Krylov's algorithm because of a property when constructing this space. This feature is a must-have within our research group, and everyone could also benefit from it. More importantly, Krylov is gaining increasing interest in the research community, and we believe that providing it as a qutip solver will increase the traffic of the repository. Regarding benchmarks and some documentation, we have a public jupyter notebook with some benchmarks here [krylov use examples](https://colab.research.google.com/drive/1f7ng8q9QNEzaZ97vGop3aIip8GPtl3GR?usp=sharing), and there's also a [medium blog post](https://medium.com/@julian.ruffinelli/krylov-approximation-method-for-quantum-evolution-148b3f023ec4) with some other details. As for maintenance, yes, the way this code-block fits in should not be problematic to update even with qutip changes. We use <code>krylovsolve</code> for research and will keep the solver repo outside qutip up to date and (hopefully!) inside of it for the community.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668#issuecomment-926236528:1488,benchmark,benchmarks,1488,https://qutip.org,https://github.com/qutip/qutip/issues/1668#issuecomment-926236528,2,['benchmark'],['benchmarks']
Testability,remove py 3.2 from travis testing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/289:26,test,testing,26,https://qutip.org,https://github.com/qutip/qutip/pull/289,1,['test'],['testing']
Testability,remove the benchmark directory from the main qutip repository,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/217:11,benchmark,benchmark,11,https://qutip.org,https://github.com/qutip/qutip/pull/217,1,['benchmark'],['benchmark']
Testability,"rent():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.001121",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:1334,assert,assert,1334,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['assert'],['assert']
Testability,"rer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does /not/ depend on the truncation ; > parameter. Specifically, the upper-left portion of the matrix that ; > |qutip.squeeze| outputs converges to my |squeeze| function for large |n|.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661>, or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqdPPw6WOAYMpYw_kA9pRxVhgVyxIks5rlYF9gaJpZM4MbmLX>.; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284316:1689,log,log,1689,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284316,2,['log'],['log']
Testability,"reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18091,test,testing,18091,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,rhs module load error - testing on Windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/728:24,test,testing,24,https://qutip.org,https://github.com/qutip/qutip/issues/728,1,['test'],['testing']
Testability,rivate/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46323,test,tests,46323,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"rker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:1738,test,tests,1738,https://qutip.org,https://github.com/qutip/qutip/issues/1711,1,['test'],['tests']
Testability,rm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31890,test,tests,31890,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,rm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/p,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40839,test,tests,40839,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"rmat) ... ok; correlation: comparing TLS emission corr., H td (fn td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (str-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6462,test,tests,6462,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"rn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22536,test,tests,22536,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rn qutip.Qobj(flat.reshape(qobj.shape), dims=qobj.dims); ; @@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25227,test,tests,25227,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"rojection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:1764,assert,assert,1764,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['assert'],['assert']
Testability,"rom "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23005,test,tests,23005,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"rom <a href=""https://github.com/urllib3/urllib3/blob/1.26.19/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.19 (2024-06-17)</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; <li>Fixed handling of OpenSSL 3.2.0 new error message for misconfiguring an HTTP proxy as HTTPS. (<code>[#3405](https://github.com/urllib3/urllib3/issues/3405) &lt;https://github.com/urllib3/urllib3/issues/3405&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d9d85c88aa644af56d5e129634e750ce76e1a765""><code>d9d85c8</code></a> Release 1.26.19</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/8528b63b6fe5cfd7b21942cf988670de68fcd8c0""><code>8528b63</code></a> [1.26] Fix downstream tests (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3409"">#3409</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468""><code>40b6d16</code></a> Merge pull request from GHSA-34jh-p97f-mpxf</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/29cfd02f66376c61bd20f1725477925106321f68""><code>29cfd02</code></a> Fix handling of OpenSSL 3.2.0 new error message &quot;record layer failure&quot; (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3405"">#3405</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b60064388302f54a3455259ddab121618650a154""><code>b600643</code></a> [1.26] Bump RECENT_DATE (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3404"">#3404</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/7e2d3890926d4788e219f63e2e36fbeb8714827f""><code>7e2d389</code></a> [1.26] Fix running CPython 2.7 tests in CI (<a href=""https://redirect.github.com/urllib3/urllib3/issues/31",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:2587,test,tests,2587,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['test'],['tests']
Testability,"rop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:2080,Assert,Assert,2080,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['Assert'],['Assert']
Testability,"ror while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python name",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4172,test,tests,4172,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"roxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:1891,test,testing,1891,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['test'],['testing']
Testability,"rror while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python nam",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23063,test,tests,23063,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rs.py:387: in sigmax; return _SIGMAX.to(dtype, True); qutip/core/qobj.py:395: in to; _data.to(data_type, self._data),; qutip/core/data/convert.pyx:395: in qutip.core.data.convert._to.__call__; return self._convert[to_type, from_type](data); qutip/core/data/convert.pyx:101: in qutip.core.data.convert._converter.__call__; arg = self.functions[i](arg); qutip/core/data/dia.pyx:341: in qutip.core.data.dia.from_csr; cpdef Dia from_csr(CSR matrix):; qutip/core/data/dia.pyx:353: in qutip.core.data.dia.from_csr; return Dia((data, diags), shape=matrix.shape, copy=False); qutip/core/data/dia.pyx:134: in qutip.core.data.dia.Dia.__init__; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; q",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:1788,test,tests,1788,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,"rsally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory her",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1501,test,tests,1501,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['tests']
Testability,"rtError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5075,test,tests,5075,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"rt_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19088,test,testing,19088,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"rt__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_entropy.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:8498,test,tests,8498,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"rt__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:4028,test,tests,4028,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"rt__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:21909,test,tests,21909,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"rt__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_partial_transpose.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_piqs.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:23399,test,tests,23399,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"rt__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qpt.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting tests/test_qubit_evolution.py ________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_qubitcircuit.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:30850,test,tests,30850,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"rt_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001704, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); /nix/store/dz8lm4h0ivibad5kfc0ya3p3zqyd2fyf-python3-3.11.7/lib/python3.11/contextlib.py:81: AssertionError; =========================== short test summary info ============================; FAILED ../tests/test_countstat.py::test_dqd_current - AssertionError:; ```. ### Expected Behaviour. unit test succeeds. ### Your Environment. ```shell; QuTiP Version: 4.7.5; Numpy Version: 1.26.2; Scipy Version: 1.12.0; Cython Version: 0.29.36; Matplotlib Version: 3.8.2; Python Version: 3.11.7; Number of CPUs: 80; BLAS Info: Generic; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (aarch64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:3328,Assert,AssertionError,3328,https://qutip.org,https://github.com/qutip/qutip/issues/2316,5,"['Assert', 'test']","['AssertionError', 'test', 'tests']"
Testability,"rtmode); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:176: in <module>; from qutip.qobj import *; E File ""/home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/qobj.py"", line 2026; E """"""; E Checks whether qobj is a valid density matrix; E """"""; E ; E ; E ^; E IndentationError: expected an indented block; ___________________ ERROR collecting tests/test_brmesolve.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:1410,test,test-environment,1410,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,run unit tests for stochastic module with multiproceesing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/266:9,test,tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/266,1,['test'],['tests']
Testability,"run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24578,test,testing,24578,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ry ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Checks that mul and tensor of skew-Hermitian operators report `isherm = True`. ... ok; > > > Tensor: Checks that super_tensor correctly tensors on underlying spaces. ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... ok; > > > Steady state: Thermal harmonic oscillator ... ok; > > > Steady state: Driven cavity ... ok; > > > Stochastic: smesolve: photo-current ... ok; > > > Stochastic: smesolve: homodyne ... ok; > > > Stochastic: smesolve: heterodyne ... ok; > > > Stochastic: ssesolve: photo-current ... ; > > > ok; > > > Stochastic: ssesolve: homodyne ... ok; > > > Stochastic: ssesolve: heterodyne ...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:8922,Test,Test,8922,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['Test'],['Test']
Testability,ry/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_format,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30449,test,tests,30449,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,ry/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 30 errors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30777,test,tests,30777,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"s profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1512,test,tests,1512,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"s to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.00s; Total run time: 1.26s; Total run time: 1.49s; {'solver': 'milstein'}; Total run time: 0.31s; Total run time: 0.39s; Total run time: 0.46s; Total run time: 0.56s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.05s; Total run time: 1.24s; {'solver': 'milstein-imp'}; Total run time: 1.69s; Total run time: 2.10s; Total run time: 2.48s; Total run time: 2.96s; Total run time: 3.62s; Total run tim",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1684,benchmark,benchmarking,1684,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['benchmark'],['benchmarking']
Testability,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:3827,test,testing,3827,https://qutip.org,https://github.com/qutip/qutip/pull/1429,2,['test'],['testing']
Testability,s.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30728,test,tests,30728,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"s.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20773,test,testing,20773,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"s/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions __________________________________________________________________________. @pytest.mark.requires_cython; def test_CoeffOptions():; f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:3433,test,test,3433,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability,"s/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3683,test,testing,3683,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"s; base = ""1 + 1. + 1j""; options = []; options.append(CompilationOptions(accept_int=True)); options.append(CompilationOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False)); coeffs = [coefficient(base, compile_opt=opt) for opt in options]; for coeff in coeffs:; assert coeff(0) == 2+1j; for coeff1, coeff2 in combinations(coeffs, 2):; > assert not isinstance(coeff1, coeff2.__class__); E AssertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ??",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:5467,test,tests,5467,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,s; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45194,test,testing,45194,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"scipy deals with some slow tests by decorating them using `@slow` from `numpy.testing.decorators` and then using something like `nosetests` for testing. So TravisCI by default will not run the slow tests, but you can manually override this option if you want to run them locally. Also TravisCI will tolerate quite slow tests up to maybe 50min total (build+test).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/77#issuecomment-35959405:27,test,tests,27,https://qutip.org,https://github.com/qutip/qutip/issues/77#issuecomment-35959405,6,['test'],"['test', 'testing', 'tests']"
Testability,"se TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-sin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3328,test,tests,3328,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"se, args, args_ctypes, compile_opt, **_); 385 code = make_cy_code(parsed, variables, constants,; 386 raw, compile_opt); 387 try:; --> 388 coeff = compile_code(code, file_name, parsed, compile_opt); 389 except PermissionError:; 390 pass. File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ==================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:3186,test,tests,3186,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,segmentation fault running testing environment,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:27,test,testing,27,https://qutip.org,https://github.com/qutip/qutip/issues/1124,1,['test'],['testing']
Testability,"selected by default.; 3. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32; [build_ext]; compiler = mingw32; The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above.; 4. Obtain the QuTiP source code and installed it following the instructions given above. However, there are some errors after i run the installation verifying process. Is there anyone came across such errors? How can I repair these errors? The errors are presented as follow:; ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 60, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:1385,test,test,1385,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability,seoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[QFT-Qobj propagation]; 2.65s call test_control_pulseoptim.py::TestOptimization::test_crab[Qobj propagation]; 2.57s call test_wigner.py::test_wigner_compare_methods_dm; 2.46s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Symplectic coupled oscillators-Qobj propagation]; 2.31s call test_parallel.py::test_parfor1; 2.11s call test_wigner.py::test_wigner_bell1_su2parity; 1.90s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Ising state-to-state-Qobj propagation]; 1.86s call test_sparse.py::test_sp_profile; 1.66s call test_correlation.py::test_correlation_solver_equivalence[es-legacy]; 1.65s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Lindbladian amplitude damping channel-Qobj propagation]; 1.56s call test_correlation.py::test_correlation_solver_equivalence[es]; 1.43s call test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; 1.43s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-default propagation]; 1.40s call test_correlation.py::test_correlation_solver_equivalence[es-steady state]; 1.38s call test_correlation.py::test_correlation_solver_equiv,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:3652,Test,TestOptimization,3652,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestOptimization']
Testability,"sertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:6050,assert,assert,6050,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['assert'],['assert']
Testability,sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; 8.74s call test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; 8.38s call test_qobjevo.py::test_QobjEvo_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_c,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:2359,Test,TestSESolve,2359,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestSESolve']
Testability,setup.py installs rhs*.pyx test files generated during build-time tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/987:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/issues/987,2,['test'],"['test', 'tests']"
Testability,"simdiag is not a well used function. In fact, I know of no one whom has used it until now. It is not unit tested, and was written nearly eight years ago, for compatibility with the Matlab quantum optics toolbox. As such, it is not really a priority at the moment, and it might take some time to get around to fixing it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/756#issuecomment-333333681:106,test,tested,106,https://qutip.org,https://github.com/qutip/qutip/issues/756#issuecomment-333333681,1,['test'],['tested']
Testability,"sis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is other; or (; isinstance(other, Space); and self.size == other.size; and self.basis == other.basis; ); ); ```; so we'll almost invariably get the benefits right now, but we're rather more future-proof in the code. By analogy, it's clearly wrong to do `(1, 2) is (1, 2)` to compare tuples, even though `tuple` produces singletons in CPython (and that code will generally be `True`). The Python `tuple` class is basically what inspired me, and I'm 100% certain that the Python devs are smarter than I am, so we should probab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2921,test,test,2921,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,3,"['log', 'test']","['logic', 'test']"
Testability,"sis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4017,Test,TestCircuitProcessor,4017,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testSpline']"
Testability,site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_fileio.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_floquet.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_gates.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_graph.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_heom_solver.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_interpolate.py -,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:51395,test,tests,51395,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5896,test,test,5896,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,six library not available during Travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/378:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/issues/378,1,['test'],['tests']
Testability,"smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.49s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.02s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.57s. Est. time left: 00:00:00:01; Total run time: 6.62s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 120, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:4344,test,tests,4344,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.69s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.31s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.89s. Est. time left: 00:00:00:01; Total run time: 7.03s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 90, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:2749,test,tests,2749,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time left: 00:00:00:06; 60.0%. Run time: 7.37s. Est. time left: 00:00:00:04; 72.0%. Run time: 8.34s. Est. time left: 00:00:00:03; 80.0%. Run time: 9.25s. Est. time left: 00:00:00:02; Total run time: 9.33s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 59, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:5944,test,tests,5944,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,solve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ===,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7203,test,tests,7203,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"sorption spectra to test which Drude-Lorentz bath is correct. Also, one can use [DM-HEOM](https://github.com/noma/dm-heom) [2], where they have implemented the ""Shifted Drude Lorentz Bath"" [1]. Compared with their Matsubara implementation, it gives the same density matrix evolution (up to the numerical accuracy) as QuTiP's HEOM gives with `DrudeLorentzBath` and $\gamma \rightarrow \gamma \pm \Omega$ and $\lambda \rightarrow \lambda/2$. But it is not the case for `DrudeLorentzPadeBath`. You are right to think that the unphysical part goes away when two baths are added [1], one with $+i\Omega$ and the other with $-i\Omega$. > However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. You are very much in the right to be absolutely sure before making a change. As far as I understand and have tested, it will not change the real case because the changes are as follows (I have removed all the other lines in between for clarity):. ```python; - ck_real = [np.real(eta) for eta in eta_p]; + ck_real = [eta for eta in eta_p]. - ck_imag = [np.imag(eta_p[0])]; + ck_imag = [-lam*gamma]. - eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0) - 1.0j)]; + eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0))]; ```; if `gamma` is real, `lam * gamma * self._cot(gamma * beta / 2.0)` would be real, and hence `ck_real` would stay the same as before, and the same can be said for `ck_imag`. After all, this is how it is done for `DrudeLorentzBath`, so it should not impact anything. > A more ""complete"" and probably more efficient solution would be to add a whole new ShiftedDrudeLorentzBath, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a BosonicBath object from them directly.). This is what I have been using locally. I",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274:1594,test,tested,1594,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274,1,['test'],['tested']
Testability,sorry for the delay. could you add a unit test for using brmesolve with c_ops?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/258#issuecomment-65160566:42,test,test,42,https://qutip.org,https://github.com/qutip/qutip/pull/258#issuecomment-65160566,1,['test'],['test']
Testability,"sp_eigs now return a 2d ndarray instead of a list of 1d ndarray. Fix sqrtm accordingly, and adding a unit test for it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/170:106,test,test,106,https://qutip.org,https://github.com/qutip/qutip/pull/170,1,['test'],['test']
Testability,split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6411,test,tests,6411,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"sr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""},; compile_opt=opt); > assert coeff(0) == 5. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pyte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:6952,test,test,6952,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability,"ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.30s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.23s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.61s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.61s. Est. time left: 00:00:00:06; 52.0%. Run time: 4.99s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.01s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.37s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.74s. Est. time left: 00:00:00:01; Total run time: 5.89s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_homodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 89, in test_ssesolve_homodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:7547,test,tests,7547,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.07s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.50s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.88s. Est. time left: 00:00:00:01; Total run time: 5.99s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 119, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:9142,test,tests,9142,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2428,test,test,2428,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,9,['test'],"['test', 'test-run-completion', 'testing', 'tests']"
Testability,"st from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1842,test,tests,1842,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['test'],['tests']
Testability,"st(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:2131,test,testing,2131,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['testing']
Testability,"st); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16661,Assert,AssertionError,16661,https://qutip.org,https://github.com/qutip/qutip/issues/1755,2,"['Assert', 'test']","['AssertionError', 'tests']"
Testability,"st-packages/qutip/tests/test_brmesolve_td.py:256: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:200: in brmesolve; output = _td_brmesolve(H, psi0, tlist, a_ops=a_ops, e_ops=e_ops,; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:482: in _td_brmesolve; exec(code, globals()); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . > ???; E ModuleNotFoundError: No module named 'rhs4968611'. <string>:1: ModuleNotFoundError; __________________________________________________________________________________________________________ TestTimeDependence.test_varying_coefficient_hamiltonian_2ls[string] ___________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:12293,Test,TestTimeDependence,12293,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,"st_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25207,test,tests,25207,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"st_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24393,test,testing,24393,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"st_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25287,test,testing,25287,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,stalled: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; b,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1841,log,logger,1841,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another con",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1618,log,logic,1618,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,2,"['log', 'test']","['logic', 'tests']"
Testability,"sts/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(0, 10, 100); kappa = 0.2; exact = 9 * np.exp(-2 * kappa * (1 - np.exp(-times))); a_ops = [[a + a.dag(), _string_w_interpolating_t(kappa, times)]]; collapse_points = np.sqrt(kappa) * np.exp(-0.5*times); c_ops = [[a, qutip.Cubic_Spline(times[0], times[-1], col",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7968,Test,TestSESolve,7968,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"sts/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17180,test,testing,17180,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,sts; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43812,test,tests,43812,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"stutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_rhs_reuse.py"", line 53, in test_rhs_reuse; out1 = qt.mesolve(H, psi0,tlist, e_ops=e_ops); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\mesolve.py"", line 336, in mesolve; e_ops, args, options, progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reloa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:4491,test,test,4491,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['test']
Testability,"stutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 190, in test_04_1_state_with_list_str_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:8903,test,test,8903,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['test']
Testability,"stutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 207, in test_04_2_unitary_with_list_func_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:13416,test,test,13416,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['test']
Testability,"stutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 226, in test_05_1_state_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:17950,test,test,17950,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['test']
Testability,"stutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 245, in test_05_2_unitary_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=lang",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:22459,test,test,22459,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['test']
Testability,"stutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 354, in test_06_4_compare_state_and_unitary_list_str; normalize=False, td_args=td_args, tol=5e-5); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 255, in compare_evolution; options=options,args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:27020,test,test,27020,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['test']
Testability,"suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/sit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15583,test,testing,15583,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,sumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:15907,test,tests,15907,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Checks that mul and tensor of skew-Hermitian operators report `isherm = True`. ... ok; > > > Tensor: Checks that super_tensor correctly tensors on underlying spaces. ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... ok; > > > Steady state: Thermal harmonic oscillator ... ok; > > > Steady state: Driven cavity ... ok; > > > Stochastic: smesolve: photo-current ... ok; > > > Stochastic: smesolve: homodyne ... ok; > > > Stochastic: smesolve: heterodyne ..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:8771,Test,Test,8771,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['Test'],['Test']
Testability,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12148,test,tests,12148,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14160,test,tests,14160,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,sx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12672,test,tests,12672,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/dist,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19256,test,tests,19256,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17153,test,tests,17153,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"syncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5902,Test,TestMESolverConstDecay,5902,https://qutip.org,https://github.com/qutip/qutip/issues/2293,3,"['Test', 'test']","['TestMESolverConstDecay', 'testMEDecayAsStrList', 'tests']"
Testability,"t = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _correlation_me_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1069: in _correlation_me_2t; rho_t = mesolve(H, rho0, tlist, c_ops, [],; /usr/lib/python3/dist",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:14130,assert,assert,14130,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['assert'],['assert']
Testability,"t I've been working on. Beyond that, I've been working on adding a third system to this paper I'm; working on that describes FLiME. This third system should be able to show; changes based on the time_sense argument that aren't shown with the other; two systems, as those systems are so dominated by their primary frequency; that relaxing the secular approximation doesn't seem to change much in; terms of the results. The happy side effect is that I've had to fix some; issues with dimensionality that Eric mentioned, such that it ended up being; good bug testing for FLiMESolve as well. I'm hoping to have another pull request ready for review by the end of this; week or early next week, but I'm trying to really put everything under a; magnifying glass to the best of my ability, such that I don't leave Eric; wading through a bunch of formatting and code issues again. On Wed, Jul 5, 2023 at 3:33 PM Simon Cross ***@***.***> wrote:. > @magnamancer <https://github.com/magnamancer> I think part of the issue; > was that you merged qutip-5.0.X into master but that shouldn't have been; > done because master now contains the latest 5.X qutip code.; >; > Sorry to be a pain, but could you open a new new PR with just your; > changes? No need to be fancy -- just create a new branch from master, copy; > across the files you want to change, create PR.; >; > The VERSION file should not be changed.; >; > How hard would it be to add tests? I remember you have tests in a notebook; > somewhere. If you can point me at the latest versions, I can think about; > how to convert them into unit tests and add them to the new PR.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2186#issuecomment-1622360050>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AV5WL5AU2Z2WLCVH7BFC2QLXOW6QNANCNFSM6AAAAAAZWI6GRQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >. -- ; Best Regards,; Fenton Clawson",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1622617036:2014,test,tests,2014,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1622617036,3,['test'],['tests']
Testability,"t as plt; import numpy as np; from qutip import *; delta=0.2*2*np.pi;; eps0=1.0*2*np.pi;; A=2.5*2*np.pi;; omega=1.0*2*np.pi;; H0=-delta/2.0*sigmax()-eps0/2.0*sigmaz(); H1=A/2.0*sigmaz(); args={'w':omega}; H=[H0,[H1,'sin(w*t)']]; T=2*np.pi/omega; f_modes_0, f_energies = floquet_modes(H, T, args); ```. Here is the error information：. ---------------------------------------------------------------------------; ```; DistutilsPlatformError Traceback (most recent call last); F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. F:\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. F:\Anaconda3\lib\distutils\dist.py in run_commands(self); 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 . F:\Anaconda3\lib\distutils\dist.py in run_command(self, command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1. F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 184 ; --> 185 _build_ext.build_ext.run(self); 186 . F:\Anaconda3\lib\distutils\command\build_ext.py in run(self); 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 . F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in build_extens",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:1294,assert,assert,1294,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['assert'],['assert']
Testability,"t be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% ████",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3355,Test,TestKrylovSolve,3355,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:2894,test,testing,2894,https://qutip.org,https://github.com/qutip/qutip/issues/1711,3,['test'],"['test', 'testing']"
Testability,"t gates might differ, an additional step is required to compute the scheduled start time of each instruction.; It adds the additional dependency caused by hardware constraint to the graph and recomputes the distance of each node to the start and end node. This distance is then converted to the start time of each instruction. **Example**; ```python; >>> from qutip.qip.circuit import QubitCircuit; >>> from qutip.qip.scheduler import Scheduler; >>> circuit = QubitCircuit(7) ; >>> circuit.add_gate(""SNOT"", 3) # gate0; >>> circuit.add_gate(""CZ"", 5, 3) # gate1; >>> circuit.add_gate(""CZ"", 4, 3) # gate2; >>> circuit.add_gate(""CZ"", 2, 3) # gate3; >>> circuit.add_gate(""CZ"", 6, 5) # gate4; >>> circuit.add_gate(""CZ"", 2, 6) # gate5; >>> circuit.add_gate(""SWAP"", [0, 2]) # gate6; >>>; >>> scheduler = Scheduler(""ASAP""); >>> scheduler.schedule(circuit, gates_schedule=True) ; [0, 1, 3, 2, 2, 3, 4]; ```; The result list is the cycle indices for each gate. It means that the circuit can be executed in 5 gate cycles:; ```; gate0; gate1; gate3, gate4; gate2, gate5; gate6; ```; Notice that gate3 and gate4 commute with gate2, therefore, the order is changed to reduce the number of cycles. **Related issues or PRs**; Solve #1243 . **Changelog**; Add a gate(pulse) scheduler for quantum circuit. **Others**; @sarsid Maybe you will be interested in it. It can be used to determine which gates can be executed at the same time. So maybe we can improve the efficiency of the QubitCircuit by combining several gates together and generate the full matrix using `qutip.qip.expand_operation`. However, writing such scheduler in Python is usually not the most efficient choice and there will be some overhead. I'm not sure if it will bring any real improvement in circuit simulation and where is the threshold. I'm also pinging @tehruhn because I remember you mentioned something similar before (apologize if not). More tests are on the way, but you are very welcome to play with it a bit and see if there is any bug!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273:3755,test,tests,3755,https://qutip.org,https://github.com/qutip/qutip/pull/1273,1,['test'],['tests']
Testability,"t in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16762,assert,assert,16762,https://qutip.org,https://github.com/qutip/qutip/issues/1755,2,"['assert', 'test']","['assert', 'tests']"
Testability,t in qutip/visualization.py; CONFLICT (modify/delete): qutip/tests/test_superoper.py deleted in HEAD and modified in master. Version master of qutip/tests/test_superoper.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_subsys_apply.py; CONFLICT (content): Merge conflict in qutip/tests/test_random.py; CONFLICT (modify/delete): qutip/tests/test_rand.py deleted in master and modified in HEAD. Version HEAD of qutip/tests/test_rand.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_qubitcircuit.py; CONFLICT (content): Merge conflict in qutip/tests/test_noise.py; CONFLICT (content): Merge conflict in qutip/tests/test_mkl.py; CONFLICT (content): Merge conflict in qutip/tests/test_device.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_qubit_evolution.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_brtools.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_superop_reps.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_qobj.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_metrics.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_eigen.py; CONFLICT (modify/delete): qutip/superoperator.py deleted in HEAD and modified in master. Version master of qutip/superoperator.py left in tree.; CONFLICT (modify/delete): qutip/sparse.py deleted in HEAD and modified in master. Version master of qutip/sparse.py left in tree.; CONFLICT (content): Merge conflict in qutip/solve/stochastic.py; CONFLICT (content): Merge conflict in qutip/solve/steadystate.py; CONFLICT (content): Merge conflict in qutip/solve/sesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mcsolve.py; CONFLICT (content): Merge conflict in qutip/solve/floquet.py; CONFLICT (content): Merge conflict in qutip/solve/countstat.py; CONFLICT (content): Merge conflict in qutip/solve/correlation.py; CONFLICT (content): Merge conflict ,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165:1287,test,tests,1287,https://qutip.org,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165,1,['test'],['tests']
Testability,"t module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6906,test,tests,6906,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Librar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29412,test,tests,29412,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7511,test,testing,7511,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"t of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.07s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.50s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.88s. Est. time left: 00:00:00:01; Total run time: 5.99s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 119, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.81s. Est. time left: 00:00:00:27; 20.0%. Run time: 4.76s. Est. time left: 00:00:00:19; 32.0%. Run time: 5.66s. Est. time left: 00:00:00:12; 40.0%. Run time: 5.67s. Est. time left: 00:00:00:08; 52.0%. Run time: 6.59s. Est. time left: 00:00:00:06; 60.0%. Run time: 6.65s. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:9438,test,tests,9438,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"t of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.49s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.02s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.57s. Est. time left: 00:00:00:01; Total run time: 6.62s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 120, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time left: 00:00:00:06; 60.0%. Run time: 7.37s. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:4640,test,tests,4640,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,"t there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You sho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:2082,test,tested,2082,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['tested']
Testability,"t. excited = qp.basis(2, 1); ground = qp.basis(2, 0). H0 = qp.sigmaz(); H1 = qp.sigmax() # time-dependent term. H = [H0,[H1, 'A * exp(-(t / sigma) ** 2)']]. t = np.linspace(-1, 1, 200) # Define time vector; args = {'A': 6, 'sigma': 0.145}; output = qp.mesolve(H, ground, t, e_ops = [qp.sigmaz()], args=args); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; DistutilsPlatformError Traceback (most recent call last); ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 215 inplace=build_inplace, language_level=language_level); 216 mod = imp.load_dynamic(name, so_path). ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 inplace=inplace,; --> 191 reload_support=pyxargs.reload_support); 192 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. ~\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. ~\Anaconda3\lib\distutils\dist.py in run_commands(self); 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 . ~\Anaconda3\lib\distutils\dist.py in run_command(self, command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1. ~\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~\Anaconda3\lib\distutils\command\build_ext.py in run(self); 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 . ~\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in build_extensions(s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1914:1933,assert,assert,1933,https://qutip.org,https://github.com/qutip/qutip/issues/1914,1,['assert'],['assert']
Testability,"t.figure(figsize=(10,5)); for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test,pulse_set[idx](time_test,None),label=name); plt.legend(loc=1); plt.xlabel('time'); plt.show(). for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; H = [Hsys['Hq'],[Hsys['Hc_x'], pulse_set[idx]]]; result = qu.mesolve(H, psi0, time_test, Hsys['Hlbld'],; [qu.sigmax(), qu.sigmay(), qu.sigmaz()],; progress_bar=None, options=None); b = qu.Bloch(); b.clear(); Pg, Pe = [], []; qu_blochs = result.expect; plt.title('probability of excited state'); for i,j,k in zip(qu_blochs[0],qu_blochs[1],qu_blochs[2]):; points = [i,j,k]; b.add_points(points); P0, P1 = (1+k)/2.0, (1-k)/2.0; Pg.append(P0); Pe.append(P1); plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test, Pe, label=name); plt.legend(loc=1); bloch_set.append(b); plt.xlabel('time'); plt.show(); if bloch:; bloch_set[0].show(); bloch_set[1].show(); return result. # to run the test:; test_mesolve(time_test=np.arange(0,100,0.5), show_seq=True, bloch=False); ```. The terminal out put is; ```; ![sequence](https://user-images.githubusercontent.com/41005903/82047831-11976380-96e6-11ea-869d-7278ba1cbeaa.png); ![probability](https://user-images.githubusercontent.com/41005903/82047837-12c89080-96e6-11ea-98d6-0ba6528a50ad.png); ```. **Expected behavior**; As discussed above. **Your Environment**. QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.1; Numpy Version: 1.15.2; Scipy Version: 1.1.0; Cython Version: 0.28.4; Matplotlib Version: 3.0.3; Python Version: 3.5.5; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: D:\anaconda\envs\py3.5\lib\site-packages\qutip. **Additional context**; This issue is the same bug mention by @xlelephant at #1038 , but after trying the tweaking option m",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1265:2559,test,test,2559,https://qutip.org,https://github.com/qutip/qutip/issues/1265,1,['test'],['test']
Testability,"t; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; b",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1256,log,logger,1256,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"tError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20357,test,tests,20357,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:5819,test,tests,5819,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"t__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9939,test,tests,9939,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"t_expect.py; index 45568110..17491981 100644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break; return qutip.Qobj(flat.reshape(qobj.shape), dims=qobj.dims); ; @@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:23763,test,testing,23763,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['testing']
Testability,"t_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singular(5); q = Qobj(data); randN = 10 * np.random.random(); - q = q / randN; + q /= randN; assert np.allclose(q.full(), data / randN); ; ; diff --git a/qutip/visualization.py b/qutip/visualization.py; index 47f40fc1..21ef765e 100644; --- a/qutip/visualization.py; +++ b/qutip/visualization.py; @@ -416,7 +416,7 @@ def _stick_to_planes(stick, azim, ax, M, spacing):; Stick to xz and yz planes; """"""; if stick is True:; - azim = azim % 360; + azim %= 360; if 0 <= azim <= 90:; ax.set_ylim(1 - .5,); ax.set_xlim(1 - .5,); @@ -879,7 +879,7 @@ def plot_energy_levels(H_list, N=0, labels=None, show_ylabels=False,; ; for H1 in H_list[1:]:; ; - H = H + H1; + H += H1; evals1 = H.eigene",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:26376,test,tests,26376,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"t_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6825,test,test,6825,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"t_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Lib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29335,test,tests,29335,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ta *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break; return qutip.Qobj(flat.reshape(qobj.shape), dims=qobj.dims); ; @@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:24661,test,tests,24661,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"tained for eseries and fft methods ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.67e+12); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > Failure: ValueError (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:2726,test,test,2726,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['test']
Testability,"tate, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the intermediate state and instructions of `mesolve` would just more APIs we have to maintain and keep constant. Note that you can achieve the exact same thing with a callback function pattern here, except that control would never really pass back to the caller, so it would be impossible to (for example) branch execution part way through. The new, modular system we want to put into QuTiP 5 is an attempt to get the best of all these worlds. For users who don't need all this low-level behaviour, there'll still be the convenient `mesolve`, which just keeps working the same way it does now. For users (like you) who need more, we'll expose all the inner logic of the `mesolve` loop as separate components, so you'll still get all the nice set-up utilities if you want them, but you'll also then just be able to run the inner loop yourself. Since everything is modular, you'll have access to modify _everything_ that `mesolve` can access, so we won't need to define a specific, awkward API, and you can change it in whatever programming style you like, and is appropriate for your use case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:3536,log,logic,3536,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['log'],['logic']
Testability,"tbh, the only real use-case for `git cherry-pick` is to backport single bug-fix commits from `master` onto an already existing release branch without merging in additional feature commits. Since `dev.major` is intended to _include_ all of `master` (and `master` will eventually point to the `dev.major` tip), we shouldn't cherry pick from one to the other, but merge all changes. Having both #1289 and #1337 is effectively the same as having cherry-picked the feature onto both branches already, which is why the merge is now a bit tricky. That's not a problem at all (with how we developed it, it's the correct thing to do), it just means that when I joined them back together, I just merged this bit with the (logical - I did it all in one go) strategy `--ours` to tell `git` to keep the `dev.major` version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1289#issuecomment-779258918:712,log,logical,712,https://qutip.org,https://github.com/qutip/qutip/pull/1289#issuecomment-779258918,1,['log'],['logical']
Testability,"te dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4773,test,tests,4773,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"te or e_ops values (but could also do other things); - a ``_post_init`` method that allows a result sub-class to override what processors are configured; - helper methods ``_store_state``, ``_store_final_state``, ``_pre_copy`` and ``_e_op_func`` that sub-classes can override if they use states that are not ``Qobj``.; - a ``.e_ops`` attribute that stores a dictionary of ``ExpectOP`` instances where ``.e_ops[k](t, state)`` will calculate the expected value and ``.e_ops[k].op`` returns the original object used to create the e_op.; - a ``.e_data`` attribute that store the ``.expect`` values as a dictionary rather than a list, so that ``.e_data[k]`` is ``.expect[i]``. Other changes:. - the normalization of states is now performed in the base solver class, rather than in results.; - the solver ``stats`` passed to the results are now *only for that solver .run call* rather than being a strange record of everything the solver has done so far.; These allow:. - The HEOM solver to implement a ``HEOMResult`` class and use the base solver ``.run`` method.; - The normalization of states to be applied when using the ``.step()`` solver method.; - Consistently expose ``.expect`` and a list of results (consistent with QuTiP 4 and useful when turning expectation values into a numpy array); - Provide a dictionary of expectation values via ``.e_data`` so that when e_ops are supplied as a dictionary, the results can be accessed by the same keys, e.g. ``.e_data[""nice-name""]``.; - Possibly allow the MC result classes to be refactored more easily. **Related issues or PRs**; - #1889 -- I think we could implement this PR more easily on top of the refactored result class.; - #1869 -- the v5 HEOM Solver can use much more of the base solver and results class with these changes . **Todo**; - [X] I would like to add more tests for the base result class, but it would be good to get a +1 on the general approach before I spend time on that. **Changelog**; Add a more flexible base result class for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:1921,test,tests,1921,https://qutip.org,https://github.com/qutip/qutip/pull/1907,1,['test'],['tests']
Testability,"te' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/sit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20984,test,testing,20984,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"te-packages/nose-1.3.0-py3.3.egg/nose/case.py"", ; > line 198, in runTest; > self.test(*self.arg); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", ; > line 73, in test_sparse_symmetric_reverse_permute; > B=sparse_reverse_permute(x,perm,perm); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", ; > line 566, in sparse_reverse_permute; > A.indptr, nrows, ncols, rperm, cperm, flag); > File ""sparse_utils.pyx"", line 266, in ; > qutip.cy.sparse_utils./sparse/reverse_permute_complex ; > (qutip/cy/sparse_utils.c:5740); > ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; > ; > ```; > ERROR: Sparse: Nonsymmetric Reverse Permute; > ```; > ; > Traceback (most recent call last):; > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", ; > line 198, in runTest; > self.test(*self.arg); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", ; > line 89, in test_sparse_nonsymmetric_reverse_permute; > B=sparse_reverse_permute(x,rperm,cperm); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", ; > line 566, in sparse_reverse_permute; > A.indptr, nrows, ncols, rperm, cperm, flag); > File ""sparse_utils.pyx"", line 266, in ; > qutip.cy.sparse_utils./sparse/reverse_permute_complex ; > (qutip/cy/sparse_utils.c:5740); > ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; > ; > ```; > ERROR: Sparse: Bandwidth; > ```; > ; > Traceback (most recent call last):; > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", ; > line 198, in runTest; > self.test(*self.arg); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", ; > line 144, in test_sparse_bandwidth; > out2=sparse_bandwidth(B); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", ; > l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73#issuecomment-35583331:1593,test,tests,1593,https://qutip.org,https://github.com/qutip/qutip/issues/73#issuecomment-35583331,1,['test'],['tests']
Testability,"te-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:4091,test,test,4091,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"te-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22982,test,test,22982,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"te; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collec",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13712,test,testing,13712,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"terrupted: 60 errors during collection !!!!!!!!!!!!!!!!!!!; =========================== 60 error in 1.85 seconds ===========================; (base) cln-232-18:qutip nathanshammah$; ```; this on the 4.4.0 release version. ; On the dev version, ; ```; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Fatal Python error: Segmentation fault: 11; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Segmentation fault: 11; ```; and with nosetests; ```; (qdev) cln-232-18:qutip nathanshammah$ nosetests; /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjCte size changed, may indicate binary incompatibility. Expected 344 from C header, got 352 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTd size changed, may indicate binary incompatibility. Expected 560 from C header, got 568 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTdMatched size changed, may indicate binary incompatibility. Expected 1344 from C header, got 1352 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo_factor.CoeffFunc size changed, may indi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:30049,test,tests,30049,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/V",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9616,test,test,9616,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"test passes on mac with python 3.8 withour hanging on parallel mcsolve by forcing ""fork"" multiprocessing (#1202). Still on xcode 10. segfault probably not fixed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1214#issuecomment-604135928:0,test,test,0,https://qutip.org,https://github.com/qutip/qutip/pull/1214#issuecomment-604135928,1,['test'],['test']
Testability,"testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to im",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25381,test,tests,25381,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2717,test,testMEDecayAsStrList,2717,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['testMEDecayAsStrList', 'testPropHOStrTd']"
Testability,"test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1991,Test,TestSESolve,1991,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestSESolve', 'tests']"
Testability,test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6679,test,tests,6679,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[QFT-Qobj propagation]; 2.65s call test_control_pulseoptim.py::TestOptimization::test_crab[Qobj propagation]; 2.57s call test_wigner.py::test_wigner_compare_methods_dm; 2.46s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Symplectic coupled oscillators-Qobj propagation]; 2.31s call test_parallel.py::test_parfor1; 2.11s call test_wigner.py::test_wigner_bell1_su2parity; 1.90s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Ising state-to-state-Qobj propagation]; 1.86s call test_sparse.py::test_sp_profile; 1.66s call test_correlation.py,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:3021,Test,TestSpinChain,3021,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestSpinChain']
Testability,test_ssesolve_feedback; 25.80s call test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; 24.41s call test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; 21.83s call test_propagator.py::testPropHOStrTd; 19.95s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; 17.73s call test_qobjevo.py::test_QobjEvo_expect_rho; 16.52s call test_stochastic_me.py::test_smesolve_homodyne; 15.79s call test_qobjevo.py::test_QobjEvo_call; 12.67s call test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; 12.37s call test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; 11.43s call test_qobjevo.py::test_QobjEvo_mul_mat; 10.89s call test_spmath.py::test_csr_kron; 10.83s call test_qobjevo.py::test_QobjEvo_expect_psi; 9.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[QFT-Qobj propagation]; 9.40s call test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; 9.32s call test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; 8.74s call test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; 8.38s call test_qobjevo.py::test_QobjEvo_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:1319,Test,TestMESolverConstDecay,1319,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,2,"['Test', 'test']","['TestMESolverConstDecay', 'testMEDecayAsStrList']"
Testability,tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40729,test,tests,40729,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27085,test,testing,27085,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29491,test,tests,29491,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"th policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2667,test,tests,2667,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"thanks Dani, I think if you encode the problem in a more standard qutip structure the dependence on the small frequencies disappears;; ```; d = destroy(2).dag(); L_s = liouvillian(0*d.dag()*d, [np.sqrt(Gamma_l) *d, np.sqrt(Gamma_r) *d.dag()]); rho_ss = steadystate(L_s); I_s = Gamma_r * sprepost(d.dag(),d); current, noise, skw = third_cumulant(L_s, rhoss=rho_ss, J_ops=[I_s], I_ops=[I_s], sparse=True, method=""pinv""); ```. So I would prefer to revert the pseudo_inverse change (which is there originally to catch a different issue with the noise exploding). But nice example! this would make a great test I think. For the third_cumulant itself, maybe better to combine with the existing countstat_current_noise function, and provide the third cumulant, and support J_ops!=I_ops, as options?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2435#issuecomment-2134515607:601,test,test,601,https://qutip.org,https://github.com/qutip/qutip/pull/2435#issuecomment-2134515607,1,['test'],['test']
Testability,"thanks simon, i think the logic of the changes looks good to me. I can do some quick checks against some examples from the literature. For tests, I think if we set up the correlation functions for the bosonic bath to basically mimic an undamped oscillator we can probably use the existing discrete boson example as a benchmark. ; https://github.com/qutip/qutip-notebooks/blob/master/examples/heom/heom-5b-fermions-discrete-boson-model.ipynb; I will try and set it up and see.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2089#issuecomment-1429059370:26,log,logic,26,https://qutip.org,https://github.com/qutip/qutip/pull/2089#issuecomment-1429059370,3,"['benchmark', 'log', 'test']","['benchmark', 'logic', 'tests']"
Testability,"the quick response @bencbartlett. . Feel free to ignore the comments regarding the shortening of arguments. That was just a suggestion to make things shorter. But as you said clarity is more important. I will not change `waveguide` to `wg` and I think you should leave the others as they are if you can't think of shorter ones. Same applies to the `temporal_basis_vector`. I think you can even add a `temporal_basis` as you mentioned. Regarding the double line breaks wrapping top-level functions, I know the pep8 standard is two newlines but some other QuTiP modules follow just a single line break, e.g., [floquet](https://github.com/qutip/qutip/blob/master/qutip/floquet.py). But again some other modules in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance impro",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:989,test,test,989,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['test'],['test']
Testability,"thesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_comp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5801,Test,TestKrylovSolve,5801,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestKrylovSolve', 'tests']"
Testability,they are now available in the qutip/qutip-benchmark repository,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/217:42,benchmark,benchmark,42,https://qutip.org,https://github.com/qutip/qutip/pull/217,1,['benchmark'],['benchmark']
Testability,this good enough for testing : assert_((U0 - U1).norm() < 1e-12) ???,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/145#issuecomment-45187844:21,test,testing,21,https://qutip.org,https://github.com/qutip/qutip/pull/145#issuecomment-45187844,1,['test'],['testing']
Testability,thon/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30536,test,tests,30536,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"thon/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Devel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20402,test,test,20402,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"thon/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9402,test,tests,9402,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,thon3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:50719,test,test,50719,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test']
Testability,"thon3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3540,Test,TestCircuitProcessor,3540,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,tils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27448,test,tests,27448,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6245,test,testPropHOStrTd,6245,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['testPropHOStrTd', 'tests']"
Testability,"ting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_args, tol=5e-5). /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:322: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_sesolve.py:223: in compare_evolution; out_s = sesolve(H, psi0, tlist, [sigmax(), sigmay(), sigmaz()],; /usr/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:19192,Test,TestSESolve,19192,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability,"ting it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1605,Test,TestSuperopReps,1605,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['Test'],['TestSuperopReps']
Testability,"ting qutip/tests/test_wigner.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; !!!!!!!!!!!!!!!!!!! Interrupted: 60 errors during collection !!!!!!!!!!!!!!!!!!!; =========================== 60 error in 1.85 seconds ===========================; (base) cln-232-18:qutip nathanshammah$; ```; this on the 4.4.0 release version. ; On the dev version, ; ```; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Fatal Python error: Segmentation fault: 11; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Segmentation fault: 11; ```; and with nosetests; ```; (qdev) cln-232-18:qutip nathanshammah$ nosetests; /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjCte size changed, may indicate binary incompatibility. Expected 344 from C header, got 352 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTd size changed, may indicate binary incompatibil",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:29575,test,tests,29575,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"ting/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16592,test,tests,16592,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"tion purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----------. _Original top comment:_. Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:4045,test,tests,4045,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['test'],['tests']
Testability,"tion.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1558,test,tests,1558,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"tip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1447,test,test,1447,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['test'],['test']
Testability,"tip/qutip/issues/2293; + print(f""qutip does not support Cython on Python 3.{sys_pyver.minor} (Issue#2293)""); else:; - # Setup pyximport; - import qutip.cy.pyxbuilder as _pyxbuilder; - _pyxbuilder.install(); - del _pyxbuilder, _Cython, _version2int; - qutip.settings.has_cython = True; + from qutip.utilities import _version2int; + _cy_require = ""0.29.20""; + _cy_unsupported = ""3.0.0""; + if _version2int(_Cython.__version__) < _version2int(_cy_require):; + warnings.warn(; + ""Old version of Cython detected: needed {}, got {}.""; + .format(_cy_require, _Cython.__version__); + ); + if _version2int(_Cython.__version__) >= _version2int(_cy_unsupported):; + warnings.warn(; + ""The new version of Cython, (>= 3.0.0) is not supported.""; + .format(_Cython.__version__); + ); + else:; + # Setup pyximport; + import qutip.cy.pyxbuilder as _pyxbuilder; + _pyxbuilder.install(); + del _pyxbuilder, _Cython, _version2int; + qutip.settings.has_cython = True; ; ; # -----------------------------------------------------------------------------; Index: qutip/qutip/tests/test_brmesolve_td.py; ===================================================================; --- qutip.orig/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; @@ -148,7 +148,8 @@; brme = qutip.brmesolve(H, psi0, times, a_ops, e_ops=[a.dag()*a]); assert np.mean(np.abs(brme.expect[0] - exact) / exact) < 1e-5; ; -; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); @@ -232,6 +233,8 @@; [(a, a.dag()), (spectrum, '1', '1')]]); ; ; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); @pytest.mark.parametrize(""collapse_operators"", [; _2_tuple_split,; pytest.param(_4_tuple_split, marks=pytest.mark.slow),; Index: qutip/qutip/about.py; ================================================",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543:2184,test,tests,2184,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543,1,['test'],['tests']
Testability,tip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ===============,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7073,test,tests,7073,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"tip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4489,Test,TestCircuitProcessor,4489,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testDrift']"
Testability,"tip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18981,test,testing,18981,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"tl;dr We should go ahead and change it according to PEP8. I vaguely remembered that. ```; string_one == string_two; ```. and. ```; string_one is string_two; ```. do something different. According to [post on stackoverflow](http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python) ""=="" tests for value equality, while ""is"" checks for whether the variables point to the same thing. Since ""None"" is a singleton the two are the same (except for some [oddball cases](http://jaredgrubb.blogspot.sg/2009/04/python-is-none-vs-none.html)). The [post about the oddball case](http://jaredgrubb.blogspot.sg/2009/04/python-is-none-vs-none.html) also seems to suggest that ""is"" is faster. Anyway, it's a) safe to change and b) recommended, so we should do that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/10#issuecomment-10983787:318,test,tests,318,https://qutip.org,https://github.com/qutip/qutip/issues/10#issuecomment-10983787,1,['test'],['tests']
Testability,"to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]>(maxiter=1000000.0); E + where <bound method Qobj.norm of Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = s..... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]> = (Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+5.65115172e-04j\n -1.23645213e-03+1.49052236e-03j 1.24635971e-01+0.00000000e+00j]] - Quantum object: dims = [[[8, 8], [8, 8]], [[8, 8], [8, 8]]], shape = (4096, 4096), type = super, isherm = False\nQobj d...1.84124822e-06j ... -7.30641275e-03+",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:2275,assert,assert,2275,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['assert'],['assert']
Testability,"to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original develop",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26466,test,tests,26466,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,to reduce load on travis system and shorten test times ?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/289:44,test,test,44,https://qutip.org,https://github.com/qutip/qutip/pull/289,1,['test'],['test']
Testability,"torial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes than the number of available slots.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1732,test,tests,1732,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,3,"['log', 'test']","['logical', 'test', 'tests']"
Testability,trTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES =====================================================================,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7271,test,tests,7271,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"trap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27944,test,tests,27944,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ts calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the array[1, 10, 11]? ...; > ; > At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response.; > ; > Cheers,; > Qi; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:2196,test,test,2196,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['test'],['test']
Testability,"ts/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singula",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25716,test,tests,25716,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"ts/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14487,test,testing,14487,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ts/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16286,test,testing,16286,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ts/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.3; Numpy Version: 1.24.2; Scipy Version: 1.10.1; Cython Version: 0.29.36; Matplotlib Version: 3.6.3; Python Version: 3.12.1; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; =======",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:3027,test,testMEDecayAsStrList,3027,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['testMEDecayAsStrList', 'testPropHOStrTd']"
Testability,"ts/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2471,test,tests,2471,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,ts; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39093,test,tests,39093,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ts; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45296,test,testing,45296,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"ttps://github.com/qutip/qutip/assets/78165605/1c6f0d5b-080f-49e2-98f7-8ead19ef739b width=45% height=45%> <img src=https://github.com/qutip/qutip/assets/78165605/346835ab-5065-4180-b4dd-3a9b8b99dc45 width=45% height=45%>. <img src=https://github.com/qutip/qutip/assets/78165605/20e28bba-a720-4197-b6c8-a5bbb26814ec width=45% height=45%> <img src=https://github.com/qutip/qutip/assets/78165605/8c987724-d7b1-49bb-ab1b-e25908673425 width=45% height=45%>. For before and after changes the plots using the default colors are the same (these are styles 'l', 's' and 'm' in that order):. <img src=https://github.com/qutip/qutip/assets/78165605/3d995e25-8f7e-4240-9707-cb3d6e562cb5 width=30% height=30%> <img src=https://github.com/qutip/qutip/assets/78165605/d1ac9aed-063d-472d-99b7-b935522f308e width=30% height=30%><img src=https://github.com/qutip/qutip/assets/78165605/4dfaa6d9-3691-4e71-83d9-3418869c0103 width=30% height=30%> . Making more tests I found the error with style 'l' that I mentioned in issue #1974, which consisted in an erratic plotting after sorting the points. Here we can see some results of those tests before the changes (style 'l' using the `point_color` and `point_default_color` variables, plus 'm' with the `point_color` variable):. <img src=https://github.com/qutip/qutip/assets/78165605/f8217060-dbff-4012-bf63-98750744e93f width=30% height=30%> <img src=https://github.com/qutip/qutip/assets/78165605/e4e7be6c-6883-4cf5-a71f-1542aea1be75 width=30% height=30%><img src=https://github.com/qutip/qutip/assets/78165605/e6292945-a742-4a10-b434-86b462044049 width=30% height=30%> . And as we can see after the changes, the 'l' style plotting is as expected and the 'm' style plotting has all the colors we defined:. <img src=https://github.com/qutip/qutip/assets/78165605/67fc3442-ad19-45c2-955e-5a7df85217db width=30% height=30%> <img src=https://github.com/qutip/qutip/assets/78165605/4d87cee0-c3c8-46d6-989b-50fac85ec0cd width=30% height=30%><img src=https://github.com/qutip/qut",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2308#issuecomment-1913220617:1643,test,tests,1643,https://qutip.org,https://github.com/qutip/qutip/pull/2308#issuecomment-1913220617,1,['test'],['tests']
Testability,"turn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E Imp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15336,test,tests,15336,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"turn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_modul",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25236,test,tests,25236,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15615,test,tests,15615,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15011,test,tests,15011,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,uild/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16042,test,tests,16042,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,uild/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36979,test,tests,36979,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"uilder; - _pyxbuilder.install(); - del _pyxbuilder, _Cython, _version2int; - qutip.settings.has_cython = True; + from qutip.utilities import _version2int; + _cy_require = ""0.29.20""; + _cy_unsupported = ""3.0.0""; + if _version2int(_Cython.__version__) < _version2int(_cy_require):; + warnings.warn(; + ""Old version of Cython detected: needed {}, got {}.""; + .format(_cy_require, _Cython.__version__); + ); + if _version2int(_Cython.__version__) >= _version2int(_cy_unsupported):; + warnings.warn(; + ""The new version of Cython, (>= 3.0.0) is not supported.""; + .format(_Cython.__version__); + ); + else:; + # Setup pyximport; + import qutip.cy.pyxbuilder as _pyxbuilder; + _pyxbuilder.install(); + del _pyxbuilder, _Cython, _version2int; + qutip.settings.has_cython = True; ; ; # -----------------------------------------------------------------------------; Index: qutip/qutip/tests/test_brmesolve_td.py; ===================================================================; --- qutip.orig/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; @@ -148,7 +148,8 @@; brme = qutip.brmesolve(H, psi0, times, a_ops, e_ops=[a.dag()*a]); assert np.mean(np.abs(brme.expect[0] - exact) / exact) < 1e-5; ; -; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); @@ -232,6 +233,8 @@; [(a, a.dag()), (spectrum, '1', '1')]]); ; ; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); @pytest.mark.parametrize(""collapse_operators"", [; _2_tuple_split,; pytest.param(_4_tuple_split, marks=pytest.mark.slow),; Index: qutip/qutip/about.py; ===================================================================; --- qutip.orig/qutip/about.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/about.py	2024-01-16 03:54:39.029027082 +0100; @@ -44,7 +44,8 @@; cytho",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543:2302,test,tests,2302,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543,1,['test'],['tests']
Testability,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:1731,test,testing,1731,https://qutip.org,https://github.com/qutip/qutip/issues/1470,5,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"uite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28196,test,testing,28196,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26073,test,tests,26073,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ule to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel implementation can significantly reduce computation times, particularly for larger systems or longer `taulist` arrays, by leveraging multiple CPU cores concurrently. ### Conclusion. The enhancements to the `correlation_2op_1t` function in QuTiP are designed to harness the capabilities of modern multi-core processors, ther",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:2000,Test,Tests,2000,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"ule; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_eq",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27037,test,tests,27037,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"ule_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3885,test,testing,3885,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ule_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16393,test,testing,16393,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ule_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23600,test,testing,23600,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ule_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27206,test,testing,27206,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"ulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the in",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1549,test,test,1549,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,['test'],"['test', 'tests']"
Testability,"ument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions in `qutip.graph` were meant to be distinct from `Qobj`, so ideally they would be beyond our purview in this package. This actually has already lead",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1870,test,test,1870,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['test']
Testability,umpy/f2py/rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py2e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30251,test,tests,30251,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,umpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/h,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46176,test,testing,46176,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],"['testing', 'tests']"
Testability,"un_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26304,test,testing,26304,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,unit test failures with 4.7.5 and scipy 1.12 on aarch64 linux,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['test'],['test']
Testability,"uperop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768188147>:; >; > > # Remember the shape of the underlying space,; >; > # as we'll need this to make Kraus operators later.; >; > - dL, dR = map(int, map(sqrt, q_oper.shape)); >; > + from math import ceil; >; > +; >; >; > ⬇️ Suggested change; >; > -; >; >; > Leaving this blank line here makes the comments above it confusing.; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768189423>:; >; > > # Find the SVD.; >; > U, S, V = svd(q_oper.full()); >; >; >; > # Truncate away the zero singular values, up to a threshold.; >; > - nonzero_idxs = S > thresh; >; > - dK = nonzero_idxs.sum(); >; > - U = U[:, nonzero_idxs]; >; > - S = sqrt(S[nonzero_idxs]); >; > +; >; > + dK = np.count_nonzero(S > thresh); >; >; > I'm just checking why this code was changed. Yes, svd returns the; > singular values in descending order, but what was wrong with previous code; > that didn't rely on that?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768191681>:; >; > > ***@***.***(scope=""function"", params=[; >; > + pytest.param(rand_super, id=""super""); >; > +]); >; > +def superoperator(request, dimension):; >; > + return request.param(dimension); >; >; > This is quite a strange function to read given that it could have just; > been:; >; > @pytest.fixture; >; > def superoperator(dimension):; >; > return rand_super(dimension); >; >; > Maybe there was a plan to do something more? Could we either add another; > param or use the simpler implementation?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768192756>:; >; > > + # FIXME: problem if Kraus index is implicitly; >; > + # ptraced!; >; >; > Could you explain the FIXME a bit more? Was this an existing issue? Can we; > just fix it?; >; > —; > ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001:2337,test,tests,2337,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001,1,['test'],['tests']
Testability,"urn _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (asser",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12616,test,tests,12616,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"urn function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================== short test summary info =========================================================; ERROR qutip/tests/core/test_gates.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/core/test_qobjevo.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_integrator.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_mesolve.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ============================================= 17 deselected, 40 warnings, 4 errors in 5.47s ==============================================; ```. ### Expected Behaviour. No errors. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.14.0; Cython Version: 3.0.10; Matplotlib Version: 3.9.0; Python Version: 3.12.4; Number of CPUs: 10; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/lorenzo/Desktop/virtual-envs/project1/lib/python3.12/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:5576,test,tests,5576,https://qutip.org,https://github.com/qutip/qutip/issues/2472,2,['test'],['tests']
Testability,"urrently having an issue with the qutip.displace operator. I want to solve the dynamics of a 1D Hamiltonian which consists in two terms, the first one a displaced harmonic oscillator and the second one a cosine of the position operator.; Before writing all the Hamiltonian I tried several examples with different potentials : . 1) V(x) = 0.5*x**2 --> H_0 = num(dim)+0.5*qeye(dim) I found the good eigenvalues [0.5,1.5,2.5,....] no matter what was the dimension; 2) V(x) = 0.5*(x-3)**2 --> H_1 = displace(dim,3)*H_0*(displace(dim,3).dag()) I also found the same eigenvalues [0.5,1.5,2.5...] which seems normal because the HO is just shifted on the right of the x axis and its shape doesn't change. But when I tried V(x) = 0.5*(x-3)**2+x --> H_2 = H_1 + position(dim) with dim = 8 for example, I found the following eigenvalues :; [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; 7.35499586 8.06325407] . ; The problem is that the first eigenvalues have really decreased which seems not logical because with the x added, the potential should be slightly higher. I also use in parallel the PySlise package for Python which enables to solve Schödinger equation and finds eigenfunctions and eigenvalues and it gives me :; [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it was giving the good results for 1) and 2)); So I don't understant why qutip doesn't give me the same result, I know I use two different methods; qutip is just finding eigenvalues of a matrix and PySlise solve differential equations but when I don't use displacement operator both always give the same result. I tried to write the displacement operator my self with the create & destroy operators and the Glauber formula because I noticed that the commutation relations were not respected cause of the truncation but I didn't work. If anyone has any ideas I would be very grateful, I have already spent a lot of time looking and I am getting desperate.; I thank you for reading my message, I",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597:1019,log,logical,1019,https://qutip.org,https://github.com/qutip/qutip/issues/1597,1,['log'],['logical']
Testability,"usually change them without thinking. The `assert_` usually gets changed to bare `assert` when I'm actually trying to debug the tests - the bare `assert` gives _far_ more debugging detail with `pytest`, so it's much more helpful. By the way, if you're interested, the list of files which _didn't_ change is; ```text; .codeclimate.yml; .coveragerc; .github/ISSUE_TEMPLATE/bug_report.md; .github/ISSUE_TEMPLATE/feature_request.md; .github/ISSUE_TEMPLATE/others.md; .github/pull_request_template.md; .mailmap; .travis.yml; CODE_OF_CONDUCT.md; LICENSE.txt; README.md; pyproject.toml; qutip.bib; qutip/_mkl/__init__.py; qutip/_mkl/spmv.py; qutip/_mkl/spsolve.py; qutip/_mkl/utilities.py; qutip/about.py; qutip/cite.py; qutip/configspec.ini; qutip/control/__init__.py; qutip/control/cy_grape.pyx; qutip/hardware_info.py; qutip/ipynbtools.py; qutip/logging_utils.py; qutip/matplotlib_utilities.py; qutip/orbital.py; qutip/parallel.py; qutip/qip/__init__.py; qutip/qip/algorithms/__init__.py; qutip/qip/circuit_latex.py; qutip/qip/compiler/__init__.py; qutip/qip/compiler/cavityqedcompiler.py; qutip/qip/compiler/gatecompiler.py; qutip/qip/compiler/spinchaincompiler.py; qutip/qip/device/__init__.py; qutip/qip/gates.py; qutip/qip/operations/__init__.py; qutip/qip/qasm.py; qutip/qip/qip_deprecation.py; qutip/tests/Hadamard_params.ini; qutip/tests/__init__.py; qutip/tests/conftest.py; qutip/tests/pytest.ini; qutip/tests/qasm_files/bracket_error.qasm; qutip/tests/qasm_files/command_error.qasm; qutip/tests/qasm_files/qasm_error.qasm; qutip/tests/qasm_files/teleportation.qasm; qutip/tests/qasm_files/test_add.qasm; qutip/tests/qasm_files/test_custom_gates.qasm; qutip/tests/test_control_pulseoptim.py; qutip/tests/test_entropy.py; qutip/tests/test_fileio.py; qutip/tests/test_parallel.py; qutip/tests/test_partial_transpose.py; qutip/tests/test_qasm.py; qutip/tests/test_qft.py; qutip/tests/test_qpt.py; qutip/tests/test_utilities.py; qutip/ui/__init__.py; qutip/ui/progressbar.py; qutip/utilities.py; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-671534803:1545,test,tests,1545,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-671534803,19,['test'],['tests']
Testability,utils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27561,test,tests,27561,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"utip-dev/lib/python3.8/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/pluggy/manager.py"", line 84 in <lambda>; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/_pytest/config/__init__.py"", line 162 in main; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/_pytest/config/__init__.py"", line 185 in console_main; File ""/Users/jake/.anaconda3/envs/qutip-dev/bin/pytest"", line 11 in <module>; Segmentation fault: 11; ```. This was done with commit 624405e7, SciPy 1.6.2 and Numpy 1.19.5. My BLAS version has chopped and changed an awful lot, but I believe that run was with MKL implementations. The ""random"" stack trace from pytest looks to me like the error came about during garbage collection, and I really don't imagine pytest is to blame. We have in the past had issues with some bad calls in SciPy linalg functions, so it's _possible_ that they are the cause again, but I doubt it; we'd expect the stack traces to reliably show scipy to be the problem in that case. I wasn't able to reproduce this segfault on Windows, but that doesn't mean a huge amount, because I also can't reliably reproduce it on Mac. I suspect that the cause is some dodgy handling of pointers in the `struct CSR_Matrix` type in `qutip/cy/sparse_routines.pxi`, but this is just a suspicion. As far as I remember, I have _never_ seen this segfault when using the `dev.major` branch, which completely removes `CSR_Matrix` and replaces it with a much more robust Cython `CSR` type, which adds to my suspicion, but again, because the reproducer is unreliable, I cannot be sure. I have tried running these failing tests through valgrind before, but unfortunately to no avail.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826099502:7166,test,tests,7166,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826099502,1,['test'],['tests']
Testability,"utip.cy.spmatfuncs.array' has no attribute '__reduce_cython__'; ________________ ERROR collecting qutip/tests/test_brmesolve.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_brmesolve_td.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_brtools.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_control_pulseoptim.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:2110,test,tests,2110,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"v4 has not issue with the new version of cython, only v5.; So we should stay with the newest cython in tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1895#issuecomment-1131947364:103,test,tests,103,https://qutip.org,https://github.com/qutip/qutip/pull/1895#issuecomment-1131947364,1,['test'],['tests']
Testability,ve.py::TestMESolverConstDecay::testMEDecayAsStrList; 9.32s call test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; 8.74s call test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; 8.38s call test_qobjevo.py::test_QobjEvo_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseop,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:2296,Test,TestFileIO,2296,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestFileIO']
Testability,"ve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 4.37e+12); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4916,Test,Test,4916,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,version 3.2.0 can not run self testing. OSX system,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/445:31,test,testing,31,https://qutip.org,https://github.com/qutip/qutip/issues/445,1,['test'],['testing']
Testability,"verting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjP",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11624,test,test,11624,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['test']
Testability,"vfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjE",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5991,Test,TestMESolveStepFuncCoeff,5991,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'tests']"
Testability,"w you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change behaviour (aside from the obvious) within this PR, so I codified those defaults into our file for now. If we want to begin counting the tests in the complexity analysis (and I'm not wildly against that), we can remove the line in a different PR. I suggest that reviewers use the ""Commit filter"" in the ""Files changed"" tab to show only the changes that come after merge commit b3fa49c (the one which actually grafts in `qutip/qutip-doc` - it's near the very bottom of the list), unless you enjoy looking through a binary tonne of commits. Also, I'm laughing at the diff-stat line `+14,785 | -1`. It's the `-1` that makes it art.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:1853,test,tests,1853,https://qutip.org,https://github.com/qutip/qutip/pull/1513,2,['test'],['tests']
Testability,"w/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1584,test,tests,1584,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15870,test,tests,15870,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = False; Qobj data =; [[0. 0.2236068... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. ]]]; kwargs = {'method': <900x900 _CustomLinearOperator with dtype=complex128>}, ss_args = {'ILU_MILU': 'smilu_2', 'M': None, 'all_states': False, 'diag_pivot_thresh': None, ...}, key = 'method'; L = Quantum object: dims = [[[30], [30]], [[30], [30]]], shape = (900, 900), type = super, isherm = False; Qobj data =; [[ 0.... +0.j 0. +0.j 0. +0.j ...; 0. +0.j 0. -0.33835988j -1.45 +0.j ]]; n = 30. def build_preconditioner(A, c_op_list=[], *",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:11584,test,tests,11584,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['test'],['tests']
Testability,"works/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29646,test,tests,29646,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,wrong logic detecting BLAS support discrepant from numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:6,log,logic,6,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['log'],['logic']
Testability,"x measurements given a list of observables. Still needs addition of checks to see if the list of observables is valid ; - `Measurement.measurement_comp_basis(self, state)` : This adds measurement statistics for specific qubit measurements in the computational basis and also returns the collapsed states (without changing the dimensions). ; - `QubitCircuit.run(self, state, cbits)`: Given a ket input to the circuit, applies gates and measurements from the circuit and returns the resultant ket. . Right now, the measurement module is very bare-bones and splintered between the previous code ; from @hodgestar and the new code added by me. The eigenstate based measurements are slightly different than the measurements usually used on circuits (or I might be missing something). Ofc, in the case of measurements on all qubits, they amount to the same result. I have not added tests yet but I have added a basic quantum teleportation notebook. It will be nice to get feedback on testing methods as well as what kind of notebooks the community is interested in. Also, any other feature requests on this module would also be appreciated. . PS: I have also added measurement code from Simon's PR here so maybe we can either add him as a contributor to this PR or figure out something else. ; ; Update: . 1. Addressing some concerns about the PR containing multiple diverging pieces of code, I think classical registers, measurement on the circuit and the classically-controlled gates are best grouped together as they all rely on each other in some ways. The valid concern is that of the Measurement class encapsulating all projective style measurements. I also want to point out that it was raised by @BoxiLi that we may want to move the Gate class and Measurement class completely to qutip.qip.operations to which I agree but I believe that should be addressed in a clean-up PR with naming changes suggested by @ajgpitch. . **Related issues or PRs**; Adds to #1090. **Changelog**; Adds partial and compl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274:2314,test,testing,2314,https://qutip.org,https://github.com/qutip/qutip/pull/1274,1,['test'],['testing']
Testability,x-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12323,test,tests,12323,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17248,test,tests,17248,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17918,test,tests,17918,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17063,test,tests,17063,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17342,test,tests,17342,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17823,test,tests,17823,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy; creating build/temp.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46835,test,tests,46835,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13550,test,tests,13550,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13463,test,tests,13463,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:4850,test,test-environment,4850,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_entropy.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_expect.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:9320,test,test-environment,9320,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_partial_transpose.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:22730,test,test-environment,22730,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_partial_transpose.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_piqs.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_processor.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:24220,test,test-environment,24220,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting tests/test_qubit_evolution.py ________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_qubitcircuit.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qubits.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:31670,test,test-environment,31670,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:2615,test,test-environment,2615,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_qubitcircuit.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qubits.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_rand.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:32415,test,test-environment,32415,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:42100,test,test-environment,42100,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:42845,test,test-environment,42845,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_subsys_apply.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:43590,test,test-environment,43590,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_superop_reps.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_td_formats.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:44335,test,test-environment,44335,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:5595,test,test-environment,5595,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:7085,test,test-environment,7085,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:7830,test,test-environment,7830,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_eigenstates.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_enr_state_operator.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_entropy.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:8575,test,test-environment,8575,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_fastsparse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_fileio.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_floquet.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:11555,test,test-environment,11555,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:15280,test,test-environment,15280,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:16025,test,test-environment,16025,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_propagator.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_ptrace.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_pulse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:26455,test,test-environment,26455,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:36140,test,test-environment,36140,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_se.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:41355,test,test-environment,41355,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_td_formats.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_tensor.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_three_level.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:45825,test,test-environment,45825,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_three_level.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_utilities.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_wigner.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:47315,test,test-environment,47315,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_correlation.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:4105,test,test-environment,4105,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_countstat.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_cy_structs.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_dimensions.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:6340,test,test-environment,6340,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:21985,test,test-environment,21985,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_parallel.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_partial_transpose.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_piqs.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:23475,test,test-environment,23475,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_processor.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_propagator.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_ptrace.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:25710,test,test-environment,25710,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:35395,test,test-environment,35395,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_spinchain.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_spmath.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_states.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:39120,test,test-environment,39120,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_superoper.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_td_formats.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_tensor.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:45080,test,test-environment,45080,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_utilities.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_wigner.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ---------- coverage: platform linux, python 3.6.10-final-0 -----------; Name Stmts Miss Cover; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:48060,test,test-environment,48060,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_brtools.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_cavityqed.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting tests/test_control_pulseoptim.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:3360,test,test-environment,3360,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_entropy.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_expect.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_fastsparse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:10065,test,test-environment,10065,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_expect.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_fastsparse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_fileio.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:10810,test,test-environment,10810,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_fileio.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_floquet.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_gates.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:12300,test,test-environment,12300,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_floquet.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_gates.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_graph.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:13045,test,test-environment,13045,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_lattice.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:16770,test,test-environment,16770,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mcsolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_metrics.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:17515,test,test-environment,17515,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_mesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_metrics.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_mkl.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:18260,test,test-environment,18260,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_metrics.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_mkl.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_noise.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:19005,test,test-environment,19005,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting tests/test_optpulseprocessor.py _______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:21240,test,test-environment,21240,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_ptrace.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_pulse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qft.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:27200,test,test-environment,27200,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qobjevo.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qpt.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting tests/test_qubit_evolution.py ________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:30180,test,test-environment,30180,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qubits.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_rand.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:33160,test,test-environment,33160,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_scattering.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:34650,test,test-environment,34650,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sesolve.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:36885,test,test-environment,36885,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sp_eigs.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_spinchain.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:37630,test,test-environment,37630,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_sparse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_spinchain.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_spmath.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:38375,test,test-environment,38375,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_spmath.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_states.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:39865,test,test-environment,39865,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_states.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_steadystate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_stochastic_me.py _________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:40610,test,test-environment,40610,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_tensor.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_three_level.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_utilities.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:46570,test,test-environment,46570,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_gates.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_graph.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:13790,test,test-environment,13790,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_graph.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_heom_solver.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_interpolate.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:14535,test,test-environment,14535,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_noise.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_operators.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:20495,test,test-environment,20495,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_piqs.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_processor.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting tests/test_propagator.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:24965,test,test-environment,24965,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_pulse.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qft.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:27945,test,test-environment,27945,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qobjevo.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qpt.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:29435,test,test-environment,29435,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_rand.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_random.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting tests/test_rhs_reuse.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:33905,test,test-environment,33905,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_mkl.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_noise.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_openmp.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:19750,test,test-environment,19750,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qft.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________________ ERROR collecting tests/test_qobj.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_qobjevo.py ____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:28690,test,test-environment,28690,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________________ ERROR collecting tests/test_qpt.py ______________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting tests/test_qubit_evolution.py ________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_qubitcircuit.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:30925,test,test-environment,30925,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"xception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; !!!!!!!!!!!!!!!!!!! Interrupted: 60 errors during collection !!!!!!!!!!!!!!!!!!!; =========================== 60 error in 1.85 seconds ===========================; (base) cln-232-18:qutip nathanshammah$; ```; this on the 4.4.0 release version. ; On the dev version, ; ```; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Fatal Python error: Segmentation fault: 11; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Segmentation fault: 11; ```; and with nosetests; ```; (qdev) cln-232-18:qutip nathanshammah$ nosetests; /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjCte size changed, may indicate binary incompatibility. Expected 344 from C header, got 352 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTd size changed, may indicate binary incompatibility. Expected 560 from C header, got 568 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobje",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:29797,test,test,29797,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['test']
Testability,"xception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24865,test,tests,24865,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"xcode12's test quite slow, almost twice the time of other tests...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1348#issuecomment-680003055:10,test,test,10,https://qutip.org,https://github.com/qutip/qutip/pull/1348#issuecomment-680003055,2,['test'],"['test', 'tests']"
Testability,"y - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sparse.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_spinchain.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_spmath.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_states.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_steadystate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_stochastic_me.py - AttributeError: module 'qutip' has no ...; ERROR ../tests/test_stochastic_se.py - AttributeError: module 'qutip' has no ...; ERROR ../tests/test_subsys_apply.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_superop_reps.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_superoper.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_td_formats.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_tensor.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_three_level.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_utilities.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_wigner.py - AttributeError: module 'qutip' has no attribu...; !!!!!!!!!!!!!!!!!!! Interrupted: 65 errors during collection !!!!!!!!!!!!!!!!!!!; ======================== 2 warnings, 65 errors in 2.53s ========================; The command ""pytest --verbosity=1 --disable-pytest-warnings --cov=qutip --pyargs qutip"" exited with 2.; Done. Your build exited with 1.; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:55413,test,tests,55413,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,8,['test'],['tests']
Testability,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15182,test,tests,15182,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,y -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/open,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16296,test,tests,16296,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,y -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26796,test,tests,26796,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36601,test,tests,36601,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36314,test,tests,36314,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"y); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while impor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20192,test,tests,20192,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"y); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while im",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12088,test,tests,12088,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"y-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1881,test,tests,1881,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"y.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a totally fair test, and simply replicate the full functionality of `qutip.displace` (including creating a `Qobj` at the end), my method is ~4x faster on small matrices (`1 <= dim <= 20`) and it only goes up from there (I found it's about ~10x faster at `dim = 1000`, and beyond that `qutip.displace` is too slow to bother). If I store the calculation of the eigensystem, and output an `ndarray` instead of converting to `csr_matrix` (and so don't produce a `Qobj`), then I find speed ups in getting the operator for a new `alpha` as ~100x for small matrices and ~25x for large ones. The larger a matrix is, the more the computational time is dominated by the dense dot product at the end. Code:; ```python; class Displacer:; def __init__(self, n):; # The off-diagonal of the real-symmetric similar matrix T.; sym = (2*(np.arange(1, n)%2) - 1) * np.sqrt(np.arange(1, n)); # Solve the eigensystem.; self.evals, self.evecs = scipy.linalg.eigh_tridiagonal(np.zeros(n), sym); self.range = np.arange(n); self.t_scale = 1j**(self.range % ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:2369,test,test,2369,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['test'],['test']
Testability,"y/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Content",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12293,test,test,12293,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,y/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42295,test,tests,42295,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42720,test,tests,42720,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,y/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45500,test,testing,45500,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,y3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'quti,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:50374,test,test-environment,50374,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"y; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 30 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ===================================================== 51 deselected, 52 warnings, 30 errors in 0.97s =====================================================`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:31013,test,tests,31013,https://qutip.org,https://github.com/qutip/qutip/issues/2180,9,['test'],['tests']
Testability,y_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ====================================================================================,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7138,test,tests,7138,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,ycler; - cython; - dbus; - decorator; - defusedxml; - docutils; - entrypoints; - expat; - fastcache; - flake8; - fontconfig; - freetype; - fribidi; - gast; - gettext; - glib; - gmp; - gmpy2; - graphite2; - grpcio; - gsl; - h5py; - harfbuzz; - hdf5; - html5lib; - icu; - idna; - imagesize; - intel-openmp; - ipykernel; - ipython; - ipython_genutils; - isort; - jbig; - jedi; - jinja2; - jpeg; - jsonschema; - jupyter_client; - jupyter_contrib_core; - jupyter_contrib_nbextensions; - jupyter_core; - jupyter_highlight_selected_word; - jupyter_latex_envs; - jupyter_nbextensions_configurator; - keras-applications; - keras-preprocessing; - keyring; - krb5; - lazy-object-proxy; - libcurl; - libcxx; - libcxxabi; - libedit; - libffi; - libgcc; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-ser,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:1460,mock,mock,1460,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['mock'],['mock']
Testability,"yep just a note that i will take a look at this. I was using a very similar method for the problem in the example notebook, will take a closer look at this and get back with some thoughts on whether to keep it or not and a potential test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2152#issuecomment-1515698162:233,test,test,233,https://qutip.org,https://github.com/qutip/qutip/pull/2152#issuecomment-1515698162,1,['test'],['test']
Testability,ying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/fin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32987,test,tests,32987,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,ying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43715,test,tests,43715,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ying superoperators with different representations; > > > warnings.warn(msg); > > > ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11521,Test,TestMatrixVector,11521,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['Test'],['TestMatrixVector']
Testability,yne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[QFT-Qobj propagation]; 2.65s call test_control_pulseoptim.py::TestOptimization::test_crab[Qobj propagation]; 2.57s call test_wigner.py::test_wigner_compare_methods_dm; 2.46s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Symplectic coupled oscillators-Qobj propagation]; 2.31s call test_parallel.py::test_parfor1; 2.11s call test_wigner.py::test_wigner_bell1_su2parity; 1.90s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Ising state-to-state-Qobj propagation]; 1.86s call test_sparse.py::test_sp_profile; 1.66s call test_correlation.py::test_correlation_solver_equivalence[es-legacy]; 1.65s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Lindbladian amplitude damping channel-Qobj propagation]; 1.56s call test_correlation.py::test_correlation_solver_equivalence[es]; 1.43s call test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; 1.43s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-default propagation]; 1.40s call test_correlation.py::test_correlation_solver_equivalence[es-steady state]; 1.38s call test_correlation.py::test_correlation_solver_equivalence[es-steady state-legacy]; 1.32s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsFunc; 1.17s call test_optpulseprocessor.py::TestOptPulseProcessor::test_multi_gates; 1.13s call test_utilities.py::test_unit_clebsch; 1.08s call test_brtools.py::test_vec_to_eigbasis; 1.03s call test_brtools.py::test_eigvec_to_fockbasis; 1.02s call test_subsys_apply.py::TestSubsysApply::test_ComplexSingleApply; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:4127,Test,TestOptimization,4127,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,7,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'TestMESolveSuperInit', 'TestOptPulseProcessor', 'TestOptimization', 'TestSubsysApply', 'testMETDDecayAsFunc']"
Testability,ynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42933,test,tests,42933,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"ype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singular(5); q = Qobj(data); randN = 10 * np.random.random(); - q = q / randN; + q /= randN; assert np.allclose(q.full(), data / randN); ; ; diff --git a/qutip/visualization.py b/qutip/visualization.py; index 47f40fc1..21ef765e 100644; --- a/qutip/visualization.py; +++ b/qutip/visualization.py; @@ -416,7 +416,7 @@ def _stick_to_planes(stick, azim, ax, M, spacing):; Stick to xz and yz planes; """"""; if stick is True:; - azim = azim % 360; + azim %= 360; if 0 <= azim <= 90:; ax.set_ylim(1 - .5,); ax.set_xlim(1 - .5,); @@ -879,7 +879,7 @@ def plot_energy_levels(H_list, N=0, labels=None, show_ylabels=False,; ; for H1 in H_list[1:]:; ; - H = H + H1; + H += H1; evals1 = H.eigenenergies(); ; for e_idx, e in enumerate(evals1[:N]):; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:26556,assert,assert,26556,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,3,['assert'],['assert']
Testability,"ys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:135: in _2ls_g2_0; correlation = qutip.correlation_3op_2t(H, start, times, times, [sp],; /usr/lib/python3/dist-packages/qutip/correlation.py:324: in correlation_3op_2t; return _correlation_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1030: in _correlation_2t; return _correlation_me_2t(H, state0, tlist, taulist,; /usr/lib/python3/dist-packages/qutip/correlation.py:1069: in _correlation_me_2t; rho_t = mesolve(H, rho0, tlist, c_ops, [],; /usr/lib/python3/dist-packages/qutip/mesolve.py:231: in mesolve; ss = _mesolve_QobjEvo(H, c_ops, tlist, args, options); /usr/lib/python3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:14212,test,tests,14212,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ython 2.7 (Ubuntu 14.10) on my local system, this change significantly increased the performance. For some reason, the change was less pronounced using Python 3.4 on the same system (under 1 second change), but in both cases, this PR resulted in test times that were at least as fast as master. ```; cgranade@berith:~/Dropbox/software-projects/qutip (master u=)$ time nosetests qutip; ..............................................................................................SSSSSSS............................................................................................................................................................................................................................................/home/cgranade/Dropbox/software-projects/qutip/qutip/qobj.py:434: UserWarning: Multiplying superoperators with different representations; warnings.warn(msg); .............................................; ----------------------------------------------------------------------; Ran 382 tests in 292.925s. OK (SKIP=7). real 4m54.023s; user 11m20.584s; sys 0m5.356s; cgranade@berith:~/Dropbox/software-projects/qutip (master u=)$ git checkout fix-isherm-lazy ; Switched to branch 'fix-isherm-lazy'; cgranade@berith:~/Dropbox/software-projects/qutip (fix-isherm-lazy)$ time nosetests qutip; ..............................................................................................SSSSSSS.............................................................................................................................................................................................................................../home/cgranade/Dropbox/software-projects/qutip/qutip/qobj.py:436: UserWarning: Multiplying superoperators with different representations; warnings.warn(msg); .............................................; ----------------------------------------------------------------------; Ran 369 tests in 283.042s. OK (SKIP=7). real 4m43.554s; user 10m51.428s; sys 0m5.080s; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/359#issuecomment-130556638:1930,test,tests,1930,https://qutip.org,https://github.com/qutip/qutip/pull/359#issuecomment-130556638,1,['test'],['tests']
Testability,"ython/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py:1: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py:2: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Develo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:5120,test,test,5120,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Fram",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7854,test,test,7854,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24913,test,test,24913,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13214,test,test,13214,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18482,test,test,18482,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"ython3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3419,Test,TestCircuitProcessor,3419,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,"✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4800,Test,TestKrylovSolve,4800,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Usability," (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency; print(w); gamma_phi = 44200000; gamma_minus = 100000000. epsilon = g*u*b/h*(2*cmath.pi); Delta = g*u*b_AC/h*(2*cmath.pi). H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy. print(abs(((w-w0)/(w)))*epsilon/2). #note here the final time satisfies: omega*t_final = pi/2; times=np.linspace(0, 0.0000001, 1000). #our initial qubit state ; state0=(state_z_plus)/(np.sqrt(1)). H/(2*cmath.pi). results=q.mesolve(H, state0, times, c_ops=[cmath.sqrt(gamma_phi/2)*sz+ cmath.sqrt(gamma_minus)*sm], e_ops=[sx, sy, sz], options=qutip_options). fig, ax=plt.subplots(); ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$'); ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$'); ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$'); ax.set_xlabel(""time""); ax.legend();. import imageio; def animate_bloch(values):; b = q.Bloch(); images=[] ; b.point_marker = ['o']; b.point_size = [30]; for i in range(len(values)):; b.clear(); b.add_states(values[i]); b.add_states(values[:(i+1)],'point'); beans = 'beans.png'; b.save(beans); images.append(imageio.imread(beans)); imageio.mimwrite('beans.gif',images). values = []; for t in range(0,len(times),30):; values.append((results.states[t])); animate_bloch(values). from IPython.core.interactiveshell import InteractiveShell; InteractiveShell.ast_node_interactivity = ""all""; from IPython import display. from pathlib import Path; gifPath = Path('beans.gif'); with open(gifPath,'rb') as f:; display.Image(data=f.read(), format='png'). ![g](https://user-images.githubusercontent.com/29261370/105053116-36429880-5a36-11eb-978b-8804dd1e679e.PNG); ![sp](https://user-images.githubusercontent.com/29261370/105053129-3c387980-5a36-11eb-9c0d-da3fd30bbaf5.PNG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418:2949,clear,clear,2949,https://qutip.org,https://github.com/qutip/qutip/issues/1418,1,['clear'],['clear']
Usability," > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_me",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:15195,simpl,simple,15195,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability," Currently it is used in the following files. Can we put the multiprocessing stuff in a file called `multiprocessing_config.py` and run it to get the settings in `__init__` at all the places where we need multiprocessing.; ```; /Users/shahnawaz/dev/qutip/qutip/__init__.py:; 33 from __future__ import division, print_function, absolute_import; 34 import os; 35: # Fix the multiprocessing issue with NumPy compiled against OPENBLAS; 36 if 'OPENBLAS_MAIN_FREE' not in os.environ:; 37 os.environ['OPENBLAS_MAIN_FREE'] = '1'; ..; 149 # cpu/process configuration; 150 #; 151: import multiprocessing; 152 ; 153 # Check if environ flag for qutip processes is set; ...; 164 qutip.settings.num_cpus = info['cpus']; 165 else:; 166: qutip.settings.num_cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_count()); 94 return {'os': 'Windows', 'cpus': ncpus}; 95 . /Users/shahnawaz/dev/qutip/qutip/mcsolve.py:; 225 if config.options.num_cpus == 1:; 226 # fallback on serial_map if num_cpu == 1, since there is no; 227: # benefit of starting multiprocessing in this case; 228 config.map_func = serial_map; 229 ; ...; 264 time_type, h_stuff, c_stuff = _td_format_check(H, c_ops, 'mc'); 265 c_terms = len(c_stuff[0]) + len(c_stuff[1]) + len(c_stuff[2]); 266: # set time",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:1511,simpl,simply,1511,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['simpl'],['simply']
Usability," Fixed the issues in correlation.py, as far as I know; - Turns out the issue here was that I never updated correlation.py to; my most current version, which should only add in flimesolve as an option; for solvers (with an if statement or two to get the Hamiltonian into a; FloquetBasis object if flimesolve is the selected solver). Thanks again for your feedback!. On Mon, Jun 26, 2023 at 6:32 PM Fenton Clawson ***@***.***> wrote:. > Hey Eric,; >; > Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Something is strange in floquet.py, did you include change not meant to; >> be here?; >> Both floquet.py and flimesolve.py have the original fmesolve and the new; >> flimesolve...; >>; >> Tests should pass.; >> Right now, scipy 1.11 breaks cvxpy which we use so this breaks a few; >> tests, but the changes you made to correlation.py also break the tests.; >> We will want tests for the new solver.; >>; >> Could you also review the style (pep8).; >>; >> - There are some very long line, we use the official 80 characters; >> width.; >> - space are not uniform, sometime they are doubled, other time; >> missing.; >> - There are rules for empty lines, there ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:1809,simpl,simply,1809,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['simpl'],['simply']
Usability," Monte-carlo: Time-dependent H (func format) ... ok; > > > Monte-carlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementation",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5371,simpl,simple,5371,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability," This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is simple and intuitive until tensor-product structures are considered. At this point, it starts to become more complicated. In particular, the `type` of a `Qobj` is tied to its dimensions, but it becomes difficult to define this once there is tensor product stru",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2928,simpl,simple,2928,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simple']
Usability," [Owner rights](https://github.com/orgs/qutip/people?query=role%3Aowner#) in QuTiP’s main Github Repository (qutip/qutip) that have been active in the past one year. . Additional Admin Team members can be nominated by the admin team among core developers and major contributors, and are voted by the admin team with a majority vote. Prospective Admin Team members can send self-candidatures with their proposed candidature, and two brief statements: one explaining their past involvement with the QuTiP project, and one with their commitment to the QuTiP for the future, e.g., how they would help and support the project in their activity. Emeriti Admin Team members, including previous core contributors, are listed on the QuTiP website (at qutip.org/devs), governance (github.com/qutip/governance) and documentation. **<span style=""text-decoration:underline;"">Decisions</span>**; Each admin team member has a vote in decisions. As much as possible, admins try to take in feedback on changes from the wider community and timely communicate major changes in the software. . **<span style=""text-decoration:underline;"">Communications</span>**; The admin team agrees to keep in touch regularly, through the qutip-admin channel or chosed communication medium, through the repositories’ maintenance, and with regular virtual or in-person meetings. The admin team drafts a report, [once] a year and submits it to the Board to inform it of developments on the project. ### 3. Board; **Members of the Board make sure that the Admin Team and project is well supported financially and logistically.** Thanks to them helping enable the financial and logistics support, through scientific advisory and by keeping an eye on the project, they make the life of the admin team easier. . **<span style=""text-decoration:underline;"">Tasks</span>**; Board members are volunteers that pledge to:. - Meet** [once] **a year to review the development of the project (also online).; - Be consulted for scientific advice by th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:9955,feedback,feedback,9955,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['feedback'],['feedback']
Usability," `adams`, `bdf`, `dop853`, `lsoda`, `vern7`, `vern9`, `diag`. The 4 first are from `scipy.integrate.ode`, the 3 last are ours. `vern7` and `vern9` are runge-kutta methods of 7th and 9th order using [verner's most efficient coefficient](http://people.math.sfu.ca/~jverner/) with dense output. `diag` diagonalize a constant system and solve the ODE in that basis.; The minimum that must be given for a new evolver are the `prepare`, `set_state`, `get_state` and `step` methods. `evolver_collection` work as a dispatcher over evolvers. Solvers obtain their evolver instance using `evolver_collection[method, rhs]` with both `method` and `rhs` taken from the options. `evolver_collection` keep a list of description, used options and capacities for each member. It can list the available method matching desired condition. The `rhs` options is not used yet in this PR, it is for future Adaptative Hilbert Space and other modification to the ODE that affect the matrix-state product. #### Other utilities and code added in this PR:. ##### `SolverQEvo`, `Feedback`:; Wrapper around `QobjEvo` that handle feedback arguments and provide `ndarray` interface. ##### qutip/solver/ode/...; Code qutip's evolver, mostly for Verner's method. . ##### progress_bar:; Added a progress bar passed on `tqdm`. `update` no longer need the iteration number. ##### parallel map:; - Added a `loky` based parallel map, hopefully will help windows users.; - Added a `reduce_func` input. Presently the map function is saving all results and the average, std, etc. are only computed at the end. There was no real advantage in saving only average values since all trajectories were in memory at the end of the map. But users expected lower memory usage when asking for only the results average.; - Added `timeout` options to the map, when passed, no error is raised but obtained results are returned. This allow to ask for 30s worth of trajectories instead of fixing a number. **Related issues or PRs**; Build on top of the #1407",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409:2275,Feedback,Feedback,2275,https://qutip.org,https://github.com/qutip/qutip/pull/1409,3,"['Feedback', 'feedback', 'progress bar']","['Feedback', 'feedback', 'progress bar']"
Usability," a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a good amount of free time at the same time as a `qutip` release h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:1027,learn,learning,1027,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['learn'],['learning']
Usability," calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qutip. ## Citations. [1] D. Aharonov, A. Kitaev, and N. Nisan, “Quantum circuits with mixed states,” in Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 20–30, 1998.; [2] A. Gilchrist, N. K. Langford, and M. A. Nielsen, “Distance measures to compare real and ideal quantum processes,” Physical Review A, vol. 71, no. 6, p. 062310, 2005; [3] J. Watrous, “Simpler semidefinite programs for completely bounded norms,” arXiv preprint arXiv:1207.5726, 2012.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:1977,simpl,simple,1977,https://qutip.org,https://github.com/qutip/qutip/pull/2416,3,"['Simpl', 'simpl']","['Simpler', 'simple']"
Usability," coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:1313,simpl,simply,1313,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['simpl'],['simply']
Usability," current documentation I cannot find anywhere how the underdamped spectral density for the HEOM module (i.e. `UnderDampedBath`) is defined. While for the `gamma` and `w0` parameters this is quite straightforward, different authors use very different conventions in the prefactors multiplying the spectral density (factors of two, pi, gamma, w0, etc.). This makes it very hard to understand how the `lam` parameter is exactly defined. Having a proper understanding of the `lam` parameter is quite essential to properly compare with the results obtained via other methods. I think it would be quite useful to explicitly write down the mathematical formula of the spectral density being used in the documentation. In the mean time, I would also appreciate if anyone with knowledge of the proper definition would be kind enough to share it here. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. I would expect the documentation to make it clear what each parameter controls in the spectral density definition. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.23.1; Scipy Version: 1.8.1; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.10.5; Number of CPUs: 12; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/fc/bin/venvs/qutip/lib/python3.10/site-packages/qutip; =====================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1959:1015,clear,clear,1015,https://qutip.org,https://github.com/qutip/qutip/issues/1959,1,['clear'],['clear']
Usability," define all operations in the data layer as well:; ```python; >>> data.matmul[NewDataType, data.CSR]; <indirect specialisation (NewDataType, CSR, CSR) of matmul>; ```; All of the data layer will now work seamlessly with the new type, even though this is actually achieved by conversion to and from a known data type. There was no need to call anything other than `data.to.add_conversions`. Internally, this is achieved by `data.Dispatcher.__init__` storing a reference to itself in `data.to`, and `data.to` calling `rebuild_lookup` as part of `add_conversions`. Now the user only needs to add in the specialisations that they actually need for the bottle-neck parts of their application, and leave the dispatcher to handle all other minor components by automatic conversion. As in the previous subsection, they do this by calling `add_specialisations` on the relevant operations. #### Creating a new dispatcher. In most user-defined functions which operate on `Qobj.data` it will be completely sufficient for them to simply call `data.to(desired_type, input_data)` on entry to the function, and then they can guarantee that they are always working with the type of data they support. However, in some cases they may want to support dispatched operations in the same way that we do within the library code. For this reason, the data layer exports `Dispatcher` as a public symbol. The minimal amount of work that needs to be done is to call the initialiser, and then call `add_specialisations`. For example, let's say the user has defined two specialisations for their simple new function `add_square`:; ```python; >>> def add_square_csr(left, right):; ... return data.add_csr(left, data.matmul_csr(right, right)); ...; >>> def add_square_dense(left, right):; ... return data.add_dense(left, data.matmul_dense(right, right)); ...; ```; (Ignore for now that this would be better achieved by just using the dispatchers `data.add` and `data.matmul` directly.) Now they create the dispatcher simply by doing",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:12264,simpl,simply,12264,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['simpl'],['simply']
Usability," excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand 2 to N (using swap) ... ok; gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; gates: expand 3 to 3 with permuTation (using toffoli) ... ok; gates: swap gate ... ok; qutip.tests.test_gates.TestGates.test_are_cliffords ... ok; qutip.tests.test_gates.TestGates.test_clifford_group_len ... ok; Graph: Graph Degree ... ok; Graph: Breadth-First Search ... ok; Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:9091,simpl,simple,9091,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['simpl'],['simple']
Usability," for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2263,simpl,simple,2263,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['simpl'],['simple']
Usability," functions. If you _need_ `Qobj` to be array, be explicit and call `Qobj.full()`. Notable changes in `Qobj`:; - matrix multiplication now contracts to a scalar if doing `bra @ ket`; - matrix multiplication no longer contracts 1D subspaces, but the new `Qobj.contract()` will do this; - arithmetic operations are much more strict about enforcing `Qobj.type`-safety; - `Qobj` understands the `@` operator to mean matrix multiplication, but also maintains the same behaviour of treating `Qobj * Qobj` as matrix multiplication. Package organisation:; - the solvers are now physically contained in `qutip.solve`, but are still logically available in the `qutip` namespace. This means that direct imports (like `from qutip.mesolve import mesolve`) will fail (it becomes `from qutip.solve.mesolve import mesolve`), but the ""proper"" unqualified access `from qutip import mesolve` remains unchanged. This is for internal code organisation purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----------. _Original top comment:_. Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done compl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:2202,simpl,simple,2202,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['simpl'],['simple']
Usability," like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > -------------",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:1050,guid,guide,1050,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,1,['guid'],['guide']
Usability," of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanholman/opt/anaconda3/envs/qutip/lib/python3.7/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:1720,simpl,simple,1720,https://qutip.org,https://github.com/qutip/qutip/issues/1124,1,['simpl'],['simple']
Usability," of `__qutip_qobj_interface__`, as in the conversion it might be necessary to copy anyway so the downstream implementor is responsible for taking care of the copy if requested. ```python; class QobjMetaclass(type):; def __call__(cls, inpt=None, dims=None, shape=None,; type=None, isherm=None, copy=True,; fast=False, superrep=None, isunitary=None):. if isinstance(inpt, Qobj):; pass; elif hasattr(inpt, ""__qutip_qobj_interface__""):; inpt_data = inpt.__qutip_qobj_interface__(copy=copy). inpt = inpt_data['matrix']; dims = inpt_data['dims']; copy = False. obj = cls.__new__(cls, inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); obj.__init__(inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); return obj. class Qobj(object, metaclass=QobjMetaclass):; ...; ```; I'm quite sure this implementation can be improved, however. On the NetKet side, the implementation is very simple. At the moment we only support operators from H->H.; ```python; class AbstractOperator:; ... ; def __qutip_qobj_interface__(self, dims, copy=True):; return {'matrix': stacked_rows_to_stacked_cols(self.hilbert, self.to_sparse()),; 'dims': [list(self.hilbert.shape), list(self.hilbert.shape)]}; ```. This already is quite nice and allows for quick and simple interoperability. Some comments/questions:; - Qutip uses stacked columns (column major) ordering for the tensor products, as opposed to NumPy `kron` ordering that is stacked rows, right? ; - To signal that an object is a super-operator (Liouvillian) is it sufficient to pass a correctly constructed `dims` or I should also provide `superrep`?; - Is there a reason you don't accept tuples as inputs to `basis(dims, x)` and other similar functions, but only lists? ; - I played around with auto-converting input hamiltonians and jump operators in `qutip.sesolve` and `mesolve` to `Qobj` if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601:1661,simpl,simple,1661,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601,1,['simpl'],['simple']
Usability," place:; ```python; >>> import qutip; >>> import numpy as np; >>> np.array(qutip.qeye(2)); array([[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]); >>> np.array([qutip.qeye(2), qutip.qeye(2)]) # Not ideal, but not our fault.; array([[[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]],. [[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]]); >>> np.sin(qutip.qeye(2)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); >>> np.sin(np.array(qutip.qeye(2))); array([[0.84147098+0.j, 0. +0.j],; [0. +0.j, 0.84147098+0.j]]); ```; Alternatively, if people _really_ want to be able to use ufuncs on `Qobj`, it is possible to define `__array_ufunc__` in such a way that we allow only some `ufuncs` to operate. Doing this leaves us susceptible to problems interacting with other libraries that implement this, though, beacuse whichever class has the highest `__array_priority__` gets to dictate what makes sense. Unless there's a really clear _need_ for this, I don't think it's a good idea. For completeness, the rest of this comment is stuff I find out while researching. ## The `__array__()` and `__array_wrap__()` methods. These have been special methods understood by numpy since at least 1.3 (2009 - the oldest docs still on scipy.org), and I imagine long before then too. `__array__` is mentioned (and still is) in the documentation of `np.array`, which is unchanged since 2009 and says that its argument should be; > An array, any object exposing the array interface, an object whose `__array__` method returns an array, or any (nested) sequence. and `__array_wrap__` is like the reverse - it's for coercing numpy arrays back into this class. If we were to keep `__array__` in `Qobj`, we should also implement `__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `inp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:2670,clear,clear,2670,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['clear'],['clear']
Usability," pull request for a subpackage for non-Markovian solvers, called `nonmarkov`. This idea was mentioned in issue #384. The subpackage now includes two modules, with two quite different non-Markov solvers:. `transfertensormethod`: This module is an implementation of the ""Transfer Tensor Method"" (TTM) introduced by Cerrillo and Cao in [Phys. Rev. Lett 112, 110401 (2014)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.112.110401) ([arXiv link](http://arxiv.org/abs/1307.7743)). TTM is a completely general purpose approach to non-Markovian problems. It takes as input a collection of precomputed dynamical maps for a list of intial ""learning times"", and then tries to extrapolate the non-Markovian dynamics to larger times. `memorycascade`: This module implements the method introduced in [Phys. Rev. Lett 115, 060402 (2015)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.115.060402) ([arXiv link](http://arxiv.org/abs/1502.06959)) to integrate the dynamics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:1043,feedback,feedback,1043,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['feedback'],['feedback']
Usability,"# Change log; Right now, maintainers need to go through the PRs in `qutip/qutip` to update the changelog. This is quite time consuming. . There may be automated tools to generate the change log. . I propose at minimum to keep a changelog file also in `qutip/qutip`, asking contributors to update it before merging the PR. This makes it simpler than for them to open another PR to `qutip/qutip-doc`. # Classes and functions; As note in the [`release_distribution`](https://github.com/qutip/qutip-doc/blob/master/release_distribution.rst) guidelines, one should check that new functions and classes are included in the `classes.rst` and `functions.rst` files. Having a recipe to check this quickly or automatically, maybe with a script like this [one](https://stackoverflow.com/questions/1796180/how-can-i-get-a-list-of-all-classes-within-current-module-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1533:336,simpl,simpler,336,https://qutip.org,https://github.com/qutip/qutip/issues/1533,2,"['guid', 'simpl']","['guidelines', 'simpler']"
Usability,"## Changelog; The changelog file is present in `qutip/qutip-doc`. This means that for each new release, the maintainers need to go through the merged PRs and update the file accordingly. . I propose introducing a copy of the changelog file, which would simplify maintenance: each contributor could update their own contribution without opening a PR in the separate repository, which often does not happen. A message of a basic template with checklist could be prompted in the PR for itself. . ## PR template; To prompt these actions, just like for the changelog, [a template](https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors) with suggested checklist could be made in the PRs. . ## Repositories refactoring ; Actually, this is all part of a wider problem for which the `qutip-doc` does not get well updated in general. In Qutip 4.5.0 I added a lot of missing elements to `functions.rst` and `classes.rst` in the api-doc. Moreover, the User guide is seldom updated. Maybe, moving the `qutip-doc` repository in the main `qutip/qutip` repository could help in this regard.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1172:253,simpl,simplify,253,https://qutip.org,https://github.com/qutip/qutip/issues/1172,2,"['guid', 'simpl']","['guide', 'simplify']"
Usability,"## Preliminaries; The diamond norm [1] is a commonly used metric in quantum information theory for calculating the distance between two quantum channels. It has a number of useful properties making it the gold standard [2] in the field for several applications. In general, a complex semidefinite program is required to calculate the diamond norm. Although elegant, this approach is very inefficient. Unfortunately, no alternative method has been discovered for calculating the diamond norm in the general case of CPTP channels. However, in the special case where we are trying to calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (cu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:993,simpl,simplified,993,https://qutip.org,https://github.com/qutip/qutip/pull/2416,1,['simpl'],['simplified']
Usability,"### Bug Description. A new warning is raised when using qutip with numpy 1.25:. `photonic-quantum-circuit-simulator-8sWQjw5Q-py3.9\lib\site-packages\qutip\superop_reps.py:241: DeprecationWarning: product is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use prod instead.; nq = _nq(q_oper.dims)`. Should be a simple fix of renaming `np.product` by `np.prod`. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. No warnings should be raised. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.9.13; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. The whole codebase should be searched for `np.product`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2179:334,simpl,simple,334,https://qutip.org,https://github.com/qutip/qutip/issues/2179,1,['simpl'],['simple']
Usability,### Bug Description. As reported on the QuTiP mailing list:. > I just find that one of our documentation pages has a plot that repeats several times and makes the page hard to read. I attach the link below: https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html. This is because this documentation page doesn't manage and clear the plot context properly. ### Code to Reproduce the Bug. ```shell; See the generated documentation.; ```. ### Code Output. _No response_. ### Expected Behaviour. The plot should only appear once. ### Your Environment. ```shell; The documentation online at https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html.; ```. ### Additional Context. _No response_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2007:237,guid,guide,237,https://qutip.org,https://github.com/qutip/qutip/issues/2007,3,"['clear', 'guid']","['clear', 'guide']"
Usability,"### Bug Description. Construct a density matrix, via some array creation method (in this case numpy - haven't checked with others). Create a `rho0` for mesolve to use with the flat array while explicitly specifying the matrix dimensions in the `dims` parameter. Upon passing the density matrix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1782:338,simpl,simple,338,https://qutip.org,https://github.com/qutip/qutip/issues/1782,1,['simpl'],['simple']
Usability,"### Bug Description. Hello, I just submitted this report but the system seems to have crashed. I am re-submitting it with a shorter title. If there is a duplicate, please disregard the first one. Thanks!. I have python scripts running qutip a couple of years ago. I never touched my qutip installation. Today I tried to run it again and got an error. It happened with the simple line ""_from qutip import *_"" (See error output in the output field below). So what changed? This happens even when I simply run the script from the command line, or run this command in the web-based Jupyter environment. I tried several solutions suggested on the web and by ChatGPT to uninstall/reinstall and roll back versions etc. Nothing worked. I got the exact same error each time.; The error happens as early as Import qutip. ### Code to Reproduce the Bug. ```shell; from qutip import *; ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); ~\AppData\Local\Temp/ipykernel_5760/2092932745.py in <module>; ----> 1 from qutip import *. ~\Anaconda3\lib\site-packages\qutip\__init__.py in <module>; 31 #; 32 ; ---> 33 from .core import *; 34 from .solver import *; 35 from .solver import nonmarkov. ~\Anaconda3\lib\site-packages\qutip\core\__init__.py in <module>; 1 from .options import *; 2 from .coefficient import *; ----> 3 from .qobj import *; 4 from .cy.qobjevo import *; 5 from .expect import *. ~\Anaconda3\lib\site-packages\qutip\core\qobj.py in <module>; 1806 from qutip.core.superoperator import vector_to_operator, operator_to_vector; 1807 from qutip.core.tensor import tensor_swap, tensor; -> 1808 from qutip.core import metrics as mts. ~\Anaconda3\lib\site-packages\qutip\core\metrics.py in <module>; 17 from .operators import qeye, qeye_like; 18 from .states import ket2dm; ---> 19 from .semidefinite import dnorm_problem, dnorm_sparse_problem; 20 from . import data as _data; 21 . ~\Anaconda3\lib\s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2500:372,simpl,simple,372,https://qutip.org,https://github.com/qutip/qutip/issues/2500,2,['simpl'],"['simple', 'simply']"
Usability,"### Bug Description. I attempted to recreate [this animation](https://raw.githubusercontent.com/qutip/qutip/master/doc/figures/bloch_decay.mp4) of the Bloch sphere using the instructions in the [Plotting on the Bloch Sphere/Directly Generating an Animation](https://qutip.org/docs/latest/guide/guide-bloch.html#directly-generating-an-animation) section of the user guide. Using Matplotlib 3.4.3 gives a warning,. > MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes. The movie is produced fine. If I use Matplotlib 3.7.1, the movie file contains a white background and no drawn Bloch sphere; see [here](https://user-images.githubusercontent.com/906390/232609935-a701d20f-aab0-43f8-bf27-7b7088517cf2.mp4). This issue appears to be fixed by modifying the line `ax = Axes3D(fig, azim=-40, elev=30)` in the example to `ax = fig.add_subplot(111, projection=""3d"", elev=30, azim=-40)`. ### Code to Reproduce the Bug. ```shell; import numpy as np; import qutip; from matplotlib import pyplot, animation; from mpl_toolkits.mplot3d import Axes3D. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); sm = qutip.sigmam(); H = w * (np.cos(theta) * sz + np.sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sz); # evolve and calculate expectation values; output = qutip.mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], outp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2156:288,guid,guide,288,https://qutip.org,https://github.com/qutip/qutip/issues/2156,3,['guid'],"['guide', 'guide-bloch']"
Usability,"### Bug Description. I'm unable to run a time-dependent Hamiltonian, or even compile one with a string coefficient. . I tried to copy the example code on the website ; [](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html); as well as write a simple script (below), but both fail. The output is a traceback which ends with the following errors and exceptions:; ```; **ImportError: Building module cqobjevo_compiled_coeff_8478972439442 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']; Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_8478972439442.pyx**; ```. I'd appreciate some help, as my code requires the string input to run faster, with the speed-up offered by Cython. It is quite slow with the function-based input. . ### Code to Reproduce the Bug. ```shell; import qutip as qp; import numpy as np; import matplotlib.pyplot as plt. excited = qp.basis(2, 1); ground = qp.basis(2, 0). H0 = qp.sigmaz(); H1 = qp.sigmax() # time-dependent term. H = [H0,[H1, 'A * exp(-(t / sigma) ** 2)']]. t = np.linspace(-1, 1, 200) # Define time vector; args = {'A': 6, 'sigma': 0.145}; output = qp.mesolve(H, ground, t, e_ops = [qp.sigmaz()], args=args); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; DistutilsPlatformError Traceback (most recent call last); ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 215 inplace=build_inplace, language_level=language_level); 216 mod = imp.load_dynamic(name, so_path). ~\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 inplace=inplace,; --> 191 reload_support=pyxargs.reload_support); 192 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. ~\Anaco",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1914:201,guid,guide,201,https://qutip.org,https://github.com/qutip/qutip/issues/1914,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"### Bug Description. In some rare cases, like the example below, simdiag does not return orthonormal eigenvectors, despite this always being possible. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import simdiag, Qobj. a = np.array([[1, 0, 1, -1, 0],; [0, 4, 0, 0, 1],; [1, 0, 4, 1, 0],; [-1, 0, 1, 4, 0],; [0, 1, 0, 0, 4]]). b = np.eye(5). evals, evecs = simdiag([Qobj(a), Qobj(b)]); evecs = np.array([evec.full() for evec in evecs]).squeeze(). # Check that eigenvectors form an othonormal basis (<=> matrix of eigenvectors is unitary); deviation_from_unitarity = np.linalg.norm(evecs@evecs.conj().T - np.eye(len(evecs))); assert np.isclose(deviation_from_unitarity, 0); ```. ### Code Output. ```shell; AssertionError; ```. ### Expected Behaviour. Since by requirement of simdiag all input matrices must be hermitian and commute, the common eigenvectors should always be orthonormal. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.23.5; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.11.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The fix is simple: ; Here; ```python; subspace = vecs.conj().T @ ops[i].full() @ vecs; eigvals, eigvecs = la.eig(subspace); ```; `la.eig` has to be replaced by `la.eigh`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2268:1242,simpl,simple,1242,https://qutip.org,https://github.com/qutip/qutip/issues/2268,1,['simpl'],['simple']
Usability,"### Bug Description. Perhaps I am not understanding how a qutip device works. I have been following the example from https://qutip.org/docs/latest/guide/qip/qip-processor.html#qip-processor as I want to add noise to my quantum circuits. However, I saw that using ```processor.run_state(init_state)``` returns a different state compared to ```qc.run(init_state)``` for certain circuits. ### Code to Reproduce the Bug. ```shell; import numpy as np. from qutip import basis, tensor; from qutip.qip.circuit import QubitCircuit; from qutip.qip.device import LinearSpinChain. num_qubits = 3; init_state = tensor([basis(2,1) for x in range(num_qubits)]); qc = QubitCircuit(num_qubits); qc.add_gate(""CNOT"", targets=1, controls=[0]). # Uses a LinearSpinChain processor to obtain the final state; processor = LinearSpinChain(num_qubits); processor.load_circuit(qc); processor_state = processor.run_state(init_state).states[-1].tidyup(1.0e-6). # Obtains state by running the circuit directly; circuit_state = qc.run(init_state). print(processor_state); print(); print(circuit_state); print(). # Calculates the fidelity between both states to show that states are not just differing by a phase; fidelity = np.abs((circuit_state.dag() * processor_state)[0]). print(""Fidelity:"", np.abs(fidelity[0])); ```. ### Code Output. ```shell; Quantum object: dims = [[2, 2, 2], [1, 1, 1]], shape = (8, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]]. Quantum object: dims = [[2, 2, 2], [1, 1, 1]], shape = (8, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]]. Fidelity: [0.]; ```. ### Expected Behaviour. By just adding an RY gate to the circuit, both methods of obtaining the state now returns the same state with unit fidelity. . ```; import numpy as np. from qutip import basis, tensor; from qutip.qip.circuit import QubitCircuit; from qutip.qip.device import LinearSpinChain. num_qubits = 3; init_state = tensor([basis(2,1) for x in range(num_qubits)]); qc = Qub",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2003:147,guid,guide,147,https://qutip.org,https://github.com/qutip/qutip/issues/2003,1,['guid'],['guide']
Usability,"### Bug Description. QuTiP Qobj has a `tinyup()` method that sets to 0 all values lower than a certain threshold defined by `settings.auto_tidyup_atol`:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L1383. As explained in [here](https://qutip.org/docs/latest/guide/guide-settings.html), the user should be able to change this value. . Playing with this options I realized that changing the `qutip.settings.auto_tidyup` to False works, but changing the `qutip.settings.auto_tidyup_atol` value doesn't. ### Code to Reproduce the Bug. ```shell; import qutip. qutip.settings.auto_tidyup_atol = 1e-30; a = qutip.Qobj(1); print(a * 1e-15); qutip.settings.auto_tidyup = False; print(a * 1e-15); ```. ### Code Output. ```shell; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[0.]]; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. ### Expected Behaviour. The first print should have been:; ```; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. When multiplying `a * 1e-15`, QuTiP calls the `__mul__` magic method, where `out.tidyup()` is called:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L581. Tidyup contains one argument set to `settings.auto_tidyup_atol` by default. This value should change to 1e-30 when running `qutip.settings.auto_tidyup_atol = 1e-30`, but this never happens. Consequently, the output value is set to 0. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1829:305,guid,guide,305,https://qutip.org,https://github.com/qutip/qutip/issues/1829,2,['guid'],"['guide', 'guide-settings']"
Usability,"### Bug Description. Qutip's HTMLProgressBar seems not to function any more in jupyter notebooks. Perhaps since ""jupyterlab"" was introduced. ### Code to Reproduce the Bug. ```shell; import qutip as qt; import numpy as np; qt.mcsolve(qt.sigmax(), state=qt.basis(2, 0), tlist=np.linspace(0, 5, 100), c_ops=[qt.sigmam()], ntraj=100, options={'progress_bar': 'html'}); ```. ### Code Output. ```shell; [[ empty progress bar ]]; Javascript Error: $ is not defined; Javascript Error: $ is not defined; Javascript Error: $ is not defined; Javascript Error: $ is not defined; ...; ```. ### Expected Behaviour. There should be no error and the progress bar should display the progress. ### Your Environment. ```shell; ""About Jupyter Notebook"" shows version 7.2.1. QuTiP Version: 5.1.0.dev0+487e4ec; Numpy Version: 2.0.0; Scipy Version: 1.13.1; Cython Version: 3.0.10; Matplotlib Version: 3.8.4; Python Version: 3.12.4; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The weird thing is that `$()` actually is available, as one can see in the developer console. Relevant stackoverflow discussions:; * https://stackoverflow.com/questions/72316844/jupyter-notebook-jupyternotify-javascript-error-is-not-defined; * https://stackoverflow.com/questions/22004386/notify-when-execution-command-is-completed (in comments to top answer). Thanks to Hussein Shiri for pointing this bug out on the mailing list.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2475:406,progress bar,progress bar,406,https://qutip.org,https://github.com/qutip/qutip/issues/2475,2,['progress bar'],['progress bar']
Usability,"### Bug Description. Realized that I was getting inconsistent results in my Hamiltonian simulation code, and was testing using basic matrix operations. Some pieces that qutip was not doing easily, I used numpy objects and operations to complete. . Qutip documentation suggests using * operator for matrix/vector multiplication https://qutip.org/docs/4.7/guide/guide-states.html -- but this will yield undesired results when the types of all objects are not rigorously checked. . ### Code to Reproduce the Bug. ```shell; import qutip; import numpy as np. A = qutip.Qobj([[0, 1], [1, 0]]); B = qutip.Qobj([[1, 2], [3, 4]]). # qutip objects; print(A * B) # gives expected results; print(A @ B) # gives expected results. C = np.array([[0, 1], [1, 0]]); D = np.array([[1, 2], [3, 4]]). # numpy objects; print(C * D) # gives wrong results; print(C.dot(D)) # gives expected results; print(C @ D) # gives expecting results; ```. ### Code Output. ```shell; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; [[0 2]; [3 0]]; [[3 4]; [1 2]]; [[3 4]; [1 2]]; ```. ### Expected Behaviour. Would prefer that qutip A*B yields the same results as numpy, and A @ B becomes the default matrix operator, or another function is suggested. Consistency with numpy would be better. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier Galicia, Paul Menczel, and Patrick Hopf.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2547:354,guid,guide,354,https://qutip.org,https://github.com/qutip/qutip/issues/2547,2,['guid'],"['guide', 'guide-states']"
Usability,"### Bug Description. The act of the CNOT gate is not what it is expected. In particular it changes the target qubit when the control qubit is in the ground state instead of excited state given that in qutip basis(2,1) is the ground state. If this is on purpose it needs to be clearly stated in the tutorials or the documentation. ### Code to Reproduce the Bug. ```shell; from qutip import *; from qutip_qip.circuit import QubitCircuit; from qutip_qip.operations import (Gate, berkeley, cnot, cphase, csign, fredkin,; gate_sequence_product, globalphase, iswap,; molmer_sorensen, phasegate, qrot, rx, ry, rz,; snot, sqrtiswap, sqrtnot, sqrtswap, swap,; swapalpha, toffoli); test=cnot()*tensor(basis(2,1),basis(2,1)); print(test); ```. ### Code Output. ```shell; Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [1.]; [0.]]; ```. ### Expected Behaviour. Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [0.]; [1.]]. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.11.4; Cython Version: None; Matplotlib Version: 3.8.0; Python Version: 3.11.0; Number of CPUs: 8; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/anaconda3/lib/python3.11/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2494:276,clear,clearly,276,https://qutip.org,https://github.com/qutip/qutip/issues/2494,1,['clear'],['clearly']
Usability,"### Bug Description. The correlation 2op_2t does not give correct results when using time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808:762,simpl,simple,762,https://qutip.org,https://github.com/qutip/qutip/issues/1808,1,['simpl'],['simple']
Usability,"### Bug Description. The documentation indicates that there may be some subtlety about `rho` being vectorized. However, it is not clear how to then handle input with tensor product structure such that `propagator` doesn't fail with a `ValueError`. ### Code to Reproduce the Bug. ```shell; from qutip import sigmaz, qeye, propagator, tensor, sigmam. c_ops = [tensor(sigmam(), qeye(2))]; H0 = tensor(sigmaz(), qeye(2)) + tensor(qeye(2), sigmaz()); H = H0; prop = propagator(H, 1.0, c_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; ValueError Traceback (most recent call last); /var/folders/k_/98g3h5x154q9q5bnmlxj2zwr0000gr/T/ipykernel_59733/3250178117.py in <module>; 4 H0 = tensor(sigmaz(), qeye(2)) + tensor(qeye(2), sigmaz()); 5 H = H0; ----> 6 prop = propagator(H, 1.0, c_ops). /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 240 shape=(N, N), dtype=complex)); 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; --> 242 _safe_mode=False); 243 for k, t in enumerate(tlist):; 244 u[:, n, k] = mat2vec(output.states[k].full()).T. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 263 raise Exception(""Invalid H type""); 264 ; --> 265 func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); 266 ; 267 if _safe_mode:. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _test_liouvillian_dimensions(L_d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1899:130,clear,clear,130,https://qutip.org,https://github.com/qutip/qutip/issues/1899,1,['clear'],['clear']
Usability,"### Bug Description. The function steadystate() does not seem capable of handling Liouvillians with non-unique steady states. This is immediately apparent because steadystate() does not contain an argument for an initial state at time zero. Instead, it returns a state (presumably some linear combination of the null-space operators) that does not match the long time output from mesolve(), which varies based on initial condition. There are many Liouvillians which do not admit unique steady states, but a simple example can be found in Section 3.3 of [this tutorial](https://doi.org/10.48550/arXiv.2303.16449). ### Code to Reproduce the Bug. ```shell; The bug is apparent from the documentation, as steadystate() does not contain an argument for an initial state.; ```. ### Code Output. _No response_. ### Expected Behaviour. For Liouvillians that admit non-unique steady states, I expected steadystate() to return the long time limit of mesolve() given a particular initial condition. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.5.0; Python Version: 3.7.11; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /opt/anaconda3/lib/python3.7/site-packages/qutip; ================================================================================; Please cite QuTiP in ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2175:507,simpl,simple,507,https://qutip.org,https://github.com/qutip/qutip/issues/2175,1,['simpl'],['simple']
Usability,"### Bug Description. The option `vector_style=''` does not work. . Even though the fix is quite simple, I would like to remove it since it is not documented, it would simplify the code and the option '-' achieves the same thing anyways. @hodgestar and @Ericgig, any thoughts?. ### Code to Reproduce the Bug. ```shell; import qutip; bloch = qutip.Bloch(); bloch.add_vectors([0,0,1]); bloch.vector_style = ''; bloch.show(); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); Input In [4], in <cell line: 4>(); 2 bloch.add_vectors([0,0,1]); 3 bloch.vector_style = ''; ----> 4 bloch.show(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:883, in Bloch.show(self); 868 def show(self):; 869 """"""; 870 Display Bloch sphere and corresponding data sets.; 871 ; (...); 881 in the cell you create the figure in.; 882 """"""; --> 883 self.render(); 884 if self.run_from_ipython():; 885 display(self.fig). File ~/git_repo/qutip/qutip5/qutip/bloch.py:677, in Bloch.render(self); 675 self.plot_back(); 676 self.plot_points(); --> 677 self.plot_vectors(); 678 self.plot_lines(); 679 self.plot_arcs(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:779, in Bloch.plot_vectors(self); 775 color = self.vector_default_color[idx]; 777 if self.vector_style == '':; 778 # simple line style; --> 779 self.axes.plot(xs3d, ys3d, zs3d,; 780 zs=0, zdir='z', label='Z',; 781 lw=self.vector_width, color=color,; 782 alpha=alpha); 783 else:; 784 print(; 785 xs3d, ys3d, zs3d,; 786 self.vector_mutation,; (...); 789 color,; 790 alpha). File ~/.virtualenvs/qutip5/lib/python3.10/site-packages/mpl_toolkits/mplot3d/axes3d.py:1490, in Axes3D.plot(self, xs, ys, zdir, *args, **kwargs); 1488 zs, *args = args; 1489 if 'zs' in kwargs:; -> 1490 raise TypeError(""plot() for multiple values for argument 'z'""); 1491 else:; 1492 zs = kwargs.pop('zs', 0). TypeError: plot() for multiple values for argument 'z'; ```. ### Expected Behaviour. it should ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1916:96,simpl,simple,96,https://qutip.org,https://github.com/qutip/qutip/issues/1916,2,['simpl'],"['simple', 'simplify']"
Usability,"### Bug Description. The qutip documentation at https://qutip.org/docs/4.0.2/guide/dynamics/dynamics-master.html#unitary-evolution has the code; ```; In [1]: H = 2 * np.pi * 0.1 * sigmax(). In [2]: psi0 = basis(2, 0). In [3]: times = np.linspace(0.0, 10.0, 20.0). In [4]: result = mesolve(H, psi0, times, [], [sigmaz()]); ```; This does not work with recent versions of numpy. In particular `np.linspace(0.0, 10.0, 20.0)` generates the exception `TypeError: 'float' object cannot be interpreted as an integer`. ### Code to Reproduce the Bug. ```shell; import numpy as np; np.linspace(0.0, 10.0, 20.0); ```. ### Code Output. _No response_. ### Expected Behaviour. Documenation examples should be able to execute. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 5.0.0.dev0+7425775; Numpy Version: 1.21.6; Scipy Version: 1.8.0; Cython Version: 0.29.30; Matplotlib Version: 3.5.1; Python Version: 3.10.0; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: c:\projects\misc\qutip\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. ### Additional Context. None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1944:77,guid,guide,77,https://qutip.org,https://github.com/qutip/qutip/issues/1944,1,['guid'],['guide']
Usability,"### Bug Description. This bug is related to the one explained in #1829. After setting to False the `auto_tidyup` variable in settings, `mesolve` still calls `tidyup` and sets to 0 all values lower than 1e-12. The following code is from a [QuTiP example](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#function-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### You",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1831:284,guid,guide,284,https://qutip.org,https://github.com/qutip/qutip/issues/1831,1,['guid'],['guide']
Usability,"### Bug Description. When calling `mcsolve` with operators that have a collapse feedback, everything works as it should on the first trajectory. On all other trajectories, the collapse feedback parameter will still contain the collapses of the first trajectory (and only those). ### Code to Reproduce the Bug. ```shell; import qutip as qt; import numpy as np. def hamiltonian(t, jumps):; print(t, ', ', jumps); return qt.sigmax() * (len(jumps) + 1). tlist = np.linspace(0, 10, 500); H = qt.QobjEvo(hamiltonian, args={'jumps': qt.MCSolver.CollapseFeedback()}). result = qt.mcsolve(H, qt.basis(2, 1), tlist,; c_ops=[qt.sigmam()], e_ops=[qt.sigmaz()],; ntraj=2, options={'keep_runs_results': True, 'map': 'serial'}); ```. ### Code Output. ```shell; ##### FIRST TRAJECTORY. 0.0 , []; 2.109452934261477e-12 , []; ...; 0.6212424849699398 , []; 0.6086836025648399 , [(0.6086836025648399, 0)]; ...; 1.6032064128256511 , [(0.6086836025648399, 0)]; 1.6024822039345563 , [(0.6086836025648399, 0), (1.6024822039345563, 0)]; ...; 10.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]. ##### SECOND TRAJECTORY. 0.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; 1.0547264671307385e-12 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ...; 10.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ```. ### Expected Behaviour. On the second trajectory, the list of collapses should have been reset to `[]` and then updated during the run of that trajectory. ### Your Environment. ```shell; QuTiP Version: 5.1.0.dev0+d8c6584; Numpy Version: 1.26.3; Scipy Version: 1.12.0; Cython Version: 3.0.8; Matplotlib Version: 3.8.2; Python Version: 3.12.1; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. I have tracked the source of the problem as follows:; * The `MCIntegrator` [correctly calls](https://github.com/qutip/qutip/blob/d8c6584",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2422:80,feedback,feedback,80,https://qutip.org,https://github.com/qutip/qutip/issues/2422,2,['feedback'],['feedback']
Usability,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864:520,simpl,simple,520,https://qutip.org,https://github.com/qutip/qutip/issues/1864,1,['simpl'],['simple']
Usability,"### Bug Description. When passing sesolve a time independent Hamiltonian, there is still time-dependent evolution returned. It seems to depend on the number of time steps passed to the solver, with more time steps giving more drastic time-dependent evolution. . ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *. qubit_freq = 5000. # operators; a = destroy(2). # Basis States; z_p = basis(2,0); z_m = basis(2,1); x_p = (z_p + z_m)/np.sqrt(2); x_m = (z_p - z_m)/np.sqrt(2); y_p = (z_p + 1j*z_m)/np.sqrt(2); y_m = (z_p - 1j*z_m)/np.sqrt(2) . psi0 = x_p. # Hamiltonian; H = qubit_freq*2*np.pi * (a.dag() * a + 1/2). tlist = np.linspace(0, 0.1, 100000). output1 = sesolve(H, psi0, tlist, e_ops=[a.dag()*a]); n_a = output1.expect[0]. # Plot Occupation with respect to time; fig, axes = plt.subplots(1, 1, figsize=(10,6)); axes.plot(tlist, n_a, label=""Qubit""); axes.legend(loc=0); axes.set_xlabel('Time'); axes.set_ylabel('Occupation probability'); plt.show(); ```. ### Code Output. _No response_. ### Expected Behaviour. The graph provided should be a flat line, indicating no time evolution. . ### Your Environment. ```shell; QuTiP Version: 4.7.3; Numpy Version: 1.23.5; Scipy Version: 1.11.4; Cython Version: 3.0.6; Matplotlib Version: 3.7.1; Python Version: 3.10.12; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. ![image](https://github.com/qutip/qutip/assets/112031379/cfee4cd8-6b7a-4b9c-87b3-a81d45128132). This plot shows a loss in population when beginning in the x state of a simple two level system. Playing around with the code, I find the slope of this line changes as you give a different number of points in tlist. This also happens with mesolve and mcsolve with no collapse operators (although I suspect this is because behind the scenes, it's just using sesolve).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2275:1644,simpl,simple,1644,https://qutip.org,https://github.com/qutip/qutip/issues/2275,1,['simpl'],['simple']
Usability,"### Bug Description. When trying to perform a trivial partial trace (of a ket) when no subsystem is traced over (all subsystems are kept), the result is a ket. ### Code to Reproduce the Bug. ```shell; from qutip import tensor,basis; psi = tensor(basis(2, 0), basis(2, 1)); print(psi.ptrace([0,1])); ```. ### Code Output. ```shell; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; Qobj data =; [[0.]; [1.]; [0.]; [0.]]; ```. ### Expected Behaviour. A density operator should be returned for consistency. The documentation (https://qutip.org/docs/latest/guide/guide-tensor.html) also mentions that: . > Note that the partial trace always results in a density matrix (mixed state), regardless of whether the composite system is a pure state (described by a state vector) or a mixed state (described by a density matrix). ### Your Environment. ```shell; QuTiP version: 4.7.1; ```. ### Additional Context. The issue seems to originate in _ptrace_dense (see https://qutip.org/docs/latest/modules/qutip/qobj.html), where the following code appears:; ```; if not dtrace:; # If we are keeping all dimensions, no need to construct an ndarray.; return Q.copy(); ```; A projector onto the state should be returned here instead of the copy of the state.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2129:572,guid,guide,572,https://qutip.org,https://github.com/qutip/qutip/issues/2129,2,['guid'],"['guide', 'guide-tensor']"
Usability,"### Describe the Issue!. By building QuTiP 5 with:; ```; python -m build \; --wheel \; --config-setting=""--global-option=--with-idxint-64""; ```; one can use 64-bit integer indices. Currently this is only documented in the changelog. We should also write a short guide on it, perhaps. It might also be worthwhile adding a CI build for the 64-bit index case.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2278:262,guid,guide,262,https://qutip.org,https://github.com/qutip/qutip/issues/2278,1,['guid'],['guide']
Usability,### Describe the Issue!. Discussion of state vectors and density matrices in users' guide is slightly muddy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1770:84,guid,guide,84,https://qutip.org,https://github.com/qutip/qutip/issues/1770,1,['guid'],['guide']
Usability,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733:419,simpl,simple,419,https://qutip.org,https://github.com/qutip/qutip/issues/1733,1,['simpl'],['simple']
Usability,"### Describe the Issue!. I have a big matrix which is a [QuTiP](https://qutip.org/) object. I am trying to run this line of code:. ops_numpy = [op.full() for op in m_ops] # convert the QuTiP Qobj to numpy arrays. But I am getting the following error:. MemoryError: Unable to allocate 16.0 TiB for an array with shape (1048576, 1048576) and; data type complex128. Here, `m_ops` is a list with `len(m_ops) = 27` and every `m_ops[i]` is a quantum object of shape. In [91]: m_ops[1].shape; Out[91]: (1048576, 1048576). Ok, I can see that I am trying to convert a QuTiP object into a numpy array but this object is so big that I have a memory issue. My question is simple: is there any way to overcome this issue? can I 'cut' the object in smaller pieces to convert it and then put the ""pieces back together""?. I really have no idea. Maybe I am not doing in the optimal way but I was working with really smaller matrix until this one and I didn't foresaw this problem. Any help or reference will be highly appreciated. This is really important for me. ----------------------------------------------------------------. EDIT with the full code:. """""".""""""; import numpy as np; import tensorflow as tf; from qutip import tensor; from qutip import sigmax, sigmaz, sigmay; from qutip import coherent, coherent_dm, expect, Qobj, fidelity, hinton; from tqdm.auto import tqdm. #%load_ext autoreload; tf.keras.backend.set_floatx('float64') # Set float64 as the default. # Local paths:; local_path = ""0_qst_master/cgan_tf_20qb/%s""; data_path = ""0_qst_master/cgan_tf_20qb/data/%s"". # Reading projectors; projs_settings = np.loadtxt(data_path % 'measurement_settings.txt', dtype=str). X = sigmax(); Y = sigmay(); Z = sigmaz(). m_ops = [] # measurement operators. def string_to_operator(basis): ; mat_real = []; ; for j in range(len(basis)):; if basis[j] == 'X':; mat_real.append(X) ; if basis[j] =='Y':; mat_real.append(Y) ; if basis[j] =='-Y':; mat_real.append(-Y) ; if basis[j] == 'Z':; mat_real.append(Z) ; return mat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2176:660,simpl,simple,660,https://qutip.org,https://github.com/qutip/qutip/issues/2176,1,['simpl'],['simple']
Usability,"### Describe the Issue!. I have a question that is not really a bug or feature request (although it is, perhaps, a request for more documentation). I also don't know if this is the place to ask, please refer me elsewhere if it is not. I am trying to solve a problem with a time-dependent hamiltonian, time-dependent collapse operators, including calculating two-time-two-operator correllation functions. My questions are the following:. 1) The documentation only shows the use of square brackets for time-dependent terms. However, tuples also work, but give different behaviour. Is this desired? If its desired, can a description of the behaviour be added to the documentation?; In other words, what, in mesolve and correlation_2op_2t, is the difference between:; H = [H0, [H1, f1(t)], [H2, f2(t)]] and H = [H0, (H1, f1(t)), (H2, f2(t))] . 2) The same question as above goes for the collapse operators. . And, for me the most important question is the following; 3) For the system I try to simulate, I need to implement a collapse operator that is not simply of the shape shown in the documentation, but of the shape C_2 = f(t)*\hat{a} + c*\hat{b}. I've tried various ways to implement this, and some seem to work, but I cannot determine with certainty which is correct. Is it:; [C_0, C_1, [[\hat{a}, f(t)], [\hat{b}, c(t)]]]; (where c(t) is a dummy function that always outputs the (time-independent) value c?); Or is it:; [C_0, C_1, [(\hat{a}, f(t)), (\hat{b}, c(t))]]; Or is it something different entirely?. Thanks for your help!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2065:1052,simpl,simply,1052,https://qutip.org,https://github.com/qutip/qutip/issues/2065,1,['simpl'],['simply']
Usability,"### Describe the Issue!. I have installed Qutip version 5.0.2, and I've been trying to use the parfor method (see https://qutip.org/docs/4.0.2/guide/guide-parfor.html). When calling it, I get the error: ""NameError: name 'parfor' is not defined"".; I'm not trying to do anything exotic yet, I was just testing the rudimentary example from the webpage:. from qutip import *; def func1(x): ; return x, x**2, x**3; a, b, c = parfor(func1, range(10)); print(a)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2551:143,guid,guide,143,https://qutip.org,https://github.com/qutip/qutip/issues/2551,2,['guid'],"['guide', 'guide-parfor']"
Usability,"### Describe the Issue!. I noticed some terminology used in the QuTip documentation that I think is not quite accurate. . The description of ""m_ops"" in the [stochastic solver options](https://qutip.org/docs/latest/apidoc/classes.html#qutip.stochastic.StochasticSolverOptions) states:. > List of operators representing the measurement operators. However, it is clear from the example given [here](https://qutip.org/docs/latest/guide/dynamics/dynamics-stochastic.html) that ""m_ops"" represents the observable being measured and not the measurement operator. . The distinction is that the term ""measurement operator"" usually refers to an (efficient) quantum operation that brings a pure state to a pure state. The measurement operators are the operators that generate the stochastic evolution and are akin to ""sc_ops"", not to ""m_ops"". The operators ""m_ops"" used by the stochastic solver define the POVM elements, i.e., they define the probabilities of measurement outcomes. This is not the same as a measurement operator. . For more detail, see the first chapter of the [standard textbook](https://www.cambridge.org/core/books/quantum-measurement-and-control/F78F445CD9AF00B10593405E9BAC6B9F) by Wiseman and Milburn. P.S. Note that Wiseman also calls the POVM elements ""effects"", which I think is dreadfully confusing. But I think there is pretty universal agreement that ""measurement operator"" should refer to the quantum maps.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2212:360,clear,clear,360,https://qutip.org,https://github.com/qutip/qutip/issues/2212,2,"['clear', 'guid']","['clear', 'guide']"
Usability,"### Describe the Issue!. I think our family packages - `qutip-qip`, `qutip-qoc`, `qutip-jax` - should be mentioned in the documentation somewhere. There is [a page in the Users Guide](https://qutip.readthedocs.io/en/master/guide/guide-control.html) about `qutip-qtrl`, which is however deprecated in favor of `qutip-qoc`. My suggestion would be to remove the content of the ""Quantum Optimal Control"" page in the Users Guide, which has been migrated to the [qutip-qoc documentation](https://qutip-qoc.readthedocs.io/latest/guide/guide-control.html), and instead have a page with short descriptions of the family packages and links to their documentations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2524:177,Guid,Guide,177,https://qutip.org,https://github.com/qutip/qutip/issues/2524,6,"['Guid', 'guid']","['Guide', 'guide', 'guide-control']"
Usability,"### Describe the Issue!. I'm trying to simulate a simple two-level system with a sinusoidally varying external magnetic field. The code is given below:. ```python3; import matplotlib.pyplot as plt; import numpy as np; from qutip import basis, sigmax, sigmay, sigmaz, Options, mesolve, expect; from scipy.constants import physical_constants. g = 2; muB = (physical_constants[""Bohr magneton in eV/T""])[0] ## Bohr-Magneton in eV/Tesla; gamma = 0.5*muB*g #in eV/Tesla. h_inv = (physical_constants[""reduced Planck constant in eV s""][0])**-1. gamma = gamma*h_inv #in sec-1/Tesla; del physical_constants; ## Defining time of evolution; times = np.linspace(0, 6*10**-7, 1000); noe = len(times); B = 1; Bx = -(1*10**-3); ## Create a Quantum 2 state basis; up = basis(2,0) ; down = basis(2,1) ; upd = up * up.dag() ; downd = down * down.dag(); sy = sigmay(); sz = sigmaz(); sx = sigmax(); Hx = gamma*Bx*sx; options = Options(nsteps=10000); H0 = -gamma*B*sz ; resonant_frequency = H0.eigenenergies() ; def Hx_coeff(t, args):; return 1 * np.cos(-2*resonant_frequency[0]*t );. H = [H0,[Hx,Hx_coeff]]; ; result = mesolve(H, downd, times, [], options=options); rh = result.states; upexpect, downexpect = [], []; for r in rh: ; up_e = expect(up*up.dag(), r); down_e = expect(down*down.dag(), r); upexpect.append(up_e); downexpect.append(down_e); plt.plot(times, upexpect, label = ""Upstate"", color='g', linestyle='-.'); plt.plot(times, downexpect, label = ""Downstate"", color='r', linestyle='-.'); plt.title(""Prob v/s Time for B = {}"".format(B)); plt.legend(loc=""best""); plt.xlabel(""Time""); plt.ylabel(""Probability of State""); plt.grid(); plt.show(); ```. The Hamiltonian of the system is hermitian, and theoretically, we don't expect such decay in the amplitude. So, what is happening in the above program that is leading to such a strange evolution? . ![Figure_2](https://user-images.githubusercontent.com/49644300/209442963-3e2a047f-1714-4d5c-b484-fa78e91a8062.png); . As soon as I increase the value of `B` the deca",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2051:50,simpl,simple,50,https://qutip.org,https://github.com/qutip/qutip/issues/2051,1,['simpl'],['simple']
Usability,"### Describe the Issue!. Most of our progress bars are in `qutip/ui/progressbar.py`, with the exception of `HTMLProgressBar` which is in `qutip/ipynbtools.py`. It is not available by the solvers. It should be moved with the other and added it to the `progess_bars` dictionary so it's usable with `mesolve`, etc.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2108:37,progress bar,progress bars,37,https://qutip.org,https://github.com/qutip/qutip/issues/2108,2,"['progress bar', 'usab']","['progress bars', 'usable']"
Usability,"### Describe the Issue!. The PR template has a link to the `qutip-notebooks` repository, however the notebooks for the website are now located in `qutip-tutorials`. ; A typo in the link in the changelog section have it point to the top of the contribution guide instead of the changelog generation paragraph.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2106:256,guid,guide,256,https://qutip.org,https://github.com/qutip/qutip/issues/2106,1,['guid'],['guide']
Usability,### Describe the Issue!. There are minor grammatical errors and a small amount verbiage in the users' guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759:102,guid,guide,102,https://qutip.org,https://github.com/qutip/qutip/issues/1759,1,['guid'],['guide']
Usability,"### Describe the Issue!. When running the example code from the documentation https://qutip.readthedocs.io/en/master/guide/dynamics/dynamics-stochastic.html using version 5.0.4 I get the AttributeError: 'SMESolver' object has no attribute 'run_from_experiment' . When looking at my local version of the stochastic.py, then the class StochasticSolver does not have the function run_from_experiment, but that function exists on the github version.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2525:117,guid,guide,117,https://qutip.org,https://github.com/qutip/qutip/issues/2525,1,['guid'],['guide']
Usability,"### Discussed in https://github.com/qutip/qutip/discussions/1682. <div type='discussions-op-text'>. <sup>Originally posted by **gaurav-iiser** October 4, 2021</sup>; Hello all,. So, I was writing a paper and wanted an image with a particular octant of the Bloch sphere highlighted. This octant was to be divided it into three subsets using three arcs [which is say, drawing an arc connecting the point ((1/sqrt(3), 1/sqrt(3), 1/sqrt(3)) with (0,0,1),(0,1,0),(1,0,0) ]. Besides, I also wanted to connect a state from each subset. So, in order to do this, I cloned the repository and modified bloch.py, and produced the desired image for my paper (figure attached) ; I then thought it will be useful as a feature for other users who might want to draw an arc on the Bloch sphere or join two points on the Bloch sphere using a line segment. Therefore, I have modified the bloch.py such that it can now draw an arc between any two points on the Bloch sphere by just specifying the cartesian coordinates of the two points, and similarly, a line segment can be drawn. The arc is red and the line segment is a black dashed line. . Before opening a PR, I just wanted to discuss whether it seems like a good idea? I am sure someone will find drawing an arc or drawing a line segment in the visualization of the Bloch sphere useful, just like I did. ; (I am just trying to follow the contribution guidelines as I have no experience in contributing to a library whatsoever). ; I would really appreciate your responses. Code-wise: We can simply use `add_line([x,y,z],[a,b,c])` to draw a line segment, or `b.add_arc([x,y,z],[a,b,c])` to draw an arc between two points; `. ![Bloch_sphere_poss_1](https://user-images.githubusercontent.com/33507538/135772530-be7dab07-2337-4ad1-839c-551483bddef5.png); </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1683:1387,guid,guidelines,1387,https://qutip.org,https://github.com/qutip/qutip/issues/1683,2,"['guid', 'simpl']","['guidelines', 'simply']"
Usability,"### Discussed in https://github.com/qutip/qutip/discussions/2255. <div type='discussions-op-text'>. <sup>Originally posted by **shiv6510** November 2, 2023</sup>; Hi, I am encountering some strange dynamics with mesolve that I don't understand. I have a simple hamiltonian of a harmonic oscillator with resonant frequency of 5 GHz. If I evolve the initial state (|0> + |1>)/sqrt(2) under the system hamiltonian (no time dependence) I would expect the expectation values of the |0> and |1> to stay at 0.5. (Amplitudes of eigenstates should not change). . However, when I plot the expectation values, I see a splitting of overtime, where the expectation value of |0> grows linear over time and |1> shrinks linearly with time. Looking through the forums, I figured it was an issue with the ode solver but playing around with the options (max_steps, rtol, atol, etc.) only changes the rate at which the expectation value drops (or grows); it doesn't get rid of the splitting. Any insight into this problem would be of great help :). Code:; ***********************************************************************; import matplotlib.pyplot as plt; from numpy import *; from scipy.optimize import fsolve; from qutip import *. a = destroy(20); wr = 5 # GHz; H = wr * a.dag() * a. e_nrgs, e_states = H.eigenstates(). psi0 = (e_states[0] + e_states[1]).unit(); wait_time = 2000; t_list = arange(0,wait_time+0.02, 0.01). options = Options(max_step=1/(wr * 100)); output = sesolve(2 * pi * H, ; psi0, ; t_list, ; e_ops=[e_states[0].proj(), e_states[1].proj()], ; args=None,; options=options,; progress_bar=True); ***********************************************************************. Plot:. plt.plot(t_list, output.expect[0], color='red', label='<0>'); plt.plot(t_list, output.expect[1],label='<1>'); plt.xlabel('Time[ns]'); plt.ylabel('Expectation Value'); plt.legend(); plt.show(). <img width=""840"" alt=""image"" src=""https://github.com/qutip/qutip/assets/43760523/c55016b4-5fbc-4032-b8e0-d143152250bb"">. </div>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2258:254,simpl,simple,254,https://qutip.org,https://github.com/qutip/qutip/issues/2258,1,['simpl'],['simple']
Usability,"### New changelog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:644,simpl,simply,644,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['simpl'],['simply']
Usability,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1894:1318,simpl,simple,1318,https://qutip.org,https://github.com/qutip/qutip/issues/1894,1,['simpl'],['simple']
Usability,"### Problem Description. For a Drude-Lorentz bath, the `HEOMSolver` can take `DrudeLorentzBath` (Matsubara decomposition) or `DrudeLorentzPadeBath` (Padé decomposition). A shifted Drude-Lorentz bath [1] has the following spectral distribution function (where $\Omega$ is the shift, and other symbols have the same meaning as given in [QuTiP's documentation](https://qutip.readthedocs.io/en/qutip-5.0.x/guide/heom/bosonic.html#describing-the-system-and-bath)): . $$; \begin{equation*}; J(\omega)=\left[\frac{\gamma \lambda \omega}{\gamma^2+; \left(\omega+\Omega\right)^2}+\frac{\gamma \lambda \omega}{\gamma^2+; \left(\omega-\Omega\right)^2}\right]; \end{equation*}; $$. This can be achieved by summating two Drude-Lorentz density with $\gamma \rightarrow \gamma \pm i \Omega$ and $\lambda \rightarrow \lambda/2$. As shown using Mathematica:. ![shifted_DL](https://github.com/user-attachments/assets/cece04e7-59c9-44ad-9b33-143942fc4093). When the transformation is made for `DrudeLorentzBath`, the result generated differs from that for `DrudeLorentzPadeBath` (and it is not about the number of frequencies used). [1] T. Kramer and C. Kreisbeck, “Modelling excitonic-energy transfer in light-harvesting complexes,” presented at the LATIN-AMERICAN SCHOOL OF PHYSICS MARCOS MOSHINSKY ELAF: Nonlinear Dynamics in Hamiltonian Systems, Mexico City, Mexico, 2014, pp. 111–135. doi: 10.1063/1.4861701. ### Proposed Solution. Looking at the [source code](https://qutip.readthedocs.io/en/qutip-5.0.x/_modules/qutip/solver/heom/bofin_baths.html#DrudeLorentzPadeBath) of `DrudeLorentzPadeBath` one can see that to generate `ck_real` only the real part of `eta` is considered, which would be correct if `gamma` was real. But for our case of shifted Drude-Lorentz Bath, doing so throws away the shift information from `eta` (which is not the case in `DrudeLorentzBath`). The following `git diff` provides the changes to be made in the class `DrudeLorentzPadeBath`:. ```python; @@ -481,11 +481,12 @@ class DrudeLore",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520:402,guid,guide,402,https://qutip.org,https://github.com/qutip/qutip/issues/2520,1,['guid'],['guide']
Usability,### Problem Description. I noticed that most of (if not all) the steps of the Contributing wiki can be automated via [**pre-commit**](https://pre-commit.com/). Manually going through all the required style conventions and guidelines would be a hassle. ### Proposed Solution. Having [**pre-commit**](https://pre-commit.com/) would make that process much easier and enforce that the developers follow coding conventions. ### Alternate Solutions. _No response_. ### Additional Context. _No response_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1742:222,guid,guidelines,222,https://qutip.org,https://github.com/qutip/qutip/issues/1742,1,['guid'],['guidelines']
Usability,"### Problem Description. It would be nice, if one coud simply use th += operator for Qobj's. Now it raises TypeError:. ```; --> 219 else: H_L_lab += H_L_laser; 220 return H_L_lab. TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); ```. ### Proposed Solution. By defining the method `__iadd__` in the constructor, it could be easily done. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2326:55,simpl,simply,55,https://qutip.org,https://github.com/qutip/qutip/issues/2326,1,['simpl'],['simply']
Usability,"### Problem Description. The options that can be passed to the solvers are not entirely clear by looking at the documentation. For example:; ![image](https://github.com/qutip/qutip/assets/57414022/2c36d3a5-ca7b-42aa-86d2-cc6f273ed115); Does not show the explicit options even thought it refers to them in the parameter documentation. For comparison, SESolver does show the options. This I assume is because the options are inherited from SESolver. But this is not clear either by looking at `MESolver`'s rendered documentation.; ![image](https://github.com/qutip/qutip/assets/57414022/0d8d7a4d-6326-4d1a-a25e-d67264906f85). When using `help(MESolver)` the documentation of the class is much clearer but perhaps too verbose for the online documentation. ### Proposed Solution. I would suggest we render the options property explicitly for each solver. I would also consider rendering the documentation related to the `run` method. If not, we should render at least `Solver` documentation which does not seem to be listed in the class API documentation for solvers. Affected solvers:; - [ ] MESolver; - [ ] SMESolver; - [ ] SSESolver; - [ ] NonMarkovianMCSolver. ### Alternate Solutions. _No response_. ### Additional Context. The documentation was taken from qutip 5.0 ""ReadTheDocs"".",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2163:88,clear,clear,88,https://qutip.org,https://github.com/qutip/qutip/issues/2163,3,['clear'],"['clear', 'clearer']"
Usability,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1898:37,guid,guide,37,https://qutip.org,https://github.com/qutip/qutip/issues/1898,5,['guid'],['guide']
Usability,**Changelog**. Added missing citation for the GRAPE algorithm to the control guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1933:77,guid,guide,77,https://qutip.org,https://github.com/qutip/qutip/pull/1933,1,['guid'],['guide']
Usability,**Changelog**; Fixed a typo in docs (guide-settings.rst),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1786:37,guid,guide-settings,37,https://qutip.org,https://github.com/qutip/qutip/pull/1786,1,['guid'],['guide-settings']
Usability,**Changelog**; Modified some grammar in `dynamic-time.rst` to make some sentences clear.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1822:82,clear,clear,82,https://qutip.org,https://github.com/qutip/qutip/pull/1822,1,['clear'],['clear']
Usability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; sphereplot and plot_spin_distribution accepts a matrix of values, theta and phi, but the order of them is different and not intuitive to users.; ```; def sphereplot(theta, phi, values, ...; ```; ```; def plot_spin_distribution(P, THETA, PHI, ...; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2219:1181,intuit,intuitive,1181,https://qutip.org,https://github.com/qutip/qutip/pull/2219,1,['intuit'],['intuitive']
Usability,"**Describe the bug**; ""fmmesolve"" gives wrong expectation values with ""e_ops"". **To Reproduce**. Use tutorial in https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html. ```python. output = fmmesolve(H, psi0, tlist, [sigmax()], [num(2)], [noise_spectrum], T, args); p_ex = output.expect[0]. ```. This p_ex is different from what computed above. **Expected behavior**; The expectation values are the same as the one without ""e_ops"" and manually computed. **Your Environment**; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.15; Matplotlib Version: 3.3.4; Python Version: 3.7.6; Number of CPUs: 52; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/user1/anaconda3/envs/env1/lib/python3.7/site-packages/qutip-4.5.0-py3.7-linux-x86_64.egg/qutip. **Additional context**; Suspected the issues comes from floquet.py:829 , where the transformation is ""False""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1653:143,guid,guide,143,https://qutip.org,https://github.com/qutip/qutip/issues/1653,1,['guid'],['guide']
Usability,"**Describe the bug**; As described in the documentation (e.g https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#time-interp) it is possible to replace string time-dependent functions (e.g. for a Hamiltonian) using Cubic_Spline. This is the case if one has data describing the time-dependent object which is not easy to write analytically. In `brmesolve` the only option is to provide time-dependent functions as strings (or Cubic_Spline). This works fine for the Hamiltonian, but the `a_ops` fail a check in cy/brcodegen.py when using a Cubic_Spline type. **To Reproduce**; ```python; import qutip as qt; import numpy as np. x = np.arange(0, 10, 0.1); decay = np.exp(-x); decay_spline = qt.Cubic_Spline(x[0], x[-1], decay). sol1 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol2 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), ""exp(-w)""]]) # works fine; sol3 = qt.brmesolve([[qt.qeye(2), ""exp(-t)""]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; sol4 = qt.brmesolve([[qt.qeye(2), decay_spline]], qt.qeye(2), [0, 1], a_ops=[[qt.qeye(2), decay_spline]]) # error; ```. On the cases it gives an error (sol3, sol4), it is `Exception: Invalid a_td_term.` from br_codegen.py (`aop_td_funcs()`).; Note that the Cubic_Spline representation works perfectly fine for the Hamiltonian part (e.g. sol2). It also appears to work fine if specifying `c_ops`. **Expected behavior**; My understanding from the documentation regarding time-dependent objects is that the Cubic_Spline representation should work for brmesolve at all argument positions, where appropriate (not just the Hamiltonian and c_ops). For example, at the above URL, we have: <br/>; ""When combining interpolating functions with other Python functions or strings, the interpolating class will automatically pick the appropriate method for calling the class. That is to say that, if for example, you have other time-de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1624:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/issues/1624,1,['guid'],['guide']
Usability,"**Describe the bug**; I am simply trying to run the code published on the qutip documentation website for the [https://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html](url). I copied the code under the section: Pre-computing the Floquet modes for one period,; and that worked fine, but then at the end of the section they point towards the function 'fsesolve' which would be the 'all-in-one' version of the code given previously, however it doesnt work and i get the error:. ```; ~\anaconda3\lib\site-packages\qutip\sesolve.py in _generic_ode_solve(func, ode_args, psi0, tlist, e_ops, opt, progress_bar, dims); 297 if ode_args:; 298 r.set_f_params(*ode_args); --> 299 r.set_initial_value(initial_vector, tlist[0]); 300 ; 301 e_ops_data = []. KeyError: 0; ```. The code:. ```; import numpy as np; from matplotlib import pyplot; import qutip. delta = 0.0 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 0.25 * 2*np.pi; omega = 1.0 * 2*np.pi; T = 2*np.pi / omega; tlist = np.linspace(0.0, 10 * T, 101); psi0 = qutip.thermal_dm(2,0). H0 = - delta/2.0 * qutip.sigmax() - eps0/2.0 * qutip.sigmaz(); H1 = A/2.0 * qutip.sigmax(); args = {'w': omega}; H = [H0, [H1, lambda t, args: np.sin(args['w'] * t)]]. output = qutip.fsesolve(H, psi0, tlist, [], args); p_ex = output.expect[0]; ```. **Your Environment**; QuTiP Version: 4.5.3; Numpy Version: 1.18.5; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.2.2; Python Version: 3.8.3; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64). **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1663:27,simpl,simply,27,https://qutip.org,https://github.com/qutip/qutip/issues/1663,2,"['guid', 'simpl']","['guide', 'simply']"
Usability,"**Describe the bug**; Running Qutip on an **M1** MacBook Pro on import I can get the following error:. File ""/Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip/__init__.py"", line 144, in <module>; info = qutip.hardware_info.hardware_info(); File ""/Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip/hardware_info.py"", line 123, in hardware_info; out = _mac_hardware_info(); File ""/Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip/hardware_info.py"", line 48, in _mac_hardware_info; results.update({'cpu_freq': int(float(os.popen('sysctl -n machdep.cpu.brand_string'); IndexError: list index out of range. **Your Environment**; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0; Numpy Version: 1.19.4; Scipy Version: 1.5.3; Cython Version: 0.29.21; Matplotlib Version: 3.3.3; Python Version: 3.9.0; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/otanan/miniforge3/envs/main/lib/python3.9/site-packages/qutip-4.5.0-py3.9-macosx-11.0-arm64.egg/qutip. **Additional context**; I was able to ""fix"" the issue by simply commenting out lines 48 and 49 in Qutip's hardware_info.py.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395:1709,simpl,simply,1709,https://qutip.org,https://github.com/qutip/qutip/issues/1395,1,['simpl'],['simply']
Usability,**Describe the bug**; calling ptrace(0) should simply return the object. Instead it fails with an error. **To Reproduce**; import qutip as qp; qp.sigmax().ptrace(0). **Expected behavior**; expect it to return the existing object. **Your Environment**; QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.16; Matplotlib Version: 3.2.1; Python Version: 3.7.6; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\Lior Ella\scoop\apps\miniconda3\4.5.12\envs\tfenv\lib\site-packages\qutip,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1239:47,simpl,simply,47,https://qutip.org,https://github.com/qutip/qutip/issues/1239,1,['simpl'],['simply']
Usability,"**Describe the issue**. The ""Stochastic Solver"" page on the users guide currently have typos on equations and the text. Additionally, I believe the page could be improved by: ; - adding an example for qutip.smesolve;; - adding references for the equations discussed on the page (Chapter 4, Quantum Measurement and Control, from Wiseman and Milburn, for example);; - add links on the page for [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-heterodyne.ipynb) and [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb) tutorials. I would like to volunteer to make these changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706:66,guid,guide,66,https://qutip.org,https://github.com/qutip/qutip/issues/1706,1,['guid'],['guide']
Usability,"**Describe the issue**; Hello,; I'm studying the classical case of a driven qubit, and i want to know the steady state of the system. **To Reproduce**; I declared the following Hamiltonian; ```python; H_0 = 0.5 * h * w_eg * sigmaz(); H_1 = A * sigmax(); def H_1_t(t, args):; return cos(w * t). H = [H_0, [H_1, H_1_t]]; ```; but using `rho_ss = steadystate(H, c_ops)` returns the error; ```; TypeError: Solving for steady states requires Liouvillian (super) operators; ```; This implies that i can't see the spectrum through `spectrum(H, w, c_ops, sigmap(), sigmam())` because it calculates the steady state first, and so returns the same error.; A way to do that is by calculating the propagator and then the FFT of the correlation function; ```python; U = propagator(H, 2 * pi / w, c_ops); rho_ss = propagator_steadystate(U); rho_ss; corr = correlation_2op_1t(H, rho_ss, t, c_ops, sigmap(), sigmam()); wlist1, spec1 = spectrum_correlation_fft(t, corr); ```. Of course using `steadystate(H, c_ops)` function is much simpler and straightforward, and my question is if is it normal that `steadystate(H, c_ops)` returns error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1377:1016,simpl,simpler,1016,https://qutip.org,https://github.com/qutip/qutip/issues/1377,1,['simpl'],['simpler']
Usability,"**Describe the issue**; I am using the EnhancedTextProgressBar to track progress of an mesolve calculation in a jupyter notebook. Sometimes it works as expected; occasionally (it doesn't seem to be deterministic), I get an extra progress after the updating progress bar that does not delete, so that when the mesolve is complete, I see this: ; > [Total run time: 2.55s] Elapsed 2.55s / Remaining 00:00:00:00[*********70%**** ] Elapsed 1.79s / Remaining 00:00:00:00. Instead of just ; > [Total run time: 2.55s] Elapsed 2.55s / Remaining 00:00:00:00. If I run the same thing repeatedly, sometimes I'll get the extra status (at different elapsed times), sometimes I'll get two extras, sometimes I'll get none. The longer the calculation takes, the more likely it is that I'll get one or more of these, it seems. . This is not a super huge problem, but just curious if there's any way to fix it! . Thanks,; Emma",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1229:257,progress bar,progress bar,257,https://qutip.org,https://github.com/qutip/qutip/issues/1229,1,['progress bar'],['progress bar']
Usability,"**Describe the issue**; I was trying to generate random positive semi-definite matrices using the function `rand_herm` but the eigenvalues clearly don't seem to be random. For example, if I choose the dimension to be 3, then the eigenvalues are always like `3.something` or `4.something` or `5.something`; if I choose the dimension to be 4, the eigenvalues are always like '4.something` or `5.something` or `6.something`, and similarly for other dimensions. **To Reproduce**. ```; import numpy as np; from numpy.linalg import eig. N = 4; for i in range(10):; E = qutip.rand_herm(N, 0.35, None, True, None); w,v=eig(E); print('E-value:', w.real); ```; **The terminal output is**; ```; E-value: [6.32043755 6.06791959 5.24578891 4.99327095]; E-value: [5.37493846 5.8003551 6.26253682 5.65685425]; E-value: [5.17596435 5.5020902 5.8116183 6.13774415]; E-value: [6.25884718 5.05486132 5.71761238 5.59609612]; E-value: [5.94609905 5.36760945 6.2943825 5.33641017]; E-value: [6.25296302 5.06074548 5.65685425 5.65685425]; E-value: [4.81999397 5.75787997 6.57166109 5.65685425]; E-value: [5.23867334 6.35633232 5.8283425 5.65685425]; E-value: [5.13755732 5.71669004 6.21844559 5.65685425]; E-value: [6.32817223 5.48538456 5.30187642 6.01183208]; ```; **Expected Behaviour**; The eigenvalues should be random. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+nogit; Numpy Version: 1.21.1; Scipy Version: 1.7.0; Cython Version: None; Matplotlib Version: 3.4.2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642:139,clear,clearly,139,https://qutip.org,https://github.com/qutip/qutip/issues/1642,1,['clear'],['clearly']
Usability,"**Describe the issue**; We use subprocess for the LaTeX plotting procedure. But the current error message for a failed subprocess is very ambiguous, which makes it very hard to debug. For illustration purpose, I deliberately change the following line so that the input pdf file has a wrong name.; https://github.com/qutip/qutip/blob/403e466becbc5d36947ca15b9211d884df83f91a/qutip/qip/circuit_latex.py#L172; I changed it to e.g. `in_file = ""pdf-that-does-not-exist.pdf""`. Running the code, the output error message is; ```; CalledProcessError: Command '('magick', '-density', '100', 'aqcirc.pdf', 'qcirc.png')' returned non-zero exit status 1.; ```; This is not very useful since the exit status 1 can have many reasons. It can also be that an additional dependency is missing (which is the reason I started to debug at the first place).; What I would like to see is the real system error message:; ```; magick: unable to open image 'pdf-that-does-not-exist.pdf': No such file or directory; ```. **Possible solution**; I didn't find a nice solution for this. Simply changing the parameter of `subprocess.run` to `stderr=subprocess.PIPE` doesn't work for me. I have to catch the exception and print the stderr message:; ```; def _run_command(*args, **kwargs):; try:; functools.partial(subprocess.run, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)(*args, **kwargs); except subprocess.CalledProcessError as err:; raise RuntimeError(err.stderr); ```; which gives me the output; ```; RuntimeError: b""magick: unable to open image 'aqcirc.pdf': No such file or directory @ error/blob.c/OpenBlob/3496.\r\n""; ```; It's ok but still weird. I guess I overlooked some feature of `subprocess`. @jakelishman I'm wondering if you have a better solution?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1426:1058,Simpl,Simply,1058,https://qutip.org,https://github.com/qutip/qutip/issues/1426,1,['Simpl'],['Simply']
Usability,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632:683,simpl,simple,683,https://qutip.org,https://github.com/qutip/qutip/pull/1632,1,['simpl'],['simple']
Usability,"**Description**. Add capacity to merge stochastic solver results. While adding it found a few bugs/ issues with the merge and weight that I fixed:. - When one result had trajectories and the other did not, but both stored the states, the merged result had no states.; - When merging 2 results with default ratio, that ratio would depend on whether the `improved_sampling` options was used.; - When the no-jump probability was 1, the total weight as measured by `sum(res.runs_weight)` would not be one.; - A no-jump probability over 1 by numerical error would break the evolution.; - Error in the weight application in the `_target_tolerance_end`. The last 3 are easy fix. For the default weight when merging, using the `num_trajectories` instead of `_num_rel_trajectories` is enough.; But I tried the approach of not counting the no-jumb evolution as a trajectory. This has many small advantages:; - All `result.trajectories` are the same, the first few are not special. ; - All seeds are used.; - No confusing on the merging ratio.; - Keeping the absolute and relative weight apart simply part of the merging.; - The progress bar run up to the expected number. I also tired to simplify the weight management by accumulating per data then split by abs, rel. This makes it easier to add averaged data (nmmc's trace). Seeing the change in lines number in `multitrajresults.py` it seems to be about the same. I am also thinking of removing the weight from trajectories and making it only a multitraj property:; `multitraj.add((seed, traj, rel_weight))`; `multitraj.add_deterministic(traj, abs_weight)`. The marginal / trace would stay in the trajectory, but not merging those with weight feel simpler to me. @pmenczel ; This PR larger than I expected, do you want me to break it into smaller ones for review or are you fine like this.; What do you think about splitting the no-jump / abs traj from the normal ones?; What about having the weights in the `add` instead of the trajectories?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2455:1083,simpl,simply,1083,https://qutip.org,https://github.com/qutip/qutip/pull/2455,4,"['progress bar', 'simpl']","['progress bar', 'simpler', 'simplify', 'simply']"
Usability,**Description**. Calling Version directly has given the strict parsing we require since the Version class was created and the class predates the parse(...) function itself. This simpler code should give the correct behaviour on all versions of packaging since 2014. **Related issues or PRs**; - See #2037; - See #2036,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2043:178,simpl,simpler,178,https://qutip.org,https://github.com/qutip/qutip/pull/2043,1,['simpl'],['simpler']
Usability,**Description**. Calling Version directly has given the strict parsing we require since the Version class was created and the class predates the parse(...) function itself. This simpler code should give the correct behaviour on all versions of packaging since 2014. **Related issues or PRs**; - See #2039; - See #2043,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2044:178,simpl,simpler,178,https://qutip.org,https://github.com/qutip/qutip/pull/2044,1,['simpl'],['simpler']
Usability,"**Description**. Edited the user guide documentation for Stochastic solvers. Text, equations, and example updated. **Related issues or PRs**; Related to issue #1706. **Changelog**. - Improved explanation of stochastic equation solvers.; - Added links for notebooks with examples for stochastic solvers.; - Added links to API documentation for smesolve, ssesolve, general_stochastic.; - New example highlighting the differences between result.expect and result.measurement.; - Added reference to Quantum Measurement and Control, Wiseman & Milburn (2009).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1743:33,guid,guide,33,https://qutip.org,https://github.com/qutip/qutip/pull/1743,1,['guid'],['guide']
Usability,"**Description**. Fix an error in 1 time correlations function's equations.; Make clearer that 2 times correlation functions always return 2D array even when `tlist` is `None`.; Add the `:class:` descriptor to `Qobj`, `QobjEvo` in docstrings.; Remove `HEOMSolver` from the list of supported input of `correlation_3op`. **Related issues or PRs**; Fix #2018",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2021:81,clear,clearer,81,https://qutip.org,https://github.com/qutip/qutip/pull/2021,1,['clear'],['clearer']
Usability,"**Description**. Hi, I would like to contribute to the issue https://github.com/qutip/qutip/issues/2389 as part of the UnitaryHack2024. I have incorporated a basic use of gates module to guide-basics.rst and a table of the available gates, with and example of how to use a Hadamard gate. Let me know if there is anything else that have to be done. **Related issues or PRs**; https://github.com/qutip/qutip/issues/2389",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441:187,guid,guide-basics,187,https://qutip.org,https://github.com/qutip/qutip/pull/2441,1,['guid'],['guide-basics']
Usability,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655:472,Feedback,Feedback,472,https://qutip.org,https://github.com/qutip/qutip/pull/1655,1,['Feedback'],['Feedback']
Usability,"**Description**. Introduces weights for the trajectories of trajectory solvers. These weights enter all trajectory averages. This concept is a generalization of two things that are already in qutip:; * The influence martingale in `nm_mcsolve` is simply a time-dependent weight from this point of view; * The ""improved sampling"" option for `mcsolve` weights the no-jump trajectory with its exact probability, and then only samples from the ensemble of trajectories with at least one jump. Currently, these two things cannot be combined: ""improved sampling"" does not work for `nm_mcsolve`. With these changes, it would work.; In the future, there might be at least one more application for weighted trajectories:; * For mixed initial states in `mcsolve`, it might be useful to allow sampling of initial states with frequencies or probabilities that are different from their true prefactor in the initial state. The ratio between the sampling frequencies and true prefactors would be weights on the trajectories. This also fixes some things in merging `McResult`s and `NmmcResult`s, and perhaps fixes the target tolerance computation for the ""improved sampling"" option. **Implementation**. A difficulty in the implementation is that the weights depend on the total number of trajectories in different ways. For example, the no-jump trajectory has a fixed weight that never changes, but all other trajectories come with prefactors $(1-p_0) / (N-1)$ where $p_0$ is the probability of the no-jump trajectory, and $N$ the total number of trajectories (including the one no-jump trajectory). For this reason, I separate weights into *absolute weights* (like $p_0$) and *relative weights* (like the others). The average is performed as follows:. $$ \bar\rho = \sum_{T: \text{abs}} w_a(T) w_r(T) \rho(T) + \frac{1}{N_{\text{rel}}} \sum _{T: \text{rel}} w_r(T) \rho(T) $$. where the first sum is over all trajectories T that have absolute weights, and the second sum over all other trajectories. Here, $w_a(T)$ a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369:246,simpl,simply,246,https://qutip.org,https://github.com/qutip/qutip/pull/2369,1,['simpl'],['simply']
Usability,"**Description**. Python 3.6 tests fail to build cvxopt, there was a new version released last week.; This simply run these tests without it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2215:106,simpl,simply,106,https://qutip.org,https://github.com/qutip/qutip/pull/2215,1,['simpl'],['simply']
Usability,**Description**. The `Settings` class unnecessarily implements a singleton pattern and has a few unused underscore attributes (e.g. `_integartors`). This PR removes the unused / necessary code and simplifies the class. **Related issues or PRs**. - None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2079:197,simpl,simplifies,197,https://qutip.org,https://github.com/qutip/qutip/pull/2079,1,['simpl'],['simplifies']
Usability,"**Description**. The word ""then"" is mistyped in the sentence ""If the operator is Hermitian, **than** the output will always be real"". **Related issues or PRs**. None. **Changelog**. Corrected typo in Guide / Manipulating States and Operators.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1567:200,Guid,Guide,200,https://qutip.org,https://github.com/qutip/qutip/pull/1567,1,['Guid'],['Guide']
Usability,"**Description**. This is an overhaul of the dimensions based on the proposition by @jakelishman in #1476.; As proposed, dimension objects singleton instances composed of map and spaces. Dimensions used by `Qobj` are all represented by a map between 2 spaces:. - ket: Dimensions(Field, Space); - bra: Dimensions(Space, Field); - oper: Dimensions(Space, Space); ... This `Dimension` is the `Map` proposed by Jake, but `ket` are map from `Field` to `Space` and not Space` themselves.; Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`.; Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims : `Space()[1]` does exist. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1826:621,simpl,simplify,621,https://qutip.org,https://github.com/qutip/qutip/pull/1826,1,['simpl'],['simplify']
Usability,"**Description**. This is an overhaul of the dimensions based on the proposition by @jakelishman in https://github.com/qutip/qutip/discussions/1476, replace #1826, which was done before merging `master` into `dev.major` and had conflicts.; As proposed, dimension objects singleton instances composed of map and spaces. Dimensions used by Qobj are all represented by a map between 2 spaces:. ket: Dimensions(Field, Space); bra: Dimensions(Space, Field); oper: Dimensions(Space, Space); ... This Dimension is the `Map` proposed by Jake, but ket are map from `Field` to `Space` and not `Space` themselves. Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`. Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they ar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1996:740,simpl,simplify,740,https://qutip.org,https://github.com/qutip/qutip/pull/1996,1,['simpl'],['simplify']
Usability,"**Description**. Update the documentation of guide-random to fit the next interface with `seed`, `dtype`, `distribution` etc.; Remove some method no longer existing for `Qobj` listed in guide-random.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2024:45,guid,guide-random,45,https://qutip.org,https://github.com/qutip/qutip/pull/2024,2,['guid'],['guide-random']
Usability,"**Description**. With the inclusion of the new dimensions class, stored in Qobj()'s _dims property, the properties of ENR states are described by ENRspace(). However, when using ENR states with mesolve, Liouvillian, sum() and other functions these _dim properties would be discarded. This PR is a draft attempt to get things working, largely by subbing in _dims instead of dims in various places, and a test to check ENR+mesolve() works for a simple case. All tests pass, but since this is just some bodging to get things working, and messes a little bit with some core functions maybe its also good to check the tutorial notebooks also pass. edit: forgot to mention, this is not exhaustive; e.g., sprepost() has not been updated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2341:443,simpl,simple,443,https://qutip.org,https://github.com/qutip/qutip/pull/2341,1,['simpl'],['simple']
Usability,"**Description**; - Add a mention that filelock is needed for string coefficient compilation in the guide.; - When a string coefficient is used, a warning will be raised (once) if either cython or filelock is missing.; - Skip string coefficient compilation test when cython is present by filelock is not instead of only checking for cython. **Related issues or PRs**; fix #2162",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2168:99,guid,guide,99,https://qutip.org,https://github.com/qutip/qutip/pull/2168,1,['guid'],['guide']
Usability,"**Description**; - Add a test for progress bars.; - Make `start` private. `start` was mostly used right after the initialization. The docstring indicated that it was not needed, but it was for most bars. #2148; - Remove the iteration argument in update.; - Have `HTMLProgressBar` import ipython. **Related issues or PRs**; Fix the issue #2148 for master.; Replace #2127",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:34,progress bar,progress bars,34,https://qutip.org,https://github.com/qutip/qutip/pull/2150,1,['progress bar'],['progress bars']
Usability,"**Description**; - Fix a dimension problem for the argument `color` of `Bloch.add_states`; ```python; import qutip as qt; bloch.add_states([qt.basis(2,0), qt.basis(2,1)], colors=[""crimson"", ""gold""]) # fails whereas it should work; bloch.add_states([qt.basis(2,0), qt.basis(2,1)], colors=[[""crimson""], [""gold""]]) # what works; ```; - Clean-up of the code in `Bloch.add_states` as asked in #1913 ; - Add `Bloch.add_arc` and `Bloch.add_line` in the guide on Bloch class",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2445:446,guid,guide,446,https://qutip.org,https://github.com/qutip/qutip/pull/2445,1,['guid'],['guide']
Usability,"**Description**; - Fix memory cascade to work in v5.; - Move it to a new legacy folder. ; I would like to remove it, but I don't know if anybody uses it and it can't be replaced by another solver.; However, it create evolution with jump in the output coming from numerical methods, see https://github.com/qutip/qutip-notebooks/blob/master/examples/nonmarkov-coherent-feedback.ipynb.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2152:367,feedback,feedback,367,https://qutip.org,https://github.com/qutip/qutip/pull/2152,1,['feedback'],['feedback']
Usability,"**Description**; - The plotting method is made more robust.; - Add `pulse_mode` as a wrapper for spline_kind, for discrete and continuous pulses. They are more friendly names for experimentalists.; - Add `num_qubits` as a replacement for `N`. In QuTiP capital letter are used for operators, like `H` for Hamiltonian. Due to historical reason, `N` is used in `qip` for the number of qubits. We would like to replace it with `num_qubits` in `qutip_qip`. Start from this wrapper and promoting the usage of this in notebooks guide. **Changelog**; Minor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1446:521,guid,guide,521,https://qutip.org,https://github.com/qutip/qutip/pull/1446,1,['guid'],['guide']
Usability,"**Description**; Add a new options that control where the `default_dtype` is taken into account: `default_dtype_range` (feel free to propose better name.); It has 3 possible values:; - ""creation"": At `Qobj` creation functions, behaviour we presently have.; - ""missing"": Missing specialization will output that type: `Dense + Jax` is not defined so will default to that type.; - ""full"": Every operations return that type: `Dense + Dense` would convert the result to the `default_dtype`. Unary operations will also convert the output type. It could break some functions that explicitly set the date type such as `steadystate` or `HEOM`... Also added control of the created format in `Qobj.__init__`: added `dtype`, when the initial data is a list of list, use `default_dtype`, with `""full""` also use `default_dtype`. Only using the default value with list normally is so solver states are not converted automatically which would slow the solver unexpectedly. . I am looking into creating alias for a group of data layer. This would allow to set the default to jax and jaxdiag at once. Used with `""full""`, this would ensure only jax compatible data layers are used while not forcing the sparcity. This would hopefully make `""full""` usable. **Related issues or PRs**; #2328",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2519:1229,usab,usable,1229,https://qutip.org,https://github.com/qutip/qutip/pull/2519,1,['usab'],['usable']
Usability,**Description**; Add a simple example for `run_from_experiement` in the guide.; Also restore the link to the stochastic tutorial notebooks.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2479:23,simpl,simple,23,https://qutip.org,https://github.com/qutip/qutip/pull/2479,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"**Description**; Add hypothesis strategies for data objects and some simple property-based tests for data operations. We aim for compatibility with numpy, but there are caveats in few different cases:. | Operations | Non-finites Equivalent | Notes |; | -- | -- | -- |; | Creation & negation | | No caveats |; | Equality checks | | The same tolerances must be specified |; | Addition & subtraction | Yes | |; | Scalar multiplication & division | Yes | CSR may raise an exception if the scalar is non-finite |; | Matrix multiplication | Not tests | Magnitude range is restrict to ensure precision |; | Trace, adjoint, transpose, conj & copy | | No caveats |. In some cases we also need to ignore warnings raised by numpy about operations with `nan` and `inf` when calculating the expected result. **Related issues or PRs**; - None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957:69,simpl,simple,69,https://qutip.org,https://github.com/qutip/qutip/pull/1957,1,['simpl'],['simple']
Usability,"**Description**; Adding a guide on *Superoperators, Pauli Basis and Channel Contraction* which is moved from this notebook:; https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/superop-contract.ipynb. **Related issues or PRs**; The corresponding notebook was removed from the new `qutip-tutorials` repository in this PR https://github.com/qutip/qutip-tutorials/pull/34",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1984:26,guid,guide,26,https://qutip.org,https://github.com/qutip/qutip/pull/1984,1,['guid'],['guide']
Usability,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862:38,guid,guide,38,https://qutip.org,https://github.com/qutip/qutip/pull/1862,5,['guid'],"['guide', 'guide-dynamics']"
Usability,"**Description**; Adding spin-1/2 fermionic creation and annihilation operators to close #2165 (for UnitaryHack 2023). Specifically, in `qutip.core.operators`, I added the `fcreate` and `fdestroy` functions, following the Jordan-Wigner transformation described in [this guide](https://learn.microsoft.com/en-us/azure/quantum/user-guide/libraries/chemistry/concepts/jordan-wigner). Specifically, I implemented the following using `qutip.tensor` objects, and documented this in the code. $$a_j = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x + i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. $$a_j^{\dagger} = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x - i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. Additionally, I wrote a new test in `qutip.tests.core.test_operators` that verified the commutation relations. I also ran the new code through `pycodestyle` to verify it was written nicely. Please let me know if there are any issues or anything I should be doing on the documentation side! I hope I understood the problem correctly :). **Related issues or PRs**; close #2165; I closely followed the protocol in #863",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2166:269,guid,guide,269,https://qutip.org,https://github.com/qutip/qutip/pull/2166,3,"['guid', 'learn']","['guide', 'learn']"
Usability,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1874:565,simpl,simpler,565,https://qutip.org,https://github.com/qutip/qutip/pull/1874,1,['simpl'],['simpler']
Usability,"**Description**; Adds support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in [arXiv:2209.08958](https://arxiv.org/abs/2209.08958) [quant-ph]. A simple example can be found in [this notebook](https://github.com/pmenczel/nm-mcsolve-example/blob/master/nonmarkovian_mcsolver.ipynb). Based on code provided by B. Donvil. **Todo-List**; - [X] Create users guide; - [X] Add example notebook to qutip-tutorial and link it in users guide ([PR in qutip-tutorials repo](https://github.com/qutip/qutip-tutorials/pull/59)); - [X] Store the trajectory-average of the influence martingale in the `Result` object; - Use this as end condition, or to warn users about bad convergence? ; (Unclear how effective that would be. Will not be implemented for now); - [X] Make associated `nm_mcsolve` function (name up for debate?); - [X] Write docstring comments; - [X] Write tests; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070:219,simpl,simple,219,https://qutip.org,https://github.com/qutip/qutip/pull/2070,3,"['guid', 'simpl']","['guide', 'simple']"
Usability,"**Description**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)` signature. The old style signature is used if the arguments to the function are exactly `(t, args)`. Otherwise the new calling convention is used. This PR also limits the arguments stored to those accepted by the function, potentially reducing some extra copies of functions when `.replace_arguments()` is called. **Related issues or PRs**; This is an alternative implementation of #1609. This implementation retains single FunctionCoefficient and _FuncElement classes and simplifies the logic for deciding whether the old or new-style calling convention is used. **Changelog**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633:671,simpl,simplifies,671,https://qutip.org,https://github.com/qutip/qutip/pull/1633,1,['simpl'],['simplifies']
Usability,"**Description**; Allow the dispatcher to accept specialisations on generic `Data`.; This as 2 uses:; - Simplify the creation of complex function using simpler ones: `inner` defined in term of `matmul`. ; - Allow us to create niche dispatched functions for some data layer without the need to be supported by all: blas' zgemm (matmul) can transpose and adjoint of each input matrix in the same operation. . The `Data` dispatched functions have less priority than direct specialization. They are used directly (no `_constructed_specialisation`) when the `Data` is in the inputs, but when the output data type is set, there will always be a conversion from `Data` to the desired type. . In this PR:; - Add dispatch on `Data`.; - Add direct tests for the dispatcher.; - Create `kron_transpose` which is `kron(left.T, tright)`. It's commonly used for superoperator and it can be optimized for `Dense` and `Jax` by doing it in one operation.; - Add `Data` specialization for `inner`, `inner_op`, `expect`, `expect_super` and `trace_oper_ket`.; - Make `zeros_like` and `identity_like` as dispatched function so the order is kept during operation for dense.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2157:103,Simpl,Simplify,103,https://qutip.org,https://github.com/qutip/qutip/pull/2157,2,"['Simpl', 'simpl']","['Simplify', 'simpler']"
Usability,"**Description**; As seen in #2102, there are some confusion to the definition of fidelity.; `fidelity`, `process_fidelity` each implement a different version of fidelity from different papers. `process_fidelity` has a note explaining the differences, but `fidelity` didn't.; In this PR, I add a note in `fidelity`, so that at least when looking at the documentation, which version used is clear. I also fixed a few flake8 issues.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2257:389,clear,clear,389,https://qutip.org,https://github.com/qutip/qutip/pull/2257,1,['clear'],['clear']
Usability,**Description**; Cherry-pick changes merged to master and added a changelog.; - Fixed link to the documentation that migrated to readthedocs; - Removed readme note about v5 being in alpha; - Fixed monte carlo documentation for open systems; - Fixed readthedocs search feature.; - Added setuptools to runtime compilation requirements; - Fixed progress bar OverFlowError,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2378:342,progress bar,progress bar,342,https://qutip.org,https://github.com/qutip/qutip/pull/2378,1,['progress bar'],['progress bar']
Usability,"**Description**; Clean up verbiage in guide overview and remove illegible figure.""; **Related issues or PRs**; 1759. **Changelog**; Clean up verbiage in guide overview and remove illegible figure.""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1769:38,guid,guide,38,https://qutip.org,https://github.com/qutip/qutip/pull/1769,2,['guid'],['guide']
Usability,"**Description**; Completed the guide page of the settings to include missing entries as well as options included in `settings.core` and `settings.compile`. Added `CoreOptions` and `CompileOptions` to the apidoc and completed the docstrings. I also removed settings that are no longer used anywhere. Lastly I changed the default for `accept_float` compile option. Presently, if an args is a float it cannot be updated to a complex:; ```; >>> a = qutip.coefficient(""A"", args={""A"": 1.}); >>> a(0, A=1j); TypeError: must be real number, not complex; ```; Creating a new coefficient work would be needed. This will certainly cause an issue eventually, but updating it to complex automatically would cause some error with brmesolve spectra: (`w > w0`) as complex cannot be compared. Without types, string are not any better than functions so removing them altogether is not ideal. So I changed it to use complex when no comparison are done and float otherwise. **Related issues or PRs**; fix #1524",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2403:31,guid,guide,31,https://qutip.org,https://github.com/qutip/qutip/pull/2403,1,['guid'],['guide']
Usability,**Description**; Couldn't make #2202 work...; There are segfault in brmesolve with cython 3.0.0 and the new compilation method does not work properly on windows. ; This replace the PR with a simple limitation to not use cython 3.0.0.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2204:191,simpl,simple,191,https://qutip.org,https://github.com/qutip/qutip/pull/2204,1,['simpl'],['simple']
Usability,**Description**; Describe here the proposed change. **Related issues or PRs**; #1774. **Changelog**; And an introduction to the dynamics guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1775:137,guid,guide,137,https://qutip.org,https://github.com/qutip/qutip/pull/1775,1,['guid'],['guide']
Usability,"**Description**; Dicke density state matrix should only have positive eigenvalues, but rounding errors causes eigenvalues of 0 to instead be represented as a very small negative number.; This causes `dicke_trace_function` to return -Inf, since `scipy.special.entr` returns -Inf for any values < 0.; This issue was fixed by simply taking the absolute value of the eigenvalues in dicke_trace_function, which we are allowed to do since the density state matrix should only have positive eigenvalues. **Related issues or PRs**; fix #1919",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2466:323,simpl,simply,323,https://qutip.org,https://github.com/qutip/qutip/pull/2466,1,['simpl'],['simply']
Usability,"**Description**; Enables use of `mcsolve` and `nm_mcsolve` with mixed initial conditions. Added functions `run_mixed` to the MCSolver and NonMarkovianMCSolver classes. Instead of an initial pure state, these functions take either a density matrix or a list of `(psi_i, p_i)` where `psi_i` are pure initial states and `p_i` are the weights for the average over the initial states. In the latter case, the `ntraj` parameter can be a list specifying the number of trajectories to be used for each initial state. The trajectories automatically obtain correction weights if the fraction of trajectories starting in `psi_i` does not match `p_i`. The functions `mcsolve` and `nm_mcsolve` take either a pure state or a density matrix as the initial state, and call either `run` or `run_mixed` of the solver, respectively. The stochastic solvers also inherit the `run_mixed` functions, but I don't know if there is any use case for that. The most complicated issue here was the combination of a mixed initial state with ""improved sampling"". In this case, run_mixed first runs the no-jump trajectories for all initial states (potentially using `parallel_map` etc) and then runs all other trajectories (using `parallel_map` again, this means that there are two progress bars...). **Todo**; - [X] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437:1250,progress bar,progress bars,1250,https://qutip.org,https://github.com/qutip/qutip/pull/2437,1,['progress bar'],['progress bars']
Usability,**Description**; Fix the bug in collapse feedback that made it work properly only for the first trajectories. (#2422); Also added a check in the feedback test to ensure the collapse argument is reset for each trajectories.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2424:41,feedback,feedback,41,https://qutip.org,https://github.com/qutip/qutip/pull/2424,2,['feedback'],['feedback']
Usability,"**Description**; Fix the parameters in the call to fsesolve in the floquet guide. The fsesolve parameters were updated at some point, but the guide wasn't. **Related issues or PRs**; Fixes #1663 . **Changelog**; Fixed the parameters in the call to fsesolve in the floquet guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1675:75,guid,guide,75,https://qutip.org,https://github.com/qutip/qutip/pull/1675,3,['guid'],['guide']
Usability,"**Description**; Follow up to #2271, looking at every other section of the guide in the documentation; - Fixed internal link to the apidoc.; - Removed reference to `Bloch3D` so it can easily be removed.; - Replaced the Quantum control section in QuTiP section with link to qutip-qtrl and qutip-qoc project.; - Removed the `parfor` page. parallel map implementation is not a core job of qutip.; - Added a short section about data layer format in the `Qobj` description. More is needed, but should be good enough for basic usage.; - Changed a 80 lines long Qobj output with a visual representation of the object.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2279:75,guid,guide,75,https://qutip.org,https://github.com/qutip/qutip/pull/2279,1,['guid'],['guide']
Usability,"**Description**; Hinton plots accept a `title` argument, but the code does not actually set the plot's title. Along with this fix, I also removed unused imports and fixed the other function's titles to avoid verbose such as. ```python; if title:; ax.set_title(title); ```; where the simple `ax.set_title(title)` does nothing when `title` is `None`. **Related issues or PRs**; No related issues or PRs. **Changelog**; Display a title for hinton and matrix_histogram plots when a title is given.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1707:283,simpl,simple,283,https://qutip.org,https://github.com/qutip/qutip/pull/1707,1,['simpl'],['simple']
Usability,"**Description**; I found the description for unitary, non-dissipative time evolution a bit confusing as the text always referred to `mesolve` while the examples used `sesolve`. I adapted the text to `sesolve` for that section and introduced `mesolve` only in the next section. **Related issues or PRs**; understanding the docs. **Changelog**; Improve documentation on solving for unitary dynamics by making the use of sesolve and mesolve in the code examples more consistent with the text, and by making the text clearer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1921:513,clear,clearer,513,https://qutip.org,https://github.com/qutip/qutip/pull/1921,1,['clear'],['clearer']
Usability,"**Description**; In #1812, I worked on removing the tree structure of option and having options per solver instead of having them together.; This way, we don't need to pass `mcsolve` specific options to `mesolve`, etc. and it makes it simpler to know which options are used by which solver. That PR is getting quite large and went through multiple revision, so I am replacing it with two smaller ones. In this PR, I simplify the options in core. `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. Most of these settings are properties of the object and only computed when being called instead of at import in `__init__.py`. . `CoreOptions` and `CompilationOptions` are now both made from a simpler `QutipOptions` class instead of the `optionsclass` which generated many method at import. Some options have been moved around: `debug`, `log_handler`, `colorblind_safe` and `use_cython` has been moved to `CoreOptions`. Since instance of `CoreOptions` cannot be passed to functions using it. It supports context:; ```; with CoreOptions(auto_tidyup=False):; op = sparse1 + sparse2; ```; and global options change using:; ```; qutip.settings.core['atol'] = 1e-6; ```. `CompilationOptions` instance must be passed to `coefficient` to be used. `configrc` was removed. It was used to store settings in a file that would be read when importing qutip. This was mainly used to store the openmp threshold. Without openmp, we don't have any settings to store between sessions. Some test related to mkl had to be fixed, it seems that they were always skipped before these changes. **Related issues or PRs**; Replace #1812. **Changelog**; Simplify settings and core options.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1924:235,simpl,simpler,235,https://qutip.org,https://github.com/qutip/qutip/pull/1924,4,"['Simpl', 'simpl']","['Simplify', 'simpler', 'simplify']"
Usability,"**Description**; In #2308, the default for `point_color` was changed from `[]` to `None`, but `clear` still set it to an empty list.; This broke a notebook in qutip-tutorial: tutorials-v5/visualization/bloch-sphere-animation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2336:95,clear,clear,95,https://qutip.org,https://github.com/qutip/qutip/pull/2336,1,['clear'],['clear']
Usability,"**Description**; In v4, using string was needed to run `brmesolve` with time dependent system. But from v5, using a `QobjEvo` is sufficient, any coefficient format is accepted. I removed the section in the guide saying that string format is needed. Also, I split the one paragraph per line to one sentence per lines.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2033:206,guid,guide,206,https://qutip.org,https://github.com/qutip/qutip/pull/2033,1,['guid'],['guide']
Usability,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481:871,simpl,simply,871,https://qutip.org,https://github.com/qutip/qutip/pull/1481,1,['simpl'],['simply']
Usability,"**Description**; Move `ttmsolve` to `qutip/solver` and update it. No class interface was created, `ttmsolve` work differently to other solver and would be hard to force into the `Solver` mould. Changed the interface a little, `learningtimes` needed use the first values `times` to be valid, it was replaced by an options for the number of values in ``times`` to use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2142:227,learn,learningtimes,227,https://qutip.org,https://github.com/qutip/qutip/pull/2142,1,['learn'],['learningtimes']
Usability,"**Description**; On mac, with OpenBlas, `eigh` can cause segmentation fault, see #1197. For 4.5.1, we simply skipped the tests causing problems ( #1257). This replace the calls of `numpy.linalg.eigh` to `numpy.linalg.eig`, and lapack calls of `ZHEEVR` to `ZGEEV` when at risk of segfault. This will result in slower `Qobj.eigenstates` and `brmesolve`. . Tests where adapted, the issues were the phase of the eigenvectors and the lower numerical precision of `eig`. While the flag to use `eig` instead of `eigh` is `qutip.settings.eigh_unsafe`, it must be set before importing `qutip.sparse` to have any effect. Thus it is not a true settings, (like `has_openmp`). **Changelog**; Replace calls of `eigh` to `eig` when at risk of segfault.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1288:102,simpl,simply,102,https://qutip.org,https://github.com/qutip/qutip/pull/1288,1,['simpl'],['simply']
Usability,"**Description**; Provide a friendlier introduction to the dynamics section of the user's guide. **Related issues or PRs**; 1759; **Changelog**; Added an item to the toc of the user's guide under ""dynamics"", with an introduction to the QuTiP solvers.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761:89,guid,guide,89,https://qutip.org,https://github.com/qutip/qutip/pull/1761,2,['guid'],['guide']
Usability,**Description**; Refactor Qutip.Qip.Circuit.solve_gates as a dispatch-like method for assigning different functions and make the QubitCircuit module more commutable.; These changes make it easier for maintenance and provide a clearer workflow. **Changelog**; Refactor Qutip.Qip.Circuit.solve_gates,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1226:226,clear,clearer,226,https://qutip.org,https://github.com/qutip/qutip/pull/1226,1,['clear'],['clearer']
Usability,"**Description**; Remove tests using python 3.6 and 3.7 and openmp tests.; SInce we need to add a new job for each python version, we also need to remove older jobs so the whole test suite don't get bloated. Numpy has a suggestion for version support in scientific project in [NEP29](https://numpy.org/neps/nep-0029-deprecation_policy.html) which we can follow to decide when we can remove some tests and if it's fine to use newer feature forcing us to improve our requirements. I added a note in the contributing and release guides to refer to this when adding a change using feature of newer version of package we use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941:525,guid,guides,525,https://qutip.org,https://github.com/qutip/qutip/pull/1941,1,['guid'],['guides']
Usability,"**Description**; Remove the QIP submodule that has been migrated to `qutip/qutip-qip`. Most files were simply deleted, but there are a few non trivial parts:; - The gates used in tests were added to operators.py, all others were removed. The signature was changed: the `target` parameter was removed and `dtype` keywords added to match other operators. This means that there will be two version of `cnot` etc. available. . - `qutip.enntropy.entangling_power` was also removed. While it was not strictly in the qip module, it is meant to be used for 2 qubits gates, so it felt more natural to be included there. - The target qubits options for measurement was removed. qip has it's own more specialized `Measurement` class, which I guess is the reference for such case. But we could make it stronger so that it can target various kind of subsystems, such as one site on a lattice or one of harmonic oscillator coupled to others, etc. Bonus: The `-Werror` for pytest was restored. **Related issues or PRs**; Checklist item in #1850. **Changelog**; Remove the qip submodule.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890:103,simpl,simply,103,https://qutip.org,https://github.com/qutip/qutip/pull/1890,1,['simpl'],['simply']
Usability,**Description**; Remove unused feature in `Bloch.plot_vectors`. This feature was bugged and undocumented. **Related issues or PRs**; #1916. **Changelog**; Remove unused feature in `Bloch.plot_vectors`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1932:92,undo,undocumented,92,https://qutip.org,https://github.com/qutip/qutip/pull/1932,1,['undo'],['undocumented']
Usability,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1792:515,simpl,simpler,515,https://qutip.org,https://github.com/qutip/qutip/pull/1792,1,['simpl'],['simpler']
Usability,"**Description**; Restore the feedback capacities of the solver.; In v4, this was done by using special names for the `args`, but this was confusing. . For v5, I propose to do it using a `add_feedback` method of the solver:; ```; H = QobjEvo([op, lambda t, ket: bra @ ket]); solver = SESolver(H); solver.add_feedback(""ket"", ""qobj""); solver.run(...); ```; With this, `args[""ket""]` will be updated with the state during the evolution. Most solver support it, the exception are floquet, nm_mcsolve. ; HEOM support it, but the state will be seen as a single ket.; @hodgestar , is that fine?. Available form are as `Qobj`, as `Data`, `expect(oper, data)`.; `mcsolve` also has the collapse and `stochastic` the wiener process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210:29,feedback,feedback,29,https://qutip.org,https://github.com/qutip/qutip/pull/2210,1,['feedback'],['feedback']
Usability,"**Description**; Review the guide-dynamics part of the guide for v5. - Fixed internal links; - Added section for new features for mcsolve.; - Added page for solver class interface.; - Improved the solver introduction table.; - Moved piqs to after steadystate, the only example did not do an evolution, but computed a steadystate.; - Moved nmmcsolve to it's own page after time dependent introduction.; - `mcsolve` uses `seeds` but `MCSolver.run` used `seed`, changed to use `seeds` every where.; - Cut too long lines to around ~80 characters in many places.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2271:28,guid,guide-dynamics,28,https://qutip.org,https://github.com/qutip/qutip/pull/2271,2,['guid'],"['guide', 'guide-dynamics']"
Usability,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1455:726,feedback,feedback,726,https://qutip.org,https://github.com/qutip/qutip/pull/1455,1,['feedback'],['feedback']
Usability,**Description**; Simplify `_index_permutations` using `itertools`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2145:17,Simpl,Simplify,17,https://qutip.org,https://github.com/qutip/qutip/pull/2145,1,['Simpl'],['Simplify']
Usability,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1604:30,simpl,simplify,30,https://qutip.org,https://github.com/qutip/qutip/pull/1604,2,['simpl'],"['simple', 'simplify']"
Usability,"**Description**; Splitting #1409, part 2/3.; Contain the non Integrator/Evoler part of the PR. ##### Options; Add move some options around and add a class for ODE options. ; parallel_map and progress_bar will become options, not arguments to the `solve` function.; `store_states` default is None so that `store_states=False` is not overwritten when no e_ops given. (#1437). ##### Result; With this version, the `Result` object is responsible to know if states are stored and to compute expectation values, in the method `add(t, state: Qobj)`. The solver will be responsible to create the `Qobj` for the state.; (#1460): The type of the expectation value [float, complex] is set by the `expect` function, `QobjEvo.expect` or user provided expect function. ; (#1238): Multiple callback function can be given as expectation: `e_ops=expect_func`, `e_ops=[expect_func1, expect_func2]`, are both valid.; `mcsolve` (and probably stochactic) use `MultiTrajResult` or `MultiTrajResultAveraged`. They have both `average_state` and `run_states` instead of `states` which content change depending on options. They can also compute the `photocurrent` from the collapse. (making photocurrent_sesolve useless). ##### parallel; Add a `reduce_func` which allows to treat a results without waiting for all task to be done. Presently even when using `average_states`, all states are saved and the average is only computed at the end, which is not the behaviour expected by the users. ; (#1092 ) Add a loky based parallel map. It does not pickle object the same way as multiprocessing. ##### progress bar; Add a bar based on `tqdm`, which is a standard progress bar in python.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1462:1572,progress bar,progress bar,1572,https://qutip.org,https://github.com/qutip/qutip/pull/1462,2,['progress bar'],['progress bar']
Usability,"**Description**; Splitting the coefficient from the data in QobjEvo,; This clean qobjevo a lot, no more type management, product between QobjEvo is a lot simpler.; I removed the `apply_decorator` method, which was probably never used. Build on top of #1231, most changes are from that PR. In this one, ; I will probably cancel this PR and 1231 and re-post them in more manageable steps. Documentation is not corrected. **Related issues or PRs**; @jakelishman 's GSoC talks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1277:154,simpl,simpler,154,https://qutip.org,https://github.com/qutip/qutip/pull/1277,1,['simpl'],['simpler']
Usability,"**Description**; The PR provides a way to characterize thermal environments for open quantum systems, The user can now construct Thermal environments by specifying The spectral density, or the correlation function , or the power spectrum and the Temperature. Once specified the other two are calculated. We hope once integrated with the solvers, this PR will allow for a more systematic way of comparing different approaches, and easier simulations by quickly obtaining the quantities needed from the bath objects. The PR also provides exponential approximations of the environment via a fit of the correlation function, and a fit of the spectral density in terms of underdamped modes, the PR allows for incorporation of more approximation methods, which will be added in the future. . **Related issues or PRs**; This PR is a generalization of #2260 . Special Thanks to @pmenczel for improving the code significantly and valuable suggestions!. **TODO:**. I think perhaps those are better finished once we have decided that this structure for the environments is the way to go. However, the most important missing bits are . - [x] Finish documentation in the User's guide; - [x] Add relevant tests for the HEOM solver using the enviroment class; - [ ] Finish tests for environment.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534:1165,guid,guide,1165,https://qutip.org,https://github.com/qutip/qutip/pull/2534,1,['guid'],['guide']
Usability,"**Description**; The algorithm used in `enr_destroy` was extremely inefficient, with a triple loop. This PR replaces it with a much simpler algorithm with only a single loop. For `dims = [3,8,2,4,6,1,3]` and `Nexc = 6`, on my computer `enr_destroy(dims,Nexc)` took almost 4 s, with the new algorithm it takes 20 ms. I've checked that the output is identical. **Changelog**; Made enr_destroy significantly faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1593:132,simpl,simpler,132,https://qutip.org,https://github.com/qutip/qutip/pull/1593,1,['simpl'],['simpler']
Usability,"**Description**; The api splitting functions and classes is not very intuitive. ; I reordered it so that similar feature are grouped together: `MESolver` follows `mesolve`, etc.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2531:69,intuit,intuitive,69,https://qutip.org,https://github.com/qutip/qutip/pull/2531,1,['intuit'],['intuitive']
Usability,"**Description**; The guide for time-dependent dynamic includes plots fro the guide before (stochastic dynamics) because it fails to reset its context and properly close figures. This PR fixes that. The same goes for many other uses of `.. plot::` in the guides and other documentation, but I will leave fix those for when someone has time to go through them more carefully. See https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html for the issue. **Related issues or PRs**; None. **Changelog**; Fix spurious plots that appear after many code blocks in the dynamics-time guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1931:21,guid,guide,21,https://qutip.org,https://github.com/qutip/qutip/pull/1931,5,['guid'],"['guide', 'guides']"
Usability,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1445:53,simpl,simplified,53,https://qutip.org,https://github.com/qutip/qutip/pull/1445,1,['simpl'],['simplified']
Usability,**Description**; The mcsolve guide incorrectly describes how random numbers are generated when determining jump locations and collapses. **Related issues or PRs**; * Fixes #1666. **Changelog**; Fix the description of random number usage in the Monte Carlo solver guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1677:29,guid,guide,29,https://qutip.org,https://github.com/qutip/qutip/pull/1677,2,['guid'],['guide']
Usability,**Description**; The sparse svd test is causing segfault in a setup that I can't reproduce.; The function `svd_csr` was never used as it could not work as a `svd_dense` replacement: `_data.svd(csr)` would use `svd_dense`. So I simply removed the function.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2361:227,simpl,simply,227,https://qutip.org,https://github.com/qutip/qutip/pull/2361,1,['simpl'],['simply']
Usability,**Description**; The website now direct to readthedocs for documentation.; I updated the `release_distribution` guide to not copy the docs file into qutip.github.io but update the readthedocs links.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2399:112,guid,guide,112,https://qutip.org,https://github.com/qutip/qutip/pull/2399,1,['guid'],['guide']
Usability,"**Description**; There are presently 8 variations of `CQobjEvo`. There are `Cte` and `Td` variants, Dense and csr sparse and serial vs openmp versions. Adding a feature, (ex. AHS support) result in the need to modify all of them and QobjEvoFunc and AHS PRs will add new one. So as a first step, I am merging them the ones presently available.; Cte (no coefficient) are now limit case of Td (time-dependant). omp ones have been removed in favor of a `spmvpy` variant that switch between the serial and omp version at compilation. . Also reworked the compilation of `QobjEvo`:; - Simpler with only 3 variants instead of 8.; - Compilation of the coefficient and object are separated. (`H *= -1j` does not force recompiling the coefficients.); - But have the side effect of making temp file cleanup harder. File are erased at python close instead of object deletion.; - Moved the location of temp file to ~/.qutip/temp for now, but does this work on windows?; - Auto-cleanup on importing qutip, for files older than 7 days for now. But should be set by user, the temp file location also. Other to-do:; Dense versions of CQobjEvo could be more optimized and is not parallel. One option would be to use blas and hope the user's blas is parallel. (probably other PR). ps. Running tests for now. Do not merge.; **Changelog**; Cleaned CObjEvo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1231:578,Simpl,Simpler,578,https://qutip.org,https://github.com/qutip/qutip/pull/1231,1,['Simpl'],['Simpler']
Usability,"**Description**; This PR attempts to solve the error in the `ffmpeg` command from the user guide. Specifically, the bitrate parameter (-b) is applied to the output file `bloch.mp4`. Additionally, a one line change to use `Bloch` from `qutip` has been made which otherwise returns an error. Thanks!. **Related issues or PRs**; Fix #799 . **Changelog**; Fixed error in the `ffmpeg` command from the user guide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1557:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/pull/1557,2,['guid'],['guide']
Usability,"**Description**; This change solver's options to be per solver. Thus mcsolve specific options are not included in options passed to sesolve etc.; It also simplify the options class which is now closer to a `dict` than to a `dataclass`. `SovlerOptions` take a new optional parameter `solver` to know which options to support. By passing it, it will fill the instance with the defaults and update the doc string. Passing an options not supported by the solver will raise an error. When not used, any options items will be accepted. ```; >>> SolverOptions(atol=1e-5, store_ados=True); SolverOptions(solver='', atol=1e-05, store_ados=True). >>> SolverOptions('sesolve', atol=1e-5, store_ados=True); KeyError: ""'store_ados' is not a supported options."". >>> SolverOptions('heomsolver', atol=1e-5, store_ados=True); SolverOptions(solver=heomsolver, atol=1e-05, store_ados=True); ```. `SolverOptions` can be used as `dict`, but most methods only use provided keys:; ```; >>> {**SolverOptions('sesolve', atol=1, rtol=2)}; {'atol': 1, 'rtol': 2}; ```; `store_states` etc. are not in `opt.keys()`.; The exceptions are `in` and `__getitem__` which knows of the default values:; ```; >>> opt = SolverOptions('sesolve', atol=1, rtol=2); >>> ""store_states"" in opt; True; >>> print(opt[""store_states""]); None; ```. `print` create a human readable list of options, including default:; ```; >>> print(SovlerOptions(""sesolve"", atol=1e-5, store_states=True)). Options for sesolve:; progress_bar : 'text' (default); progress_kwargs : {'chunk_size': 10} (default); store_final_state : False (default); store_states : True ; normalize_output : True (default); method : 'adams' (default); Options for adams integrator:; atol : 1e-05 ; rtol : 1e-06 (default); nsteps : 2500 (default); order : 12 (default); first_step : 0 (default); max_step : 0 (default); min_step : 0 (default); ```. Some integrators options will change depending on the method:; ```; >>> ""order"" in SovlerOptions(""sesolve"", method=""adams""); True; >>> ""ord",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947:154,simpl,simplify,154,https://qutip.org,https://github.com/qutip/qutip/pull/1947,1,['simpl'],['simplify']
Usability,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869:895,simpl,simplified,895,https://qutip.org,https://github.com/qutip/qutip/pull/1869,1,['simpl'],['simplified']
Usability,"**Description**; Update correlation functions to use v5 solvers.; The interface remain the mostly the same, I only made a few changes:; - Support for mcsolve as a back-end is removed. It was very slow, had a low precision and the saved memory is not as useful as it was 10 years ago. Removing it simplify the code a lot, but i can add it back if there is demand for it.; - Time-dependent Hamiltonian no longer support numpy array format: some correlation have 2 times list: `tlist` and `taulist`. It was not clear which one was to be used when using that format. `QobjEvo` input are supported, so building it before passing it to the correlation function is the way to go.; - `a_op`, `b_op`, `c_op` can be `QobjEvo`. Spectrum functions have been moved to their own file, but are mostly unchanged. I added `correlation_3op` which work as other correlation functions, but take a `Solver` instead of an Hamiltonian and `c_ops`. This allows any solver able to evolve density matrices to be used (`BRSolver`, `HEOMSolver`). It is only one function that support it directly: adding support of `Solver` to existing function would make the interface quite complicated, and changing it would break a lot of code and calling them using `H` is useful. . Fixed a small bugs in brmesolve and heom. I added data type option for the eigen solver of the diag integrator as it would otherwise sometime fail with cases in correlation (system and state not hermitian.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1997:296,simpl,simplify,296,https://qutip.org,https://github.com/qutip/qutip/pull/1997,2,"['clear', 'simpl']","['clear', 'simplify']"
Usability,**Description**; Update minimum version supported ; - python >= 3.10; - numpy >= 1.22; - scipy >= 1.8; - matplotlib >= 3.5. According to scientific python spec 0. Cython 3.0.3 does not support python under 3.9. The changelog does not seems to indicate if it is intentional or not.; It also simplify some parts where we branch over module versions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2241:290,simpl,simplify,290,https://qutip.org,https://github.com/qutip/qutip/pull/2241,1,['simpl'],['simplify']
Usability,**Description**; Update the guide for setting to list options still available in v5 and add an example with the using newly added context.; Removed the `auto_herm` options which was removed with `Qobj.isherm` being a property.; `auto_tidyup_dims` is not used anywhere but I left if since it could be useful with the dimensions class.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2025:28,guid,guide,28,https://qutip.org,https://github.com/qutip/qutip/pull/2025,1,['guid'],['guide']
Usability,"**Description**; Update the guides for solver options, results and time-dependent system.; In `dynamics-data`, I added example of the `e_data` property and explained the difference between results for one and multiple trajectories. `dynamics-time` as been mostly rewritten to explain how to use `QobjEvo`. It explain most features needed to use them in solvers, but it's quite dry.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2028:28,guid,guides,28,https://qutip.org,https://github.com/qutip/qutip/pull/2028,1,['guid'],['guides']
Usability,**Description**; While trying to reproduce #1229. I found that the progress bar would raise an error (`OverflowError: date value out of range`) if `update` was called too often.; Now when the bar goes over 100% it says 0 sec remaining.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2374:67,progress bar,progress bar,67,https://qutip.org,https://github.com/qutip/qutip/pull/2374,1,['progress bar'],['progress bar']
Usability,"**Description**; While working on the [heom-tls notebook] I discovered two wrong behaviors of the `HEOMSolver`. ; 1. Running `hsolver.run()` does not return the states if `e_ops=None`, but the documentation says that it should do so. I added the missing if condition to `HEOMSolver`. ; 2. If passing a progress bar like `qutip.ui.progressbar.TextProgressBar()` to `HEOMSolver` it results in an error, because internally it only checks for `None` or `True`. The documentation says it should also work if I pass an instance of `BaseProgressBar` (or a subclass). I added the checks and a test in the testfile for this. **Related issues or PRs**; None. **Changelog**; Fix HEOMSolver state return and progress bar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1908:302,progress bar,progress bar,302,https://qutip.org,https://github.com/qutip/qutip/pull/1908,2,['progress bar'],['progress bar']
Usability,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1880:523,simpl,simpler,523,https://qutip.org,https://github.com/qutip/qutip/pull/1880,1,['simpl'],['simpler']
Usability,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879:399,simpl,simpler,399,https://qutip.org,https://github.com/qutip/qutip/pull/1879,1,['simpl'],['simpler']
Usability,"**Description**; `mcsolve` runs with `improved_sampling` has a runs with no jump, therefore fully deterministic. This run is no longer counted in `ntraj`. ; This clear confusion when merging results with `improved_sampling`: ; ```; res1 = mcsolver.run(psi0, ..., ntraj=100); res2 = mcsolver.run(psi0, ..., ntraj=10); result = res1 + res2; ```; In this case, since the no jump trajectory is the same in both case, there is only 109 different trajectories. So if we merge keeping all random trajectories with the same weight, we get a `99:9` ratio instead of the `100:10` that we would naturally expect. To keep the intuitive ratio, we need to add relative weight between trajectories of each run. By not counting the no-jumb trajectory in the provided `ntraj`, then expected ratio comes naturally. It also help with reproducing result using seeds. To reproduce `result` from it's seeds, we would need to remove `seeds[100]` and run 109 trajectories. Keeping the no-jump appart, it does not use a seed and `result.seeds` can be used as is to reproduce the simulation. I created `MultitrajResult.add_deterministic` for no jump trajectories. It does not take the seed, but take the absolute weight. And added the weight to the `add` method. By having the weight be part of the multi trajectory object instead of each trajectories, merging `MultitrajResult` is simpler since they can reuse the same single trajectory result.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502:162,clear,clear,162,https://qutip.org,https://github.com/qutip/qutip/pull/2502,3,"['clear', 'intuit', 'simpl']","['clear', 'intuitive', 'simpler']"
Usability,**Description**; `mcsolve` taking Liouvillian input replace the photocurrent_mesolve function.; Add the equations for open mcsolve evolution to the mcsolve page in the guide. Help cases such as #2060,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2373:168,guid,guide,168,https://qutip.org,https://github.com/qutip/qutip/pull/2373,1,['guid'],['guide']
Usability,**Description**; `propagator` accept list format `H` but only pre-made `QobjEvo` for `c_ops`.; This make it also accept list `c_ops`. Also make clear in the documentation to pass `tlist` when using array format.; Propagator's `t` can be a scalar and the output time should not be forced to be the same as the sampling times. **Related issues or PRs**; fix #2532,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2540:144,clear,clear,144,https://qutip.org,https://github.com/qutip/qutip/pull/2540,1,['clear'],['clear']
Usability,"**Is your feature request related to a problem? Please describe.**. Sometimes qutip.mesolver generate `rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` files.; According to the docstring of `solver.Options` and `rhs_generate`, I guess rhs-things relate to string-format time-dependent Hamiltonian, but I couldn't find description about such files. I didn't know even a meaning of 'rhs' (abbreviation?).; So I suggest to add documents about them. Especially, I have the following question:; - Can I pickle the solver result with a single and portable format?. Saving solver result with pickle module, and loading it sometimes fail, for example:; (I'm so sorry I haven't reproduce this behavior with simplest code, so the following is a dummy-code); ```; out = mesolve(...); with open(filename, 'wb') as f:; pickle.dump(out, f); ```; ```; Exception ignored in: <function QobjEvo.__del__ at 0x7f9e406f4310>; Traceback (most recent call last):; File ""/home/mizuno.kosuke/venvs/default/lib/python3.8/site-packages/qutip/qobjevo.py"", line 624, in __del__; for file_ in self.coeff_files:; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; ---------------------------------------------------------------------------; ModuleNotFoundError Traceback (most recent call last); <ipython-input-22-e4ad332ebfe3> in <module>; 2 p_json = Path(filename); 3 with p_json.with_suffix('.result.pkl').open('rb') as f:; ----> 4 res = pickle.load(f). ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_877182617539010'; ```; Note: I used pickle module instead of `qsave/qload`. I guess it's no difference because `qsave` uses pickle module internally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1684:697,simpl,simplest,697,https://qutip.org,https://github.com/qutip/qutip/issues/1684,1,['simpl'],['simplest']
Usability,"**Is your feature request related to a problem? Please describe.**; A lot of issues in test fail seem to arise from random objects (as well as low-level math in MKL and/or cython issues). . **Describe the solution you'd like**; There are several options at hand. . ### stick to pytest and be creative; A possible fix in testing may be to add randomly generated data that then is pointed at or fix seeds.; **Pros**: fast (?); **Cons**: technical debt. ### pytest-randomly plugin; [pytest-randomly](https://github.com/pytest-dev/pytest-randomly) is a pytest plugin that addresses this kind of issues. It allows to control `random.seed`, rather than `numpy.random.seed`. ; **Pros**: pytest plugin, supports doctest. ; **Cons**: not super popular, not designed for numpy; ; ### property-based testing with Hypothesis; Hypothesis is a library that aims at changing the way tests are designed, allegedly: it should go from testing an instance to designing a test that applies to a domain of instances ([property-based testing](https://hypothesis.works/)). It is not super clear to me right now. ; It contains various randomness-related features, including a [seed function](https://hypothesis.readthedocs.io/en/latest/reproducing.html#hypothesis.seed). **Pros**: sounds powerful and clever, popular and growing, well documented, more robust even beyond this randomness problems.; **Cons**: radical change of testing framework (?), steep learning curve (?), overkill (?). I also admit I used nose until recently / used with pytest tests thought for nose, without taking advantage of pytest full power.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268:1066,clear,clear,1066,https://qutip.org,https://github.com/qutip/qutip/issues/1268,2,"['clear', 'learn']","['clear', 'learning']"
Usability,"**Is your feature request related to a problem? Please describe.**; I would like to use a [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) as a key for a [``functools.lru_cache``](https://docs.python.org/3/library/functools.html#functools.lru_cache), but since the [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) is not hashable, I can't do this. **Describe the solution you'd like**; A clear and concise description of what you want to happen. I can implement ``qutip.Qobj.__hash__``, which would hash the dims and the data of the ``qutip.Qobj``. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321:434,clear,clear,434,https://qutip.org,https://github.com/qutip/qutip/issues/1321,2,['clear'],['clear']
Usability,"**Issue**; Currently, to develop qutip from source (e.g., installing from)the installation guide says to do ; ```; python setup.py develop; ```; However, it is [suggested](https://stackoverflow.com/questions/30306099/pip-install-editable-vs-python-setup-py-develop) to use the command; ```; pip -e .[development]; ```; This currently is not supported as there is no `development_requirements.txt` file. Also, in dev mode, one needs to install pytest, otherwise the `qt.run()` fails. If pytest as well as cython numpy and scipy were specified in such file, this should be done automatically. . Additionally, it may be ideal to pin only minor versions with tilde, stuff like `numpy~=1.18.1`, which should update micro releases but not minor. . **Describe the solution you'd like**; Add a `development_requirements.txt` file and in setup add; ```; extras_require={; 'development': set(dev_requirements),; 'test': dev_requirements,; ```; the set option should be needed for how pypi wants it given. . Add tildes pinning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1263:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/issues/1263,1,['guid'],['guide']
Usability,"**Issue**; In the codebase, the weight for setting the unit trace condition in the steadystate function should be set according to the documentation to the average value of the (nonzero) elements in the Liouvillian L, if not specified explicitly. However in the code the weight is set as ; ```python; ss_args['weight'] = np.mean(np.abs(A.data.data.max())); ```; which is clearly different as it just set to the maximum value in the Liouvillian matrix A and hence the mean and abs are meaningless. I think this could be an overlooked mistake, or else just a mistake in the documentation of the parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1512:371,clear,clearly,371,https://qutip.org,https://github.com/qutip/qutip/issues/1512,1,['clear'],['clearly']
Usability,**Related issues or PRs**; 1759. **Changelog**; Removed a figure whose details were to small to see. Simplification of language (verbiage),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762:101,Simpl,Simplification,101,https://qutip.org,https://github.com/qutip/qutip/pull/1762,1,['Simpl'],['Simplification']
Usability,- Just a simple reorder of the e_ops to list and the safety checks.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/631:9,simpl,simple,9,https://qutip.org,https://github.com/qutip/qutip/pull/631,1,['simpl'],['simple']
Usability,- Propagator can now be run in parallel.; - Simplified dissipative calling by unifying 'sparse' and dense calls when dissipative.; - Added propagator unit tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/496:44,Simpl,Simplified,44,https://qutip.org,https://github.com/qutip/qutip/pull/496,1,['Simpl'],['Simplified']
Usability,". If it was only kwargs the implementation could be more terse. I assumed that the `copy` argument gets passed as part of `__qutip_qobj_interface__`, as in the conversion it might be necessary to copy anyway so the downstream implementor is responsible for taking care of the copy if requested. ```python; class QobjMetaclass(type):; def __call__(cls, inpt=None, dims=None, shape=None,; type=None, isherm=None, copy=True,; fast=False, superrep=None, isunitary=None):. if isinstance(inpt, Qobj):; pass; elif hasattr(inpt, ""__qutip_qobj_interface__""):; inpt_data = inpt.__qutip_qobj_interface__(copy=copy). inpt = inpt_data['matrix']; dims = inpt_data['dims']; copy = False. obj = cls.__new__(cls, inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); obj.__init__(inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); return obj. class Qobj(object, metaclass=QobjMetaclass):; ...; ```; I'm quite sure this implementation can be improved, however. On the NetKet side, the implementation is very simple. At the moment we only support operators from H->H.; ```python; class AbstractOperator:; ... ; def __qutip_qobj_interface__(self, dims, copy=True):; return {'matrix': stacked_rows_to_stacked_cols(self.hilbert, self.to_sparse()),; 'dims': [list(self.hilbert.shape), list(self.hilbert.shape)]}; ```. This already is quite nice and allows for quick and simple interoperability. Some comments/questions:; - Qutip uses stacked columns (column major) ordering for the tensor products, as opposed to NumPy `kron` ordering that is stacked rows, right? ; - To signal that an object is a super-operator (Liouvillian) is it sufficient to pass a correctly constructed `dims` or I should also provide `superrep`?; - Is there a reason you don't accept tuples as inputs to `basis(dims, x)` and other similar functions, but only lists? ; - I played around with auto-converting input hamiltonians and jump operators in `qutip.sesolve` and `mesolve` to `Qobj` if they are not Qobj but suppor",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601:1304,simpl,simple,1304,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601,1,['simpl'],['simple']
Usability,.**Description**; Some changes to the Bloch-Redfield Solver documentation. ; It was not clear from the documentation that `bloch_redfield_tensor` returns the eigenstates of the Hamiltonian ( and not the eigenstates of the tensor itself). And some minor equation mistake was fixed.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1950:88,clear,clear,88,https://qutip.org,https://github.com/qutip/qutip/pull/1950,1,['clear'],['clear']
Usability,".36s; Total run time: 5.51s; Total run time: 6.58s; Total run time: 9.64s; Total run time: 10.74s; Total run time: 12.29s; {'solver': 'pc-euler-2'}; Total run time: 1.54s; Total run time: 1.86s; Total run time: 2.50s; Total run time: 2.79s; Total run time: 3.36s; Total run time: 4.03s; Total run time: 4.98s; Total run time: 6.56s; {'solver': 'explicit1.5'}; Total run time: 5.28s; Total run time: 6.35s; Total run time: 7.74s; Total run time: 8.99s; Total run time: 10.34s; Total run time: 12.41s; Total run time: 15.40s; Total run time: 21.40s; {'solver': 'taylor1.5'}; Total run time: 3.30s; Total run time: 3.85s; Total run time: 4.52s; Total run time: 5.63s; Total run time: 7.22s; Total run time: 8.72s; Total run time: 9.51s; Total run time: 11.84s; {'solver': 'taylor1.5-imp'}; Total run time: 5.43s; Total run time: 6.81s; Total run time: 7.60s; Total run time: 10.05s; Total run time: 11.88s; Total run time: 12.88s; Total run time: 15.63s; Total run time: 22.31s. ```; ; **Minor issue: plots breaking notebook rendering**; Jupyter Notebooks have a broken rendering when cells with plots are run; refreshing the notebook sometimes works fine. This is sometimes fixed in the first place by adding; ```; plt.show(); plt.close(); ```; but not always. Maybe we can have a look at this minor issue in the development notebooks. . **Documentation**; It would really increase the adoption rate if the API doc and User Guide could be updated to highlight the stochastic solvers and new methods. The development notebooks are so well written that drawing from their examples should be simple. . Congratulations @Ericgig for this refurbishment, improvement, optimization and thorough benchmarking investigations of the stochastic solvers, which I hope will be widely tested by @nwlambert @ajgpitch @quantshah (and @fminga) for robustness once merged in the development master branch. I am merging this and the montecarlo split PR, hoping there are no incompatibility issues (#990 --> #991 --> #969).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:6004,Guid,Guide,6004,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,".7/site-packages/matplotlib/figure.py"", line 1834, in savefig; self.canvas.print_figure(fname, **kwargs); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backend_bases.py"", line 2188, in print_figure; self.figure.dpi = dpi; File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 436, in _set_dpi; self.set_size_inches(w, h, forward=forward); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 745, in set_size_inches; manager.resize(int(canvasw), int(canvash)); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backends/backend_tkagg.py"", line 540, in resize; self.canvas._tkcanvas.master.geometry(""%dx%d"" % (width, height)); File ""/Users/tilek/miniconda2/lib/python2.7/lib-tk/Tkinter.py"", line 1668, in wm_geometry; return self.tk.call('wm', 'geometry', self._w, newGeometry); _tkinter.TclError: can't invoke ""wm"" command: application has been destroyed; ```. When I try to execute the code from the User Guide as a complete .py Python file (see below) ; it produces first bloch_0.png file where it is supposed to, but then shows the same error.; ```; import numpy as np; from qutip import *; from scipy import *. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = sigmax(); sy = sigmay(); sz = sigmaz(); sm = sigmam(); H = w * (cos(theta) * sz + sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(sqrt(rate) * sz). # evolve and calculate expectation values; output = mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * pi # qubit angular frequency; theta = 0.2 * pi # qubit angle from sigma_z axis (toward sigm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796:1702,Guid,Guide,1702,https://qutip.org,https://github.com/qutip/qutip/issues/796,1,['Guid'],['Guide']
Usability,".set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = qutip.sigmay(); sz = qutip.sigmaz(); psi0 = qutip.fock(2,0); psi1 = qutip.fock(2,1). def Hrot(coef,tlist): ; return qutip.QobjEvo([[sx,coef.real/2],[sy,coef.imag/2]],tlist=tlist). Omega0 = 10e6 * 2 * np.pi; for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); H = Hrot(coef=coef*Omega0,tlist=tlist); result = qutip.mesolve(H,psi0,tlist=tlist); print(f""{wavedata_name}"",np.abs(psi0.dag()@result.final_state)**2); ```. ```; index92 1.9513183436107076e-10; index93 0.49999366030208936; index94 1.0264492246902099e-13; ```. I would appreciate any insights into the potential causes of these errors and guidance on how to prevent such issues in future simulations. Additional Information:; scipy version: 1.13.0; python version: 3.12.2; qutip version: 5.0.1; numpy version: 1.26.4; Operating system: macOS 15.1. The files with the preselected coefficients and tlist are provided for reproducibility.; [index92_coef.txt](https://github.com/user-attachments/files/17613505/index92_coef.txt); [index92_tlist.txt](https://github.com/user-attachments/files/17613506/index92_tlist.txt); [index93_coef.txt](https://github.com/user-attachments/files/17613507/index93_coef.txt); [index93_tlist.txt](https://github.com/user-attachments/files/17613509/index93_tlist.txt); [index94_coef.txt](https://github.com/user-attachments/files/17613510/index94_coef.txt); [index94_tlist.txt](https://github.com/user-attachments/files/17613511/index94_tlist.txt)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:2736,guid,guidance,2736,https://qutip.org,https://github.com/qutip/qutip/issues/2552,1,['guid'],['guidance']
Usability,"/IPython/core/pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs); 126 ; 127 bytes_io = BytesIO(); --> 128 fig.canvas.print_figure(bytes_io, **kw); 129 data = bytes_io.getvalue(); 130 if fmt == 'svg':. /miniconda3/lib/python3.7/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs); 2054 orientation=orientation,; 2055 dryrun=True,; -> 2056 **kwargs); 2057 renderer = self.figure._cachedRenderer; 2058 bbox_artists = kwargs.pop(""bbox_extra_artists"", None). /miniconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py in print_png(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs); 525 ; 526 else:; --> 527 FigureCanvasAgg.draw(self); 528 renderer = self.get_renderer(); 529 with cbook._setattr_cm(renderer, dpi=self.figure.dpi), \. /miniconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py in draw(self); 386 self.renderer = self.get_renderer(cleared=True); 387 with RendererAgg.lock:; --> 388 self.figure.draw(self.renderer); 389 # A GUI class may be need to update a window using this draw, so; 390 # don't forget to call the superclass. /miniconda3/lib/python3.7/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 36 renderer.start_filter(); 37 ; ---> 38 return draw(artist, renderer, *args, **kwargs); 39 finally:; 40 if artist.get_agg_filter() is not None:. /miniconda3/lib/python3.7/site-packages/matplotlib/figure.py in draw(self, renderer); 1707 self.patch.draw(renderer); 1708 mimage._draw_list_compositing_images(; -> 1709 renderer, self, artists, self.suppressComposite); 1710 ; 1711 renderer.close_group('figure'). /miniconda3/lib/python3.7/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 133 if not_composite or not has_images:; 134 for a in artists:; --> 135 a.draw(renderer); 136 else:; 137 # Composite any adjacent images together. /min",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1027:2010,clear,cleared,2010,https://qutip.org,https://github.com/qutip/qutip/issues/1027,1,['clear'],['cleared']
Usability,"/github.com/jakelishman/qutip-doc/blob/design-data-layer/design/02-data-structures.md); - [original GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data.Data`; - `bra * ket` now returns a scalar, not a `Qobj` (no need to do `(bra * ket).data[0, 0]` or `(bra * ket).tr()`) any more; - 1D subspaces in `Qobj.dims` are now never contracted silently (they were, but inconsistently before), but the new function `Qobj.contract()` can be called to do this explicitly; - `Qobj` no longer defines `__array__`, and so cannot be treated as if it is a numpy array. Having this led to inconsistent behaviour when `Qobj` was used in arithmetic with numpy arrays from the left and right, and allowed simple code to become `Qobj.dims`-unsafe _implicitly_. To get the full array view now, you must be explicit and call `Qobj.full()` - it is not enough to do `np.array(qobj)`, and this behaviour is consistent with `scipy.sparse` matrices.; - `eseries` and `essolve` are removed; - OpenMP is temporarily removed (but should be added back in before the release); - most functions marked deprecated as of version 4.5.2 are removed (e.g. in `qutip.correlation`); - `vec2mat` and `mat2vec` are renamed away from the terse MATLAB-compatible syntax to the more QuTiP-consistent `vector_to_operator` and `operator_to_vector`. Non-breaking changes:; - the internal file layout of the code is more organised, with physical ""packages"" `qutip.core` and `qutip.solve` containing the core code and the solvers respectively, but these packages export all their names to the full `qutip` namespace, so there are no user-facing changes; - `Qobj` is a bit more strict ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:2535,simpl,simple,2535,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['simpl'],['simple']
Usability,"1. Adding a new data type is a large undertaking which will likely be very infrequent, so it's perhaps not so sensible to optimise in favour of making this especially simple. More likely is that new operations will be added to the data layer more frequently (e.g. you found that you wanted specific things for `CQobjEvo`), and this format makes _those_ PRs much easier to review. But mostly, because organising by file type is ok when all operations are like `matmul(CSR, CSR) -> CSR`, but which file should the operation `matmul(CSR, Dense) -> COO` go into? Much easier to find what you're looking for if all `matmul` functions are together, and then setting up the dispatcher will be the last item in the `matmul` file. It also means the files stay a bit smaller and easier to manage within themselves - you're less likely to ""lose"" code when each module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:167,simpl,simple,167,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['simpl'],['simple']
Usability,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1414:53,simpl,simple,53,https://qutip.org,https://github.com/qutip/qutip/pull/1414,1,['simpl'],['simple']
Usability,"5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:12051,simpl,simply,12051,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['simpl'],['simply']
Usability,"5262849, 0)]. ##### SECOND TRAJECTORY. 0.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; 1.0547264671307385e-12 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ...; 10.0 , [(0.6086836025648399, 0), (1.6024822039345563, 0), (5.151302705262849, 0)]; ```. ### Expected Behaviour. On the second trajectory, the list of collapses should have been reset to `[]` and then updated during the run of that trajectory. ### Your Environment. ```shell; QuTiP Version: 5.1.0.dev0+d8c6584; Numpy Version: 1.26.3; Scipy Version: 1.12.0; Cython Version: 3.0.8; Matplotlib Version: 3.8.2; Python Version: 3.12.1; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. I have tracked the source of the problem as follows:; * The `MCIntegrator` [correctly calls](https://github.com/qutip/qutip/blob/d8c6584ffa74ee40bda88bb44e04ba5d9026bced/qutip/solver/mcsolve.py#L240); ```python; self.collapses = []; self.system._register_feedback(""CollapseFeedback"", self.collapses); ```; at the beginning of every trajectory.; * `_register_feedback` of `QobjEvo` is [defined](https://github.com/qutip/qutip/blob/d8c6584ffa74ee40bda88bb44e04ba5d9026bced/qutip/core/cy/qobjevo.pyx#L465) as follows:; ```python; new_args = {}; for key, feed in self._solver_only_feedback.items():; # [...]; new_args[key] = solvers_feeds[feed]; self.arguments(**new_args); ```; This works for the first trajectory, but after that, the dict `self._solver_only_feedback` is empty, and `_register_feedback` does nothing.; * That dict is empty because of the call to `self.arguments` at the end, where we have the following code:; ```python; for key, val in args.items():; if isinstance(val, _Feedback):; # [...]; else:; new_args[key] = val; # [...]; if key in self._solver_only_feedback:; del self._solver_only_feedback[key]; ```. My understanding of the feedback stuff is not deep enough to know what the correct fix would be.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2422:3014,feedback,feedback,3014,https://qutip.org,https://github.com/qutip/qutip/issues/2422,1,['feedback'],['feedback']
Usability,"://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most comprehensive toolbox to characterize noise and dissipation affecting quantum systems as well as quantum information processing features. QuTiP has been developed and maintained by a group of open-source contributors for several years and has been used for research, teaching and in the emerging quantum technology industry. The QuTiP community has grown immensely with several projects that build on top of it. In this document we refer to the “QuTiP project” or “ the project” with reference to all software developed under the QuTiP Github organization, hosted at “[www.github.com/qutip](www.github.com/qutip)” and all related activities involving its community happening through its official channels. **<span style=""text-decoration:underline;"">The Community</span>**. QuTiP is at the center of a lively ecosystem and creative community. As of October 2020, QuTiP’",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3861,simpl,simple,3861,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['simpl'],['simple']
Usability,; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:2197,learn,learn,2197,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['learn'],['learn']
Usability,"======================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; nose.plugins.cover: ERROR: Coverage not available: unable to import coverage module; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip-4.5.0.dev0+d377c997-py3.7-macos; x-10.9-x86_64.egg/qutip/__init__.py:161: UserWarning: matplotlib not found: Graphics will not work.; warnings.warn(""matplotlib not found: Graphics will not work.""); Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fau",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093:2913,simpl,simple,2913,https://qutip.org,https://github.com/qutip/qutip/issues/1093,1,['simpl'],['simple']
Usability,"> * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:26,Guid,Guide,26,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,2,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"> * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?. The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I will look into it this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851:510,simpl,simplify,510,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851,1,['simpl'],['simplify']
Usability,"> + if (N < 1):; > + raise ValueError(""Number of TLS should be non-negative""); > +; > + nds = (N / 2 + 1)**2 - (N % 2) / 4; > + return int(nds); > +; > +; >; > pep8: single line space between funcs; > Lots of other examples in this file; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168809572>:; >; > > + g8 = self.gamma8(jmm1_8); > + c8 = jmm1_inv[jmm1_8]; > +; > + lindblad_row.append(int(r)); > + lindblad_col.append(int(c8)); > + lindblad_data.append(g8); > +; > + if jmm1_9 in jmm1_inv:; > + g9 = self.gamma9(jmm1_9); > + c9 = jmm1_inv[jmm1_9]; > +; > + lindblad_row.append(int(r)); > + lindblad_col.append(int(c9)); > + lindblad_data.append(g9); > +; > + cdef lindblad_matrix = csr_matrix((lindblad_data, (lindblad_row, lindblad_col)),; >; > pep8: line character overrun here (max 79 chars per line); > A few other examples in this file too; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168811435>:; >; > > + """"""; > + cdef float j, m, m1; > + j, m, m1 = jmm1; > +; > + cdef float yP; > + cdef float N; > + N = float(self.N); > +; > + cdef complex g7; > +; > + yP = self.pumping; > +; > + if (yP == 0) or (j <= 0):; > + g7 = 0.0; > + else:; > + g7 = yP / 2 * np.sqrt((j - m - 1) * (j - m) * (j - m1 - 1) * (j - m1)) * (N / 2 + j + 1) / (j * (2 * j + 1)); >; > You could probably shorten this line by removing what I would consider; > some unnecessary spaces, e.g.; >; > (N/2 + j + 1) / (j*(2*j + 1)); >; > Not everyone agrees on this kind of thing though. I suggest whatever you; > think looks most clear in terms of precedence; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#pullrequestreview-97200601>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AN5ffBfQ4ecfHwcSs6wWmQ4ZphhDhNUqks5tVbPRgaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:12643,clear,clear,12643,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['clear'],['clear']
Usability,"> > I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?; > ; > Maybe, but I find teleportation already a very short circuit, isn't it?; > ; > > Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?; > ; > Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics. I have changed the run_statistics function to now do this method in place of running it a number of times. This solves the problem of slow testing of the function as well !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645:63,simpl,simple,63,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645,2,['simpl'],"['simple', 'simpler']"
Usability,"> > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5566,simpl,simple,5566,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"> > Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed.; > ; > Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. Yes, I think raising an exception is a good idea. > ; > > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again?; > ; > I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine. Thanks again for your advice. :); I will probably create a new PR in a day or two by making respective changes to `add_arc`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899:397,simpl,simply,397,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899,1,['simpl'],['simply']
Usability,"> @Ericgig Tests added for the type changes.; > ; > Note that `QobjEvo.__rmatmul__` is not currently callable. Calling `qobj @ qevo` will call `QobjEvo.__matmul__(qobj, qevo)` first, which will return the result. If I am not missing a case where `__rmatmul__` is called, I vote that we simply delete the implementation of `__rmatmul__` (in a separate PR). @Ericgig Explained that in Cython 3 `__rmatmul__` will be called, so we can keep it for now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1152371837:286,simpl,simply,286,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1152371837,1,['simpl'],['simply']
Usability,"> @cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. Thank you for the kind words!. > I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:; > ; > * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; > * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is id",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:294,feedback,feedback,294,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['feedback'],['feedback']
Usability,"> @cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?. At the moment, no. Following our discussion, it sounded like separating the two features may make the most sense such that I wanted to focus first on representing instruments. > > I've played around with using if_ to compute the noisy channel one gets for state teleportation when operations are perfect but classical outcomes get scrambled; would that be useful, perhaps?; > ; > That sounds like a great example!. Awesome, I'll go add that as a draft PR to the notebooks repo, then, so as to develop both in parallel. > > Fair enough, easy to drop that as well. Would you want everything dropped, or would some things like the core type QInstrument itself be reasonable to keep in qutip.**all**; > ; > Let's keep QInstrument in since that feels at the same level as Qobj and QobjEvo and we can think about other things on a case by case basis (and see what v5 is doing). Sounds good, will do!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876:131,clear,clear,131,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876,1,['clear'],['clear']
Usability,"> A possible addition could be to check the trace condition of the steady-state solution and throw a warning if it is violated more than some epsilon. But for now, everything looks good. @davidschlegel That's a good idea, so I added some assertions to all the tests where it was simple to do so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689:279,simpl,simple,279,https://qutip.org,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689,1,['simpl'],['simple']
Usability,> Any new progress on this? The API doc is generated successfully. Although it would be nice to have more detailed description to each functions.; > ; > The rendered user guide now reads like ![image](https://private-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVk,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:171,guid,guide,171,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,1,['guid'],['guide']
Usability,"> Consider what you're doing from a statistical sense here. If everything works correctly, then you're effectively trying a two-tail hypothesis test that your test binomial distribution has a probability of 0.25, given you made `n` observations of it. The analytic success rate of your test is then; > ; > ```python; > import scipy.stats; > def success(n, p, tol):; > dist = scipy.stats.binom(n, p); > return dist.cdf(n * (p+tol)) - dist.cdf(n * (p-tol)); > ```; > ; > where `success(4096, 0.25, 0.02)` is 99.67%. Since there are 5 independent runs on Travis, that's equivalent to a failure rate of 1.6% on every single CI run, which is several orders of magnitude too high. It's probably just luck that it was Python 3.8 on both occasions - it's a one-in-five chance that in two failing CI runs, it was the same setup both times.; > ; > You have to consider what is most appropriate to fix the test, and what you can reasonably test in ~1 second of runtime. You don't want to increase the tolerance too much, because then you can get a lot of false positives even if something is broken.; > ; > If you can bump the number of runs up to 100,000 and set the tolerance at 0.01, you'll have a per-test failure rate of ~3e-13, which is more like what we'd want. If you keep it at 4096, the tolerance should be more like 0.05 (which is pretty big tbh). Thanks for the excellent analysis. I don't think it's feasible to do 100,000 given the current. efficiency. It did give me incentive to make it somewhat faster. What is a good guideline for the maximum time a test can take. It seems like I can maybe do 150 runs in ~ 1s. In any case, it doesnt seem feasible to do even 4096 claims without taking quite a bit of time. Any ideas on how to structure the test differently ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689:1524,guid,guideline,1524,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689,1,['guid'],['guideline']
Usability,"> Does this entail any extra steps not encompassed in the contributing guidelines, or is it just a matter of branching from and PRing to `dev.major` instead of `master`?. Just branching from and PRing to `dev.major` -- the contribution guidelines are the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1893#issuecomment-1147245506:71,guid,guidelines,71,https://qutip.org,https://github.com/qutip/qutip/issues/1893#issuecomment-1147245506,2,['guid'],['guidelines']
Usability,"> General comment about plotting on the Bloch sphere:; > ; > QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are _not_ required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix.; > ; > There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested.; > ; > I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now.; > ; > I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling.; > ; > My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though. Thanks a lot, Simon (@hodgestar). My modification to the bloch.py follows what you have suggested. ; Also, the code can plot arcs inside and outside the bloch sphere too, and the line segment can be drawn between any two points. And the inputs have to be in cartesian coordinates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018:885,intuit,intuitive,885,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018,1,['intuit'],['intuitive']
Usability,"> Here are some tests of the proposed modifications. Thank you! I actually meant ""unit tests"" -- as in, adding the tests to `qutip/tests/test_steadystate.py`. It's also not clear to me from your examples how we should see the difference. > This may change the final steady state in some circumstances, but I could not rapidly find a situation where this is actually important. In this example, the two steady states are the same even though the weights are very different. I agree it would be good for the sparse and dense algorithms to align where its sensible to, but it's a bit tricky to evaluate the code if we don't have a concrete idea of the kind of situation in which the new code should be better (and in which situations it might be worse). > The current version gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] = np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([0.+0.j, 0.-0.j, 0.-0.j, 1.+0.j]); > ```; > ; > The proposed modification gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] += np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([1.e-16+0.j, 0.e+00-0.j, 0.e+00-0.j, 1.e+00+0.j]); > ```; >; > This is a better result than the one obtained with the current version. I can't see any difference between the old and new results other than that the floating point numbers are formatted a bit differently? Perhaps I am missing something.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511:173,clear,clear,173,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511,1,['clear'],['clear']
Usability,"> Hmmm... 4000/150~25 second. That's not very short actually. The total time for a whole round of qutip CI test costs 15min~20min on Travis.; > ; > Just ideas. Tests here seem to be two-folded:; > ; > * Test classical controlled gates in a circuit; > * Test the measurement functions; > ; > So maybe we can split it. The teleportation circuit test can be done without measurement. Just check the final state tracing out the ancillary qubits. The test for measurement can probably be done for single or two `Qobj` along without circuit. But `run_circuit_statistics`... Probably we then only need to check if the number of elements in the result is correct after some 50 runs?; > ; > On a different matter, I'm wondering if running the statistics takes so long, for such a small teleportation circuit, is it still advantageous in any case? Since we are doing simulation and have the full quantum state, one can actually calculate all 4 possible final states, classically mix them into a density matrix with the corresponding measurement probability and calculate the exact statistics distribution. I doubt that will be slower than 25s, although coding will be harder I suppose. I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ? . Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ? Seems like a decent idea !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253:1235,simpl,simple,1235,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253,2,['simpl'],"['simple', 'simpler']"
Usability,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:113,clear,clear,113,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['clear'],['clear']
Usability,"> I also made a [`einsum` dispatched function](https://github.com/Ericgig/qutip/tree/einsum) as an alternative to this, (with a working `einsum_csr` for a pair of csr matrices). Cool! I agree that element-wise multiply is a pretty common and simple operation though, so it's probably worthwhile having regardless of whether we have einsum or not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1670#issuecomment-926922437:242,simpl,simple,242,https://qutip.org,https://github.com/qutip/qutip/pull/1670#issuecomment-926922437,1,['simpl'],['simple']
Usability,"> I am using Anaconda on windows 10 and installed qutip from conda-forge package, I don't have VS-15 on my system, Is it possible that that I could run qutip with VS-15 runtime liberaries instead of complete installation of visual studio. If it is possible please guide me. Dear Bilal I am quite new to use python and qutip.... some how i am not able installed qutip from conda-forge package on window 10..... can you please let us know the step wise installation. (waseem)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-480478000:264,guid,guide,264,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-480478000,1,['guid'],['guide']
Usability,"> I ran some comparisons to the old version, and everything looks good. There seems to be some speedup both to the RHS construction and the ODE solver for most cases. Thanks! I've now streamlined things a little more, so they might be slightly faster still. > Since each individual ADO is naturally a Qobj, having HierarchyADOsState store them an array or list of Qobjs makes sense I guess. I've put this down in the v5 TODO list (just to draw a line under this PR). > 2. How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). I ended up always calling `e_ops` functions with `f(t, ado_state)`. This is a bit different to other solvers, but makes what the HEOMSolver considers the evolution state consistent. The density matrix part of the state is available as `ado_state.rho` so it's not a big hardship to retrieve just the system state. >> 3. Recheck the time dependent case.; > ; > From what I can see it looks good! Seems like basically you treat the entire RHS as an effective qobjevo? I ran through various > examples, and couldn't find any issues!. I simplified things a bit further. In the time-dependent case the RHS matrix is calculated without adding the Liouvillian to the diagonal and then the kron of the Liouvillian is added to the RHS at the end, resulting in a simpler QobjEvo. >> 4. The HEOM can't really take new QObjEvo arguments each time run is called because calculating the RHS again is quite expensive. Maybe something can be done?. Arguments are supported now because the full RHS is a QobjEvo!. >> 5. Compare performance to the HEOM in 4.7.; > ; > On the fermionic examples, with very-large system Hilbert space, there was a little slowdown in the RHS construction. Maybe the slowdown has gone away now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739:1199,simpl,simplified,1199,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739,2,['simpl'],"['simpler', 'simplified']"
Usability,"> I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This is not the case. The answer to your question is to use `QobjEvo` as suggested. For example, here is a simple example using a fast-oscillating array function in a `QobjEvo` and a much shorter `tlist` in `mesolve`. You may need to set the solver options `nsteps`, `atol` and `rtol` to suitable values, as I have done here. ```python; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * 2.91e2 * fast_ts); # This is the behaviour you were suggesting is happening.; bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options). assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; ```. You can see that I was able to do a successful integration with only 2 times in `mesolve`, but many in a fast-oscillating Hamiltonian. Clearly the `bad_times` version (which only has the start and end points so misses all the fast oscillation behaviour) is completely different to the other two versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525:375,simpl,simple,375,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525,2,"['Clear', 'simpl']","['Clearly', 'simple']"
Usability,"> I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"".; > ; > I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension.; > ; > Thank you. Thank you so much for sharing this!. The cell outputs that included Qobj with Latex code wasn't rendering properly for me just like your issue (although Latex code in the Markdown cells was rendering correctly). I spent hours and tried countless online suggestions to fix the issue with no success, until I re-installed the the 'Jupyter Notebook 'Renderers' extension to the old version (v1.0.4) before it removed the latex support. Now I have the option to 'change presentation' of the output cells so it uses the old version of the extension, and now it finally displays the output with the Latex rendered correctly!. Thank you again for suggesting the only solution that worked for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302:239,simpl,simply,239,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302,1,['simpl'],['simply']
Usability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:187,simpl,simpler,187,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,1,['simpl'],['simpler']
Usability,"> I think you don't need to generate the apidoc manually. To add the API docs, all you need is to add the path `qutip.core.gates` to https://github.com/qutip/qutip/blob/master/doc/apidoc/functions.rst#quantum-objects. `make html` should then automatically read all the functions in the file and generate the API doc. To modify the API doc, e.g. adding new things, one simply edits the docstrings in each of the Python function. Yes, that was the first thing that I have tried but I think there is a problem with the env and the python version. I did the same with qutip-qip docs with no problems.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2148198178:368,simpl,simply,368,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2148198178,1,['simpl'],['simply']
Usability,"> If this is supposed to be displayed in the Sphinx-rendered HTML instead of markdown. I think you need double backticks for the monospace font? E.g. `` ``Qobj`` ``. Yes, I do. Fixed.; ; > Does this also serve as a `guide on migrating from v4 to v5` or do we plan to have it separately somewhere else? It would be nice if we could summarize some common Error messages that one may see along with the solution/possible reasons. The error messages are what people usually type into Google search. This does serve as an initial guideline of what to expect, but I think we do also need a proper porting document like the one you mention.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633:216,guid,guide,216,https://qutip.org,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633,2,['guid'],"['guide', 'guideline']"
Usability,"> It would be good if our naming can help avoid confusion between the concept of a `dtype` (which is the type of elements within an array) and our `data backend type` (which is how the array itself is represented). I'm not sure what a good convention is, but ensuring the docstrings for the backend type have specific examples of valid inputs would definitely help (e.g. `dense` or `csr`). We actually deliberately called this `dtype` to make it familiar to Numpy syntax. The concept of the Numpy `dtype` is mostly irrelevant when using QuTiP, because all data is invariably `double complex`, and this `dtype` is the larger data type of `Qobj`. I suppose it could be `fmt` instead (as a common abbreviation of `format`)? Or even the full word `format` I suppose. Agree on the docstrings - we should have an alias like Numpy's `array_like` that we define clearly in documentation in one place.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420#issuecomment-809213365:854,clear,clearly,854,https://qutip.org,https://github.com/qutip/qutip/pull/1420#issuecomment-809213365,1,['clear'],['clearly']
Usability,"> It's nice to merge `McResultImprovedSampling` into `McResult`, but the overall complexity has increased... I believe it would be better to move `MultiTrajResult` to it's own file.; > ; > Did you review the `dynamics-nmmonte,rst`? Adding a note/example of using the improved sampling option there would be good. Thank you for the review. The complexity has increased, more than I expected when I started writing. I hope it is worth it?; I have extracted the `MultiTrajResult` and its subclasses to a new module, `qutip.solver.multitrajresult`. I have added a mention about the improved sampling option in the guide, and I will have a look at the tutorial notebook whether it makes sense to include somewhere there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369#issuecomment-2095318521:610,guid,guide,610,https://qutip.org,https://github.com/qutip/qutip/pull/2369#issuecomment-2095318521,1,['guid'],['guide']
Usability,"> It's very clean, I really like the `set & set` and reusing the classes. Thanks!. > But in v4, while we used `f(t, args)` in most examples, we never said that it should be the exact signature up to variable name, so I don't think it an appropriate check for which version to use. Ideally, the check should be good enough we don't need to change any tests not directly related to the addition of this feature. I'm open to modifying the check for QuTiP v4 functions, but I would like to keep the check simple. To quote the Zen of Python, ""If the implementation is hard to explain, it's a bad idea."". :). > Also what should; > ; > ```; > def f(t, w, a=1):; > return a; > ; > coeff = coefficient(f, args={'w':1}); > coeff.replace_arguments(a=2)(0); > ```; > ; > give? Since `a` is not given, it's not our job to update it, or should we add it to `_f_arg_names`?. I think this works fine already in this branch. `a` is included in `_f_arg_names`, so it can be specified via `.replace_arguments(...)` but since it has a default it can also be left out.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390:501,simpl,simple,501,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390,1,['simpl'],['simple']
Usability,"> Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple. For those you worked on, do they include QOC via RL ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276:79,learn,learning,79,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276,1,['learn'],['learning']
Usability,"> My biggest concern is with the addition of `**_` to some of the functions, I would argue that it is best to raise an error if the function does not have arguments. this may lead to code that works on jax being incompatible with code that works on just qutip though, so it is something to think about. We pass unused arguments when we mix different types of coefficients in solver and `QobjEvo`. So we cannot raise an error. > I could be an interesting idea for the future to consider adding a similar context manager that removes other dtypes (`CSR` and `Dense`) so that it is clear what the code is doing?. I don't understand what you mean by this... A context manager that remove dtype from those known to the dispatcher?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015#issuecomment-1438679479:579,clear,clear,579,https://qutip.org,https://github.com/qutip/qutip/pull/2015#issuecomment-1438679479,1,['clear'],['clear']
Usability,"> Nice work!; > ; > > I have removed self.gates as well as self.gates_and_measurements. The replacement is the more ""general"" (and less of a mouthful) self.circuit_ops which contains both.; > ; > I like this merge of to attributes. However, we shouldn't change the attribute name `gates`, at least not in this PR here. It's an open attribute API and as you see we used it a lot in tests. It's very likely that others are using it too.; > ; > Personally, I would keep the attribute `gates` since even for measurement operations, people still usually say ""measurement gates"". `circuit_ops` is certainly more accurate, but might be hard to remember and thus makes the learning curve steeper. Rolled back to self.gates",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648:665,learn,learning,665,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648,1,['learn'],['learning']
Usability,"> One thing to consider when you're adding syntactic sugar is making sure that you don't accidentally reuse the same syntax to mean two completely different things. Thanks @jakelishman A more elegant way is to define a meta gate like `All(X)` in ProjectQ, which acts like `Tensor`. But it is true that this syntax sugar is not as simple as it looks like.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1489#issuecomment-817773509:330,simpl,simple,330,https://qutip.org,https://github.com/qutip/qutip/pull/1489#issuecomment-817773509,1,['simpl'],['simple']
Usability,"> Since now there's no need of anything because the output is a copy paste of mine, how about a simple `..plot::` into `..code-block:: python`?. I'm worried that code blocks are never run so the code in them is by definition broken.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1125773090:96,simpl,simple,96,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1125773090,1,['simpl'],['simple']
Usability,"> So as a user on Windows, having installed QuTiP through Anaconda, I can't do any time propagation? . So what is certain is that if you use string type time-dependence then this needs a compiler, this is implied by the string type. Also, at present, giving an ndarray (and I think qutip CubicSpline) also means the RHS will be compiled, because it is much faster. Clearly we could make this optional, but it is not at present. @Ericgig is working on new versions of the solvers at the moment, I think he could easily include this in the design.; You should not need a compiler for using func type time-dependence, so you could make a function that encapsulates this array and spline behaviour. If I have not covered what it is that you to achieve, then please be explicit here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-466739255:365,Clear,Clearly,365,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-466739255,1,['Clear'],['Clearly']
Usability,"> Thank you for looking at this.; > ; > `store_state` should still be the final factor whether states are stored or not. It's the one available everywhere and for v4. `mesolve` with `store_state` will have `result.states` being the output density matrix. `mcsolve` with the same `store_state` and default options should return a similar result.; > ; > So it would be better to have the new option be `precompute_average_states` and have it only control if the average is compute when all trajectories is stored. The if the `average_states` property it use, it could compute the average then, but never do so if not used.; > ; > Please keep `result.states` and `result.final_states` as is. They have the same behaviour as in v4 and we want to keep them for backward compatibility.; > ; > `runs_...` and `average_...` are new to v5 and could be renamed, but it's not clear that `density_matricies` is the average while `final_states` are for each trajectories. `smesolve` and sometime for `mcsolve` individual trajectories states are already density matrices. Thus `smesolve`'s result density_matricies could work as well for all states from all trajectories, causing confusion.; > ; > You implemented the `density_matricies` property twice.; > ; > Having the options to keep only the final states without keeping all the trajectories is a good idea. Be careful that the trajectory result have the final state stored. So I'm not entirely sure what you want the behaviour to be for each set of options. I think it is confusing to return a density matrix if you request store_states - the density matrix is not the same as the state of the system, and surely v5 is the perfect time to clear up issues like this. Personally I found this behaviour very surprising when updating to V5. I do agree that `density_matricies` should maybe be `average_density_matricies`. I am happy to change `mesolve` as part of this for consistency. If you want to keep it backwards compatible would it be possible to send a li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023:865,clear,clear,865,https://qutip.org,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023,1,['clear'],['clear']
Usability,"> Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works.; > ; > Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same. I have now made it so that the measure and measurement_statistics function precisely do this. Should we keep either mode (one mode is of the ""observable"" type and the other with the ""projective"" type) also as a api-exposed function? If that is not the case, what would be the correct way to write doc_strings ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389:105,simpl,simplifying,105,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389,4,"['simpl', 'user experience']","['simple', 'simpler', 'simplifying', 'user experience']"
Usability,"> Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed. Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again? . I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234:388,simpl,simply,388,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234,1,['simpl'],['simply']
Usability,"> The current `.evolve_dm` and `.sys_dims` concepts both seem a bit awkward, so I'd like to suggest the following:; > ; > **For `.evolve_dm`**:; > ; > Replace `.evolve_dm` with a `.unitary` attribute on the solver itself. The attribute should be `True` if that particular instance of the solver can guarantee that the evolution it produces is unitary, and `False` otherwise.; > ; > This will be more generally useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:426,simpl,simplify,426,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,1,['simpl'],['simplify']
Usability,"> The fear I have with removing them is I expect we will forget some in untested code...; > But let's go with removing them. Woot. Code that is entirely untested is probably already broken. ;) . > Do we keep the ones with scalar: `Data / scalar`, `-Data`?; > They probably won't cause problems, but to be consistent I would also remove them. I'm happy with those being removed or being simple calls to other methods on the Data class. The fewer methods Data layer classes have to implement themselves, the better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1647#issuecomment-909064274:386,simpl,simple,386,https://qutip.org,https://github.com/qutip/qutip/pull/1647#issuecomment-909064274,1,['simpl'],['simple']
Usability,"> The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I do think it would be good to keep the `trace` property on the trajectories, but for the purpose of calculating the weighted averages, it could perhaps be treated like the other types of weights that we have.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958:303,simpl,simplify,303,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958,1,['simpl'],['simplify']
Usability,"> There are other issues with scipy 1.12 for v4 in steadystate. . At a glance, it is not clear to me where the issues are. I confirmed that each `scipy` function used by `steadystate.py` exists and is successfully imported.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2305#issuecomment-1908552067:89,clear,clear,89,https://qutip.org,https://github.com/qutip/qutip/pull/2305#issuecomment-1908552067,1,['clear'],['clear']
Usability,"> There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class. Actually having a method in the solver class seems better, I suppose this is why we are going towards Solvers from the simple `mesolve` function. I am going to try and rewrite my example using the Solver class. We can probably get away with having this functionality only in the new Solver class --- benefit of a major release I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362:437,simpl,simple,437,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362,1,['simpl'],['simple']
Usability,"> We allow the user to supply the `QobjEvo` class to use as an option, and allow them to specify either the class itself or a name for the class. E.g. `qobjevo_cls=QobjEvoHerm` or `qobjevo_cls=herm`. I would prefer the user not needing to know how we do it, just that there an option that speed up the simulation by 40 % in normal cases. Knowing that we forced it in an alternative qobjevo class is not useful and I hope we won't be forced to add many kinds of qobjevo. > Perhaps we should also not allow users to switch the class later by changing options? That might simplify the logic because we wouldn't need to modify the RHS when options are updated. Since changing options does not change the physic, I would like them to be changeable. But the `rhs`, and `_rhs` is certainly not great. I will rethink the way to do it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203:569,simpl,simplify,569,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203,1,['simpl'],['simplify']
Usability,> We want to essentially parse the whole project and generate the names of all the functions and classes. This could also be done directly by running a parser on the qutip folder using ideas similar to. @quantshah do we really want a graphic to show all classes and functions? Do we not think that maybe a lot of functions get created that are not necessarily intended for users of the library. Not in all cases do we name then as using the leading underscore for internal convention. I am open to persuasion on this. Clearly there are also issues with us forgetting to update `functions.rst`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-474411868:518,Clear,Clearly,518,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-474411868,1,['Clear'],['Clearly']
Usability,"> What exactly is this `dev.major` branch?. Hi @eendebakpt. `dev.major` is the branch in which we are developing QuTiP version 5. We're still doing important fixes for 4.7.1, but we're not planning to release any more feature for the 4.X series (although *maybe* that could change -- we'll see how the move to 5 goes). I'll update the contributing guidelines to mention QuTiP 5. QuTiP 5 has been in the works for a long time, but we're now in the ""cleaning things up"" phase, and hope to release an alpha version in the next month or so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1943#issuecomment-1168823150:348,guid,guidelines,348,https://qutip.org,https://github.com/qutip/qutip/pull/1943#issuecomment-1168823150,1,['guid'],['guidelines']
Usability,"> What if we rethink the approach from the beginning:; > ; > ```; > QobjEvo([op, func], args={""state"": Solver.StateFeedback(default=psi0)}); > QobjEvo([op, func], args={""e1"": SESolver.ExpectFeedback(e_op)}); > QobjEvo([op, func], args={""state"": MESolver.StateFeedback(raw_data=True)}); > QobjEvo([op, func], args={""collapse"": MCSolver.CollapseFeedback()}); > QobjEvo([op, func], args={""W"": SMESolver.WeinerFeedback()}); > ```; > ; > And we remove the `add_feedback` method. This looks great. I really like that it makes it clearer where the feedback comes from and that it is solver dependent. Removing the need to specify the feedback in two places when constructing a `QobjEvo` is really nice too. Let's do it in a separate PR though (unless you strongly want to update this one). I have a slight concern that it might be a bit complicated for users to find the feedback classes (e.g. they have to know to import the right solver) but I'm sure we can make that nice the PR itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984:523,clear,clearer,523,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984,4,"['clear', 'feedback']","['clearer', 'feedback']"
Usability,"> What is the main difference between `expect` and `measure`? That's the main thing that comes up ; > to my mind. What different question are you answering? I also wonder if `expect` could be called. . `expect` returns the expectation value (i.e. probability weighted average of the measurements). `measure` returns a *single* measurement (i.e. an eigenvalue and an eigenstate, selected randomly with weighted probabilities). > The description of the `measure` function is a bit general maybe with this regard. But I might have ; > missed the point completely (my bad). Open to suggestions. I will also re-read it and see if I can think of something clearer.; ; > Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it. I'll dig a bit and see if the failure is related somehow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408:650,clear,clearer,650,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408,1,['clear'],['clearer']
Usability,"> What's the preferred method to link functions that are not public APIs?. I don't think we should link to non-public API in the doc. Non-public API should not (at least no encouraged) be used outside of QuTiP because we may change it without issuing a deprecation warning. Besides, [`check_unitary`](http://qutip.org/docs/latest/apidoc/classes.html?highlight=check_isunitary#qutip.Qobj.check_isunitary) is a public API, it is a class method under `Qobj`, rather than a function, see bellow. > Qobj vs qobj link. `qutip.qobj.isoperbra` and `qutip.Qobj.isoperbra` are different. The lower case `qobj` is a submodule in QuTiP (qobj.py) while `Qobj` is a class. `isoperbra` is not a class method under `Qobj`. It is a function defined under the submodule `qobj`. So only `qutip.qobj.isoperbra` is the correct path. To make the life simpler, I would recommend to use the shortcut ``:func:`.isoperbra` `` for functions and ``:meth:`.Qobj.class_method` ``. Or even simpler: ``:obj:`.isoperbra` ``. Sphinx will automatically look for the correct match. As long as there are no two functions with the same name, we are safe. This isalso because `qutip.qobj.isoperbra` will be a wrong path in qutip 5.0. The file is moved.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1499#issuecomment-824624079:829,simpl,simpler,829,https://qutip.org,https://github.com/qutip/qutip/pull/1499#issuecomment-824624079,2,['simpl'],['simpler']
Usability,"> You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted). . I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually. Now, I did get `ValuError`. Thanks !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555:63,clear,clearly,63,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555,1,['clear'],['clearly']
Usability,"> also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages; > or commonly used language e.g. through quantum assembly language (qasm); >; > ------------------------------; >; > Also, the last outcomes have some overlap with the last project. Although; > I also find this circuit importation very important, I guess two projects; > should not have overlap if they are both selected.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67E",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:2618,simpl,simple,2618,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['simpl'],['simple']
Usability,"> does this floquet formalism supports any hamiltonian or just it works for two level systems?. It should support any hamiltonian. I have simulations test cases with harmonic oscillators for instance. However, you should have a look at the code from #766 since the code currently in QuTiP repository seems to have been tested only with two-level systems and contains some bugs. > Also the code uploaded is not working, how to plot this wigner function?. I'm sorry, I have no idea what you are talking about. > Floquet formalism is totally not working fro me. plz help. I think you should first try to make it work with simple two-level systems. See http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html and https://gitlab.inria.fr/lverney/qutip_floquet_example/blob/master/Example.ipynb. Note that there are some bugs in the current QuTiP code which are fixed by #766 but this one is not yet merged.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-355973074:619,simpl,simple,619,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-355973074,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"> thanks for the comment, I didn't know about `qutip.propagator`; > ; > > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple; > ; > cool, can i learn more about this from you?. Sorry, I don't have much experience in it myself - you'll be reading about the methods in papers/lecture note by people smarter than me. We have some tutorial notebooks about optimal control using the QuTiP optimal control package here: http://qutip.org/tutorials.html#optimal-control, which you may be able to adapt to your use case. I believe there are components in there that you can subclass so that the optimiser is RL-based rather than using standard BFGS or something else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258:151,learn,learning,151,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258,2,['learn'],"['learn', 'learning']"
Usability,">I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?. Maybe, but I find teleportation already a very short circuit, isn't it?. >Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?. Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087:60,simpl,simple,60,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087,2,['simpl'],"['simple', 'simpler']"
Usability,"@AGaliciaMartinez What exactly is this `dev.major` branch? . `dev.major` diverged from the qutip `master` quite a lot.; I could not find anything relevant on https://qutip.org/docs/latest/development/contributing.html. The only thing I could find is https://github.com/qutip/qutip/milestone/18, but it is not clear what the timeline is for that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1943#issuecomment-1166623619:309,clear,clear,309,https://qutip.org,https://github.com/qutip/qutip/pull/1943#issuecomment-1166623619,1,['clear'],['clear']
Usability,@AckslD thank you for the feedback.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/916#issuecomment-464658045:26,feedback,feedback,26,https://qutip.org,https://github.com/qutip/qutip/issues/916#issuecomment-464658045,1,['feedback'],['feedback']
Usability,"@BoxiLi . Yes, how to include gates in qutip is not clear to me. Many of them seems specialized so I don't think we should keep them all. Keeping only some of them could be fine but I am not well placed to choose a subset of commonly used gates and the `target` made them quite specialized. It also means that some gates will be defined in both qutip and qutip-qip. I also want all function that create `Qobj` in qutip the follow an common interface (they should all support `dtype`) and if we want these functions to also follow the qip signature, it could get somewhat complex. I think removing them and having the private functions for tests will make it easier for us on the long run. I see the use of `expand_operator` now that you explain it. I would prefer to have it in dimension.py and having users call it manually than being included in the `Qobj` creation function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262:52,clear,clear,52,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262,1,['clear'],['clear']
Usability,"@BoxiLi I'm -1 on adding such complexity to `qutip.about`. It's often used for bug reporting, and complexity has cause use issue in such places in the past. Especially the importing by name and the calls to inspect look like trouble. I would suggest a simpler solution, which is to have `about_family_pkg(title, extra_lines)`. That way family packages can supply their own title and extras and `about()` in qutip and other packages can just call `about_family_pkg` with the correct arguments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1870#issuecomment-1104938167:252,simpl,simpler,252,https://qutip.org,https://github.com/qutip/qutip/pull/1870#issuecomment-1104938167,1,['simpl'],['simpler']
Usability,"@BoxiLi Sure, the tests looks not too complex. I'm working on it. I'm grouping the gates for better error handling. @jakelishman Thanks. Sorry, I was just too lazy to set up the tests on my machine, LOL. I simply create the pull request and see if the code pass. That's why there are always one or two minor fixes here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104:206,simpl,simply,206,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104,1,['simpl'],['simply']
Usability,"@Canoming: if this gets merged, it's much easier to bring your `master` up-to-date because we'd want to overwrite everything on it. In that case, it would be as simple as; ```; git remote add qutip https://github.com/qutip/qutip.git; git fetch qutip; git reset --hard qutip/master; ```; and you'd have forced your `master` to mirror ours (destructively - if you had additional work you wanted saving, this would overwrite it). In the future, it will be a bit easier for you if you develop pull requests on a separate branch, and always keep `master` as mirroring ours.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629826086:161,simpl,simple,161,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629826086,1,['simpl'],['simple']
Usability,"@ChesterCamm @jakelishman I've attempted to clean up the figure state tracking in Bloch.render() to make it more robust. As a bonus, I can no longer crash .render() in my own Python console by closing a figure and calling .render() now updates any existing figure that is already shown. @ChesterCamm Feedback on whether my change helps your case would be appreciated. The new code also works with all sort of combinations of .show() and .render() in a Jupyter notebook for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-884790771:300,Feedback,Feedback,300,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-884790771,1,['Feedback'],['Feedback']
Usability,"@Ericgig . - docstrings should be fixed. - coveraged increased with . `e_ops = [callable, qobj]; e_ops = [callable, callable]; e_ops = [qobj, qobj]`. - added a more efficient and clear pytest parametrization; - fixed the repeated sparse test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157:179,clear,clear,179,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157,1,['clear'],['clear']
Usability,"@Ericgig @AGaliciaMartinez I've approved this PR and I'd like to merge it once @trentfridey has fixed the ""Verify Towncrier entry added"". I actually preferred the situation before @trentfridey removed the requirement for the PR number -- it was simpler and didn't rely on us to remember to write those numbers into the changelog. For UnitaryHack, I think we have to merge it before the end of tomorrow for it to count, and I'd like to do that since it's a big improvement and now probably we just need to try it and tweak how it is set up if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927#issuecomment-1158111426:245,simpl,simpler,245,https://qutip.org,https://github.com/qutip/qutip/pull/1927#issuecomment-1158111426,1,['simpl'],['simpler']
Usability,"@Ericgig @nathanshammah @hodgestar ; Hi. All. I need help with creating PR for the qutip-lattice repo. Not quite sure how to do it separately. This is try 1. The lattice.py and topology.py are moved from qutip/ to qutip/lattice which also contains the qutip/lattice/tests/test_lattice.py with all the test functions for the new functions. Usage examples for the new functions can be found in https://github.com/sbisw002/qutip.lattice-notebooks; You'll know how I imported the module and understand the examples. . I still need to learn how the separate repository can be updated, please help with that.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2014:530,learn,learn,530,https://qutip.org,https://github.com/qutip/qutip/pull/2014,1,['learn'],['learn']
Usability,@Ericgig Can you please guide me through (step-by-step developing test function or test classes) writing tests for progressbar? I don't have much experience with writing python tests? But I am a quick learner and can easily grasp the fundamentals.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220:24,guid,guide,24,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220,2,"['guid', 'learn']","['guide', 'learner']"
Usability,@Ericgig Could we check whether tlist is monotonic when `_safe_mode` is true? It might make the error clearer.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879184807:102,clear,clearer,102,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879184807,1,['clear'],['clearer']
Usability,"@Ericgig Hi. I made ```anim_wigner_sphere``` again to make it clear that users use an animation function. If it is ok, I will do the same for other functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2203#issuecomment-1678682976:62,clear,clear,62,https://qutip.org,https://github.com/qutip/qutip/pull/2203#issuecomment-1678682976,1,['clear'],['clear']
Usability,"@Ericgig Hi. I merged animation functions with functions in visualization.py. Now, users can have animations simply by passing a list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2203#issuecomment-1667219957:109,simpl,simply,109,https://qutip.org,https://github.com/qutip/qutip/pull/2203#issuecomment-1667219957,1,['simpl'],['simply']
Usability,@Ericgig I decided it was easiest to try out some of my ideas for how to simplify this by coding. The result is #1633. Let me know what you think.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-894208587:73,simpl,simplify,73,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-894208587,1,['simpl'],['simplify']
Usability,"@Ericgig I think it's unavoidable to have some sort of global state that tells the C compiler which type to choose, and I think passing it as a compilation option is a simple and straight forward solution. Using macros won't change the need for a compilation flag and will make fetching the correct numpy type trickier. If cython does eventually provide a nicer option, I am happy to use it, but they are still having long discussions about the right direction to take. One thing that would make things nicer would be to expose the compilation options used in, for example, `qutip.utilities` so that compilation becomes `compile_time_env=qutip.utilities.compile_time_env()`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052:168,simpl,simple,168,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052,1,['simpl'],['simple']
Usability,"@Ericgig I'm back from vacation so I'm keen to restart the discussion on this and hopefully get it merge. Any suggestions for a better way to tell whether the coefficient function expects the old-style arguments? I'm happy to do the coding, but I'd like to keep the check simple and I don't have a better idea for it right now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-904725956:272,simpl,simple,272,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-904725956,1,['simpl'],['simple']
Usability,"@Ericgig Tests added for the type changes. Note that `QobjEvo.__rmatmul__` is not currently callable. Calling `qobj @ qevo` will call `QobjEvo.__matmul__(qobj, qevo)` first, which will return the result. If I am not missing a case where `__rmatmul__` is called, I vote that we simply delete the implementation of `__rmatmul__` (in a separate PR).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1149772678:277,simpl,simply,277,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1149772678,1,['simpl'],['simply']
Usability,"@Ericgig You'll see I have made a full review. Lots of comments, but mainly small things. Some are just suggestions (which I make clear). Just a general idea... as far as the solver method goes, you have a code and name, and some other properties.; Is it worth considering a class? Like `SSolveMethod` with properties like `name`, `code`, `photocurrent` etc. Could have a function `get_stochastic_solve_method`? Just an idea.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-458109888:130,clear,clear,130,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-458109888,1,['clear'],['clear']
Usability,"@Ericgig `.step(...)` looks like a great solution. We should definine more precisely what one is allowed to modify in between calls to `.step` and document that. Aside regarding things we have already implemented: I know -- my point is that there are many such things and we have only implemented one kind of each (for example, what kind of progress bar is appropriate is highly dependent on the environment the code is running in -- if the code is running on a server without a terminal it might be some kind of logging, inside a hypothetical QuTiP UI GUI application it might be a progress bar provided by the GUI toolkit being used, etc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358:341,progress bar,progress bar,341,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358,2,['progress bar'],['progress bar']
Usability,"@Ericgig `b=Bloch()` QuTiP 4.3.1 and 4.4.0.dev0+5af8c1c5 on python 3.7.3 works on Mac, both from shell and Jupyter notebook. Also plotting is fine. Simply running `Bloch()` in Jupyter notebook gives the error; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); /miniconda3/lib/python3.7/site-packages/IPython/core/formatters.py in __call__(self, obj); 343 method = get_real_method(obj, self.print_method); 344 if method is not None:; --> 345 return method(); 346 return None; 347 else:. /miniconda3/lib/python3.7/site-packages/qutip/bloch.py in _repr_svg_(self); 298 from IPython.core.pylabtools import print_figure; 299 self.render(); --> 300 fig_data = print_figure(self.fig, 'svg').decode('utf-8'); 301 plt.close(self.fig); 302 return fig_data. AttributeError: 'str' object has no attribute 'decode'; ```; but then plots the Bloch sphere, I don't know if it's a problem though or the correct functioning of the class. In shell it gives the object reference.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1011#issuecomment-502906115:148,Simpl,Simply,148,https://qutip.org,https://github.com/qutip/qutip/issues/1011#issuecomment-502906115,1,['Simpl'],['Simply']
Usability,"@Ericgig and I had a brief discussion about how to handle `inf` and `nan` generally. One option is forbid them entirely from the data layer -- i.e. to check and raise an error whenever a new data layer is created. A potential downside to this is we'd have to check often to be sure, since any operation can potentially create `nan` and `inf`, even simple addition:; ```python; >>> 1e308 + 1e308; inf; >>> (1e308 + 1e308) - (1e308 + 1e308); nan; ```; an alternative is to try propagate `nan` and `inf` only as correctly as, e.g., `BLAS`. What happens with `BLAS` is that `nan` and `inf` propagate reasonably correctly, but are considered fairly interchangeable -- i.e. `nan`, `inf`, and `-inf` are all just bad values.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1208234717:348,simpl,simple,348,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1208234717,1,['simpl'],['simple']
Usability,"@Ericgig any tips how to locally run `pycodestyle` linter so that it follows same settings as `codeclimate`? When I run it locally it show way more warnings than `codeclimate`, seems a lot more restrictive. I'm sure some sort of configuration is missing. I checked the [contribution guide](https://qutip.org/docs/latest/development/contributing.html) but this particular matter is not detailed. If you explain how to run linter locally I would be happy to also update the docs and document it for the future contributors.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661:283,guid,guide,283,https://qutip.org,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661,1,['guid'],['guide']
Usability,@Ericgig not in any huge hurry. Once there is a nice subset of tests that can be run to test installation I will update the nixpkgs package for qutip. Thanks for being so responsive! For now I'll just delete some of the tests and can always update the package once the ability to test only a subset is added to a release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675:171,responsiv,responsive,171,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675,1,['responsiv'],['responsive']
Usability,"@Ericgig we verified the code also for spins.; The code is consistent with previous versions and it seems to run slightly faster when `e_ops` is given.; I checked the results with `mcsolve` from Qutip 4.3.1, also I checked the density matrix with respect to `mesolve` and `steadystate `. However, when the `e_ops` are not given, and the option `average_states=True`, the `mcsolve` in your version requires much more time than in the 4.3.1 case.; Please, check that this is not a machine dependent bug. ; I wrote a code which does that for a simple three spin system:; https://gist.github.com/fminga/c3e75a75dc528cb509c7d82d3eb9823b. There is, moreover, a minor inconsistency: when the option `average_states=False` and `store_final_state=True`, one would expect to obtain a set of wavefunctions, instead the code returns the density matrix at the last time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991#issuecomment-497925627:541,simpl,simple,541,https://qutip.org,https://github.com/qutip/qutip/pull/991#issuecomment-497925627,1,['simpl'],['simple']
Usability,"@Erotemic Thank you for documenting this. I will merge it shortly & have marked if for inclusion in QuTiP 4.6.3. Note that qutip-qip has also been split out into it's own package (https://github.com/qutip/qutip-qip) in preparation for QuTiP 5 so we should update it there too. `reverse_states` seems to reverse the order of the array of quantum and classical bits. It is a bit odd, so I'm happy to leave it undocumented. The original commit just read:. ```; commit dcf8d363718b6ee5a8a17ec9af00df4bc8aea166; Author: Robert Johansson; Date: Mon May 26 19:11:44 2014 +0900. allow reversing the circuit represenation. added support for multigate symbol; ```. @BoxiLi Just pinging you so you know I merged this and can comment if you like.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388:407,undo,undocumented,407,https://qutip.org,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388,1,['undo'],['undocumented']
Usability,@HarshKhilawala Would you be interested in adding some tests for the progress bars in another PR?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251:69,progress bar,progress bars,69,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251,1,['progress bar'],['progress bars']
Usability,@IamSeti please explain the feature request clearly.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808413846:44,clear,clearly,44,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808413846,1,['clear'],['clearly']
Usability,@PZJuly I have posted an answer to your question on; https://groups.google.com/forum/#!topic/qutip/BqUZQEQN1c4. I agree the docs http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html do *not* seem to include an example using `rhs_with_state`,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461408955:158,guid,guide,158,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461408955,1,['guid'],['guide']
Usability,"@PhilipVinc Hello! Apologies for the long wait -- I think this got lost in people's holidays and other goings on. I realized a few things while re-reading the long issue discussion:. 1. We need to define clearly what we want to propose. E.g. Initially the request was just for the constructor to work, i.e. `Qobj(netket_operator)`, and later in the discussion it expanded to include all operations and methods, e.g. `qutip.groundstate(netket_operator)`, `qobj * netket_operator`, ... . These are proposals of quite different scope. 2. There clearly isn't a huge advantage either way to having `Qobj(netket_operator)` vs `netket_operator.to_qobj()` except perhaps that people don't need to remember to what kind of thing `netket_operator` is exactly if they are swapping between libraries. 3. It is already *almost* possible to implement `Qobj(netket_operator)` on top of QuTiP v5 (i.e. the dev.major branch) without any changes to QuTiP itself and it might be beneficial to close that slight gap for multiple reasons. Posting example implementation in next comment.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908328150:204,clear,clearly,204,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908328150,2,['clear'],['clearly']
Usability,@VolodyaCO Fix merged. Thank you for contributing it and apologies that such a simple fix took a long time to be merged.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1707#issuecomment-1056809216:79,simpl,simple,79,https://qutip.org,https://github.com/qutip/qutip/pull/1707#issuecomment-1056809216,1,['simpl'],['simple']
Usability,"@ajgpitch Hi, it should be all clear now. Tell me if there is any new issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1065#issuecomment-522978891:31,clear,clear,31,https://qutip.org,https://github.com/qutip/qutip/pull/1065#issuecomment-522978891,1,['clear'],['clear']
Usability,"@ajgpitch I've started a guide and docs in https://github.com/qutip/qutip-doc/pull/113. Would you mind having a quick look and letting me know if the direction is good. I'll try finish the measurement_statistics section tomrrow. Could we perhaps land this PR with just the guide? I'm happy to add a notebook straight afterwards (and it should be fairly straight forward once we have the guide), I just don't want to end up having too many different pieces in flight and holding up @sarsid more than necessary.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-633748439:25,guid,guide,25,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-633748439,3,['guid'],['guide']
Usability,"@ajgpitch, I think that instance method picking is still somewhat of an issue in python 3, (which is what I use primarily) although I could be wrong. Either way, since the current QuTiP version supports 2.7, we would need to make this backward compatible to do multiprocessing correctly, so I'm glad you agree that option 3 is best. As to dropping python2 support, I think that this would be a good idea for v5.0, since [python is dropping support for 2.7 in two years](https://legacy.python.org/dev/peps/pep-0373/), which could be close to the time that QuTiP v5 is released (depending on how long the changes take). @sahmed95, thanks for making those final changes - sorry, I had forgotten to make the docstring capitalization changes. I'm happy with the state of the module now, so go ahead and merge it. There haven't been any functional changes made to how anything works, so none of my other pull requests ([[1]](https://github.com/qutip/qutip-notebooks/pull/58), [[2]](https://github.com/qutip/qutip-doc/pull/59), [[3]](https://github.com/qutip/qutip.github.io/pull/51)) should need to be updated. In the qutip-docs PR, for the moment I've only added auto-doc documentation, but I'll add more extensive documentation before version 4.3 is released (when is the expected time frame for this?) so that people will have more to refer to when this new feature is announced. . Thanks to everyone involved in this review process for their constructive feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-386413620:1453,feedback,feedback,1453,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-386413620,1,['feedback'],['feedback']
Usability,"@andriusdc If you are having trouble formatting the code nicely, I suggest reading the GitHub markdown guide -- https://guides.github.com/features/mastering-markdown/.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879106109:103,guid,guide,103,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879106109,2,['guid'],"['guide', 'guides']"
Usability,@anna-naden This PR also seems to include the changes to guide-basics.rst that were in the PR I rejected. Could you remove those changes from here and then I can review the rest?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1773#issuecomment-1027766437:57,guid,guide-basics,57,https://qutip.org,https://github.com/qutip/qutip/pull/1773#issuecomment-1027766437,1,['guid'],['guide-basics']
Usability,"@arnelg and @cgranade, you are both raising good points here. I'm not exactly sure what the best solution for this particular issue is, but do tend to agree with @arnelg that we do not want functions that perform unexpected actions, if possible, and that explicit is better than implicit. However, ultimately, it has to be the docstrings that should resolve any ambiguities, because not all functions can be intuitive to everyone, since we all have different backgrounds and expectations. So if the current behaviour is clearly described in the docstring, it should also be an acceptable solution I think. But one important thing that @arnelg also alluded to is that if at some point we expect that we might want to use `composite(S, O)` to mean something different than `composite(S, to_super(O))`, then we should better not implement the operator-to-superoperator promotion implicitly in `composite` now. Since the `composite` function is brand new it might be a good idea at this point to avoid doing these implicit assumptions on how it will be used until various use-cases has been explored in more details. I absolutely agree that it is great to have discussions about these kind of design issues, and it's great that you both have taken an interest in this particular issue. I also agree that Qobj.dims is a bit obscure and not that flexible, and maybe insufficient for complex cases with mixes of operators, kets, superoperators along different subsystems. This would not be an easy thing to change, but having a discussion about the short-comings and possible solutions would be great. I've created a new page on the wiki for listing various issues and design short-comings in qutip:. https://github.com/qutip/qutip/wiki/Future-Design-Changes. Feel free to add to this page and edit what's already on it (and of course, propose solutions!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58190164:408,intuit,intuitive,408,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58190164,2,"['clear', 'intuit']","['clearly', 'intuitive']"
Usability,"@bopardikarsoham It can definitely still be looked at, but the situation needs to be untangled before any code change is made:. - If one is using Lindblad operators (see the equation with `L_i` on https://en.wikipedia.org/wiki/Lindbladian) then `a` and `b` are the same and the code is currently correct.; - If one is using some other set of basis operators `A_n` for the bounder operators on `H`, then you will need to include terms for both `n, m` and `m, n` and the sum of the those two terms will again be the same for the current code and the proposed change. So the physics will not change from what it is now if we make the proposed change and it appears that how the terms are organized within the larger sum is a convention. So the question is whether there is a standard convention to follow or not, and I don't know the answer. Step 1 is probably to find some textbooks or canonical references which make the choice clear. Step 2 would be to write some tests for the behaviour in the case where `a != b`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358:927,clear,clear,927,https://qutip.org,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358,1,['clear'],['clear']
Usability,"@cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:. * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground.; * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases like this where there are essentially an infinite number of possible constructors, it makes sense to not ""bless"" any of them by sticking them on the class.; * It would be good to have one really nice use case that we could turn into a guide entry in the documentation. The current small examples are great, but it would be good to add one slightly bigger worked example that did something more ""exciting"".; * I would not push everything into the `qutip` namespace (largely because we would likely not want that in v5, although I should actually check what v5 is doing in `qutip.__init__` these days).; * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release). Hoping to hear comments from others!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910:259,feedback,feedback,259,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910,4,"['clear', 'feedback', 'guid', 'simpl']","['clear', 'feedback', 'guide', 'simple']"
Usability,"@cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114:129,clear,clear,129,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114,1,['clear'],['clear']
Usability,"@elfring The first line of the PEP `There are two main reasons for adding this feature to Python: simplicity of expression, and support for in-place operations` and the `in-place operations` mentioned are part of why `a = a + 5` is not equivalent to `a += 5` (as Jake took the time to demonstrate). I'm closing the issue, but feel free to continue the discussion here & thank you for suggesting an enhancement to QuTiP and please feel free to suggest others.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-972730767:98,simpl,simplicity,98,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-972730767,1,['simpl'],['simplicity']
Usability,@emilianomfortes Thanks. I've merged this one and will close the related issue. Feel free to open new PRs for any improvements you want to make (either to the guide or the solver). Thanks for contributing this!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1126038943:159,guid,guide,159,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1126038943,1,['guid'],['guide']
Usability,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:769,intuit,intuitive,769,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,1,['intuit'],['intuitive']
Usability,"@heathcliffYang This seems to be running okay. I hope you can use QuTiP now. Try running this simple code in python. ```; from qutip import *. rho = basis(2, 0); print(rho); ```. P.S. you may also want to update your Anaconda as the latest is Anaconda 5. Let me know if you have any other issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387667826:94,simpl,simple,94,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387667826,1,['simpl'],['simple']
Usability,@hiliuzheng no problem! It was a fun learning experience. Thanks for pointing me in the right direction!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2017#issuecomment-1351838277:37,learn,learning,37,https://qutip.org,https://github.com/qutip/qutip/pull/2017#issuecomment-1351838277,1,['learn'],['learning']
Usability,"@hodgestar , I think I responded to all your comments.; The tests for core/blochredfield.py are present, I think it has a 100% coverage.; I did little cut and paste, but stayed close to the original cython code when possible. The question I still have is about the `a_ops` format: I made breaking changes from v4, so I want to be sure the new way is clear. I think `matmul_var_data` should be available in `core/data` not implemented here, but I don't want to touch that part in this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890:350,clear,clear,350,https://qutip.org,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890,1,['clear'],['clear']
Usability,@hodgestar . I removed the `_rhs` by changing it so the rhs is built when making the integrator instead of in `__init__`. I also simplified the way options are updated so brmesolve no longer need to overwrite `_apply_options`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940:129,simpl,simplified,129,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940,1,['simpl'],['simplified']
Usability,"@hodgestar . Since now there's no need of anything because the output is a copy paste of mine, how about a simple `..plot::` into `..code-block:: python`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1125718559:107,simpl,simple,107,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1125718559,1,['simpl'],['simple']
Usability,"@hodgestar ; It's ready for another look.; I made it so the feedback can be set at `QobjEvo` creation, with `QobjEvo.add_feedback` method and with a method of the solver. `QobjEvo` with feedback can be used outside solver with a default value for the argument passed at creation. This default value is needed when creating the coefficient. When used in a solver an error will be raised if the solver cannot provide the feedback. The `QobjEvo` print will show it has feedback. . The solver method is mostly there for documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1789631286:60,feedback,feedback,60,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1789631286,4,['feedback'],['feedback']
Usability,"@hodgestar Apologies for taking as long, but went on and rebased my PR to 5.0 and addressed some of your comments. In particular, factory methods have been moved out into ordinary functions, and I added a simple string-based format for outcome labels (leaving `Seq` and `Par` for more complex cases as needed). For the notebook, I ran into the slight issue that the qutip-notebooks repo uses a more copyleft license, but in the meantime I put together a notebook at https://gist.github.com/cgranade/7c2a5a0827dddc4281666ad45763b1ec that includes a few examples of the API in use, including for modeling a simple teleportation channel. I still need to address PEP8 issues and add tests, but I think it should be a bit further along; thanks for all your help and feedback! 💕",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128:205,simpl,simple,205,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128,3,"['feedback', 'simpl']","['feedback', 'simple']"
Usability,"@hodgestar Hi Simon, really sorry about the delay. ; All the requested changes look good to me. I am happy this is ready to merge this now. . Normally we ask for a new feature PR to be accompanied by an example notebook and a section in the documentation. I guess we can work on the documentation later, it is a bit of a hassle getting the doc build working. However, an example Jupyter notebook would be really nice to go along with this. Can be quite simple - just take the examples from the docstring. Would be good to show the maths as well. We can then build on the notebook as we add more measuring features.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-546811896:453,simpl,simple,453,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-546811896,1,['simpl'],['simple']
Usability,@hodgestar I am not much aware with writing tests. Can you help me write test for progressbar file? How to write a test? How to check coverage for the entire file? How to check coverage for each line of code as to know where and what to add test? From where can I learn more about testing? Any documentation for writing tests specifically for qutip repository?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603:264,learn,learn,264,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603,1,['learn'],['learn']
Usability,@hodgestar I decided to add the `spin_wigner` changes in which I've resolved the normalization issue and indexing problems that were also in the `spin_q_function`. I've added a simple test to check for normalization and real-ness of the spin Wigner.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089:177,simpl,simple,177,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089,1,['simpl'],['simple']
Usability,"@hodgestar I've added some tests for the spin_q_function. At the moment it tests a random density matrix for three different spin values. I'm not very familiar with qutip's style for writing tests, I would normally write a test function that would also take arguments but that doesn't seem to be the norm here. We could also do something similar to the `TestHusimiQ` class of tests. I've had a look at the `spin_wigner` function as well, and I believe that had the same issue of density matrix indexing.; I've re-implemented it (and the `_rho_kq` function) and I've added details to the docstrings including relevant references.; Should I create a separate PR for this or should I expand the scope of this PR?. NB: At the moment I can't think of an easy way to test the spin Wigner function because there is no simpler/alternative definition that I am aware of to verify the implementation against.; There are simple tests such as if the imaginary part is less than some threshold (currently true), does it integrate to 1 (currently not true, not sure why).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617:811,simpl,simpler,811,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617,2,['simpl'],"['simple', 'simpler']"
Usability,"@hodgestar Sure, do I need to be assigned another issue? Can I create new issue for writing tests for progress bar and get assigned to work on it?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113:102,progress bar,progress bar,102,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113,1,['progress bar'],['progress bar']
Usability,"@hodgestar Thanks for doing it!; The custom `m_ops`, as far as I understand, would be of a form `[np.sqrt(coef)*(a+a.dag()), -1i*np.sqrt(coef)*(a - a.dag())]` where `a` would be an annihilation operator for a photon in a mode that is detected, and `coef` represents whatever happens between the emission and the detection (cavity-guide coupling, detection efficiency etc). In the current implementation it would be subset of default `m_ops`, that are formed as; ```python; for c in sso.sc_ops:; m_ops += [c + c.dag(), -1j * (c - c.dag())]; ```. As for the tests, I can think of something like this; ```python; def test_heterodyne_mesolve():; b = 1 # drive amplitude; gamma = 1 # spont. emission rate; eta = 0.3 # coupling efficiency; n_steps = 1000; n_traj = 50; ; H = np.sqrt(eta*gamma) * b * sigmay(); c_ops = [np.sqrt(gamma)*sigmam()]; psi0 = basis(2); times = np.linspace(0, np.pi*2, n_steps). n_tr = 3. sme_het = smesolve(; H,; psi0,; times,; [],; c_ops,; e_ops=[sigmax(), sigmay(), sigmaz()],; store_measurement = True,; dW_factors=[1e-5, 1e-5], # to make tests simpler; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay()],; ntraj=n_traj,; noise=123, # random seed; ); ; assert np.array(sme_het.measurement).shape == (n_traj, n_steps, 1, 2); assert all(np.isclose(np.array(sme_het.measurement).mean(axis=0)[:,0,0].T, np.sqrt(eta)*sme_het.expect[0], atol=2e-2)); ; def test_incorrect_m_ops_heterodyne_mesolve():; ; with pytest.raises(ValueError, match=""The measured operators for the heterodyne method supposed to be pairs of quadratures: m_ops should have even length.""):; sme_het_bad_mops = smesolve(; sigmax(),; basis(2),; np.linspace(0,1,10),; [],; [sigmam()],; e_ops=[],; store_measurement = True,; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay(), np.sqrt(eta)*sigmaz()], # three operators; ntraj=10,; ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548:330,guid,guide,330,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548,2,"['guid', 'simpl']","['guide', 'simpler']"
Usability,@hodgestar The test is now included. It turned out to be quite simple with monkeypatch. Thanks for the suggestion!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060:63,simpl,simple,63,https://qutip.org,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060,1,['simpl'],['simple']
Usability,"@hodgestar the `.h` file imported from `base.pxd` makes is a lot simpler.; Changing the header file force recompilation, but the cythonization step is skipped.; If tests passes, it's ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195:65,simpl,simpler,65,https://qutip.org,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195,1,['simpl'],['simpler']
Usability,"@hodgestar. > I don't know what this measures exactly (e.g. is there clock scaling of some sort so that the measured CPU frequency might not be the maximum CPU frequency?) and it seems a lot of work to get a piece of information that isn't used directly by QuTiP, ... My code implementation is actually very simple. The [script](https://github.com/BitesPotatoBacks/osx-cpufreq/blob/main/osx-cpufreq/main.m) works by measuring the time it takes to execute a decrementing loop (the loop will take a certain amount of CPU cycles to complete based on the CPUs frequency). The loop is executed using inline assembly. The assembly is `volatile` to prevent the loop from being moved and reprioritized by the system (This increases accuracy). Then we do some calculations with some very special numbers and voila -- we've found our CPUs current frequency. I've gotten this trick to work on x86 now as well. > ... so I just fixed the result to 3.2 GHz for now (which according to Wikipedia is the clock speed for current M1s). I believe it would be best to refrain from setting a fixed value of 3.2 Ghz, because this may create issues for future machines with newer silicon that (may) run at higher or lower frequencies. On Apple Silicon, if you _must_ use sysctl, use `sysctl hw.tbfrequency`. This is basically Apple Silicon's version of `sysctl hw.cpufrequency`. The value it returns is still not very accurate, but it varies based on the system silicon, so it will be better than setting a static value. 👍",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1008344027:308,simpl,simple,308,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1008344027,1,['simpl'],['simple']
Usability,"@hodgestar: I'll leave this for a bit if you want to review it, but it's _almost_ all just code that we've already included in `master`. There's several points where things can clearly be improved (`__init__.py`), but that's also the case on `master`, and so far it's not been a super high priority.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1574#issuecomment-861647038:177,clear,clearly,177,https://qutip.org,https://github.com/qutip/qutip/pull/1574#issuecomment-861647038,1,['clear'],['clearly']
Usability,@hodgestar; Can we close this?; We now use simple dict for options and `Options` exist for backward compatibility.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1891#issuecomment-1414283362:43,simpl,simple,43,https://qutip.org,https://github.com/qutip/qutip/issues/1891#issuecomment-1414283362,1,['simpl'],['simple']
Usability,"@jakelishman . - in my case it would be different; - i am using it to train a reinforcement learning agent, which is highly sample inefficient and will take so many steps that even 10 times slower is much slower for a human; - you can refer to this paper from Google's Quantum Artificial Intelligence lab: [Universal quantum control through deep reinforcement learning](https://www.nature.com/articles/s41534-019-0141-3); - it would be great if you guys can add this feature, but i think i am just gonna write my own evolution code right now",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660468848:92,learn,learning,92,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660468848,2,['learn'],['learning']
Usability,@jakelishman @hodgestar. I would like to merge this PR soon.; Is the only missing part is a term for `dtype : type or str`?. Numpy use `data-type` which point to https://numpy.org/doc/stable/reference/arrays.dtypes.html; The closest equivalent we have would be `qutip.core.Data`.; Here would `data-type` works if we have a page in the documentation pointing to it?; Otherwise all I can think is `layer-type` or `qdata-type` which feels wrong. I would prefer to keep the explicit; ```; dtype : type or str; Storage representation. Any data type known to `qutip.data.to` is; accepted.; ```; over creating a new term for users to learn.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420#issuecomment-847295308:627,learn,learn,627,https://qutip.org,https://github.com/qutip/qutip/pull/1420#issuecomment-847295308,1,['learn'],['learn']
Usability,"@jakelishman Given what I've learned in this issue, I suspect our PyPI wheels were all build with `numpy == 1.19.5`. Does that sound right to you? If it is, I guess I should build all the new wheels with 1.19.5 too? Or should I ""fix"" things and go back to 1.16.6 or oldest-supported-numpy if that is more recent?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-989884557:29,learn,learned,29,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-989884557,1,['learn'],['learned']
Usability,@jakelishman Shall I rebase it after the review or better merge the master into this branch now to resolve the conflicts? The conflicts are minor and I'm pretty clear what caused them.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1444#issuecomment-810016097:161,clear,clear,161,https://qutip.org,https://github.com/qutip/qutip/pull/1444#issuecomment-810016097,1,['clear'],['clear']
Usability,@jakelishman my last comment was written in a bad way. I edited that. Is it clear now?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-739107555:76,clear,clear,76,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-739107555,1,['clear'],['clear']
Usability,"@jakelishman this is great, also thanks @dweigand for this PR. I tried out the function and it is very fast and could be great for specific use cases. My idea was a bit more simple - precomputing the `coherent_dm` operators (using qutip.coherent_dm) and using the `expect` function. But that performs worse that the original `qfunc` as well as this implementation of course. So this is great. I would be happy to merge this but have one thought:. This new implementation is sacrificing the ease-of-understanding of how Q-functions are computed with a very efficient and fast, but complicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_d",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:174,simpl,simple,174,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['simpl'],['simple']
Usability,"@jakelishman well, I haven't paid yet anything on Travis CI platform. However, I used my GitHub account (which I think it has some benefits since it's associated with an educational institution) to connect to the service, then I don't know if there was an exception due to that or it's just simply free.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607483835:291,simpl,simply,291,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607483835,1,['simpl'],['simply']
Usability,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:783,simpl,simpler,783,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['simpl'],['simpler']
Usability,@jrjohansson ....feedback?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-102937926:17,feedback,feedback,17,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-102937926,1,['feedback'],['feedback']
Usability,"@jrjohansson Thanks for comments, and I am happy you like it!. I will fix things (also, there is some internal stuff). With respect to plots - still I learnt them how to _make_ plots instead of just _using_ them, so after I make fixes I would appreciate . `complex_array_to_rgb` I am exposing it on purpose, not by an accident (see `__init__.py`).; The rationale is following: in QM one works with complex numbers, be it in wave functions, density matrices or other operators. However, I am not aware of cmap-like functions for complex numbers in Scipy (except for some dedicated packages; see also: [my answer to this StackOverflow question](http://stackoverflow.com/questions/15207255/is-there-any-way-to-use-bivariate-colormaps-in-matplotlib/17113417#17113417)). If you do know a more standard/supported/general/canonical method of mapping complex numbers to colors, I would be happy to use it (instead of `complex_array_to_rgb`). Otherwise, having `complex_array_to_rgb` exposed allows plotting other kinds of things.; For example:. ```; imshow(complex_array_to_rgb(a_density_matrix.full()), interpolation='none'); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41377018:151,learn,learnt,151,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41377018,1,['learn'],['learnt']
Usability,"@maij Thanks! The test code looks like a good start. Could you add it to `qutip/tests/test_wigner.py`?. Other tests we could add:. * We could write a more general test that compares the output of spin_q_function to a simpler implementation based on the definition -- something like:; ```python; state = qutip.spin_coherent(spin, theta_prime, phi_prime); direct_q = (state.dag() * qutip.ket2dm(psi) * state).norm() / np.pi; ```; Note: I named the angles `theta_prime` and `phi_prime` to emphasize that we can apply this test to cases where the angles for the state psi and the ones passed to spin_q_function are different. * We should also add a test for passing in arrays of theta and phi (i.e. were we really get out a mesh grid for Q values) since that was the primary use case for which `spin_q_function` was defined. Ideas for future PRs:. * It would be nice to also add tests for `spin_wigner` (I am suspicious of it now because of the problems with spin_q_function). Thank you for looking at these and taking charge of this bit of QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408:217,simpl,simpler,217,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408,1,['simpl'],['simpler']
Usability,"@maij The code is looking good to me. I've requested some changes and after that I'd like to do a final review, but I think we're in good shape. My thoughts on the remaining questions:. > Decide if the spin_wigner function should return only real values be default (as is currently done for the spin_q_function). I'm +1 on returning real values since the Wigner function is real valued and this is more consistent (unless you're aware of any strange cases where it might somehow not be?). > Decide whether to integrate the W function normalization in _rho_kq rather than at the top level. We divide all terms by (2*j + 1) only to end up multiplying it back out at the end which is a waste of time (_rho_kq is called d**2 times, d=2*j+1) . The benefit of leaving it as-is is that it reads like most definitions in literature. I'm +1 on sticking to the definitions in literature unless there is a measured speed penalty. `2*j + 1` likely can't be that big and the small number of arithmetic operations required is probably dwarfed by the matrix multiplications happening. . > Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). Here I would try stick as closely as possible to the previous behaviour of these functions (i.e. cases which worked before should hopefully return the same answer now) and then document clearly what the normalization factor is and how it should be added or removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186:1468,clear,clearly,1468,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186,1,['clear'],['clearly']
Usability,"@mcditoos Thanks more making the PR. Would you mind reverting all the unrelated changes? We don't mind small clean ups, but big clean ups should rather go into separate PRs and it should be clear why they are being made. Once you're ready for this to be reviewed, remove the draft status and ping me on the PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2261#issuecomment-1824959705:190,clear,clear,190,https://qutip.org,https://github.com/qutip/qutip/pull/2261#issuecomment-1824959705,1,['clear'],['clear']
Usability,"@nathanshammah @ajgpitch @Ericgig @quantshah ; Thanks a lot for the feedback and patience. I have fixed the variable names issue, hopefully. I can make time these days. Please advise the next steps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1066#issuecomment-568178589:68,feedback,feedback,68,https://qutip.org,https://github.com/qutip/qutip/pull/1066#issuecomment-568178589,1,['feedback'],['feedback']
Usability,"@nathanshammah I think it has nothing to do with this PR, I didn't change anything in `qobj.py` where the test failed before. I guess it might have something to do with Erig's commit ""mac without mkl"" and I simply merged it from master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307:207,simpl,simply,207,https://qutip.org,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307,1,['simpl'],['simply']
Usability,"@nathanshammah OK, my ""tests"" were just creating instances of `Bloch()` with and without `plt.figure()` instance passed in the constructor and then repeatedly executing the `show()` function. Now after I had a look at `qutip/tests` my small testing snippets indeed don't fit into that. Hence at this stage I don't see the benefit from adding these trivial ""tests"" I did to the repo. Thank you for the review and all the guidance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-494119661:420,guid,guidance,420,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-494119661,1,['guid'],['guidance']
Usability,"@nathanshammah, @Ericgig, @ajgpitch, @nwlambert, @quantshah, @BoxiLi, @hodgestar. I've updated this PR to match what I understand we agreed on. I've also added complete copyright notices to the documentation, including linking the CC-BY-3.0 licence the documentation text is licensed under, and making it clear that it's the documentation _text_ licensed under CC, and that the code is under 3-clause BSD. I've updated the frontmatter, and added a copyright notice to the index, so it's linked from every page in the documentation releases. I have updated the short copyright notice at the bottom of the documentation pages to say ""Copyright 2011 to 2021 inclusive, QuTiP developers and contributors"" to make it consistent with the source code (for the same reasons). As I've added a `_copyright` Sphinx target, the word ""Copyright"" at the bottom of the documentation is now hyperlinked as well. I didn't explicitly split this into more than one PR, but it's split into separate logical commits, which explain their extent and intent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298:305,clear,clear,305,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298,1,['clear'],['clear']
Usability,"@nathanshammah: It seems that travis fails before it even gets to the testing, when calibrating openmp. I cannot replicate the error on my end, the calibration takes only about a second for me. I did make 535010d more similar to 5501b2e by no longer using numpy.testing.assert_raises, numpy.testing.assert_warns and a ResourceWarning. Instead I use a try-except construction now. That seems to have fixed things, so I suspect that importing/calling one of the functions or the warning makes openmp fail on the rig used by travis. As I'm pretty sure the reason for the previous failure is either a numpy or openmp issue and therefore a hard fix, I would propose to simply not use those functions, the try-except construction does well enough.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-567132755:664,simpl,simply,664,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-567132755,1,['simpl'],['simply']
Usability,"@nathanshammah: already on the agenda. The splitting seems like a good plan. I would have thought that part of making it uniform would be to remove the lines from each file, so it can be centrally managed. That way, only files that have different licence terms need to note it. This is the way that Numpy, Scipy, CuPy, pandas, scikit-learn, etc etc all handle licensing - none of those specify copyright information in each file, and they all use the exact same licence as QuTiP (except CuPy, which is MIT). If we were GPL'd (like mitiq), we'd have to include the licence, as I understand it, but 3-clause BSD only requires you include the licence file itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864092614:334,learn,learn,334,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864092614,1,['learn'],['learn']
Usability,"@nonhermitian can you please code review this when you have time. I've kept the parallel_map functions and I don't really want to meddle with the current implementation of parfor because I think it will break backwards compatibility. Also, I don't really want to work with parfor as it is because I think it is overly complicated and trying to do funny things with the input (for example, I don't even remember what the following lines are supposed to do:. ```; var = [[args[j][i] for j in range(len(args))]; for i in range(len(list(args[0])))]; ```. ) and it also tries to return numpy arrays which I don't think is necessary and it doesn't work well with how I want to use parallel_map in the stochastic module, where the task function returns a tuple of various computation results of different types which should not be put into a numpy array. So for this reason I would like to add these new parallel_map functions to the qutip api. I think that this implementation is cleaner and more easy to understand and use, and it supports using progress bars, so I think this justifies duplicating the functionality of parfor function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/253#issuecomment-63582703:1041,progress bar,progress bars,1041,https://qutip.org,https://github.com/qutip/qutip/pull/253#issuecomment-63582703,1,['progress bar'],['progress bars']
Usability,@pmenczel I updated the PR again to simplify the new Cython code a lot and shift parts to Python. I'm much happier with this version and hopefully it makes it easier for you to understand too.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1498867381:36,simpl,simplify,36,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1498867381,1,['simpl'],['simplify']
Usability,"@quantshah @BoxiLi @hodgestar I have wrapped up the two measurement functions in the `measure` and `measurement_statistics` function which calls the required functions based on whether `ops` is a `list of Qobjs` or a `Qobj`. Do we want the individual functions (especially POVM) to be more granular? Moreover, the docstring for the wrapper function is really clunky (given the case-wise output types). Any ideas on how to make that simpler ?(one idea is to not specify return types and only have parameters given it's bound to be clunky!). ps. I'll fix the tests all at once after we decide on the api",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844:432,simpl,simpler,432,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844,1,['simpl'],['simpler']
Usability,"@quantshah Great work, this seems like exactly what we need. ; We already have a section in the release-distribution document about building the docs, so we can add a bit about rebuilding the previous version docs with `is_latest = False` and uploading. ; I don't think that it is feasible to rebuild all the old docs. Would be a lot of work, as we would have to recreate working envs for the versions. Would seem more feasible to edit the HTML - I guess we could script this, as each guide file would need to be fixed. We could also consider just removing some of the older versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1516#issuecomment-468176031:485,guid,guide,485,https://qutip.org,https://github.com/qutip/qutip/issues/1516#issuecomment-468176031,1,['guid'],['guide']
Usability,"@quantshah spotted that the function visualisation tree was out-of-date in qutip/qutip-doc#63. Thanks for that.; @nathanshammah and I spent some time updating it yesterday, but was quite a rigmarole, and the solution is sub-optimal:; 1. Update modules and functions in `QuTiP_tree_plot/qutip-structure.py`; 2. Run `QuTiP_tree_plot/qutip-structure.py`, which updates `QuTiP_tree_plot/d3_data/qutip.json`; 3.a. Open `QuTiP_tree_plot/qutip_org.html` (this only seemed to work with Firefox browser); 3.b. Print to PDF, save as `guide/doc/qutip_tree.pdf`; 4. Somehow crop `qutip_tree.pdf` and export as `guide/figures/qutip_tree.png`. In general we would like to automate this process, so that when the docs are built, the tree is rebuilt automatically. Task 1: make `qutip_org.html` open in all browsers. Task 2: Auto-generate the `qutip.json` when the API docs are built.; The API function docs are built from `apidoc/functions.rst`. It would be much better if we only needed to add new functions in this doc, and it output the `qutip.json` when it gets built. Task 3: embed `qutip_org.html` in the HTML docs and somehow in the PDF docs; Now it would be much better if when the `guide-overview.rst` were build that the HTML in `qutip_org.html` were embedded in the resulting `guide-overview.html` rather than the PNG as is now. More tricky is how this can be embedded in the PDF docs. Task 4: link to the API docs (this is probably quite tricky); If Task 2 is possible, then I guess it should be possible to add links to the API docs. Task 5: Have something similar to the function tree for classes. All in all this is far to hard to be worth doing just for the QuTiP docs, but I assume that lots of other projects would like to have this function tree in their docs, so you might think someone would add this feature to Sphinx. Maybe someone already has. I would suggest that a good first step would be to investigate this, and if not ask a question on their Github; https://github.com/sphinx-doc/sphinx",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525:524,guid,guide,524,https://qutip.org,https://github.com/qutip/qutip/issues/1525,2,['guid'],['guide']
Usability,"@quantshah: Simon and I had temporarily stepped back from this one at the time, because we weren't entirely confident that the physics was being handled correctly - the initial version of the PR certainly had invalid physics, and it was hard to evaluate the new stuff from that perspective. It's changed since then, and it might be ok now, but it'll be easier to re-review now we've cleared the old context from our minds. About your Choi matrices - right now, `Qobj` doesn't have an `act` method, but that could well be a useful addition. It _does_ have `Qobj.__call__` which does a similar thing in a very few cases, so we could properly beef that up, but we might want to discuss exactly what spec it should have. @MrRobot2211: I very quickly glanced through the diff of this, but there still seem to be several points where I asked for changes that haven't been changed: things like removing unnecessary calls to `np.array`, and explaining _why_ dimensions needed to be changed in some tests. Can you go back through the PR and make sure you've addressed everything? Also, since you're trying to add new functionality, please make sure you add tests of explicit, analytically known cases against the whole matrix, in addition to the properties like the dimensions (also asked above). In a super ideal world it'd be great if you could find a published reference for those tests, but if the maths is simple enough that we can verify it by hand, then showing us would be ok. It could be good practice for the rest of GSoC if you try and go through the diff yourself to spot places that might want clarifying, and fix them ahead of review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512:383,clear,cleared,383,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512,2,"['clear', 'simpl']","['cleared', 'simple']"
Usability,"@quantshah: This has always been the case, and it's part of the installation instructions in the user guide (http://qutip.org/docs/latest/installation.html#platform-independent-installation). If there's anywhere it's missing we should add it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-671444213:102,guid,guide,102,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-671444213,1,['guid'],['guide']
Usability,"@quantshah: what about if we make a PR uniforming all code in QuTiP with `black` and automatically enforce also the 79 line limit? Also, what about adding it to the guidelines for contributions?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1046#issuecomment-529485255:165,guid,guidelines,165,https://qutip.org,https://github.com/qutip/qutip/pull/1046#issuecomment-529485255,1,['guid'],['guidelines']
Usability,"@sahmed95 ok, just to be clear, are we saying merge this and close #691",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/693#issuecomment-300531039:25,clear,clear,25,https://qutip.org,https://github.com/qutip/qutip/pull/693#issuecomment-300531039,1,['clear'],['clear']
Usability,"@sahrak Thank you for reporting this. The parameters for `sesolve` changed slightly since the guide was written and the guide wasn't updated. I will make a PR to fix it shortly, but in the mean time you can run:. ```python; qutip.floquet.fsesolve(H, psi0=psi0, tlist=tlist, e_ops=[qutip.num(2)], args=args); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1663#issuecomment-927605654:94,guid,guide,94,https://qutip.org,https://github.com/qutip/qutip/issues/1663#issuecomment-927605654,2,['guid'],['guide']
Usability,"@sbisw002 All contributions to QuTiP must follow the pep8 standard. You should read https://www.python.org/dev/peps/pep-0008/, especially the section on naming conventions. I see @nathanshammah has made some specific comments along these lines, but there are too many examples to begin to comment on them. But in general, we like descriptive names for variables. One exception we have to pep8 is that we allow some use of capital letters in variable names, but only at the start, as this relates well to the corresponding mathematics. We reserve these for operators and matrices (in the mathematical sense), so for instance `H` is ok for a Hamiltonian, but `N` is not okay for an integer. `H_cell` is also fine, but `cellH` or `cell_H` is not. All caps are not to be used for anything. If you wish to abbreviate 'periodic boundary condition', then `pbc` would be ok as a local variable, but not as an attribute name, `period_bnd_cond` would be good. I am sorry if this seems a little late in the day, but this is covered in https://github.com/qutip/qutip/wiki/QuTiP-Development-Guidelines and this document https://github.com/qutip/qutip-doc/blob/master/qutip_dev_contrib.md was linked in our GSoC page. Coding standards are *very* important, it where quality begins.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1066#issuecomment-533771943:1078,Guid,Guidelines,1078,https://qutip.org,https://github.com/qutip/qutip/pull/1066#issuecomment-533771943,1,['Guid'],['Guidelines']
Usability,"@sbisw002 I'm closing this in favour of #1819 which applies my simpler fix from #1697 and also adds the necessary deprecation warnings for QuTiP 5. We should continue the development of qutip.lattice in https://github.com/qutip/qutip-lattice. As a first step, we should apply the same simple fix there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1702#issuecomment-1058039020:63,simpl,simpler,63,https://qutip.org,https://github.com/qutip/qutip/pull/1702#issuecomment-1058039020,2,['simpl'],"['simple', 'simpler']"
Usability,"@tacruc for future reference you should really create a new branch on your fork and submit that as a PR for qutip. It's okay in this case, as it is a simple change, but would cause issue if you were possibly making multiple PRs at the same time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/886#issuecomment-399055698:150,simpl,simple,150,https://qutip.org,https://github.com/qutip/qutip/pull/886#issuecomment-399055698,1,['simpl'],['simple']
Usability,"@tesla-cat this is because of the convention between how the bosonic basis and the two-level-system basis, the way ground states are set, as explained [here](http://qutip.org/docs/latest/guide/guide-states.html#qubit-two-level-systems) in the documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1294#issuecomment-646626641:187,guid,guide,187,https://qutip.org,https://github.com/qutip/qutip/issues/1294#issuecomment-646626641,2,['guid'],"['guide', 'guide-states']"
Usability,"@theodotk Thank you for the bug report. I cherry-picked your fix into this PR. Any thoughts on a simple test case we could add? Ideally we could just pass in custom m_ops in something like `test_smesolve_heterodyne` but I don't know what the custom m_ops should be, how to calculate the expected result or how to be sure the right m_ops were used.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216:97,simpl,simple,97,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216,1,['simpl'],['simple']
Usability,"@vikas-chaudhary-2802 can you add the test to this PR? it can be very simple. if you feel like it will take some time, i can merge this and you can do a separate one later. @ytdHuang thanks for the suggestion, do you think it would be better to use that as the default method? in any case, lets do that in a separate issue/PR",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519:70,simpl,simple,70,https://qutip.org,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519,1,['simpl'],['simple']
Usability,"A few comments and questions. 1. Why are file separated by function and not by datatype? So adding a new datatype will result in modification im a lot of file making support (PR evaluation) harder.; 2. `__repr__` return a very clean output in `Qobj`. `CSR`'s is quite simple. This is because data layers are never meant to be printed directly?; 3. For solver states, we mostly use Fortran ordered array, not C ordered. Will you support both?; 4. In matmul, you use `malloc`, `calloc`, `free`. It is better to use the python PyDataMem_NEW. I never had any issue, but there can be some on windows: https://github.com/numpy/numpy/issues/8253; 5. `mat_mul` can be used inplace, but no `add_csr`. ; 6. It would be good to have inplace multiplication with a scalar instead of always making a copy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648255315:268,simpl,simple,268,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648255315,1,['simpl'],['simple']
Usability,"A few people have been asking for this again recently. ; I have produced this new PR, rather than apply #396, as its a bit simpler and more flexible. It is a bit more memory consumptive, but probably a small percentage of the whole. It's also based an recent pull. . No notebook as yet, as I will wait for feedback from those who requested it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/506:123,simpl,simpler,123,https://qutip.org,https://github.com/qutip/qutip/pull/506,2,"['feedback', 'simpl']","['feedback', 'simpler']"
Usability,"A few points which came up:. - We can make the solve call very similar to `mesolve` where the user specifies a Hamiltonian, the coefficients describing the system and the size of the system as an argument dictionary. ```; system = {""N"": 100, ""emmission"": 0.5, ""loss"": 0.1}; pisolve(H, tlist, c_ops, e_ops, args=system); ```; - However this only works for Hamiltonians constructed with some specific operators. As the method is for dicke states only, the distinction between this solver and `mesolve` should be stated clearly. This is to prevent someone trying to pass a generic Hamiltonian. - Checks have to be included to make sure that the Hamiltonian and the operators specified are proper for the dicke states. - Since the user will not be concerned with the matrix M which governs the evolution `dp/dt = Mp`, we should probably find better ways to represent it and perform the dot product to generate RHS. @nonhermitian We have the M matrix as a pure dictionary of {(row, col): val}. We can write our own function for the dot product just by using this dictionary. Or, is it better to convert it into a sparse matrix and use Scipy's dot product function ? Converting from the dictionary to sparse M has some overhead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332725530:517,clear,clearly,517,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332725530,1,['clear'],['clearly']
Usability,"A great piece of work @Ericgig. This has been wanting for a long time. Such an abstraction of the ODE solver should allow for easier development of other types of solver, and make the physics clearer in the code. I should also mean that we could add in new methods for solving ODEs more easily. Thanks for taking on this massive challenge.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409#issuecomment-788726639:192,clear,clearer,192,https://qutip.org,https://github.com/qutip/qutip/pull/1409#issuecomment-788726639,1,['clear'],['clearer']
Usability,"A minor documentation issue: the link to the Bloch sphere video, at the end of the [page](http://qutip.org/docs/latest/guide/guide-bloch.html) (with latest =4.2) is broken, as [googlecode]( http://qutip.googlecode.com/svn/doc/figures/bloch_decay.mp4) changed domain (now https://code.google.com/).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799#issuecomment-466312650:119,guid,guide,119,https://qutip.org,https://github.com/qutip/qutip/issues/799#issuecomment-466312650,2,['guid'],"['guide', 'guide-bloch']"
Usability,A much simpler way to get PEP compliance.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/523:7,simpl,simpler,7,https://qutip.org,https://github.com/qutip/qutip/pull/523,1,['simpl'],['simpler']
Usability,"A representation of a quantum circuit consiting of qubit initialisation (I), controlled NOT gates (C) and measurements (M) with respect to different bases. According to [1], the transformation of a circuit to the ICM representation provides a cannonical form for an exact and fault-tolerant, error corrected circuit needed for optimization prior to final implementation on a hardware model. The algorithm consists of magic qubit initializations, gate teleportation and conditional measurements on qubits. It can be a starting point for topological descriptions of quantum cirucuits important for fault-tolerant quantum computation and can become a part of a pipeline for optimization of topological quantum computing circuits. Check out the game (MeQuanics)[http://www.mequanics.com.au] which aims to do so using crowd sourcing. Several proposals exist for circuit optimizations once we have the topological circuit model (Machine learning, monte carlo search etc) and the ICM model can be a good starting point to get to the initial topological circuit (as far as I could understand). . The algorithm can be roughly described as follows : . ```; Require: Circuit C composed from {Toffoli,CNOT,H,P,T}; Replace the Toffoli gates with their decomposition; Replace the H gates with P V P (already implemented using `resolve_gates`); Implement P V P using gate teleportation outlined in [1]; ```. The final output is a quantum circuit only using qubit initialisations, CNOT and conditional measurements/correction. Once that is complete, maybe another addition can be a conversion to the topological model and visualizations. This is a work in progress. TODO; ------; [ ] Fix code errors; [ ] Write tests; [ ] Update examples and docs. References; ----------; .. [1] arXiv:1509.03962v1 [quant-ph]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603:931,learn,learning,931,https://qutip.org,https://github.com/qutip/qutip/pull/603,1,['learn'],['learning']
Usability,"A simple example of a operator that is traceless and not a dm is the charge operator, e.g. `charge(4)`. How would we know a difference in this case without further info?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/474#issuecomment-219623485:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/issues/474#issuecomment-219623485,1,['simpl'],['simple']
Usability,"A simple line plot is produced that illustrates clearly that the pulse is piecewise constant in the timeslots; A standard Matplotlib line plot suggests that the amplitudes vary linearly throughout the timeslot, which is not the case",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/406:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/pull/406,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,A simple question about Stochastic Solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/issues/2194,1,['simpl'],['simple']
Usability,"A simple test shows that the Clenshaw method from @Vutshi does not give results consistant with the other solvers. This slipped through because the test suite was not testing this new method against random operators. ``` python; N = 20; xvec = np.linspace(-10, 10, 128); for i in range(3):; rho = rand_dm(N). Wfft = wigner(rho, xvec, xvec, method='iterative'); W = wigner(rho, xvec, xvec, method='clenshaw'). Wdiff = abs(W - Wfft); print(np.sum(abs(Wdiff))); ```. With the above code, I am getting differences on the order of one, where as the other methods all are close on the order of 1e-12 or so. I will revert back to the old iterative method until this is resolved.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/issues/526,1,['simpl'],['simple']
Usability,"A user was confused because they were on the readthedocs website, thought that was the main qutip website, and couldn't find the tutorial notebooks. I added a link to the main qutip website and the tutorials section to the landing page of the readthedocs. I also used the opportunity to update the list of admins in several places to match the admin team as listed on the qutip website. Meaning, mostly, I added @AGaliciaMartinez , myself, and @flowerthrower . Let me know in case that isn't okay and I will undo it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2439:508,undo,undo,508,https://qutip.org,https://github.com/qutip/qutip/pull/2439,1,['undo'],['undo']
Usability,"Actually it probably doesn't shake out to a single time-dependent operator like I thought it might at the start. You can still do the Taylor expansion to try (you can find a similar result for 3x3 spin matrices to the 2x2 case), but there's not going to be a cancellation I thought there might have been. Right now, QuTiP doesn't support arbitrary time-dependence in collapse operators, so if you can't find a way to write it in that form, you might have to do the integration manually yourself until we've added it - the QuTiP guide [explains how QuTiP does the integration](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642:528,guid,guide,528,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642,2,['guid'],['guide']
Usability,"Add a `Coefficient` object to encapsulate the coefficients of the QobjEvo.; `Coefficient`s replace qobjevo's codegen. Their advantages are; - Coefficient are always 'compiled'. String are compiled to cython code at initialization.; - Have cython decorator: taking the conjugate does no longer require new compilation.; - String coefficient are saved to reuse with basic pattern matching: ""cos(a*t)"" and ""cos( w1 *t )"" will use the same compiled object. This object is compiled once and kept between session.; - Cleaner compilation using `setuptools` instead of a monkey patched `pyximport`.; - `QobjEvo` is always compiled.; - `ObjeEvo` does not need to keep track of type making the code simpler. There are shims to make `Pulse` and qip tests work since they used `QobjEvo.tlist` and `QobjEvo.ops.coeff`.; @BoxiLi, the new QobjEvo can be added even if coefficient's tlist are different, but you cannot get back the tlist and the array from them. Also for _step_func_coeff, before the first time, `Coefficient` return the first value of the array, not 0 as expected in pulse.py.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1336:689,simpl,simpler,689,https://qutip.org,https://github.com/qutip/qutip/pull/1336,1,['simpl'],['simpler']
Usability,"Add a simple method onto the Qobj to calculate the purity of a quantum object, `(rho*rho).tr()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1045:6,simpl,simple,6,https://qutip.org,https://github.com/qutip/qutip/pull/1045,1,['simpl'],['simple']
Usability,Add a test for progress bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:15,progress bar,progress bar,15,https://qutip.org,https://github.com/qutip/qutip/pull/2150,1,['progress bar'],['progress bar']
Usability,Add equation in the guide for open mcsolve evolution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2373:20,guid,guide,20,https://qutip.org,https://github.com/qutip/qutip/pull/2373,1,['guid'],['guide']
Usability,Add example of `SMESolver.run_from_experiement` in the guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2479:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/pull/2479,1,['guid'],['guide']
Usability,"Add the `data.CSR` and `data.Dense` types, and begin the port of the current operations of a mixture of `fast_csr_matrix` and `CSR_Matrix` into simple ones on the new `CSR` type. This is significantly faster at initialisation and interaction between Python and Cython. Also add the base multiple dispatcher type which will be used in the future to implement data layer multiple dispatch. @qutip/data-layer-devs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296:144,simpl,simple,144,https://qutip.org,https://github.com/qutip/qutip/pull/1296,1,['simpl'],['simple']
Usability,"Added CSIGN, SWAPalpha and Berkeley gates and simplified base case of other gates",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/136:46,simpl,simplified,46,https://qutip.org,https://github.com/qutip/qutip/pull/136,1,['simpl'],['simplified']
Usability,"Added CSIGN, SWAPalpha and Berkeley gates and simplified base case of other gates.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/136:46,simpl,simplified,46,https://qutip.org,https://github.com/qutip/qutip/pull/136,1,['simpl'],['simplified']
Usability,Added MPI section in Users Guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2550:27,Guid,Guide,27,https://qutip.org,https://github.com/qutip/qutip/pull/2550,1,['Guid'],['Guide']
Usability,Addressing #993: nonlinear functions such as the Von Neumann entropy or purity of a density matrix written in the Dicke basis need to account for the identical copies of the blocks relative to non-symmetrical Dicke states. . This can be done by cycling into the blocks and applying the correct weight accounting for degeneracy (using `piqs.state_degeneracy`). . This PR also contains auxiliary functions to visualize and unpack the Dicke-basis density matrix into the full 2^N space still of collective spin but with degenerate blocks. . It uses the `purity` method proposed in #1045. . Will add info in User Guide and notebooks to highlight this features that need to be considered to correctly calculate nonlinear functions of a density matrix in the Dicke basis.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1046:609,Guid,Guide,609,https://qutip.org,https://github.com/qutip/qutip/pull/1046,1,['Guid'],['Guide']
Usability,"After you created a fork to work on #1242, a different PR (#1226) was merged into `master`. It so happens that #1242 and #1226 don't conflict so that merge succeeded, but the new changes you're now trying to make do. This is fundamentally a true merge conflict and so unfortunately there's no fancy way around it, though it could have been avoided if you'd matched the state of our `master` before beginning work here, and it would be a bit easier for you for future PRs to branch off before starting work (GitHub has [some nice material about this workflow](https://guides.github.com/introduction/flow/)). I've rebased your PR onto our `master` and fixed the resulting merge conflict for you. You should _immediately, without doing anything else_ reset your branch state to match mine, and then force-push your changes to GitHub to update the PR. To do this, do; ```bash; git remote add jakelishman https://www.github.com/jakelishman/qutip.git; git fetch jakelishman; git checkout master; git reset --hard jakelishman/Canoming-circuit-patch; git push --force; git remote remove jakelishman; ```; This will destroy anything on `master` that you may have but haven't yet pushed. You should do it anyway, because a lot of the underlying structure has changed from underneath you, and your changes aren't consistent with the current state of `circuit.py`. Please also note that the tests are failing after your modifications in (the current) 10e457e.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121:567,guid,guides,567,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121,1,['guid'],['guides']
Usability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:48,clear,clear,48,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,1,['clear'],['clear']
Usability,Ahh well then there is no more issues with this. Just waiting for the minor changes to the mcsolver tests to clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425710:109,clear,clear,109,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425710,1,['clear'],['clear']
Usability,"Ahh, you're right. I never managed to get it to work right before now, but I just tried again and managed to get `DeprecationWarning` to show up in all of `python warn.py`, direct calls from the IPython terminal and from Jupyter notebooks. I think perhaps I learned about stacklevel _after_ the last time I tried to get that to work. My reading of the docs before that had always just ended up with me assuming that somebody using a library interactively was an ""end-user"", so `FutureWarning` was appropriate. I'll change this PR when I've got time - I needed to fix up a few warning controls in tests before it was ready anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449:258,learn,learned,258,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449,1,['learn'],['learned']
Usability,"All builds pass, besides the build on Python 3.7 without Cython. I would still merge this PR and focus on that issue separately. . Now we need to update places where `nose` is mentioned, I found these in `qutip-doc`; - the [changelog](https://github.com/qutip/qutip-doc), ; - the instructions on the dependencies in the documentation [installation instructions](https://github.com/qutip/qutip-doc/blob/402ec10de7a314ba9f124ddac7514621e92496df/installation.rst), ; - and [development guidelines](https://github.com/qutip/qutip-doc/blob/2ffd6d1cc581e858674d43fe97a9297e9476a278/qutip_dev_contrib.md).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938:483,guid,guidelines,483,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938,1,['guid'],['guidelines']
Usability,"All deprecation warnings issued by numpy during the tests have now been fixed, resolving #381 ; The motivation was to try and make it more clear when and why issue #430 arises",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/434:139,clear,clear,139,https://qutip.org,https://github.com/qutip/qutip/pull/434,1,['clear'],['clear']
Usability,"All looks good to me. Thanks a lot for changing all of that - this is all clearly good stuff and should in principle be merged. We should the Linux tests again after #1381 is merged because there is Linux-specific code in the changes that needs to be tested (the tests fail for unrelated reasons at the moment). I can't see any reason why the changes here should cause any true test failures, though - it's more a formality.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648:74,clear,clearly,74,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648,1,['clear'],['clearly']
Usability,All of the individual terms in the dense version of the time-dependent BR solver are now tested and working. Now I need to write the codegen module. A sparse version is just a simple extension once the codegen is done.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/676#issuecomment-295576774:176,simpl,simple,176,https://qutip.org,https://github.com/qutip/qutip/pull/676#issuecomment-295576774,1,['simpl'],['simple']
Usability,"All open issues and PRs have now been labeled with the `code` and `physics` labels, some of them with both. I would add in the contributing to QuTiP guidelines something about this for new issues and PRs.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1130#issuecomment-560242929:149,guid,guidelines,149,https://qutip.org,https://github.com/qutip/qutip/issues/1130#issuecomment-560242929,1,['guid'],['guidelines']
Usability,"Also, I like the second visualization which is linear and not circular. It helps to clearly see different submodules. So, if you are trying this then start with that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469794023:84,clear,clearly,84,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469794023,1,['clear'],['clearly']
Usability,"Also, instead of adding a third entry to the nested list characterizing the time-dependence, I think the real and imag parts should be in the [1] list entry as a tuple. That way, all of the time-dependence is in a single list item. We may in the future want to add additional items to the list (e.g. on-off times for the time-dependent terms.). I also think that we should get some feedback from @ajgpitch and @cgranade. Chris has some experience with opencl, and he probably is bette suited for feedback than myself. . Another question would be the issue of maintainability. If, for some reason, you are unable to address bug issues or incompatibilities with future QuTiP versions, then can we support this large code submission without having authored it ourselves. For instance, the mcsolve_f90 routine has largely been non-maintained since Arne added it years ago.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-259879928:382,feedback,feedback,382,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-259879928,2,['feedback'],['feedback']
Usability,Any new progress on this? The API doc is generated successfully. Although it would be nice to have more detailed description to each functions. The rendered user guide now reads like; ![image](https://github.com/qutip/qutip/assets/12125783/e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07); with names as strings. It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians. ![image](https://github.com/qutip/qutip/assets/12125783/ad856f69-e0f2-49a2-9ab0-f88e84444373),MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2154798793:162,guid,guide,162,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2154798793,3,['guid'],"['guide', 'guide-tensor']"
Usability,"Anything we do will be made on the `dev.major` branch, where the constructor is _much_ simpler and easier to work with, which hopefully should make things rather easier for you. The dimensions objects will probably change a lot before then as well (they should in principle accept any type, it's just historical that they only accept `list`). The `Qobj` constructor is intended to allow the first argument to be passed positionally, but all others are _expected_ to be keyword-only. We'll probably start enforcing those semantics from 5.0 onwards (we need to issue deprecation warnings before we change behaviour). Answers to questions:; - For tensor products, we use the same ordering as `np.kron`. The column-stacking convention is about the conversion of operators into operator-kets when moving to the superoperator formalism.; - In theory it should recognise a suitable `dims`, but right now construction will be faster if you provide `type='super'` as well. Construction speed is hugely improved in `dev.major`. You only need to define `superrep` if you're giving us a Choi (`superrep='choi'`) or chi (`superrep='chi'`) matrix instead.; - No, it should really be any indexable quantity (requiring list is a historical artifact, not a conscious choice). The entire parsing structure of dimensions objects are going to change in 5.0 (though the list structure will still work). This should even give you more freedom, if you need it - I've got some plans for vastly improved handling of restricted-entry Hilbert spaces (basically spaces that are small embeddings into a larger space that's all 0).; - I am very strongly against accepting this (like I said above):. > Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions.; ; To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. You can see that it didn't work as intended, because they've had to add `__array_fu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:87,simpl,simpler,87,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['simpl'],['simpler']
Usability,"Apologies for another long delay. I'd be happy to hop on a video call sometime to discuss the design. I think the `__qutip_qobj__` interface is likely to remain fairly simple and be just:; ```python; def __qutip_qobj__(self, copy=True):; """""" Return a Qobj representation of this object. Parameters; ---------------; copy : {True, False}, default True; If True, a new independent Qobj should be returned. If False, a reference to an existing Qobj; may be returned. Returns; ----------; Qobj; The Qobj representation of this object.; """""" ; return qutip.Qobj(self._stuff, copy=copy); ```; and we can figure out how to make that work on our side. How that looks under the hood depends quite a bit on whether the `Data` object will grow `dims` support or not. We have another use case for `dims` on the data layer (a tensor network data backend that we're starting work on) but it is a bit of a philosophical shift in what the `Data` layer is, so we'll need to think carefully (e.g. all `Data` operations would have to keep track of `dims` which is a big change; and it's also a bit strange because the operations themselves are just 2D matrix operations, where dims are meaningless). @PhilipVinc I'm not sure if we discussed this before, but do you have some short code snippets showing how you see this Qobj support being used in user code? Apologies if I missed such examples elsewhere in the discussion already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841:168,simpl,simple,168,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841,1,['simpl'],['simple']
Usability,"Arne,. Please propose your patch in a PR on our Github. So long as it is; mathematically sound, then the context does not matter in this case. If you need any advice on how to do this, then let us know. Email me direct; if you prefer. alex.pitchford@gmail.com. Thanks. Alex. On Thu, 21 Jun 2018 at 09:31, Arne Hamann <notifications@github.com> wrote:. > I use the qutip to do some Grover simulations. having a Hilbertspace of; > Grover an an additional entangled Hilbert space. In a simpler version there; > is only one state in the entangled Space so the program automatically; > chooses dimension 1.; > And then there are allot of errors coming because of this qutip error.; > At the moment I fixed it using a patched qutip version.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/823#issuecomment-399020891>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7QOoYa2vq7kgVYNcZdxB3vxO3FJnks5t-1n4gaJpZM4SNkIK>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399033847:483,simpl,simpler,483,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399033847,1,['simpl'],['simpler']
Usability,"As I mentioned in #853, I wonder if it's possible to completely encapsulate any use of sparse matrices to allow for different implementations, assuming a common interface. This would support both int32 and int64, as well as any other specialized implementation anyone might want to use. Obviously, this falls into the ""quite a bit of work"" category, assuming it's possible at all. Personally, I also want to clarify that in #853, I wasn't thinking clearly when I titled it ""moderately big tensor products"" (obviously, it was an insanely large product). I don't actually foresee needing anything bigger than int32. Is there a CPU-time penalty for switching to int64? If so, I would consider that more of a downside than an increase in memory usage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-382528173:448,clear,clearly,448,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-382528173,1,['clear'],['clearly']
Usability,"As a comparison, here's the output of `matrix_histogram` from [the example in the _current_ build of the docs](https://qutip.org/docs/latest/guide/guide-visualization.html#visualizing-operators) (QuTiP 4.6.2):. ![QuTiP 4.6.2 guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970595-06e9dc00-d386-11eb-9905-ad65f9254c0a.png). compared to the version produced by this PR:. ![this PR guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970672-19641580-d386-11eb-973b-39423e53637c.png). The original certainly isn't great, but I think its defaults have produced a somewhat better result in this case. It might be worth having a look at some of the defaults here, particularly with regards to the z-axis tic labelling. While we're at it, the rainbow colour scheme is not a good choice - it'd be much better to use a diverging colourmap, and preferably something a bit more perceptually uniform. ---. I'm not completely sold on the idea that our functions should take so many different optional arguments. We return the figure and axes instances, which means anything the user can do anything that's basic matplotlib commands - we don't need to reimplement their interface. Things like the figure size, azimuth and elevation are particular examples of this - it's very simple to set them using matplotlib's interface, and we don't really provide any added benefit by having the options here. Another is the truncated colourbars: why not only accept a `cmap` argument, and allow the user to pass anything that `matplotlib.pyplot.plot` would accept? Then the interface to our function is much simplified, and the user has as much (more, even) control over the colouring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912:141,guid,guide,141,https://qutip.org,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912,6,"['guid', 'simpl']","['guide', 'guide-visualization', 'guide-visualization-', 'simple', 'simplified']"
Usability,"As a minor note, as of qutip 4.5 you can achieve the tensor product basis state creation simply with; ```python; qutip.basis([2]*n_qubits, [0]*n_qubits); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600614619:89,simpl,simply,89,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600614619,1,['simpl'],['simply']
Usability,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:1531,simpl,simply,1531,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,1,['simpl'],['simply']
Usability,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:101,feedback,feedback,101,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['feedback'],['feedback']
Usability,"As it stands now, all of the steady state solvers treat the solution vector as a dense array. However, often times the steady state density matrix is sparse and therefore the current implementation is not optimal. As of SciPy 0.14, the sparse LU solver can now access the underlying L and U sparse matrices. Therefore, we should be able to do some kind of sparse forward and backward substitution to get the solution vector. In particular, since the RHS vector has only a single nonzero entry, the substitutions are greatly simplified,and we could also see a speed up.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/163:524,simpl,simplified,524,https://qutip.org,https://github.com/qutip/qutip/issues/163,1,['simpl'],['simplified']
Usability,"As mentioned in the commit comment, this latest change was simply a return to something that works. How it got broken is a mystery.; Regarding this pull request as a whole, the changes are just small fixes to some feature that has been in the library from the beginning. I have tried to tidy it up a few times, but I appreciated that more work is required. This I would prefer to do in some future pull request.; To be clear, the default behaviour does not write anything to the file system.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/313#issuecomment-73526258:59,simpl,simply,59,https://qutip.org,https://github.com/qutip/qutip/pull/313#issuecomment-73526258,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"As this was a simple bug fix and all tested passed, then merging now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/563#issuecomment-263523282:14,simpl,simple,14,https://qutip.org,https://github.com/qutip/qutip/pull/563#issuecomment-263523282,1,['simpl'],['simple']
Usability,Automate or simplify documentation release,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1533:12,simpl,simplify,12,https://qutip.org,https://github.com/qutip/qutip/issues/1533,1,['simpl'],['simplify']
Usability,"Awesome, I'll do my best!. > Note that this would be a PR againt the `dev.major` branch. Does this entail any extra steps not encompassed in the contributing guidelines, or is it just a matter of branching from and PRing to `dev.major` instead of `master`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1893#issuecomment-1147241501:158,guid,guidelines,158,https://qutip.org,https://github.com/qutip/qutip/issues/1893#issuecomment-1147241501,1,['guid'],['guidelines']
Usability,BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR already adds the docs but under qutip/nonmarkov/bofin/docs -- this allows the preservation of the original BoFiN commits) (#1724); - [x] Convert the BoFiN examples into QuTiP example notebooks (https://github.com/qutip/qutip-notebooks/pull/132/).; - [ ] Add MKL support to the dynamics solver. **Possible future work (i.e. look like great ideas but might never happen)**; - [ ] Use hermiticity relation from Schinabeck's PhD to half the number of ADOs stored in the fermionic bath.; - [ ] Possibly add support for time-dependent bath properties (e.g. altering the chemical potential of a Fermionic bath).; - [ ] Option to include time-dependent exponent coupling operators (Q); - [ ] Option to include time-dependent exponent coefficients (c_k's and v_k's); - [ ] Possibly add a means for automatically generating bath exponents for a given spectral density function. **Related issues or PRs**; None currently. **Changelog**; Imported BoFiN (https://github.com/tehruhn/bofin/) into QuTiP and replaced the HEOM solver with a compatibil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601:1986,guid,guide,1986,https://qutip.org,https://github.com/qutip/qutip/pull/1601,1,['guid'],['guide']
Usability,"Building the documentation guide, dynamics-monte takes minutes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1534:27,guid,guide,27,https://qutip.org,https://github.com/qutip/qutip/issues/1534,1,['guid'],['guide']
Usability,"Building the documentation guide, dynamics-monte takes minutes; ```; Reading sources... [ 41%] guide/dynamics/dynamics-monte; ```; as well parfor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1534:27,guid,guide,27,https://qutip.org,https://github.com/qutip/qutip/issues/1534,2,['guid'],['guide']
Usability,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:1673,learn,learning,1673,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,1,['learn'],['learning']
Usability,"Bumps [idna](https://github.com/kjd/idna) from 3.4 to 3.7.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/releases"">idna's releases</a>.</em></p>; <blockquote>; <h2>v3.7</h2>; <h2>What's Changed</h2>; <ul>; <li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/kjd/idna/compare/v3.6...v3.7"">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/blob/master/HISTORY.rst"">idna's changelog</a>.</em></p>; <blockquote>; <p>3.7 (2024-04-11); ++++++++++++++++</p>; <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:419,Guid,Guido,419,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['Guid'],['Guido']
Usability,"Can you fully show your build process, and did this work with a previous version of QuTiP? It builds fine for me from pip sdist on all major platforms with a simple; ```; pip install qutip; ```; and the sdist of 4.5.2 seems to be missing the same file. Officially we don't support building with OpenMP from pip sdist (only git), but to be fair, it should have worked. In the interests of better semantics, can you change the new line in `MANIFEST.in` to; ```; graft qutip/**/src; ```; Technically there's only the one file that doesn't get tagged in (I hope), but logically the principle is that anything in a `src` directory should be distributed in the `sdist`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343:158,simpl,simple,158,https://qutip.org,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343,1,['simpl'],['simple']
Usability,"Changes to the test:; ```; case_1= repr(QobjEvo([qeye(3), lambda t: t])); expected_repr_1= 'QobjEvo: dims=[[3], [3]], shape=(3, 3), type=oper, superrep=None, isconstant=False, num_elements=1'; assert case_1 == expected_repr_1. case_2= repr(QobjEvo(qeye(2))); expected_repr_2= 'QobjEvo: dims=[[2], [2]], shape=(2, 2), type=oper, superrep=None, isconstant=True, num_elements=1'; assert case_2 == expected_repr_2; ; case_3= repr(QobjEvo(basis(5, 2))); expected_repr_3= 'QobjEvo: dims=[[5], [1]], shape=(5, 1), type=ket, superrep=None, isconstant=True, num_elements=1'; assert case_3 == expected_repr_3. X = sigmax(); S = spre(X) * spost(X.dag()); case_4= repr(QobjEvo(to_choi(S))); expected_repr_4= 'QobjEvo: dims=[[[2], [2]], [[2], [2]]], shape=(4, 4), type=super, superrep=choi, isconstant=True, num_elements=1'; assert case_4 == expected_repr_4. case_5= repr(QobjEvo([[qeye(4), lambda t: t], [qeye(4), lambda t: t]], compress=False)); expected_repr_5= 'QobjEvo: dims=[[4], [4]], shape=(4, 4), type=oper, superrep=None, isconstant=False, num_elements=2'; assert case_5 == expected_repr_5; ```. Changes to the `cython` code have also been undone. @Ericgig @AGaliciaMartinez Kindly let me know if there are any more changes to be done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308:1137,undo,undone,1137,https://qutip.org,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308,1,['undo'],['undone']
Usability,"Clarification of some variable naming to attempt to link with literature and also be usable without having to read the papers.; Switch to a class module. In line with recent work from @arnelg ; Moved to nonmarkov folder, as this is a non-Markovian approx method. Old file remains with deprecated function, just in case anyone was using it. This now links to the new instance method.; Many efficiency improvements (now up to 10x faster). Test added. . Will provide a notebook example soon. Then some documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455:85,usab,usable,85,https://qutip.org,https://github.com/qutip/qutip/pull/455,1,['usab'],['usable']
Usability,Clarification of user's guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1770:24,guid,guide,24,https://qutip.org,https://github.com/qutip/qutip/issues/1770,1,['guid'],['guide']
Usability,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1815:427,guid,guide,427,https://qutip.org,https://github.com/qutip/qutip/issues/1815,1,['guid'],['guide']
Usability,"Consider the following code:. ```; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(); b.show(); ```. When run in a Jupyter notebook, as per the tutorial on http://qutip.org/docs/latest/guide/guide-bloch.html, the Bloch sphere is immediately displayed in the cell output. However, nothing is displayed (no matplotlib window opens) when this code is run as a standalone script from the terminal, or even in IPython. For this, an additional call to `plt.show()` is required. I understand how this behaviour could be useful when moving code that has been developed in a notebook into a standalone script, as `plt.show()` is a blocking command. However, I still see this as inconsistent as we get distinctly different results depending on where the code is being run. If this is indeed intentional behaviour, might I suggest a note in the tutorial/API documentation? At present, there is no way to tell that this is what happens and if this is consistent. (It is possible that this is specific to my OS/environment, so I can provide those details if necessary)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1182:200,guid,guide,200,https://qutip.org,https://github.com/qutip/qutip/issues/1182,2,['guid'],"['guide', 'guide-bloch']"
Usability,"Consider the following example:; ~~~; >>> import qutip; >>> from qutip.operators import *; >>> import numpy as np; >>> ket = (qutip.tensor(qutip.ket('0'), qutip.ket('0')) - 1j * qutip.tensor(qutip.ket('1'), qutip.ket('1')))/np.sqrt(2); >>> rho = qutip.ket2dm(ket); >>> H = qutip.tensor(sigmaz(), identity(2)) + qutip.tensor(identity(2), sigmaz()); >>> c_ops = [qutip.tensor(sigmam(), identity(2)), qutip.tensor(identity(2), sigmam())]; >>> L = qutip.superoperator.liouvillian(H, c_ops=c_ops); ~~~. Now, it seems very sensible to want to apply the superoperator to the density matrix via a simple product. However, this fails:; ~~~; >>> L * rho; Traceback (most recent call last):; File ""<ipython-input-50-c0fe3dea3c39>"", line 1, in <module>; L * rho; File ""/Users/goerz/anaconda3/lib/python3.5/site-packages/qutip/qobj.py"", line 515, in __mul__; raise TypeError(""Incompatible Qobj shapes""); TypeError: Incompatible Qobj shapes; ~~~. The only way to do it seems to be:. ~~~; >>> qutip.vector_to_operator(L * qutip.operator_to_vector(rho)); Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; Qobj data =; [[-1.0+0.j 0.0+0.j 0.0+0.j 2.0-0.5j]; [ 0.0+0.j 0.5+0.j 0.0+0.j 0.0+0.j ]; [ 0.0+0.j 0.0+0.j 0.5+0.j 0.0+0.j ]; [ 2.0+0.5j 0.0+0.j 0.0+0.j 0.0+0.j ]]; ~~~. I would argue that the product `L * rho` should do this kind of conversion internally instead of throwing an exception. It seems to me the intention of `L * rho` is completely unambiguous, but maybe I'm missing something?. Having the product work out of the box means that I can write a simple propagation routine as `(A * dt).expm() * state` and it would work independent of whether (A, state) are a (Hamiltonian, vector) or a (Liouvillian, density matrix). Currently, I have to catch the different cases and handle them separately.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/939:589,simpl,simple,589,https://qutip.org,https://github.com/qutip/qutip/issues/939,2,['simpl'],['simple']
Usability,"Continuing the work of #1164 - this is part two of many more to come, depending on how long I can keep doing this! Of particular note is the first commit in this PR, which registers `pytest.mark.slow` with `pytest` to stop it warning about an unknown mark in use. There are several additional comments and explanations in the expanded commit messages, where I've tried to explain a little bit about bugs I found and reasons for swapping over to certain libraries (e.g. for temporary file handling). I'm in part opening a new PR now so that I can see if the CodeClimate tests are passing. I shouldn't have many pep8 issues because I have a tool to check, but I don't have CodeClimate working locally for things like the complexity (if it even checks them for tests...). I've been really rather aggressively using the parametrisation that `pytest` offers for fixtures, which is cutting out an awful lot of code duplication, and hopefully making it a bit clearer when things are exactly the same. One common theme I'm finding when I'm running these tests is that there's an awful lot of warnings caused by `pyximport`, a part of `Cython`, which is using the Python 2 era `imp` instead of the newer `importlib`. I'm not sure there's anything we can or should do about this, though.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181:952,clear,clearer,952,https://qutip.org,https://github.com/qutip/qutip/pull/1181,1,['clear'],['clearer']
Usability,Control amplitudes are now cleared when initialize_controls is called,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/281:27,clear,cleared,27,https://qutip.org,https://github.com/qutip/qutip/pull/281,1,['clear'],['cleared']
Usability,Correct typo in guide-states.rst,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1567:16,guid,guide-states,16,https://qutip.org,https://github.com/qutip/qutip/pull/1567,1,['guid'],['guide-states']
Usability,"Could you send the example?; If it's constant, I am surprised that you cannot get under one minute after converting to csr. Looking back at the code and it's clearly optimised for dense. ; `from_eigbasis` does something like `Dense @ CSR @ Dense.dag()`, since we don't have `Dense @ CSR` it convert to dense representation. It would work better with anything but CSR...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2530#issuecomment-2400673404:158,clear,clearly,158,https://qutip.org,https://github.com/qutip/qutip/issues/2530#issuecomment-2400673404,1,['clear'],['clearly']
Usability,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:245,simpl,simple,245,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:325,progress bar,progress bar,325,https://qutip.org,https://github.com/qutip/qutip/issues/1571,1,['progress bar'],['progress bar']
Usability,"Currently, `Qobj` has several attributes which are somewhat expensive to compute:; - `type`; - `isherm`; - `istp`; - `iscp`; - `ishp` (added in #452). Of these, `type` and `isherm` are cached by `Qobj._type` and `Qobj._isherm`, respectively. These should be unified, so that the other three are also cached properly. Moreover, we should add unit tests to make sure that this caching is properly invalidated under at least some reasonably common manipulations. For instance, with the caching of `type`, it can sometimes fail in unexpected ways to build an object up then redefine its `dims`:. ``` python; >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type). >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> print(J.type); >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type); ```. The first of these two snippets correctly prints `super`, while the extra `print(J.type)` in the second snippet causes it to cache `type` and print `oper` twice. An experienced user can of course invalidate the cache with `J._type = None`, but that is somewhat counter-intuitive.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/453:1261,intuit,intuitive,1261,https://qutip.org,https://github.com/qutip/qutip/issues/453,1,['intuit'],['intuitive']
Usability,"Currently, many `Qobj` operations are tagged as ""tidied up"" operations, which means that if the global option `auto_tidyup` is set to `True` (its default), then small values (< 1e-15) are truncated from the output matrices. This generally ends up with ""neater"" looking matrices when output; there are far fewer numbers like `1 + 4.516584e-17j` reported, when that's basically just `1`. There are, however, a couple of problems because of this. The first is speed; after every (very simple)_ operation, such as `matmul` or `add`, the tidier runs on the matrix. This typically has `O(nnz)` complexity for sparse matrices, and `O(n * n)` complexity for a dense square matrix with `n` rows. This adds very significant overhead on to simple operations. Second is numerical precision. By dropping small terms, we are effectively turning numerical imprecision into a ""feature"" as opposed to a bug. Because QuTiP 5 uses the new data-layer to do most of its operations, rather than constructing intermediary `Qobj` instances, many mathematical operations will not give the same result if the data layer is used directly compared to if `Qobj` is used at every step. For example, let's say we have three random `Qobj`:; ```python; a, b, c = [qutip.rand_herm(5) for _ in [None]*3]; ```; Now, in general,; ```python; a + b + c != qutip.Qobj(a.data + b.data + c.data); ```; because `a + b + c` will invoke the `tidyup` code twice, whereas the right-hand side will not invoke it at all. This means that despite the fact that `Qobj.__add__` uses the data-layer addition underneath, there will be numerical differences using the QuTiP default settings. I suspect these sort of problems are behind the recent test instabilities on `dev.major` with regards to tolerances. ----. My vote is for a removal of `auto_tidyup`, or at the very least, changing the default value of the option to `False`. We still want nice values for display, so perhaps we could consider having an option to produce a tidied up copy when callin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349:482,simpl,simple,482,https://qutip.org,https://github.com/qutip/qutip/issues/1349,2,['simpl'],['simple']
Usability,"Currently, running `make html` produces a `_build/html` directory that is 50MB large. This causes problems with the qutip/qutip.github.io repository, because currently part of our deployment process involves copying this directory in a new folder in this repo every time we do a minor release. The `docs` folder of the website is already 239MB (and `downloads` is another `154M`, but that's a separate problem - we need to start releasing the PDF documentation in GitHub Releases from this repo and hot-linking to fix that), which is already somewhat beyond ""reasonable"" for a website. There are two main problems causing this right now:; 1. we repackage 13MB of static assets every time we rebuild. Some of these are sensible (we _should_ repackage our styles), but we have 9MB of webfonts (we could link to Google's webfonts CDN) and another 0.5MB of jquery and underscore JavaScript libraries that we could also use versioned hotlinks to.; 2. certain images (e.g. `guide-visualization-6.pdf`) are generated as ultra-high resolution PDFs, which takes up a lot of space (4.6MB for that particular one, though it's the worst offender) and also makes a PDF that can choke some of the weaker PDF readers out there. Both of these are quite fixable I think, but may require us patching/intercepting the output of Sphinx. This can be sensibly done within the `Makefile`, but it's a very nontrivial task.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1539:968,guid,guide-visualization-,968,https://qutip.org,https://github.com/qutip/qutip/issues/1539,1,['guid'],['guide-visualization-']
Usability,"Currently, the issue template reads (for fearure requests):. **Is your feature request related to a problem? Please describe.**; A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]. **Describe the solution you'd like**; A clear and concise description of what you want to happen. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here. Similarly, for bug reports, one finds:. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; from qutip import identity; print(identity(2)); ```; The terminal out put is; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; A clear and concise description of what you expected to happen. **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. **Additional context**; Add any other context about the problem here. -------------; The slight hiccup I find with these great templates introduced by @BoxiLi, especially in the first case above, is that many sub-titles need to be deleted by the user and are not uniform in the end. Something more standard could be achieved by clearly stating what lines should be removed by the user and are just explanations, and what are to be kept in the structure. Sometimes simply rewording the titles could help. For example:; From; ```; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; ```; To something like; ```; **Feature Request Description**; +++ remove this line and the text example below; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; +++ remove ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1266:131,clear,clear,131,https://qutip.org,https://github.com/qutip/qutip/issues/1266,5,['clear'],['clear']
Usability,"Dear @HtPsi , I ran your example code and I got the results as,. ```; >>> import matplotlib.pyplot as plt; >>> import numpy as np; >>> from qutip import *; >>> delta=0.2*2*np.pi;; >>> eps0=1.0*2*np.pi;; >>> A=2.5*2*np.pi;; >>> omega=1.0*2*np.pi;; >>> H0=-delta/2.0*sigmax()-eps0/2.0*sigmaz(); >>> H1=A/2.0*sigmaz(); >>> args={'w':omega}; >>> H=[H0,[H1,'sin(w*t)']]; >>> T=2*np.pi/omega; >>> f_modes_0, f_energies = floquet_modes(H, T, args); >>> print(f_modes_0, f_energies); [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[ 0.72964231+0.j ]; [-0.39993748+0.55468199j]], Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[0.39993748+0.55468199j]; [0.72964231+0.j ]]] [-2.83131211 2.83131211]; ```; So it is definitely not an issue of the source code. I advise that you try to install the linux box for windows from the simple instructions for Windows 10 : https://docs.microsoft.com/en-us/windows/wsl/install-win10. Then, you can just install QuTiP again like a standard Linux user and run the floquet solver directly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854#issuecomment-392535672:877,simpl,simple,877,https://qutip.org,https://github.com/qutip/qutip/issues/854#issuecomment-392535672,1,['simpl'],['simple']
Usability,"Dear @bencbartlett, thanks for implementing all the changes. If you agree that a class-based implementation is better then you can go ahead and combine the two main functions into a class and we can get this merged soon. . However, let us wait for a day to get some feedback from @nonhermitian and @ajgpitch on this. Otherwise, I am in favor of having a cleaner class-based implementation of your module.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-385944128:266,feedback,feedback,266,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-385944128,1,['feedback'],['feedback']
Usability,"Dear Ahmed,. One issue is the way you are sending c_ops to mesolve. It should be a list; of separate operators, like; c_ops=[cmath.sqrt(gamma_phi/2)*sz, cmath.sqrt(gamma_minus)*sm]. not sure if this fixes your issue. On Wed, Jan 20, 2021 at 12:12 AM Ahmed Malik <notifications@github.com>; wrote:. > This code produces an animation of the Bloch sphere vector evolution. I; > have implemented a rotating frame approximation as defined by H. The goal; > is to model T1 and T2 decay. I am still experimenting with different; > gamma_phi and gamma_minus values, but right now they're big enough to have; > a visible effect over the 10^-7 time scale that's being plotted. Right now,; > I am only plotting state_z_plus so I can focus on the T1 decay from 1 to; > -1. However, as the animation and graph indicate, it seems to stop short of; > -1 and I don't see why that should be happening. I appreciate any feedback.; >; > %matplotlib inline; > import matplotlib.pyplot as plt; > import numpy as np; > import qutip as q; > import cmath; > import matplotlib as mpl; > from mpl_toolkits.mplot3d import Axes3D; >; > rc_dict = {; > ""figure.subplot.bottom"": 0.11,; > ""figure.subplot.hspace"": 0.2,; > ""figure.subplot.left"": 0.125,; > ""figure.subplot.right"": 0.9,; > ""figure.subplot.top"": 0.88,; > ""figure.subplot.wspace"": 0.2,; > ""figure.figsize"":(10,10/1.61),; > ""axes.grid"": True,; > ""text.usetex"": True,; > ""grid.linestyle"": "":"",; > ""grid.color"": ""black"", #; > ""legend.fontsize"": 20,; > ""lines.linewidth"": 2.5,; > ""axes.linewidth"": 1.5,; > ""font.family"": [""serif""],; > ""font.sans-serif"": ""Times New Roman Bold"",; > ""font.size"":26,; > }; > plt.rcParams.update(rc_dict); >; > qutip_options = q.Odeoptions(; > store_states=True,; > nsteps=20000000; > ); > si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); > sp, sm=q.sigmap(), q.sigmam(); > state_z_plus=q.basis(2,0); > state_z_minus=q.basis(2,1); > state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); > state_x_minus=1.0/cmath.sqrt(2)* (q",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937:902,feedback,feedback,902,https://qutip.org,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937,1,['feedback'],['feedback']
Usability,"Dear qutip developers,. In the documentation of version 4.5 the c_ops argument is said to support callback functions, however they are not implemented in that version and as far as I can tell neither in the current branch. It would be nice to have this feature added to allow for arbitrary time-dependent Lindbladians to be implemented. There are cases where Lindbladians cannot simply be described as the product of a time-dependent scalar and a time-independent Lindbladian, this is where the callback becomes useful. I envisage a single callback passed to c_ops as being useful, where the user has to manually add multiple decoherence channels. This way, arbitrary data can be passed through the args parameter of the callback to build the operators at a given time step. I believe this would also allow channel cross-correlations to be implemented too. I have hacked my local copy of qutip 4.5 to check this can in principle be done with mesolve, and it has worked. Here is a link to a patch file that shows the changes I made to get this working:; https://pastebin.com/iZCgBbNQ. I am happy to add this functionality properly to a clone and make a pull request.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1254:379,simpl,simply,379,https://qutip.org,https://github.com/qutip/qutip/issues/1254,1,['simpl'],['simply']
Usability,Description; Fixes TypeError: 'Axes3D' object is not iterable when running the code from the tutorial. Related issues or PRs; #799 . Changelog; Fixed runtime error in http://qutip.org/docs/latest/guide/guide-bloch.html#generating-images-for-animation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558:196,guid,guide,196,https://qutip.org,https://github.com/qutip/qutip/pull/1558,2,['guid'],"['guide', 'guide-bloch']"
Usability,Details of QuTiP user's guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759:24,guid,guide,24,https://qutip.org,https://github.com/qutip/qutip/issues/1759,1,['guid'],['guide']
Usability,"Do you get the same behaviour with QuTiP 4.5.0 in the same environment? The offending parts of `qutip/__init__.py` have been there since then, so it shouldn't be new in 4.5.2 at least. I can't reproduce the error unless `pyximport.install()` has already been run before QuTiP is imported (e.g. if I do `import pyximport; pyximport.install(); import qutip` or `importlib.reload(qutip)`). We have `qutip/__init__.py` organised so that we don't enable `pyximport` until after we've done the test for `qutip.cy.openmp.parfuncs`: first we do. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L100-L105. and only after that do we. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L124-L126. In your error it's trying to build `qutip.cy.openmp.parfuncs`, and the only line that ever attempts to import that (in Python space) is line 101 above in `__init__`. It can only attempt to Cythonize files if `pyximport` is activated, but `qutip` doesn't activate that til a few lines later. It's certainly still a bug that this error appears if you've manually activated `pyximport` before (which would definitely cause it), but I'm struggling to find any other reason that the error could appear. We're looking to simplify the handling of OpenMP in a later version, and this buggy check is certainly a good reason to expedite that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290:1292,simpl,simplify,1292,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290,1,['simpl'],['simplify']
Usability,Do you have time to add some of the documentation for krylovsolve to the QuTiP documentation? Converting the example Jupyter notebook and blog post to a guide (under `doc/guide/` in the qutip repository) might be one sensible approach.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668#issuecomment-1097168085:153,guid,guide,153,https://qutip.org,https://github.com/qutip/qutip/issues/1668#issuecomment-1097168085,2,['guid'],['guide']
Usability,Documentation for progress bars,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1517:18,progress bar,progress bars,18,https://qutip.org,https://github.com/qutip/qutip/issues/1517,1,['progress bar'],['progress bars']
Usability,"Documentation has been requested about using the progress bars in qutip/qutip#444.; @cgranade maybe you could look at this, as you did quite a lot of work on the web progress bar?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1517:49,progress bar,progress bars,49,https://qutip.org,https://github.com/qutip/qutip/issues/1517,2,['progress bar'],"['progress bar', 'progress bars']"
Usability,"Doing some further testing of `type='super'` `Qobj`s, I ran into a simple test case in which operator multiplication fails to be associative. ```; >>> rho_psi = operator_to_vector(Qobj(np.diag(np.array([0.9, 0.1], dtype=complex))))>>> E_psi = rho_psi.dag(); >>> S = to_super(sigmax()); >>> (E_psi * S) * rho_psi; Traceback (most recent call last):; File ""<ipython-input-22-90cbfac2a43e>"", line 1, in <module>; (E_psi * S) * rho_psi; File ""qutip/qobj.py"", line 416, in __mul__; raise TypeError(""Incompatible Qobj shapes""); TypeError: Incompatible Qobj shapes. >>> E_psi * (S * rho_psi); Quantum object: dims = [[1], [1]], shape = [1, 1], type = oper, isherm = True; Qobj data =; [[ 0.18]]; >>> E_psi; Quantum object: dims = [[1], [[2], [2]]], shape = [1, 4], type = bra; Qobj data =; [[ 0.9 0. 0. 0.1]]; >>> rho_psi; Quantum object: dims = [[[2], [2]], [1]], shape = [4, 1], type = operator-vector; Qobj data =; [[ 0.9]; [ 0. ]; [ 0. ]; [ 0.1]]; >>> S; Quantum object: dims = [[[2], [2]], [[2], [2]]], shape = [4, 4], type = super, isherm = True; Qobj data =; [[ 0. 0. 0. 1.]; [ 0. 0. 1. 0.]; [ 0. 1. 0. 0.]; [ 1. 0. 0. 0.]]; ```. I'm not sure why this is happening yet, but I'll keep looking.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/96:67,simpl,simple,67,https://qutip.org,https://github.com/qutip/qutip/issues/96,1,['simpl'],['simple']
Usability,"Don't overthink anything in lattice, it was rough to get anything usable from that GSoC. We only checked that the functions worked, but were lenient about the style and code-structure.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1313#issuecomment-655156522:66,usab,usable,66,https://qutip.org,https://github.com/qutip/qutip/pull/1313#issuecomment-655156522,1,['usab'],['usable']
Usability,Dynamics section of user's guide needs an introduction,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1774:27,guid,guide,27,https://qutip.org,https://github.com/qutip/qutip/issues/1774,1,['guid'],['guide']
Usability,ENH: Ensure PEP8 style guidelines are applied in docstrings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1527:23,guid,guidelines,23,https://qutip.org,https://github.com/qutip/qutip/issues/1527,1,['guid'],['guidelines']
Usability,ENH: Simplified & optimized mcsolve codegen,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/541:5,Simpl,Simplified,5,https://qutip.org,https://github.com/qutip/qutip/pull/541,1,['Simpl'],['Simplified']
Usability,ENH: Simplify Compiler flags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/308:5,Simpl,Simplify,5,https://qutip.org,https://github.com/qutip/qutip/pull/308,1,['Simpl'],['Simplify']
Usability,"Early thought:. The `solver.add_feedback` approach doesn't look too bad, but it does seem a bit odd because on does to specify the state parameters when constructing the operators that the define the system -- i.e. H, c_ops, etc. Could we not expose the feedback on the QobjEvo itself so that users can then do:. ```python; H = QobjEvo([op, lambda t, ket: bra @ ket], feedback={""ket"": ""qobj""}); ...; ```. or; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); H.add_feedback(ket=""qobj""); ...; ```. or even; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); solver = Solver(...); solver.rhs.add_feedback(ket=""qobj""); ```. Thoughts?. It will get a bit trickier for the feedback that is less easily available from the state, but perhaps solvers can just check whether the ops they're using need the special feedback?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538:254,feedback,feedback,254,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538,4,['feedback'],['feedback']
Usability,Ensure feedback work for all trajectories,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2424:7,feedback,feedback,7,https://qutip.org,https://github.com/qutip/qutip/pull/2424,1,['feedback'],['feedback']
Usability,Ensure progress bars don't break on too many update,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2374:7,progress bar,progress bars,7,https://qutip.org,https://github.com/qutip/qutip/pull/2374,1,['progress bar'],['progress bars']
Usability,Error from brmesolve() when trying to run code from User Guide examples,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223:57,Guid,Guide,57,https://qutip.org,https://github.com/qutip/qutip/issues/1223,1,['Guid'],['Guide']
Usability,"Every `Qobj` created by qutip have `dims[0]` and `dims[1]` being list. `dims=[2, 2]` is an error that we should catch. The main issue is that there is no clear documentation or tests that clearly says what is a valid dims format. . There are some strange dimension that are produced by our function that would raise an error with `np.stack` like; `tensor(operator_to_vector(oper), oper)` but I don't think we should accept these kind of `Qobj` in the first place, so I am fine failing there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366:154,clear,clear,154,https://qutip.org,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366,2,['clear'],"['clear', 'clearly']"
Usability,"Every time you open a new terminal, you will need to activate the conda environment by `conda activate qutip-env`. QuTiP is only installed in this environment. If you are interested, you could check https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html for details.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736060302:251,guid,guide,251,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736060302,1,['guid'],['guide']
Usability,"Everything else works correctly the issue appears when going to high dimensions only, 8 to be clear. I tried myself on other environments and as long as scipy is changed the instability in 8 dimensions disappears, I do not imagine what type of error can appear only in big dimensions and in a specific scipy version other than a numeric stability in the scipy version itself. Do you have any guess?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-817212665:94,clear,clear,94,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-817212665,1,['clear'],['clear']
Usability,"Example implementation of `Qobj(thing)` with caveat noted below:; ```python; # qq.py; """""" A quick experiment with a Qobj creation API. """""". import qutip; import qutip.core.data. class NetketThing:; """""" An object with a __qutip_qobj__ method. """"""; def __init__(self, stuff):; self._stuff = stuff. def __qutip_qobj__(self, copy=True):; return qutip.Qobj(self._stuff, copy=copy). def _has_qutip_qobj_method(arg):; return getattr(arg, ""__qutip_qobj__"", None) is not None. def _call_qutip_qobj(arg, shape, copy=True):; # Note 1: shape argument intentionally ignored here -- arg should already; # know its dims and shape (possible a sanity check would be good); # Note 2: unfortunately, the .data object does not know the dims of; # of the Qobj, so the dims are lost. :/; return arg.__qutip_qobj__(copy=True).data. qutip.core.data.create.add_creators([; (_has_qutip_qobj_method, _call_qutip_qobj, 10),; ]); ```; Example usage:; ```python; # try_qq.py; """""" Trying out the experiment. """""". import qutip; import qq. nk = qq.NetketThing([0, 2]); q = qutip.Qobj(nk); qn = q.norm(); print(q); print(qn); ```; Explanation:; * `qutip.core.data.create` is the new Qobj data layer creation dispatcher. It's already called by `Qobj.__init__` after a few hardwired cases.; * We register a creator (i.e. a pair of functions) with priority 10. The first function checks whether `__qutip_qobj__` exists and the second function calls it if it does. Caveat:; * The creator provides no way to retrieve the `dims` from `arg` if the `arg` already knows what the `dims` should be. I can see a lot of uses for this so I propose we fix this part now regardless. Bonus:; * Adding this as a default creator gives us a good way to keep the creator list short while still supporting simple conversion of many objects to Qobjs in a flexible way. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732:1750,simpl,simple,1750,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732,1,['simpl'],['simple']
Usability,"Finally, `Qobj` can use any backing data store. This fairly small and simple PR is effectively the culmination of all the work on `dev.major` over the last few months, and effectively is just like flicking a switch to turn on all the capabilities that we've built up through #1282, #1296, #1332, #1338 and #1341. There is still a lot of work to be done, but I'm trying to transition to smaller, easier-to-check PRs to make review easier. Possibly incomplete to do list:; - write a proper `data.create`; - possibly add the dispatchers in as `data.Data` mathematical methods (e.g. `__matmul__`); - add options for controlling default output types from the dispatchers; - tests for `Qobj` with both types; - tests for creation and property routines of the data layer; - tests for the dispatch operation; - tests for conversion operations; - more specialisations to be written for `Dense` and `CSR`/`Dense`; - more ergonomic selection of _method_, not just output type (for example, you should be able to specify you want the `Dense` specialisation of `eigs` even if you pass it a `CSR`); - more ergonomic dispatchers for matrix creation (e.g. how exactly will `qutip.basis` function, and how will users add specialisations?); - documentation, both user-facing and developer-facing; - fix algorithms in `add_csr` and `matmul_csr` to use `csr.Accumulator` (should provide a speedup and remove some sorts); - fix `isherm_csr` (see #1350 - `isherm_csr` uses the same algorithm, so has the same problem)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1351:70,simpl,simple,70,https://qutip.org,https://github.com/qutip/qutip/pull/1351,1,['simpl'],['simple']
Usability,"Finding the full power spectrum given a time-dependent Hamiltonian usually requires a 2-sided power spectrum. For convenience, it would be useful to be able to access this data in a properly ordered array. Additionally, the majority of literature regarding cavity optomechanics uses a positive e^(i w t) Fourier convention. Passing a simple boolean parameter to this function would allow for the use of scipy's ifft function, scaled by the number of elements.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/821:334,simpl,simple,334,https://qutip.org,https://github.com/qutip/qutip/pull/821,1,['simpl'],['simple']
Usability,"Firstly, just to underline @jakelishman comment. We *cannot* change the public interface unless we make a new major release. I also don't like the `.N` property, but it snuck in before my time. We could look to change this in v.5, but not before. . It seems this PR does contain some enhancements that are not part of #1209. However, @mlaguna10 did seem to make quite clear that they were already working on the issue. I believe #1209 is ready to merge, but we'll wait for @BoxiLi to confirm. . So what I suggest is that we merge #1209. @MartinSandeCosta can then merge the master into this PR and see what is left that adds to enhancement request outlined #1208. Assuming (with good reason) that there are valuable additions, then we will merge this too. Thanks everyone for contributing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345:368,clear,clear,368,https://qutip.org,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345,1,['clear'],['clear']
Usability,Fix `bloch.clear` breaking `point_color`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2336:11,clear,clear,11,https://qutip.org,https://github.com/qutip/qutip/pull/2336,1,['clear'],['clear']
Usability,Fix for error that popped up when running:; ```; qutip-doc/guide/scripts/floquet_ex3.py; ```; Had to fix the last fix #626 as well.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/628:59,guid,guide,59,https://qutip.org,https://github.com/qutip/qutip/pull/628,1,['guid'],['guide']
Usability,Fix typo in guide-settings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1786:12,guid,guide-settings,12,https://qutip.org,https://github.com/qutip/qutip/pull/1786,1,['guid'],['guide-settings']
Usability,Floquet Formalism not working for the case in Users Guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:52,Guid,Guide,52,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['Guid'],['Guide']
Usability,Floquet related examples in `doc/guide/scripts` fail. ; I am looking at it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1850#issuecomment-1095190980:33,guid,guide,33,https://qutip.org,https://github.com/qutip/qutip/pull/1850#issuecomment-1095190980,1,['guid'],['guide']
Usability,"For `guide-basics.rst` and `guide-overview.rst`, we will keep #1768 where Asier did a review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762#issuecomment-1015728713:5,guid,guide-basics,5,https://qutip.org,https://github.com/qutip/qutip/pull/1762#issuecomment-1015728713,2,['guid'],"['guide-basics', 'guide-overview']"
Usability,"For future posterity: we simply can never issue `-march=native` commands to build wheels for distribution via pip or conda; we have to have these appeal to the lowest common denominator instruction set. We have hard-coded SSE2 instructions in `zspmv.cpp`, but these are ancient, and that's probably the baseline we need to support at least for now (it's been working without issue for a few years now). Computing clusters don't have the latest and greatest hardware, but usually are just a weird amalgam of other bits. The CFLAGS changes were merged already, so I'm closing this now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/951#issuecomment-809676750:25,simpl,simply,25,https://qutip.org,https://github.com/qutip/qutip/issues/951#issuecomment-809676750,1,['simpl'],['simply']
Usability,"For map evolution in mesolve and unitary oper evolution is sesolve (in #868) has a python function for the ode rhs, for all td types. For const and list_str we have a Cython for dm / state evolution. Focusing on list_str: The spmv function(s) are called on each column of the vectorised map matrix. This could be done inside the custom rhs function. Or we could reshape the vector into a matrix and call some version of spmm (sparse matrix*dense matrix). Questions:; 1. which of these options do we think would be more efficient?; 2. I see we have a `cy_spmm_tr` function, but it's not apparent to me what it does. Does it compute the transpose of the sparse*dense matrix?; 3. There does not seem to be any `zspmm` or equiv in `cy/src`. Is this because it does not really exist anywhere?; 4. As 3 but using with `cy/openmp/src`. It would seem like the simplest option would be to spmv on each 'column', but inside the Cython RHS function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/877:852,simpl,simplest,852,https://qutip.org,https://github.com/qutip/qutip/issues/877,1,['simpl'],['simplest']
Usability,"For now, there is no description of the chosen value of hbar in the documentation of the [evolution solvers](http://qutip.org/docs/latest/apidoc/functions.html#dynamics-and-time-evolution). It seems that the convention `hbar = 1` is used, but it should be documented both in the doctrings of `sesolve`, `mesolve`… and in the [guide](http://qutip.org/docs/latest/guide/dynamics/dynamics-master.html). I even think that the solved equation should be explicitly written in the docstring.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1360:326,guid,guide,326,https://qutip.org,https://github.com/qutip/qutip/issues/1360,2,['guid'],['guide']
Usability,"For point 2: adding marks right now will cause conflicts, but if #1181 gets merged then it'll be much simpler. The main issue is that a lot of the testing structure has changed for tests up to `test_mcsolve.py` alphabetically, and so in general the tests are just not the same. The principle is pretty straightforwards - just like #1181 introduces a `requires_cython` mark, we would add `uses_cython`, `uses_mkl` and `uses_openmp` marks. These would be even simpler to add than `requires_cython` because unlike it, they don't require any test-generation logic at all. The change would simply be to add them to `pytest.ini`, mark the requisite functions and then change the pytest invocation of the specialised test to `pytest -m ""uses_cython""` or whatever. As far as I'm aware, the only parts of their codebase which modify their behaviour based on whether `Cython` is available is `QobjEvo`. The other parts (like `brmesolve`) just don't work if Cython isn't there. The MKL tests would become very short; by my reckoning, MKL is only used by `steadystate` and `countstat`. OpenMP is much more pervasive, as `sesolve`, `mesolve` and `brmesolve` all use it, and parts which depend on those are generally the slowest tests. The short tests could just become `pytest -m ""not slow""`? That's not super speedy, but it takes about half the time, maybe. If you want more, then a good starting point is `pytest --durations=0` which will tell us which tests are the slowest (perhaps that was what you already did when marking the slow ones?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776:102,simpl,simpler,102,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776,3,['simpl'],"['simpler', 'simply']"
Usability,"For these kind of problems, you should use `smesolve`, you can see what equation it solve [here](https://qutip.org/docs/latest/guide/dynamics/dynamics-stochastic.html#stochastic-master-equation). `general_stochastic` should be used only in last resort. While it allow to use the stochastic solver mechanic with your own functions, it use the same options and mix of `Qobj`, `Qobj.data` and `array`, etc., without the layer to glue everything together... Here, the issue is that it use the same options as `ssesolve` and `smesolve`, which per default normalize the state before computing the expectation values, but do not know that it's supposed to be an density matrix, thus normalizing the state as if it was a ket... You can pass `normalize=False` to `general_stochastic` to obtain results closer to `mesolve`, but I would recommend not to use `general_stochastic` in the state it is now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1935#issuecomment-1156499606:127,guid,guide,127,https://qutip.org,https://github.com/qutip/qutip/issues/1935#issuecomment-1156499606,1,['guid'],['guide']
Usability,"From my point of view parallel_map is superior to the old parfor function, because of it simpler and has more features, so we could simply have parfor call parallel_map as I've done in the ipynbtools. However, the problem with this is that we will likely break backwards compatibility, which can be annoying for users using the existing parfor function (myself included, in older projects). . Anyways, I'll merge this soon and we can think about unification of parfor and parallel_map in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/253#issuecomment-63926759:89,simpl,simpler,89,https://qutip.org,https://github.com/qutip/qutip/pull/253#issuecomment-63926759,2,['simpl'],"['simpler', 'simply']"
Usability,Gates in qutip-v5 User Guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441:23,Guid,Guide,23,https://qutip.org,https://github.com/qutip/qutip/pull/2441,1,['Guid'],['Guide']
Usability,"General comment about plotting on the Bloch sphere:. QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are *not* required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix. There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested. I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now. I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling. My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552:856,intuit,intuitive,856,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552,1,['intuit'],['intuitive']
Usability,"Good catch. I think we can add a check [here](https://github.com/qutip/qutip/blob/master/qutip/qobj.py#L253) and [there](https://github.com/qutip/qutip/blob/master/qutip/qobj.py#L300) in `qutip.qobj`. ```; elif inpt is None:; # initialize an empty Qobj with correct dimensions and shape. if any(dims):; if shape:; check_dims(dims, shape); N, M = np.prod(dims[0]), np.prod(dims[1]); self.dims = dims; ; elif shape:; N, M = shape; if dims:; check_dims(dims, shape); self.dims = [[N], [M]]; ```; where we can define a simple `check_dims` function for consistency checks. But this is also really not a bug perhaps but more to do with minimizing user mistake. ; @ajgpitch",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/978#issuecomment-489461187:515,simpl,simple,515,https://qutip.org,https://github.com/qutip/qutip/issues/978#issuecomment-489461187,1,['simpl'],['simple']
Usability,"Good point, I didn't notice that it is under the basic guide section. What about add it as a subsection (Quantum Gates) after [Qubit (two-level) systems](https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-states.html#qubit-two-level-systems).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2141948066:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2141948066,3,['guid'],"['guide', 'guide-states']"
Usability,"Good point. It used to be possible to disable the progress bar when we still used Qt, but for some reason that feature got lost when we restructured the code to use the text-based progress bar. In PR #220 I've added back this feature. You should now (when the PR is merged) be able to do. ```; >>> result = mcsolve(...., progress_bar=None); ```. to disable the progress bar.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/219#issuecomment-53663345:50,progress bar,progress bar,50,https://qutip.org,https://github.com/qutip/qutip/issues/219#issuecomment-53663345,3,['progress bar'],['progress bar']
Usability,"Good points. I suggest to simply remove the comment in `test_qobj`, and change to pytest in the `setup.py`. Something like what's [here](https://doc.pytest.org/en/3.0.4/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner) should work (basically changing `nose` with `pytest`). It seems however that testing it's a thorny [issue](https://github.com/pypa/setuptools/issues/1684), but these changes for the time being make the whole package at least consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587:26,simpl,simply,26,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587,1,['simpl'],['simply']
Usability,"Good work. ; Removing pxi is great. This was really old cython. I would have put solvers in core since the core usage of qutip is evolution of quantum systems. But I am thinking more in what would stay in the main package and what would become spin-off (qip, control). . The OpenMP check seems too complicated for something that should be simple. I would like to remove the need of this flag. But for now, if you set it in the `__init__` of `core` instead of `qutip`, could you then not use the `try` as before?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282#issuecomment-638485105:339,simpl,simple,339,https://qutip.org,https://github.com/qutip/qutip/pull/1282#issuecomment-638485105,1,['simpl'],['simple']
Usability,"Great feedback @hodgestar. Let me add this: It would be nice to clarify explicitly benchmarks from the beginning. ; A bit like you did when mentioning the 14 qubit cap for QFT gate simulation. ; For example, goals of this would be:; - For qutip/qutip: Faster `mesolve` (add details of a typical example with current times/bottlenecks); - - For qutip/qutip: More qubits simulated in `mesolve` and `steadystate` ; - For qutip/qutip-qip: Capability to simulate more qubits (add current example with benchmark + code). For all examples we could add details of a typical example with current times/bottlenecks (we could use gists). This can be of very wide interest, but finding physical examples of interests and use cases would be helpful. For example, qubit space nevertheless explodes exponentially. But adding even a bit more qubits in `steadystate` can impact state of the art simulation of dissipative phase transitions in many-body systems. I also think that having a sort of code design template could help. This is a more general point triggered by this issue. This may be a QuTiP idea but looks at some point more technical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489:6,feedback,feedback,6,https://qutip.org,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489,1,['feedback'],['feedback']
Usability,Guide - Superoperators,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1984:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1984,1,['Guid'],['Guide']
Usability,Guide and docs are ready for review.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-634285515:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-634285515,1,['Guid'],['Guide']
Usability,Guide basics2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1768:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1768,1,['Guid'],['Guide']
Usability,Guide dynamics data,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1773:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1773,1,['Guid'],['Guide']
Usability,Guide dynamics intro,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1761,1,['Guid'],['Guide']
Usability,Guide dynamics intro2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1775:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1775,1,['Guid'],['Guide']
Usability,Guide overview,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1762,1,['Guid'],['Guide']
Usability,Guide overview2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1769:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1769,1,['Guid'],['Guide']
Usability,Guide states2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1771:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1771,1,['Guid'],['Guide']
Usability,Guide tensor,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1772:0,Guid,Guide,0,https://qutip.org,https://github.com/qutip/qutip/pull/1772,1,['Guid'],['Guide']
Usability,HEOMSolver return states and progress bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1908:29,progress bar,progress bar,29,https://qutip.org,https://github.com/qutip/qutip/pull/1908,1,['progress bar'],['progress bar']
Usability,HTML progress bar is broken in Jupyter notebooks,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2475:5,progress bar,progress bar,5,https://qutip.org,https://github.com/qutip/qutip/issues/2475,1,['progress bar'],['progress bar']
Usability,"Happy to create a notebook with some examples. Should it live at https://github.com/qutip/qutip-notebooks/tree/master/docs/guide ? If so, I'll make a PR there. For documentation, do I add them at https://github.com/qutip/qutip-doc/blob/master/apidoc/functions.rst?. Re measurement and teleportation -- that sounds like ordinary quantum teleportation, and probably would be a fun test to write once we get there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310:123,guid,guide,123,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310,1,['guid'],['guide']
Usability,"Hardware info is only used to get the number of cpus... It may hve been used for benchmark in the past, it also fetch the cpu frequency and memsize... I would be for simply removing it in the next version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709:166,simpl,simply,166,https://qutip.org,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709,1,['simpl'],['simply']
Usability,"He did - he's the original feature requester, but given super super weird interactions with ufuncs (see #1433), it's not so clear to me that it was _necessarily_ the right idea to implement especially now it's causing problems with how numpy arrays are used in the library. There always was a work-around; allowing `np.array(qobj)` was more to save him from writing `x = x.full() if isinstance(x, Qobj) else np.asarray(x)`. That said, I came round to the idea more as I read more about the control we can have over the rest of the numpy infrastructure. We can allow `np.array` on `Qobj` (satisfying Michael's original request), and with a little bit of extra code we can prevent all the super weird ufunc/implicit casting behaviour, because `Qobj` shouldn't be able to implicitly interoperate with raw arrays. I know in my personal code I'd rather use `Qobj.full()`, but I no longer think it's _wrong_ to allow `np.array(qobj)` given that other people like it, even with these numpy 1.20 problems. It does make it difficult to put `Qobj` in arrays, but numpy 1.20 has ruled out being able to have `np.array(qobj)` and `np.array([qobj1, qobj2], dtype=object)`, so that's not really our fault.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1434#issuecomment-772665656:124,clear,clear,124,https://qutip.org,https://github.com/qutip/qutip/pull/1434#issuecomment-772665656,1,['clear'],['clear']
Usability,"Hello again. Since these are very simple and related issues I will adress them in a single post. **1) Adding control over plotted line width**; When we create a Bloch sphere with `b = Bloch()` and add points, `pnts_list`, to it with `b.add_points(pnts_list, meth = 'l')` we can use this handy `meth` parameter to instead of plotting points (which corresponds to the value `'s'` and [looks like this](https://i.imgur.com/pGhU55e.png)) connect them with line segments (which corresponds to the value `'l'` and [looks like this](https://i.imgur.com/QrvLSmd.png)). We can control de size of the points with `b.point_size` but we can't do it for lines (when `meth = 'l'` is been used). It would be nice to have that option, to allow control over the width of the lines plotted just like with points. In that way we could prevent it to be confused with the frame of the bloch sphere in a black and white image. Maybe a good way of solving this would be to use the value of `b.point_size` for that. Or maybe a better option would be to have a new `b.line_size` parameter to allow for different sizes between points and lines (which makes everything more customizable).; _______________________________________________________________. **2) Adding styles for markers and lines for plotting**; In [the code](http://qutip.org/docs/4.0.2/modules/qutip/bloch.html) for the add_points function it is written that. ```; meth : str {'s', 'm', 'l'}; Type of points to plot, use 'm' for multicolored, 'l' for points; connected with a line.; ```. First of all, it is not true that `meth = 'l'` gives points connected by lines (which in pyplot would be done with the `linestyle='-'` and `marker='o'` parameters) but it gives lines without the point markers (`linestyle='-'` and `marker='None'` in pyplot). But this is not important since it is just a comment on a function. The thing that matters is that it would be great if we had a `b.linestyle` and `b.marker` methods for the Bloch sphere instead of a `meth` paramet",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1105:34,simpl,simple,34,https://qutip.org,https://github.com/qutip/qutip/issues/1105,1,['simpl'],['simple']
Usability,"Hello! As @jakelishman described, you can help debug this issue by trying:. ```python; from qutip.cy.openmp.parfuncs import spmv_csr_openmp; ```. and reading the exception produced. I suspect that the `qutip.cy.openmp.*` packages will simply not have been compiled -- they're only built by QuTiP when ""--with-openmp"" is passed to `setup.py` and I think `conda install ... qutip` will not do that even when OpenMP is already installed. To correct this you will need to install QuTiP from source and pass `--with-openmp` yourself as described in https://qutip.org/docs/latest/installation.html?highlight=openmp#direct-setuptools-source-builds. We probably could make ""openmpi"" and ""no-openmpi"" builds for conda-forge by adapting the pattern in https://conda-forge.org/docs/maintainer/knowledge_base.html#openmp but that would require some work (and be a feature enhancement :).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166:235,simpl,simply,235,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166,1,['simpl'],['simply']
Usability,"Hello! This is the first of hopefully a few PRs to add measurement functions to qutip. This PR adds a new module named `qutip.measurement` that contains two functions:. * `measure(op, state)` that performs a classic quantum measurement as described in most introductory texts (measurement collapses a state to an eigenvector of an hermitian operator and the result is the corresponding eigenvalue). It is intended to simulate a simple measurement that could be performed in a real experiment. * `measurement_statistics(op, state)` returns information that is not available via a real experiment, but is nevertheless often useful in simulator (the eigenvalues and vectors or projection operators for the measurement operator and the probabilities of each measurement result). Both functions support either kets or density matrices and return sensible results based on the kind of input. Not currently supported:. * Partial measurements of a system.; * Destructive measurements (aka von Neumann measurements of the second kind); * Density matrix ensembles (applying the measurement probabilities to the density matrix rather than making a specific measurement); * Any custom support for qubit measurement (my plan is to add those to a `qutip.qip.measurements` module once we have the basics of this module agreed on). Questions / things I'd like feedback on:. * Do the inputs and outputs of the current functions seem intuitive / sensible?; * What are the most important other features to support?; * I don't want to have too many functions, but I also don't necessarily want to cram all possible kinds of measurements into one function. Any thoughts on how to split these up?; * What other unit tests should I be writing?; * I haven't given any thought to performance yet. Anything egregious I should fix now or any important cases to optimize for?. General stylistic feedback welcomed too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090:428,simpl,simple,428,https://qutip.org,https://github.com/qutip/qutip/pull/1090,4,"['feedback', 'intuit', 'simpl']","['feedback', 'intuitive', 'simple']"
Usability,"Hello, ; when trying to run the examples from the User Guides in the Bloch-Redfield master equation section; ( http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) I get an error . I'm running the code in a conda environment using ipython on Windows 10, the details of the packages installed at the end of the post. To reproduce the error:; ```; import numpy as np; import matplotlib.pyplot as plt; from qutip import *. delta = 0.2 * 2*np.pi; eps0 = 1.0 * 2*np.pi; gamma1 = 0.5; H = - delta/2.0 * sigmax() - eps0/2.0 * sigmaz(); def ohmic_spectrum(w):; 	if w == 0.0: # dephasing inducing noise; 		return gamma1; 	else: # relaxation inducing noise; 		return gamma1 / 2 * (w / (2 * np.pi)) * (w > 0.0). R, ekets = bloch_redfield_tensor(H, [sigmax()], [ohmic_spectrum]). np.real(R.full()). tlist = np.linspace(0, 15.0, 1000). psi0 = rand_ket(2). e_ops = [sigmax(), sigmay(), sigmaz()]. expt_list = bloch_redfield_solve(R, ekets, psi0, tlist, e_ops). sphere = Bloch(). sphere.add_points([expt_list[0], expt_list[1], expt_list[2]]). sphere.vector_color = ['r']. sphere.add_vectors(np.array([delta, 0, eps0]) / np.sqrt(delta ** 2 + eps0 ** 2)). sphere.make_sphere(). plt.show(). output = brmesolve(H, psi0, tlist, [sigmax()], e_ops, [ohmic_spectrum]); ```. The code runs fine until the last line which gives the following response:; ```; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-1-79f7f2013969> in <module>; 35 plt.show(); 36; ---> 37 output = brmesolve(H, psi0, tlist, [sigmax()], e_ops, [ohmic_spectrum]). ~\Anaconda3\envs\qutip-env\lib\site-packages\qutip\bloch_redfield.py in brmesolve(H, psi0, tlist, a_ops, e_ops, c_ops, args, use_secular, sec_cutoff, tol, spectra_cb, options, progress_bar, _safe_mode, verbose); 196; 197 if _safe_mode:; --> 198 _solver_safety_check(H, psi0, a_ops+c_ops, e_ops, args); 199; 200 # check for type (if any) of time-dependent inputs. ~\Anaconda3\envs\qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223:55,Guid,Guides,55,https://qutip.org,https://github.com/qutip/qutip/issues/1223,2,"['Guid', 'guid']","['Guides', 'guide']"
Usability,"Hello, I want to solve problems in optomechanics with QuTip but I don't know which packages(mathmp, sympy,sympsi,..) must be used. please guide me about writing QuTip programs for optomechanical systems. also, I want to know in steady state, how I can plot a quantity(like variance) versus variables other than time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/507:138,guid,guide,138,https://qutip.org,https://github.com/qutip/qutip/issues/507,1,['guid'],['guide']
Usability,"Hello,. I have a time dependent hamiltionian with a simple polynomial function, whose gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use. However, when passing the function and its gradient to Qutips mesolve function, i get the error:. ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required. I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.; I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make. I would appreciate any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834:52,simpl,simple,52,https://qutip.org,https://github.com/qutip/qutip/issues/1834,2,['simpl'],"['simple', 'simply']"
Usability,"Hello,. I'm using qutip alongside another library, which does something like this:; ```py; import logging; logger = logging.getLogger(); logger.setLevel(logging.DEBUG); ```; Im not entirely sure why it does so, but nevertheless debug messages don't show up anywhere, since the root logger doesn't print anything without it being configured. If you run the above code in Ipython but add `import qutip` before it, `logging.debug(""foo"")` prints to the stderr (without qutip it doesn't). So when I started using the library with qutip, suddenly all debug messages started getting printed to stderr. Apparently, this is somewhat on purpose, by looking at the code [here](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/logging_utils.py#L99). I'm not entirely sure what tho think about that, because as shown above this causes something unexpected. Nevertheless, I thought I could work around this by setting `log_handler = ""null""` in my settings file, but that in turn causes qutip to crash, because the rc loader [expects](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/configrc.py#L97) `log_handler` to be a boolean for some reason. Also, it took me a while to find this, since the `log_handler` option is [not documented](http://qutip.org/docs/latest/guide/guide-settings.html?highlight=log). I'm using python 3.7.4 and QuTiP 4.4.1 installed with pip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1156:1320,guid,guide,1320,https://qutip.org,https://github.com/qutip/qutip/issues/1156,2,['guid'],"['guide', 'guide-settings']"
Usability,"Hello,; I noticed that vector_to_operator stopped working after updating to 4.5. Simple code that gives error:. ```; import qutip as qu. def zero_state_qutip(nb_qubits):; zero=qu.basis(2,0); if nb_qubits>1:; for i in range(1,nb_qubits):; zero=qu.tensor(zero,qu.basis(2,0)); return zero. nb_qubits=4. Psi=zero_state_qutip(nb_qubits). V=qu.vector_to_operator(Psi); ```. The code works fine with nb_qubits=2, but not with 4, 6 etc. The error is:. File ""qutip\superoperator.py"", line 279, in vector_to_operator; q.data = sp_reshape(op.data.T, shape[::-1]).T. File ""qutip\sparse.py"", line 135, in sp_reshape; return zcsr_reshape(A, shape[0], shape[1]). File ""qutip/cy/spconvert.pyx"", line 254, in qutip.cy.spconvert.zcsr_reshape. Exception: Total size of array must be unchanged.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204:81,Simpl,Simple,81,https://qutip.org,https://github.com/qutip/qutip/issues/1204,1,['Simpl'],['Simple']
Usability,"Hello,; I'm the Lead developer of [netket](https://github.com/netket/netket), a jax-based framework for using Machine-Learning techiques to study quantum systems (open and closed). We are finalising the next release and as I am a big fan of extensibility, I would like our two frameworks to coexist and provide a sensible, easy api to work together.; Mainly, what I would like to do is provide an easy-to-use no-documentation-needed to convert NetKet's types to Qutip, so that it becomes easy to use it to check our variational calculations. TLDR: I propose creating and documenting a `__qobj__` interface so that arbitrary objects having this method will support conversion to a QuTiP Qobj. --. NetKet has mainly three types that are concerned: hilbert spaces, operators and variational states. ; Hilbert spaces describe the space every object is defined upon, and can be easily converted to your `dims` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:118,Learn,Learning,118,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['Learn'],['Learning']
Usability,"Hello. I'm working on a qutrit system (spin 1). Eventually need to do some pulse optimization but for testing I tried to propagate using a very simple Hamiltonian, namely just Sz^2 with D=2000. ; Units are µs for time (so MHz for frequency). . versions used:; ```python; matplotlib.pylab 1.16.4; qutip 4.4.1; matplotlib 3.1.1; numpy 1.16.4; scipy 1.3.1; CPython 3.7.3; IPython 7.5.0; ```. I solve with sesolve or mesolve with (|+. 1> + |0>)/sqrt(2) as initial state.; **expected:** quite trivially, population should stay 1/2 for any t for |+1> and |0>, 0 for |-1>; **result:** population of |+1> goes down linearly and |0> goes up ; a few observations: ; - if I make the coefficient of Sz^2 smaller, the population diverges less ; - with less time steps but same overall propagation time, I see the divergence less obviously because I see the beginning of it; - I am aware one can somehow optimize the number of time steps but this is about the convenient settings for the next steps for me; - I was thinking of increasing floating point precision or something like that but wasn't able to find a simple way to do that in the docs. it does not seem like having a coefficient on the order of 10000 or 10^5 time steps is that unreasonable, does it ?; anyway, this is about the right, convenient choice of unit for us here. any idea what's wrong ?. ```python; %load_ext watermark; import numpy as np; import scipy; import matplotlib; import matplotlib.pylab as plt; import qutip; %watermark -v --iversions; %matplotlib qt. #Spin 1 operators; S1_x = 1/np.sqrt(2)*qutip.Qobj([[0,1.,0],; [1.,0,1.],; [0,1.,0]]). S1_y = 1.j/np.sqrt(2)*qutip.Qobj([[0,-1.,0],; [1.,0,-1.],; [0,1.,0]]). S1_z = qutip.qdiags([1.,0,-1.], 0). #canonical basis with corresponding projectors; canon_100 = qutip.basis(3,0) #ket |+1>; canon_010 = qutip.basis(3,1) #ket |0>; canon_001 = qutip.basis(3,2) #ket |-1>. proj100 = qutip.ket2dm(canon_100); proj010 = qutip.ket2dm(canon_010); proj001 = qutip.ket2dm(canon_001). #Hamiltonian pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085:144,simpl,simple,144,https://qutip.org,https://github.com/qutip/qutip/issues/1085,2,['simpl'],['simple']
Usability,"Here too, branches are mixed. Changes from `doc/guide/guide-states.rst` etc. are included and it will probably have a conflict with #1762.; This PR should only have the changes from dynamics. If you can remove that conflict, it would be great.; If easier, you can also restart with `qutip/master` and cherry pick the changes to dynamics in a new PR. That said, adding an overview file to introduce the diverse dynamic function is nice. I will review it once the PR is cleaned, in case you choose to open a new one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761#issuecomment-1014771546:48,guid,guide,48,https://qutip.org,https://github.com/qutip/qutip/pull/1761#issuecomment-1014771546,2,['guid'],"['guide', 'guide-states']"
Usability,"Hey QiTiP community,; I wanted to make a simple bloch sphere animation, but can only get one image from the save() function.; Only the first .png image has a bloch sphere in it, the others are empty. ; ..............................................................; bloch_0.png; ![bloch_0](https://cloud.githubusercontent.com/assets/8253676/5883346/bca4bdf6-a351-11e4-8d04-9f1ba385a42c.png); ..............................................................; bloch_1.png; ![bloch_3](https://cloud.githubusercontent.com/assets/8253676/5883348/bca8d08a-a351-11e4-88b6-8c97800aedc3.png); ..............................................................; bloch_2.png; ![bloch_2](https://cloud.githubusercontent.com/assets/8253676/5883349/bca9d25a-a351-11e4-8b10-eacea1b7437f.png); ..............................................................; bloch_3.png; ![bloch_1](https://cloud.githubusercontent.com/assets/8253676/5883347/bca637ee-a351-11e4-8495-b5f12557ad6d.png); .............................................................. Here is my simple piece of code mainly coped from the tutorial. ```; import numpy as np; from qutip import *; from scipy import *. b = Bloch(). for i in range(30):; print i; b.add_vectors([np.sin(i),0,np.cos(i)]); b.save(dirc='temp'); ```. I would be glad if someone could help me. ```; >>> about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; Paul D. Nation & Robert J. Johansson. QuTiP Version: 3.1.0.dev-23e5259; Numpy Version: 1.8.2; Scipy Version: 0.14.0; Cython Version: 0.21.1; Matplotlib Version: 1.3.1; Fortran mcsolver: False; scikits.umfpack: False; Python Version: 2.7.8; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python2.7/dist-packages/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/304:41,simpl,simple,41,https://qutip.org,https://github.com/qutip/qutip/issues/304,2,['simpl'],['simple']
Usability,"Hey Simon and Eric,. - I've gone through and fixed (I hope!) the formatting and code issues due to the bad merge I did last week; - I've added in flimesolve_test.py as a test script for flimesolve; - I've tried to format everything according to PEP8, although there are likely some issues here. I've not had any formal training on PEP8 formatting (and python in general, to be honest), such that even with the help of the PEP8 style guide and Spyder's auto-formatting tool for PEP8, I'm sure there are some small fixes that need to be made; - I'm not entirely sure what Eric meant about separating out the physics from the data container, etc. I moved anything having to do with the precalculation of the Floquet states into its own function, but to kill this precalculation off entirely would severely hinder the speed of flimesolve, as an large advantage of Floquet theory comes from being able to accurately create the basis states at any time once you have the initial basis states. If this is still an issue (or if I've misinterpreted Eric's comment entirely and need to change something else in this regard), please let me know. Maybe we could have a live discussion over the issue, if that would work better. Thanks for your help!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778:433,guid,guide,433,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778,1,['guid'],['guide']
Usability,"Hey guys, thanks for the feedback (this is the first time I have logged in to github in about a year!).. Just some replies to Paul's comments. The method is basically general, under certain assumptions about the bath spectrum density and bath temperature, so the 'system' can, in principle, be anything. I will also do so minor tweaking so it can deal with multiple baths and correlated baths. We will add some notebooks showing different examples and explaining when its valid later. . > Why is it not possible to directly calculate expectation values other than the coupling term?. Yeah there was a list of expectation values at some point, but it disappeared while we were making edits. Thanks for the reminder. Thanks for the other points, we will fix the various issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103750029:25,feedback,feedback,25,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103750029,1,['feedback'],['feedback']
Usability,"Hi @ALasek . You are right, there is a bug in the error handling.; ```; File ""C:\Users\OlekAdmin\anaconda3\lib\site-packages\qutip\qip\circuit.py"", line 2114, in initialize; raise ValueError(""dimension of state is incorrect""); ```; This check is wrong. It assumes that the state is a qubits state. Our test didn't cover the `run` method with multi-level systems. Here are the ways around:; - If you know how to hack the package, you can simply find the file and delete this error handling (lines 2113 and 2114).; - If you don't know how to do that, you can also use; ```; gate_sequence_product(qc.propagators()); ```; to compute the unitary representation of the circuit first and then apply it to the input state. I'll make a bug fix soon. But the next release may still take a while. Using `QubitCirucuit` for qutrits and qudits should be fine, it is rarely used though. So there might be bugs that are uncovered by our test. If you encounter any further questions, feel free to ask!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650:437,simpl,simply,437,https://qutip.org,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650,1,['simpl'],['simply']
Usability,"Hi @Ericgig , could you be a little more specific about what reworking the kwargs treatment would entail? Also if you could emphasize more concretely what you're looking for in updates to the notebooks and docs, that would be great. I do have some other observations.; 1. I do not get the KeyError message if I run the same jupyter notebook locally with the same versions of code as specified by version_table( ). I get another error instead, which actually seems more reasonable to me (something along the lines of 'use_precond' wasn't found in the keys of the dict, which clearly indicates that there's something off with the optional args thing).; 2. Also using mech_dms = np.asarray(mech_dms) fails, I think because it sees a Qobj instead of a real number.; 3. The direct patch to the KeyError mentioned above, based on my understanding of the code, would simply be to nest the assignment to 'max_iter_refine' in the 'info' dictionary inside a condition that checks if the solver is 'scipy'?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676:574,clear,clearly,574,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"Hi @Ericgig ; Thanks for investigating this so thoroughly. ; I guess it makes sense that unpacking a dict at each call is inefficient, so I think we should drop this idea. As you have suggested previously, users can always use module variables if they wish to avoid passing vars in `args`. So I think we should aim to keep it simple. I think adding `f(t)` as a signature option will be sufficient for what @goerz wanted and would be sufficient for using a Numba jit. So, my suggestion for the next major release (v5) would be that we have only two call sigs:; - `f(t, args)` (default); - `f(t)`. For now we will have to have the three (although I don't think the `rhs_with_state` is not widely used, if at all).; - `f(t, args)` (default); - `f(t)`; - `f(t, state, args)`; The default needs to remain as it is, because it is widely used. I think it makes sense to use introspection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:326,simpl,simple,326,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"Hi @Ericgig, thank you for your feedback. I have already implemented the changes. To correct the error when plotting points with style 'l' I have made the script only sort the points when styles 'm' and 's' are specified as it was in V4.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2308#issuecomment-1911930396:32,feedback,feedback,32,https://qutip.org,https://github.com/qutip/qutip/pull/2308#issuecomment-1911930396,1,['feedback'],['feedback']
Usability,"Hi @VolodyaCO, thanks for reporting this!; I think the reason for `tlist` being overridden is because the result will be independent of `tlist` when the input is a steady-state. This can be seen in the following equations:; ![image](https://user-images.githubusercontent.com/57414022/121327018-5d313680-c913-11eb-9760-ca6004daca18.png); where rho is the initial state (`state0`) and H is the Hamiltonian of the system. I use the fact that rho is a steady-state to remove its temporal dependence. This derivation is simplified assuming unitary evolution (no collapse operators) but the same applies in the most general case where we include the collapse operators. This is my guess on why `tlist=[0]` is employed when using `state0=None`: the result does not depend on `tlist`. Hence, this is probably not a bug as the result should be mathematically correct. That being said, I would also expect the same output shape for the cases shown above unless explicitly mentioned in the docstring of the function. Thus, I think the way to go here is to document this behaviour in the docstring (as well as removing the t appearing in correlation_..._1t docstring) as any change in the output shape will break backwards compatibility. However, it may be worth considering whether this is the intended behaviour for QuTiP 5. I would suggest removing `state0=None` as possible input for simplicity in the maintenance and testing or at least I would make the example shown by @VolodyaCO to be consistent and have the same output. Let us see what the QuTiP admin team thinks :smile:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355:515,simpl,simplified,515,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355,2,['simpl'],"['simplicity', 'simplified']"
Usability,"Hi @anna-naden, thank you for the correction. But the branches and PR are mixed. This PR correct issues in your first one, (#1757). Normally fixes of a PR should be done in the same PR.; So having the fixes here cause confusion and I would like to close either #1757 or this one. This one have the fixes in `doc/guide/guide-basics.rst`, but does not include the changes in `doc/guide/guide-states.rst`.; Which one do you want to keep?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762#issuecomment-1014771366:312,guid,guide,312,https://qutip.org,https://github.com/qutip/qutip/pull/1762#issuecomment-1014771366,4,['guid'],"['guide', 'guide-basics', 'guide-states']"
Usability,"Hi @ariels1234, here is a more detailed guide on how to install those additional packages https://qutip-qip.readthedocs.io/en/stable/installation.html#additional-software-for-plotting-circuits. (It is for the separate package qutip-qip, but the circuit plotting part is the same.). Do you have a valid version of pdflatex with packages like qcircuit and pdfcrop installed?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1888#issuecomment-1112172803:40,guid,guide,40,https://qutip.org,https://github.com/qutip/qutip/issues/1888#issuecomment-1112172803,1,['guid'],['guide']
Usability,"Hi @christian512, thanks for the help! I've increased `nsteps` for that particular simulation and the integration runs fine without any errors. One caveat is I have not checked the correctness of the result. . On the other hand, as soon as I tried `mesolve` on a simple Larmor precession problem, `mesolve` started either (1) throwing the typical ODE integration error or (2) integrating but producing a manifestly incorrect result (the final state is not on the Bloch sphere). The code I am using is ; ```; from qutip import * ; import numpy as np. sz = sigmaz(). init_ket = 2 ** (-1/2) * Qobj([[1], [1]]) # Bloch vector is unit x; init_dm = init_ket * init_ket.dag(). b_0 = 1; gam = 1; h_zeem = gam * b_0 * sz; h = [h_zeem]. larmor_freq = gam * b_0 ; period = 2 * np.pi / (larmor_freq); t = np.linspace(0, period / 2, 100). print(mesolve(h, init_dm, t, options=Options(nsteps=1e6)).states[-1]); ```. Which produces ; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 +0.j -263.5988765-267.24047092j]; [ -2.1425229 +0.49907152j 0.5 +0.j ]]; ```; Edit: I have also tried playing around with `atol` and `rtol` without any success.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503:263,simpl,simple,263,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503,1,['simpl'],['simple']
Usability,"Hi @dweigand, this looks interesting. It would you be nice to push this forward, adding some tests for this and integrating @Ericgig suggested changes. I am wondering whether there is a more intuitive (explicit) option than `qfunc_amat `. Something like a Boolean `precompute`?. Writing some documentation for this, in https://github.com/qutip/qutip-doc, would allow users to discover this option more easily at http://qutip.org/docs/latest/guide/guide-visualization.html#husimi-q-function, it's very nice you have some performance checks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-536368295:191,intuit,intuitive,191,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-536368295,3,"['guid', 'intuit']","['guide', 'guide-visualization', 'intuitive']"
Usability,"Hi @eendebakpt ,; the link you provided refers to an old version of the docs for QuTiP Version 4.0.2.; You can find the documentation for the unitary evolution of the current QuTiP version here: [https://qutip.org/docs/latest/guide/dynamics/dynamics-master.html#unitary-evolution](https://qutip.org/docs/latest/guide/dynamics/dynamics-master.html#unitary-evolution). The code in the latest docs seems to be correct: ; `np.linspace(0.0, 10.0, 20)`. I suggest to close this issue!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1944#issuecomment-1165721180:226,guid,guide,226,https://qutip.org,https://github.com/qutip/qutip/issues/1944#issuecomment-1165721180,2,['guid'],['guide']
Usability,"Hi @epelofske-LANL. This behaviour in QuTiP is intentional for the following reason: If the dims of the system are `[2, 2]` then it's unambiguous how the system should be partitioned into two parts because the dims specify what the two parts. If the dims are `[4]` then one could divide the system in multiple ways depending on how one considers the four basis vectors. If one knows that the four basis states are `00`, `01`, `10`, `11`, one can override the dims by writing `dm.dims = [[2, 2], [2, 2]]` or `qutip.Qobj(dm, dims=[[2, 2], [2, 2]])`. Hope this helps. I agree this could be made more intuitive. Perhaps `maximally_mixed_dm` should allow specifying `dims` too instead of just `N`. I'm closing this issue for now, but please feel free to continue the discussion in the comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486:597,intuit,intuitive,597,https://qutip.org,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486,1,['intuit'],['intuitive']
Usability,"Hi @goerz ,. I tried to replicate your issue on my Linux machine, and it seems to work fine :. ```(qutip-env) tarun@trolldem0rt:~/miniconda3/envs/qutip-env/bin$ nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:734,simpl,simple,734,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['simpl'],['simple']
Usability,"Hi @jakelishman , Thanks for the great work and effort! I'm reading your code and also try to learn some pytest. . If I may, I have a minor suggestion. Could you maybe leave some more descriptive comments in the tests? I find it a bit hard to follow the logic when tests are automatically generated or parametrized, e.g. in test_control_pulseoptim. A lot of things are defined for the fixtures in the beging. It took me some time to understand what is happening. I guess it is because I'm not yet very familiar with the tools in pytest. Maybe some description like ; > We first define 4 test cases: ... or. > Test function1 against case1, case2 ... This might make it easier for whoever wants to add more tests later to understand what has been tested without too much digging. And another personal idea, maybe it is good to make a separate PR every 10 or 15 tests? A new branch can still base on this one. Just after the old PR is merged, fewer changes will be shown the new PR. It might make the later review a bit easier. Just personal ideas. Thanks again!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591399487:94,learn,learn,94,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591399487,1,['learn'],['learn']
Usability,"Hi @jakelishman do you have any further doubts about the issues with scipy 1.4 `linallg.eigenh() API` ? To me it is clear that we have to deprecate support for it, as any code that relies on calculating eigenvalues for large matrices has this MKL error, which it often does not show, and instead of terminating returns an incorrect numeric value. This affects not just this code but any possible high dimensional calculation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-818701546:116,clear,clear,116,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-818701546,1,['clear'],['clear']
Usability,"Hi @jakelishman you were right about the contraction, I changed the indexes as in http://qutip.org/docs/latest/guide/guide-tensor.html so that it represents a trace-like channel. On the other hand I find that mixed dimensions operator `[[m,n], [m,n ]]` appear in some of the tests that were already in place, I will try to write my thoughts on their meaning later. I am still going to refactor this a little bit more, and tell you when it is ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708:111,guid,guide,111,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708,2,['guid'],"['guide', 'guide-tensor']"
Usability,"Hi @jakelishman, I like your implementation but this will sometimes return a Qobj and other times a class instance when you call `displace()`. I am not in favour of that just out of the principle that functions should be simple and do one thing only as you also point out. . I would say if we do not want to break the user-interface, we keep the same implementation as `displace()` returning a `Qobj` (even if internally it calls the faster private `_Displace` method). . Users who want to use the class anyway can dig in and find `_Displace`. The use case here for moving to classes is rather specific and related to optimisation/control. We want to compute this operator very fast with multiple values of `alpha`, independently, on multiple cores (this was why we needed the faster implementation to run a GPU optimisation routine). Of course for sigmax(), or sigmay() we do not have any parameters to optimise and it is overkill to make them into classes. I do not suggest that at all. . I understand the inclination to be `functional`. It is how QuTiP was written and is supposed to be used, mostly. But one of the arguments for classes is that for some solvers, or operations we needed to re-use information, eg. qutip.piqs or the heom solvers where we had to make classes anyways. . I would propose just having a private `_Displace` method which is called by `displace` but not changing the output to be conditioned on `alpha`. Later on, if we incline a bit more towards classes we can make `Displace` public. Any other thoughts and opinions? @qutip/core-workers",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559:221,simpl,simple,221,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559,1,['simpl'],['simple']
Usability,"Hi @michelinesoley,. Your bug report inspired me to dig into the `qutip.control.optimize_pulse` sparse matrix support which lead to some fixes in #1621. When you increase `N` in your example from 2 to 3, it changes the internal type used by the optimizer to represent propagators. You can also make the `N = 2` case fail by changing the last line to:. ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=True)); ```. Your example can be made to work for `N = 3` (albeit slowly) by changing the following lines:. ```python; mapped = Qobj(mapped, dims=[[N]*4 + [2]*4] * 2); ```; (which was a bug in the example itself -- it created a Qobj with the right shape but wrong dimensions) and the last line to . ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=False)); ```; For me the `N = 3` case was slower with `sparse_eigen_decomp=True`, but perhaps it will be better for your full problem. If you would like to try `sparse_eigen_decomp=True` you are welcome to try the patch in PR #1621 and I would appreciate feedback on any performance issues for larger systems. We are currently working to support bigger systems in QuTiP 5 by using the new flexible Qobj data layer (which supports both sparse and dense matrices already and will hopefully support GPU and TensorFlow matrices in the near future).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386:1116,feedback,feedback,1116,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386,1,['feedback'],['feedback']
Usability,"Hi @nathanshammah ,. Indeed you are right, but I was concerned that with large Hilbert spaces as in my case storing the individual states at all measuring times would be simply unaffordable. That is why I was wondering if mcsolve could provide not only averaged observables but also the associated statistical errors. I hope this clarifies my problem. Thanks for the example too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1032#issuecomment-533216900:170,simpl,simply,170,https://qutip.org,https://github.com/qutip/qutip/issues/1032#issuecomment-533216900,1,['simpl'],['simply']
Usability,"Hi @nathanshammah! This seems to be a pretty simple issue. If you don't mind, can I work on this? ; On some preliminary searches, I found that there are 65 .py files in [qutip/qutip](https://github.com/qutip/qutip), each having some PEP8 formatting issues. How do you suggest I go about formatting them and submitting a pull request?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1527#issuecomment-785633970:45,simpl,simple,45,https://qutip.org,https://github.com/qutip/qutip/issues/1527#issuecomment-785633970,1,['simpl'],['simple']
Usability,"Hi @nwlambert,. Sure! This is the code I used to test the changes:. ```; import numpy as np; from qutip import *. Gamma_r = 0.5; Gamma_l = 0.1. n_ket = (1)/(Gamma_l + Gamma_r)*Qobj([[Gamma_r],[Gamma_l]], ); n_bra = Qobj([[1, 1]]). Id = Qobj([[1, 0], [0, 1]]). L = Qobj([[-Gamma_l, Gamma_r], [Gamma_l, -Gamma_r]],). I_ops = Qobj([[0, Gamma_r], [0, 0]]). L_s = sprepost(L, Id). I_s = sprepost(I_ops, Id). current, noise, skw = third_cumulant(L_s, rhoss=n_ket*n_bra, J_ops=[I_s], I_ops=[I_s], sparse=True, method=""pinv""). print(current, noise, skw); ```; It is based in a simple analytical example I found in a paper, which contains the expressions to check the results. This is the paper (page 7, the section ""Toy model""): [here is the paper](https://orbit.dtu.dk/en/publications/current-and-current-fluctuations-in-quantum-shuttles). As you can see it is really simple, although I had to make some changes to be able to applied in QuTip (I hope this doesn't lead to major fails). The effect of the frequency for the case when it is not defined in the function can be observed using the same example, just don't modify that part and you will see it, then you can try the solution I propose ( I don't know if I explained myself correctly).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2435#issuecomment-2126527531:569,simpl,simple,569,https://qutip.org,https://github.com/qutip/qutip/pull/2435#issuecomment-2126527531,2,['simpl'],['simple']
Usability,"Hi @rajathshetty20, Thanks for the interest. What you described sounds good. Would you like to make a Pull Request? You can go to the Pull Requests page and create one from a branch of your repository. There will be a template guiding you once you choose a branch.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1292#issuecomment-655742038:227,guid,guiding,227,https://qutip.org,https://github.com/qutip/qutip/issues/1292#issuecomment-655742038,1,['guid'],['guiding']
Usability,"Hi @sarsid, if you are going to play with it. It would be very helpful if you could give some feedback ;) Like if the doc is clear or if the interface is reasonable, or if there are any bugs. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844:94,feedback,feedback,94,https://qutip.org,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Hi @sarsid, there are still some tests failing. When you think the PR is really, just make it a ready-for-review PR and request a review. Besides, it would be great to address some of the style issues in code climate like ""Continuation line under-indented for visual indent"". Not all of them must be fixed though, it's more like a guide. The `pycodestyle` package can help you detect them locally if you would like to use it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967:331,guid,guide,331,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967,1,['guid'],['guide']
Usability,"Hi @tehruhn, I also have the error but it does not appear when using jupyter so I missed it. The error comes from a line inside a `try` block, so I am not sure why it is not properly suppressed... I did touch much in that area so it should be a simple fix.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1109#issuecomment-542708686:245,simpl,simple,245,https://qutip.org,https://github.com/qutip/qutip/issues/1109#issuecomment-542708686,1,['simpl'],['simple']
Usability,"Hi @yuli139304,. I can't really make out from the code you have written what you are trying to achieve -- it simply looks like you are using numpy and Qobj incorrectly. Could you type out in terms of Sx_nv, ... and D_xx, ... what you want using simple arithmetic? E.g. maybe you want `D_xx * Sx_nv + D_yy * Sy_nv + D_zz * Sz_nv` (which just works as is)?. Then once you have the simple expression written down, you can make it fancier (e.g. use np.dot, etc) if you need to. I'm going to close this for now because this doesn't look like a QuTiP bug, but feel free to ask more questions, either here or preferably on the mailing list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093459741:109,simpl,simply,109,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093459741,3,['simpl'],"['simple', 'simply']"
Usability,"Hi Anna, thank you for replying can you please give some more information about which particular part/s of the user guides you are finding these errors?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322:116,guid,guides,116,https://qutip.org,https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322,1,['guid'],['guides']
Usability,"Hi Boxi, thanks for the response. > If you are interested, we could propagate it as a ""QuTiP affilliated packages"". That would be great! It's not clear from the roadmap document exactly what ""QuTiP affiliated"" means in practice. I guess there will just be a list in the qutip docs/website with links to such packages?. The GSoC project looks interesting. I may apply if it looks like I will have time this summer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1439#issuecomment-778671906:146,clear,clear,146,https://qutip.org,https://github.com/qutip/qutip/issues/1439#issuecomment-778671906,1,['clear'],['clear']
Usability,"Hi Emily,. The photocurrent is the number of detector clicks (i.e., jumps) per unit time, averaged over all trajectories. For sufficiently many trajectories, it will approximate $tr[C_n \rho(t) C_n^\dagger]$. If I'm not mistaken, you should find that; ```math; x = \frac{1}{\Delta t} \frac{1}{N_t}; ```; where $\Delta t$ is the spacing in your `tlist` and $N_t$ the number of trajectories. The integer (photocurrent/x) is simply the number of clicks in that time interval in all trajectories; we multiply with x for the ""per unit time, averaged over all trajectories"" that I wrote above. Paul. (PS. I only noticed your username now - is it possible we had a chat at QTD in August? Hope you are doing well!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2539#issuecomment-2403687615:422,simpl,simply,422,https://qutip.org,https://github.com/qutip/qutip/issues/2539#issuecomment-2403687615,1,['simpl'],['simply']
Usability,"Hi Eric, I would love to but I simply don't know what the git diff issue is, might it be that only the file that I modified should show in the diff?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2136#issuecomment-1485494643:31,simpl,simply,31,https://qutip.org,https://github.com/qutip/qutip/pull/2136#issuecomment-1485494643,1,['simpl'],['simply']
Usability,"Hi Eric,. Thanks for looking at this and your feedback!. Alright, I'll close this PR and submit a new one for `dev.major`, and will split up the function as you suggest.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1708#issuecomment-965150452:46,feedback,feedback,46,https://qutip.org,https://github.com/qutip/qutip/pull/1708#issuecomment-965150452,1,['feedback'],['feedback']
Usability,"Hi Filippo,. On Wed, Apr 28, 2021 at 6:03 PM Filippo Vicentini ***@***.***>; wrote:. > However, our foundations do not prevent us to work with time-dependent; > objects.; >; > We simply will need to write the relevant class.; >; Perhaps slightly off-topic: How similar will this class look to QobjEvo? Or; do you not know yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218:179,simpl,simply,179,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218,1,['simpl'],['simply']
Usability,"Hi Jake, ; Thank you for the guide, quite complete. If you have time, an explanation on what can be found where (core vs core.data etc.) could be nice. . I believe we decided to move all the documentation to this repository. @nathanshammah should the devguide go in a docs folder here?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1359#issuecomment-696796867:29,guid,guide,29,https://qutip.org,https://github.com/qutip/qutip/issues/1359#issuecomment-696796867,1,['guid'],['guide']
Usability,"Hi Kevin. Thanks for your efforts on this. However, I am not in favor of merging this PR in this form. It is way too intrusive on the old API, it would break backwarks compatibility for no good reason as I see it. Personally I don't think that the _2t and _1t names are that confusing. As you point out, _1t is still a two-time correlation function (a one-time correlation function would not be a correlation function, just a simple expectation value), but the _1t and _2t is intended to refer to the number of free time variables. Perhaps this should be explained more clearly in the docstrings, but I don't think it is worth changing the API for this reason. I would prefer if you added the new mc solvers using the current API conventions, and preferably without changing the me and es based solvers. If you want to propose a new API the correct way to do it would be:; 1. First discuss the idea, so that everyone interested could weight in on the naming of the functions, the style of parameters and arguments etc.; 2. Implement the new API without disrupting the previous API; 3. Deprecate the previous API, so that using it gives a warning (but still works!). ; 4. Then finally after a few release cycles we may drop the old API. This would not happen until qutip 4.0 (see http://semver.org/), which we do not plan to release anytime soon. Therefore, we cannot accept any PRs that with backwarks breaking API changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-53827562:426,simpl,simple,426,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-53827562,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"Hi Louis,. There is work in development that will allow `QobjEvo` to be build from callback also, not just list. This will make callback work anywhere easily. . I was in the impression that H callback worked already for mcsolve. I rewrote part of mcsolve and broke it. Looking at your commit, I inverted `_funcrhs_with_state` and `_funcrhs`...; Sorry to have you take time to correct it. The 20x is big, but the list format allows for optimizations that are hard to do with a callback. A big one is that you don't need to create a new matrix/Qobj when calling `mul_vec`, just use it. With this code, I see a 20x between `mul_vec` and creating a Qobj a python function. . ```; import numpy as np; import qutip as qt. qoe = qt.QobjEvo([qt.qeye(3),[qt.destroy(3), lambda t,_:np.sin(t)]]); qoe.compile(). o1 = qt.qeye(3); o2 = qt.destroy(3) ; def H(t):; return o1 + o2 * np.sin(t). v = np.ones(3)+0j; %timeit qoe(0); %timeit qoe.mul_vec(0, v); %timeit H(0); %timeit H(0).data * v; ```. One optimization you could do is having the callback return a `np.array` instead of a Qobj. In `mcsolve`, this would probably be simple to implement and I expect some speed gain. But it can't really be officially supported in Qutip, for now. . ps. All those 'redundant' argument setting are for reusing the system (`ss`) in multiple call of `mcsolve` with different args, used in `correlation`. Using string coefficient, the compilation step can take a few second, so it is set to be able to reuse a compiled system, changing the `psi0`, `args`, `e_ops`, etc. This will become a less obscure feature in v5 when solver object are available.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634:1111,simpl,simple,1111,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634,1,['simpl'],['simple']
Usability,"Hi Paul,; Sorry let me clarify. ; 1. If the number of nonzero elements is very large, is Liouvillian still preferred to defining derivatives from Hamiltonian and collapse operators (Eq.(3) in the link below)?; 2. By constructing Liouvillian from Hamiltonian and collapse operators and defining the derivative as L*rho, is it computationally faster than Eq.(3) in http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-master.html. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/531#issuecomment-244283656:391,guid,guide,391,https://qutip.org,https://github.com/qutip/qutip/issues/531#issuecomment-244283656,1,['guid'],['guide']
Usability,"Hi Qi, thanks for your post. If you want to work on this it would be a very welcome contribution, and we can assist you and guide you along the way. However, I think it is difficult to write a general solver using waiting time distributions, because they usually require some analytical treatment and are therefore problem specific. As far as I know, if you don't have an analytical mean of finding the correct waiting time distribution you need to use the comparison of the decaying norm and a random number. In the paper by Dum et al that you refer to they also use this method, which is very similar to the one we use in mcsolve (the description you give in the first paragraph is not quite correct; we do use the decay of the wavefunction norm in the condition for when jumps occurs, like in Dum et al). See Fig. 1 in that paper for example. However, in some problems the waiting time distribution can be obtained analytically, and then it could be beneficial to be able to specify this waiting time distribution for the mcsolver in some way. Is that the kind of feature you are asking for?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-41977425:124,guid,guide,124,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-41977425,1,['guid'],['guide']
Usability,"Hi QuTip team and community! I just installed QuTiP on my Mac and I am very excited to try it out. I started playing with this section of QuTiP User Guide [Plotting on the Bloch Sphere; ](http://qutip.org/docs/4.1/guide/guide-bloch.html), but encountered an error. This code works well if I run it in Python console:; ```; from qutip import *; bloch = Bloch(); bloch.show(); ```; But the following code in Python console shows an error; ```; bloch.save(); ```. ```; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/qutip/bloch.py"", line 663, in save; '.' + format); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 1834, in savefig; self.canvas.print_figure(fname, **kwargs); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backend_bases.py"", line 2188, in print_figure; self.figure.dpi = dpi; File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 436, in _set_dpi; self.set_size_inches(w, h, forward=forward); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/figure.py"", line 745, in set_size_inches; manager.resize(int(canvasw), int(canvash)); File ""/Users/tilek/miniconda2/lib/python2.7/site-packages/matplotlib/backends/backend_tkagg.py"", line 540, in resize; self.canvas._tkcanvas.master.geometry(""%dx%d"" % (width, height)); File ""/Users/tilek/miniconda2/lib/python2.7/lib-tk/Tkinter.py"", line 1668, in wm_geometry; return self.tk.call('wm', 'geometry', self._w, newGeometry); _tkinter.TclError: can't invoke ""wm"" command: application has been destroyed; ```. When I try to execute the code from the User Guide as a complete .py Python file (see below) ; it produces first bloch_0.png file where it is supposed to, but then shows the same error.; ```; import numpy as np; from qutip import *; from scipy import *. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltoni",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796:149,Guid,Guide,149,https://qutip.org,https://github.com/qutip/qutip/issues/796,3,"['Guid', 'guid']","['Guide', 'guide', 'guide-bloch']"
Usability,"Hi Robert, I apologize for this issue, this is my first time working on an open source project. That being said, I should have been more clear that I was not in favor of meeting the project in its current form. I expected you would want the whole api left in tact - I will leave the API untouched. The main point here is that only one internal function is necessary (for each me, es, and mc) to solve for all of the public api calls. I would like to keep this as is and have the public functions call these three functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-53828769:137,clear,clear,137,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-53828769,1,['clear'],['clear']
Usability,"Hi Simon,. No we do not have time-dependent operators at the moment and focus on ground state/steady-state/dynamics of fixed hamiltonians or liouvillians. Actually nobody has (yet) studied with neural networks time-dependent systems as far as i know. However, our foundations do not prevent us to work with time-dependent objects. ; We simply will need to write the relevant class.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313:336,simpl,simply,336,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313,1,['simpl'],['simply']
Usability,"Hi Subimal,. This happens because of the truncation of the Fock space. You can see a related discussion here ; https://groups.google.com/g/qutip/c/DD6z8kYUU1I/m/k48XZS1AAgAJ. But in short, with truncation there is always an error in the commutators, so for truncating the Fock states at N photons, I think you find that [a,a.dag()] = \sum_{n=0}^(N-1) |n><n| - N|N><N| (you can check this by writing out these operators as projectors onto fock states, you will notice a*a.dag() is missing a term due to the truncation that should cancel with a term in a.dag()*a). Similarly putting the creation and annihilation operators into the position/momentum definition of the Hamiltonian, you find H = sum_{n=0}^(N-1)(n+0.5) |n><n| + N/2 |N><N|. Hence, since you truncated at 9 photons in your example, there is a degeneracy of the 4.5 eigenvalue. I am not sure if there is much can be done about this in general, perhaps the discussion I linked above might be useful. The main message I suppose is always take a larger cut-off than you think you might need, particularly if you are relying on the commutation relations to simplify things for you (which, given your example, can be a bad idea some times!). . I guess there is an interesting question about what is the best practice in these things, e.g., if you have a non-linear model, what form is it best to put it in before moving to a truncated basis? given your example, I would expect something like normal ordering to be better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770:1113,simpl,simplify,1113,https://qutip.org,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770,1,['simpl'],['simplify']
Usability,"Hi Vutshi. Yes, it is perfectly possible to implement the heterodyne detection using two homodyne detections with 50% efficiency, like you suggest. For the Milstein solver it might be the best, or at least the quickest, way to implement heterodyne, but I don't really agree that the current method is overcomplicated. It is in fact basically the same as the method you suggest, so I don't see that either would be more complicated or simpler than the other. The only issue is whether the two stochastic increments are divided up in several stochastic collapse operators or if the d2 function internally takes care of the both stochastic increments for a given stochastic collapse operator. The complexity is just shifted from the d2 function to somewhere else, which in general doesn't simplify anything. However, since the milstein solver you submitted is written so that it only support one increment per collapse operators, then there might be a real advantage of splitting the heterodyne process into two homodyne processes. . I've tried to make the qutip stochastic solver API as general as I could (and it is still a work in process), so that it will be as flexible as possible for implementing custom types of SMEs. Having support for multiple stochastic increments per collapse operators seems to be useful in certain applications. Although such SMEs could probably always be rewritten as multiple collapse operators with single stochastic increments, it might not always be the most natural way to define the SME. The heterodyne detection is one example of this, and it can be formulated in both ways, but I want the qutip SME API to work with both methods (at least with the basic euler solver, not necessarily with every solver we implement). However, that doesn't mean that the implementation of heterodyne for a particular solver has to use one way or the other. We should just document which solvers support multiple increments per operators and which solvers don't. So if it is easier t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22543416:434,simpl,simpler,434,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22543416,2,['simpl'],"['simpler', 'simplify']"
Usability,"Hi again,. In the documents [there is an example](http://qutip.org/docs/4.1/guide/guide-bloch.html#animating-with-the-bloch-sphere) of how to do an animation of a Bloch sphere by saving the frames of the movie using a for loop like so:. ```python; b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```. With `b.clear()` we erase the points and vectors in the image, which is nice for updating the data, but What if I want to update also the attributes of the Bloch sphere?. To give an example let's say that I want the viewing angle of the Bloch sphere to smoothly change throughout the animation. I can define a function like so:. ```python; def bloch_camera_path(t, dt, azim_0, azim_f, elev_0, elev_f):; azim = ((azim_f-azim_0)/dt)*t+azim_0; elev = ((elev_f-elev_0)/dt)*t+elev_0; return [azim, elev]; ```. This function changes the viewing angle across time from the initial `[azim_0, elev_0]` configuration to the final `[azim_f, elev_f]` configuration in a linear manner. So I thought that by doing. ```python; b = Bloch(); b.vector_color = ['r']; for i in range(len(t)):; b.clear(); b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```; My animation would had that change in position of the ""camera"", but the result is just as if `b.view` wouldn't update. The only way I can make this work is by making a new bloch sphere on each iteration and defining all the attributes again and again (which I find highly inconvenient in terms of speed), like so;. ```python; import os. for i in range(len(t)):; b = Bloch(); b.vector_color = ['r']; b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(os.getcwd()+'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1106:76,guid,guide,76,https://qutip.org,https://github.com/qutip/qutip/issues/1106,4,"['clear', 'guid']","['clear', 'guide', 'guide-bloch']"
Usability,"Hi again. I've looked at your notebook and code in some more detail now, and I have attempted to make the change in how the rhs function behaves. I had not seen an example where the contributions form different stochastic collapse operators depended on each other before, but I now see the need for having this possibility from looking at your implementation of the Milstein implementation with multiple Wiener processes. I have created a new branch in qutip called sme-rhs-restructuring (see commit 0b4a1a7a6591aca27ff6cb71310cf73af7ae2d7f and https://github.com/qutip/qutip/tree/sme-rhs-restructuring) where I have experimented with rhs functions that internally loop through the A_ops list. In simple cases it only loops through the list and calculates a contribution for each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and par",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:697,simpl,simple,697,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['simpl'],['simple']
Usability,"Hi albertomercurio, ; Thank you for the contribution. We will need at least one automated test: a function in `qutip/tests/test_correlation.py` that call `steadystate_floquet` and would fail if something is wrong. For example, in the next major version of qutip, `Qobj.data.tocsc()` will fail. We want it to be caught when running the tests in `qutip/tests` instead of having to remember to update it. It could be simply to running your manual test and instead of plotting the result, checking it with `numpy.testing.assert_allclose`. Ideally it should be done twice, once for `sparse=True` and once for `sparse=False`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056:414,simpl,simply,414,https://qutip.org,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056,1,['simpl'],['simply']
Usability,"Hi all, I'm learning to use this great package and I've found it very helpful, but I'm having trouble looking for thermal equilibrium density operator, $e^{-\beta H}$. There is a thermal density matrix constructor `thermal_dm` in this package but it seems to be too simple for my purpose. Any advice on how to calculate this value? Thank you all in advance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1002:12,learn,learning,12,https://qutip.org,https://github.com/qutip/qutip/issues/1002,2,"['learn', 'simpl']","['learning', 'simple']"
Usability,"Hi all,. I have a simple toy model of a 2-dim Hamiltonian. When I use; `mesolve(H, c_states[prepare], t, [Qobj([[0,0],[0,0]])], args={'tau': tau})`; I get the right result - however, if I try; `mesolve(H, c_states[prepare], t, [], args={'tau': tau})` or; `mesolve(H, c_states[prepare], t, c_ops=[], args={'tau': tau})`; the result is most definitely wrong. Any ideas?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/813:18,simpl,simple,18,https://qutip.org,https://github.com/qutip/qutip/issues/813,1,['simpl'],['simple']
Usability,"Hi all,. I'm getting to the point where I have enough of a developers' guide written, and we should start thinking about how and where to merge it in. It's currently hosted on my account at [jakelishman/qutip-devguide](https://github.com/jakelishman/qutip-devguide), with a rendered version at https://jakelishman.github.io/qutip-devguide. The section on the data layer hopefully gives quite a lot of detail on why the data layer exists, how it works, and how it's implemented. The whole data layer is still in alpha (check out the `dev.major` branch if you want to play with it, and the rest of what will become QuTiP 5.0), so some of the text will need to change, but hopefully it's now enough that if I get hit by a bus tomorrow, the work isn't incomprehensible. Any suggestions on parts to expand are welcome - either leave them in this issue, or make issues/PRs against my repository for the time being (until it's merged somewhere under QuTiP control). Clearly the documentation and notebooks sections aren't written yet, and at some point I'll migrate the packaging and distribution instructions into the dev guide too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1359:71,guid,guide,71,https://qutip.org,https://github.com/qutip/qutip/issues/1359,3,"['Clear', 'guid']","['Clearly', 'guide']"
Usability,"Hi all,. I'm not sure how to do pull request in this case so let it be a new Issue. I have implemented Milstein method for solving SME for homodyne detection scheme. For my problems it works much better than the simple Euler-Maruyama method. In case of a single Wiener increment all what is required is the new rhs function (see notebook attached). For multiple Wiener increments the provided infrastructure of QuTiP is not enough. One needs to provide all of the A_ops to the rhs. The modified stochastic.py file is also attached (from qutip.stochastic import smesolve_mil). The attached Notebook contains an example of SME with an analytical solution. Which allows to test smesolver for a single quantum trajectory. The notebook and the modified stochastic.py is here:; http://db.tt/dJNjGo3g. P.S. Due to nonlinearity in the stochastic term of quantum SME the simple Euler-Maruyama scheme doesn't work properly sometimes. Even Milstein struggles. From my experience semi implicit methods help. But in order to implement it in a convenient way one needs to modify QuTiP approach to the problem. Maybe instead of rhs function it would be better to have a function which returns \rho_{n+1} instead of d\rho. It could be more flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35:212,simpl,simple,212,https://qutip.org,https://github.com/qutip/qutip/issues/35,2,['simpl'],['simple']
Usability,"Hi all,; I am trying to reproduce the results of the photocurrent solver for open systems with my own methods, but I see some differences in the dynamics. In the [documentation webpage](http://qutip.org/docs/latest/guide/dynamics/dynamics-photocurrent.html#open-system) to what L_sys is, and why it should be corrected with that effective term. Can someone please give provide a reference for that statement?. Furthermore, are C_n in that equation equivalent to the sc_ops in Qutip?. Thank you for your help!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1163:215,guid,guide,215,https://qutip.org,https://github.com/qutip/qutip/issues/1163,1,['guid'],['guide']
Usability,"Hi everyone,. the table in [https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver) confuses me. What is 'name'? Can I chose it? I tried using custom names which did not work for me. Instead, using the keywords as explained in the section in [https://qutip.org/docs/latest/apidoc/classes.html?highlight=qobjevo#qobjevo](https://qutip.org/docs/latest/apidoc/classes.html?highlight=qobjevo#qobjevo) without any 'name' worked for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1398734865:58,guid,guide,58,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1398734865,2,['guid'],['guide']
Usability,"Hi guys,; yeah, the conflicts are because of the now merged #1224, which we knew about when we merged that one. It's a simple fix, but I'm hesitant to do it directly on this PR, depending on how we want to merge it. The simplest way is that I make the required changes, fix the merge conflict, and we keep going until this whole behemoth merges in one go. This ends up in the commit history being a bit of a mess, and it'll take ages. Instead, I think it might be better if I instead split this PR into a few different ones:; 1. add `pytest` markers and other test niceties; 2. the test files that Eric is checking; 3. the QIP-related ones so that Boxi can check those; 4. `brmesolve` tests; 5. trivially changed files; 6. whatever's left. This has the advantage that I can rebase them all individually to neaten them up with any changes suggested, and we can get parts merged in faster. PRs 2 to 6 will depend on PR 1, so this would require getting that first one merged ASAP, then the others will all be modular and can be merged in any order at any speed. If you're happy with that plan, I'll cherry-pick/rebase out the necessary bits of the history and form the new PRs. The end result will be 6 PRs, which, when merged, will have no conflicts, and will leave the repository in the exact same state it would be if this PR was merged in one lump (with the relevant conflict fixed). For each PR, then we just have a simple process:; 1. you review files; 2. I make suggested changes; 3. repeat until happy; 4. I rebase the PR to squash it into a logical form; 5. you merge",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033:119,simpl,simple,119,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033,3,['simpl'],"['simple', 'simplest']"
Usability,"Hi paul,. Thanks for the feedback. I think maybe Rob had originally included the mkl stuff, but I took it out when I was bug fixing. Will put it in, I didn't realize it gave such a big performance boost. thats cool. I will also follow your advice and stick in a finite frequency to make sure all the solvers work. . I had a poke around in discussion forums for numpy and scipy, and it seems like the problem is that they throw an exception when they decide L is ""exactly singular"" (which technically it is). Sometimes numerical rounding errors prevent this exception, as occurs in larger systems, or adding a finite frequency, so it tries to solve it anyway and succeeds, because the projector Q on the right-hand side guarantees a solution. Conversely, matlab will just throw a warning, and try and solve it anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/528#issuecomment-243988381:25,feedback,feedback,25,https://qutip.org,https://github.com/qutip/qutip/pull/528#issuecomment-243988381,1,['feedback'],['feedback']
Usability,"Hi! I'm working on this issue and was wondering if the alpha value should be an array-like that would apply to each point or vector individually, similarly to the color option I've seen in dev.major, or make it more simple. Where a single value would apply to all the rendered vectors or points in their add method.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1287#issuecomment-1066956078:216,simpl,simple,216,https://qutip.org,https://github.com/qutip/qutip/issues/1287#issuecomment-1066956078,1,['simpl'],['simple']
Usability,"Hi!. #### Imports; Honestly it wasn't really a particularly conscious decision, and there's no problem with `from qutip import (x, y, z)` lines though I don't think `from qutip import *` is a very good idea, especially with quite how many names `qutip` exports. The `from qutip.very.deep.nested.module import name` is certainly good, and I think I've generally left those. I think I started converting in a few places because there were things like `from qutip import Cubic_Spline` and `from scipy.interpolate import CubicSpline`, and then the test was unreadable as to which was which. Having `qutip.Cubic_Spline` and `scipy.interpolate.CubicSpline` is unambiguous. The smaller cases like `from qutip import Qobj` are highly unlikely to have any conflicts, but in general I just went for consistency. That all said, there's certainly arguments both ways, e.g. explicit `qutip.member` is good because it's clearly explicit at point of use which makes reading the code much easier, but bad because it adds unnecessary chaff which makes scanning lines take longer. I hadn't put much thought into it before, and I think I was just generally writing in my default style. #### Test ordering; I hadn't much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:906,clear,clearly,906,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['clear'],['clearly']
Usability,"Hi!. About the comments: yes, absolutely I'll leave more. It's a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a goo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:257,clear,clearer,257,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['clear'],['clearer']
Usability,"Hi!; I was thinking to use Floquet Formalism to solve some time-dependent problem.; So I firstly try the case in Users Guide, but some unexpected errors occurred. ---------------------------------------------------------------------------; ```; %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; delta=0.2*2*np.pi;; eps0=1.0*2*np.pi;; A=2.5*2*np.pi;; omega=1.0*2*np.pi;; H0=-delta/2.0*sigmax()-eps0/2.0*sigmaz(); H1=A/2.0*sigmaz(); args={'w':omega}; H=[H0,[H1,'sin(w*t)']]; T=2*np.pi/omega; f_modes_0, f_energies = floquet_modes(H, T, args); ```. Here is the error information：. ---------------------------------------------------------------------------; ```; DistutilsPlatformError Traceback (most recent call last); F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 215 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 216 inplace=build_inplace, language_level=language_level); 217 mod = imp.load_dynamic(name, so_path). F:\Anaconda3\lib\site-packages\pyximport\pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 191 inplace=inplace,; --> 192 reload_support=pyxargs.reload_support); 193 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. F:\Anaconda3\lib\site-packages\pyximport\pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. F:\Anaconda3\lib\distutils\dist.py in run_commands(self); 954 for cmd in self.commands:; --> 955 self.run_command(cmd); 956 . F:\Anaconda3\lib\distutils\dist.py in run_command(self, command); 973 cmd_obj.ensure_finalized(); --> 974 cmd_obj.run(); 975 self.have_run[command] = 1. F:\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py in run(s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854:119,Guid,Guide,119,https://qutip.org,https://github.com/qutip/qutip/issues/854,1,['Guid'],['Guide']
Usability,"Hi, @abhisekupadhyaya nice work! . Usually a high cognitive complexity indicates that the function is too long or too deep for understanding and maintenance, but sometimes it exaggerates a bit, so it's fine as long as everything is clear. To reduce the function length, for example, if the checking part and each gate parsing can be resued (e.g for QASM v2), they can be defined in a separate function. Another minor thing, what about leaving a short warning when ignoring the unsupported code?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745:232,clear,clear,232,https://qutip.org,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745,1,['clear'],['clear']
Usability,"Hi, I would like to contribute to this issue as part of the UnitaryHack2024. I will incorporate a basic use of gates module to guide-basics.rst and a table of the available gates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389#issuecomment-2140841510:127,guid,guide-basics,127,https://qutip.org,https://github.com/qutip/qutip/issues/2389#issuecomment-2140841510,1,['guid'],['guide-basics']
Usability,"Hi, I'm now still working on cleaning the codes, make them better documented and making the notebook more clear. After I finished everything, I will push my job to github and leave a comment here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/282#issuecomment-77509684:106,clear,clear,106,https://qutip.org,https://github.com/qutip/qutip/pull/282#issuecomment-77509684,1,['clear'],['clear']
Usability,"Hi, I've been starting to learn qutip to write my dissertation on Quantum computing. I was running the script on Vacuum Rabi oscillations in the Jaynes-cummings model from the example section on [qutip.com](http://qutip.com/). Originally it was working correctly. However, I have come back to it after about a month and I have run into an issue. When I run the code copied straight from the website it returns this error . ""ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class."". so I increase the nsteps to 100000:; output = mesolve(H, psi0, tlist, c_op_list, [a.dag() * a, sm.dag() * sm], options = Options(nsteps= 10000)). however I get an output that is completely different to what I should be getting. What I should be getting: . ![image](https://user-images.githubusercontent.com/75099190/186995018-26029946-bba2-4b71-888d-74b88361c832.png). What my code is outputting:. ![image](https://user-images.githubusercontent.com/75099190/186995092-75b9d285-f854-487f-bd11-7dffc19d57cb.png). Do you have any idea what could be causing this error?; Any help would be hugely appreciated . my code:. import matplotlib.pyplot as plt; import numpy as np; from qutip import *. wc = 1.0 * 2 * np.pi # cavity frequency; wa = 1.0 * 2 * np.pi # atom frequency; g = 0.05 * 2 * np.pi # coupling strength; kappa = 0.005 # cavity dissipation rate; gamma = 0.05 # atom dissipation rate; N = 15 # number of cavity fock states; n_th_a = 0.0 # temperature in frequency units; use_rwa = True. tlist = np.linspace(0, 25, 100). psi0 = tensor(basis(N, 0), basis(2, 1)) # start with an excited atom. a = tensor(destroy(N), qeye(2)); sm = tensor(qeye(N), destroy(2)). if use_rwa:; H = wc * a.dag() * a + wa * sm.dag() * sm + g * (a.dag() * sm + a * sm.dag()); else:; H = wc * a.dag() * a + wa * sm.dag() * sm + g * (a.dag() + a) * (sm + sm.dag()). c_op_list = []. rate = kappa * (1 + n_th_a); if rate > 0.0:; c_op_list.append(np.sqrt(rate) * a). rate = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987:26,learn,learn,26,https://qutip.org,https://github.com/qutip/qutip/issues/1987,1,['learn'],['learn']
Usability,"Hi, if you look at the conda instructions for VS, you will find some alternatives ; https://conda.io/docs/user-guide/tutorials/build-windows.html. There is a VS community edition which might be smaller. . Alternatively, on Windows 10, you can install a Linux subsystem (supported officially by Windows) and then I am hoping that you don't need to deal with a complete VS installation. Please find the instructions to get a native Linux subsystem in Windows 10 below:; https://docs.microsoft.com/en-us/windows/wsl/install-win10. Let me know if you need any help or encounter issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-368383471:111,guid,guide,111,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-368383471,1,['guid'],['guide']
Usability,"Hi, interesting, thank you for your detailed description!. > When the transformation is made for DrudeLorentzBath, the result generated differs from that for DrudeLorentzPadeBath (and it is not about the number of frequencies used). First of all, are you sure that either of `DrudeLorentzBath` and `DrudeLorentzPadeBath` give the right solution? Because the `ck_real` / `vk_real` are supposed to be the coefficients / exponents of the real part of the correlation function (and the others the imaginary part), and if you plug in imaginary parameters, then terms that previously were only in the real parts could pick up imaginary parts etc. Perhaps this kind of thing cancels out when you add the two unphysical D-L baths to get the shifted D-L bath?. Regarding your proposed solution -- I would say, in the case where `gamma` is not real, the spectral density is unphysical and there is no *a priori* correct way to handle this case. In other words, in a sense, the code before the change is wrong (or right) and the code after the change is just as wrong (or right). I therefore think it wouldn't hurt to implement this change so that your use case can be supported. However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. A more ""complete"" and probably more efficient solution would be to add a whole new `ShiftedDrudeLorentzBath`, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a `BosonicBath` object from them directly.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801:1347,clear,clear,1347,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801,1,['clear'],['clear']
Usability,"Hi, thak you for the feedback it is really helpful. Using lower density matrices is reducing my time by 10%, and without the fix it produces error; it is an excellent finding.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822574194:21,feedback,feedback,21,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822574194,1,['feedback'],['feedback']
Usability,"Hi, thank you all for the answers, and sorry for the delay. I understand there is some confusion because what I'm trying to do doesn't really have a physical meaning, I simply wanted to convert between matrices and vectors because I'm looking for computational gains by doing so. ; If this was numpy, I would simply use numpy.reshape. ; I guess it actually makes sense if this is not a permitted operation in qutip, I was just exploiting the operator_to_vector function for a different reason. @quantshah ; Thanks, I tried the code, but even the test_vec implementation fails with error ; File ""qutip\superoperator.py"", line 278, in vector_to_operator; shape = (np.prod(q.dims[0]), np.prod(q.dims[1])). IndexError: list index out of range. @jakelishman ; Thanks for the tip for the tensor product basis state creation.; It's not a density matrix that I want to do, I just wanted to reshape the array. As a side note, I notice that I have a very large computational cost when I work with dense matrices and state vectors, as you do when you simulate a quantum circuit with parametric rotations on each qubit, and this is due to the fact that qutip uses a sparse matrix representation. If I do the same operations with numpy I get a large computational gain, because the arrays are dense. Is there any way that I don't know about to save the Qobj data in dense form?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-601662221:169,simpl,simply,169,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-601662221,2,['simpl'],['simply']
Usability,"Hi, thank you very much for the quick responses and linking the other issues. . > But your making sparse matrices dense. Yes, I agree. But I was trying to just work out a simple problem which looks like. `dp[n]/dt = spre(Q)*p[n-1] + spost(Q)*p[n+1]. where p is a list of flattened density matrices. I understand that a better version of this would be to completely flatten p and write the RHS as a large `L` as Alex points out and then use `cy_ode_rhs`. But here is the issue, in the HEOM case, building `L` runs out of memory if we consider a large size for the set of auxiliary density matrices `p`. As such, I cannot completely build the `L` for the cases I am looking into. The approach that I was trying to take was to keep building the p's as we integrate. In this case, each RHS computation is a small dense matrix-vector computation and I can choose to keep or discard it depending on the max value of its elements. This gives the flexibility to truncate how many auxiliary density matrices I keep. The motivation is that in some papers on the Heom method, there is a dynamic filtering of the auxiliary matrices and it has been shown that with just a few 100s of auxiliary matrices, you can get a reasonable result. But the way we have the code in QuTiP now pre-computes the `L` and gets stuck due to memory limitations. @agpitch Thanks for the suggestions. I am trying to make the HEOM work without building the `L`. Perhaps I will still run into memory issues if I try to initialize the full set of `p` but if the dynamic filtering approach works out, then I can escape the memory problem by only building a few of the `p`'s and deciding to append them or not based on some conditions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831#issuecomment-368980965:171,simpl,simple,171,https://qutip.org,https://github.com/qutip/qutip/issues/831#issuecomment-368980965,1,['simpl'],['simple']
Usability,"Hi, thanks for the feedback. I will try to update it taking these comments into account. The names of the gates in the table are the same that appear in https://github.com/qutip/qutip/blob/master/qutip/core/gates.py, I can put them in lowercase to exactly match the functions in the code. I also see that the module ""qutip.core.gates"" is missing in [ https://qutip.readthedocs.io/en/master/_modules/index.html](url) so I will also added there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2142731183:19,feedback,feedback,19,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2142731183,1,['feedback'],['feedback']
Usability,"Hi, this is ready for review. It probably needs a lot of refactoring but I have documented all functions and provided unit tests. I made a simple script for my lab where you can specify a circuit in a text file and the outputs will be generated. You can check it out here: https://github.com/sahmed95/icm. I have an example describing the use of this module. Where do the examples go ? @ajgpitch @nonhermitian . As I mentioned, @alexandrupaler should be the right person for review. Dr. Devitt also mentioned Damian from ProjectQ (?) who could help perhaps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-275668058:139,simpl,simple,139,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-275668058,1,['simpl'],['simple']
Usability,"Hi,. I cannot find any doc (except the source code itself) about which progress bar are available and how to use them. Especially, the only references to the progress bar in [the doc](http://qutip.org/docs/3.1.0/) are the options for `mesolve` etc. I think it could be really useful to document it, or provide an iPython notebook making use of it. EDIT: Plus the docstring of `mesolve` function (for instance) seems to contradict the first lines of the function:. ```; progress_bar: BaseProgressBar; Optional instance of BaseProgressBar, or a subclass thereof, for; showing the progress of the simulation.; ```. versus. ``` python; if progress_bar is None:; progress_bar = BaseProgressBar(); elif progress_bar is True:; progress_bar = TextProgressBar(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/444:71,progress bar,progress bar,71,https://qutip.org,https://github.com/qutip/qutip/issues/444,2,['progress bar'],['progress bar']
Usability,"Hi,. I have been trying to use `qutip.floquet.floquet_master_equation_steadystate` method to get the steadystate of my system, but the docstring is not super useful. From the docstring, I guess I should call it as `qutip.floquet.floquet_master_equation_steadystate(H, A)` where. * `H` is my (time-dependent) hamiltonian, similar as the one used in http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html#floquet-formalism-in-qutip.; * `A` is the [`A` matrix output](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L587-L588) from `floquet_master_equation_rates` call. I think I missed something as I am getting an error; ```; TypeError: Solving for steady states requires Liouvillian (super) operators; ```; from https://github.com/qutip/qutip/blob/master/qutip/steadystate.py#L224. Additionnally, I think there is a much easier way to find the steadystate of such a system, using something like (not really well written nor optimised):. ```python; def floquet_master_equation_steadystate2(A):; """"""; TODO. Parameters; ----------. A : TODO; A matrix used to build the master equation.; """"""; B = np.zeros_like(A); N = A.shape[0]; for a in range(N):; for b in range(N):; # Convergence of off-diagonal terms in density matrix to 0; assert(-0.5 * np.sum(A[:, a] + A[:, b]) < 0); # Diagonal terms of density matrix; if a != b:; B[a, b] = A[a, b]; else:; B[a, b] = -1.0 * np.sum([; A[nu, a] for nu in range(N) if nu != a]; ); eigval, eigvec = Qobj(B).eigenstates(); assert(np.isclose(eigval[-1], 0, atol=1e-15)); return eigvec[-1] * eigvec[-1].dag(); ```. which basically looks for the eigenvector associated with 0 eigenvalue of a matrix derived from `A`, which is basically coming directly from equation 251 of [Gri98](http://qutip.org/docs/latest/biblio.html#gri98).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/768:377,guid,guide,377,https://qutip.org,https://github.com/qutip/qutip/issues/768,1,['guid'],['guide']
Usability,"Hi,. I was trying to run some simulations with [Floquet formalism in Qutip](http://qutip.org/docs/4.1/guide/dynamics/dynamics-floquet.html) in a Jupyter notebook, when I ran into a ""The kernel appears to died unexpectedly, it will restart"" error message. I tried to understand what is happening, and it seems it is due to a segmentation fault. It happens also when run in CPython 3.5.2. `gdb` was not super useful, and I could not get it to output any interesting backtrace. Manually tracking the issue down, it seems that `qutip.floquet.floquet_modes` call `qutip.propagator.propagator` which itself calls `sesolve`. As far as I could track the error down for the moment, it seems to happen in [this call](https://github.com/qutip/qutip/blob/master/qutip/propagator.py#L159-L160). My code is quite lengthy, and I did not yet manage to isolate a small snippet to reproduce the error :/ Not sure what is the best way to debug this either :/. ```python; >>> qutip.about(). QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 0.19.1; Cython Version: 0.27.1; Matplotlib Version: 2.0.0; Python Version: 3.5.2; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/qutip; ```. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/761:102,guid,guide,102,https://qutip.org,https://github.com/qutip/qutip/issues/761,1,['guid'],['guide']
Usability,"Hi,. I was writing a simple code for a time dependent driving of a two level atom with the excited state decay and encountered the following problem: If I evolve the system using mesolve for particular time dependence of my driving field, namely if the evolution time is set to be from t = 0 to t = 3.5 in the units of 1/(Rabi frequency) and the driving is only present between t = pi/2 and t = pi, I get expected results if I do not include any collapse operators (using []), however as soon as I use the usual collapse operator corresponding to the excited state decay it gives me for all the time the initial values of the quantities. It happens even if I set the decay rate to zero! Also, mcsolve works fine in both cases.; Here is the code that I use:; ```; import numpy as np; import pylab as plt; import scipy as scipy; from qutip import *. #System parameters; Omega = 1; Gamma = 0.1. g = basis(2,0); e = basis(2,1); sgg = g * g.dag() #ground state population; see = e * e.dag() #excited state population; sge = g * e.dag() #atomic coherence sigma_ge. #Driving Hamiltonian; H1 = Omega * (sge + sge.dag()). #Time dependence of the drive; def H1_coeff(t,args):; if t > np.pi:; c =0; elif t >= np.pi/2:; c = 1; else:; c = 0; return c. #Complete Hamiltonian; H = [[H1, H1_coeff]]. #Time; tspan = np.linspace(0,3.5,500). #initial state; psi0 = g. #collapse operators; c_ops = [np.sqrt(Gamma) * sge]. #calculated expectation values; e_ops = [sgg, see]; results = mesolve(H, psi0, tspan, c_ops, e_ops). #plotting the results; fig, ax = plt.subplots(1,1); ax.plot(tspan, results.expect[0]); ax.plot(tspan, results.expect[1]); plt.show(); ```; And here is the information about the packages that I'm using; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.1; Scipy Version: 0.19.1; Cython Version: 0.26; Matplotlib Version: 2.0.2; Python Version: 3.6.2; Number of ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771:21,simpl,simple,21,https://qutip.org,https://github.com/qutip/qutip/issues/771,1,['simpl'],['simple']
Usability,"Hi,. I'm new to the project as a user. I am trying to solve some problems involving multiple baths with Floquet formalism. Just wondering if you already implemented it in your current version? . Notice this just now in the documentation: http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-floquet.html where 'Currently the qutip.floquet.fmmesolve can only accept a single environment coupling operator and spectral-density function.' But I think it's good and not so difficult to come up with a general solvers where multiple baths are supported by myself. Is it okay if I contribute to this as well?. Cheers,; Tianqi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1464:266,guid,guide,266,https://qutip.org,https://github.com/qutip/qutip/issues/1464,1,['guid'],['guide']
Usability,"Hi,. Is there a reason for not using aspect ratio ""equal"" for the resulting plot of the `plot_wigner` function? Wigner plots are much more readable when using such settings, in my opinion. Thanks. EDIT: I can make a PR for this, but would rather have some feedback before doing it :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/539:256,feedback,feedback,256,https://qutip.org,https://github.com/qutip/qutip/issues/539,1,['feedback'],['feedback']
Usability,"Hi,. It seems there are some errors in the Floquet `mesolve`-equivalent function, which are not seen when considering a simple qubit. Consider for instance an harmonic oscillator with a drive, which should converge towards a coherent state:. ```python; %matplotlib notebook. import numpy as np; from qutip import (basis, destroy, expect, fsesolve, sigmax, sigmaz, rand_ket, num,; mesolve); from qutip.floquet import (floquet_modes, floquet_modes_table,; floquet_modes_t_lookup, fmmesolve). # Parameters; wc = 1.0 * 2 * np.pi; wp = 1.5 * 2 * np.pi; T = 2 * np.pi / wp; N = 20; epsilon_p = np.sqrt(2) * np.sqrt(8) * (wp - wc). psi0 = basis(N,0); a = destroy(N); H = [; wc * a.dag() * a,; [1.0j * epsilon_p * (a.dag() - a), 'cos(wp * t)']; ]. args = {; 'wp': wp; }. # noise power spectrum; gamma1 = 0.05; def noise_spectrum(omega):; return 0.5 * gamma1 * omega / (2 * np.pi). tlist = np.linspace(0, 5 / gamma1, 100). # find the floquet modes for the time-dependent hamiltonian; f_modes_0, f_energies = floquet_modes(H, T, args). # precalculate mode table; f_modes_table_t = floquet_modes_table(f_modes_0, f_energies,; np.linspace(0, T, 500 + 1),; H, T, args). # solve the floquet-markov master equation; output = fmmesolve(H, psi0, tlist,; [a], [], [noise_spectrum], T, args). # For reference: calculate the same thing with mesolve; output_ref = mesolve(H, psi0, tlist, [np.sqrt(gamma1) * a],; [], args); ```. `output_ref.states[-1]` is a coherent state as expected. ![image png 1200 x 1200 pixels - redimensionnee 79](https://user-images.githubusercontent.com/3856586/31828448-433fd44a-b588-11e7-9305-e44f88ed8c1b.png). But `output.states[-1]` is far from being a coherent state. ![image png 1200 x 1200 pixels](https://user-images.githubusercontent.com/3856586/31828469-56631e42-b588-11e7-8950-0ca04ce3c70c.png). I tried to debug it, without real success for now :/. EDIT: Might be partially related to #624.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772:120,simpl,simple,120,https://qutip.org,https://github.com/qutip/qutip/issues/772,1,['simpl'],['simple']
Usability,"Hi,. There is a [manual integration](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L602-L624) using rectangles method in `qutip.floquet` file which sometimes fail. Problem is that the number of timesteps, `nT`, is hardcoded and not accessible to the user. In my case, `nT = 100` does not seem to be enough and the integral is wrong. A quick and dirty fix is to have an extra `nT=100` keyword argument to `floquet_master_equation_rates`, so that user can overload it. Still, it does not seem to be the most efficient way of doing it. I have a quick fix I can contribute which is using `scipy.integrate.simps` instead. This requires keeping an array of values to integrate in memory (which is less memory-efficient) but I could keep `nT=100` and get the correct integral by using this method. I guess the best option would be to use [`scipy.integrate.quad`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad), as it uses an adaptive algorithm. I can contribute a fix for this, just looking for feedback on the best available option :). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/767:1056,feedback,feedback,1056,https://qutip.org,https://github.com/qutip/qutip/issues/767,1,['feedback'],['feedback']
Usability,"Hi,. Yes, I know, that's why I added the md file. I updated it now, thanks,; adding more info on general resources to learn about QuTiP and more; references to the #3 project, i.e. your blog and the talk.; https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2020. Neill, Alex, if you have a lead, please add a HEOM project. Bests,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Tue, Feb 25, 2020 at 5:10 PM Boxi Li <notifications@github.com> wrote:. > Hi Nathan,; >; > I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > ht",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:118,learn,learn,118,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['learn'],['learn']
Usability,"Hi,; I just recently installed qutip on Canopy using a Windows Binary. When I try to run one of the tests, e.g. test_wigner.py, I get this error:. ---. AttributeError Traceback (most recent call last); C:\Users\David Feng\Desktop\qutip-3.1.0\qutip\tests\test_wigner.py in <module>(); 37 from numpy.testing import assert_, run_module_suite, assert_equal; 38 ; ---> 39 from qutip.states import coherent, fock; 40 from qutip.wigner import wigner; 41 from qutip.random_objects import rand_dm, rand_ket. C:\Users\David Feng\Desktop\qutip-3.1.0\qutip__init__.pyc in <module>(); 60 qutip.settings.ipython = True; 61 except:; ---> 62 qutip.settings.ipython = False; 63 ; 64 # -----------------------------------------------------------------------------. AttributeError: 'module' object has no attribute 'settings' . The AttributeError also appears when I simply try to import qutip from the command line. I'm not too familiar with Python scripting so any assistance on the matter would be greatly appreciated. Thank you!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469:848,simpl,simply,848,https://qutip.org,https://github.com/qutip/qutip/issues/469,1,['simpl'],['simply']
Usability,"Hi,; The documentation is not clear for this and propagator is a little strange for `t`. Propagator uses the `t` as a list the same way `tlist` is used by `sesovle` or `mesolve` and those solver support continuing an evolution:; ```; H = [op1, [op2, f]]; res1 = qutip.sesolve(H, psi0, tlist=[0,1,2,3,4]); res2 = qutip.sesolve(H, res1.states[-1], tlist=[4,5,3,7,8]); ```; So if `tlist` is a list with one element, it does no evolution and the propagator is 1 (`qeye`). If you were to compute propagators with `tlist` with 3 or more elements, you would receive a list of propagator and the first one would always be 1. I am not sure where or if it is documented that evolution starts at the first element of the list of time, not at zero. Hope this help.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/950#issuecomment-463457230:30,clear,clear,30,https://qutip.org,https://github.com/qutip/qutip/issues/950#issuecomment-463457230,1,['clear'],['clear']
Usability,"Hi. Thanks for reporting this problem. I'm not sure if I'd call it a bug or not, but I understand that this behavior can be a bit confusing. With odeOpts.rhs_reuse = True the same function will be use until rhs_clear() is called, which in your case would be. qtp.rhs_clear(); qtp.propagator([H0, [Hint, '1-w*t']], 5, [], {'w':1/5.}, opt=odeOpts). when yo change the time-dependency function strings. . Maybe this needs to be emphasized more in the documentation, or perhaps rhs_clear() could be called automatrically from within propagator, but this could prevent one from really reusing the rhs function for several propagators with the same rhs function (for example with different H0 or Hint). . I'll leave this ticket open for now so we'll remember to think some more about how this issue should be handled in the best way. . Thanks again for your feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17106896:852,feedback,feedback,852,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17106896,1,['feedback'],['feedback']
Usability,"Hmmm. You're right that there will be some nasty merge conflicts with #1181, but I don't see anyway around those, to be honest without that PR being merged before this one (which doesn't look very likely). Barring #1181 getting merged in the next day or two, I'd just go ahead with these commits as written. If the new-style tests were merged, `test_gates.py` would have a much tinier diff. The single-qubit gates would just go between lines 222 and 223 in https://github.com/qutip/qutip/blob/77c21f8a97ddfff2353490d3587cc1effdfe9abc/qutip/tests/test_gates.py#L222-L239 as; ```python; pytest.param(gates.x_gate, 0, ""X""),; pytest.param(gates.y_gate, 0, ""Y""),; ...; ```; (and we'd probably change the function name to `test_one_qubit`). The controlled qubits would similarly go into the next test's parametrisation list: https://github.com/qutip/qutip/blob/77c21f8a97ddfff2353490d3587cc1effdfe9abc/qutip/tests/test_gates.py#L241-L259. Overall, it's clear that you can't write sensible new-style tests without #1181 having been merged, so I wouldn't worry about it too much. I did drop in a couple of comments in-line (minor nitpicking), but given that this file may well get pretty much overwritten - keeping the actual tests, of course! - in short order, I wouldn't consider them changes that need to be made, unless Boxi asks. Also, as you noted, `test_gates.py` doesn't really do much testing of the actual form of the gates yet. I haven't actually been adding new tests as I go, because I wanted to keep #1181 roughly focussed on just converting what we've got so far.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607833088:947,clear,clear,947,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607833088,1,['clear'],['clear']
Usability,"Hmmm... interestingly it seems to work sometimes... ; I think the only way to work around it, is to execute the same program in parallel python consoles?; That way each program should live in it's own bubble... I hope :S; It's a shame. My problem is so stupidly simple to parallelize. Thanks anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/822#issuecomment-365681603:262,simpl,simple,262,https://qutip.org,https://github.com/qutip/qutip/issues/822#issuecomment-365681603,1,['simpl'],['simple']
Usability,"Huh, your right, it seems like there is some issue with my install, cleared it all out and it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242815199:68,clear,cleared,68,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242815199,1,['clear'],['cleared']
Usability,I After the discussion in the GSoC meeting I changed the implementation to:; - try `mul` and return `NotImplemented` if `TypeError` is raised. (as jake suggested); - try `complex(other)` to inger `ishemr` and `isunitary`. (as Eric suggested). I think this is the simplest solution. @jakelishman are you ok with this implementation? I think the ideas of numpy broadcasting Qobj as scalar and `_scalar_properties` are really good but probably out of the scope of this PR.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-891906074:263,simpl,simplest,263,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-891906074,1,['simpl'],['simplest']
Usability,"I added a section to the test suite that will skip the tests if pyopencl is not installed in the last commit. To get them working, installing pyopencl via pip will not be sufficient. There are nice guides for setting up OpenCL in [Gentoo](https://wiki.gentoo.org/wiki/OpenCL) and [Arch](https://wiki.archlinux.org/index.php/GPGPU#OpenCL). But most OpenCL implementations are proprietary. I found an example of installing AMDAPP in a travis vm [here](https://github.com/JuliaGPU/OpenCL.jl/blob/master/.travis.yml). This is the OpenCL implementation I would recommend in absence of a GPU. But this script circumvents the license agreement and I am not sure whether this is legal. If you still intent to set this up, you can push changes to this branch as well. As for documentation I feel there is not much to document. There are already notebooks showing how to use `mcsolve` [here](http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/example-photon_birth_death.ipynb) and [here](http://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-6-Quantum-Monte-Carlo-Trajectories.ipynb). If everything is set up just exchanging `mcsolve` with `mcsolve_cl` should do the trick. The nuances are documented in the docstring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-258609202:198,guid,guides,198,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-258609202,1,['guid'],['guides']
Usability,"I adjusted the test to be sensitive to the original issues. new test is just a driven two-level system. not sure why the old test of a driven boson was insensitive to that test. i could make it sensitive by making the drive act on the frequency, like the example in #2386 but this is simpler. . also adjusted the test to compare a period of the dynamics from mesolve to the result from the steadystate solver.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2393#issuecomment-2053629426:284,simpl,simpler,284,https://qutip.org,https://github.com/qutip/qutip/pull/2393#issuecomment-2053629426,1,['simpl'],['simpler']
Usability,"I agree that on top level, these may seldom be used. It is not straightforwardly clear what is the added value of removing them, if no one is complaining or they are not hard to maintain. It may make things cleaner, but I am not aware of the implications. `eseries` seems used in the correlation module, possibly (marginally) also in `expect`. . If QobjEvo is a more modern way of applying`essolve`, that is fine with me, it would be nice to restructure it that way. My advice before switching to QobjEvo, is that its use be first well documented in the documentation's Users guide, which could be done by copy-pasting chunks from the notebook.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1281#issuecomment-638108837:81,clear,clear,81,https://qutip.org,https://github.com/qutip/qutip/issues/1281#issuecomment-638108837,2,"['clear', 'guid']","['clear', 'guide']"
Usability,I agree with @Ericgig on the possibility of having no template and adding the suggestions for tests in the template. . I understand now that the changelog in qutip/qutip was a bad idea for the reasons you mention.; I still think it would be nice to somehow automate the way the changelog is compiled (right now by whoever is in charge of the release). Is there a simple and smart way to do this? Otherwise we could just look up the changelog section in each PR as per this template.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649:363,simpl,simple,363,https://qutip.org,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649,1,['simpl'],['simple']
Usability,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:855,clear,clear,855,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,1,['clear'],['clear']
Usability,"I agree with @nwlambert that we should go without shifted object and simply add the shift in the times.; This shift method predate me, but I believe at some time solve would not work properly if not started at `0`...; But this should have been fixed a while ago. @victor-onofre, would you also remove the shifted operator, this should be right.; Also the `tlist` type is not tested and it could be a list instead of an array.; Ideally the same fixes should be made to `_correlation_mc_2t`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1929#issuecomment-1153946989:69,simpl,simply,69,https://qutip.org,https://github.com/qutip/qutip/pull/1929#issuecomment-1153946989,1,['simpl'],['simply']
Usability,"I agree, the current documentation isn't clear. I'll work on getting better documentation up soon. Thanks for the report!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/385#issuecomment-152451840:41,clear,clear,41,https://qutip.org,https://github.com/qutip/qutip/issues/385#issuecomment-152451840,1,['clear'],['clear']
Usability,"I also experienced problems with `fidelity`. Consider the following MWE:. ```; import qutip; import numpy as np. final = np.asarray([0.867314655330313 - 0.4576338188944636j, 0.17267952805615244 - 0.09111291375544905j, 0.013020232894921149 -0.006875138252288391j]); final_state = qutip.Qobj(final); target = np.asarray([0.9806443568092577, 0.19524328915024022, 0.014720852555238875]); target_state = qutip.Qobj(target). numpy_fidelity = np.abs(np.vdot(final_state.full(), target_state.full())); qutip_good_fidelity = np.abs((final_state.dag() * target_state)[0, 0]); qutip_bad_fidelity = qutip.fidelity(final_state, target_state); print('Correct: {}'.format(numpy_fidelity)); print('Still correct: {}'.format(qutip_good_fidelity)); print('Wrong: {}'.format(qutip_bad_fidelity)). # Correct: 0.9999999999849929; # Still correct: 0.9999999999849929; # Wrong: 1.0000000026189553; ```. The problem is clearly in the fact that you compute the fidelity of ket states by converting them into density matrices and using the general formula:; https://github.com/qutip/qutip/blob/564c987bdca385ae179730d0aad7b0d1e624e14d/qutip/metrics.py#L88-L113. This is fine in general, but can be very inefficient for large states, and is less numerically stable. An easy solution is to just compute the fidelity as the inner product when both states are kets. Moreover, the general formula might also be improvable: consider the following example (which uses the variables defined in the previous snippet):. ```; final_dm = qutip.ket2dm(final_state); target_dm = qutip.ket2dm(target_state); sqrt_final_dm = final_dm.sqrtm(); sqrt_target_dm = target_dm.sqrtm(); eig_vals = (sqrt_final_dm * target_dm * sqrt_final_dm).eigenenergies(); bad_fid = np.sqrt(eig_vals[eig_vals > 0]).sum(). prod_sqrt = (sqrt_final_dm * sqrt_target_dm); better_fid = scipy.linalg.svdvals(prod_sqrt.full()).sum(). print('bad fid: {}'.format(bad_fid)); print('better fid: {}'.format(better_fid)). # bad fid: 1.000000072436338; # better fid: 0.9999999999",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/925#issuecomment-542318121:895,clear,clearly,895,https://qutip.org,https://github.com/qutip/qutip/issues/925#issuecomment-542318121,1,['clear'],['clearly']
Usability,"I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:; - I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; - I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:1154,simpl,simply,1154,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462,1,['simpl'],['simply']
Usability,"I am actually fine with using a try/except with `data.mul` (definitely better than try/except with `complex(other)`). Is just that from previous feedback I thought this was not the canonical approach?. Regarding to `_scalar_properties`, I think it is a very interesting idea that would definitely be helpful for symbolic representations of `Qobj`. For current extensions (qutip-tensorflow and qutip-cupy) it is not really needed as `complex(other)` works just fine. I would prefer to not implement it and leave this feature for another PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889778895:145,feedback,feedback,145,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889778895,1,['feedback'],['feedback']
Usability,I am not really seeing the seg fault clearly in this trace. ; Please could you add some more description in here about what exactly you doing. That is steps to replicate. Please also include details about your environment by running `qutip.about()`,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-595872761:37,clear,clearly,37,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-595872761,1,['clear'],['clearly']
Usability,"I am not sure what your example of 'n' photons represents. However, if ; you mean what is the probability of a single-photon in the state, as ; measured by calculating the expectation value,the answer converges to ; 0.272 at about 14 states to one-part in a thousand. > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 18:08; >; > OK, if it's intended then there's nothing to change in the code. But I ; > think it would be helpful to document this in a clearer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does /not/ depend on th",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284316:467,clear,clearer,467,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284316,1,['clear'],['clearer']
Usability,"I am on the side on having 2 `default_dtype` options for the `Qobj` creation functions. I have some question as to how/where to make `default_dtype` more consistent. Applying the default at Qobj creation feels risky to me. In the solver it will end up converting the states before computing the expectation value. It could create strange interactions with operators and unitary transformations (`Qobj[Dense].dag() -> Qobj[CSR]`). `Qobj(scipy_csr)` could be converted to something else... However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion.; It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format? . In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. ps. Should `eigenstates` return the states in one operator instead of a list of kets? I guess the states were used to create the operators fed to `steadystate`, so operator output would be more practical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861:600,clear,clear,600,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861,1,['clear'],['clear']
Usability,"I am reviewing the pull request with @nathanshammah: ; - test on the latest notebook on Schrodinger cats produced expected results in comparable times;; - test on other bosonic models (where numerical instability may be present, `H.shape= (500, 500)`) gave expected results (checked with `mcsolve` of Qutip 4.3.1) and in agreement with semi-analytical results;; - I notice that the structure of the `Result.expect` class changes according to the option `average_states`: if `True`, the result is a ndarray of dimension `len(e_ops)`. If `average_states` is `False`, the array has dimension ntraj x `len(e_ops)`. ; This is in contrast with the previous choice for `mcsolve`, where the result for `average_states`: `True` where array of dimension 1 x`len(e_ops)`. Clearly, the option implemented makes more logical sense, but a deprecation warning may be better for backward compatibility. WIP: test on spin systems.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991#issuecomment-497358567:761,Clear,Clearly,761,https://qutip.org,https://github.com/qutip/qutip/pull/991#issuecomment-497358567,1,['Clear'],['Clearly']
Usability,"I am running an iterative method that requires calling mesolve many times.; At some point, the program crashes. It seems that every time mesolve is called, the list of arguments passed to the gcc complier grows. Eventually that list is too big for gcc and returns errors and stops the program. I wrote a simplified code that eventually leads to that problem. It took close to 2 hours to reproduce, and but maybe you can figure out a way to reach that point faster (faster calls ? more arguments passed to gcc to make it reach that point faster?). The screen capture shows how many calls were required in my case, how many seconds had elapsed since the program started, as well as how the error manifests. [test_qutip_error.txt](https://github.com/qutip/qutip/files/2973153/test_qutip_error.txt); <img width=""982"" alt=""Screen Shot"" src=""https://user-images.githubusercontent.com/28269924/54465696-b1034400-4739-11e9-91ab-be1fff21f057.png"">. I experienced this problem a while ago, both on my laptop and amazon instances, on Qutip 4.2.0 with Python 2.7.15. Both with the Anaconda and pip installs. Are there any ways to fix this? I need this for my research. Thank you very much !",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/966:304,simpl,simplified,304,https://qutip.org,https://github.com/qutip/qutip/issues/966,1,['simpl'],['simplified']
Usability,"I am trying to create an exponential of some operators multiplied by time-dependent functions. I am using the[ standard](http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html) method to define the time-dependent operators. However, the expm method cannot exponentiate this list format. Is there another way to obtain the exponential of quantum operators multiplied by time-dependent coefficients in qutip?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308:150,guid,guide,150,https://qutip.org,https://github.com/qutip/qutip/issues/1308,1,['guid'],['guide']
Usability,"I am trying to learn to use qutip and I made a local environment. As per the instruction guide, I ran the qutip testing environment and got the following: . ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.4.1; Numpy Version: 1.17.3; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.3; Number of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanholman/opt/anaconda3/envs/qutip/lib/python3.7/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:15,learn,learn,15,https://qutip.org,https://github.com/qutip/qutip/issues/1124,2,"['guid', 'learn']","['guide', 'learn']"
Usability,"I am trying to perform this simple operation <a href=""https://www.codecogs.com/eqnedit.php?latex=(H^{\otimes&space;2}&space;\otimes&space;I^{\otimes&space;2}&space;)&space;\times&space;\psi"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?(H^{\otimes&space;2}&space;\otimes&space;I^{\otimes&space;2}&space;)&space;\times&space;\psi"" title=""(H^{\otimes 2} \otimes I^{\otimes 2} ) \times \psi"" /></a>; where ; <a href=""https://www.codecogs.com/eqnedit.php?latex=H&space;=&space;\frac{1}{\sqrt{2}}&space;\times&space;\begin{bmatrix}&space;1&space;&&space;1\\&space;1&space;&&space;-1&space;\end{bmatrix}&space;,&space;I&space;=&space;\begin{bmatrix}&space;1&space;&&space;0&space;\\&space;0&space;&&space;1&space;\end{bmatrix}"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?H&space;=&space;\frac{1}{\sqrt{2}}&space;\times&space;\begin{bmatrix}&space;1&space;&&space;1\\&space;1&space;&&space;-1&space;\end{bmatrix}&space;,&space;I&space;=&space;\begin{bmatrix}&space;1&space;&&space;0&space;\\&space;0&space;&&space;1&space;\end{bmatrix}"" title=""H = \frac{1}{\sqrt{2}} \times \begin{bmatrix} 1 & 1\\ 1 & -1 \end{bmatrix} , I = \begin{bmatrix} 1 & 0 \\ 0 & 1 \end{bmatrix}"" /></a>; and ; <a href=""https://www.codecogs.com/eqnedit.php?latex=\psi&space;=&space;\left|0\right\rangle^{\otimes&space;4}"" target=""_blank""><img src=""https://latex.codecogs.com/gif.latex?\psi&space;=&space;\left|0\right\rangle^{\otimes&space;4}"" title=""\psi = \left|0\right\rangle^{\otimes 4}"" /></a>; I do that as follow: ; ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); ```; and i got the following : . ```python; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1); Traceback (most recent call last):. File ""<ipython-input-160-ae66af2f799c>"", line 1, in <module>; tensor(hadamard_transform(1), hadamard_transform(1), identity(2), identity(2)) * basis(16,1). File ""/home/user/anaconda2/envs/Quantu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/888:28,simpl,simple,28,https://qutip.org,https://github.com/qutip/qutip/issues/888,1,['simpl'],['simple']
Usability,"I am trying to use `mesolve` to solve an annealing problem using density matrices. The Hamiltonian evolves with time, $H(t) = \dfrac{t}{T}H_p + (1-\dfrac{t}{T})H_d,~ 0\leq t \leq T$, and I aim to solve the corresponding master equation using qutip, $\hat{\dot{\rho}} = i\left[\hat{H},\hat{\rho}\right]$. I have been doing this with a state vector approach, and the code works fine. With my knowledge of density matrices, I would assume that I can simply replace $\ket{\psi}$ with $\hat{\rho} = \ket{\psi}\bra{\psi}$, and use this as my initial state in `mesolve`. This would obtain density matrices for `sln.states` at each time step, however this seems not to be the case. Code:; ```; from bacon import bacon; import qutip as qt; import numpy as np. #inputs into bacon; spin_coeff = [; 4.8,; 9.5,; 4.82,; ]. coupling_coeff = [; 6.4,; 0,; 6.4; ]. H_input = bacon(; 3,; spin_coeff,; coupling_coeff; ). Hd = H_input.driver(); Hp = H_input.problem(). def init_superpsn(n):; '''; n - number of qubits; '''; state = np.ones((2**n), dtype = int)/np.sqrt(2**n); state = qt.Qobj(state); return state. #forming density matrix; initial_state = init_superpsn(3) * init_superpsn(3).dag(); #commenting out this line gives a different error; #initial_state = qt.Qobj(initial_state, dims = [[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 2]]]). grain = 100; anneal_time = 100. # initial coefficients; def d_coeff(t,params): ; return (1-t/params[""T""]); def p_coeff(t,params):; return (t/params[""T""]). Hs = [[Hd, d_coeff], [Hp, p_coeff]]; # ""writes down"" hamiltonian at time t ; H_dyn = qt.QobjEvo(Hs,args={""T"":anneal_time}) ; # solves SE for a particular hamiltonian that we ""wrote down""; s = np.linspace(0, anneal_time, grain); sln = qt.mesolve(H_dyn, initial_state, s) ; states0 = sln.states; ```. Bacon is a class I wrote that forms $H_d$ and $H_d$ Hamiltonians using tensor products. `Hp` is ; ```; Qobj data =; [[ 31.92 0. 0. 0. 0. 0. 0. 0. ]; [ 0. 9.48 0. 0. 0. 0. 0. 0. ]; [ 0. 0. -12.68 0. 0. 0. 0. 0. ]; [ 0. 0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1989:447,simpl,simply,447,https://qutip.org,https://github.com/qutip/qutip/issues/1989,1,['simpl'],['simply']
Usability,"I am trying to use code from User Guide's [Directly Generating an Animation section](http://qutip.org/docs/4.1/guide/guide-bloch.html?highlight=funcanimation#directly-generating-an-animation):. ```; ani.save('bloch_sphere.mp4', fps=20, clear_temp=True); ```. I get the following error:; ```; Traceback (most recent call last):; File ""bloch_test.py"", line 59, in <module>; ani.save('bloch_sphere.mp4', fps=20, clear_temp=True); TypeError: save() got an unexpected keyword argument 'clear_temp'; ```. It looks like OpenDrift may have had the same or similar issue:; https://github.com/OpenDrift/opendrift/issues/9. My hypothesis is that QuTip needs to be adapted to the newer version of Matplotlib.; According to ; ```; from qutip import *; about(); ```; I use Matplotlib version: 2.1.1.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/798:34,Guid,Guide,34,https://qutip.org,https://github.com/qutip/qutip/issues/798,3,"['Guid', 'guid']","['Guide', 'guide', 'guide-bloch']"
Usability,"I am using Anaconda on windows 10 and installed qutip from conda-forge package, I don't have VS-15 on my system, Is it possible that that I could run qutip with VS-15 runtime liberaries instead of complete installation of visual studio. If it is possible please guide me.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826:262,guid,guide,262,https://qutip.org,https://github.com/qutip/qutip/issues/826,1,['guid'],['guide']
Usability,"I am willing to make a PR to fix https://github.com/qutip/qutip/issues/544 and could include a fix for this as well. The way I am thinking I could do it right now is to put an extra `equal` parameter to `plot_wigner` which would have a default value and could be used to alternate between the two behaviors (with othonormal axes and without). I'd like a feedback on the best default value, each one having its own advantages:; * I could use `equal=False` as a default value, to keep the actual behavior. Using `equal=True`, users could alternate between the two behaviors.; * I could use `equal=True` as a default value. As far as I know, in the literature, Wigner plots often have orthonormal axes, so that a coherent state is a circular blob. This has the disadvantage of breaking the current behavior and code that may rely on it. Thanks",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/539#issuecomment-286453577:354,feedback,feedback,354,https://qutip.org,https://github.com/qutip/qutip/issues/539#issuecomment-286453577,1,['feedback'],['feedback']
Usability,"I believe that all permutation are run with `parametrize`. So the input (`qobj`) is compared to each outputs `(expected`), not just the matching one. Also the rotation matrix (`U = rand_unitary(3)`) must be constant. Here, at least 4 different random operators are created. Instead of `parametrize` and `yield` simply calling the function `case` would work:; ```; yield case(""Test Qobj: trunc_neg works for positive opers.""), \; rand_dm(5), method; ```; to; ```; case(rand_dm(5), method, None); ```; To keep the message, `assert_almost_equal` has a `err_msg` keyword to raise if the test fails. I do not believe the `yield` is the cause of the no cython fails. ps. I will make a branch of this PR and will add `mark` to prepare a subset of tests for faster testing #1147.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523:311,simpl,simply,311,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523,1,['simpl'],['simply']
Usability,"I can't quite figure out if this is simply due to the DeprecationWarnings or something else but all tests are failing due to `atol` not being set for the gmres solver. I will try to set `atol` and check if the tests pass. Error log: https://api.travis-ci.org/v3/job/379109482/log.txt.; ```; scipy/sparse/linalg/isolve/iterative.py:2: DeprecationWarning: scipy.sparse.linalg.bicgstab called without specifying `atol`. The default value will be changed in a future release. For compatibility, specify a value for `atol` explicitly, e.g., ``bicgstab(..., atol=0)``, or to retain the old behavior ``bicgstab(..., atol='legacy')``. ```. ```; ..................................................; ======================================================================; ERROR: Steady state: Thermal qubit - power-gmres solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/Users/shahnawaz/dev/qutip/qutip/tests/test_steadystate.py"", line 145, in test_qubit_power_gmres; rho_ss = steadystate(H, c_op_list, method='power-gmres'); File ""/Users/shahnawaz/dev/qutip/qutip/steadystate.py"", line 298, in steadystate; return _steadystate_power(A, ss_args); File ""/Users/shahnawaz/dev/qutip/qutip/steadystate.py"", line 863, in _steadystate_power; v = v / la.norm(v, np.inf); File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/scipy/linalg/misc.py"", line 137, in norm; a = np.asarray_chkfinite(a); File ""/Users/shahnawaz/miniconda3/lib/python3.6/site-packages/numpy/lib/function_base.py"", line 1233, in asarray_chkfinite; ""array must not contain infs or NaNs""); ValueError: array must not contain infs or NaNs. ----------------------------------------------------------------------; Ran 561 tests in 576.175s. FAILED (SKIP=19, errors=1); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/862:36,simpl,simply,36,https://qutip.org,https://github.com/qutip/qutip/issues/862,1,['simpl'],['simply']
Usability,"I closed the issue; it is too vague, sorry about that. From: hrahman12 ***@***.***>; Sent: Wednesday, April 20, 2022 5:16 PM; To: qutip/qutip ***@***.***>; Cc: Anna Naden ***@***.***>; Author ***@***.***>; Subject: Re: [qutip/qutip] Details of QuTiP user's guide (Issue #1759). Hi Anna, thank you for replying can you please give some more information about which particular part/s of the user guides you are finding these errors?. —; Reply to this email directly, view it on GitHub<https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AN2AJU6X7MKML5BRRV4IWHLVGB62PANCNFSM5LYUHNQA>.; You are receiving this because you authored the thread.Message ID: ***@***.******@***.***>>",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213:257,guid,guide,257,https://qutip.org,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213,2,['guid'],"['guide', 'guides']"
Usability,"I completely agree with you that random tests really aren't the right way to go in general, but right now our problem is that basically QuTiP's entire testing suite is based on randomised tests, and that's an awful lot of technical debt to overcome any time soon :(. . The `dnorm` tests have historically been a huge problem, even though basically nobody's worked on `dnorm` for a long long time now (for context, see in particular #880 and #874). We don't actually even know if the failures in `dnorm` are deterministic and reproducible, although it turns out that I had a brief look into this when I joined as a GSoC student about a year ago... I don't remember doing it at all!. I know this is super inelegant and not the perfect method, but it's kind of a nasty trade-off - I don't have time to really dig into `dnorm` (a topic I know almost nothing about) to work out an appropriate solution to temperamental errors, we do want `dnorm` to be tested since we're shipping it, and the slight flakiness keeps causing us test suite failures about 1 in 10 times. I'm somewhat opposed to fixing the random seed because having the variance over several test runs does actually help us cover more ground (eventually) - fixing it to a ""known good"" seed actually seems to me to be more of a mask of potential problems than this. Of note: the pytest plugin I'm using reports the number of reruns it performed in the analysis at the bottom - they show up in a yellow alongside the ""skips"" and ""xfails"" - so it's not completely hidden. I'd love to have a property-based testing suite like hypothesis up and running - that definitely seems like the proper solution to this in the end. In the meantime, I'm open to swapping to a fixed random seed if you think that's much better - testing is one place where I'm really aware of my lack of formal experience in software engineering, so I'm basically just learning as I go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227:1893,learn,learning,1893,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227,1,['learn'],['learning']
Usability,"I couldn't find @Ericgig's branch (maybe he tidied it up) so I made #1727. It compiles for me, but I didn't really try it out yet. Feedback appreciated.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-979877541:131,Feedback,Feedback,131,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-979877541,1,['Feedback'],['Feedback']
Usability,"I couldn't see the math there (the images are broken for some reason), but from the code, I think I see the problem. `super_tensor(L, L)` is indeed what you want, but the `rhovec` Qobj still doesn't act right under ordinary tensors for the same reason. The version of `super_tensor` that I contributed doesn't do much of anything useful for states (this would be a nice improvement, to be sure), but in the meantime you can probably work around by using `operator_to_vector(tensor(vector_to_operator(rhovec), vector_to_operator(rhovec)))`:. ``` python; In [1]: from qutip import *. In [2]: rho = 0.5*qeye(2). In [3]: rhovec = operator_to_vector(rho). In [4]: L = spost(sigmax())*spre(sigmax()). In [5]: L2 = super_tensor(L,L). In [6]: L2*tensor(rhovec,rhovec); ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-6-27459f98c087> in <module>(); ----> 1 L2*tensor(rhovec,rhovec). /usr/local/lib/python2.7/dist-packages/qutip/qobj.pyc in __mul__(self, other); 430 ; 431 else:; --> 432 raise TypeError(""Incompatible Qobj shapes""); 433 ; 434 elif isinstance(other, (list, np.ndarray)):. TypeError: Incompatible Qobj shapes. In [7]: L2 * operator_to_vector(tensor(vector_to_operator(rhovec), vector_to_operator(rhovec))); Out[7]: ; Quantum object: dims = [[[2, 2], [2, 2]], [1]], shape = [16, 1], type = operator-ket; Qobj data =; [[ 0.25]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0.25]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0.25]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0.25]]; ```. If you're interested in learning more about tensor products on superoperators, the reshuffling operator used in `super_tensor` was taking from [Chris Wood's paper](http://arxiv.org/abs/1111.6950) on the topic.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/238#issuecomment-57060478:1573,learn,learning,1573,https://qutip.org,https://github.com/qutip/qutip/issues/238#issuecomment-57060478,1,['learn'],['learning']
Usability,"I did this work some time ago, and so I did a git rebase in order to try and avoid any conflicts; I was advised this is the thing to do in such circumstances.; It seemed to go okay, some feedback on whether I did the right thing and did it correctly would be welcome",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/350#issuecomment-113537434:187,feedback,feedback,187,https://qutip.org,https://github.com/qutip/qutip/pull/350#issuecomment-113537434,1,['feedback'],['feedback']
Usability,"I do not think it's a _good first issue_...; There are multiple possible solutions and it is not clear which is the best one:. 1. Ensure all eigen values and eigen vectors are computed.; 1.1 This could be done by finding an alternative to scipy to solve for sparse matrix decomposition, but it would add extra requirement and it must be easy to install with pip.; 1.2 Use a third call to `scipy.sparse.linalg.eigs`/ `scipy.sparse.linalg.eigsh` using `sigma` to find all the pseudo degenerate values. It need to be done while being careful about special cases. This would make the sparse eigen solver even slower than it already is.; 2. Allow to sort by other orders, such as the complex value or magnitude. This would not solve the issue, but give some options to go around it. However the dense eigen solver would be expected to behave the same and the dense eigen solver does not have this options, so we need to implement it ourselves. This sorting option would also be required for any other data type we want to support. To go around that, the `Qobj` methods could be responsible for the sorting, the `sort` argument would only be passed to the dispatched function when `sparse=True`.; 3. Refuse to use the sparse solver for the full decomposition as scipy does. The sparse eigensolver is both slow and hard to use in this case. Also the eigen vectors computed by the sparse solver are stored in a dense array, so it is not that useful to save memory...; 4. Implement our own sparse eigen decomposition...; 5. Only document the issue without fixing. The default is the dense solver, which is both faster and safer in almost all cases.; 6. Something else...; ; I would personally go for either 1.2 of 3. ; Adding different sorting options in `Qobj` methods (2) and removing them from the dispatched functions, could be nice, but it's not a fix. The place to start would be to debate on the solution. If you have some opinion on the matter, please let us know.; Once we've made up our mind, you can",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161:97,clear,clear,97,https://qutip.org,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161,1,['clear'],['clear']
Usability,"I don't have xvfb (pytest-xvfb) installed specifically for qutip, but it is used by other packages (The general use of pytest-xvfb is to facilitate testing of GUI, graphical or windowing functionality without having an normal Xserver active. That is, it can be useful for automated CI testing of gui packages, for instance in chroots or cloud CI infrastructure). Since qutip doesn't use xvfb directly this bug won't be a problem for general CI testing, where only qutip is loaded on a cloud instance (for instance Debian testing done at https://ci.debian.net/packages/q/qutip/). But before I upload a package to the Debian infrastructure, I like to run the tests on my own system to be confident they're likely to pass. So this is where the problem happens, running tests on my own system, where I have pytest-xvfb installed for testing other packages. (pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py). So the use case is running the qutip tests on my own system, where pytest-xvfb simply happens to be installed for other purposes not related to qutip. There are ways of working around the problem, for instance the `--no-xvfb` option could be explicitly added to the `pytest` command line. But it can be useful if the test code itself can be made robust with respect to the problem (e.g. in this case just replacing `plt.clf()` with `plt.close('all')`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791:1155,simpl,simply,1155,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791,1,['simpl'],['simply']
Usability,"I don't think it breaks the functional API at all - in fact it almost makes it stronger, since everything is a ""function"" at every stage. This kind of partial application is classic part of functional programming. Perhaps I don't understand _why_ you want to move to a class-based API? I'd be quite strongly against having the user have to instantiate classes to do very simple parts like creating operators. Certainly in Python programming, I don't think a class-based interface is de facto the right sort to aim for, and procedural is much more ""Pythonic"". For one, it's a lot of unnecessary boilerplate for simple operations. It adds cognitive complexity for the advanced user to decide ""should I use `displace` or `Displacer`?"", and in the strong majority of use-cases, the operator creation is not a computational bottleneck so we'd be adding it for no gain. A lot of operators have no meaningful reason to live in a class, like `sigmax` and so on, so now you have a split between operators that need a class and operators that don't, or you do something really crazy like requiring the user to do; ```python; sx_builder = qutip.operators.SigmaX(); sx = sx_builder.get_operator(); sy_builder = qutip.operators.SigmaY(); sy = sy_builder.get_operator(); sz_builder = qutip.operators.SigmaZ(); sz = sz_builder.get_operator(); ```; when all they wanted was `qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()`. Obviously that example is a bit facetious, but what benefit does the user derive from having to write boilerplate to access simple functionality?. All the operators already share a class in `Qobj`, and things like `displace` and `sigmax` are factory methods of `Qobj`. What shared functionality do the factory methods possess that means they should be classes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332:371,simpl,simple,371,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332,3,['simpl'],['simple']
Usability,"I don't understand why the first commit to this PR is a modification of steadystate.py. Sorry, I think I might have messed up the history with some merges or something (still learning good work flow!). The master branch is merged in after this commit, and github tells me that the branch is up to date with the base branch. Please review this before accepting.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404#issuecomment-163322225:175,learn,learning,175,https://qutip.org,https://github.com/qutip/qutip/pull/404#issuecomment-163322225,1,['learn'],['learning']
Usability,"I encountered a numerical error while simulating a Ramsey experiment using mesolve in QuTiP. Specifically, the simulation shows unexpected discontinuities and unphysical results in the oscillatory pattern. I have highlighted these problematic points with red circles in the plot for clarity.; <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/e7a6fb3e-c9e8-4cf9-96ba-aefaf7e9a554"">; </div>. To make the problem clearer, I simplified the simulation model. The Hamiltonian used is:. $$ H_{\rm rot} = {\rm Re}[\Omega(t)]\frac{\sigma_x}{2} + {\rm Im}[\Omega(t)]\frac{\sigma_y}{2} $$. where $\Omega(t)$ is a time-dependent coefficient. The tlist and coefficients are both numpy arrays. Providing the entire code that generates these coefficients would be lengthy, so I preselected a few sets of coefficients and tlist where the issue is present. Specifically, the problematic data is from indices 92, 93, and 94, which have been highlighted in the plot. These are stored using np.savetxt. Below is the plot of the coefficients, showing that they are mainly real and differ only slightly. ```; plt.figure(); ax0 = plt.subplot(221); ax1 = plt.subplot(222). for wavedata_name in [""index92"",""index93"",""index94""]:; coef = np.loadtxt(f""{wavedata_name}_coef.txt"",dtype=np.complex128); tlist = np.loadtxt(f""{wavedata_name}_tlist.txt"",dtype=np.float64); ax0.plot(tlist, coef.real, label=f""{wavedata_name}""); ax1.plot(tlist, coef.imag, label=f""{wavedata_name}""); ax0.legend(); ax1.legend(); ; ax0.set_title(r""$\sigma_x$ coefficient""); ax1.set_title(r""$\sigma_y$ coefficient""); ```. <div align=""center"">; <img width=""314"" alt=""image"" src=""https://github.com/user-attachments/assets/b07b3a64-a2d4-458b-a04e-4c83c0c4c093"">; </div>; Despite these small differences, the simulation results show significant and unexpected variations. ; Below is simulation code and results. ```; import qutip; import numpy as np; import matplotlib.pyplot as plt. sx = qutip.sigmax(); sy = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552:460,clear,clearer,460,https://qutip.org,https://github.com/qutip/qutip/issues/2552,2,"['clear', 'simpl']","['clearer', 'simplified']"
Usability,"I ended up closing this PR because the implementation needs a significant overhaul. Now that I understand the code better it's clear that the pulse generation classes are intended to produce a single specific pulse and not a set of pulses for each control. The current implementation attempts to do the latter, resulting in having to pass the control index as an (very hacky) input to all the pulse methods. In other parts of control module, the former approach of a list of pulse instances is already taken, so this PR also results in both the ""correct"" and the ""hacky"" approach being used. This looks like an important / great feature to have, but I didn't want to rush merging the implementation for 4.7. Apologies for not writing an explanation when I closed the PR -- I was obviously rushing around too much before going on leave. :/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369#issuecomment-1096677056:127,clear,clear,127,https://qutip.org,https://github.com/qutip/qutip/pull/1369#issuecomment-1096677056,1,['clear'],['clear']
Usability,"I found a workaround for this. Instead of using b.clear() I moved bloch instantiation inside the loop that puts frames of the animation together and I had to give a different file name myself every time. ```; for i in range(len(sx)):; b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save('%04d' % i, dirc='temp') #saving images to temp directory in current working directory; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796#issuecomment-357856316:50,clear,clear,50,https://qutip.org,https://github.com/qutip/qutip/issues/796#issuecomment-357856316,1,['clear'],['clear']
Usability,"I good guide for compiling openblas and building numpy against it can be found here:. osdf.github.io/blog/numpyscipy-w ith-openblas-for-ubuntu-1204-second-try.html. Calling the blas functions from inside of cython was a project called Tokyo:. https://github.com/tokyo/tokyo. As you can tell by the file dates, it has more or less been abandoned. However, the work they have done would obviously be a good starting point for doing something similar.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/55#issuecomment-25426540:7,guid,guide,7,https://qutip.org,https://github.com/qutip/qutip/issues/55#issuecomment-25426540,1,['guid'],['guide']
Usability,"I got it from here: https://qutip.org/docs/pre-release/guide/guide-heom.html. This is the link that ""online html documentation"" links to in the qutip webpage. Is this not keept up to date, as https://qutip.readthedocs.io/en/master/guide/guide-heom.html is?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2104#issuecomment-1454064987:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/issues/2104#issuecomment-1454064987,4,['guid'],"['guide', 'guide-heom']"
Usability,"I guess there's two things, firstly as you go to higher energies, again convergence errors will appear as levels near the cut-off are sensitive to the cut-off. Also, I think you can see the repeated eigenvalue around the middle of the spectrum which was recently discussed here as a consequence of truncation https://github.com/qutip/qutip/issues/1587 . Secondly, as far as I can see the +- x examples give similar convergence. This example is easily solved analytically, the energies are just that of a normal harmonic oscillator + displacement (+-3 in your case) -0.5. You can calculate this with a couple of just linear coordinate transformations in x. Perhaps there is some issue with your +x solution in pyslise?. Also, for this type of question, you are likely to get good feedback/help from the community if you post to the qutip google group https://groups.google.com/g/qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597#issuecomment-874060820:779,feedback,feedback,779,https://qutip.org,https://github.com/qutip/qutip/issues/1597#issuecomment-874060820,1,['feedback'],['feedback']
Usability,"I guess you have to make a deep copy of it? Otherwise strange things might; happen. I get caught out by this one all the time!. On 3 January 2017 at 17:02, Shahnawaz Ahmed <notifications@github.com>; wrote:. > Yes. That makes it simpler to add a new gate again and again if you have it; > defined somewhere in your code. Instead of writing all the keyword; > arguments.; >; > On 03-Jan-2017 1:50 PM, ""Alexander Pitchford"" <notifications@github.com>; > wrote:; >; > > Sounds like a good idea to me.; > > You mean check if the first arg is a Gate, if so then no need to create; > > one, just add it to the circuit; > >; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/qutip/qutip/issues/610#issuecomment-270051834>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AGpUBPQHUatbpFYNG-lis-eCIKx1URIhks5rOdN9gaJpZM4LY-mP>; > > .; > >; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/610#issuecomment-270065494>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7X6C9ymvaDF0-xX1-qyOYTpfLtR6ks5rOgCTgaJpZM4LY-mP>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/610#issuecomment-270071919:229,simpl,simpler,229,https://qutip.org,https://github.com/qutip/qutip/issues/610#issuecomment-270071919,1,['simpl'],['simpler']
Usability,"I had actually tried that before, following the user guide for conda, but it didn't work. Seems that it was fixed in a conda update, though, as it works fine now. Thanks! Will use that to test installation instructions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-150990762:53,guid,guide,53,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-150990762,1,['guid'],['guide']
Usability,"I have a similar problem in Sublime Text, though the progress bar does work in the terminal, IPython QtConsole and IPython Notebook for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63265244:53,progress bar,progress bar,53,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63265244,1,['progress bar'],['progress bar']
Usability,"I have a simple task of maximizing $\text{Tr}(O \rho(T))$ using GRAPE where $O$ is a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:9,simpl,simple,9,https://qutip.org,https://github.com/qutip/qutip/issues/1900,2,['simpl'],['simple']
Usability,I have addressed some of the potential confusion on measurements in my GSOC blogpost [here](https://sarsid.wordpress.com/2020/06/14/an-introduction-to-quantum-measurements-in-qutip/).; Hope that helps and welcoming feedback.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643844273:215,feedback,feedback,215,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643844273,1,['feedback'],['feedback']
Usability,"I have finally gotten around to look at this. Compared to usual ODE evolution, the expm_multiply (as of SciPy 0.18) is over an order of magnitude slower when testing against simple harmonic oscillator evolution. Profiling showed that the inf and one norms were the main issue as they cannot call BLAS functions for complex numbers. I wrote Cython versions that were ~5x faster. The next profile suggested replacing the dot calls with our own spmv. All together, I could get a factor of 3x improvement over the base SciPy code, but the spmv is still the dominate time consumer, so there is nothing further I could do to speed things up.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/84#issuecomment-242475532:174,simpl,simple,174,https://qutip.org,https://github.com/qutip/qutip/issues/84#issuecomment-242475532,1,['simpl'],['simple']
Usability,"I have not been using qutip for a long time yet, so I apologize in case I am missing something stupid. I'm solving a simple problem with t-dependent Hamiltonian. I have simplified up to the point where the solution should actually just be a constant occupation of ground and first excited state. Here is the setup:. ``` python; from qutip import *; from pylab import *. dim = 40 # number of harmonic oscillator states kept in decomposition; # -- always need to check convergence w.r.t. this. E_j = 20.0 # Josephson energy. a = destroy(dim) # definition of the annihilation operator via qutip. exponent = 1j * (a + a.dag()) # argument of the matrix exponential; exp_iphi = exponent.expm(); cos_phi = 0.5*(exp_iphi + exp_iphi.dag()). H_0 = a.dag() * a # Hamiltonian of LC harmonic oscillator; h_j = - cos_phi # Hamiltonian for the Josephson tunneling contribution; prefactor E_j(t) to be provided separately . energies, states = (H_0 + E_j * h_j).eigenstates() . jump_op_list = [] # no jump operators. # monitor projectors onto the ground and first excited eigenstates; projector0 = states[0] * states[0].dag(); projector1 = states[1] * states[1].dag(). monitor_ops = [projector0, projector1]. psi_0 = states[0] # initial state is the ground state . # tlist = np.linspace(0, Delta_t_min + Delta_t_max + 6*dt, 300) # evenly-spaced time values; tlist = np.linspace(0, 0.5, 300) # evenly-spaced time values; ```. The crucial piece comes now:. ``` python; timefunc_string1 = '20.0'; H1 = [H_0, [h_j, timefunc_string1]]; odesolution1 = mcsolve(H1, psi_0, tlist, jump_op_list, monitor_ops). # NOTE: ONLY ""DIFFERENCE"" W.R.T. PREVIOUS EXAMPLE IS ADDING ZERO!; timefunc_string2 = '0.0*20.0 + 20.0'; H2 = [H_0, [h_j, timefunc_string2]]; odesolution2 = mcsolve(H2, psi_0, tlist, jump_op_list, monitor_ops). plot(tlist, odesolution1.expect[0], tlist, odesolution1.expect[1], lw=2); legend(('Ground state','1st exc.')); ylabel('Occupation probability'); xlabel('Time'). show(). plot(tlist, odesolution2.expect[0], tl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/215:117,simpl,simple,117,https://qutip.org,https://github.com/qutip/qutip/issues/215,2,['simpl'],"['simple', 'simplified']"
Usability,"I have noticed that when I try to use the `.dnorm()` method to calculate the diamond norm distance between two channels I am greeted with an error and the operation fails. Rather than an error I expected the output to be a number between 0 and 2. See the simple example below. ```; from qutip import destroy, qeye, fock_dm, kraus_to_choi. # Choi matrix for 1 qubit amplitude damping channel with probability p; def AmpDampChoi(p):; Kraus = [(1-p)**.5*qeye(2),p**.5*destroy(2),p**.5*fock_dm(2,0)]; return kraus_to_choi(Kraus). # Choi matrix for identity channel on 1 qubit; IdChoi = kraus_to_choi([qeye(2)]). # These values are found without issue but since they're all CPTP maps they all have dnorm 1; print(IdChoi.dnorm()); print(AmpDampChoi(0).dnorm()); print(AmpDampChoi(0.64).dnorm()). # These trivial diamond norm distances between a channel and itself are also produced; print(IdChoi.dnorm(AmpDampChoi(0))); print(IdChoi.dnorm(IdChoi)); print(AmpDampChoi(0.5).dnorm(AmpDampChoi(0.5))). # If a diamond norm distance between two different channels is sought then we see the error; print(IdChoi.dnorm(AmpDampChoi(0.5))); print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))); ```. Attempting to run either of the final two prints gives the following spiel:. ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); TypeError: float() argument must be a string or a number, not 'csr_matrix'. The above exception was the direct cause of the following exception:. ValueError Traceback (most recent call last); <ipython-input-21-add6d3e56036> in <module>; 20 ; 21 # If a diamond norm distance between two different channels is sought then we see the error; ---> 22 print(IdChoi.dnorm(AmpDampChoi(0.5))); 23 print(AmpDampChoi(0.4).dnorm(AmpDampChoi(0.5))). ~/.local/lib/python3.8/site-packages/qutip/qobj.py in dnorm(self, B); 1881 ; 1882 """"""; -> 1883 return mts.dnorm(self, B); 1884 ; 1885 @property. ~/.local/lib/python3.8/site-packages/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422:255,simpl,simple,255,https://qutip.org,https://github.com/qutip/qutip/issues/1422,1,['simpl'],['simple']
Usability,I have read a bit about the reasons for moving reduce. The main one seems to be that code using it can be unclear. And that in most cases a for loop can be used to achieve the same in a clearer way. I think that may be applicable here. I have spent a while looking at the line that uses it and I am still not sure what it is doing. I think sacrificing a little succinctness for clarity here may be beneficial.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128328061:186,clear,clearer,186,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128328061,1,['clear'],['clearer']
Usability,"I have recently started to use QuTiP to compute unitary and Hamiltonian evolutions. Most of the calculations involved Hamiltonians (or circuits) defined on separate regions of the Hilbert space plus some other Hamiltonians used to couple the different systems together. When performing the simulations I have found that the requirement that Qobjs must have the same dims attribute to be summed or multiplied tends to make the code quite convoluted (the convolution might also come from my inexperience with QuTiP). For example (I will use circuits but the same issues applies to Hamiltonians). Let |psi> be a random 4-qubit state and C a random unitary on the first two qubits. In order to compute C|psi> one must specify the tensor structure of the random objects and not use qeye(8) but the tensor product of three qeye(2):. `C = tensor(rand_unitary_haar(4, dims = [[2,2],[2,2]]), tensor(qeye(2),qeye(2),qeye(2)))`; `psi = rand_ket(32, dims = [[2,2,2,2,2], [1,1,1,1,1]])`. I understand that the tensor product structure in the Qobj class might yield lots of advantages but it might be interesting to consider if in some cases it is possible to allow the summation or multiplication of Qobs of different dims but with the same shape. In this case, the above example would simplify to:. `C = tensor(rand_unitary_haar(4), qeye(8))`; `psi = rand_ket(32)`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1253:1273,simpl,simplify,1273,https://qutip.org,https://github.com/qutip/qutip/issues/1253,1,['simpl'],['simplify']
Usability,"I have simple code for Time evaluation, with ```mesolve``` and ```sesolve```I consider two time list as``` t1=[0,5,10]``` and ```t2=[0,10]```.But I get different states in``` t=10``` in two case . ```python; from qutip import*; import numpy as np; H= 2*np.pi * 0.1 * sigmax(); psi0 = basis(2, 0); t1=[0,5,10]; t2=[0,10]; result1 = sesolve(H, psi0, t1); result2 = sesolve(H, psi0, t2); r1=result1.states[2]; r2=result1.states[1]; if r1==r2:; print('True'); else:; print('False'). ```; If you run code you get ```False```. This difference between to case is ```1.1620088200000005e-6j``` but it's important in many context such as measure entanglement in general Form.; Best",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1686:7,simpl,simple,7,https://qutip.org,https://github.com/qutip/qutip/issues/1686,1,['simpl'],['simple']
Usability,"I have tried the simple two-level systems in http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html and found an unexpected error, could you help to solve this problem #854 ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-382599620:17,simpl,simple,17,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-382599620,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"I installed visual studio 2015 from https://visualstudio.microsoft.com/vs/older-downloads/ , after that I simply followed instructions of qutip documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-480488981:106,simpl,simply,106,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-480488981,1,['simpl'],['simply']
Usability,"I just updated to qutip 4.1.0 on archlinux and now code that ran fine before simply fails. The smallest example I managed to boil it down to is multiplying a daggered state with an operator:; ```; import qutip as qt; import numpy as np. N = 10; x = qt.Qobj(np.ones(N, complex)/(N**(1/2))); op = qt.destroy(N) + qt.create(N). for i in range(10):; print(x.dag()*op); ```; which randomly yields different results, e.g.; ```; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +4.00979001e+087j 0.00000000e+000 +5.37624943e+241j; 5.37624943e+241 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 0.31622777+0.j 0.76344136+0.j 0.00000000+0.j; 0.00000000+0.j 0.00000000+1.18017809j 0.00000000+1.33956231j; 1.33956231+0.j 1.48170345+0.j 1.84311049+0.j; 0.94868330+0.j ]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 0.31622777+0.j 0.76344136+0.j 0.00000000+0.j; 0.00000000+0.j 0.00000000+1.18017809j 0.00000000+1.33956231j; 1.33956231+0.j 1.48170345+0.j 1.84311049+0.j; 0.94868330+0.j ]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +0.00000000e+000j 0.00000000e+000 +5.29328215e+180j; 5.29328215e+180 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +4.00979001e+087j 0.00000000e+000 +5.37624943e+24",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/681:77,simpl,simply,77,https://qutip.org,https://github.com/qutip/qutip/issues/681,1,['simpl'],['simply']
Usability,"I know this is a very simple change, but could we add a test that it works? E.g. maybe a test in which we subclass `Data` and then create an instance of it and access shape?. And perhaps a test that shows that shape is immutable?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663:22,simpl,simple,22,https://qutip.org,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663,1,['simpl'],['simple']
Usability,"I like the idea of keeping `tensor()` simple, and a literal implementation of the tensor product— while there is a usecase for the reshuffling in that way (it's actually pretty common if you have a channel that you want to act on each subsystem in some register), I think your strategy makes a lot of sense for `tensor()` itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99#issuecomment-39529579:38,simpl,simple,38,https://qutip.org,https://github.com/qutip/qutip/pull/99#issuecomment-39529579,1,['simpl'],['simple']
Usability,I personally would be actually a bit confused if the alpha values were array-like and the simple solution would certainly be enough for me. But then again I do not have the very big picture of `qutip`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1287#issuecomment-1066987120:90,simpl,simple,90,https://qutip.org,https://github.com/qutip/qutip/issues/1287#issuecomment-1066987120,1,['simpl'],['simple']
Usability,"I ran into this while working on a different project, but tried to simplify the bug in another simple [example](http://nbviewer.ipython.org/github/ComradeVVA/qutip/blob/master/time_dep_supers.ipynb). It compares some of the ways to input the same thing, with the last part (which uses list callback format) obtaining different results. Thanks to @krastanov for encouraging me to submit my first bug report.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/226:67,simpl,simplify,67,https://qutip.org,https://github.com/qutip/qutip/issues/226,2,['simpl'],"['simple', 'simplify']"
Usability,I resolved the issue with setting the alpha for multiple sets of vectors and added tests for that (and for setting the alpha of points). I'm not going to add tests for Bloch3d now since that uses mayavi which looks like it might be a whole other testing rabbit hole. I will simply run some checks in a notebook manually tomorrow. I still need to update the docstring and look at what the docstring format changes are about. @xspronken @AGaliciaMartinez Reviews of my most recent commits welcomed.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511:274,simpl,simply,274,https://qutip.org,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511,1,['simpl'],['simply']
Usability,"I see @christian512, so maybe we can skip that. . With regards to the documentation, Sphinx can be a mess. I wrote some guidelines [here](https://github.com/nathanshammah/scikit-project/blob/master/5-docs.md). I think you could skip installing it properly and just fork the repo and modify; the [guide-qip.rst](https://github.com/qutip/qutip-doc/blob/master/guide/guide-qip.rst) file, adding some information on the visualization of quantum circuits using this LaTeX-based tool. It could be a standalone subsection for simplicity. `.rst` files are restructured text file very similar to markdown.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-602749277:120,guid,guidelines,120,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-602749277,5,"['guid', 'simpl']","['guide', 'guide-qip', 'guidelines', 'simplicity']"
Usability,"I see a similar issue with just calculating the eigenstates of a simple $\sigma_x \otimes \sigma_x$ operator. ``` python; import qutip as q; import scipy. op = q.tensor(q.sigmax(), q.sigmax()); eigv_sp, eigs_sp = op.eigenstates(sparse=True); eigv_full, eigs_full = op.eigenstates(sparse=False); eigv_scipy, eigs_scipy = scipy.linalg.eigh(op.full()); print(eigv_sp, eigs_sp); print(eigv_full, eigs_full); print(eigv_scipy, eigs_scipy); ```. The sparse=True gives eigenstates . ```; [Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; Qobj data =; [[ 0.36754009-0.27845703j]; [-0.49166296+0.21364338j]; [ 0.49166296-0.21364338j]; [-0.36754009+0.27845703j]]; ````; whereas `sparse=False` and the `scipy.linalg.eigh` give the correct states. ```; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; Qobj data =; [[-0.70710678]; [ 0. ]; [ 0. ]; [-0.70710678]]; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1998#issuecomment-1416809483:65,simpl,simple,65,https://qutip.org,https://github.com/qutip/qutip/issues/1998#issuecomment-1416809483,1,['simpl'],['simple']
Usability,"I see your point that we should keep those debugging tools as simple as possible. Instead of reading the version in `qutip.about`, we do it using a hook function in the family package that returns the repo name and version etc. Something like; ```python; def about(family_pkgs=[]):; ...; for family_pkg in family_pkgs:; package_name, package_version = family_pkg._about_family_pkg(); print(....); ```; In this way we don't need to pass the string name of the package but just pass the package itself. If anything went wrong, it is just in the implementation of `_about_family_pkg` in the family packages.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1870#issuecomment-1106117187:62,simpl,simple,62,https://qutip.org,https://github.com/qutip/qutip/pull/1870#issuecomment-1106117187,1,['simpl'],['simple']
Usability,I see. `propagator` performed better with a system of d=2^5 in a simple test. I better do some testing of even larger systems then before merging this. Any thoughts on why `propagator` might be slower also for small systems and short integration times? Some overhead related to parallelization? Thanks for the info.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230108497:65,simpl,simple,65,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230108497,1,['simpl'],['simple']
Usability,I slightly edited the question to make the code easier to read. You should probably consider using the array-based format https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#methods-for-writing-time-dependent-operators. Precompute the `q_0` and `q_02` as NumPy arrays with respect to each `t` in the `t_list` using `np.gradient`. Then give them to the solver.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266:152,guid,guide,152,https://qutip.org,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266,1,['guid'],['guide']
Usability,"I still vote for keeping it as it is, because I think it makes sense to keep Qobj \* Qobj in the space of Qobj. This is now numpy.ndarray, numpy.matrix and scipy,sparse.spmatrix works, and I think that one would expect Qobj to do the same. A simple example: imagine you get a Qobj x as an argument to a function, and you do some computation like x.dag() \* op \* x with some operator op. If x is a ket you will get a Python complex as a result with your suggested behavior. But if x is an operator instead you will get a Qobj. Or if x is a tensor of an operator and a ket (like in the top of this issue) you will get something in between, a reduced dimensionality operator. I think it makes a lot more sense to keep the results of all these cases as Qobj. Then if one for example want to do the trace of the result it should work in all cases, and no special handing of C-numbers would be required since Qobj([1]).tr() would give something reasonable, but (Python complex).tr() would obviously fail. The use-case you are interested in, abs(some_bra \* some_ket), could easily be implemented in Qobj by implementing the **abs** special function. I think that would be a better way.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/28#issuecomment-28302814:242,simpl,simple,242,https://qutip.org,https://github.com/qutip/qutip/issues/28#issuecomment-28302814,1,['simpl'],['simple']
Usability,"I tested the code locally on my machine (OSX 10.13) on; - python from Terminal; - jupyter notebook; - Spyder; It turns out that `Bloch.render()` followed by `show()` had the same functionality of showing multiple times the Bloch sphere in a Jupyter Notebook but this is now more immediate, as `render` alone would work multiple times in jupyter notebook, but still having `show` not showing anything, whereas in the Terminal `render` would only ""reactivate"" the plot for `show` to subsequently plot it. I personally like it better as it is after this PR, also given that `render` is not as well documented as `show` in the Users Guide or tutorials.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/996#issuecomment-493925445:629,Guid,Guide,629,https://qutip.org,https://github.com/qutip/qutip/pull/996#issuecomment-493925445,1,['Guid'],['Guide']
Usability,I think @nwlambert and I can help with this. ; We could add some details in the Users Guide: ; 1) make a short `dynamics-reaction-coordinate.rst` file and place it in `guide/dynamics/`;; 2) link that file to the list of dynamical solvers in `dynamics.rst` inside `qutip-doc/guide/`; ; 3) add rcsolve to the list of methods cited in `apidoc/functions.rst` (unless that is self-generated); maybe this explains why in the API guide is not rendered automatically from rcsolve.py's docstrings.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1521#issuecomment-497561991:86,Guid,Guide,86,https://qutip.org,https://github.com/qutip/qutip/issues/1521#issuecomment-497561991,4,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"I think `hypothesis` is the best method here in the long term, but it will most likely have to be a long-term goal. I think the main pro in favour of it is that it actually is making an attempt to remove randomness; it's attempting to comprehensively test a spanning set of input parameters, rather than just Monte-Carlo'ing our way through and hoping. There's a couple of points which make it difficult to implement:. 1. QuTiP can be quite fragile with respect to unexpected input formats, particularly in older parts of the code.; 2. Various components are only accurate up to some tolerance, and the error propagation to work out how that corresponds to useful measurable quantities can be rather tricky. Those are certainly both solvable problems, and point 1 in particular is just general improvement of usability. The second point is about designing the tests well, which again is certainly doable, but will take a while (it takes long enough just to refactor them, let alone a total rewrite of large chunks of them!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663:809,usab,usability,809,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663,1,['usab'],['usability']
Usability,"I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"". I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427:230,simpl,simply,230,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427,1,['simpl'],['simply']
Usability,"I think the code ciuld be simplified for the user. The interface should be like the other solvers. E.g. no need to call odeint by hand, etc..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332188600:26,simpl,simplified,26,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332188600,1,['simpl'],['simplified']
Usability,"I think the first PR, 1757, was done on master rather than a branch, and I received guidance that this was not a good idea. So let's close 1757.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762#issuecomment-1015168857:84,guid,guidance,84,https://qutip.org,https://github.com/qutip/qutip/pull/1762#issuecomment-1015168857,1,['guid'],['guidance']
Usability,"I think this is still relevant and could be a topic of work for future google SoC students or other students. . Recently I met Johannes Bausch who at Caltech used the algorithm toolbox for some fun example (predict the winner of the [world cup](https://quantumfrontiers.com/2018/07/02/the-world-cup-from-a-quantum-perspective/)), but this points to the fact that the QIP suite is still used. . Also, there might be room for basic I/O functionality to QiSKit and Rigetti. This quantum compiler integrability would further drive interest from the educational point of view. QuTiP is the best playground to learn realistic quantum mechanics and the notion of a compiler back-end could prove enticing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/441#issuecomment-464298751:604,learn,learn,604,https://qutip.org,https://github.com/qutip/qutip/issues/441#issuecomment-464298751,1,['learn'],['learn']
Usability,"I think what you have done in the recent commit with the two if statements seems like a nice, simple, practical solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/875#issuecomment-394646070:94,simpl,simple,94,https://qutip.org,https://github.com/qutip/qutip/pull/875#issuecomment-394646070,1,['simpl'],['simple']
Usability,I think you can get one running for your fork by simply logging in.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607482278:49,simpl,simply,49,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607482278,1,['simpl'],['simply']
Usability,"I think you don't need to generate the apidoc manually. To add the API docs, all you need is to add the path `qutip.core.gates` to https://github.com/qutip/qutip/blob/master/doc/apidoc/functions.rst#quantum-objects. `make html` should then automatically read all the functions in the file and generate the API doc. To modify the API doc, e.g. adding new things, one simply edits the docstrings in each of the Python function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2144791759:366,simpl,simply,366,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2144791759,1,['simpl'],['simply']
Usability,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:174,simpl,simplifications,174,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['simpl'],['simplifications']
Usability,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:324,clear,clear,324,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,1,['clear'],['clear']
Usability,"I totally agree it is the right way to do numerics, but my point is that it should be written in the documentation.; For now the user have no way to answer the question ""in which unit should I express my Hamiltonian"", apart reading the source code. It is especially misleading that the [guide](http://qutip.org/docs/latest/guide/dynamics/dynamics-master.html) write hbar in the equations but never say how it is handled.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1360#issuecomment-696067845:287,guid,guide,287,https://qutip.org,https://github.com/qutip/qutip/issues/1360#issuecomment-696067845,2,['guid'],['guide']
Usability,"I tried your suggestions but unfortunately nothing changes. I think my issue is with the way the rotating frame approximation is being implemented. Prior to this, my issue was that the graph couldn't be plotted over a large time scale because w0 is so high, so I added (w-w0) to H0. That fixed it, but I'm not sure how that affects the H1_coeff function. Is it as simple as including a (w-w0) term there as well, or do I need to adjust it some other way? As you can see, the pulse does exist, but for some reason nothing I change in the code causes the pulse to affect the graphs in any way. . Also, I realized that the heaviside function may not actually be appropriate for this situation. My goal is to create a pulse that spikes up and dies down, but the heaviside function is a step function so it spikes up and stays there. Do you know if qutip has any functions for such pulses?. ![k](https://user-images.githubusercontent.com/29261370/113001273-42ce2600-9136-11eb-84f3-a4bcdd7c458f.PNG)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-810278045:364,simpl,simple,364,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-810278045,1,['simpl'],['simple']
Usability,"I try to run the code for finding floquet energies from the qutip user guide. . ```python; import numpy as np; from qutip import *; import matplotlib.pyplot as plt. delta = 0.2 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 2.5 * 2*np.pi; omega = 1.0 * 2*np.pi; H0 = - delta/2.0 * sigmax() - eps0/2.0 * sigmaz(); H1 = A/2.0 * sigmaz(); args = {'w': omega}; H = [H0, [H1, 'sin(w * t)']]; T = 2*pi / omega; f_modes_0, f_energies = floquet_modes(H, T, args); f_energies; ```. I got the following error . ```text; File ""<ipython-input-6-76f4206b44f0>"", line 1, in <module>; runfile('C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations/floquet.py', wdir='C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations'). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\spyder_kernels\customize\spydercustomize.py"", line 827, in runfile; execfile(filename, namespace). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\spyder_kernels\customize\spydercustomize.py"", line 110, in execfile; exec(compile(f.read(), filename, 'exec'), namespace). File ""C:/Users/605912/OneDrive - BOOZ ALLEN HAMILTON/DARPA/John Burke/Quantum apertures/calculations/floquet.py"", line 27, in <module>; f_modes_0, f_energies = floquet_modes(H, T, args). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\floquet.py"", line 102, in floquet_modes; U = propagator(H, T, [], args). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\propagator.py"", line 186, in propagator; _safe_mode=False). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\sesolve.py"", line 157, in sesolve; ss = _sesolve_QobjEvo(H, tlist, args, options). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\lib\site-packages\qutip\sesolve.py"", line 189, in _sesolve_QobjEvo; H_td.compile(omp=nthread). File ""C:\Users\605912\AppData\Local\Continuum\anaconda3\",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1207:71,guid,guide,71,https://qutip.org,https://github.com/qutip/qutip/issues/1207,1,['guid'],['guide']
Usability,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:376,simpl,simple,376,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,1,['simpl'],['simple']
Usability,"I use the qutip to do some Grover simulations. having a Hilbertspace of Grover an an additional entangled Hilbert space. In a simpler version there is only one state in the entangled Space so the program automatically chooses dimension 1. ; And then there are allot of errors coming because of this qutip error. ; At the moment I fixed it using a patched qutip version. And I think there are more cases when one has dynamical dimensions of a space, that there are cases in which the dimension is 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399020891:126,simpl,simpler,126,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399020891,1,['simpl'],['simpler']
Usability,"I was checking the status of this PR, sorry for the delay, @abhisekupadhyaya. . 1) **Address comments**: There's been some updates and CI tests pass. However, my comments are still not addressed, e.g., updates in docstrings, see above. Addressing this before the next months is crucial as then there may be quite some activity on the `qip` module. . 2) **Add tests**: We also need to add at least a couple of tests with some examples circuits. The tests could check:; 2.a) that the circuit does the same thing; 2.b) that the circuit is exactly the same (no change of gates into other gates). 2) **Qasm export**: Adding an export feature, e.g. `to_qasm`, would be great. But this PR could address just the import and be fine (changing name would be best). If the `to_qasm` feature was here, one could simply test it one way and return, and check that, e.g.; ```; read_qasm(qutip_circuit1.to_qasm()) == qutip_circuit1; read_qasm(qasm_circuit2).to_qasm() ==qasm_circuit2; ```; if this feature was there, one could also test randomly generated circuits. @abhisekupadhyaya do you think you can address 1) and 2)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565:800,simpl,simply,800,https://qutip.org,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565,1,['simpl'],['simply']
Usability,"I was imagining something much simpler for the exception class. There is a backport of the exceptiongroup stuff to older Pythons that we could use if we wanted to: https://pypi.org/project/exceptiongroup/. It's another dependency, but it will mean that on Python 3.11 people could start using ExceptionGroup and `except*` immediately if they wanted to. Users on Python 3.10 and below would have to catch ExceptionGroup or use the backport's ugly `with catch(...)` mechanism. . Then, many years from now when Python 3.10 is obsolete, we could drop the backport entirely. Personally I'm in favour of the simpler `ParallelMapException` that doesn't inherit from all the other exceptions. Then when 3.11 is out we can make `ParallelMapException` inherit from `ExceptionGroup` and 3.11 users will be able to use `except*`. People supporting 3.10 and below will have to use `except ParallelMapException`, but that will work just as well on 3.11.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437:31,simpl,simpler,31,https://qutip.org,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437,2,['simpl'],['simpler']
Usability,"I was just thinking about this again and came up with a good speed up for the truncated Hilbert space. I can't think of any method to get analytic closed-form solutions for the truncated space, though, so this is just a more efficient numerical method. First we take the generator of the displacement operator `G`, such that `exp(G)` is the displacement operator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equival",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:840,clear,clear,840,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['clear'],['clear']
Usability,"I was not referring to the implementation, I agree that the method you implemented is clearly much better, because as you say it only calculates matrix-vector product and trace in one go. However, you could have kept the same function API as previous cy_expect_rho_vec function and I doubt it would make any difference in the performance (perhaps a a small difference, and in that case we can keep both, but then the old cy_expect_rho_vec should use the same implementation as the one you suggested for cy_expect_rho_vec_fast).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/56#issuecomment-25358782:86,clear,clearly,86,https://qutip.org,https://github.com/qutip/qutip/pull/56#issuecomment-25358782,1,['clear'],['clearly']
Usability,"I was trying to see the phase transition of magnetization of a transverse Ising model, and I have the following graph. The magnetization changes unusually rapidly under the change of magnetic field and, I don't have this problem using my own library. Since the code I wrote is extremely simple and there is no error message, I wonder do you possibly have encountered the similar issues and have some suggestions on what it happens. Here is the code, and the graph. ----------------------------------------------------------; harray = np.zeros(11); for i in range(11):; harray[i] = 0.0001 * i; ; #print harray; ; marray4 = np.zeros(11). Mx = tensor(sigmaz(),identity(2),identity(2),identity(2))\; + tensor(identity(2),sigmaz(),identity(2),identity(2))\; + tensor(identity(2),identity(2),sigmaz(),identity(2))\; + tensor(identity(2),identity(2),identity(2),sigmaz()). earray4 = np.zeros(11); ; for ii in range(0, 11):; ; H = -(tensor(sigmaz(),sigmaz(),identity(2),identity(2)) \; + tensor(identity(2),sigmaz(),sigmaz(),identity(2)) \; + tensor(identity(2),identity(2),sigmaz(),sigmaz()) \; + tensor(sigmaz(),identity(2),identity(2),sigmaz())) \; - harray[ii]*(tensor(sigmax(),identity(2),identity(2),identity(2))\; + tensor(identity(2),sigmax(),identity(2),identity(2))\; + tensor(identity(2),identity(2),sigmax(),identity(2))\; + tensor(identity(2),identity(2),identity(2),sigmax())); . marray4[ii] = expect(Mx, H.eigenstates()[1][0]); ; plt.plot(harray, marray4, 'o-'); plt.show(). ![screen shot 2018-02-05 at 11 59 45 am](https://user-images.githubusercontent.com/35711575/35817669-17d7afe2-0a6c-11e8-859f-6ae1d686a7fe.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/811:287,simpl,simple,287,https://qutip.org,https://github.com/qutip/qutip/issues/811,1,['simpl'],['simple']
Usability,"I will vote for a deprecation warning being raised for a few versions of QuTiP with a `compile()` function that does nothing. The deprecation warning can briefly explain what changed and how to tackle it (in this case simply not use `.compile()`). It can also raise an error based on QuTiP's version such that our tests warn us about needing to remove it. Even if its a rarely used function and mostly employed internal, I still think that we should deprecate it appropriately as it will help making a smother transition to QuTiP 5.0.0. A HOW TO with some of the most significant porting changes is a also useful but I would prefer if it does not substitute deprecation warnings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115:218,simpl,simply,218,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115,1,['simpl'],['simply']
Usability,"I would like to try to build the solution for this. **Task 1:** For chrome, the error seems to be due to the CORS (Cross-origin Resource Sharing) policy of google chrome.; `Access to XMLHttpRequest at 'file:///C:/Users/Sid/Desktop/qutip-doc/QuTiP_tree_plot/d3_data/qutip.json' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.`. To fix this, I created a local server (on port 8080) from the `../qutip-doc/QuTiP_tree_plot` folder and then ran the URL `http://localhost:8082/qutip_org.html` on chrome.; Egde doesn't seemed to have any problem in running `qutip-doc.html`. **Task 2:** ; Clarification - We would right a new script to generate `qutip.json` from `apidoc/functions.rst`, just like `QuTiP_tree_plot/qutip-structure.py`. Am I right?. **Task 4:** ; Can you please elaborate on task 4 as to link to which API docs. **Task 5:**; The script written in Task 2 can be made to run for `classes.rst` and a json file would be created which would be used to generate a tree, right?; Where would we put it in the docs? guide-overview?. PS: I'm sorry if I've asked or stated an obvious thing, I am new to this community and am still trying to fimiliarize myself. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588:1127,guid,guide-overview,1127,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588,1,['guid'],['guide-overview']
Usability,"I would rather have the styling checks part of CI than pre-commit. Pre-commit hooks are a nice way to automate repetitive tasks, but for coding conventions, each developer tends to have their own setup (e.g. I would run black or pyflakes as a plugin in my editor, so that I get immediate feedback or fixes long before making a commit). Pre-commit hooks are also a poor choice for checking that coding style is followed, because developers will have different operating systems, difference versions of Python, black, pyflakes, etc, etc and so there are certain to be differences between what is considered correct by the scripts run by different developers. Finally, there are many valid reasons to commit broken code into branches, and I would not want to prevent that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1742#issuecomment-1001477467:288,feedback,feedback,288,https://qutip.org,https://github.com/qutip/qutip/issues/1742#issuecomment-1001477467,1,['feedback'],['feedback']
Usability,"I would suggest to change the `|` for `,` and also add a space after `type` and others, for example: `type = oper`. This is so that the fomating resembles that of Qobj. Nevertherless, feel free to open a Pull Request as giving feedback there is usually more conveninent. . Thanks for your effort! I am looking forward to your contribution 😄 .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2099#issuecomment-1454113177:227,feedback,feedback,227,https://qutip.org,https://github.com/qutip/qutip/issues/2099#issuecomment-1454113177,1,['feedback'],['feedback']
Usability,"I would write it as two separate collapse operators, just like you would do for a Hamiltonian with a constant and time-dependent term i.e. c_ops=[Op1,[Op2,’f(t)’]]. See the docs here,. http://qutip.org/docs/3.0.1/guide/dynamics/dynamics-time.html. for more info. Paul; On Sep 3, 2014, at 12:00 AM, Stefan Krastanov notifications@github.com wrote:. > What is the appropriate way to implement a colapse operator in mesolve that can not be expressed as time_dependent_function \* constant_operator (for instance Op1 + Op2*f(t))?; > ; > Is it only possible through rewriting the equation to be solved?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-54382667:213,guid,guide,213,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-54382667,1,['guid'],['guide']
Usability,"I'd be vastly surprised if there's a way of permitting a test which passes 99% of the time - on any particular test run how would it know?. I don't remember having seen anything about setting the initial seeds, but relying on a previous test to set a seed isn't a good idea - you'd always have to ensure that no tests were ever added or changed in-between that ever used random state or everything would get lost. We could fix the random seed for any test which uses random methods with a fixture to get around that. I actually think this is a true failure; the default solver `rtol = 1e-6`, but here we're using `rtol=1e-7` as the test, so the test is bugged (it's probably not the only one, and I may have missed some of these in `mcsolve` too). I should change this when I convert `test_mesolve.py`. Also, I clearly didn't read the log properly on that one - I thought it was one of the random errors from before!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303:811,clear,clearly,811,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303,1,['clear'],['clearly']
Usability,"I'd call the behaviour a bug. The partial trace keeping all possible subspaces has a clear, sensible meaning; I can't think of any circumstance where it would be surprising that it's a no-op. The behaviour happens because we're not explicit about the output type of `np.prod` in a few places in `_ptrace_dense` - I think we may have seen this before but looks like we never pushed the fix. I can do that shortly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1413#issuecomment-753968404:85,clear,clear,85,https://qutip.org,https://github.com/qutip/qutip/issues/1413#issuecomment-753968404,1,['clear'],['clear']
Usability,"I'll add that it might be worth addressing the fact that there are two common conventions for representing quantum states as tensors that each have their pros and cons. Perhaps this would be better placed in a separate issue, but I'll explain here anyway. Consider a joint state like $` |\psi_1 \psi_2 \rangle \langle \psi_3 \psi_4 | `$ where the dimensions of $` |\psi_i\rangle `$ are $` d_i `$. Two common representations of this abstract state as a tensor are; 1. $` (|\psi_1\rangle \otimes |\psi_2\rangle) \otimes (\langle \psi_3| \otimes \langle \psi_4|) `$, which has shape $`(d_1, d_2, d_3, d_4)`$; 2. $` (|\psi_1\rangle \otimes \langle \psi_3|) \otimes (|\psi_2\rangle \otimes \langle \psi_4|) `$, which has shape $` (d_1, d_3, d_2, d_4) `$. These two conventions essentially correspond to the ""super"" and ""choi"" representations for channels. Representation 1. is nice when you are doing most of your calculations with pure states, but then want a density matrix towards the end, which you can do with just `np.tensordot(my_ket_tensor, np.conj(my_ket_tensor), 0)`. Representation 2. is nice when you are working with density matrices and want to combine multiple subsystems, which you can do with `np.tensordot(my_density_tensor_1, my_density_tensor_2, 0)`. Doing either of these operations in the other representation involves very error-prone index permutation in my experience. When I said above that these two conventions should be ""addressed"" in some way, I was intentionally vague because I'm honestly not sure what the best way to do that would be. One option would be to simply mention it in the user guide somewhere, perhaps near the section on the Super and Choi representations. Another would be to support both conventions via optional parameters like `to_tensor_rep(my_qobj, convention='super')` or `to_tensor_rep(my_qobj, convention='choi')`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2353#issuecomment-2007183867:1587,simpl,simply,1587,https://qutip.org,https://github.com/qutip/qutip/issues/2353#issuecomment-2007183867,2,"['guid', 'simpl']","['guide', 'simply']"
Usability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:546,clear,clear,546,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,2,"['clear', 'simpl']","['clear', 'simplified']"
Usability,"I'm happy for it to be removed -- it's undocumented and fails straight away, so I doubt anyone is using it successfully.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1916#issuecomment-1145859124:39,undo,undocumented,39,https://qutip.org,https://github.com/qutip/qutip/issues/1916#issuecomment-1145859124,1,['undo'],['undocumented']
Usability,"I'm not entirely sure what's being asked here. `mcsolve` evolves the state `psi0` by the given Hamiltonian for the given times, and returns a `qutip.solver.Result` object that contains various quantities, such as how the state evolved for each of the trajectories at a given time, and values of expectation operators at those times if `e_ops` is given. This looks like a question that's best answered by [reading the user guide on solving system dynamics](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1189#issuecomment-809405566:422,guid,guide,422,https://qutip.org,https://github.com/qutip/qutip/issues/1189#issuecomment-809405566,2,['guid'],['guide']
Usability,"I'm not sure about this, but I think that we should keep tensor as simple as possible. Meaning that we could support tensor products of superoperators with the same representation, if that operation makes any sense, but not have it converting between different representations or doing any reshuffling to make sure that `to_super(tensor(A, B)) == tensor(to_super(A), to_super(B))`. If there are any important use-cases where this property would be important we could reconsider this. Do you have any examples in mind?. If not I would recommend we raise an error if tensor is called with superoperators with different representations, and set Qobj.superrep to the correct representation if all arguments are the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99#issuecomment-39528800:67,simpl,simple,67,https://qutip.org,https://github.com/qutip/qutip/pull/99#issuecomment-39528800,1,['simpl'],['simple']
Usability,"I'm sorry I don't have a huge amount of time at the moment, but just to add an extra point (that it looks like I didn't think about before): if we _do_ add this, then any method that requires an unconditional `import qutip` in downstream packages probably isn't a suitable solution - `import qutip` already takes far too long (though a lot of this is importing various parts of `scipy`, which another library might do on our behalf), and it means that they'd have to do their own import checking to handle optional dependencies. In that sense, (ab)using Python's duck-typing with a magic method might be the best way to break the dependency/import problem. I'm definitely still against implicit conversion to `Qobj` in pretty much any situation - I can imagine we could define a safe, fairly forward-compatible interface for letting people do `qutip.Qobj(x)`, but as it stands, that's the limit that I'd want the interface to be used for. I particularly am really against the idea of implicit conversion. I don't see an advantage to allowing QuTiP functions to act implicitly on other objects; it means our own functions are slower (because we have to explicitly test inputs on _everything_), and it restricts us more from improving `Qobj`'s internals, because we have to maintain compatibility with the interface. We'd never really be able to output anything _other_ than a `Qobj` without this, so there's no reason not to just have the user convert the inputs to `Qobj` explicitly themselves - that isolates the efficiency penalty so you only pay it if you need it, and it'll likely be clearer in the end anyway, because explicit is better for following the logic than implicit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301:1588,clear,clearer,1588,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301,1,['clear'],['clearer']
Usability,I'm trying to make some simple example to see what went wrong. The `tempfile.TemporaryDirectory()` itself seems ok.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605326436:24,simpl,simple,24,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605326436,1,['simpl'],['simple']
Usability,"I've been playing around with larger systems recently; when I started out ptrace had a memory issue and couldn't handle what I was doing, so I had written a home-made version to do it. Recently I ended up doing the ptrace with the fixed built-in function and I found it to be much slower. I did some testing with my new function. At least on the machine I'm running on, with 9+ qubits it's about 10x faster for calculating a partial trace on a density matrix. If you're starting out with a ket, you can go even faster, an additional 5x improvement: (test code below); ```; Running time (ms/trace); 2 3 4 5 6 7 8 9 10 qubits; ptrace (dm) 0.4 0.3 0.3 0.3 0.6 1.9 6.6 33.4 137.9; new func (dm) 0.5 0.4 0.4 0.4 0.5 0.7 1.0 2.8 13.1 ; ptrace (ket) 0.6 0.5 0.5 0.5 0.9 2.7 8.5 37.2 167.7; new func (ket) 0.5 0.4 0.4 0.4 0.5 0.6 0.9 1.0 3.2 ; sum((rho-rho).norm()); dm 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ket 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ```. My new version is pretty simple, using numpy's built-in ndarray routines. I've looked at the code for ptrace and it's a bit opaque to me; at the moment I don't feel quite up to modifying it, so I'm just putting up the code I've used instead of doing a pull request. My new function is here:; ```; def ptracealt(rho,qkeep) :; rd = rho.dims[0]; nd = len(rd); qkeep = list(sort(qkeep)); dkeep = (np.array(rd)[qkeep]).tolist(); qtrace = list(set(np.arange(nd))-set(qkeep)); dtrace = (np.array(rd)[qtrace]).tolist(); if isket(rho) :; vmat = (rho.full(); .reshape(rd); .transpose(qkeep+qtrace); .reshape([prod(dkeep),prod(dtrace)])); rhomat = vmat.dot(vmat.conj().T); else :; rhomat = np.trace(rho.full(); .reshape(rd+rd); .transpose(qtrace+[nd+q for q in qtrace]+qkeep+[nd+q for q in qkeep]); .reshape([prod(dtrace),prod(dtrace),prod(dkeep),prod(dkeep)])); return Qobj(rhomat,dims=[dkeep, dkeep]); ```; and the test code here: ; ```; Nqmax=10; ntest = 100; trdiff = np.zeros([2,Nqmax-1]); ttr = np.zeros([4,Nqmax-1]); for nd in range(2,Nqmax+1) :; r0 = [ rand_d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1076:970,simpl,simple,970,https://qutip.org,https://github.com/qutip/qutip/issues/1076,1,['simpl'],['simple']
Usability,I've created a new PR for the qutip-doc repository containing these changes: https://github.com/qutip/qutip-doc/pull/108; Might need some feedback on the text I wrote.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-602814171:138,feedback,feedback,138,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-602814171,1,['feedback'],['feedback']
Usability,"I've done another round of reviewing. I'm still unhappy with `register_feedback` and `add_feedback` on Solvers, but I'd like to propose that we try merge this PR with those in place and then argue about them separately outside of this PR and change things if I manage to convince you. :). I'll try summarize my point of view here (just so that I don't forget my own thinking):. - Solvers provide feedback.; - QobjEvos use feedback.; - Each solver class should define what feedback it can provide.; - Each QobjEvo should define what feedback it uses. The sensible place to do this is when the `QobjEvo` is constructed.; - When a solver is constructed or updated, it should check that it can provide the feedback used by all of the relevant `QobjEvo`s and raise an exception if it can not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911:396,feedback,feedback,396,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911,5,['feedback'],['feedback']
Usability,"I've done some simple benchmarks and indeed there seems to be a nice speedup. http://nbviewer.ipython.org/gist/jrjohansson/e63daeb3a41f95f163ad. so it definitely seems worthwhile to add support for this type of time-dependence in QuTiP. But string part of the definition of H is your example can be automatically generated knowning the times array, as I did in the notebook linked above. Therefore, I wonder if it may not be even more convenient if one simply could do. ```; >>> H = [H1, [H2, pulse]]; ```. It would require a few more changes in mesolve/sesolve and in _ode_check.py, but would give a nice clean API for using arrays to define time-dependences. How do you feel about that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44613285:15,simpl,simple,15,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44613285,2,['simpl'],"['simple', 'simply']"
Usability,"I've had a thorough look. Simplifying the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just pr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:26,Simpl,Simplifying,26,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,1,['Simpl'],['Simplifying']
Usability,"I've lost the plot a bit with a whole load of changes to `Coefficient` now merged into this PR. Is there a chance we can split that out into its own PR?. I would expect `QobjEvo.__call__` to be thread-safe/re-entrant. The fact that coefficients seemingly don't support this immediately is worrying to me. A simple call like that changing ""global"" state of the object is dangerous; it has a habit of leaking out even in single-threaded applications, just like the bug I described previously with a call to `mesolve` modifying an existing `QobjEvo` in place. In this case I don't see an immediate bug, but it's very non-obvious behaviour and it would be easy to accidentally introduce one in it in the future (or maybe I just can't think of one now). Having `_BaseElement` be mutable makes all time-dependent operations of `QobjEvo` unresolvably thread-unsafe without copying on every operation. That said, looking again, I'm not sure I understand `_BaseElement`: it seems like `_EvoElement` and `_FuncElement` do entirely different things on `call`? What's the purpose of it, and if we put all speed considerations aside what would the signature and behaviour of `_BaseElement._call` be?. Could you write some docstrings on all the elements to explain their use-cases as well, so we've got it all stored for the future?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122:307,simpl,simple,307,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122,1,['simpl'],['simple']
Usability,"I've marked out a few things that I noticed, though I'm still learning about the internals, so I'm not sure I caught anything of great importance. As for terminology for `type`, I don't see anything wrong with `operator-ket` or `operator-bra`, nor am I sure that there's any particularly standard terminology. Especially given that your terminology choice is clearly marked in `Qobj`'s docstring, I think it works quite well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/96#issuecomment-39093076:62,learn,learning,62,https://qutip.org,https://github.com/qutip/qutip/issues/96#issuecomment-39093076,2,"['clear', 'learn']","['clearly', 'learning']"
Usability,"I've tried this PR and it seems to work fine, and it indeed seems to make TextProgressBar more responsive, so I'll merge this now. Thanks. The coding style policy is that the code is supposed to be pep8 compliant, and style fixes are very welcome, so no need to revert anything.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/114#issuecomment-41647033:95,responsiv,responsive,95,https://qutip.org,https://github.com/qutip/qutip/pull/114#issuecomment-41647033,1,['responsiv'],['responsive']
Usability,"If those editors claim to provide terminal emulation it should be reported as bugs to them. However, even if it is fixed there it will take a long time before such a fix would reach end-users. I think in the interest of avoiding regressions I think we should restore the previous TextProgressBar and rename the current one to EnhancedTextProgressBar or something like that. Then this new progress bar would not disrupt peoples workflow and users who wants to use it can do so by creating an instance of it and pass it to progress-bar enabled functions using the progress_bar keyword argument.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63267628:388,progress bar,progress bar,388,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63267628,1,['progress bar'],['progress bar']
Usability,"If we moved normalization into the solvers, then we wouldn't need the preprocessors. The copy logic for processors could be kept so that the state is only copied by the results if the processors require it, but we'd then need the solver to tell the result whether it had already copied the state. We'd also need to make sure that the normalization logic in the solver was re-usable and override-able. The _post_init() would still be useful for processing options (e.g. the HEOMResult already does that to process the ado_return option).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1142321531:375,usab,usable,375,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1142321531,1,['usab'],['usable']
Usability,"If you run the documentation build twice, you will get several megabytes of diff between the two runs. This is a problem for us deploying to the website, because our website is managed in a git repository, and updates to large binary files need to persist in the `.git` directory forever. Our `.git` directory for qutip.github.io is getting huge as it is (257MB on my machine right now), and it gets bigger every time we change and rebuild. The biggest problem I can think of immediately is that there are lots of graphs and images in the QuTiP guide that rely on generating random data (the `mcsolve` guide, for example). This means that the graphs generated each time are subtly different, but since they're binary files, `git` mostly has to store a complete change. This adds up to several megabytes of changes to be stored every time the docs are deployed to the website. We could do with fixing all random seeds, probably for every single plotting command, so that the pictures are byte-for-byte exact between runs. This is a separate problem to qutip/qutip#1539; that's about setting up some sort of static CDN/hotlinking to heavy resources. This one is about ensuring that the resources _we_ create don't arbitrarily change every documentation build.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1540:545,guid,guide,545,https://qutip.org,https://github.com/qutip/qutip/issues/1540,2,['guid'],['guide']
Usability,"If you work only with solver, you can only update the args once per step.; To have it apply each time the rhs is used it need to be inserted into `QobjEvo`.; The method `_prepare` is there for that, it's called at the start of `matmul`, and `expect`.; I was thinking of using it like this:. ```; cdef class QobjEvo_With_FeedBack(QobjEvo):; """"""; QobjEvo which support feedback.; """"""; cdef dict feedback. def __init__(self, Q_object=[], args={},; tlist=None, deepcopy=False, copy=True):; self.feedback = {}; super().__init__(Q_object, args, tlist, deepcopy, copy). def add_feedback(self, args_key, function):; self.feedback[args_key] = function. cdef double _prepare(self, double t, Data state=None):; if state is not None:; self.arguments({key: feedback(t, state); for key, feedback in self.feedback.items()}); return t + self._shift_dt ; ```; The state will be column stacked Data object, so the function much reshape and restore dims, etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887:367,feedback,feedback,367,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887,7,['feedback'],['feedback']
Usability,"Implements the changes mentioned in #1203. The `qutip.graph` functions are pure mathematical functions which are beyond the purview of the package. Most of them have already been merged into `scipy.sparse.csgraph`, so we now move to using those and mark the functions as deprecated. Only two functions are actually used, and they're not even currently tested. `weighted_bipartite_matching` is not present in `scipy`, but is still marked as deprecated because we can move it into being an internal-only function, or simply remove the code that depends on it since those paths are not tested. This will allow the removal of a good amount of Cython code, and simplify maintenance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1206:515,simpl,simply,515,https://qutip.org,https://github.com/qutip/qutip/pull/1206,2,['simpl'],"['simplify', 'simply']"
Usability,Improve description of random number generation in mcsolve guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1677:59,guid,guide,59,https://qutip.org,https://github.com/qutip/qutip/pull/1677,1,['guid'],['guide']
Usability,Improve setting explanation in the guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2403:35,guid,guide,35,https://qutip.org,https://github.com/qutip/qutip/pull/2403,1,['guid'],['guide']
Usability,"In [3e530c0](https://github.com/qutip/qutip/pull/1854/commits/3e530c01d9cf686fc195c38c2cc26d0ee5bccfa8) I borrowed @nonhermitian's suggestion and switched to `concurrent.futures.ProcessPoolExecutor` in the hopes that the core Python developers have figured out how to make that works on Windows too. It also simplifies the management of the pool of workers, which is a win by itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854#issuecomment-1168954175:308,simpl,simplifies,308,https://qutip.org,https://github.com/qutip/qutip/pull/1854#issuecomment-1168954175,1,['simpl'],['simplifies']
Usability,"In `brtools`'s tests, we could check that the results `eigenvector` are mathematically right, without matching `scipy`'s result. Should be quite simple and we would more resilient to changes in scipy. . Did anybody check if it solves the segfault issues on Mac yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632:145,simpl,simple,145,https://qutip.org,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632,1,['simpl'],['simple']
Usability,"In all my recent PR branches many commits are shown. I think these date back to when we started Squash & Merge as our policy. The same policy is in use on our conda-forge/qutip-feedstock but I don't find this issue there. I did a lot of reading, but could not find a nice simple way to stop this happening. Do we know why this is happening? I see @nonhermitian has a similar string of old commits on his PR branches too. I see we have a new 'Rebase and Merge' option for merging PRs now. Do we think we should be using this?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/672:272,simpl,simple,272,https://qutip.org,https://github.com/qutip/qutip/issues/672,1,['simpl'],['simple']
Usability,"In certain circumstances, `zcsr_isherm` can give a `False` negative. This is usually masked by the `auto_tidyup` option being turned on. Reproduce:; ```python; >>> import numpy as np; >>> import scipy.sparse; >>> import qutip; >>> x = scipy.sparse.csr_matrix(np.array([[1, 1e-15j], [0, 1]])); >>> bool(qutip.cy.spmath.zcsr_isherm(x, 1e-12)); False; ```; Up to the tolerance specified (`1e-12`), the given matrix _is_ Hermitian, so it should return `True`. This happens when a small non-zero value (lower than the tolerance) is compared to a zero. This is because the structure test in `zcsr_isherm` assumes that for Hermicity to hold, there _must_ always be an explicitly stored corresponding element for each entry, however clearly this isn't always the case. It hasn't appeared before because we always have `auto_tidyup` turned on with a sufficiently large tolerance that these values would be removed by almost all operations which could have introduced this disparity (mostly matrix multiplication). (I'll fix this on both the `master` branch and on `dev.major`, this is just for posterity)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1350:725,clear,clearly,725,https://qutip.org,https://github.com/qutip/qutip/issues/1350,1,['clear'],['clearly']
Usability,"In general in pytest we use the bare keyword `assert` for almost everything. All the functions in `np.testing` are from the ""before times"", when test tooling wasn't as good as it is nowadays - they were a big improvement on available warning messages back before 2015. Nowadays, though, `pytest` does introspection on assertion failures, so it has even better message reporting than the `np.testing` functions, and it lets you write much clearer code. For example, `assert_equal(x, y)` is much better spelled in pytest as `assert x == y`, because it's much faster to read and pytest does better error reporting for it. Similarly, testing for exceptions is better with; ```python; with pytest.raises(ValueError):; call_that_raises(1, ""hello, world""); ```; as opposed to the numpy form `np.testing.assert_raises(ValueError, call_that_raises, 1, ""hello, world"")` - the pytest one is much easier to read, and the error message is better. The only numpy one we still use is `np.testing.assert_allclose` when we're comparing several numpy arrays. That's just because `pytest` doesn't have a good function that's aware of multidimensional arrays (at least not one that I know). This file still has a load of old numpy testing code in it (e.g. `np.testing.assert_equal`) because it was written quite a long time ago, when that was the recommended way of doing things. We're changing over slowly, so we can take advantage of all the nice features of pytest. In this case, I changed `np.testing.assert_allclose(x, y, atol=tol)` to `assert abs(x - y) < tol`. I removed `np.testing.assert_allclose`, because that gives the mistaken impression that we're comparing arrays (we're not, we're comparing two scalars). I could have changed it to `assert x == pytest.approx(y, tol=tol)`, except in this case the test file hasn't been converted to `pytest` style yet, and I wanted to keep the total change of this PR as small as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671:438,clear,clearer,438,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671,1,['clear'],['clearer']
Usability,"In qutip-tensoflow, we aim to include TensorFlow's autodifferentiation with Qobj. However, this will require the following code to work:; ```python; import numpy as np; import qutip. random_matrix = np.random.random((2, 2)) + 1j * np.random.random((2, 2)); complex_number = np.random.random((1, 1)) + 1j * np.random.random((1, 1)). qobj = qutip.Qobj(random_matrix); qobj*complex_number; ``` ; I used numpy `ndarray` instead of a `tf.Tensor` or `tf.Variable` for simplicity and so that the example is reproducible. . Currently this example raises: ; ""TypeError: incompatible dimensions [[2], [2]] and [[1], [1]]""; as `__mul__(self, other)` defaults to `__matmul__(self, other)` when `other` is not an instance of `numbers.Number`. . If instead we do:; ```python; complex_number*qobj; ```; The error raised is:; ""TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Qobj'""; This error is different because `__rmul__` checks first for `other` being an instance of `numbers.Number` and if not, it raises `NotImplementedError`. It does not check whether `Qobj(other)` works. I would say this is undesired and that `__rmul__` should try first converting `other` into `Qobj` and not assume that other is already `Qobj`. . **Describe the solution you'd like**; I would like to suggest either:; 1) changing the behaviour of `matmul` dispatcher so that (1,1) shaped data is multiplied element wise by default. However this, although not terrible, it breaks conceptually what matmul is, as a (1,1) x (2,2) matrix multiplication can not happen. 2) Allow `mul` dispatcher to have as input a `Data` object. In this way we would raise an error when the `Data` for `mul` dispatcher is not of shape (1,1) and perform an elementwise multiplication when it is. I am not sure how difficult it is to code this. 3) Create `mul_elementwise` dispatcher to have as input two `Data` objects and perform elementwise multiplication. Another change that I would like to suggest is to add a check in `__rmul__` to see",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607:462,simpl,simplicity,462,https://qutip.org,https://github.com/qutip/qutip/issues/1607,1,['simpl'],['simplicity']
Usability,"In some comments (not the docstrings) in `random_objects.py` and `metrics.py` (that I can think of - possibly there are others), there are high-range unicode symbols used to make the mathematics clearer. This couldn't be done with the `:math:` sphinx directive because it's about code comment readability. I'll close this for now because it's very old, and really the ""proper"" solution is just to use a text editor that knows how to handle all text.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/907#issuecomment-809454579:195,clear,clearer,195,https://qutip.org,https://github.com/qutip/qutip/issues/907#issuecomment-809454579,1,['clear'],['clearer']
Usability,"In theory the `correlation_2op_1t` function is only valid when you pass in the steady state solution of the Liouvillian. However, we implement it just by calculating `<A(t) B(0)>` - it's not _immediately_ clear to me that that our output is necessarily correct when you don't pass in a steadystate (especially if `taulist` doesn't start from 0). I _think_ it's fine in all cases, but perhaps Neill you can check me on that front?. I'd agree with Neill that truncation of the thermal state basis is likely the reason you were failing to get that to work exactly right. The tolerance calculation will actually be a bit more involved because QuTiP returns a normed dm. That will cause all the values to shift by relatively the same amount, and then you've got to factor in the solver tolerance on top of those errors, but the principle is correct for sure. *edit*: I'm happy and ready to merge this, but I'll just hold off for a day or so in case Neill has chance to answer my last minor query.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478#issuecomment-815021669:205,clear,clear,205,https://qutip.org,https://github.com/qutip/qutip/pull/1478#issuecomment-815021669,1,['clear'],['clear']
Usability,"Indeed, all subtitles are meant to be kept. But I agree that rewording the titles could help. I also like the idea to make the comment only visible when writing. What about; ```; **Feature Request Description**; <!-- A clear and concise description of what you want to happen.-->; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1266#issuecomment-629656289:219,clear,clear,219,https://qutip.org,https://github.com/qutip/qutip/issues/1266#issuecomment-629656289,1,['clear'],['clear']
Usability,Interesting discussion about the relationship between OpenMP and multiprocessing -- https://scikit-learn.org/stable/faq.html#why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux (in case this is relevant when bringing OpenMP back).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948#issuecomment-1171423571:99,learn,learn,99,https://qutip.org,https://github.com/qutip/qutip/pull/1948#issuecomment-1171423571,1,['learn'],['learn']
Usability,Interesting discussion about the relationship between OpenMP and multiprocessing -- https://scikit-learn.org/stable/faq.html#why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux (in case this is relevant when bringing OpenMP back). _Originally posted by @hodgestar in https://github.com/qutip/qutip/issues/1948#issuecomment-1171423571_,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1904#issuecomment-1171447682:99,learn,learn,99,https://qutip.org,https://github.com/qutip/qutip/issues/1904#issuecomment-1171447682,1,['learn'],['learn']
Usability,"Interesting observation, the vector_to_operator seems to expect an ""operator-ket"" class, as seen in the examples: . http://qutip.org/docs/3.1.0/guide/guide-states.html. In the code, it expects the dimensions of the operator(""op"") should be: . `op.dims = [ [[rows], [cols]], [1]]`. This is probably to keep in line with the way operator_to_vector sets the dimensions. I am not sure what the expected behavior is supposed to be with a ""ket"" instead of a ""operator-ket"". You are correct to think that this behavior changed in release 4.5 as the shape passed to the sp_reshape function in vector_to_operator changed from:. `n = int(np.sqrt(op.shape[0]))`; `shape = (n, n)`. to . `shape = (np.prod(q.dims[0]), np.prod(q.dims[1]))`. The first preserves the correct ""size"" (which is later used in the check which throws ""Exception: Total size of array must be unchanged."") but the latter one does not for kets. . Maybe we should return the shape assignment to the previous one ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828:144,guid,guide,144,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828,2,['guid'],"['guide', 'guide-states']"
Usability,"Interesting... You see, the gate `Gate(RY, targets=[0, 1], controls=None)` is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275:78,clear,clearly,78,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275,1,['clear'],['clearly']
Usability,Is there a simplest case I can run the `mesovle` on Linux with Nvidia GPU?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1938640761:11,simpl,simplest,11,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1938640761,1,['simpl'],['simplest']
Usability,"Is this about qutip.nonmarkov.heom? If so, we can close it -- the new BoFiN HEOM added for QuTiP 4.7 includes an extensive guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1519#issuecomment-1097176570:123,guid,guide,123,https://qutip.org,https://github.com/qutip/qutip/issues/1519#issuecomment-1097176570,1,['guid'],['guide']
Usability,"It could be nice to highlight also graphically the contents of the documentation and/or tutorials, using [`sphinx-gallery`](https://github.com/sphinx-gallery/sphinx-gallery). This could even be added to the website, as it is the case for https://scikit-learn.org, I think.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1530:253,learn,learn,253,https://qutip.org,https://github.com/qutip/qutip/issues/1530,1,['learn'],['learn']
Usability,"It could be that a pulse is too thin and missed.; When working with pulse, it's safer to always set [max_step](https://qutip.readthedocs.io/en/latest/guide/dynamics/dynamics-time.html#working-with-pulses).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552#issuecomment-2455520658:150,guid,guide,150,https://qutip.org,https://github.com/qutip/qutip/issues/2552#issuecomment-2455520658,1,['guid'],['guide']
Usability,"It is a really nice test. It clearly shows how bad is the 'iterative' method. For dim=20 the discrepancy between 'iterative' and 'clenshaw' is 1e-12 and for dim=50 it already becomes 1e-5, whereas 'laguerre' agrees with 'clenshaw' up to 1e-14 independent of dim.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242816743:29,clear,clearly,29,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242816743,1,['clear'],['clearly']
Usability,"It is a simple fix. Just replace ""append"" with ""add_gate"" in ""temp.append(self.gates[self.N - i - 1])"". I tested myself and it works like a charm now.; You are welcome. I love QuTip and it is an honor to help the developers.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/682#issuecomment-292738008:8,simpl,simple,8,https://qutip.org,https://github.com/qutip/qutip/issues/682#issuecomment-292738008,1,['simpl'],['simple']
Usability,It is actually very similar to your solution. We should add this to the migration guide.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389#issuecomment-2046571588:82,guid,guide,82,https://qutip.org,https://github.com/qutip/qutip/issues/2389#issuecomment-2046571588,1,['guid'],['guide']
Usability,It is not so much the safety checks as the order in which a simple single operator is converted internally to a list vs. when the safety checks are run. This is fixed in #631.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/630#issuecomment-272360048:60,simpl,simple,60,https://qutip.org,https://github.com/qutip/qutip/issues/630#issuecomment-272360048,1,['simpl'],['simple']
Usability,"It is possible that someone having trouble compiling qutip extensions may wish to set CFLAGS, CPATH, C_INCLUDE_PATH. Currently these would not be used in the qutip installation / building or extensions generally. I had a scenario where I was trying to install qutip on machines which I did not have sudo access on. They did not have cython or pydev. So I managed to install pydev and cython into the home folder. For the latter I had to set the C_INCLUDE_PATH to the local install of the C headers, or maybe I used the -I switch with CFLAGS. This did not work for qutip, so I made some changes to the `setup.py` files, and also the `pyximport` in `__init__.py`. However, none of it worked due to disk space issues in the end. Clearly, if there had been enough disk space, then Anaconda would have been a much better solution. So, the question are: ; 1. Is there any value in making a PR from the changes I made (in a local copy) to use the CFLAGS, CPATH, C_INCLUDE_PATH env vars if they are set?. 2. If so should the qutip pyximport extend or prepend the CFLAGS or should it not set CFLAGS at all if the user has set values?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/571:726,Clear,Clearly,726,https://qutip.org,https://github.com/qutip/qutip/issues/571,1,['Clear'],['Clearly']
Usability,"It is possible, using a tensor structure for the Hilbert space, with a subsystem assigned to each player. You can have a look at the documentation, where it shows the case of [three coupled qubits](http://qutip.org/docs/latest/guide/guide-tensor.html#three-coupled-qubits). A library that specifically tackles quantum games is [toqito](https://toqito.readthedocs.io/en/latest/), by @vprusso. You can ask more support in the google group [forum](https://groups.google.com/forum/#!forum/qutip), I am closing the issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1425#issuecomment-769829077:227,guid,guide,227,https://qutip.org,https://github.com/qutip/qutip/issues/1425#issuecomment-769829077,2,['guid'],"['guide', 'guide-tensor']"
Usability,"It looks like the loop on line 64 https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/qobjevo_codegen.py#L64 completes on the first try, but doesn't manage to import any objects, so the import_list remains empty. Could you use pdb to access local variables?. ---; P.S. You can use Markdown to format the traceback in a user-friendly way:; e.g. ; \`\`\`python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; \`\`\`. Renders to:; ```python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108:350,user-friendly,user-friendly,350,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108,1,['user-friendly'],['user-friendly']
Usability,"It refers to the system's Liouvillian, I'd say. I think all the `C_n` there are stochastic jumps, `sc_ops `, while the system Liouvillian is the constant part, `c_ops`. But I am not 100% sure. . The user guide is partly out of date there, @Ericgig and others have considerably extended the functionalities of the stochastic solvers. Looking at the [API documentation](http://qutip.org/docs/latest/apidoc/functions.html#module-qutip.stochastic) is safer, and the [source code](http://qutip.org/docs/latest/modules/qutip/stochastic.html) is even more complete. . Meanwhile, you can also have a look at these development notebooks [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-milstein-speed-test.ipynb), [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb), and [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) with regards to the new methods (you can find them all, a bit hidden, at the bottom of the http://qutip.org/tutorials.html list). Technically this issue could be transferred under [`qutip/qutip-doc`](https://github.com/qutip/qutip-doc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702:204,guid,guide,204,https://qutip.org,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702,1,['guid'],['guide']
Usability,"It seems like this is now done, save for the possibility of using the profiler instead of simple timings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/250#issuecomment-63594936:90,simpl,simple,90,https://qutip.org,https://github.com/qutip/qutip/pull/250#issuecomment-63594936,1,['simpl'],['simple']
Usability,"It seems to me that what counts in the end is how good the result of the simulation in the truncated Hilbert space coincides with the exact solution for the infinite Hilbert space. As an example I tried it out on a pumped mode in a cavity (https://gist.github.com/bastikr/136908ce690b299e2e82bd13ab2cb47a). Both approaches, i.e. using the analytically generated coherent state or generating it with the displacement operator as initial states, yield pretty much the same error compared to the analytic result. I may have made a mistake or simply misunderstood your statement. Can you maybe further help me to understand this issue?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/683#issuecomment-293311686:539,simpl,simply,539,https://qutip.org,https://github.com/qutip/qutip/pull/683#issuecomment-293311686,1,['simpl'],['simply']
Usability,"It seems to work now (the failing test is unrelated). I will briefly summarize what I found out and changed. Setting up and using an MPI environment is surprisingly difficult, and I don't think it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:254,guid,guide,254,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,2,['guid'],['guide']
Usability,"It sounds great, thank you @wrzadkow. I am going to look into it. . * It would be great to add some details about it in the Users Guide, so that they show up in the [States](http://qutip.org/docs/latest/guide/guide-states.html#density-matrices) part. To do so you would need to make an .rst file in [qutip-doc](https://github.com/qutip/qutip-doc). . What actually would be much needed in a broader view is a (short) Metric subsection in the Users Guide, showing which equations are implemented in LaTeX. This is beyond this PR but your expertise might be very helpful. . Also, recently some advanced functionalities relative to metrics were developed in [Qptomographer](https://qptomographer.readthedocs.io/) @phfaist. This library optimally implements the diamond norm and uses QuTiP's classes https://qptomographer.readthedocs.io/en/latest/figures_of_merit/. It would be great to see if this can be used to address an open issue of non-maintained dependencies that @ajgpitch has been assessing, issue #874.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/998#issuecomment-494625047:130,Guid,Guide,130,https://qutip.org,https://github.com/qutip/qutip/pull/998#issuecomment-494625047,4,"['Guid', 'guid']","['Guide', 'guide', 'guide-states']"
Usability,"It will be useful for solver feedback.; In v4 we can define Hamiltonian to depend on the state: `H(t, args, psi/rho)`.; We don't have it working in v5, but we will need to restore it before release.; This `_prepare` catch the time and state at the start of `matmul` and `expect` and update the arguments according to feedback.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575:29,feedback,feedback,29,https://qutip.org,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575,2,['feedback'],['feedback']
Usability,"It would be much better to thoroughly code review this pull request before merging rather than merging sooner and make additional PRs later. You can keep working on the PR while getting feedback on it without merging now. Things like model names and API is better to sort out once and for all before the first merge. . With this PR, I think the ossolve modeule name is not very appropriate. Most of qutip is related to open system solvers. I think rcsolve (reaction coordinate solver) is a more accurate name for this module. Also, depending on how much code you have in mind to include in this module, it might be more appropriate to put all of it in a file called rcsolve rather than creating a new module directory like you propose here. Also, don't use underscores in module names (rc_model -> rcmodel or better yet rcsolve).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-102566203:186,feedback,feedback,186,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-102566203,1,['feedback'],['feedback']
Usability,"It would be nice if the docstrings in QuTiP were well formatted, such that, when Sphinx builds the API and guidelines documentation, there are working link to QuTiP functions and classes. An example of working link is `qutip.steadystate.steadystate` in; http://qutip.org/docs/latest/guide/guide-steady.html#steady-state-solvers-in-qutip. An example of working link in the API doc is options: `qutip.solver.Options` in the attributes of the `HEOMSolver` class; http://qutip.org/docs/latest/apidoc/classes.html#non-markovian-solvers. A way to proceed would be to:. 1) reformat all instances in the docstrings of qutip/qutip such that they are in the form of :py:meth:`mymodule.MyClass.mymethod`, see; https://stackoverflow.com/questions/22700606/how-would-i-cross-reference-a-function-generated-by-autodoc-in-sphinx. 2) Build the documentation with Sphinx to check that the change works and generates an active hyperlink in the relative html page of the documentation. . 3) Iterate 1) and 2) for instances in which Qobj or other QuTiP functions or classes are found.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1526:107,guid,guidelines,107,https://qutip.org,https://github.com/qutip/qutip/issues/1526,3,['guid'],"['guide', 'guide-steady', 'guidelines']"
Usability,It's certainly easier if it was multiple smaller ones but we can do it like this. You can simply continue in another Pr for the remaining tests.; I will start evaluating file by file starting with parts of the code I am the most familiar with:; - [x] test_mcsolve.py; - [x] test_lattice.py ; - [x] test_interpolate.py ; - [x] test_fastsparse.py ; - [ ] test_expect.py ; - [ ] test_eigenstates.py ; - [ ] test_dimensions.py ; - [ ] test_cy_structs.py,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-609960145:90,simpl,simply,90,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-609960145,1,['simpl'],['simply']
Usability,"It's in development. ; If you use qutip v5.0.0a2 on pypi or master branch here with [qutip-jax](https://github.com/qutip/qutip-jax), some solver can work on gpu. (We tested `sesolve` and `mesolve`, mcsolve should work, stochastic, HOEM, brmesolve don't.); The readthedocs of qutip-jax shows how to use it. qutip-jax is not up to date with the latest versions.; If you are interested in trying it, I will make it works with the latest jax version and qutip master.; Any and all feedback appreciated. We expect an official release of these features in March.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944:477,feedback,feedback,477,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944,1,['feedback'],['feedback']
Usability,"It's not a typo, but I wasn't completely clear about that; the composition of an ordinary and a superoperator is not uniquely defined, so in the mixed case only, it assumes unitarity in order to promote the ordinary operator.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-57339330:41,clear,clear,41,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-57339330,1,['clear'],['clear']
Usability,Iterable access to solver results and possibility of feedback to solvers,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:53,feedback,feedback,53,https://qutip.org,https://github.com/qutip/qutip/issues/1571,1,['feedback'],['feedback']
Usability,"I’ve never enforced this, so I am no expert. Though, would enforcing the options in a dynamical solver work? Maybe you do not need the dynamical solver, but checking if that works could help understanding this issue too. I would test it by creating an Options object and passing it to a dynamical solver. http://qutip.org/docs/latest/guide/dynamics/dynamics-options.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1175#issuecomment-582772817:334,guid,guide,334,https://qutip.org,https://github.com/qutip/qutip/issues/1175#issuecomment-582772817,1,['guid'],['guide']
Usability,"Just a quick reply.. for the original problem, the documentation you were looking at is out of date, better to check the latest version. http://qutip.org/docs/latest/guide/dynamics/dynamics-bloch-redfield.html#bloch-redfield-master-; equation-in-qutip . I think the example there works fine. For the incorrect num_expect, I think there was another issue raised about this. let me check.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605778801:166,guid,guide,166,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605778801,1,['guid'],['guide']
Usability,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:135,Simpl,Simply,135,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,4,"['Simpl', 'clear', 'guid']","['Simply', 'clear', 'guide']"
Usability,"Just changing the docstring to something like ""_If tlist is None, `tlist=[0]` is assumed and the corresponding correlation matrix returned._"" should be enough, I think. ; The implementation in QuTiP 4 returned this 1D array, which confused me. Changing the behavior broke one tutorial notebook, but a clear docstring should help users to see what the problem is.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2018#issuecomment-1317635091:301,clear,clear,301,https://qutip.org,https://github.com/qutip/qutip/issues/2018#issuecomment-1317635091,1,['clear'],['clear']
Usability,"Just noticed this thread. . I can take a detailed look, perhaps with @arnelg as we recently updated the superoperator functions in 4.5. . My initial reaction is this is ""off label use"" of `vector_to_operator`. If so, then we can update the docs to make this point clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849:264,clear,clear,264,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849,1,['clear'],['clear']
Usability,"Just squashed the commits. I learned about this while doing the conda-forge thing (they insisted). If you don't already know about it, then it is definitely worth looking up. I had 16 commits on this, now its 1 - much more tidy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194681807:29,learn,learned,29,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194681807,1,['learn'],['learned']
Usability,"Let me do that until I get the hang of the pulling and pushing. . On Aug 29, 2014, at 2:58 PM, Robert Johansson notifications@github.com wrote:. > You do as you wish, but I much prefer when you submit things via pull requests rather than pushing directly to master, because it gives an opportunity to give feedback or at least being aware of what is happening before it lands in master. Also travis tests is a good way of making sure that everything is in a good state before merged. However, this is just my preference, and if you prefer pushing into master you can go ahead and do that of course.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221#issuecomment-53840133:306,feedback,feedback,306,https://qutip.org,https://github.com/qutip/qutip/pull/221#issuecomment-53840133,1,['feedback'],['feedback']
Usability,Link to Bloch_Decay.mp4 in User Guide seems broken,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/800:32,Guid,Guide,32,https://qutip.org,https://github.com/qutip/qutip/issues/800,1,['Guid'],['Guide']
Usability,"Looking at our algorithm, it does seem a bit questionable for positive-definite matrices, but to be fair, what constitutes sufficiently random? The eigenvalues being chosen on the interval (0, 1] is also pretty arbitrary. When you start throwing in extra constraints like ""matrix density"" and ""positive-definite"", it becomes difficult to sample a useful measure that has an intuitive definition of random. We're certainly not against improving the algorithm if you've got ideas, though. The current algorithm (noted in the docstring) is ""diagonal dominance"" - basically we add extra stuff onto the diagonal to ensure that the eigenvalues end up all positive. That's why you see them getting bigger as the dimension increases. To some degree, it's the intended behaviour. @hodgestar: this is specifically about positive-definite matrices, and supplying eigenvalues is incompatible with that (though perhaps that's a bug!). It shouldn't be too difficult to make that work by messing around with the Cholesky decomposition, but that would be hard to get right with respect to the density.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642#issuecomment-905696188:374,intuit,intuitive,374,https://qutip.org,https://github.com/qutip/qutip/issues/1642#issuecomment-905696188,1,['intuit'],['intuitive']
Usability,"Looking into the issue in more detail, I think that the documentation wasn't just misleading but wrong: because QuTiP uses the column-stacking notation, the order of `dims` for `type='super'` doesn't have the same meaning as for `type='oper'` or for vectors. In particular, the column-stacking basis maps |i><j| to |j> |i>, such that the order of the tensor indices for superoperators is swapped from the ordering `[left, right]` that is used by QuTiP's `dims` notation. I'll break this out into another Issue, but I think the simplest way of handling it is to keep `dims` the same as it is now (I don't want to break that, for crying out loud), but to transform the arguments to `_tensor_contract_dense` if the order of `dims` doesn't match the order that we need to pass to `np.reshape`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/385#issuecomment-152462241:527,simpl,simplest,527,https://qutip.org,https://github.com/qutip/qutip/issues/385#issuecomment-152462241,1,['simpl'],['simplest']
Usability,"Looks cool, you can make the PR against the master branch. We do not have a; dev branch. On Mon, 22 Jul 2019 at 19:14, Michael Goerz <notifications@github.com>; wrote:. > Sorry.. got a little distracted, and wanted to check the contributing; > guidelines on what branch to make the pull request against. Currently it’s; > master. Is that ok? If yes, I’ll undraft it.; >; > Draft PRs are pretty new, and a very nice way to kick off the Continuous; > Integration. Like in this case, I wanted to check if any of the tests; > involve that message. As they don’t, this actually is ready to go.; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1049?email_source=notifications&email_token=ABVFIBCN7YWP77NBJVTZA2LQAXTJDA5CNFSM4IEC7VHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2QRIRA#issuecomment-513872964>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABVFIBHWIDKPIYAU6NMZXILQAXTJDANCNFSM4IEC7VHA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973:244,guid,guidelines,244,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973,1,['guid'],['guidelines']
Usability,"Looks interesting! Possibly a bit out of scope for qutip? In principle you could put this progress bar in a separate module and still use it with qutip (as long as it supports qutip's basic progressbar interface). Then it could also be used in non-qutip related projects. . If its to be included in qutip, I think it should not be added to qutip/ui/progressbar, but as an module of its own that would not be loaded by default, so a user would have to load it explicitly when using it, like the way the current ipynbtools and picloud modules work. . Perhaps it would make sense to move these ""extras"" or ""extensions"" modules to a subdirectory of their own, say ""qutip/extensions"" or ""qutip/ext"" to keep the import paths manageable. In that case I think that qutip.picloud should be moved to that directory as well. I think this would keep these extensions reasonably isolated for the core qutip modules, which I think we should prioritize if we are to allow these kind of peripheral modules to increase in number in the future. @nonhermitian any opinions on this?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63268318:90,progress bar,progress bar,90,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63268318,1,['progress bar'],['progress bar']
Usability,"Looks like good work to me. Well done for taking that brave new step into the PR world!. I agree with @nonhermitian that if the negligible frequency fixes things then, then so long as it is clearly commented as to why it's there then it's valid. Re. PEP8, you should see I made one inline comment about "" == "". There also seems to be a few unnecessary empty lines that break the rules, but I could not spot anything else with my quick check. @nwlambert do you need an example of where the mkl solver has been used elsewhere in qutip?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/528#issuecomment-244148933:190,clear,clearly,190,https://qutip.org,https://github.com/qutip/qutip/pull/528#issuecomment-244148933,1,['clear'],['clearly']
Usability,"Looks like there were breaking changes introduced in CVXPY 1.1 that changed some sort of matrix handling? I think the entirely of the `dnorm` function was written by Chris Granade about 5 years ago, and they're off at Microsoft now. As an immediate workaround, you can pin the version of CVXPY in conda to 1.0 (`conda install 'cvxpy=1.0'`) to fix it. Otherwise, probably there's a solution in swapping over a load of `*` to `@` in `qutip/semidefinite.py` and `qutip/metrics.py`, but that might be a bit nontrivial to solve. If you succeed, please do make a pull request. The reason that the ""simple"" cases work is that QuTiP detects them as known results and has fast paths avoiding `cvxpy`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713:592,simpl,simple,592,https://qutip.org,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713,1,['simpl'],['simple']
Usability,MAINT: Simplify some floats,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1393:7,Simpl,Simplify,7,https://qutip.org,https://github.com/qutip/qutip/pull/1393,1,['Simpl'],['Simplify']
Usability,"Main module control.ctrlpulseoptim provides functions for optimising control; pulses for quantum systems. Relies on the other classes for processing. Uses the BFGS (actually primarily the L-BFGS-B) algorthim, which is a quasi-second order Newton method for multivar function optimisation. Examples in the 'examples' folder to demonstrate usage.; 1. Hadamard - a simple example of Hadamard gate synthesis; 2. Lindbladian (open systems) - amplitude damping channel example; 3. Symplectic - a coupled oscillator example; 4. QFT - a 2 qubit example, showing alternative (more configurable) method for invoking the optimisation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/246:362,simpl,simple,362,https://qutip.org,https://github.com/qutip/qutip/pull/246,1,['simpl'],['simple']
Usability,"Many of the features in the pulse optimization module are difficult to use, or poorly documented. For example, for the functions `optimize_pulse` and `optimize_pulse_unitary` there are 'params' arguments for many of the underlying classes, but it's not at all clear what count as valid key value pairs for each class.; ```python; Parameters; ----------; alg_params : Dictionary; options that are specific to the algorithm see above; ; optim_params : Dictionary; The key value pairs are the attribute name and value; used to set attribute values; Note: attributes are created if they do not exist already,; and are overwritten if they do.; Note: method_params are applied afterwards and so may override these. method_params : dict; Parameters for the optim_method. ; Note that where there is an attribute of the; Optimizer object or the termination_conditions matching the key ; that attribute. Otherwise, and in some case also, ; they are assumed to be method_options; for the scipy.optimize.minimize method. . dyn_params : dict; Parameters for the Dynamics object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. prop_params : dict; Parameters for the PropagatorComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. fid_params : dict; Parameters for the FidelityComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. init_pulse_params : dict; Parameters for the initial / guess pulse generator object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created; ```. As a further example, `dyn_params` is passed to a `Dynamics` object which stores it locally in `self.params`, but there isn't any checking of valid keys and values, and I can't find a function which actually uses whatever these params are set to. It's really difficult to run a top-le",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1284:260,clear,clear,260,https://qutip.org,https://github.com/qutip/qutip/issues/1284,1,['clear'],['clear']
Usability,"Many thanks for your kind reply. Unfortunately, I can not do that, because there is cases in my hamiltonian in which that matrix is not diagonal, I am just trying from the simplest case, actually my goal is to have a term ""S_vector * D_matrix *S_vector"" . Could you please explain how I am using Qobj incorrectly and how to used right. The error message states that since S_vector is a Qobj I can not multiply it with the D_matrix. If I put Qobj(D_matrix) then I can not multiply them because all terms are Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266:172,simpl,simplest,172,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266,1,['simpl'],['simplest']
Usability,"Many thanks! I solved it!; Now I have this WARNING:matplotlib.animation:MovieWriter avconv; unavailable. Trying to use pillow instead.; *Many thanks*. *P**arfait Atchadé*. *Tel Spain: 0034661205543*; *Tel Deutsch: 00491706659017*. On Wed, 9 Dec 2020 at 15:45, Jake Lishman <notifications@github.com> wrote:. > You'll find it easier installing from conda-forge, since we distribute; > binary releases there: see the installation guide; > <http://qutip.org/docs/latest/installation.html> here.; >; > If you want to install from source using pip, you need to configure your; > C++ development environment correctly - you'll probably need to enable the; > XCode command-line tools (see e.g. this; > <https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/>).; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1404#issuecomment-742038577>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AGKQN3YYS6ZYMTV4HEHFTELST7OW3ANCNFSM4UT7TWQQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650:428,guid,guide,428,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650,1,['guid'],['guide']
Usability,"May I propose another approach for testing normalization: use a non-hermitian Hamiltonian and `qeye` as the e_ops.; Then it is clear if the normalization step does it's work or not. Otherwise the `tol` should be very strict, the error between before and after the normalization is usually quite small. `sesolve` does not differentiate between an `unitary` and a `dm`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235:127,clear,clear,127,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235,1,['clear'],['clear']
Usability,Maybe I should learn some source code first. The Floquet solver is very useful and wish someday I can contribute my own code to it. This issue should be closed temporarily.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854#issuecomment-392302752:15,learn,learn,15,https://qutip.org,https://github.com/qutip/qutip/issues/854#issuecomment-392302752,1,['learn'],['learn']
Usability,"Maybe, but the print statements are still written as functions there. Thank you for the PR, I will help you out and try to merge it asap. But I do not think you need to put the extensive description of the port to python 3 syntax. Just updating the syntax to python 3 with a comment linking to some discussion should be fine. Btw, there is a cool progress bar called tqdm if you are not already aware, [tqdm](https://github.com/tqdm/tqdm). I have seen it work out nice with some qutip functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1020#issuecomment-505434934:347,progress bar,progress bar,347,https://qutip.org,https://github.com/qutip/qutip/issues/1020#issuecomment-505434934,1,['progress bar'],['progress bar']
Usability,Minor change - just fixes a simplification I accidentally left in when writing the original function.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1361:28,simpl,simplification,28,https://qutip.org,https://github.com/qutip/qutip/pull/1361,1,['simpl'],['simplification']
Usability,Minor updates to guide overview and guide basic operations,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1757:17,guid,guide,17,https://qutip.org,https://github.com/qutip/qutip/pull/1757,2,['guid'],['guide']
Usability,Mixed case function names - should be all lowercase; Example: `spmmCpy_par`; See https://www.python.org/dev/peps/pep-0008/; for guidance. We are fairly strict on sticking to PEP8.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-443201757:128,guid,guidance,128,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-443201757,1,['guid'],['guidance']
Usability,"Most of it is already in qutip or in development:; - We already have a progress bar.; - We have feedback to support solvers where parameters are changed depending on the current state. Those should not updated at each time-step, but included in the rhs. Otherwise, it will increase runtime and often the numerical error. We mostly use multistep method (Adams and BDF) which are particularly sensible to that.; - In my rework of `mcsolve`, I'm including the capacity to stop after a certain time, (already merged) and after the error bar gets under a certain tolerance. I have not though an equivalent for `me/sesolve` would be needed but it would be simple enough to add. We could have function that takes the expect value and tell the solver to stop or continue. ; - I was thinking of adding the ability to step through the evolution (draft in #1455):; ```; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ```; Which would work like a `yield`:; ```; solver = MeSolver(H, c_ops, options=opt); for rho_t in solver.yield_run(rho0, tlist):; if needed:; solver.update_parameter(args=new_args); ```; I prefer using steps since you don't have do define `tlist` first, you could use it in a `while True` loop or interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451:71,progress bar,progress bar,71,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451,3,"['feedback', 'progress bar', 'simpl']","['feedback', 'progress bar', 'simple']"
Usability,"Mostly by replacing explicit loops with vectorized numpy expressions. For a simple test Hamiltonian with a single N-level bosonic operator, it is faster by a factor of ~40 for N=100 (Hamiltonian 100x100), i.e., it takes 12 seconds instead of 460 seconds. The speedup improves about linearly with N for this system. I checked for some test systems that the results are the same as before. The only difference in interface is that c_ops is [] by default, and c_ops=None is not accepted anymore. This seems to me more in line with the rest of qutip, but could be changed back trivially.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/336:76,simpl,simple,76,https://qutip.org,https://github.com/qutip/qutip/pull/336,1,['simpl'],['simple']
Usability,"My GSoC project will end up meaning that dense matrices can be happily stored as usable data types within `Qobj`, so QuTiP won't have to pay the nonsensical dense-to-sparse penalty for this kind of extremely dense system any more.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645697111:81,usab,usable,81,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645697111,1,['usab'],['usable']
Usability,"My example was incomplete, they need to set an initial value when creating the `QobjEvo`:; ```; H = QobjEvo([op, lambda t, ket: bra @ ket], args={""ket"": basis(...)}); ```; Otherwise there is an issue with creating the coefficient and if the operator is call without a state first `H(t)`. For a stand alone QobjEvo, having a feedback does not mean much, I prefer to attach it to the solver where it get's it's meaning. It is also the solver that knows about the collapse and wiener_process. add_feedback exist on QobjEvo, it just private:; ```; H = QobjEvo([op, lambda t, ket: bra @ ket], {""ket"":basis(...)}); H._add_feedback(""ket"", ""qobj""); ```; Using dict instead of a pair of input does look good.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071666:324,feedback,feedback,324,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071666,1,['feedback'],['feedback']
Usability,"My thinking on this basically comes down to two points. First, the behavior of `composite` is explicitly not the same as that of `tensor()` or `super_tensor()`, as it's a common usecase to compose operators defined on different subsystems without reference to representation. While I agree that it would be good to have more generic wire-bending support in QuTiP, I think that's likely out of scope for this particular feature, as it would require some significant rethinking of how `dims` is currently implemented. Second, I think that it's entirely defensible that the current behavior of `composite` promotes operators by `spre() * spost()`, as this is consistent with the view that superoperators are matrix representations of group action by conjugation. That is, `composite` returns the composite of the same group action applied to each of several subsystems, though the action can be more general for `type='super'` arguments. This could perhaps be made more clear by renaming `composite` to `composite_oper` or similar, but I think that the _behavior_ of the current function is correct and consistent, if admittedly, poorly described.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58038276:967,clear,clear,967,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58038276,1,['clear'],['clear']
Usability,"Nah, don't disparage yourself - your code is good and you've done well to copy the style of the rest of the files. Typically consistency is better than having ""the one true style""; code's read more than it's written, and having a module which is clearly written by four different people makes the logic very very difficult to follow, which in turns makes it much harder to spot bugs. If it were up to me (which is isn't, really), I would say that your changes are good as they are. I didn't mean for the comments to be changes you _had_ to make. You can't reduce the number of merge conflicts that are going to happen with #1181 anyway, because that PR is a massive refactor of large swathes of the testing suite. You've done a good job to keep your work consistent with the rest of the file, so it will be very easy to merge in your logical changes. Merge conflicts are pretty much just par for the course; just the fact that we're discussing this here shows that logically, there _is_ a conflict between two pieces of work being done at the same time. I'd suggest merging this as-is. We'll handle the problems caused by the refactor elsewhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891:246,clear,clearly,246,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891,1,['clear'],['clearly']
Usability,"Nathan, you are pushing to the master branch, not qutip-4.5.1.; This would probably undo some commit to master that are not included in 4.5.1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1255#issuecomment-625257862:84,undo,undo,84,https://qutip.org,https://github.com/qutip/qutip/pull/1255#issuecomment-625257862,1,['undo'],['undo']
Usability,"New on 2020-06-27. You can follow the development of the QuTiP developers' guide in my repo: https://github.com/jakelishman/qutip-devguide, or more usefully see the rendered version on that repo's GH page: https://jakelishman.github.io/qutip-devguide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278#issuecomment-650581583:75,guid,guide,75,https://qutip.org,https://github.com/qutip/qutip/issues/1278#issuecomment-650581583,1,['guid'],['guide']
Usability,"Nice work! Thanks for starting the work on improving the dims concept. I think this has been long over due!. Personally I would probably call the module `dimensions.py` or simply `dims` instead of `dims_utils.py`, but please do as you wish.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/389#issuecomment-153190643:172,simpl,simply,172,https://qutip.org,https://github.com/qutip/qutip/pull/389#issuecomment-153190643,1,['simpl'],['simply']
Usability,"Nice work!. > I have removed self.gates as well as self.gates_and_measurements. The replacement is the more ""general"" (and less of a mouthful) self.circuit_ops which contains both. I like this merge of to attributes. However, we shouldn't change the attribute name `gates`, at least not in this PR here. It's an open attribute API and as you see we used it a lot in tests. It's very likely that others are using it too. . Personally, I would keep the attribute `gates` since even for measurement operations, people still usually say ""measurement gates"". `circuit_ops` is certainly more accurate, but might be hard to remember and thus makes the learning curve steeper.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647396416:645,learn,learning,645,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647396416,1,['learn'],['learning']
Usability,"No `.compile()` in v5. ; I don't think we need a porting guide either, `compile` is called internally in evolution but users very rarely call it themselves. 99.9% of users don't know it exist. Where is it causing issues? I only remember using it in a developer notebook showing benchmarks. This notebook can be removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1176207837:57,guid,guide,57,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1176207837,1,['guid'],['guide']
Usability,"No longer relevent / fixed with v5's data layer, solver and feedback reword.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-2069785897:60,feedback,feedback,60,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-2069785897,1,['feedback'],['feedback']
Usability,"No problem. I would suggest that at merge time, this PR is _not_ squashed but is simply rebased onto or merged into master. A merge would ensure that the PR number is included in the git history if that's desired, but all the relevant explanations are also already in the commit messages. It's a very large change, there's a lot of exposition in the commit messages, and each commit is a modular unit of work already, while the PR title won't actually be true (since not all of the tests are converted). I know that the commit messages are all combined on github, but it's much more difficult to search for the small bit you need out of several pages of writing, rather than having only the relevant parts presented to you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885:81,simpl,simply,81,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885,1,['simpl'],['simply']
Usability,"No, I'm using `w-w0` just to show that the code works fine with my suggested changes in `pulse(t0,t)`. It is just the numbers that are wrong. First, please check the equation you are using again because (I guess) `H0` should be `(w-w0)/2 * sz` and not the one you give in the code above. In your definition, `w-w0` and `epsilon` is the same thing. The drive frequency (in sinus function) should match with `H0`. Second, it not clear to me what you want to achieve with this. If the drive frequency matches the system frequency (both `w-w0` here), H0 is exactly 0 in the rotating frame.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-811118983:427,clear,clear,427,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-811118983,1,['clear'],['clear']
Usability,"No, if `test` is used for the branch name, it will still deploy to testpypi. Both `deploy to ...` jobs were cut and pasted with only 2 lines changed so I merged them so we don't forget to update one without the other. I also added more feedback to the job that would show uploaded files even for a dry run.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342:236,feedback,feedback,236,https://qutip.org,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342,1,['feedback'],['feedback']
Usability,"No, it's mostly here on qutip and direct email. There is only a few of us. We have a qutip-dev google group on invitation managed by @nathanshammah. agarwal1998 is not a maintainer but cgranade was. Last year, we took time to review old issues and let some less pressing with ""help wanted"". We would be happy if you can propose a solution that would close the issue and help with Qutip in general. The only use I personally see from this would be case like:; ```; out = qzero(dims); for i in range(N):; out += f(i, dims); ```; Cases were the qobj is more of a dummy variable than a physical operator. `coherent` and `create` have a physical meaning and I would not know what `coherent([2,10])` is supposed to be, but I understand what `tensor(coherent(2), coherent(10))` is. For `projector`, it could be added, it's meaning is clear. To make it consistent, removing the list support from `qeye`, etc. and fixing the few case that it is used, might be a better option. The dimension can easily be corrected after the creation of the object.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/363#issuecomment-575811864:827,clear,clear,827,https://qutip.org,https://github.com/qutip/qutip/issues/363#issuecomment-575811864,1,['clear'],['clear']
Usability,"No, my Hamiltonian does not have a lot of zeros but it has fast oscillating term cos (omega(t)*t) where omega(t) is a non-analytic term and is a very large number compared to the 1/final time. So, to get the correct result, I have to use a large number of time_grid. I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This will not give the correct result since my Hamiltonian has fast oscillating terms which requires a lot of time steps to be given as an input for mesolve. This is why the method of using QobjEvo gives different answer than if I use my initial time grid (which is time grid = 1000000) in the mesolve. . Since I am using a very large time grid in mesolve, my program ran very slowly. I would like to speed up my simulation by having mesolve to evaluate the expectation value of the operator only at the final time and not at all time steps. My question is very simple: Is there a way that I can still use a very large time grid in evolving my Hamiltonian using mesolve but have the mesolve evaluating the expectation value of the operator ONLY at the final time? If not, is it possible to add this feature in qutip?. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810182936:1095,simpl,simple,1095,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810182936,1,['simpl'],['simple']
Usability,"No, not yet, it will be supported in v5.; You could try to use `photocurrent_mesolve` which is very similar, but with a slower algorithm. ps. There is an error in the formula in the [documentation](https://qutip.org/docs/latest/guide/dynamics/dynamics-photocurrent.html#open-system):; L_eff(rho) = L(rho) - C_dag*C*rho - rho*C_dag*C + tr(C_dag*C*rho - rho*C_dag*C)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2060#issuecomment-1385475587:228,guid,guide,228,https://qutip.org,https://github.com/qutip/qutip/issues/2060#issuecomment-1385475587,1,['guid'],['guide']
Usability,"Not directly testing for commuting operators, but Qobj implements **eq** and **ne** which means that you can test for commuting operators simply by doing. ```; if a * b == b * a:; # a and b commutes; ```. Maybe it could be useful with function that performs this test for two Qobj instances, but currently we do not have such a function. The PR looks good so I'll merge it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/41#issuecomment-22768490:138,simpl,simply,138,https://qutip.org,https://github.com/qutip/qutip/pull/41#issuecomment-22768490,1,['simpl'],['simply']
Usability,"Not really expecting anyone to fix this urgently, I am just recording some ideas, as I have spent a lot of time looking into this recently while try to build a conda package. Currently on Windows we compile under mingw. This is sub-optimal, according to various sources, including:; https://wiki.python.org/moin/WindowsCompilers; Python C extensions should be compiled using the same compiler that was used to compile the Python distro that is being used. Failing to do so can result in some strange behaviour. I have experienced issues with qutip tests hanging on Windows. Therefore it would clearly be beneficial if we could build qutip under MSVC. It is of particular interest now that we have a conda recipe that autobuilds for all the version, platform variations.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/447:593,clear,clearly,593,https://qutip.org,https://github.com/qutip/qutip/issues/447,1,['clear'],['clearly']
Usability,"Not sure if it's that simple.; ```; --config-setting=""--global-option=--with-openmp""; ```; actually gives me a build error:; ```shell; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --config-setting=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:22,simpl,simple,22,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['simpl'],['simple']
Usability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:126,simpl,simple,126,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,1,['simpl'],['simple']
Usability,"Note: the reported changes (other than the deletion of the licence from each source file) are all whitespace-only, or simply a reflow of the hard-wrapped text in `LICENSE.txt`. I didn't change the licence at all, other than the holder. I've also checked this with the same tool that GitHub uses, and it will definitely recognise the licence correctly after this. The whitespace-only changes in other files weren't actually 100% intended, but it was a function of how I did the licence detection - I normalised the whitespace at the ends of lines first. Looking through, I guess I only did that when changing the `doc` folder, not the main source code (I had to handle those two cases separately).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684:118,simpl,simply,118,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684,1,['simpl'],['simply']
Usability,"Nothing too clever here. As in cached flag cleared whenever unitarity threatened; The check could probably be more efficient, but as not expected to be used intensively, then this would seem acceptable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364163769:43,clear,cleared,43,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364163769,1,['clear'],['cleared']
Usability,NumPy uses dense array. You simply need such a big memory to store those NumPy matrices. There is no way around it. It is important to understand what you want to do with those matrices afterwards. Keeping them as dense matrices is just infeasible. Maybe you can try to get the sparse data by `Qobj.data` and work with that.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2176#issuecomment-1593531707:28,simpl,simply,28,https://qutip.org,https://github.com/qutip/qutip/issues/2176#issuecomment-1593531707,1,['simpl'],['simply']
Usability,"Numpy arrays are mutable, so you're modifying `er1` every time in the loop and just appending the same object. You need to create a new `er1` array each time within the out loop, or make `er1` a 2D array of the correct size. I'm sorry, but this is not the place to be asking for generic programming advice. This question (like some of your other previous ones) does not have anything to do with QuTiP, but is related to beginner/intermediate Python concepts. You were told this on a previous issue you opened. Please take these questions to a suitable forum, like the ""learnpython"" subreddit. I'm going to close any further issues you create that aren't about QuTiP specifically, without answer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1488#issuecomment-814859752:569,learn,learnpython,569,https://qutip.org,https://github.com/qutip/qutip/issues/1488#issuecomment-814859752,1,['learn'],['learnpython']
Usability,"Numpy interprets the Python base type `complex` as equal to `np.complex128` when passed as a dtype. Personally I think `np.complex128` is much clearer (since it specifies the size in the name too), but I wouldn't worry too much about changing everything everywhere. `cqobjevo.pyx` in particular is going to be nearly entirely rewritten in the next major QuTiP release anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605:143,clear,clearer,143,https://qutip.org,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605,1,['clear'],['clearer']
Usability,"OK, [here's a simple notebook](http://nbviewer.ipython.org/gist/cgranade/14670f05bc384dc2df01) illustrating this PR, using a bit of other functionality I was planning on contributing later, but that helps in making the example clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65026154:14,simpl,simple,14,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65026154,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"OK, if it's intended then there's nothing to change in the code. But I think it would be helpful to document this in a clearer way: there's a big risk of misinterpreting the operator.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286282270:119,clear,clearer,119,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286282270,1,['clear'],['clearer']
Usability,"Oh wow! That's really nice! (and completely undocumented, as far as I can tell ;-) ). I had actually noticed at some point that `callable(qob)` returns True and wondered what that was about. So this definitely solves my problem, and I could see the argument for the abstract ""apply x to y"" being realized as`x(y)`. In that case, maybe not allowing objects with incompatible `data` shapes is ok after all. I'll leave it to the maintainers to decide whether they want to close this issue with ""wont-fix"".",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/939#issuecomment-441895252:44,undo,undocumented,44,https://qutip.org,https://github.com/qutip/qutip/issues/939#issuecomment-441895252,1,['undo'],['undocumented']
Usability,"Oh, I am sorry, I have misunderstood what you wanted. I think that now I have fixed it. Thank you very much for the feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2545#issuecomment-2422290060:116,feedback,feedback,116,https://qutip.org,https://github.com/qutip/qutip/pull/2545#issuecomment-2422290060,1,['feedback'],['feedback']
Usability,"Ok I see what you are doing. It is not clear from the title that you are doing multi-partite Wigner functions, and there is already a `spin_wigner` function in QuTiP. Also, the use of `@` notation pegs the Python version at 3.5+, but I believe 2.7 is still supported. Personally I like support for 3.5+ only, but hate the `@` notation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/912#issuecomment-470858545:39,clear,clear,39,https://qutip.org,https://github.com/qutip/qutip/pull/912#issuecomment-470858545,1,['clear'],['clear']
Usability,"Ok some things that one learns by playing with it:; - make sure the location of the `qutip/qutip` folder is as expected (`../../qutip/qutip`); - the second for loop in in the crawler for `qutip-structure.py` does: its looks in directories, and hence the fact that only `nonmarkov` is there, is the reason why stuff like `qip` is not rendered. ; - Adding a readme.txt or .md and commenting the .py file and things would help maintainance. ; I can take over these, moreover as today we found out that QuTiP has not been selected to participate to GSoD 2020.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-626909831:24,learn,learns,24,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-626909831,1,['learn'],['learns']
Usability,"Ok, cool. I don't think there's any situation we should be mutating the `Options` class we're passed in though - I'd consider that a bug no matter what, since that leaks like your print statement shows. We can just duplicate it on entry, then modify that. To me it's not clear that passing several items in `tlist` should override an explicit `store_states=False` - as long as we allow you to pass an array as time-dependence, there is a sensible reason to pass more items in `tlist` than you need results for. Sure, you may also be able to use `Cubic_Spline`, but if we punish you for using arrays by swapping your options, why do we provide them? I think we should only warn and change the settings if _nothing_ is going to be stored - `store_final_state` should be enough to suppress it and not store the intermediate states, even if that implies the user might not be doing the fastest possible thing. I don't necessarily think we should try to promote ideal usage through runtime warnings if that's more verbose to type - that's what documentation is for, and some people will do stuff because it's faster to type, since they work interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513:271,clear,clear,271,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513,1,['clear'],['clear']
Usability,"Ok, great. Will do.; I only learned this stuff through going through a similar experience with @jrjohansson (a long time ago now)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370743079:28,learn,learned,28,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370743079,1,['learn'],['learned']
Usability,"Ok, here it is:; btw the actual error (the last line) did not appear in the output file, but it does appear in the cmd window, so I typed it in. Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... ERRO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:505,simpl,simple,505,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['simpl'],['simple']
Usability,"Ok, it looks like the tests are finally going to pass. As the number of commits suggests, this was a pain. Not because the code was wrong, but because:. 1) The default config used by Travis has GCC 4.6 which contains an error that happens to get raised in our case. Thus, had to move to the Trusty build stack. 2) Although it took forever to hunt down, it appears that when .pyx files are included as package data, Py27 may try to rebuild them upon calling **init**. This would throw a missing header error. Since these files are not needed after building, removing them clears up this issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/551#issuecomment-254497807:571,clear,clears,571,https://qutip.org,https://github.com/qutip/qutip/pull/551#issuecomment-254497807,1,['clear'],['clears']
Usability,"Ok, it turns out I got the numpy release notes the wrong way round; we have to build our binaries with `1.16.6 <= numpy < 1.20` to maintain ABI compatibility no matter the numpy version. I have updated the compiler infrastructure to take this into account - this is in some ways a temporary restriction until two or three years in the future when we can drop support for all numpy versions less than 1.20. This is ready for final review. If you're fast, you can also try installing from the test PyPI server to see if the wheels work for you. While it's on the temporary server, you need to install `numpy` and `scipy` manually yourself (as they don't exist on test.pypi.org), but pip will do the dependencies correctly for you once it's publishing to the full repo.; ```bash; conda create -n pypi-test; conda install python pip numpy scipy; pip install -i https://test.pypi.org/simple qutip-jakelishman; python -c 'import qutip; qutip.about()'; ```. @hodgestar, @nathanshammah: perhaps you could just glance over this again and make sure everything looks right to you? Simon, I know you already looked over it once, so if you've not got time again, no problem - barely anything has changed since you last saw it. Nathan: in theory once we're in a position where deployments push to PyPI I think I can write an action for qutip/qutip.github.io to push a commit updating the website with the new information too. However, with the docs currently using a completely separate build process in a different repo, they can't really be triggered by a release here. I wrote this PR against `dev.major`, but I suppose in theory I could backport it to the 4.x branch if that's absolutely required. I think some parts of the setup changed for `dev.major`, which is why I didn't originally try to make it to the current version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158:879,simpl,simple,879,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158,1,['simpl'],['simple']
Usability,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:700,simpl,simplifications,700,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['simpl'],['simplifications']
Usability,"Ok, well seems great that simply moving the pyximport to the end will solve the issue. Good work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/570#issuecomment-265062873:26,simpl,simply,26,https://qutip.org,https://github.com/qutip/qutip/pull/570#issuecomment-265062873,1,['simpl'],['simply']
Usability,"Ok, yeah, I definitely see the use-case here. I'll leave it removed from `matmul` for the time being because I hadn't really organised that code to allow safe calling of the function with an `out` parameter, but I'll look to re-instate it, similarly with `add`. For `add`: I envisage a nice possibility for `QobjEvo` using `CSR` backing along the vein of `CQobjEvoTdMatched`: on instantiation we add together all the matrices, then we `memset` all zeroes along the `data` array and store it as `self._structure`. Then each time we `__call__` the object, we simply do `out = self._structure.copy()`, and use that as the output matrix, because we guarantee we'll always have enough space and the correct structure. There's a couple of minor kinks in the logic of `add_csr` that we might have to iron out in order to avoid an additional matrix addition, but the savings in memory allocation could be good. You're absolutely right about the `pxd` files - I haven't taken enough care to make sure they've got all the definitions in yet. Basically everything that isn't prefixed with an underscore in the `.pyx` files _should_ be in the `.pxd` files. I'll add them in tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869:557,simpl,simply,557,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869,1,['simpl'],['simply']
Usability,"Once a Pull Request is merged to QuTiP, the contributor could add a short description to the Changelog, which contains changes of each [version release](http://qutip.org/docs/latest/changelog.html). ; It could be in the style of current changelog:. * A one-liner for **minor changes**, with a descriptive text and the author's name. ; * A short paragraph for **major changes**. . This guideline could be added to the contribution [how-to](https://github.com/qutip/qutip-doc/blob/master/qutip_dev_contrib.md ).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1055:385,guid,guideline,385,https://qutip.org,https://github.com/qutip/qutip/issues/1055,1,['guid'],['guideline']
Usability,"One thing to consider is that CSR and Dense already _dno't_ return the same result for every operation. For example, for matmul:; ```python; size = 100; random = np.random.random((size, size)); a = qt.data.Dense(random); b = qt.data.to['CSR'](a); np.all((a).to_array() == (b).to_array()) # True; np.all((a+a).to_array() == (b+b).to_array()) # True; # This one is different for Dense and CSR even though the operation is the same. ; # This seems to be due to the order at which the operations are performed with Dense; # and CSR matmul and the fact that floating point addition is not associative. ; # (something I learned by reading the test_mathematics in qutip); np.all((a@a).to_array() == (b@b).to_array()) # False.; ```; Although the change in `auto_tidyup` will probably make the difference bigger, given that with tidy-up ""all"" we can not ensure the same output for every operation, I would say that it should be ok to set auto_tidyup to `[CSR]`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1610#issuecomment-882012839:614,learn,learned,614,https://qutip.org,https://github.com/qutip/qutip/pull/1610#issuecomment-882012839,1,['learn'],['learned']
Usability,"Operation `oper @ ket` is a lot faster for `CSR @ Dense` than `CRS @ CSR`. Also for ket, csr matrices still need to have one entry per row, making them not that much more efficient than dense. (A well optimised `COO` would be nice here.). But it is only a good choice when they are used as kets, not when used as building tools for operators... We have functions to create such operators that I thought were more known that are set to use the appropriate sparse default:; `fock_dm(N, n)` is equivalent to `basis(N, n) * basis(N, n).dag()`.; `projection(N, n, m)` is equivalent to `basis(N, n) * basis(N, m).dag()`. For now I added an entry for this case in the migration guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439:671,guid,guide,671,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439,1,['guid'],['guide']
Usability,PR #256 restores the old progress bar as TextProgressBar and renames the new progress bar to EnhancedTextProgressBar. Considering the circumstances I think this is the best solution at this point.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63271426:25,progress bar,progress bar,25,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63271426,2,['progress bar'],['progress bar']
Usability,Parfor is not usable,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2551:14,usab,usable,14,https://qutip.org,https://github.com/qutip/qutip/issues/2551,1,['usab'],['usable']
Usability,"Part of the new superoperator support is covered in `guide_tensor.rst`, but there needs to be a much more complete guide to `to_chi`, `to_choi`, `to_super` and `to_kraus`, as well as of the new `superrep` attribute.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1520#issuecomment-191575504:115,guid,guide,115,https://qutip.org,https://github.com/qutip/qutip/issues/1520#issuecomment-191575504,1,['guid'],['guide']
Usability,"Perhaps someone else can give a more concrete answer, but I guess the driving frequency is too high for the number of time-steps? Try tweaking the ODE solver with options like the following:. `; options = Options(nsteps=15000, atol=1e-13, rtol=1e-13) ; `. and passing it to mesolve. `result1 = mesolve(Ha, psi0, times, [np.sqrt(T1)*sig01, np.sqrt(T2)*sig02, np.sqrt(gamma*(nth + 1))*a, np.sqrt(gamma*nth)*a.dag()], [a.dag()*a, sig00, sig11, sig22], progress_bar=True, options=options); `. More practically speaking, for the problem you are solving I guess explicitly including the time dependence is unneccessary, since you have already made a RWA on the drive and the coupling? . Moving to an interaction picture in w1, w2 and wph, and removing the explicit time-dependence might simplify the problem and might give you equivalent results, and in the process make your code much simpler and more efficient?. In other words just set w1=w2=wph=0, and put the drive as a time-independent term in the hamiltonian . `; H01 = g*(sig12*a.dag() + sig21*a) + pump1*(sig01 + sig01.dag()); `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514:781,simpl,simplify,781,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514,2,['simpl'],"['simpler', 'simplify']"
Usability,Perhaps we can close this issue though? The docs at https://qutip.readthedocs.io/en/latest/guide/heom/bosonic.html seem good?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2104#issuecomment-1451692026:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/issues/2104#issuecomment-1451692026,1,['guid'],['guide']
Usability,"Picking a new random number at each time step would be an expensive way to do the computation since each call to the random number generator is costly. One could pre-generate a large array of random numbers before hand, but there is no way to know if you generated enough since we are using an adaptive step size ODE method. You are correct about the way mcsolve does its calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE me",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:562,clear,clearer,562,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['clear'],['clearer']
Usability,"Please give more details, e.g. a simplified version of the problem you want to solve or an example of code. QuTiP has tutorial notebooks and documentation that you can refer to for function API.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1411#issuecomment-751387226:33,simpl,simplified,33,https://qutip.org,https://github.com/qutip/qutip/issues/1411#issuecomment-751387226,1,['simpl'],['simplified']
Usability,Please refer to [`smesolve` new methods](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) and [benchmark](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb). I think you should just use `c_ops` or `sc_ops`. Keeping this open as the notebook needs to be updated and the Users guide documentation. The [API documentation](http://qutip.org/docs/latest/apidoc/functions.html?highlight=smesolve#qutip.stochastic.smesolve) is updated.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471:414,guid,guide,414,https://qutip.org,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471,1,['guid'],['guide']
Usability,Prefix variable names with _ to clear Travis CI warnings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1213:32,clear,clear,32,https://qutip.org,https://github.com/qutip/qutip/pull/1213,1,['clear'],['clear']
Usability,"Prefixes variable names with ```_``` to clear the Travis CI warnings, as mentioned in #1133. Before the changes, the ```travis lint``` output was:. ```; Warnings for .travis.yml:; [x] [warn] on root: deprecated key: stage_generic_linux (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_36 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_38 (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_no_cython (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_openblas (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_linux_37_omp (anchor on a non-private key); [x] [warn] on root: deprecated key: stage_osx (anchor on a non-private key); ```. After the changes, it is:. ```; Hooray, .travis.yml looks valid :); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1213:40,clear,clear,40,https://qutip.org,https://github.com/qutip/qutip/pull/1213,1,['clear'],['clear']
Usability,"Pure numerically speaking, the last `diss_coeff` is a way larger than the others.; ```python; >>>diss_coeff; [0.19836061612310207j,; 0.25470007277190326j,; 0.223606797519535j,; 4925.267477050309j]; ```; With this large frequency, if you want to solve the dynamics using ODE, I don't think there is a way to make it faster. You have to either simplify your model mathematically, or, because there is no time dependency in your system, use the (deprecated) `essolve` that computes the dynamics using eigenvalues. Thinking about the physics, the T2 time is much smaller than your `tlist`, the system has already fully decohered. PS: @jakelishman It seems that the `essolve` does have some use-cases? Like in small systems for verification perpose. I remember there is another PR that also mentions it. As we deprecated it, I'm wondering if there is an efficient alternative in QuTiP?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452:342,simpl,simplify,342,https://qutip.org,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452,1,['simpl'],['simplify']
Usability,"QuTiP 4.4 changed the type of values that are returned from indexing into a `Qobj`:. ~~~; >>> import qutip; >>> CNOT = qutip.gates.cnot(); >>> CNOT[0,0] # (1+0j) on 4.3.1; array(1.+0.j); >>> type(CNOT[0,0]) # numpy.complex128 on 4.3.1; <class 'numpy.ndarray'>; >>> CNOT.data[0,0]; array(1.+0.j); ~~~. I'm using CNOT here as an example, but the same is true for any `Qobj`. The problem with the zero-dimensional `array(1.+0.j)` is that you can't multiply it to another `Qobj` (the result of the product is a sparse matrix, not a `Qobj`, as it would be for a scalar factor):; ~~~; >>> CNOT[0,0] * qutip.ket('10'); <4x1 sparse matrix of type '<class 'numpy.complex128'>'; with 1 stored elements in Compressed Sparse Row format>; ~~~ . In my specific case, it breaks this function I had: ; ~~~; def mapped_basis(gate, basis):; """"""Result of applying `gate` to `basis`""""""; return tuple([; sum([gate[i, j] * basis[i] for i in range(gate.shape[0])]); for j in range(gate.shape[1])]); ~~~. I can work around the new behavior by changing `gate[i, j]` to `complex(gate[i, j])`, but I still wanted to raise the issue, to see whether this change was intentional, and what the reasoning behind it was. My intuitive expectation would be for `gate[i, j]` to be a simple scalar. I could see the zero-dimensional array causing some subtle problems for users, e.g. if there were to index into a density matrix to get populations (apart from my `mapped_basis` use case above). Note that numpy itself returns scalars:; ~~~; >>> import numpy as np; >>> np.array(CNOT)[0, 0]; (1+0j); >>> type(np.array(CNOT)[0, 0]); <class 'numpy.complex128'>; ~~~. On the other hand, scipy's sparse matrices have the same behavior as the most recent QuTiP, so there is a precedent:; ~~~; >>> import scipy.sparse; >>> s = scipy.sparse.csr_matrix(CNOT); >>> s[0,0]; array(1.+0.j); ~~~. If the change in QuTiP is deliberate, feel free to close the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1063:1191,intuit,intuitive,1191,https://qutip.org,https://github.com/qutip/qutip/issues/1063,2,"['intuit', 'simpl']","['intuitive', 'simple']"
Usability,"QuTiP `qip` module currently supports six different single-qubits gate, including rx, ry, yz, http://qutip.org/docs/latest/guide/guide-qip.html. However, the commonly used Pauli X, Y, Z gates, T gate and S gate are not there. Although in principle they can all be realized by the existing gate set. It would still be good to have them supported in `qutip.qip.QubitCircuit`. - Define those gates in `qutip.qip.operation`. If they already exist in `qutip.operators`, import them as functions such as `x_gate`, `y_gate`, `z_gate`, `s_gate`, `t_gate`; - Add the gates to `quip.qip.QubitCircuit`; - Add them also to the LaTeX code if applicable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1208:123,guid,guide,123,https://qutip.org,https://github.com/qutip/qutip/issues/1208,2,['guid'],"['guide', 'guide-qip']"
Usability,QuTiP developers' guide (including the new data layer),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1359:18,guid,guide,18,https://qutip.org,https://github.com/qutip/qutip/issues/1359,1,['guid'],['guide']
Usability,"QuTiP is currently distributed through both Anaconda's conda-forge channel (`conda install qutip`) and PyPI (`pip install qutip`).; It could be helpful to the maintainers to have the project also on the test channel of PyPI, https://test.pypi.org, testing the distribution before uploading a new release on the actual PyPI channel. The [instructions](https://packaging.python.org/guides/using-testpypi/) are straightforward. Placing this as a memo for v. 4.4. Testing this would be helpful also as we attempt the wheels configuration (#933), which, as I understood from @Ericgig, might not be so straightforward given the low-level calls that QuTiP makes in some functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/992:380,guid,guides,380,https://qutip.org,https://github.com/qutip/qutip/issues/992,1,['guid'],['guides']
Usability,Qubit Decay code example on [this page; ](http://qutip.org/docs/4.1/guide/guide-bloch.html) lists these imports. ```; from qutip import *; from scipy import *; ```; I think it misses; `import numpy as np`; for np.sin and np.cos functions. If I don't add that line I get an error.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/797:68,guid,guide,68,https://qutip.org,https://github.com/qutip/qutip/issues/797,2,['guid'],"['guide', 'guide-bloch']"
Usability,"R; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:3868,simpl,simple,3868,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,"Re `oper(oper)`, I'd personally prefer to be ""forced"" to write `to_super(A)(B)`. Actually I'd even more prefer to write `sprepost(A, A.dag())(B)`. I honestly wouldn't have guessed that `to_super` does a conjugation (if I didn't already know), and at the moment I can't see it in the docstring, so the only way I'd find this out is by looking at the code. The docstring actually claims to raise a `TypeError` if the input is not a map. Even in the code, in the `to_super` function the only comment made if the input is an `oper` is `# Assume unitary` which is a confusing comment. At a minimum I think that this type of non-obvious behavior should be clear from docstrings. For `__mul__` vs. `__call__` I see your point regarding Choi matrices representing superoperators. I would expect `__mul__` to treat a Choi matrix simply as an operator. I think the case for a `__call__` function is strong then.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/475#issuecomment-221453079:650,clear,clear,650,https://qutip.org,https://github.com/qutip/qutip/issues/475#issuecomment-221453079,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"Related to this, the qutip User Guide mentions that the (function) ""callback format"" for input of time-dependent operators works for _both_ Hamiltonians and jump operators (bottom of pg. 148). If I put a function into the Ham input, I am fine. But putting the same function into the list of jumps throws:. ```; AttributeError: 'function' object has no attribute 'issuper'; ```. I guess the Note 2 on pg. 149 sort of implies this only works for Hams.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-54542286:32,Guid,Guide,32,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-54542286,1,['Guid'],['Guide']
Usability,Remove string coefficient comment in brmesolve's guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2033:49,guid,guide,49,https://qutip.org,https://github.com/qutip/qutip/pull/2033,1,['guid'],['guide']
Usability,"Repeating just changes the probability of failure, rather than actually detecting whether it was a rare fail, and `mesolve` tests aren't always the fastest, so repetition here isn't great. For simple unitary qubit operations, I think it should be easy enough to work out how the tolerance translates. It's difficult to say that if there's a numerical error then the error will be much greater - I caught some errors in the `test_gates.py` (I think) that were sneaking through because the tolerances were set too high. It's probably best to keep as tight a tolerance as is reasonable - here I think `2 * qutip.Options.rtol` would always be correct if the numerics are.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751:193,simpl,simple,193,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751,1,['simpl'],['simple']
Usability,Reset and clear up figures more correctly in dynamics-time guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1931:10,clear,clear,10,https://qutip.org,https://github.com/qutip/qutip/pull/1931,2,"['clear', 'guid']","['clear', 'guide']"
Usability,Restore feedback for solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210:8,feedback,feedback,8,https://qutip.org,https://github.com/qutip/qutip/pull/2210,1,['feedback'],['feedback']
Usability,Review guide section of documentation.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2279:7,guid,guide,7,https://qutip.org,https://github.com/qutip/qutip/pull/2279,1,['guid'],['guide']
Usability,"Rewrote, cythonized and simplified `mcsolve`.; `mcsolve` implementation based on `qobjevo`.; It is now class based with the general structure I would propose for solvers.; It has (experimental, hidden for now) support for diagonalized evolution.; Collapse history can be obtained by the Hamiltonian.; Otherwise the same algorithm than the previous version. Between #990 and #969",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991:24,simpl,simplified,24,https://qutip.org,https://github.com/qutip/qutip/pull/991,1,['simpl'],['simplified']
Usability,"Seems to be a problem with the Cython pyximport. Running a py3 pyx file with just print(""hello world"") ; Runs and returns the text, but then crashes python.exe. Using Anaconda py3 on win7 x64. > On Oct 16, 2015, at 06:51, Alexander Pitchford notifications@github.com wrote:; > ; > Ok, here it is:; > btw the actual error (the last line) did not appear in the output file, but it does appear in the cmd window, so I typed it in.; > ; > Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic oscillator, finite temperature, states ... ok; > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > correlation: legacy me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic osci",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:807,simpl,simple,807,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['simpl'],['simple']
Usability,Should we perhaps just change `clear` to set it to `None` instead of an empty list?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2336#issuecomment-1967539515:31,clear,clear,31,https://qutip.org,https://github.com/qutip/qutip/pull/2336#issuecomment-1967539515,1,['clear'],['clear']
Usability,"Simon managed the 4.6.1 release using the current version of the release documentation, and we identified lots of places where it wasn't as clear as it could have been. This is a new pass at the same documentation trying to improve it. There are points of the website and documentation procedures that we want to update as well, but at the moment we're just trying to document what you do _right now_.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1544:140,clear,clear,140,https://qutip.org,https://github.com/qutip/qutip/pull/1544,1,['clear'],['clear']
Usability,Simplify initiating options in solver,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2071:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/2071,1,['Simpl'],['Simplify']
Usability,Simplify options for dev.major,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['Simpl'],['Simplify']
Usability,Simplify version parsing (v5).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2044:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/2044,1,['Simpl'],['Simplify']
Usability,Simplify version parsing.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2043:0,Simpl,Simplify,0,https://qutip.org,https://github.com/qutip/qutip/pull/2043,1,['Simpl'],['Simplify']
Usability,Simply setting compiler flags and add link-time optimizations.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/308:0,Simpl,Simply,0,https://qutip.org,https://github.com/qutip/qutip/pull/308,1,['Simpl'],['Simply']
Usability,"So at the moment when we do something simple like ; ```; from qutip import Qobj; ```; All the * imports in `__init__` are called. That is a lot of functions now.; What we have to be careful of though is that a lot of users start off their qutip session with; ```; from qutip import *; ```; Now it seems reasonable that they get everything, as it is now. But that for users who are more careful, like the first example, should only get what they ask for. Now importing `Qobj` gets you a lot, as it uses a lot of qutip functions, but not all the solvers for instance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-269725136:38,simpl,simple,38,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-269725136,1,['simpl'],['simple']
Usability,"So, while I agree that having a flexible storage format is a good way to go, the truth of the matter is that no one has time to implement such a big change. SciPy supports both 32 and 64-bit ints, and checks to see which ones are needed at runtime. e.g. a tensor product of two sparse matrices with int32, may need int64 in the result since their shape is larger. We could also do a similar thing, but it is a lot of work. The reason why we no longer use standard SciPy sparse objects is: 1) They tend to have a sizeable overhead when being created and/or manipulated do to redundant safety checks. 2) Many of the sparse operations are not well optimized. Because SciPy supports many different sparse formats, they had to generalize many of their core operations, making them slower. For example, the sparse kronecker product first converts to COO format, does the tensoring, and then converts back to the original format. Our method is much faster. Supporting more than just the current CSR format is also problematic. As already mentioned, there would be type checks, conditionals, and format conversions everywhere. e.g. what happens when DIA * CSR. As usual, available time is the limiting factor here. Support for both int32 and int64 is not that hard, but would take some time. Just int64 would make smaller matrices larger, but would allow for much greater system dimensions. In this later case, it would be a simple switch `int` -> `int64` and `size_t` -> `uint64` in the Cython code, and the fastsparse module (plus probably other places.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384005667:1417,simpl,simple,1417,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384005667,1,['simpl'],['simple']
Usability,"Some correlation tests fail on some attempts.; Not really clear why.; This issue can be used to keep a record, and then they can be fixed. This is an example:; ```; ======================================================================; FAIL: correlation: comparing me and mc for driven oscillator in fock state; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/qutip-4.1.0.dev0+0e91439-py2.7-linux-x86_64.egg/qutip/tests/test_correlation.py"", line 125, in test_compare_solvers_coherent_state_memc; assert_(abs(corr1 - corr2).max() < 0.2); File ""/home/travis/miniconda/envs/test-environment/lib/python2.7/site-packages/numpy/testing/utils.py"", line 77, in assert_; raise AssertionError(smsg); AssertionError; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/607:58,clear,clear,58,https://qutip.org,https://github.com/qutip/qutip/issues/607,1,['clear'],['clear']
Usability,Some initial feedback:; There are a number of lines that overrun the pep8 limit,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/884#issuecomment-398510499:13,feedback,feedback,13,https://qutip.org,https://github.com/qutip/qutip/pull/884#issuecomment-398510499,1,['feedback'],['feedback']
Usability,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:145,clear,clearly,145,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,1,['clear'],['clearly']
Usability,"Somewhat related -- I'd like to have `qeye_like(op)` that takes an operator and produces the appropriate identity. One might naively think that `qeye(dims[0])` does the right thing, but this issue shows that the situation is more complex than that. . We can already solve this without #1996 by just constructing a data object identity with the right shape and passing that to Qobj with the correct dims (but #1996 will make the situation a lot clearer).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2122#issuecomment-1470003116:444,clear,clearer,444,https://qutip.org,https://github.com/qutip/qutip/issues/2122#issuecomment-1470003116,1,['clear'],['clearer']
Usability,Sorry about all those commits - I didn't have my working environment last night and I thought I could easily change a simple thing through github's editor - it took a few tries...,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-54312656:118,simpl,simple,118,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-54312656,1,['simpl'],['simple']
Usability,"Sorry for my delayed response, been a couple of quite busy weeks on my end. As for the design issues with `composite`, I think that at least some of what @arnelg has pointed out could be addressed with a better name that emphasizes that the function produces a propagator of some kind. `composite` was merely my first stab at a name, so there's definitely room for improvement. On the topic of `dims`, I entirely agree that more generic tensor network would be a wonderful thing, though I also would not want to require that one be well-versed in all things Wood diagrams to use QuTiP. That is, in making design changes, I think it's important both to keep and improve flexibility, and to make the design as intuitive as possible. One suggestion, and I'll add this to the FDC wiki page you liked to, would be to use classes other than `list` to keep metadata on what kind of indices are being considered, even if only to provide richer printouts. This may or may not make much sense, so I apologize if it's the latter case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-61099597:708,intuit,intuitive,708,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-61099597,1,['intuit'],['intuitive']
Usability,"Sorry for the slow response... It seems to me like @Ericgig summed it up pretty concisely. Although I'm not sure I understand how #1123 fits in: what is the plan for `Qobjevofunc`, and how would it fit in to specifying time-dependent Hamiltonians?. The only thing that's ever really bothered me was the mandatory `args` as part of the signature, even if it's not used. That's lead to the need for workarounds like the `allow_args` parameter in; https://github.com/qucontrol/qdynpylib/blob/f7b54af3e586683cdfd9b3dd666c5cf540d843e1/src/qdyn/pulse.py#L555. If there's a future `f(t)` option, I should be happy. In the abstract, `f(t, **args)` and `f(t, state_vec, **args)` would be the most elegant, but if there's a severe performance hit, that could be a problem. I'm surprised, though: I would have thought that `f(t, **args)` and `f(t, args)` should be almost the same thing in the Python internals, since you can modify `args` inside of `f` and pass it to lowerlevel function as `**args` again. Even from the user's perspective any current code with signature `f(t, args)` could have its signature replaced with `f(t, **args)` without requiring any change to the function body. But I'm clearly missing something. Can you point me to lines in the code where this becomes a bottleneck?. I'm also quite in favor of introspection to accept a wide variety of signatures: you can even introspect argument names, so the possibilities are endless. The introspection is probably slow, but if it only has to be done in a very high level function, that might be alright.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696:1188,clear,clearly,1188,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696,1,['clear'],['clearly']
Usability,"Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (**1-P(no jump)**), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable? . I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the **array[1, 10, 11]**? ... . At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response. Cheers,; Qi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42091087:1434,guid,guidelines,1434,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42091087,1,['guid'],['guidelines']
Usability,"Sorry.. got a little distracted, and wanted to check the contributing guidelines on what branch to make the pull request against. Currently it’s master. Is that ok? If yes, I’ll undraft it. Draft PRs are pretty new, and a very nice way to kick off the Continuous Integration. Like in this case, I wanted to check if any of the tests involve that message. As they don’t, this actually is ready to go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964:70,guid,guidelines,70,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964,1,['guid'],['guidelines']
Usability,"Sounds good, then. I'll get this done in the next couple days, then. Thank you for the feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/315#issuecomment-74205624:87,feedback,feedback,87,https://qutip.org,https://github.com/qutip/qutip/issues/315#issuecomment-74205624,1,['feedback'],['feedback']
Usability,"Sounds good, we should definitely make sure that the tests all work for 3.2; final. In the meantime, I think we should continue to merge in fixes when; its clear that the test failures are unrelated. On Mon, Feb 15, 2016 at 4:52 PM Alexander Pitchford <; notifications@github.com> wrote:. > Yes, I was thinking the same thing. I will open an issue now.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/428#issuecomment-184074750.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/428#issuecomment-184074941:156,clear,clear,156,https://qutip.org,https://github.com/qutip/qutip/pull/428#issuecomment-184074941,1,['clear'],['clear']
Usability,"Sounds good. I think that makes sense in a lot of ways, but I was initially wary of adding additional attributes. I'd be happy to rework PR #90 to be in terms of a new attribute `Qobj.superrep`, then. Thanks for the feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/88#issuecomment-37781929:216,feedback,feedback,216,https://qutip.org,https://github.com/qutip/qutip/issues/88#issuecomment-37781929,1,['feedback'],['feedback']
Usability,"Still looks good to me. We could put some of the code in `setup.py` into functions so that it's a bit more clear what is temporary state and how the code is organized, but we don't have to fix everything in one PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-786544691:107,clear,clear,107,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-786544691,1,['clear'],['clear']
Usability,Sure! I can prepare everything this evening following the development guidelines and send a pull request. Thanks!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2546#issuecomment-2416283354:70,guid,guidelines,70,https://qutip.org,https://github.com/qutip/qutip/issues/2546#issuecomment-2416283354,1,['guid'],['guidelines']
Usability,"Sure, I just added something - just a simple mesolve that uses a nonlinear tlist - I put it in test_td_formats.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-245499422:38,simpl,simple,38,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-245499422,1,['simpl'],['simple']
Usability,"Sure, I'll try soon. I can add stuff to the merge I've already done - I learned some `git` magic to combine merge commits into the same object without losing my previous work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1248#issuecomment-779265736:72,learn,learned,72,https://qutip.org,https://github.com/qutip/qutip/pull/1248#issuecomment-779265736,1,['learn'],['learned']
Usability,Thank you @hodgestar for noticing that there was nothing about MPI in the Users Guide yet. I wrote a short section based on the example in the `nm_mcsolve` tutorial notebook.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2550:80,Guid,Guide,80,https://qutip.org,https://github.com/qutip/qutip/pull/2550,1,['Guid'],['Guide']
Usability,"Thank you @hodgestar, glad to see many details coming with this nicely drafted PR. . Functions design seems sensible. ; What is the main difference between `expect` and `measure`? That's the main thing that comes up to my mind. What different question are you answering? I also wonder if `expect` could be called. The description of the `measure` function is a bit general maybe with this regard. But I might have missed the point completely (my bad). . Tests seem quite elaborate, I wouldn't know how to add more. They can be even very simple in general. . Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536360074:537,simpl,simple,537,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536360074,1,['simpl'],['simple']
Usability,"Thank you @jakelishman and @hodgestar for your suggestions throughout the PR!. At this stage, the following things are added:. - Getting rid of the previously implemented `matplotlib_version_gte` method. Instead following @jakelishman 's advice to factor version checking once at the top and use it throughout the module. This prevents any version checking in the user guide since the `axes3D_` method can be directly imported.; - Since `axes.M` seems to work even for `matplotlib==3.0`, converted all instances of `renderer.M` to `axes.M` to keep version checking at the minimum. Thanks!!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1556#issuecomment-841477865:369,guid,guide,369,https://qutip.org,https://github.com/qutip/qutip/pull/1556#issuecomment-841477865,1,['guid'],['guide']
Usability,"Thank you @jakelishman for the summary on the use of a GPL-2.0 in BSD-3.0. ; Maybe we can ping directly @Travis-S regarding the use of `qcircuit` 2.6 here for input on how to proceed. Let me point out that recently, reference to this project and a link was added in QuTiP's [user guide](https://github.com/qutip/qutip-doc/blob/f3592e9ad5a4083c19a8c7b81db8b2ae282cf4b4/guide/guide-qip.rst#plotting-a-quantum-circuit).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-633932995:280,guid,guide,280,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-633932995,3,['guid'],"['guide', 'guide-qip']"
Usability,"Thank you @jakelishman, this is great. Fantastic effort and result!. @Ericgig, sorry, just to rememeber: we decided to fold the repo `qutip-doc` into a docs folder here in `qutip/qutip`? I was in favor of it but lost track of what we agreed upon. . In any case, in my opinion this could go with the rest of the documentation. From the user's perspective, it could be an additional element in the menu tab on the left of this html page, http://qutip.org/docs/latest/index.html. It would be on par with the Users Guide and the API doc, and more visible for the usual documentation reader. Another option would be to have it linked in the website at the top level, next to User Guide (which actually prompts to the whole documentation history page) and Tutorials, but I feel that there it may go much more unnoticed. . It seems to be good practice to have a `CONTRIBUTING.md` file in this repo, it could point to that bundle of information. We have that [file](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md) indeed in `qutip-doc`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1359#issuecomment-697377705:511,Guid,Guide,511,https://qutip.org,https://github.com/qutip/qutip/issues/1359#issuecomment-697377705,2,['Guid'],['Guide']
Usability,"Thank you @sahmed95. Some references:. The code builds upon the formalism used in this paper . F. Damanet, D. Braun, and J. Martin, Cooperative spontaneous emission from indistinguishable atoms in arbitrary motional quantum states, Phys. Rev. A 94, 033838 (2016). which itself uses the technique illustrated here; ; B. A. Chase and J. M. Geremia, Collective processes of an ensemble of spin-1 particles, Phys. Rev. A 78, 052101 (2008). ; B. Q. Baragiola, B. A. Chase, and J. Geremia, Collective uncertainty in partially polarized and partially decohered spin-1/2 systems, Phys. Rev. A 81, 032104 (2010). An earlier version of this code has been used in this reference for N=50 two-level systems:. N. Shammah, N. Lambert, F. Nori, and S. De Liberato, Superradiance with local phase-breaking ; effects, Phys. Rev. A 96, 023863, arXiv:1704.07066v1 (2017). I will add examples and documentation, also referring to the much wider literature on permutational invariant methods studying the open quantum dynamics of a collection of N two-level systems. . Any feedback at any stage most welcome.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-331397170:1052,feedback,feedback,1052,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-331397170,1,['feedback'],['feedback']
Usability,"Thank you for picking up my suggestion in #1096. ### Suggested Changes; - 1) There are some minor issues with CodeClimate ([here](https://codeclimate.com/github/qutip/qutip/pull/1187)). @christian512 can you please reformat to 79 lines?; This can be done with tools like `black`:; ```; pip install black; black circuit.py --line-length 79; ```; - 2) @christian512 could you add something also in `qutip-doc` to acknowledge the use of this library in the documentation? @BoxiLi recently added circuits to the User Guide, if I remember correctly. . ## Questions and comments; - 3) I then leave it to @BoxiLi to review the PR more closely, if he has time, otherwise I'll look into it this week. . - 4) Is there a problem in theory using `qcircuit` code, which is with license `gpl-2.0` into a BSD-new (maybe @Ericgig @ajgpitch or @goerz know more)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-602522398:513,Guid,Guide,513,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-602522398,1,['Guid'],['Guide']
Usability,"Thank you for reporting.; The feedback interface changed a few times (and will change in future version.); The documentation in guide is wrong, but the apidoc should be up to date.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915:30,feedback,feedback,30,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915,2,"['feedback', 'guid']","['feedback', 'guide']"
Usability,"Thank you for taking this issue. The contribution to the phase is `np.exp(1.0j * 1 * phi)`, ignoring the `m` and it's not documented. So I guess all ket are `m = 1`...; Since it's wrong and not documented, you are free to choose which ever way you prefer. But please update the docstring so that is is clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658:302,clear,clear,302,https://qutip.org,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658,1,['clear'],['clear']
Usability,Thank you for the clarification. A suggestion would be to also relabel `fidelity` to make this clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2102#issuecomment-1450321937:95,clear,clear,95,https://qutip.org,https://github.com/qutip/qutip/issues/2102#issuecomment-1450321937,1,['clear'],['clear']
Usability,"Thank you for the suggestions. (2) It should be easy. We could reuse the `parallel_map` as you said. I would make a good first contribution. . (1) We need to be careful about this. ; I can see case where the user think the correlation is gone by `tlist[-1]` but it is not, so it should be clear which output are `0` and which are not computed.; Also if we do that, maybe finer control could be given. We could have a variable `max_t_plus_tau` with default `np.inf`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2315#issuecomment-1925474043:289,clear,clear,289,https://qutip.org,https://github.com/qutip/qutip/issues/2315#issuecomment-1925474043,1,['clear'],['clear']
Usability,"Thank you for your feedback. I was able to get the results I wanted. Just to provide some closure, I'm sending a photo. ![Image from iOS](https://user-images.githubusercontent.com/29261370/113462422-67e8c000-93e6-11eb-95ef-6d20f89b3851.jpg)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-812760478:19,feedback,feedback,19,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-812760478,1,['feedback'],['feedback']
Usability,Thank you for your feedback. I will write tests and documentation when I have some more time (might be in a month or so).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369#issuecomment-759365480:19,feedback,feedback,19,https://qutip.org,https://github.com/qutip/qutip/pull/1369#issuecomment-759365480,1,['feedback'],['feedback']
Usability,"Thank you very much for the quick feedback and sorry for the delay!. I checked also QuTiP 4.7 and yes, it still returns the same results so apparently this wasn't fixed yet. (I double-checked that I get the same result using the built-in `floquet_modes` with options rather than my `floquet_modes_mod`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864#issuecomment-1103559564:34,feedback,feedback,34,https://qutip.org,https://github.com/qutip/qutip/issues/1864#issuecomment-1103559564,1,['feedback'],['feedback']
Usability,"Thank you very much. I have documented most of the code and written simple unit tests. I would be happy to answer any questions regarding the code. If it helps, I can explain things over a short hangout session. Suggestions and comments are welcome.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-275864859:68,simpl,simple,68,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-275864859,1,['simpl'],['simple']
Usability,"Thank you, Alex, for your kind reply!. Which example do you refer to? I don't see the key word rhs_with_state on; the page (http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html).; Did I misunderstand you?. Best regards, Pu Zhang; --; Faculty at School of Physics, Huazhong University of Science and Technology; Room 819 (N.), Yifu Science and Technology Building; 1037 Luoyu Road, Wuhan, China; E-mail: puzhang0702@hust.edu.cn <puzha@fotonik.dtu.dk>; Homepage: www.researchgate.net/profile/Pu_Zhang4; Phone: +86 18871860394. On Thu, Feb 7, 2019 at 8:59 PM Alexander Pitchford <notifications@github.com>; wrote:. > @PZJuly <https://github.com/PZJuly> I have posted an answer to your; > question on; > https://groups.google.com/forum/#!topic/qutip/BqUZQEQN1c4; >; > I agree the docs; > http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html do seem to; > include an example using rhs_with_state; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/946#issuecomment-461408955>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGc5W9xuCIQ3EoKfzB0xg26dT1Jdo3O6ks5vLCMggaJpZM4agDjP>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461718912:153,guid,guide,153,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461718912,2,['guid'],['guide']
Usability,"Thanks ! I have removed the table. . Couple of questions : . - What's the preferred method to link functions not in public API ? ; I could create a [sphinx reference label](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#basic-markup) to link to these functions either by using Github's permalink or [a path to such functions in the directory](https://docs.readthedocs.io/en/stable/guides/cross-referencing-with-sphinx.html#the-doc-role). You can see this when I try to link `check_isunitary` which is not in the API but is defined in `Qobj` file in the linked branch. ; - Qobj vs qobj link : ; There are problems with linking functions for `Qobj` class. For example, if I want to link to [`isoperbra`](http://qutip.org/docs/latest/apidoc/functions.html#qutip.qobj.isoper) then the only link that will work is `qutip.qobj.isoperbra` not `qutip.Qobj.isoperbra`. If latter is preferred then I will have to create `ref` labels for each of these functions as stated above. More examples can be observed in the `superrep` attributes of `Qobj` class of linked branch. I think this might be due to `qutip.qobj` in [module code](http://qutip.org/docs/latest/modules/index.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1499#issuecomment-823754421:407,guid,guides,407,https://qutip.org,https://github.com/qutip/qutip/pull/1499#issuecomment-823754421,1,['guid'],['guides']
Usability,Thanks @Ericgig for feedback.; I see (having read more carefully) in; https://github.com/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb; there is an example showing the equivalence of using `smesolve` and `general_stochastic` with a clear performance enhancement in the former. So I think I can easily switch my example to use `smesolve`. Thanks.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581:20,feedback,feedback,20,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works. . Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716:103,simpl,simplifying,103,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716,4,"['simpl', 'user experience']","['simple', 'simpler', 'simplifying', 'user experience']"
Usability,Thanks @emilianomfortes for adding the guide. :rocket:,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668#issuecomment-1126039633:39,guid,guide,39,https://qutip.org,https://github.com/qutip/qutip/issues/1668#issuecomment-1126039633,1,['guid'],['guide']
Usability,Thanks Chris. This is looking good. I'll try it out in more detail in the comings days. Some immediate comments:; - I don't think we should keep two code-paths for parsing the config file. So either we keep using the old manual parsing or we make configobj the official and only way to parse the config file. In that case I think it would be Ok to simply fail to parse the config file if configobj is not available. I don't think many users use the config file so would be to worried about breaking backwards compatibility with respect to this.; - I think I'd prefer to have the logging module called logging.py rather than _logging.py even though it is supposed to internal to qutip. ; - Please add a `__all__` list in logging.py; - Shouldn't configspec.ini be added to the setup.py file?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248#issuecomment-61393881:348,simpl,simply,348,https://qutip.org,https://github.com/qutip/qutip/pull/248#issuecomment-61393881,1,['simpl'],['simply']
Usability,"Thanks Eric, I've learned so much from your comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1083545784:18,learn,learned,18,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1083545784,1,['learn'],['learned']
Usability,"Thanks alot for your great help.; Activating conda solved the problem, but still the command ""import numpy as; np"" leads to the following error:. File ""<stdin>"", line 1; import numpy as np; ^; IndentationError: unexpected indent. Other commands like ""import matplotlib.pyplot as plt"" works fine but; something like ""r=np.random.rand(4,4)"" does not work.; My numpy version is 1.19.2. Would you please help me to solve the problem.; Many thanks. On Tue, Dec 1, 2020 at 12:44 AM Boxi Li <notifications@github.com> wrote:. > Every time you open a new terminal, you will need to activate the conda; > environment by conda activate qutip-env. QuTiP is only installed in this; > environment. If you are interested, you could check; > https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html; > for details.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1391#issuecomment-736060302>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AR53J43QBLGZO3C3WKRB7BDSSQDMJANCNFSM4UGXA6UA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232:779,guid,guide,779,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232,1,['guid'],['guide']
Usability,"Thanks for clearing that up. I had tried to poke around to see what had changed, but I hadn't gone deep enough to see what changed with the qobjs themselves. . That's a good point about the eigenstate problem. I forgot about that because the observable I'm interested in is very very simple (it's diagonal), so it *seems* like it should be trivial to compute the measurement statistics. But to do that, qutip would have to know the observable is simple so it could take advantage of the symmetries. Are there any flags I can give it to tip it off? Or can I some how pass the list of eigenstates 'manually' so it doesn't need to find them itself?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2265#issuecomment-1821020656:11,clear,clearing,11,https://qutip.org,https://github.com/qutip/qutip/issues/2265#issuecomment-1821020656,3,"['clear', 'simpl']","['clearing', 'simple']"
Usability,"Thanks for clearing that, I'm also not sure how that happened, but it should be fixed now",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2136#issuecomment-1485558289:11,clear,clearing,11,https://qutip.org,https://github.com/qutip/qutip/pull/2136#issuecomment-1485558289,1,['clear'],['clearing']
Usability,"Thanks for reporting this - it's an important bug that's snuck in. Right now, there's a few errors in your code that you can fix to get on your way again, but we need to fix the error on our side. You're using `sigmap()` which is the Pauli excitation operator and is only defined for a Hilbert space with dimension 2. You actually are working with a Hilbert space of dimension `nmax * nmax` (a tensor-product space), so your `e_ops` argument to `sesolve` is wrong - it's difficult to know exactly what you meant here. `destroy(2)` is equivalent to `sigmap()`, so it's possible you intended to have `e_ops` be `[qutip.tensor(a1, a2)]`?. ---. Maintainers: The error is actually a segfault, because QuTiP 4.5 (probably 4.4 too) does not do sufficient error checking on`e_ops` arguments - probably they're missing in the conversion to `CQobjEvo`. When the expectation is called, it has already sidestepped `Qobj`'s dimensions check and there is no matrix size check, so it simply segfaults on OOB access. The fix for the 4.x branch is to have a very loud Python-space error due to mismatched `Qobj` dimensions on entry to the solvers, or insert a size check within `CQobjEvo`. High priority: there's no reason we should be segfaulting here. Partially fixed in the 5.x branch; all matrix multiplications that take place in C-space have a size check and throw a Python exception, however the solvers still sidestep the `Qobj` dimension check so a tensor-product-space mismatch will not be detected.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492:969,simpl,simply,969,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492,1,['simpl'],['simply']
Usability,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:619,usab,usable-cpus-in-python,619,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['usab'],['usable-cpus-in-python']
Usability,"Thanks for the fast response! It helps a lot! . As an additional question, with the list of tuples in #3, what happens if it is a list of lists instead?. Regarding 1/2: ; In my code, using tuples does result in different behaviour. I cannot (so far) think of a good simple example to reproduce this though, and am hesitant to upload the full code in which I see the difference as it is work in progress. What I can say is that when looking at expectation values after running mesolve, the list-vs-tuple question seems to not matter, at least for the things I tend to look at. However, when using qt.correlations_2op_2t, the results are very drastically different, and it seems to me that using tuples actually gets results closer to what I would expect to see. But I'm very suspicious of trusting numerical results that arise from using definitions in ways contrary to the documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2065#issuecomment-1410024050:266,simpl,simple,266,https://qutip.org,https://github.com/qutip/qutip/issues/2065#issuecomment-1410024050,1,['simpl'],['simple']
Usability,"Thanks for the feedback. I am very keen to spend some time making the control modules more QuTiP like in style. In particular trying to utilise QuTiP elements, e.g. maintaining Qobjs throughout the code. I am however focussed on trying to get some results out using the library, so it will probably be a month of so before I can start on this. ; Re the documentation, there is some theory in the first of our notebooks example-pulse_optim-Hadamard, however it could be a lot more detailed and better presented. I should be able to make a start on a general overview of the control modules though, i.e. one notebook that outlines the theory and then explains the different functions and classes and how / when to use them. Is that the kind of thing you mean?; I was wondering about the auto-generated API docs, how it deals with inherited and overidden methods etc. Do you use some specific tool to generate these? Can you point me to some docs about how it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/338#issuecomment-97736382:15,feedback,feedback,15,https://qutip.org,https://github.com/qutip/qutip/pull/338#issuecomment-97736382,1,['feedback'],['feedback']
Usability,"Thanks for the interest! To be clear, I wasn't trying to suggest that the whole thing is in scope for QuTiP per se; this PR concerns calling a small one-file [client library](https://github.com/cgranade/tskmon-client) from QuTiP. Given the similarity with that and the PiCloud functionality's goal (integrate QuTiP with third-party web services), maybe a good architecture would be something like a `qutip.services` package, where the expectation is that each submodule would require some additional client library?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63312872:31,clear,clear,31,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63312872,1,['clear'],['clear']
Usability,"Thanks for the review!. > * Should we stop the user from passing a list of kets to `mcsolve` directly?; > Presently it work but it's not documented (and list `ntraj` don't.). You are right, done. Of course we could also allow the same arguments for `mcsolve` as for `run`, but I thought it might be good to keep the `mcsolve` interface simpler. > * It would be nice to have the trajectories per initial state information stored in the result somewhere. I have added that information and checking it in a test. Edit: I forgot that I still haven't updated the docs. Will do that. Edit 2: Done",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143:336,simpl,simpler,336,https://qutip.org,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143,1,['simpl'],['simpler']
Usability,"Thanks for the suggestion. This is a good idea, and should be relatively simple to implement.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/203#issuecomment-50447740:73,simpl,simple,73,https://qutip.org,https://github.com/qutip/qutip/issues/203#issuecomment-50447740,1,['simpl'],['simple']
Usability,"Thanks for the useful feedback, both here and in PR #1611 ! From the discussion in PR #1611 it seems that the second option with the modifications proposed by Jake in this issue seems to be the most sensible approach. Hence, if there are no objections, I will open a PR (which I will probably do tomorrow) where I implement the following changes (adapted from Simon's comment in PR #1611):. - `Qobj.__mul__(self, other) ` ; - dispatch to `data.matmul` if `other` is a `Qobj`; - dispatch to `data.mul` otherwise which will return `NotImplemented` if it does not know how to handle `other`. ; - `Qobj.__rmul__(self, other) `:; - Dispatch to `data.mul` (`other` will never be a Qobj): Notice that in this way both left and right multiplication will behave in the same way. This would also ""solve"" the inconsistency PR #1611 was trying to solve but this time `data.mul` will handle it and will raise NotImplemented whenever required. . - `mul_dense` and `mul_csr`:; - Use a thin wrapper that returns `NotImplemeneted` if input is not a complex python scalar. There are a few things I would like to discuss before opening a PR:; 1) These changes will break backwards compatibility as:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # With the changes this also returns NotImplemented.; matrix * qobj # With the changes this also returns NotImplemented; ```; will now behave consistently (""fixes"" PR #1611). Is this acceptable? I would say yes given that we are doing a major version change. However, it may be a good idea to start raising a deprecation warning in QuTiP 4 if these changes go forward. 2) `data.add` has a similar behaviour to `data.mul` in that it accepts `scale` which is not a `Data` (there are a few more specialisations that also accept an argument that is not a `Data`). Should these specialisations behave in the same way allowing arbitrary python objects as ""scale"" and raise NotImplemented when required or should they just allow a complex py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473:22,feedback,feedback,22,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473,1,['feedback'],['feedback']
Usability,Thanks for your contribution. I have merged your changes together with other an implementation of the simplified array-based time-dependence format discussed above in PR #162.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-46521430:102,simpl,simplified,102,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-46521430,1,['simpl'],['simplified']
Usability,"Thanks for your feedback, I think it should be better now",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2136#issuecomment-1490968491:16,feedback,feedback,16,https://qutip.org,https://github.com/qutip/qutip/pull/2136#issuecomment-1490968491,1,['feedback'],['feedback']
Usability,"Thanks for your replies @BoxiLi @Ericgig , very helpful!. The output seems right after adding the `max_step` option to mesolve().; We changed the width of the cosine shaped pulse, here are some simple observations.; ```; if width = 20, then setting max_step < 27 can produce the correct answer.; if width = 50, then setting max_step < 70 can produce the correct answer.; if width = 100, then setting max_step < 130 can produce the correct answer.; ```. But as we are most caring about how to use the solvers correctly, we still have some doubts:; 1. We only observed two results, one is 'perfectly correct', and another is 'totally wrong' (Like @Ericgig said, the second pulse has been completely skipped over). Would some fault result in the middle happen? Some wrong result very similar to the correct would be even worse. 2. The Ode version of mesolve function is very fast, which is one of the reasons we love it. But we did not find document about other solvers (raw propagator, flatten to Liouville space?) for the master equation. Could you explain why the ODE method is the best over others, in aspect of accuracy and speed?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1265#issuecomment-629729386:194,simpl,simple,194,https://qutip.org,https://github.com/qutip/qutip/issues/1265#issuecomment-629729386,1,['simpl'],['simple']
Usability,"Thanks for your suggestion! I tried to increase the sub-steps, but the optimal (a tradeoff between precision and speed) `nsubsteps` is very sensitive to the parameter of the Hamiltonian (bias). To simulate a time-dependent bias, I have to set an extremely large `nsubsteps` then practical unable to complete. Mcsolve works perfect for this setup, but I also want to add some extra c_ops later. I would like to ensure if the `nsubsteps` is the only way to control the precision? If so, I will make things simpler and use mcsolve.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246:504,simpl,simpler,504,https://qutip.org,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246,1,['simpl'],['simpler']
Usability,Thanks! This cleared up my confusion.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/344#issuecomment-105092491:13,clear,cleared,13,https://qutip.org,https://github.com/qutip/qutip/issues/344#issuecomment-105092491,1,['clear'],['cleared']
Usability,"Thanks!. I haven't thought about python3 (is it about divisions `//` and `reduce`, or did you spot other problems?). `numpy.prod` - I guess I should rather use it, since `numpy` is already there; (a second thought: at least in python2 for lists of few elements `reduce` is significantly faster; I am not sure though, it in this particular case it makes a difference). ```; from numpy import prod; from operator import mul. prod([1,2,3]) # 22.6 µs; reduce(mul, [1,2,3]) # 737 ns; ```. `plot_qubism` for density matrix it is a different plot. In any case, I will think about it when I doing it (and I will adopt to QuTiP guidelines).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-43737566:619,guid,guidelines,619,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-43737566,1,['guid'],['guidelines']
Usability,"Thanks, @jakelishman. Even you say that you didn't look into very details, your comments were very inspiring and helpful!. What code climate is complaining about is mostly left from the previous code structure. I do plan on further cleaning them. Another refactor probably. Actually, the `_EvoElement` here is a simplified ""copy"" of the `EvoElement` in `QobjEvo`, not directly referring to that. Switch to `dev.major` won't break it. I did this long ago because I was having problems initialize `QobjEvo` in my particular use case. But indeed exposing a private class is fragile and dangerous. Planning on remove it too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1444#issuecomment-815048230:312,simpl,simplified,312,https://qutip.org,https://github.com/qutip/qutip/pull/1444#issuecomment-815048230,1,['simpl'],['simplified']
Usability,"Thanks, I'm glad to be of service! I missed that about `functools.reduce` in 2.7, will amend the PR to use that, fix the `xrange` thing and try to make the use of `reduce` a bit more clear. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128407473:183,clear,clear,183,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128407473,1,['clear'],['clear']
Usability,"Thanks, it worked! I simply moved it to the library where third-party packages are installed in Canopy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469#issuecomment-215968543:21,simpl,simply,21,https://qutip.org,https://github.com/qutip/qutip/issues/469#issuecomment-215968543,1,['simpl'],['simply']
Usability,"Thanks, this helps track it down. It seems not to be an issue with ENR per se, but with the floquet steadystate solver itself (it also appears without using ENR states). . I think I pinned it down to two small bugs in that seem to have crept in to the solver with the data layer updates, I will make a PR for it and ping you for some feedback, if thats ok. We lack a sufficiently robust test for this solver really, if you can suggest something tractable (very small example, potentially analytical solution we can check against), it would be very helpful.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504:334,feedback,feedback,334,https://qutip.org,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504,1,['feedback'],['feedback']
Usability,"That is true. I'll try to look into why this is the case. However, it does have three expectation calculated. You can check this with output.expect ! . Edit: . So, I just realized that the noise-spectrum is associated with the coupling operator [sigmax()], I think the correct call to brmesolve must infact be (updated to current qutip standards) . `output = brmesolve(H, psi0, tlist, [[sigmax(), ohmic_spectrum]], e_ops)`. This is in line with the notation we use in example (https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb). I will make a pull request updating both the example notebook (http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) to reflect this and make sure we depreciate the spectra_cb argument in bloch_redfield_tensor to eliminate the confusion. Thanks for bringing this to notice !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703:692,guid,guide,692,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703,1,['guid'],['guide']
Usability,"The LaTeX code generated for the following simple circuit is invalid, and trying to plot the circuit results in a RuntimeError:. ```; qc = QubitCircuit(1, num_cbits=1, reverse_states=False); qc.add_measurement(""M0"", targets=0, classical_store=0); qc.png; ```; Setting `reverse_states=True` works fine. The following line in `QubitCircuit.latex_code()` needs to include a sign dependent on the value of `reverse_states`:; https://github.com/qutip/qutip/blob/00d0fe43055cff44fad803bd1ad1530e17fedeee/qutip/qip/circuit.py#L1741",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1842:43,simpl,simple,43,https://qutip.org,https://github.com/qutip/qutip/issues/1842,1,['simpl'],['simple']
Usability,"The Liouvillian is defined via equation #3. I think your asking is it better to make a single operator, or take each term in equation #3 separately. If that is your question then the answer is yes, building the Liouvillian is much better. > On Sep 1, 2016, at 23:00, kwyip notifications@github.com wrote:; > ; > Hi Paul,; > Sorry let me clarify. ; > 1. If the number of nonzero elements is very large, is Liouvillian still preferred to defining derivatives from Hamiltonian and collapse operators (Eq.(3) in the link below)?; > 2. By constructing Liouvillian from Hamiltonian and collapse operators and defining the derivative as L*rho, is it computationally faster than Eq.(3) in http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-master.html http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-master.html; > Thank you.; > ; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub https://github.com/qutip/qutip/issues/531#issuecomment-244283656, or mute the thread https://github.com/notifications/unsubscribe-auth/ABMPqdiiBDr8Qx3t3gfFbjAv09QtRBqiks5ql611gaJpZM4JzMYn.; > ; > Untracked with Trackbuster https://trackbuster.com/?sig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/531#issuecomment-244284366:709,guid,guide,709,https://qutip.org,https://github.com/qutip/qutip/issues/531#issuecomment-244284366,2,['guid'],['guide']
Usability,"The NASA copyright needs to be there. As it stands now, it is not clear what the license actually means though, i.e. it is embedded in the QuTiP license which does not make any sense. So that needs to be cleaned up before approval. However, if it is truly BSD licensed then the copyright does not matter for derivative works as it gives permission to do whatever one wants provided the original copyright remains. I am personally fine with the copyright changes going forward. I am not part of the admin team (by choice), but there is a decade of git commits that show my share the the work, and making the cp more broadly applied to QuTiP admin / devs make s a lot of sense going forward.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864032584:66,clear,clear,66,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864032584,1,['clear'],['clear']
Usability,"The PR is in good shape for merging I believe. I'd like to discuss the parameters API a bit. The parameters used now for measurement function is `ops` and `state`. I guess @hodgestar coined this interface in his PR. It fully made sense for observable and state. However, if we now generalize it to the measurement from the perspective of experimentalists. The parameter `state` becomes a more prominent one whereas `ops` becomes secondary because it only offers a basis for the measurement. This become clearer if one list all the possible use scenarios where:. - `state=Qobj, ops=None`: measure the `state` in default computational basis; - `state=Qobj, ops=ket`: Probability of measure `state` and get `ket`, (together with the post-measurement state); - `state=Qobj, ops=Qobj`: Measure the `state` with one POVM operator specified by `ops`; - `state=Qobj, ops=list of ket`; - `state=Qobj, ops=list of Qobj`. More generally, we can even provide the user with the optional parameter `targets`, where the given `ops` is only for those targets qubits. We can add identity to the measurement operator for the rest of the qubits automatically for the user.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340:503,clear,clearer,503,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340,1,['clear'],['clearer']
Usability,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:505,learn,learning,505,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,1,['learn'],['learning']
Usability,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:973,learn,learn,973,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,1,['learn'],['learn']
Usability,"The `qutip.lattice` module is currently unmaintained and the complicated display functions are untested. As reported in https://groups.google.com/g/qutip/c/HKEK60R6HOI/m/6rY7EF-CBQAJ `.display_lattice()` and `.display_unit_cell()` raise exceptions with the following simple code:. ```python; from qutip.lattice import Lattice1d; chain = Lattice1d(num_cell=3, boundary=""periodic""); chain.display_lattice(); chain.display_unit_cell(); ```. **Related issues or PRs**; * None yet. **Changelog**; * Fix setting of lattice site dimensions with displaying a Lattice1d with display_lattice or display_unit_cell.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1697:267,simpl,simple,267,https://qutip.org,https://github.com/qutip/qutip/pull/1697,1,['simpl'],['simple']
Usability,"The `qutip.lattice` module is currently unmaintained and the complicated display functions are untested. As reported in https://groups.google.com/g/qutip/c/HKEK60R6HOI/m/6rY7EF-CBQAJ `.display_lattice()` and `.display_unit_cell()` raise exceptions with the following simple code:. ```python; from qutip.lattice import Lattice1d; chain = Lattice1d(num_cell=3, boundary=""periodic""); chain.display_lattice(); chain.display_unit_cell(); ```. **Related issues or PRs**; - Supercedes #1702, #1699 and #1697. **Changelog**; * Fix setting of lattice site dimensions with displaying a Lattice1d with display_lattice or display_unit_cell.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1819:267,simpl,simple,267,https://qutip.org,https://github.com/qutip/qutip/pull/1819,1,['simpl'],['simple']
Usability,"The block-redfield solver only supports string-based time-dependence, ; http://qutip.org/docs/latest/guide/dynamics/dynamics-bloch-redfield.html#time-dependent-bloch-redfield-dynamics; so in your example something like H=[[initial_H,'1-0.01*{i}*t'.format(i=i)],[final_H,'0.01*{i}*t'.format(i=i)]] should work. I don't know whether that will give you the same issue as reported for repeated calls to mesolve/sesolve. Probably will, if that hasn't been resolved yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917:101,guid,guide,101,https://qutip.org,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917,1,['guid'],['guide']
Usability,"The code change look good, but could we also add a test for this so it doesn't fail again in the future? Maybe there is a simple example from a notebook that can be borrowed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1952#issuecomment-1197371391:122,simpl,simple,122,https://qutip.org,https://github.com/qutip/qutip/pull/1952#issuecomment-1197371391,1,['simpl'],['simple']
Usability,"The core of `mesolve` is also `scipy.ode`, but the default method is `adams` instead of `bdf` and we use sparse matrix for the liouvillian. There are a lot of small time lost with using mesolve like this. Just looking at rhos' datatype: ; `self.psi0: dense -> rho0: Qobj(sparse matrix) -> dense vector (for ode) -> mesolve return: sparse matrix -> rhot: dense...`; Also `mesolve` will check if the Hamiltonian is really an Hamitonian or a Liouvillian or a function returning an Hamiltonian, if the system depend on time, if all the dimensions match, etc. So the overhead of `mesolve` will be important. Finally, depending on the Hamiltonian there can be a good difference in speed. We use sparse matrix for the Liouvillian, good if the Hamiltonian is large with few non-zeros, but slower that simple dense matrices otherwise.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780:793,simpl,simple,793,https://qutip.org,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780,1,['simpl'],['simple']
Usability,"The current `.evolve_dm` and `.sys_dims` concepts both seem a bit awkward, so I'd like to suggest the following:. **For `.evolve_dm`**:. Replace `.evolve_dm` with a `.unitary` attribute on the solver itself. The attribute should be `True` if that particular instance of the solver can guarantee that the evolution it produces is unitary, and `False` otherwise. This will be more generally useful and will simplify the code inside the propagator a bit. **For `.sys_dims`**:. The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise. I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. **Specifying which solvers support propagators**:. Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335538079:405,simpl,simplify,405,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335538079,1,['simpl'],['simplify']
Usability,"The current stats from `master` show that the fallback is quite mixed:; ```; 12 dtype = dtype or settings.core[""default_dtype""] or _data.CSR; 27 dtype = dtype or settings.core[""default_dtype""] or _data.Dense; 12 dtype = dtype or settings.core[""default_dtype""] or _data.Dia; ```; Perhaps we could create a small object describing the behaviour. Something like:; ```; class DefaultDataType:; state: ...; oper: ...; ```; And then one could either do `with CoreOptions(default_dtype=""CSR""):` (which sets everything to CSR) or `with CoreOptions(default_dtype=DefaultDatatype(state=""Dense"", oper=""CSR""):` (which chooses based on the type of the output). I don't know if `state` and `oper` are the correct set of distinctions to make. We already have some operators where `CSR` seems to the sensible default and others where the sensible default seems to be `Dia`. On the other hand eventually on probably wants to combine these operators into one system, so maybe picking a single operator default is the right thing to do. There is also the question of what should happen when operators are built from states. Perhaps in the end we can't really manage this for the user and they either have to live with a few simple tools we give them or explicitly set dtypes themselves?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1951474434:1205,simpl,simple,1205,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1951474434,1,['simpl'],['simple']
Usability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:866,clear,clearer,866,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,2,['clear'],"['clear', 'clearer']"
Usability,"The deprecation warning from `scipy==1.11` reads; `DeprecationWarning: scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead`. However, clearly this functionality broke before that release; with some discussion here: ; - https://github.com/scipy/scipy/issues/19065#issuecomment-1678439743; - https://github.com/scipy/scipy/pull/19067",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768:168,clear,clearly,168,https://qutip.org,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768,1,['clear'],['clearly']
Usability,"The difference between those two lines is that left-multiplication by `s_prep.dag()` will project onto the prepared ancilla state, whereas tensor contraction will implement partial trace over the ancilla; they're both perfectly valid channels (up to normalization in the projection case), but have subtly different physical interpretations. I can explain that better in the notebook, and submit as a PR, then. There's some plotting code there as well that I was planning on cleaning up better for a later PR to QuTiP, but I can clean it up now and include it if you like, so that I can simply use it in the tutorial notebook without a page of function definitions first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65412516:586,simpl,simply,586,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65412516,1,['simpl'],['simply']
Usability,"The dpsi option worked fine on my mac from jupyter. ; - please update the docstring to highlight this option (could also add the presence of the `name` option, besides directory and format); - It is a nice feature, it could be highlighted in the documentation, here https://github.com/qutip/qutip-doc/blob/master/guide/guide-bloch.rst; - add to 4.4.1 enhancements in the changelog, https://github.com/qutip/qutip-doc/blob/master/changelog.rst; Let's skip the codeclimate issues for the moment, but in the future it might be nice to refactor the Bloch class inner workings, as it took me a while to sort out issue #1027.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574:313,guid,guide,313,https://qutip.org,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574,2,['guid'],"['guide', 'guide-bloch']"
Usability,"The eigenvectors returned by .eigenstates() method are determined up to a sign (which is correct, but leads to interesting issues in some cases). Is it possible to update the eigenstates method to fix these internally? A simple workaround is to invert (multiply by -1) any eigenstates that cause trouble, but I'm not sure I know of a universal test for ""trouble"". As an example, [this gist](https://gist.github.com/amcdawes/437f8756fcb8ff8ca4c1b720600adf43) demonstrates a fix whereby all eigenstates are made to have positive initial values. I suspect this fix is specific to SHO states, but perhaps a universal standard exists where each vector could be made to match the expected result?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1118:221,simpl,simple,221,https://qutip.org,https://github.com/qutip/qutip/issues/1118,1,['simpl'],['simple']
Usability,"The equation for `d_{2,i}` for `ssesolve` seems to be missing a 1/2 term. I checked two sources: Quantum Measurement and Control, Wiseman and Milburn (equation 4.76, page 162), and [the development notebook for SSE](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolve-tests.ipynb). In both cases, the expression for d_{2, i} for the SSE is: . <img width=""278"" alt=""Untitled"" src=""https://user-images.githubusercontent.com/39472087/145735966-85d0c932-a247-42e7-91e1-98fc0f6d0c49.png"">. For the stochastic master equation, I also found a different expression for `d_{2,i}`. Both book (equations 4.24 and 4.72 in pages 152 and 161, respectively) and development notebook, state that it should be written:. <img width=""483"" alt=""d2master"" src=""https://user-images.githubusercontent.com/39472087/145737189-9e3996a5-186a-47e3-9e2f-7e365e00e5ea.png"">. To test the current qutip implementation, I tried to replicate the results of both [SSE](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolve-tests.ipynb) and [SME](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb) development notebooks. The results obtained with QuTiP homodyne and heterodyne methods were similar to the results obtained with the d_1 and d_2 implemented 'by hand' in the notebooks, which used the expressions I listed above. In my tests, I used QuTiP 4.5.2. The equations above are also the current reported equations in the [stochastic solver documentation](https://qutip.org/docs/latest/guide/dynamics/dynamics-stochastic.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706#issuecomment-992023974:1619,guid,guide,1619,https://qutip.org,https://github.com/qutip/qutip/issues/1706#issuecomment-992023974,1,['guid'],['guide']
Usability,"The error reported here; ```; /Users/goerz/.pyxbld/temp.macosx-10.6-x86_64-3.5/pyrex/rhs72670.cpp:541:10: fatal error: 'complex' file not found; #include <complex>; ```; Suggests that any string format time-dependence would fail to compile. @goerz Could you try to reproduce with simple example, e.g.; ```; H = [[sigmaz(), ""sin(t)""]]; ```; ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-463246180:280,simpl,simple,280,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-463246180,1,['simpl'],['simple']
Usability,"The fermionic stuff looks to me! For the change in the terminator, I see the logic I guess. Also makes it easier for the user to include it or not, without remaking the bath. I have some reservations about it just because I can imagine someone following the examples and using jupyter notebook rerunning the same cell multiple times and continuously modifying their Hsys or something? But that can just be made clear in the examples so lets go ahead and merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370:411,clear,clear,411,https://qutip.org,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370,1,['clear'],['clear']
Usability,"The first step of calculating the trace norm is to do `A @ A.dag()`, which we did internally in Qobj.norm. This creates a temporary `Qobj`, and those created from `Qobj.__mul__` are subject to tidyup by default, so this temporary structure may incorrectly get tidied to the zero matrix. For example, the code; ```python; qutip.qdiags(1e-7 * np.random.rand(10), 0).norm(); ```; would previously give 0, as clearly all elements of `A @ A.dag()` would be less than 1e-14, and subject to tidyup. We avoid the call that may be tidied up by jumping straight to CSR-CSR matrix multiplication, and set `isherm=True` without going via Qobj, since the operation is Hermitian for any matrix. Fix gh-952",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1479:405,clear,clearly,405,https://qutip.org,https://github.com/qutip/qutip/pull/1479,1,['clear'],['clearly']
Usability,"The fixes are quite simple, added them here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108796698:20,simpl,simple,20,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108796698,1,['simpl'],['simple']
Usability,"The following codes come from the documentation of mcsolver; http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html; ```; from qutip import *; import numpy as np; times = np.linspace(0.0, 10.0, 200); psi0 = tensor(fock(2, 0), fock(10, 5)); a = tensor(qeye(2), destroy(10)); sm = tensor(destroy(2), qeye(10)); H = 2 * np.pi * a.dag() * a + 2 * np.pi * sm.dag() * sm + 2 * np.pi * 0.25 * (sm * a.dag() + sm.dag() * a); data = mcsolve(H, psi0, times, [np.sqrt(0.1) * a], [a.dag() * a, sm.dag() * sm]); ```; Sofar it is fine, but if I now try to print `data` with; ```; print(data); ```; The following error shows up in either Ipython or Jupyter Notebook; ```; c:\users\boxi\onedrive\studium\qutip-project\qutip\qutip\solver.py in __str__(self); 272 s += ""missing solver information.\n""; 273 s += ""-"" * (len(s) - 1) + ""\n""; --> 274 if self.states is not None and len(self.states) > 0:; 275 s += ""states = True\n""; 276 elif self.expect is not None and len(self.expect) > 0:; TypeError: len() of unsized object; ```; It is because in the default option is `store_states=False`. Maybe `self.states` should be initialized as e.g. an empty list.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1016:90,guid,guide,90,https://qutip.org,https://github.com/qutip/qutip/issues/1016,1,['guid'],['guide']
Usability,"The formatting of several .py files in qutip/qutip could be improved according to [PEP8](https://www.python.org/dev/peps/pep-0008/) and appropriate guidelines. An example in ; [qutip/piqs.py](https://github.com/qutip/qutip/blob/master/qutip/piqs.py) is given by . ```; def num_dicke_states(N):; """"""Calculate the number of Dicke states.; Parameters; ----------; N: int; The number of two-level systems.; ```; that can be changed to introduce spaces after the : ; ```; def num_dicke_states(N):; """"""Calculate the number of Dicke states.; Parameters; ----------; N : int; The number of two-level systems.; ```. These changes would affect the documentation upon build, but need to be made in qutip/qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1527:148,guid,guidelines,148,https://qutip.org,https://github.com/qutip/qutip/issues/1527,1,['guid'],['guidelines']
Usability,"The function `rand_herm` doesn't return a uniformly random sample from the space of Hermitean matrices -- instead it uses by default a simpler procedure of generating a random matrix with moderately sized entries and then calculating `M + M.conj().transpose()`. The following note in the `rand_herm` documentation explains how to select the eigenvalues:. > If given a list/ndarray as input 'N', this function returns a; > random Hermitian object with eigenvalues given in the list/ndarray.; > This is accomplished via complex Jacobi rotations. While this method; > is ~50% faster than the corresponding (real only) Matlab code, it should; > not be repeatedly used for generating matrices larger than ~1000x1000. Specifically one may generate random eigenvalues and supply those. I don't think anyone is against improving the `rand_XXX` function to have better statistical properties, but they're primarily used for testing and simple trial data at the moment, so their implementations have been good enough so far.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642#issuecomment-905691827:135,simpl,simpler,135,https://qutip.org,https://github.com/qutip/qutip/issues/1642#issuecomment-905691827,2,['simpl'],"['simple', 'simpler']"
Usability,"The function `spectrum_correlation_fft(taulist, y)` accepts all kinds of (non-linspace) taulists with corresponding correlation values `y`.; However, `y` is passed to `scipy.fftpack.fft(y)`, which assumes the values to be linearly spaced in time. If 'taulist' is not a linspace, the result of `spectrum_correlation_fft(taulist, y)` will seem realistic, but in fact be totally off.; This behaviour is especially critical, because it is often advantageous to use non-linear taulists for the calculation of correlation values. I guess this limitation is indicated by the fact that it uses a fast fourier transform, but I think it should be indicated more clearly, at least in the docstring. P.S: Thanks for the great module! I quite enjoy working with qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/689:652,clear,clearly,652,https://qutip.org,https://github.com/qutip/qutip/issues/689,1,['clear'],['clearly']
Usability,"The latest changes in `mcsolve` with option `average_states = False, store_states = True` is much slower than `average_states = True, store_states = True`. . Strangely, the cell runs for much longer after the progress bar is completed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1023:209,progress bar,progress bar,209,https://qutip.org,https://github.com/qutip/qutip/issues/1023,1,['progress bar'],['progress bar']
Usability,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:355,clear,clear,355,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,2,['clear'],"['clear', 'clearer']"
Usability,"The main purpose of this patch is to cherry-pick up the commits which allow us to move our testing infrastructure to GitHub Actions, without absolutely messing up the merge of #1481. After that is merged, I'll merge everything up properly. This stop-gap measure is necessary because Travis CI is shutting down its free tier _today_, and we haven't managed to effect the merge yet. Unfortunately, I had to pick out rather more than I had hoped to get this without seriously rewriting `__init__.py`, `setup.py` and the testing workflow, so apologies for the larger PR. I have, however, cherry-picked out PRs in full, rather than splitting them, to make it logically a bit simpler. I have also cherry-picked the PRs commit-by-commit, rather than squashing them, to make it easier to understand the history when I have to do a larger merge later (even though it'll still be more confusing in the `git log` than desirable). The cherry-picked PRs are:; - #1465; - #1471; - #1484; - #1510; - #1541; - #1551 (the actual target). I had to fix several merge conflicts in `__init__.py` over time, but most stuff was trivial to solve. The largest merge conflicts that needed to be handled were issues where the old and new methods of handling settings conflicted, but again, it's obvious what is the correct version in this. I have also disabled warnings-as-errors in the testing infrastructure, until we've fixed them properly on this branch.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1574:670,simpl,simpler,670,https://qutip.org,https://github.com/qutip/qutip/pull/1574,1,['simpl'],['simpler']
Usability,"The mcsolve is Ok. But I did not test it on windows yet.; td_Qobj work fine for the solvers. However, there are probably a few methods/properties that would be useful but I did not think about. If somebody would have the time to try it and send feedback, that would be great.; For now, sesolve and mesolve also accept td_Qobj. I am working, in another branch, to have the stochastic solvers work with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/774#issuecomment-351799673:245,feedback,feedback,245,https://qutip.org,https://github.com/qutip/qutip/pull/774#issuecomment-351799673,1,['feedback'],['feedback']
Usability,"The new QuTiP solvers now support `solver.step(self, t, args=args)`. which allows manually stepping the state until time `t` with the optional supplied args. I don't think this quite addresses the full feedback possibilities, but I am noting the progress here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-1226363253:202,feedback,feedback,202,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-1226363253,1,['feedback'],['feedback']
Usability,"The new random Qobj functions `rand_ket_haar`, `rand_dm_hs`, `rand_dm_ginibre`, `rand_unitary_haar` and `rand_super_bcsz` need to be explained in the Guide as well as in the apidocs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1523:150,Guid,Guide,150,https://qutip.org,https://github.com/qutip/qutip/issues/1523,1,['Guid'],['Guide']
Usability,The notebook book would live in here:; https://github.com/qutip/qutip-notebooks/tree/master/examples; We would then link it in here:; https://github.com/qutip/qutip.github.io/blob/master/tutorials.html; I guess in the Basics section. As for the qutip-docs:; It would be good to update functions.rst. This is for the auto-generated API docs. If you are feeling super keen then you could add a guide-measurement.rst in:; https://github.com/qutip/qutip-doc/tree/master/guide; and link it from:; https://github.com/qutip/qutip-doc/blob/master/guide/guide.rst. Barring a few build problems here and there the docs building has been okay recently (I think).; Instructions can be found here:; https://github.com/qutip/qutip-doc/blob/master/README.md,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797:392,guid,guide-measurement,392,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797,4,['guid'],"['guide', 'guide-measurement']"
Usability,The original was #785 which auto-closed when I deleted the branch and rebased to split it into 2. I'm just undoing my branch management sloppiness. . This was about the correlation function supporting bloch-redfield solver.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/884#issuecomment-399298084:107,undo,undoing,107,https://qutip.org,https://github.com/qutip/qutip/pull/884#issuecomment-399298084,1,['undo'],['undoing']
Usability,"The problem appears in qutip version 4.0.0 when considering the tensor product of a few systems, and including more than one dissipation channel. I noticed a similar issue on a much more complex system, but in the code attached I consider the simplest system on which I have found the bug to appear. Consider three uncoupled qubits, each with a distinct frequency. The Hamiltonian is (ignoring tensor products with identity matrices) :. H = (w1 / 2) * sigmaz_1 + (w2 / 2) * sigmaz_2 + (w3 / 2) * sigmaz_3. Let us couple qubits 2 and 3 to independent white-noise environments through operators sigmax_2 and sigmax_3. Qubit 1 is decoupled from the other qubits, and does not couple to any relaxation channel. We consider the initial state |1:e, 2:g, 3:g>, where g(e) labels the ground (excited) state of a qubit, and evaluate the population of the excited state of qubit 1 as a function of time using bloch_redfield_tensor() and bloch_redfield_solve(). Since qubit 1 is decoupled from the other qubits, its excited-state population should remain 1 at all times. Yet, qutip yields exponential decay of the population of qubit 1. I noticed that when I remove dissipation for qubit 2 (keeping only dissipation through sigmax_3), the problem disappears and qubit 1 forever stays in its excited state. So the problem seems to arise when combining two relaxation sources. I am using qutip version 4.0.0. A colleague of mine tried the attached test code on qutip version 3.1.0 and did not catch any bug (i.e. qubit 1 did not relax with qutip 3.1.0). So the problem seems to be related to versions of qutip later than 3.1.0. Can anyone replicate the bug with the attached code ? . (I tried putting the code directly here but the hashtag signs for the comments made a mess, and github does not accept attached .py files, so I have put the code in a .txt file instead.). [redfield.txt](https://github.com/qutip/qutip/files/635122/redfield.txt)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/572:243,simpl,simplest,243,https://qutip.org,https://github.com/qutip/qutip/issues/572,1,['simpl'],['simplest']
Usability,"The problem is recognising what a true 0 is from a small value. In your example on the new data layer, there will already be exactly 0 items explicitly stored (and `data.add_csr` is going to get faster and smarter in another PR, too) without `tidyup`, but much more concerningly `1e-15 * qutip.rand_herm(5)` will end up in a zero matrix, which is clearly absolutely wrong. The argument from Liouvillian doesn't work here - even before the new data layer, `liouvillian` never called the `tidyup` code because it accessed the `Qobj.data` field directly, rather than used `Qobj`. Since it then goes into `CQobjEvo` in most of the solvers, which also don't touch the `tidyup` code, it doesn't get called. I don't think there's any safe way to know if small values should actually be zero, or if they're just small values. It makes sense that we want to maintain as much sparsity as possible when values are truly zero, but I think having the QuTiP default be to attempt to tidy up after every addition, multiplication and matrix multiplication is quite unsafe, and for people who aren't doing very very sparse calculations, it's actually a slow down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384:347,clear,clearly,347,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384,1,['clear'],['clearly']
Usability,"The problem seems pretty simple, I think I could take care of it. However, I don't have much experience in collaborative programming, in particular I don't know what the local customs are. (I know how to use git, but I'm not familiar with the layout of the library, what tests should I perform [or even add my own, since this issue wasn't noticed before 5.0.0] etc.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457:25,simpl,simple,25,https://qutip.org,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457,1,['simpl'],['simple']
Usability,"The problem with OPENMP is that the point where parallel processing begins to have an advantage is platform, and hardware dependent. As such, I have added a simple benchmark routine that calculates a good number of NNZ that a matrix should have for OPENMP to be utilized. This also required me to change the way the qutiprc file is done, i.e. it now uses the standard configparser module. This benchmark is called on first run, or anytime where the qutiprc 'openmp_thresh' flag is missing, or the qutiprc file itself does not exist.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/652#issuecomment-283874454:157,simpl,simple,157,https://qutip.org,https://github.com/qutip/qutip/pull/652#issuecomment-283874454,1,['simpl'],['simple']
Usability,"The progress bar control in now in the options: `mesolve(..., options={'progress_bar': False})`.; Any of `["""", None, False]` will not display the time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2191#issuecomment-1629652084:4,progress bar,progress bar,4,https://qutip.org,https://github.com/qutip/qutip/issues/2191#issuecomment-1629652084,1,['progress bar'],['progress bar']
Usability,"The question about the mandatory default for states is a good one. So currently we call the `QobjEvo` with `t=0` to get its dims. This is slightly hacky, but very convenient, and usually `t=0` is a valid time. Feedback breaks this assumption though because now `t=0` is insufficient information. We also need the current state, but we can't create a dummy state because we don't know what its dims should be yet. So there is a cycle we have to break somehow. Currently we break this by having the user supply an initial state, but perhaps we could do other things. The worst case is when the Qobj part of an EvoElement is supplied by a function. Then we can't get the dims without calling it. When the Qobj part is just a Qobj, getting the dims is fairly straight forward. So one option would be to ask the user to supply the dims if there are no EvoElements that provide a Qobj to look at, or to guarantee that their function is callable with just `t=0`. I'm not sure this is entirely nicer, but it does avoid having to supply a dummy initial state. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1846240598:210,Feedback,Feedback,210,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1846240598,1,['Feedback'],['Feedback']
Usability,"The scalar product (f_modes_t[a].dag() * c_op * f_modes_t[b])[0, 0] is computed at each loop in the for loop on k. But it only depends on a and b and can then be computed outside of the loop. In my case, I was dealing with Hilbert spaces of size 100, which resulted in a significantly reduced run time. Please, let me know about any feedback about this PR :). Follow up of !762.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/766:333,feedback,feedback,333,https://qutip.org,https://github.com/qutip/qutip/pull/766,1,['feedback'],['feedback']
Usability,"The scalar product `(f_modes_t[a].dag() * c_op * f_modes_t[b])[0, 0]` is computed at each loop in the `for` loop on `k`. But it only depends on `a` and `b` and can then be computed outside of the loop. In my case, I was dealing with Hilbert spaces of size 100, which resulted in a significantly reduced run time. Please, let me know about any feedback about this PR :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/762:343,feedback,feedback,343,https://qutip.org,https://github.com/qutip/qutip/pull/762,1,['feedback'],['feedback']
Usability,"The segfault on mac is not fixed yet. @nathanshammah found 3 tests that fails because of it.; Since we don't have a solution comming soon, we are simply skipping these tests for 4.5.1. This is the error in #1197. In common with these 3 test is the computation of eigenvalues, 2 of them do it directly with scipy, the last one compare the cython version to the scipy one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1257:146,simpl,simply,146,https://qutip.org,https://github.com/qutip/qutip/pull/1257,1,['simpl'],['simply']
Usability,"The simplest use case is the circuit simulation, where e.g. single qubit unitaries are multiplied to multiqubit states. For Hamiltonian dynamics I cannot immediately think of an application cause usually you need to sum many terms. Unless we develop a troterrizatiom solver, which is actually quite common, especially for distributed computation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2545#issuecomment-2415282442:4,simpl,simplest,4,https://qutip.org,https://github.com/qutip/qutip/pull/2545#issuecomment-2415282442,1,['simpl'],['simplest']
Usability,"The stochastic solver have been redone.; smesolve and ssesovle can be used for time dependent systems (H, c_ops and sc_ops).; The available solvers are : 'euler-maruyama', 'pc-euler, 'milstein', 'platen', 'milstein-imp', 'taylor15', 'taylor15-imp', 'explicit15'. All solvers are usable by both ssesolve and smesolve, for time-dependent cases and for both heterodyne and homodyne methods. There is no restriction on the number of sc_ops. The solvers are in cython, making them 2~3 time faster than the previous version, with the exception of the implicit solvers, where the timing is about the same. The photocurrent method as been moved to it's own functions: photocurrentmesolve and photocurrentsesolve. It can take time-dependent Hamiltonian. The stochastic (piecewse deterministic process) PDP solvers (ssepdpsolve and smepdpsolve) are untouched. The previous version of smesolve/ssesolve allowed the user to determine it's own d1 and d2 function. This capacity have been moved to the function general_stochastic. However the function only has access to some solver: 'euler-maruyama', 'platen', 'explicit15'. . I created a function which list the solvers with the references: stochastic_solver_info(). The convergence of the solvers was tested with a tests similar to https://github.com/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb .",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815:279,usab,usable,279,https://qutip.org,https://github.com/qutip/qutip/pull/815,1,['usab'],['usable']
Usability,"The table is now present https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver. Closing this, but please let me know if I missed something.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1345305620:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1345305620,1,['guid'],['guide']
Usability,"The tests fail because if one defines `f(t, args, k)` and defines `g = partial(f, k=0.5)` then the signature of g is `<Signature (t, args, *, k=5)>`. There will likely be other cases like this (e.g. many decorators will change the signature). I vote that we give up on all the complicated detection of the old syntax and simply ask users to change `f(t, args)` to `f(t, **args)` when they upgrade to QuTiP 5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881:321,simpl,simply,321,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881,1,['simpl'],['simply']
Usability,"The usage of the `tensor_contract` function is explained in [QuTiP Example: Superoperators, Pauli Basis and Channel Contraction](http://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/example-superop-contract.ipynb). It is explained in terms of the graphical notation in http://arxiv.org/abs/1111.6950. However, there is no figure explaining how the ""tensor wires"" are numbered. In the notebook it says ""Numbering the tensor wires from 0 to 3, this corresponds to a tensor_contract argument of (1, 3)."" But it is not clear what the convention is... does the numbering follow in an anticlockwise fashion, starting with 0 at the top left?. A figure in the notebook showing the numbering convention would be extremely helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/385:540,clear,clear,540,https://qutip.org,https://github.com/qutip/qutip/issues/385,1,['clear'],['clear']
Usability,"There are no test code for progress bars yet.; You will need to create a new test file: `qutip/tests/test_progressbar.py`. The test can be as simple as creating the bar, call `update`, call `finished` and check that the total time is a sensible value.; You could also use pytest to catch print with [capsys](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html#accessing-captured-output-from-a-test-function) and confirm that something was printed when `update` / `finished` is called.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520:27,progress bar,progress bars,27,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520,2,"['progress bar', 'simpl']","['progress bars', 'simple']"
Usability,"There are two places where one can read about the development guidelines. One is ; on `qutip/qutip`'s Wiki page:; https://github.com/qutip/qutip/wiki/QuTiP-Development-Guidelines. The other one is in `[qutip-doc/qutip_dev_contrib.md`](https://github.com/qutip/qutip-doc/blob/2ffd6d1cc581e858674d43fe97a9297e9476a278/qutip_dev_contrib.md). I see that we may want both to be there, but I guess they should contain the same information and possibly cross-reference each other.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1135:62,guid,guidelines,62,https://qutip.org,https://github.com/qutip/qutip/issues/1135,2,"['Guid', 'guid']","['Guidelines', 'guidelines']"
Usability,There is a Bloch_Decay.mp4 link at the bottom of the [Plotting on the Bloch Sphere](http://qutip.org/docs/4.1/guide/guide-bloch.html#plotting-on-the-bloch-sphere) webpage. When I click on it I get a 404 error from linked Google Code page:; http://qutip.googlecode.com/svn/doc/figures/bloch_decay.mp4,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/800:110,guid,guide,110,https://qutip.org,https://github.com/qutip/qutip/issues/800,2,['guid'],"['guide', 'guide-bloch']"
Usability,"There is a problem with `mesolve` and `sesolve`'s default `options`, which determine whether the propagated states are stored in the `result` object:. ~~~; >>> import qutip; >>> import numpy as np; >>> qutip.__version__; '4.5.0.dev0+19f172cb'; >>> H = qutip.sigmaz() + qutip.sigmax(); >>> psi = qutip.ket('0'); >>> tlist = np.linspace(0,10, 200); >>> p0 = qutip.ket2dm(psi); >>> res1 = qutip.mesolve(H, psi, tlist, e_ops=[p0]); >>> len(res1.states) # should be 0; 0; >>> len(res1.expect) # should be 1; 1; >>>; >>> len(res2.states) # should be 200; 200; >>> len(res2.expect) # should be 0; 0; >>> res3 = qutip.mesolve(H, psi, tlist, e_ops=[p0]); >>> len(res3.states) # should be 0 (same as res1); 200; >>> len(res3.expect) # should be 1; 1; ~~~; In `res3`, there should be no stored `states`, as I'm requesting expectation values. The problem is due to the common gotcha of [mutable default arguments](https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments) in the definition of of e.g. `mesolve`:; ~~~; def mesolve(H, rho0, tlist, c_ops=[], e_ops=[], args={}, options=Options(),; progress_bar=BaseProgressBar(), _safe_mode=True); ~~~; What happens is that the default `options` get instantiated once when `qutip` is imported. In the example above `res2 = qutip.mesolve(H, psi, tlist)` will then internally set `options.store_states = True`, and this value will still be there for `res3 = qutip.mesolve(H, psi, tlist, e_ops=[p0])`. Also, `c_ops`, `e_ops`, `args`, and `progress_bar` are all mutable in this definition, which could cause more problems. The correct thing to do is to initialize with `None` and set the mutable defaults in the body of the function. I can prepare a pull request for this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1061:922,guid,guide,922,https://qutip.org,https://github.com/qutip/qutip/issues/1061,1,['guid'],['guide']
Usability,"There's a [StackOverflow](http://stackoverflow.com/a/11887885/267841) response that explains the different `distutils.version` parsers. [PEP 440](http://legacy.python.org/dev/peps/pep-0440/) may also be of interest, as it gives a simple grammar for allowable Python version strings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/207#issuecomment-50951305:230,simpl,simple,230,https://qutip.org,https://github.com/qutip/qutip/issues/207#issuecomment-50951305,1,['simpl'],['simple']
Usability,"There's no link, just bad luck. This won't prevent merge - the tests clearly show your change is fine. Unfortunately our test suite isn't perfect, and sometimes it tries to integrate an insanely stiff system or something like that by accident.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050:69,clear,clearly,69,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050,1,['clear'],['clearly']
Usability,"These could be my final modifications before pushing this if all is smooth.; There are some other things that it would be nice to include but it’s best; to wait for the next round as this is already quite a complete library. Shortly I will also upload a bunch of notebooks in my folder with different; physical models studied there and I would be happy to frame them in the; best shape for qutip examples / tutorials if they are not already ok. Some state definitions overlap with state definitions in qutip.states, here; using this new Dicke basis. For the sake of simplicity we thought for now; that it would be best to keep these states bundled in the Piqs model.; Thanks. Il giorno lun 5 mar 2018 alle 19:07 Alexander Pitchford <; notifications@github.com> ha scritto:. > Also, all tests are failing. The one I checked showed:; >; > ImportError: No module named dicke; >; > I assume that this will affect all the builds; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#issuecomment-370370268>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AN5ffN6PK_jI4M8IgYNWBk3qKS4OXCtMks5tbQ5ugaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370377840:566,simpl,simplicity,566,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370377840,1,['simpl'],['simplicity']
Usability,This PR also includes fixes and code simplifications in qutip.cy.codegen.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/153:37,simpl,simplifications,37,https://qutip.org,https://github.com/qutip/qutip/pull/153,1,['simpl'],['simplifications']
Usability,"This PR introduces a new metric, unitarity, based on [work with Wallman, Harper and Flammia](https://scirate.com/arxiv/1503.07865). In that work, we show that this metric is useful for discriminating between coherent and incoherence noise. As such, I hope that contributing an implementation of our new metric to QuTiP will be of use, especially for comparison to experimental data from randomized benchmarking. While it still needs some more documentation and test cases, I wanted to open the PR now to get some initial feedback.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/357:521,feedback,feedback,521,https://qutip.org,https://github.com/qutip/qutip/pull/357,1,['feedback'],['feedback']
Usability,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:56,simpl,simply,56,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['simpl'],['simply']
Usability,"This PR makes `Qobj` a callable, in keeping with the proposed semantics discussed in #475. Hopefully, this should make it easier for newcomers and experienced users alike to use the superoperator functionality by removing the need to use `operator_to_vector` and `vector_to_operator` in simple cases.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/488:287,simpl,simple,287,https://qutip.org,https://github.com/qutip/qutip/pull/488,1,['simpl'],['simple']
Usability,"This PR starts work on fixing #388 by splitting out much of the logic handling lists of dims into a new module, `dims_utils`, and providing a new function that converts between indices into `Qobj.dims` and tensor indices (as used by `np.reshape`). While this PR is not yet done, I wanted to make a PR for the fixes early to solicit feedback.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/389:332,feedback,feedback,332,https://qutip.org,https://github.com/qutip/qutip/pull/389,1,['feedback'],['feedback']
Usability,"This appears to already be the document behaviour, see https://qutip.org/docs/latest/apidoc/functions.html#qutip.correlation.correlation_2op_2t:. > tlist: array_like; > list of times for t. tlist must be positive and contain the element 0. **When taking steady-steady; > correlations only one tlist value is necessary, i.e. when t → ∞; here tlist is automatically set, ignoring user input.**. Perhaps the documentation could be made more clear, but I don't think we should change the behaviour without a compelling reason since other QuTiP users may rely on it, and it seems sensible to return only a single result in the steady state case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857615073:438,clear,clear,438,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857615073,1,['clear'],['clear']
Usability,"This branch adds support for `rho0` argument to `mesolve` being a superoperator, to resolve #384. The functionality has been added to all the different mesolvers (but not the sesolvers). Unit tests are added to tests/test_mesolve.py in a new class, `TestMESolveSuperInit`. There are tests for all the different mesolvers, and the result with `rho0` as a density matrix is compared to the result for `rho0` being the identity super-operator, by comparing the fidelity of the resulting states in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:872,simpl,simple,872,https://qutip.org,https://github.com/qutip/qutip/pull/404,1,['simpl'],['simple']
Usability,"This can - see e.g. Numpy that uses the same licence. #1405 would add its additional copyright to the top of the file. This is actually _more_ useful in that case - it's far clearer that that code is under different licence conditions. That said, I'm really not certain about accepting #1405 in its current form. It's not using the data-layer correctly at all, and if we were to include it, we'd really want to do something like that in a more structured way in core QuTiP. Really it should be a properly dispatched implementation of `einsum`, but I think this should come in as part of a much larger discussion on how to handle tensor networks completely; to have it be nice and ergonomic in all cases, I think this will come in at the same time or after the introduction of new dimensions objects. I'm also very wary of introducing code to QuTiP which is licensed by a different holder. I can only imagine that that will really give us problems down the line - how long would NASA own the copyright on that code, for example? Could we modify it? After how many modifications is it no longer NASA's? We wouldn't have control over anything like that, and I think it's probably more hassle than it's worth on our side.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864022506:174,clear,clearer,174,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864022506,1,['clear'],['clearer']
Usability,"This code https://gist.github.com/nathanshammah/f96f6c1db5c323243a4729467cb7351f; Also, let me mention that the progress bar was giving some errors in qutip 4.3.1 and now it does not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1024#issuecomment-503669133:112,progress bar,progress bar,112,https://qutip.org,https://github.com/qutip/qutip/pull/1024#issuecomment-503669133,1,['progress bar'],['progress bar']
Usability,"This code produces an animation of the Bloch sphere vector evolution. I have implemented a rotating frame approximation as defined by H. The goal is to model T1 and T2 decay. I am still experimenting with different gamma_phi and gamma_minus values, but right now they're big enough to have a visible effect over the 10^-7 time scale that's being plotted. Right now, I am only plotting state_z_plus so I can focus on the T1 decay from 1 to -1. However, as the animation and graph indicate, it seems to stop short of -1 and I don't see why that should be happening. I appreciate any feedback. %matplotlib inline; import matplotlib.pyplot as plt; import numpy as np; import qutip as q; import cmath; import matplotlib as mpl; from mpl_toolkits.mplot3d import Axes3D. rc_dict = {; ""figure.subplot.bottom"": 0.11,; ""figure.subplot.hspace"": 0.2,; ""figure.subplot.left"": 0.125,; ""figure.subplot.right"": 0.9,; ""figure.subplot.top"": 0.88,; ""figure.subplot.wspace"": 0.2,; ""figure.figsize"":(10,10/1.61),; ""axes.grid"": True,; ""text.usetex"": True,; ""grid.linestyle"": "":"",; ""grid.color"": ""black"", #; ""legend.fontsize"": 20,; ""lines.linewidth"": 2.5,; ""axes.linewidth"": 1.5,; ""font.family"": [""serif""],; ""font.sans-serif"": ""Times New Roman Bold"",; ""font.size"":26,; }; plt.rcParams.update(rc_dict). qutip_options = q.Odeoptions(; store_states=True,; nsteps=20000000; ); si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); sp, sm=q.sigmap(), q.sigmam(); state_z_plus=q.basis(2,0); state_z_minus=q.basis(2,1); state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - q.basis(2,1)); state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j* q.basis(2,1)); state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j* q.basis(2,1)). h = 6.62607015e-34; b = 0.1786195317554453 #magnetic field; b_AC = 3.572390635108906e-05 #oscillating magnetic field; g = 2 #g-factor; u = 9.274E-24 #bohr magneton; w = g*u*b/h #omega ; w0 = 5e9 # omega0 is the rotating frame frequency; prin",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418:581,feedback,feedback,581,https://qutip.org,https://github.com/qutip/qutip/issues/1418,1,['feedback'],['feedback']
Usability,"This error comes from the integration algorithm.; Take a differential equation like dy/dt = -i*y.; With a simple method like euler: ; y(t+dt) = y(t) + f' dt = y(1-i*dt); So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.; The default method we use is ""adams"" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708:106,simpl,simple,106,https://qutip.org,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708,1,['simpl'],['simple']
Usability,This extension simplifies copying code blocks from examples in rst files then hosted on html page.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1536:15,simpl,simplifies,15,https://qutip.org,https://github.com/qutip/qutip/issues/1536,1,['simpl'],['simplifies']
Usability,This fails because time only contain `0.5`. ; You probably meant `time.append(0.5*i)`. The error message is a catch-all for failure in scipy solver and certainly not clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905:166,clear,clear,166,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905,1,['clear'],['clear']
Usability,"This feature starts work towards implementing diamond norms between quantum channels by providing Stinespring dilations of `type=""super""` Qobjs. This requires generalizing the current `to_kraus` feature, since the left and right Kraus operators are the same only for CP maps, whereas the arguments to diamond norms are very often not CP (in particular, will often be a difference, || \Lambda_1 - \Lambda_2 ||_\diamond). The pull request is currently in an incomplete state, so as to solicit feedback before solidifying the design. The docstrings are missing or are incomplete, Python 3 compatibility has not yet been tested, and I still need to make unit tests. Most importantly, the `dims` attribute of the input Qobj is not yet preserved, in lieu of solving #331.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/332:491,feedback,feedback,491,https://qutip.org,https://github.com/qutip/qutip/pull/332,1,['feedback'],['feedback']
Usability,"This file has been added and removed a few times, but GitHub likes it if; we have it. The main contributing guidelines remain in the actual; documentation, so this just replicates the readme and points to the main; version. I think the UnitaryHack guidelines say we should have it, too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1549:108,guid,guidelines,108,https://qutip.org,https://github.com/qutip/qutip/pull/1549,2,['guid'],['guidelines']
Usability,"This fixes an incompatibility between the current version of QuTiP and the current version of matplotlib. When plotting the Bloch sphere, the call to Bloch.show() produces a run-time error because the Arrow3D class does not implement the method do_3d_projection. This method returns a sort key to matlotlib for sorting artists. This fix adds the method, simply returning a value of 1. The assumption here is that there is only one artist, or that the sort order does not matter. This PR also modifies the conventions for the viewing angles specified in the view attribute of the Bloch and Bloch3d classes, rotating them by a quarter of a turn. See prior PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1824:354,simpl,simply,354,https://qutip.org,https://github.com/qutip/qutip/pull/1824,1,['simpl'],['simply']
Usability,"This is a good, apparently simple issue to address within the upcoming GSOC project on `qip`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/819#issuecomment-489420169:27,simpl,simple,27,https://qutip.org,https://github.com/qutip/qutip/issues/819#issuecomment-489420169,1,['simpl'],['simple']
Usability,"This is a possibility.. but I think we might be heading into a big mess if we are to autodetect terminal capabilities and different kinds of environment. Whatever we come up with might break if the behavior of any of environments change, and it might be time consuming to maintain. I think I would rather have a simple progressbar that works ok everywhere as default, and if a user wants to use something more fancy it would be easy to do that using the progress_bar keyword argument.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63399345:312,simpl,simple,312,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63399345,1,['simpl'],['simple']
Usability,"This is a pretty simple addition that does not affect any other part of the library, so I am marking merge ready.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/406#issuecomment-165182413:17,simpl,simple,17,https://qutip.org,https://github.com/qutip/qutip/pull/406#issuecomment-165182413,1,['simpl'],['simple']
Usability,This is a pretty simple fix.; Please can someone check and merge.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/852#issuecomment-381172076:17,simpl,simple,17,https://qutip.org,https://github.com/qutip/qutip/pull/852#issuecomment-381172076,1,['simpl'],['simple']
Usability,"This is a proof of principle and work in progress, demonstrating that parallelization in mcsolve can be simplified significantly by using qutip.parallel.parallel_map.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276:104,simpl,simplified,104,https://qutip.org,https://github.com/qutip/qutip/pull/276,1,['simpl'],['simplified']
Usability,"This is a style question. It is generally considered better python style to write code as explicit as possible, as explained for example [here](http://docs.python-guide.org/en/latest/writing/style/) in The Hitchhiker's guide to python. Now,. ```; mycomposition = composite(super,spre(O)*spost(O.dag()); ```. is much more explicit (and hence better style in my opinion), than. ```; mycomposition = composite(super,O); ```. If I'm not very familiar with qutip and I am reading the latter as part of some code, I could equally well think it means a number of different things, whereas the first use-case leaves very little room for confusion. Maybe I'm being a bit pedantic now, for this particular example, but I think it's a good idea to have discussions on style in general, and long term the code will benefit from being explicit, and also letting the user handle exceptions as much as possible. Anyway, we can agree or disagree on style, but you raise an interesting point regarding `dims`. I have actually always found `dims` a bit ""user unfriendly"". Perhaps it would be fruitful to have a discussion about the future of the `Qobj` class at some point. Not saying this is something that should be changed soon, or even at all, and also not suggesting to have the discussion in this thread.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58068961:163,guid,guide,163,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58068961,2,['guid'],['guide']
Usability,This is an extension of PR #141 which adds a simplified way of defining array based time-dependent hamiltonians and collapse operators.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/162:45,simpl,simplified,45,https://qutip.org,https://github.com/qutip/qutip/pull/162,1,['simpl'],['simplified']
Usability,This is because of the automatic tidy up of any matrix entries smaller than 1.e-12. You can turn it off by ``qutip.settings.auto_tidyup=False``. Or set this threshold to a different number (http://qutip.org/docs/latest/guide/guide-settings.html). This behaviour does seem a bit confusing though...,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1247#issuecomment-623299478:219,guid,guide,219,https://qutip.org,https://github.com/qutip/qutip/issues/1247#issuecomment-623299478,2,['guid'],"['guide', 'guide-settings']"
Usability,This is post for discussion over whether it might be beneficial to switch from `nose` to another unit testing software. . - QuTiP is using nose for unit testing. A [disclaimer](https://nose.readthedocs.io/en/latest/) on that project homepage warns that nose might not be maintained in the future. . - [`nose2`](https://nose2.readthedocs.io/en/latest/differences.html) is the successor to `nose`. It is actively maintained. There are some [differences](https://nose2.readthedocs.io/en/latest/differences.html). . - [pytest](https://pytest.readthedocs.io/en/latest/) is another open-source solution. By comparing [nose2](https://github.com/nose-devs/nose2/graphs/contributors?from=2010-08-01&to=2019-02-27&type=a) and [pytest](https://github.com/pytest-dev/pytest/graphs/contributors?from=2009-04-05&to=2019-02-27&type=a) activity it seems that the latter has grown and is actively updated. . I wonder whether it would make sense to migrate to a more popular (possibly more robust?) software and how much work this would mean. Other implications are not clear to me at this moment.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/958:1052,clear,clear,1052,https://qutip.org,https://github.com/qutip/qutip/issues/958,1,['clear'],['clear']
Usability,"This is something I can do or help someone with guidance. We simply need to do the following: ; - add intersphinx as extension in the `conf.py` file; - find the functions / objects we use from other libraries and add to `conf.py` such libraries; - change the cited functions classes with the correct reference, e.g. ```:class:`qiskit.QuantumCircuit` ```; The `krotov` library by @goerz shows how to do it, see [here](https://github.com/qucontrol/krotov/blob/0e8a4dbe81bd3986dbc5c4464d49131727fd57ef/docs/conf.py). ; The tilde `~` can be used to cut down the prefix of the cited module/function/class/method, e.g., from ```:class:`qiskit.QuantumCircuit` ``` to ```:class:`~qiskit.QuantumCircuit` ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1528#issuecomment-619395402:48,guid,guidance,48,https://qutip.org,https://github.com/qutip/qutip/issues/1528#issuecomment-619395402,2,"['guid', 'simpl']","['guidance', 'simply']"
Usability,"This is the initial pull request for a subpackage for non-Markovian solvers, called `nonmarkov`. This idea was mentioned in issue #384. The subpackage now includes two modules, with two quite different non-Markov solvers:. `transfertensormethod`: This module is an implementation of the ""Transfer Tensor Method"" (TTM) introduced by Cerrillo and Cao in [Phys. Rev. Lett 112, 110401 (2014)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.112.110401) ([arXiv link](http://arxiv.org/abs/1307.7743)). TTM is a completely general purpose approach to non-Markovian problems. It takes as input a collection of precomputed dynamical maps for a list of intial ""learning times"", and then tries to extrapolate the non-Markovian dynamics to larger times. `memorycascade`: This module implements the method introduced in [Phys. Rev. Lett 115, 060402 (2015)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.115.060402) ([arXiv link](http://arxiv.org/abs/1502.06959)) to integrate the dynamics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:661,learn,learning,661,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['learn'],['learning']
Usability,"This is the same PR as #1328, but resubmitted so the commit history and files changed are simplified after the merging of #1296.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-665737386:90,simpl,simplified,90,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-665737386,1,['simpl'],['simplified']
Usability,"This issue has a two-fold interest: decreasing test time in general and expand the platforms through which QuTiP is available. . What is the reason it takes so long on Nix? QuTiP, in the [latest PR](https://travis-ci.org/qutip/qutip/builds/628865624?utm_source=github_status&utm_medium=notification), takes on average 20 minutes to run its tests on a given platform. Much of this I think is due to the Cython configurations, indeed the no-cython option takes only 13 minutes. My first suggestion would be to try without Cython if things speed up, from those requirements (@Ericgig set that up and I am not knowledgeable about it). . From your PR on `nixpkgs` do you build on Travis CI or a similar cloud? If you could give a list of time taken by the different tests that would help. . The idea of a subset of tests is interesting (essential tests vs. thorough tests), in general; for example thorough tests could be done only in production and a lighter version could be called with `qutip.testing.run()`. Although, in specific, it is not clear to me how to triage which tests to skip. I would be glad to have the others opinion on this too (pinged them as assignees).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700:1040,clear,clear,1040,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700,1,['clear'],['clear']
Usability,"This issue is open since 2015 and no one did anything about it mostly because there are no use case for adding list support for most of those function and removing them from `qeye` may break something. What I would see as an improvement: if `N` could be the dimension of the resulting object.; `qeye(dims).dims = [dims,dims]`. This would be clear for `qeye` and `qzero` (`zero_oper` does not exist anymore), since only the dimension of the resulting object is affected. For `create`, etc. hiding the tensor product would be hiding the physic, so it would be better to leave them as is. For `basis`, this could also be nice. For the rule: `basis([2,2], [0, 1])` is ok, but `basis(2, [0, 1])` is confusing, I would not accept this format.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/363#issuecomment-575770270:341,clear,clear,341,https://qutip.org,https://github.com/qutip/qutip/issues/363#issuecomment-575770270,1,['clear'],['clear']
Usability,"This looks great and I think it will help a lot in cleanly implementing more complex solvers light the HEOMSolver. I have two suggestions for future improvements:. - I'd like to see `.options = ...` become a method because it now modifies the existing integrator and `.options(...)` would both make that clearer and more flexible. E.g. with a method we could allow both `.options(new_options)` to completely override the options and `.options(key=new_value)` to update just one setting. - The first call to `result.add(t, X)` uses `X = state0` but state0 could be almost anything the user passed in (and not necessarily the canonical form returned by `_restore_state`). It would be better if either there was a separate method to override to convert `state0` into the canonical form, or `result.add(t, X)` was called initially with `X = _restore_state(_data0)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616:304,clear,clearer,304,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616,1,['clear'],['clearer']
Usability,"This simplifies some of the long if/else blocks in the MKL module, making it simpler to parse. No logic should actually have changed. Everything is at most 10 cyclomatic complexity now, but I don't think that corresponds exactly to CodeClimate's metrics, so let's see. **Changelog**: simplify logic in `_mkl` module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1576:5,simpl,simplifies,5,https://qutip.org,https://github.com/qutip/qutip/pull/1576,3,['simpl'],"['simpler', 'simplifies', 'simplify']"
Usability,"This took longer than anticipated because of a bunch of knock-on nasty Cython problems, and I struggled to get OpenMP running locally on macOS ([but I've got it now](https://www.binhbar.com/posts/2020/06/compiling-openmp-libraries-on-macos/)). Tag: @Ericgig, @ajgpitch. ---. Separate out what will become the ""core"" of qutip into its own subpackage. This package is intended to have most of its public symbols re-imported into the global package namespace. There should be no substantive changes to any actual worker code in this large commit, just what is necessary to carve out a major entangled part of the core library. Some files currently in core may be moved out in a future version (e.g. graph, metrics, semidefinite), but right now they are too entangled with `Qobj` or other true-core parts, and to remove them now would require too much substantive change to the code, which would be difficult to review in this commit. Major changes required as part of this:; - module-level imports (e.g. `from qutip.qobj import Qobj`) are replaced with simple ones from the namespace (e.g. `from qutip import Qobj`). While inside the `core` package, imports are kept as module-specific, largely to support the mess of circular imports present in qutip at the more.; - .pxi files are no longer recommended as the way to share code between Cython files, so these have been converted into proper Cython modules and added to the distribution.; - collection of Cython extension components in `setup.py` is consolidated to support them no longer all existing in the same place. As the data layer is fleshed out, likely there will be even more Cython locations present.; - the test for OpenMP in `__init__.py` had to be made more indirect via importlib to avoid causing a full import of `qutip.core`, which would in turn cause Qobj and other parts to be imported. These components required `__init__.py` to have discovered whether OpenMP existed already before they were imported, causing false negatives.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282:1050,simpl,simple,1050,https://qutip.org,https://github.com/qutip/qutip/pull/1282,1,['simpl'],['simple']
Usability,"This won't be easy to fix, if the compilation is in the task, `parfor` cannot know about it to wait for it.; The simplest would be to have only the main process able to compile. This code will still raise an error, but the solution would be in the error message.; Otherwise communication between process would be needed and this can get tricky. Also `parfor` will be removed. It says in its [documentation](https://qutip.org/docs/latest/apidoc/functions.html#qutip.parallel.parfor) to use `parallel_map` instead since v3.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433:113,simpl,simplest,113,https://qutip.org,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433,1,['simpl'],['simplest']
Usability,Time dynamics documentation doesn't clear plots and so repeats them.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2007:36,clear,clear,36,https://qutip.org,https://github.com/qutip/qutip/issues/2007,1,['clear'],['clear']
Usability,"To be honest, I'm not 100% sure myself since it's just turned into a string and cythonized anyways. When it was initially added, I had assumed the purpose was because occasionally a function doesn't work well in the string format or is slow in the list-function format. Though I'm working on adding time-dependence to the Bloch Redfield solver by using piece-wise constant Liouvillians and there I guess the format makes a bit more sense intuitively, PR #525.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-242163512:438,intuit,intuitively,438,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-242163512,1,['intuit'],['intuitively']
Usability,"To generate a random ket and have it be in the tensor product space of 3 qubits I would use. ket = qutip.rand_ket(8, dims=[[2, 2, 2], [1, 1, 1]]); so to have the `dims` form I would get by actually taking the tensor product of three 1-qubit kets.; However this will fail due to the check performed of [L652](https://github.com/qutip/qutip/blob/master/qutip/random_objects.py#L652) of `random_objects.py`:. if not isinstance(dims, list) or isinstance(dims[0], list):; Did I understood wrong how the `dims` parameter of `rand_ket` is supposed to work? or is there a simple typo in the above line and it was instead supposed to be something like:. if not (isinstance(dims, list) or isinstance(dims[0], list)):; ?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/617:564,simpl,simple,564,https://qutip.org,https://github.com/qutip/qutip/issues/617,1,['simpl'],['simple']
Usability,"To get more familiar with bits of the internals, I'm going through and migrating the tests to `pytest`. While I'm at it, I'm also fixing PEP8 issues in the testing files, since CodeClimate will moan at me if I don't. I'm basically learning how to use `pytest` and how to code as part of an organisation as I go, so please feel free to correct me if I'm doing something wrong. I'll leave this PR as in draft mode until I've made it through more of the testing files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1164:231,learn,learning,231,https://qutip.org,https://github.com/qutip/qutip/pull/1164,1,['learn'],['learning']
Usability,"To try keep things simple for me, I only have the base environment which VS code activates before any code is run.; The text I have in that box is `Python 3.8.8 64-bit (conda)`. I realise I'm missing the `('base':conda)` as per https://code.visualstudio.com/docs/python/python-tutorial however I havent yet found why this is the case. I am continuing to look as I feel this might be the crux of the problem. As another work around I found that (after updating matplotlib to my current version) I can get some of the expected behaviour from b.show() within VS code by adding the `plt.pause(interval)` command after b.show() (as descibed previously however now I can actually render someting), where the interval is how many seconds I want to view the Bloch sphere for. The b.save() function also works as expected so I can use that as a workaround for now at least. Some more odd behaviour - likely caused by all the updating an reinstalling trying to fix things - is that the plt.show() no longer works as described before. Not a massive loss as I've gained other functionality and I am still able to render other graphs (so matplotlib isnt broken) and the bare 3d axes have stopped appearing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-883527200:19,simpl,simple,19,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-883527200,2,"['pause', 'simpl']","['pause', 'simple']"
Usability,"Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ERROR; td_brmesolve: time-dependent a_ops ... ERROR; td_brmesolve: time-dependent a_ops tuple of strings ... ERROR; td_brmesolve: time-dependent a_ops tuple interp ... ERROR; td_brmesolve: time-dependent a_ops & c_ops interp ... ERROR; td_brmesolve: non-Hermitian e_ops check ... ERROR; td_brmesolve: states check ... ERROR; td_brmesolve: split ops #1 ... ERROR; td_brmesolve: split ops #2 ... ERROR; td_brmesolve: split ops, Cubic_Spline td-terms ... ERROR; td_brmesolve: split ops, multiple ... ERROR; td_brmesolve: Hamiltonian args ... ERROR; BR Tools : zheevr ...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197:504,simpl,simple,504,https://qutip.org,https://github.com/qutip/qutip/issues/1197,1,['simpl'],['simple']
Usability,"Two small bugs appeared in floquet steadystate in v5, this is a quick patch. **Description**; Two bugs:. 1) Small minus sign error in one of the terms (comparing to v4.7 and what is written in the old toolbox guide). 2) Some kind of data copying confusion with the S and T operators when updating their data contents with the results. Just initiating these two separately seems to fix it. other minor fix: updated the link to the toolbox guide. Some other minor niggles that I didn't fix:; - some of the optional solver methods dont work (seem not to support square right hand sides in '_data.solve()'. I didn't dig much on fixing these though. - the 'splu' method fails for a couple of reasons. I can get it to work by removing the choice of warnings as errors in 'solve.py' (which make it fail in other instances as well i suppose, like with normal steadystate()), making sure the solver option is not passed to steadystate(), and making sure that S and T are always converted back to CSR() after being updated in the iterative bit (in `steadystate_floquet()' they get returned as dense from _data.solve). I did not include those changes here though as the docstrings dont actually indicate support for splu anyway, so perhaps not needed. I am marking this as draft at the moment as I also want to update the test to be sensitive to these bugs (its a bit too coarse at the moment), and double check that the results from this solver are now correct. **Related issues or PRs**; fix #2386",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2393:209,guid,guide,209,https://qutip.org,https://github.com/qutip/qutip/pull/2393,2,['guid'],['guide']
Usability,Undo wheels,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/376:0,Undo,Undo,0,https://qutip.org,https://github.com/qutip/qutip/pull/376,1,['Undo'],['Undo']
Usability,Update `guide-settings` with v5's options,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2025:8,guid,guide-settings,8,https://qutip.org,https://github.com/qutip/qutip/pull/2025,1,['guid'],['guide-settings']
Usability,Update guide-random/basic for v5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2024:7,guid,guide-random,7,https://qutip.org,https://github.com/qutip/qutip/pull/2024,1,['guid'],['guide-random']
Usability,"Update the ""Stochastic Solver"" page on the Users Guide",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706:49,Guid,Guide,49,https://qutip.org,https://github.com/qutip/qutip/issues/1706,1,['Guid'],['Guide']
Usability,Update the release guide to use readthedocs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2399:19,guid,guide,19,https://qutip.org,https://github.com/qutip/qutip/pull/2399,1,['guid'],['guide']
Usability,Update user guide content of documentation to QuTiP 5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1898:12,guid,guide,12,https://qutip.org,https://github.com/qutip/qutip/issues/1898,1,['guid'],['guide']
Usability,"Updates:; - I have switched the order of `state` and `op`/`ops`. ; - There is now an optional `targets` arguments on each of the measurement functions to enable applying `ops` on particular; `qubits` although this is inherently delicate, especially when dealing with non-qubit type dimensions. Right now, it's restricted to `qubit` style expansions (in terms of dimensions). This indicated in the docstring. I will add some more information on how to use this in the user guide but I think it works best for more simpler use cases !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-648548980:472,guid,guide,472,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-648548980,2,"['guid', 'simpl']","['guide', 'simpler']"
Usability,"UserWarning: Multiplying superoperators with different representations; issued during tests.; @cgranade I think you implemented this part. Is this something to concern; I mainly raised it as I have spent my evening removing all the other warnings from the tests, so would be nice to clear them all",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/433:283,clear,clear,283,https://qutip.org,https://github.com/qutip/qutip/issues/433,1,['clear'],['clear']
Usability,"Using Time dependent Hamiltonian in mcsolve and mesolve product different result for expectation value for `sigmay()`. It seems to work well for expectation value for `sigmax()` or `sigmaz()`. I wonder if dealing with complex number leads to this or there is another issue. This is a simple code illustrating the problem. ```; from qutip import *; from scipy import *; from pylab import*; #sigmay problem. psi0 = (basis(2,0) + basis(2,1)).unit() ; rho0 = psi0*psi0.dag(). H0 = 0*sigmax(); H1 = sigmax(); print(psi0); print(H0*psi0); H2 = sigmaz(); def H1_coeff(t,args):; return t-1. def H2_coeff(t,args):; return -t. h_t = [H0,[H1, H1_coeff],; [H2, H2_coeff]]. ntraj = 500. tlist = linspace(0, 3, 100); medata = mesolve(h_t, rho0, tlist, [], [sigmay()], args = {}); mcdata = mcsolve(h_t, psi0, tlist, [], [sigmay()], ntraj = ntraj, args = {}). fig,axes = subplots(1,1,figsize=(12,6)); axes.plot(mcdata.expect[0], color=""green"", alpha =0.6, label = ""mcsolve""); axes.plot(medata.expect[0], color=""blue"", alpha =0.6, label = ""mesolve""); axes.set_xlabel(r'$\frac{t}{t_f}$'); axes.set_ylabel('Expectation value'); axes.legend((""mcsolve"", ""mesolve"")). show(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/490:284,simpl,simple,284,https://qutip.org,https://github.com/qutip/qutip/issues/490,1,['simpl'],['simple']
Usability,"We can in theory drop that requirement for users - it was there in the immediate aftermath of the Numpy 1.20 release, which broke C-ABI compatibility with previous versions, and we had a couple of problems with people building against Numpy 1.20 but trying to run against a prior version. Our CI and release versions will still all need to be built against Numpy 1.16 (or our minimum supported runtime Numpy) as the lowest common denominator until we drop support for all Numpy releases before 1.20, but we enforce that in our build pipelines anyway. Just to be clear (though I think you knew this):. > Can qutip be updated to run with current versions of Numpy?. QuTiP already runs correctly against Numpy 1.20 and Numpy 1.21, and its runtime requirements on Numpy are uncapped. It's just building from source that'll fail, and that was originally a sort of ""fail-safe"" mechanism. Also `pip install -e .` should automatically do build isolation for you, including installing all the build requirements into a temporary virtual environment, so it should have just worked here. Calling `setup.py develop` directly is kind of out-dated now, though it can still be useful if you're planning on doing Cython development; `pip`'s isolation actually usually means that the Cython compiler can't detect changes any more, so it always needs to rebuild everything. `setup.py develop`, because of its much lower-level status, leaves the source and extension-library files well enough untouched that it can do incremental compilation. If you're not doing Cython development (only Python), `pip install -e .` is much better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497:562,clear,clear,562,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497,1,['clear'],['clear']
Usability,We can potentially work-around this behavior by including a plt.pause() statement right after the show statement in the bloch.show() code. It is a hacky way to display the figure and it will keep displaying as long as the code runs. This will ensure that you do not need to use plt.show().,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1182#issuecomment-593700465:64,pause,pause,64,https://qutip.org,https://github.com/qutip/qutip/issues/1182#issuecomment-593700465,1,['pause'],['pause']
Usability,"We don't need to add `br_solver` as a correlation option, I think we can already do it by passing a bloch redfield tensor as `H` and using `solver=""me""`. ; The plan for v5 is a simple cleaning as it still calls `cython_build_cleanup` and `rhs_clear` which don't do anything anymore.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/884#issuecomment-983975046:177,simpl,simple,177,https://qutip.org,https://github.com/qutip/qutip/pull/884#issuecomment-983975046,1,['simpl'],['simple']
Usability,"We get warnings when compiling using the mingw32 compiler under windows.; ```; ""unknown conversion type 'z' in format""; ```; The warnings only seem to occur during the tests and not the build_ext, so there may be something we can do with CFLAGS. ; I have done quite a lot of reading around and it seems many projects suffer from this. There did not seem to be a clear resolution, other than to change the C code. We don't seem to use the 'z' in any of our source, but it is found in all the so files, so I guess it is used in one of the dependencies, and hence I don't think we can take that approach.; The tests still seem to pass, so I am putting it down as a won't fix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/597:362,clear,clear,362,https://qutip.org,https://github.com/qutip/qutip/issues/597,1,['clear'],['clear']
Usability,"We have made some progress! But I also have some questions for the experts here.; * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?; * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; * The _run_one_traj function now exists 3 times, with practically identical code:; https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. Side note: due to a WSL bug, some of my commit timestamps are messed up. Because of that, some commits seem to be shown out of order here...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901:106,Guid,Guide,106,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901,2,"['Guid', 'guid']","['Guide', 'guide']"
Usability,We need to document more clearly what kind of spectrum spectrum_ss calculates and have more examples.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1515:25,clear,clearly,25,https://qutip.org,https://github.com/qutip/qutip/issues/1515,1,['clear'],['clearly']
Usability,"We now have apidoc entries, guide pages and tutorials for stochastic.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1518#issuecomment-2070160992:28,guid,guide,28,https://qutip.org,https://github.com/qutip/qutip/issues/1518#issuecomment-2070160992,1,['guid'],['guide']
Usability,"We probably shouldn't mutate the given `Options` object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. That said, if we're going to do something different to what the user requested we should at least emit a warning. There's also interplay with `store_final_state` here too; it's questionable technique to do `e_ops=None, store_final_state=True` with a `tlist` with more than two elements, but probably people who aren't familiar with `nsteps` will do something like that, and it seems a bit picky to prevent/warn on that when the intention seems clear. I think that the current behaviour doesn't take this case into account when falling back - it'll store all states, which in the 4.x branch is a fairly major time sink (but much much faster in 5.0). What behaviour would you expect for your use case? I'd probably do something like:; 1. if we change the `Options`, we have to clone it first to prevent leaking our mutations; 2. if we're not going to save anything, we should warn the user but then do it anyway - maybe their time-dependence functions leak state, and they're just doing something weird with that; 3. `store_final_state` should count as ""storing something"", so no need to set `store_states` if `store_final_states=True` and there are no `e_ops`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824:687,clear,clear,687,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824,1,['clear'],['clear']
Usability,Web-based progress bar.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255:10,progress bar,progress bar,10,https://qutip.org,https://github.com/qutip/qutip/pull/255,1,['progress bar'],['progress bar']
Usability,Well done @sarsid. Could you make sure that the documentation is still up to date? Adding something in the Users Guide about this would be very helpful.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1331#issuecomment-702203287:113,Guid,Guide,113,https://qutip.org,https://github.com/qutip/qutip/pull/1331#issuecomment-702203287,1,['Guid'],['Guide']
Usability,"Well it seems that you are using the OSX accelerate BLAS. It is just missing the libraries key in the dict. Simple fix, will do today. Thanks for finding this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/552#issuecomment-259703414:108,Simpl,Simple,108,https://qutip.org,https://github.com/qutip/qutip/issues/552#issuecomment-259703414,1,['Simpl'],['Simple']
Usability,"Well, I am using this for my code. Doesn't seem to be a very big change anyway as it doesn't affect existing code or introduce a high computational cost. (3 if's, a new list and a new item in an existing list). If others agree then I will open a PR. I am not a QIP expert myself, :). But, I am learning on the go. Btw, who wrote the qip module ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/614#issuecomment-270581597:294,learn,learning,294,https://qutip.org,https://github.com/qutip/qutip/issues/614#issuecomment-270581597,1,['learn'],['learning']
Usability,"Well, the new progress bar is still around if one wants to use it so I think this is the best we can do right now. So I'm merging this then.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/256#issuecomment-63596921:14,progress bar,progress bar,14,https://qutip.org,https://github.com/qutip/qutip/pull/256#issuecomment-63596921,1,['progress bar'],['progress bar']
Usability,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:645,learn,learning,645,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,1,['learn'],['learning']
Usability,"What if we rethink the approach from the beginning:. ```; QobjEvo([op, func], args={""state"": Solver.StateFeedback(default=psi0)}); QobjEvo([op, func], args={""e1"": SESolver.ExpectFeedback(e_op)}); QobjEvo([op, func], args={""state"": MESolver.StateFeedback(raw_data=True)}); QobjEvo([op, func], args={""collapse"": MCSolver.CollapseFeedback()}); QobjEvo([op, func], args={""W"": SMESolver.WeinerFeedback()}); ```; And we remove the `add_feedback` method. This makes clear that the feedback comes from the solver and used by the QobjEvo.; What is supported by which solver and what has the role to document it is clear. This has the bonus of removing the need for default in many case.; Also, since the feedback creation is a function call, we can add options such as the state basis for floquet or bloch-redfield.; Lastly, updating args can switch feedback on/off, could be useful to debug.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1839382709:459,clear,clear,459,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1839382709,5,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"What should we do with the qutip/examples directory? It contains a lot of old stuff which is not really maintained anymore, but there are still some useful tests examples there. The current situation is:. qutip/qutip/examples - official examples accessible through the GUI and used in the docs; qutip/qutip/tests - unit tests; qutip/notebooks - development tests and benchmarks; qutip/examples - no clear purpose and not well maintained. We need to think about what we want to do with the examples directory and what purpose these example scripts have. I'm inclined to getting rid of these examples in favor or more contextual development examples in notebook form stored in qutip/notebooks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/23:399,clear,clear,399,https://qutip.org,https://github.com/qutip/qutip/issues/23,1,['clear'],['clear']
Usability,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:143,clear,clearer,143,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,2,"['clear', 'simpl']","['clearer', 'simple']"
Usability,"When I follow the example to generate animation for bloch sphere plotting, i.e., page 120-122 from [this doc](http://qutip.org/downloads/4.2.0/QuTiP_4.2.pdf), I faced ; `'Axes3D' object is not iterable`; problem, which happens for the `save` function. > .../matplotlib/animation.py in save(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs); 1192 for anim in all_anim:; 1193 # Clear the initial frame; -> 1194 anim._init_draw(); 1195 for data in zip(*[a.new_saved_frame_seq() for a in all_anim]):; 1196 for anim, d in zip(all_anim, data):. > .../matplotlib/animation.py in _init_draw(self); 1755 raise RuntimeError('The init_func must return a '; 1756 'sequence of Artist objects.'); -> 1757 for a in self._drawn_artists:; 1758 a.set_animated(self._blit); 1759 self._save_seq = []. >TypeError: 'Axes3D' object is not iterable. My environment:. QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.14.1; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.2.0; Python Version: 3.5.2; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/836:426,Clear,Clear,426,https://qutip.org,https://github.com/qutip/qutip/issues/836,1,['Clear'],['Clear']
Usability,"When I run `ffmpeg -r 20 -b 1800 -i bloch_%01d.png bloch.mp4`; from the User Guide's [Generating Images for Animation; ](http://qutip.org/docs/4.1/guide/guide-bloch.html#generating-images-for-animation) section I get the following error:. ```; Option b (video bitrate (please use -b:v)) cannot be applied to input url %04d.png -- you are trying to apply an input option to an output file or vice versa. Move this option before the file it belongs to.; Error parsing options for input file bloch_%01d.png.; Error opening input files: Invalid argument; ```. What works for me instead is this:; `ffmpeg -r 20 -i bloch_%01d.png -pix_fmt yuv420p bloch.mp4`. Note: personally I print files as zeropadded 4-digit number, so I have %04d.png instead of bloch_%01d.png.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799:77,Guid,Guide,77,https://qutip.org,https://github.com/qutip/qutip/issues/799,3,"['Guid', 'guid']","['Guide', 'guide', 'guide-bloch']"
Usability,"When attempting to create (and then draw on) the Bloch sphere, the command b.show() as per the documentation (after doing the correct setup) does not display the Bloch sphere. Rather a matplotlib window appears for a fraction of a second before closing itself.; Using plt.pause() after the b.show() line allows this window to remain open however it is simply black with nothing rendered on it.; I am able to get a graph of the Bloch sphere by using the plt.show() command in place of b.show(). However this also brings up another window at the same time showing only a set of 3d axes. Here is my MWE. ```python; import qutip; import matplotlib.pyplot as plt. b = qutip.Bloch(). b.make_sphere(); b.render(). ```; This is the line I can replace with plt.show(); ```; b.show(); ```. As per the documentation I would expect b.show() to be the only command required to display the Bloch sphere. I have attempted to install correctly but I assume I am missing something still. My environment is:; QuTiP Version: 4.6.2; Numpy Version: 1.21.1; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.0.3; Python Version: 3.7.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616:272,pause,pause,272,https://qutip.org,https://github.com/qutip/qutip/issues/1616,2,"['pause', 'simpl']","['pause', 'simply']"
Usability,"When no options and no e_ops are given, the solver should store the states, otherwise nothing is done. Since the default value si `store_states=False`, the solver don't know that the value was explicitly given or the default. We should have `store_states=None` as the default. This allow us to respect an explicit False while keeping the expected behaviour when no options are given. I will make this change in the v5 solver (And make sure no Options are modified). `tlist` was never meant to control time dependence, it represent the time at which the solver look at the state (+ first and last times). I added array support as coefficient as a shortcut to Cubic_Spline and I used the already existing tlist, but this is clearly a limitation and in v5 they will be controlled independently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194:722,clear,clearly,722,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194,1,['clear'],['clearly']
Usability,"While we are at it, I have found another undocumented, untested ""feature"" is the solvers.; In `sesolve`, when H is a function and a Qobj is in args, it is replaced by it's data""; sesolve.py, 696:; ``` ; for key in args:; if isinstance(args[key], Qobj):; new_args[key] = args[key].data; ```; `mesolve` does a similar thing: (mesolve.py:889) ; ```; for key in args:; if isinstance(args[key], Qobj):; if isoper(args[key]):; new_args[key] = (; -1j * (spre(args[key]) - spost(args[key]))); ```; While this is probably not common, I don't see it being useful (at least without proper documentation).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/948:41,undo,undocumented,41,https://qutip.org,https://github.com/qutip/qutip/issues/948,1,['undo'],['undocumented']
Usability,"While you could probably make it work but manually updating the state at each times of `tlist` is certainly not a usage I planned for... If you could use `mesolve` instead of `mcsolve` it would be simpler:; ```; solver = MeSolver(...); solver.start(rho0, t0); for t in tlist[1:]:; rho_t = solver.step(t); solver.start(rho_t @ projection, t); ```. With `mcsolve`, if you use it like this, it would normalize the state at each step possibly breaking the montecarlo part of the evolution. The way I would do it is by making a child class overwriting the step of `McTrajectorySolver`:. ```; class MyMcTrajectorySolver(McTrajectorySolver):; def _step(self, t):; super()._step(t); _, raw_state = self._integrator.get_state() # state not normalized; new_state = _data.matmul(projector, state) # projector is a Data object: Qobj.data; self._integrator.set_state(t, new_state); return _data.mul(new_state, 1 / _data.norm.l2(new_state)). class MyMcSolver(McSolver):; _traj_solver_class = MyMcTrajectorySolver; ```; If done this way, you should be able to use the normal solver interface. This projection should be done once per call of `step` or per time in `tlist`, but I would confirm it before running simulation. `step` does not return the `collapse` part of the results. So if a collapse happen, it will not output it nor the time at which it happen. But the state evolution is done normally, collapse will happen as expected. To get them, you will need to fetch them with `solver.traj_solvers[i].collapse`. Feel free to comment on the new solver interface. If you think that something is missing or confusing, now is a good time to tell us. We should come back on this PR in April.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013:197,simpl,simpler,197,https://qutip.org,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013,1,['simpl'],['simpler']
Usability,"With this PR mesolve and mcsolve accept single operators as input for the collapse operator or the operator for which the expectation value is calculated. Internally, a list containing only that operator is constructed and passed on. I added test cases, by just copying a test that was already there and changing the input to a single operator for the collapse and expectation value respectively. For mcsolve the tests take quite some time, so a simpler test might be better. Any idea?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/5:446,simpl,simpler,446,https://qutip.org,https://github.com/qutip/qutip/pull/5,1,['simpl'],['simpler']
Usability,Work in progress:; - Refactor tensor so that it plays better with tensor products of superoperators (see PR #99); - Simplify and cleanup the code,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/100:116,Simpl,Simplify,116,https://qutip.org,https://github.com/qutip/qutip/pull/100,1,['Simpl'],['Simplify']
Usability,"Yeah, `qutip-qip` is a much easier build and installation process because you don't need to be concerned about compiler infrastructure, ABI compatibility or stuff like that. In addition in that particular test run, there were three individual calls to change the installed packages, which meant plenty of space for stuff to go wrong. In this case, I think it was a strange interaction between the old `.travis.yml` specifically installing `numpy` and all other dependencies from `conda-forge`, without the channel being in the defaults list. Since `conda uninstall` doesn't specify an additional channel, the dependency calculator considers `defaults` to be higher priority, so it sets various packages to arbitrary allowed ones from `defaults`, which with `openblas` installed like this meant numpy `1.14`. That's my guess at least - it's a pretty weird set up circumstances, but the new `.travis.yml` file that's already in `master` is far simpler about the build process.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609:942,simpl,simpler,942,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609,1,['simpl'],['simpler']
Usability,"Yeah, it's ready. It's not actually completely clear when `propagator` outperforms `mesolve`. In the future I will likely completely change the algorithm based on work done by @swhalen who has written a faster implementation..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-239598753:47,clear,clear,47,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-239598753,1,['clear'],['clear']
Usability,"Yeah, this is just one of those silly things caused by ImageMagick choosing a _very_ generic name and then getting burned (hence the swap to `magick`...). Probably the best thing to do is to try and run `convert` once at discovery and to see what happens. If you run `convert -version` on an IM6 install, does it output a string that looks like; > Version: ImageMagick 6.blahblahblah; or something similar?. If so, try this patch: [check_convert.txt](https://github.com/qutip/qutip/files/4397692/check_convert.txt). It rearranged the functions a little for a more logical order (I'll rebase the PR before merge), but the main change is that it now tests the output of `convert -version` to see if it contains the substring `imagemagick` (case insensitive). The reason to do this now is because if we allowed the error to propagate later, we'd have to check it every time and it would mean we'd have to pass through the ""special cases"" more frequently, and it would make the core logic more complex. Also, we _could_ catch a subprocess `CalledProcessError` later (say if one of the other commands were to fail for some reason) and re-raise our own, but to be honest I didn't want to over-engineer what ought to have been a relatively simple PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526:1233,simpl,simple,1233,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526,1,['simpl'],['simple']
Usability,Yes I think it is more intuitive to interpret the given vectors as vectors with cartesian coordinates. I just modified Bloch3d to behave in the same way.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/38#issuecomment-22305995:23,intuit,intuitive,23,https://qutip.org,https://github.com/qutip/qutip/pull/38#issuecomment-22305995,1,['intuit'],['intuitive']
Usability,"Yes there is nothing in the code for this right now, feel free to propose your solution. @CaineArdayfio, there is no official assignment. If, as a user, you see something that is missing, you can just propose a solution. In general, parts of Qutip that need some attention and nobody is working on:; - Documentation and notebooks are not always up to date.; - The lattice submodule is new and we have little feedback. It could be improved greatly in both easiness to use and versatility.; - Making it work better on windows.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/453#issuecomment-609449627:408,feedback,feedback,408,https://qutip.org,https://github.com/qutip/qutip/issues/453#issuecomment-609449627,1,['feedback'],['feedback']
Usability,"Yes, I could not get the functions in libcpp.complex to work with something simple like:; ```; cimport cython; from libcpp.complex cimport conj. def myconj(double complex a):; cdef double complex b. b = conj(a); return b; ```. however this did work:; ```; cimport cython; cdef extern from ""complex"":; double complex conj(double complex x). def myconj(double complex a):; cdef double complex b. b = conj(a); return b; ```. Might be something to do with the type conversion mentioned in:; http://stackoverflow.com/questions/36732779/complex-conversion-to-python-complex",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647#issuecomment-279524478:76,simpl,simple,76,https://qutip.org,https://github.com/qutip/qutip/issues/647#issuecomment-279524478,1,['simpl'],['simple']
Usability,"Yes, It's fine as a guideline. I've been discussing with some people a better physical example to highlight krylov strong points, but I'll do that as a follow up PR once the basic one is working.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1123535232:20,guid,guideline,20,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1123535232,1,['guid'],['guideline']
Usability,"Yes, but the documention is missing a table making the explication confusing:; http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-510894379:108,guid,guide,108,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-510894379,1,['guid'],['guide']
Usability,"Yes, it would be easier that way, master and dev.major split a while ago. The bloch.py file have not been touched at all so it should be simple.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1315#issuecomment-669995971:137,simpl,simple,137,https://qutip.org,https://github.com/qutip/qutip/pull/1315#issuecomment-669995971,1,['simpl'],['simple']
Usability,"Yes, something very simple would work, I guess. . ```; from numpy.testing import assert_,assert_almost_equal; assert_(molmer_sorensen(0)==tensor(qeye(2),qeye(2))); assert_almost_equal(molmer_sorensen(np.pi/2).full(),(np.array([[0.70710678+0.j, 0.+0.j,0. +0.j, 0.-0.70710678j],; [0. +0.j , 0.70710678+0.j,0.-0.70710678j, 0.+0.j],; [0. +0.j , 0. -0.70710678j,0.70710678+0.j, 0. +0.j],; [0.-0.70710678j, 0. +0.j , 0.+0.j , 0.70710678+0.j ]]))); ```; and something for N>3 if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1028#issuecomment-505109850:20,simpl,simple,20,https://qutip.org,https://github.com/qutip/qutip/pull/1028#issuecomment-505109850,1,['simpl'],['simple']
Usability,"Yes, the QT stuff is bit troublesome.. and it is not a core functionality in qutip. The about() and demos() does not do much harm, so deprecate them in next release we can drop them alltogether in the following release. The progressbar is a bigger problem, because (if I got this right) it is partly due to the event-loop tricks we need to do to get the qt progressbar to work we have problems with catching keyboardinterrupt properly in for example mcsolve, and this makes it difficult to abort a calculation cleanly. This is big problem in IPython notebooks, where one cannot hit Ctrl-C and Ctrl-Z until process is stopped.. Factoring the qt progressbar out of mcsolve should therefore be a priority, and the simplest way to do this would obviously be to drop the qt progressbar function completely... I'll add a note about this in the roadmap wiki and closing this issue now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/19#issuecomment-18917941:711,simpl,simplest,711,https://qutip.org,https://github.com/qutip/qutip/issues/19#issuecomment-18917941,1,['simpl'],['simplest']
Usability,"Yes, the operator is acting like it should. When working with ; oscillators, you need to truncate at some point, and so issues similar ; to the one you raise are part of the territory. However, if one wants ; to be self-consistent, then you start with truncated operators, and then ; build all other operators / states and whatnot from there. -P. > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 18:08; >; > OK, if it's intended then there's nothing to change in the code. But I ; > think it would be helpful to document this in a clearer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.e",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284923:546,clear,clearer,546,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284923,1,['clear'],['clearer']
Usability,"Yes, we will add a reference to the your paper with the TLS when I submit a; TLS notebook example.; I think I will just make a simple example for now. And then add the more; involved one that compares the RC method later. Thanks for the explanation on Matsubara terms (I might have to spelling to; correct :). I did not realise they were only referred to as such in the; DL spectral density. I will make some corrections now. On 10 March 2016 at 18:30, nwlambert notifications@github.com wrote:. > This looks great!; > ; > The references are sufficient I guess. We can add some more in the example; > notebook?; > ; > One minor terminology point in the explanation: for the Drude-Lorentz bath; > the correlation functions can be exactly analytically expressed as an; > infinite sum of exponentials which depend on the temperature, and these are; > called the Matsubara terms or Matsubara frequencies.; > ; > In general, when not dealing with a Drude-Lorentz bath, or something; > similar, we have to approximate the correlation functions by numerically; > fitting them to exponentials, but in that case they don't have any; > particular name I guess. When we get around to adding it as an option, lets; > call them Fruchtman terms, as it was Amir Fruchtman who told me to try; > doing it that way!; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/455#issuecomment-194752885.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194776953:127,simpl,simple,127,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194776953,1,['simpl'],['simple']
Usability,"Yes. That makes it simpler to add a new gate again and again if you have it; defined somewhere in your code. Instead of writing all the keyword; arguments. On 03-Jan-2017 1:50 PM, ""Alexander Pitchford"" <notifications@github.com>; wrote:. > Sounds like a good idea to me.; > You mean check if the first arg is a Gate, if so then no need to create; > one, just add it to the circuit; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/610#issuecomment-270051834>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBPQHUatbpFYNG-lis-eCIKx1URIhks5rOdN9gaJpZM4LY-mP>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/610#issuecomment-270065494:19,simpl,simpler,19,https://qutip.org,https://github.com/qutip/qutip/issues/610#issuecomment-270065494,1,['simpl'],['simpler']
Usability,"You are measuring the expectation of sigmax, if you measure the expectation value of sigmaz, or the population, you will not observe such a big oscillation but very small oscillations. Not sure what you want to achieve, but your detuning is negligibly small compared to the frequency. It has little effect. Also I'm not sure if there is a typo `v_0` and `drive_detuning` seems to have the unit of frequency, and 2*pi* frequency. You have a time-independent Hamiltonian, so if you want to compute the ZZ interaction, you can simply diagonalize the matrix and see if you have a ZZ coupling term.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2549#issuecomment-2449988908:524,simpl,simply,524,https://qutip.org,https://github.com/qutip/qutip/issues/2549#issuecomment-2449988908,1,['simpl'],['simply']
Usability,"You can make two pull requests: ; 1. You could add this information in the docstring of the `wigner` functions here in `qutip/qutip`, ; so that it appears here http://qutip.org/docs/latest/modules/qutip/wigner.html; 2. PR to to [`qutip/qutip-doc`]( https://github.com/qutip/qutip-doc) http://qutip.org/docs/latest/guide/guide-visualization.html#quasi-probability-distributions; by modifying the file `guide/guide-visualization.rst`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1148#issuecomment-571526904:314,guid,guide,314,https://qutip.org,https://github.com/qutip/qutip/issues/1148#issuecomment-571526904,4,['guid'],"['guide', 'guide-visualization']"
Usability,"You can use the four-operator correlation function, `correlation_4op_1t`. In this specific case you can take only the tau= 0 result. [`correlation.coherence_function_g2`](http://qutip.org/docs/latest/guide/guide-correlation.html#example-second-order-optical-coherence-function).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/921#issuecomment-464117312:200,guid,guide,200,https://qutip.org,https://github.com/qutip/qutip/issues/921#issuecomment-464117312,2,['guid'],"['guide', 'guide-correlation']"
Usability,"You do as you wish, but I much prefer when you submit things via pull requests rather than pushing directly to master, because it gives an opportunity to give feedback or at least being aware of what is happening before it lands in master. Also travis tests is a good way of making sure that everything is in a good state before merged. However, this is just my preference, and if you prefer pushing into master you can go ahead and do that of course.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221#issuecomment-53840086:159,feedback,feedback,159,https://qutip.org,https://github.com/qutip/qutip/pull/221#issuecomment-53840086,1,['feedback'],['feedback']
Usability,"You have a couple of ways of going about this. The simplest is to use the callback form of `e_ops` - you make a single function which looks like; ```python; def e_op(t, state):; # [...]; return expectation; ```; where `t` is the time and `state` is a `Qobj`. You can return whatever you like here, really, so you can return a tuple of values if you want to track more than one. If you do this, then you do; ```python; result = qutip.sesolve(H, psi0, times, e_ops=e_op); ```; and `result.expect` is a list of the same length as `times`, where `result.expect[k]` is the output of your function at a time `times[k]` (note that this is a slightly different output format to the normal method). Alternatively, you can do the calculation yourself without too much difficulty if your observables can be put in the form `A(t) = sum_k f_k(t) A_k`, like your example here. Because the expectation is a linear operation `expect(A(t), psi(t)) = sum_k f_k(t) expect(A_k, psi(t))`, so you can pass the list of `A_k` to `sesolve` and then just calculate the time-dependent coefficients yourself afterwards and add them up. This will generally be faster than the previous method, but it's more complicated to do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426:51,simpl,simplest,51,https://qutip.org,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426,1,['simpl'],['simplest']
Usability,"You have my approval for most of it. The approach of using `preprocessors` and `processors` fells overkill for use that I have, but I don't see any reason it wouldn't work. If you need it for HEOM, let's go for it. I don't like having expect being a dict. I was actually thinking of going with supporting the 3 cases, at least for the output. If we keep `expect` as a property, the format change can be done only there and we can keep it in another format, dict or list, inside. Simplifying `_post_init` will be tricky, normalization does not depend only on the option, but also the state... We could have `Solver.run` call `add_preprocessor` to add the normalization function, but them it would make it harder for HEOM to call.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1140082568:479,Simpl,Simplifying,479,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1140082568,1,['Simpl'],['Simplifying']
Usability,"You should take care of the fact that both `H` and `rho0` are allowed to be superoperators as well. `H` can be a Liouvillian, and `rho0` can be a superoperator to allow for the type of situation mentioned in #384. If one of the two, but not both, are supers, your simple test will fail. . We should fix the docstring of `mesolve` so that it mentions that rho0 can be a super.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/481#issuecomment-222396968:264,simpl,simple,264,https://qutip.org,https://github.com/qutip/qutip/pull/481#issuecomment-222396968,1,['simpl'],['simple']
Usability,"You simple need to create a function starting with `test_` that use the progress bar. Ideally you would use it in a way that ensure all lines of code are used at least once. Then if there is an error in the code, python will raise an error and the test will fail. There should be some tutorials for pytest on the web, writing a step per step guide on making tests is more work than making the tests themselves so please have mercy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084:4,simpl,simple,4,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084,3,"['guid', 'progress bar', 'simpl']","['guide', 'progress bar', 'simple']"
Usability,"You'll find it easier installing from conda-forge, since we distribute binary releases there: see the [installation guide](http://qutip.org/docs/latest/installation.html) here. If you want to install from source using `pip`, you need to configure your C++ development environment correctly - you'll probably need to enable the XCode command-line tools ([see e.g. this](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577:116,guid,guide,116,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577,1,['guid'],['guide']
Usability,"You're welcome! I've used `qutip` a lot throughout my PhD, so it seems fair that I'd contribute back to development. While I'm still getting used to the code base, I'm quite happy to do some ""boring"" software engineering-y maintenance bits, and plus, this helps me learn `pytest` a lot better. This PR can be merged whenever if you're happy with the changes - I'll open a new one if/when I convert more files.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-586622667:265,learn,learn,265,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-586622667,1,['learn'],['learn']
Usability,Your welcome and thanks for looking into this. I understand that there are functionality considerations to be made. Perhaps a simple assertion check would strike the right balance -- giving the functionality you want while avoiding the danger of faulty assumptions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17175299:126,simpl,simple,126,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17175299,1,['simpl'],['simple']
Usability,[![Coverage Status](https://coveralls.io/builds/40340740/badge)](https://coveralls.io/builds/40340740). Coverage increased (+0.004%) to 64.95% when pulling **51f8f2732253c7b89cd30afc4c0101760342db80 on LaurentAjdnik:guide-states-typo** into **b836829f7c5389185b676eed7c5f801613689f9f on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1567#issuecomment-855433303:216,guid,guide-states-typo,216,https://qutip.org,https://github.com/qutip/qutip/pull/1567#issuecomment-855433303,1,['guid'],['guide-states-typo']
Usability,[![Coverage Status](https://coveralls.io/builds/42999730/badge)](https://coveralls.io/builds/42999730). Coverage decreased (-0.003%) to 64.878% when pulling **f76005dba12f4e8f5840e4469aacbafb5a5ec204 on hodgestar:simpler-kwfunc** into **f8ed1be97946171ae8ba9242673cf2674430da56 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894223136:213,simpl,simpler-kwfunc,213,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894223136,1,['simpl'],['simpler-kwfunc']
Usability,[![Coverage Status](https://coveralls.io/builds/43080503/badge)](https://coveralls.io/builds/43080503). Coverage increased (+0.004%) to 65.871% when pulling **a377949b2d459876aebac0e60f494924566f7453 on hodgestar:feature/update-floquet-guide-fesolve-call** into **9b235c48217fbc9965f993757b0819ebf8ee1f16 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215:236,guid,guide-fesolve-call,236,https://qutip.org,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215,1,['guid'],['guide-fesolve-call']
Usability,[![Coverage Status](https://coveralls.io/builds/45690186/badge)](https://coveralls.io/builds/45690186). Coverage increased (+0.05%) to 68.312% when pulling **24ef99d8392bf5c88e5ceccac26ac3dac18e7249 on anna-naden:guide-dynamics-intro** into **52d01da181a21b810c3407812c670f35fdc647e8 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761#issuecomment-1014788646:213,guid,guide-dynamics-intro,213,https://qutip.org,https://github.com/qutip/qutip/pull/1761#issuecomment-1014788646,1,['guid'],['guide-dynamics-intro']
Usability,[![Coverage Status](https://coveralls.io/builds/45761775/badge)](https://coveralls.io/builds/45761775). Coverage increased (+0.03%) to 68.324% when pulling **59adcd370f89dda99afc1efb4eb33452522fe3d6 on anna-naden:guide-dynamics-data** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1773#issuecomment-1016783921:213,guid,guide-dynamics-data,213,https://qutip.org,https://github.com/qutip/qutip/pull/1773#issuecomment-1016783921,1,['guid'],['guide-dynamics-data']
Usability,[![Coverage Status](https://coveralls.io/builds/45761876/badge)](https://coveralls.io/builds/45761876). Coverage increased (+0.04%) to 68.336% when pulling **82bc31a6417feb578e904d1087f46eb095d18658 on anna-naden:guide-basics2** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1768#issuecomment-1016782971:213,guid,guide-,213,https://qutip.org,https://github.com/qutip/qutip/pull/1768#issuecomment-1016782971,1,['guid'],['guide-']
Usability,[![Coverage Status](https://coveralls.io/builds/45761898/badge)](https://coveralls.io/builds/45761898). Coverage increased (+0.02%) to 68.32% when pulling **6cd3b626ff1470cbb8e0073815f3a8d4c2d9d31f on anna-naden:guide-dynamics-intro2** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1775#issuecomment-1016784522:212,guid,guide-dynamics-,212,https://qutip.org,https://github.com/qutip/qutip/pull/1775#issuecomment-1016784522,1,['guid'],['guide-dynamics-']
Usability,[![Coverage Status](https://coveralls.io/builds/45762014/badge)](https://coveralls.io/builds/45762014). Coverage decreased (-0.008%) to 68.291% when pulling **4aa3ff0524812c04b5520c01d64a3c6bcaeef476 on anna-naden:guide-states2** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1771#issuecomment-1016792190:214,guid,guide-,214,https://qutip.org,https://github.com/qutip/qutip/pull/1771#issuecomment-1016792190,1,['guid'],['guide-']
Usability,[![Coverage Status](https://coveralls.io/builds/49098930/badge)](https://coveralls.io/builds/49098930). Coverage increased (+0.3%) to 69.881% when pulling **87e27c5f96c36096fe628f29e95f6e2cbf66dd0a on emilianomfortes:krylov-solve-guide** into **0b821cb547d258ba9597198ed016aad7df56593a on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1098579474:230,guid,guide,230,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1098579474,1,['guid'],['guide']
Usability,[![Coverage Status](https://coveralls.io/builds/55037246/badge)](https://coveralls.io/builds/55037246). Coverage remained the same at 72.23% when pulling **2fc35ba8c6017a8c71e9ee40fe72be2b994c5f09 on hodgestar:feature/v5-simplify-version-parsing** into **169b000bfdffc3555984a1f4df0f36d0b40f5527 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2044#issuecomment-1345270392:221,simpl,simplify-version-parsing,221,https://qutip.org,https://github.com/qutip/qutip/pull/2044#issuecomment-1345270392,1,['simpl'],['simplify-version-parsing']
Usability,[![Coverage Status](https://coveralls.io/builds/55037385/badge)](https://coveralls.io/builds/55037385). Coverage remained the same at 69.926% when pulling **ab7bfb5fe516bab2c3bbe4785a779e02d085266a on hodgestar:feature/simplify-version-parsing** into **52b222e9d4fbe143ef27522b2faa2db33d1043d1 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2043#issuecomment-1345273111:219,simpl,simplify-version-parsing,219,https://qutip.org,https://github.com/qutip/qutip/pull/2043#issuecomment-1345273111,1,['simpl'],['simplify-version-parsing']
Usability,[![Coverage Status](https://coveralls.io/builds/63911753/badge)](https://coveralls.io/builds/63911753). coverage: 84.849% (+0.004%) from 84.845%; when pulling **250692b32c96081e1418d9a1e6b7c23393fe1ed9 on pmenczel:result-opt-no-feedback**; into **454b61529d7bf3c37f74c17925a749fcb046c364 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2262#issuecomment-1807564710:228,feedback,feedback,228,https://qutip.org,https://github.com/qutip/qutip/pull/2262#issuecomment-1807564710,1,['feedback'],['feedback']
Usability,[![Coverage Status](https://coveralls.io/builds/64568924/badge)](https://coveralls.io/builds/64568924). coverage: 84.198% (-0.2%) from 84.382%; when pulling **6707a4b024b6c570988e27948190425b5651e137 on Ericgig:feature.feedback**; into **f0c507eda7241332911965a59e7f0b0a9ec28185 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071540:219,feedback,feedback,219,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071540,1,['feedback'],['feedback']
Usability,[![Coverage Status](https://coveralls.io/builds/65270670/badge)](https://coveralls.io/builds/65270670). coverage: 84.18% (-0.02%) from 84.196%; when pulling **b1d582b2d0cee852dfb3a92471d0205257c1cf03 on Ericgig:doc.guide**; into **7fbb5672242600481d84ee4e5144c95748bf17dc on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2279#issuecomment-1866906699:215,guid,guide,215,https://qutip.org,https://github.com/qutip/qutip/pull/2279#issuecomment-1866906699,1,['guid'],['guide']
Usability,"[[3], [2]]], shape=(9, 6), type='super', isherm=False; Qobj data =; [[1. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 1. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 1. 0.]; [0. 0. 0. 0. 0. 0.]; [0. 0. 0. 0. 0. 0.]]; ```. So at the very least the behavior of spre has changed for nonsquare operators. I haven't installed the master branch to see what the current behavior is there but if I'm reading [this commit](https://github.com/qutip/qutip/commit/8d6883da7c373dc65fc3adb88b74c2b27e350db6#diff-53b46f507cc9fff2a9bd96162758693033d4d57ad7e06ea2b58ad3dcee2205d1) correctly, then it appears as though the master branch will just throw a `ValueError(""Can't create and identity like a non square matrix."")`. From searching throw past issues, it looks like these are the relevant pull requests:; - https://github.com/qutip/qutip/pull/1098; - https://github.com/qutip/qutip/pull/1491. For `sprepost` for rectangular operators, it's clear that the expected behavior should correspond to a supoperator taking density matrices in an input hilbert space to one in a potentially different dimensional output hilbert space. However, I think that it's not completely clear what behavior one should expect of `spre` (and `spost`) for rectangular operators. One potentially sensible behavior would be to view `spre` and `spost` as special cases of `sprepost` where one uses the identity isometry between input and output hilbert spaces to form a superoperator which will act like `sprepost(A, A.dag())`. However, I don't think such superoperators will necessarily correspond to CPTP channels as they may not admit Kraus decompositions which obey the completeness relation (I haven't actually checked this, it's just my intuition). Since it appears somewhat doubtful that anyone is currently using `spre` or `spost` with nonsquare operators, my suggestion would actually be to raise a more helpful error that acknowledges there still may be use cases for such a situation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2171:2762,clear,clear,2762,https://qutip.org,https://github.com/qutip/qutip/issues/2171,3,"['clear', 'intuit']","['clear', 'intuition']"
Usability,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538:30,guid,guide,30,https://qutip.org,https://github.com/qutip/qutip/issues/1538,1,['guid'],['guide']
Usability,"[pristine_from_docs.zip](https://github.com/qutip/qutip/files/6491982/pristine_from_docs.zip). I get this error for dir_gen_anim2.py. I have just attached the relevant part here. . ```python; fig = pyplot.figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np_sin(theta), 0, np_cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = FuncAnimation(fig, animate, arange(len(sx)),; init_func=init, blit=False, repeat=False). ani.save('bloch_sphere.mp4', fps=20). Exception ignored in: <function TimerQT.__del__ at 0x7fbf6c561b80>; Traceback (most recent call last):; File ""/home/rohan/anaconda3/envs/nbdev/lib/python3.8/site-packages/matplotlib/backends/backend_qt5.py"", line 189, in __del__; TypeError: 'NoneType' object is not callable; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842086433:301,clear,clear,301,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842086433,1,['clear'],['clear']
Usability,"_Edit 2020-08-25:_ reporting to Coveralls is now fixed. As a bonus, I also fixed the tree reporting in Coveralls, so now you can get line-by-line coverage analysis within the files in the Coveralls webapp. _Orginal comment from when Coveralls reported at 0%:_; Ok, that Coveralls report is clearly broken, but you can see in the test log that the coverage reporting is correctly fixed (see the Linux, Python 3.7 report). I suspect that my directory hopping has caused the generated `.coverage` file to get lost, which I'll fix tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347#issuecomment-679418397:290,clear,clearly,290,https://qutip.org,https://github.com/qutip/qutip/pull/1347#issuecomment-679418397,1,['clear'],['clearly']
Usability,"_Last updated: 2020-08-12_. This is an issue for tracking and publicising the development status of a separated data layer. This is a major breaking change to be introduced in QuTiP 5, and will change how library functions and users access the underlying data structures of `Qobj`. This document and issue will change over time. Development is taking place on the [`dev.major` branch](https://github.com/qutip/qutip/tree/dev.major) in `qutip/qutip`. Pull requests implementing new features:; - #1282 separating out the core QuTiP operations into a (logical but user-transparent) package `qutip.core`.; - #1296 implementing the first parts of the data multiple dispatch and new data types.; - #1332 replacing the `fast_csr_matrix` with the new Cython type `CSR` all across QuTiP; - #1338 implementing the data-layer creation, conversion and dispatcher routines. We are writing a new ""developers' guide"" to explain the logic behind the design decisions, and help new QuTiP developers work on the code. You can follow initial development hosted as [a repo in my user account](https://github.com/jakelishman/qutip-devguide) until we decide how this will be added to the main documentation. You can view a rendered version of the documentation at https://jakelishman.github.io/qutip-devguide. Some design documents:; - [data layer](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/01-data-time-layer-separation.md); - [data structure implementation choices](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/02-data-structures.md); - [original GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:895,guid,guide,895,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['guid'],['guide']
Usability,"`. So I think we should aim to keep it simple. I think adding `f(t)` as a signature option will be sufficient for what @goerz wanted and would be sufficient for using a Numba jit. So, my suggestion for the next major release (v5) would be that we have only two call sigs:; - `f(t, args)` (default); - `f(t)`. For now we will have to have the three (although I don't think the `rhs_with_state` is not widely used, if at all).; - `f(t, args)` (default); - `f(t)`; - `f(t, state, args)`; The default needs to remain as it is, because it is widely used. I think it makes sense to use introspection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:1300,simpl,simple,1300,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['simpl'],['simple']
Usability,"`QobjEvo` have a `with_state` method `QobjEvo.with_state(t, psi, args={})` which can be used instead of `__call__` if needed. It compute the coefficient on the python side and send them to the cython part if needed. But I don't like it like this, using `__call__` will raise and error if a psi is needed, and we need to treat it differently in solvers.; How about having the state inserted in the args dictionary.; So if the users have the key ""psi_vec"" or ""psi_Qobj"" in args and mul_vec (spmv)/ expect is used, it is automatically updated. With that definition most solvers could work without a special cases for `rhs_with_state=True`. The present method could still be supported using decorator.; Also it would be relatively simple to support expectation value in args in a similar way:; if a specific key/value is found in the dictonary (`args[""_expect""+name] = Qobj/ QobjEvo` ), it is replaced with the operator expectation value when possible. . For the present case, we should document it more than change it, going back to Qobj will slow the simulation. Maybe `rhs_with_state` could be more than a bool and offer the option?; Here ` expect_rho_vec(data, vec, isherm)` from qutip.expect could be used to skip the vec -> Qobj conversion. . Also, the users should not need to know the matrix format and have to do the conversion themselves. They should never have to use `dense2D_to_fastcsr_fmode`. `QObj((vec2mat(rho))` works and should be sufficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-462591342:727,simpl,simple,727,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-462591342,1,['simpl'],['simple']
Usability,"`QubitCircuit` doesn't find `png` (or `svg`) as expected. Using a simple example right out of [one of the demo notebooks](http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/quantum-gates.ipynb). ```python; qc3 = QubitCircuit(3); qc3.add_gate(""CNOT"", 1, 0); qc3.add_gate(""RX"", 0, None, np.pi/2, r""\pi/2""); qc3.add_gate(""RY"", 1, None, np.pi/2, r""\pi/2""); qc3.add_gate(""RZ"", 2, None, np.pi/2, r""\pi/2""); qc3.add_gate(""ISWAP"", [1, 2]); qc3.svg; ```; I get. ```; ---------------------------------------------------------------------------; IOError Traceback (most recent call last); <ipython-input-17-90c37b42f323> in <module>(); 5 qc3.add_gate(""RZ"", 2, None, np.pi/2, r""\pi/2""); 6 qc3.add_gate(""ISWAP"", [1, 2]); ----> 7 qc3.svg; 8 dir(qc3). /usr/local/lib/python2.7/site-packages/qutip/qip/circuit.pyc in svg(self); 1049 def svg(self):; 1050 from IPython.display import SVG; -> 1051 return SVG(self._repr_svg_()); 1052 ; 1053 def qasm(self):. /usr/local/lib/python2.7/site-packages/qutip/qip/circuit.pyc in _repr_svg_(self); 1039 ; 1040 def _repr_svg_(self):; -> 1041 return _latex_compile(self.latex_code(), format=""svg""); 1042 ; 1043 @property. /usr/local/lib/python2.7/site-packages/qutip/qip/circuit_latex.pyc in _latex_compile(code, filename, format); 64 else:; 65 os.system(""pdf2svg %s.pdf %s.svg"" % (filename, filename)); ---> 66 with open(""%s.svg"" % filename) as f:; 67 result = f.read(); 68 . IOError: [Errno 2] No such file or directory: 'qcirc.svg'; ```; with. > uTiP | 4.2.0; > Numpy | 1.13.1; > SciPy | 0.19.1; > matplotlib | 2.0.2; > Cython | 0.27; > Number of CPUs | 2; > BLAS Info | OPENBLAS; > IPython | 5.5.0; > Python | 2.7.13 (default, Jul 18 2017, 09:17:00) [GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)]; > OS | posix [darwin]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/754:66,simpl,simple,66,https://qutip.org,https://github.com/qutip/qutip/issues/754,1,['simpl'],['simple']
Usability,"```; ""minimum_supported_numpy; python_version>='3.8' or platform_machine=='aarch64' or platform_system=='AIX' or platform_python_implementation=='PyPy'""; ""numpy==1.16.6; python_version=='3.6' and platform_machine!='aarch64' and platform_system!='AIX' and platform_python_implementation != 'PyPy'"",; ""numpy==1.16.6; python_version=='3.7' and platform_machine!='aarch64' and platform_system!='AIX' and platform_python_implementation != 'PyPy'"",; ```. Also, you have the wrong setting for 3.8 above, there are no binaries for the one you incorrectly selected. But please, try the simple thing first. Quoting the documentation:. > ### Can I use this if my package requires a recent version of Numpy?; > In many cases, even though your package may require a version of Numpy that is more recent than the pinned versions here, this is often a runtime requirement, i.e. for running (rather than building) your package. In many cases, unless you use recent features of the Numpy C API, you will still be able to build your package with an older version of Numpy and therefore you will still be able to use `oldest-supported-numpy`. You can still impose a more recent Numpy requirement in `install_requires`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-989966457:577,simpl,simple,577,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-989966457,1,['simpl'],['simple']
Usability,"`dims` is an argument of all random Qobj creator, we should keep it.; It should be in [[m,n],[1,1]] format. documentation is not clear / wrong. If used with this format, it does work, but the check and documentation indicate to use [[n,m]] which is wrong and will cause errors. What I was thinking was something along the line of:; ```; def rand_ket(N=0, ...) : ; if not N: ; N = np.prod(dims[0]); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1058#issuecomment-516436835:129,clear,clear,129,https://qutip.org,https://github.com/qutip/qutip/pull/1058#issuecomment-516436835,1,['clear'],['clear']
Usability,"`eseries` isn't really used by `correlation`, it's just a possible solver, and `expect` doesn't use it, it just currently has to support it. Removing `eseries` would involve just removing that part of the solver. `essolve` only functions with time-independent Hamiltonians anyway, and `QobjEvo` can represent a full superset of `eseries` operations, and is an awful lot faster at it too. I agree that the documentation can definitely be improved - I'll be working on that later on in the project. No-one's complaining about the difficult of maintaining them, because nobody _is_ maintaining them. `eseries` hasn't been meaningfully touched since 2014, and there's been an issue recently (#1262) where somebody pointed out that `essolve` doesn't do really simple parts of its spec.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1281#issuecomment-638112689:755,simpl,simple,755,https://qutip.org,https://github.com/qutip/qutip/issues/1281#issuecomment-638112689,1,['simpl'],['simple']
Usability,"`int64` indices are now achievable in `dev.major` with a 3-line change to `core/data/base.pxd` and `base.pyx`. I'll leave this (and all associated issues) open for now as a reminder that we may want to put in a compile-time switch for that, but in principle QuTiP 5.0 will allow fairly simple swapping for those willing to recompile.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-809449396:286,simpl,simple,286,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-809449396,1,['simpl'],['simple']
Usability,"`namedtuple` is not a bad idea, although it's a bit odd because `e_ops` is never a namedtuple and it doesn't solve the problem of what type `.e_ops` has. And `namedtuple` forbids attributes which aren't identifiers, which is also problematic. I guess we could write our own type, `Expect`, that acts enough like a list for numpy, etc but still allows item and attribute access. That feels a bit crazy, but maybe it is worth it?. I still feel that all of these options are overly complicated. `e_ops` is not a list conceptually. Lists are typically ordered, but unstructured. The `e_ops` are clearly not ordered because `e_ops[0]` doesn't ""come before"" `e_ops[1]` in any meaningful way. The order of the indexes in a list `e_ops` are meaningless -- they exist only because that is how Python lists work. *Sometimes* there may be a natural ordering to e_ops -- e.g. if they happen to be the projectors onto a complete set of basis elements -- but this a small subset of the more general situation where e_ops might be any set of operators and functions. I do see that you feel lists are the most important case though, so it would be good to support them well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185:591,clear,clearly,591,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185,1,['clear'],['clearly']
Usability,"`python3 setup.py clean` creates cpp files in qutip/control and qutip/cy. This is the exact opposite of what it should do. It's supposed to clear out build files, not create new ones.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/986:140,clear,clear,140,https://qutip.org,https://github.com/qutip/qutip/issues/986,1,['clear'],['clear']
Usability,"`qutip.liouvillian` takes a Hamiltonian `H` and transforms it into the Liouvillian superoperator, which if no Lindbladian `c_ops` are supplied `liouvillian` is simply the `[H, .]` term you want. This is what `mesolve` does internally, if its first argument is an operator. The subsequent additions I made to the Liouvillian afterwards in that loop add on your non-Lindbladian collapse operators - `mesolve` will recognise that you have passed a superoperator and the only further processing it will to is to add any further Lindblad-form collapse operators found in the `c_ops` list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1435#issuecomment-774026381:160,simpl,simply,160,https://qutip.org,https://github.com/qutip/qutip/issues/1435#issuecomment-774026381,1,['simpl'],['simply']
Usability,add Krylovsolve guide,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862:16,guid,guide,16,https://qutip.org,https://github.com/qutip/qutip/pull/1862,1,['guid'],['guide']
Usability,add isunitary attribute for checking if qobj is a unitary operator:; unitary checking func and property funcs added; initialisation of isunitary; clear flag on operations that risk unitarity; qobj unitarity testing added; preset isunitary for qeye,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817:146,clear,clear,146,https://qutip.org,https://github.com/qutip/qutip/pull/817,1,['clear'],['clear']
Usability,"af717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>os.path.basename()</code></li>; <li><a href=""https://github.com/python-babel/babel/commit/5afe2b2f11dcdd6090c00231d342c2e9cd1bdaab""><code>5afe2b2</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/754"">#754</a> from python-babel/github-ci</li>; <li><a href=""https://github.com/python-babel/babel/commit/58de8342f865df88697a4a166191e880e3c84d82""><code>58de834</code></a> Replace Travis + Appveyor with GitHub Actions (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:2799,progress bar,progress bar,2799,https://qutip.org,https://github.com/qutip/qutip/pull/1695,1,['progress bar'],['progress bar']
Usability,"agine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` in addition to keywords. This isn't ideal because it gives `Qobj` special treatment - additional kwargs can override `Qobj` settings if they're compatible. ---. Just in the interest of completeness, let me also just bring up some of the sweeping changes we'll bringing in in QuTiP 5.0 as well, which massively overhaul how `Qobj` is constructed, and how its data is stored. These aren't _directly_ applicable to the current discussion, but they're worth keeping in mind since they're a huge overhaul of how things will be handled, and may have some implications for how implementors of this interface might behave. The new `Qobj` will no longer have the same `fast_csr_matrix` type as its `data` attribute, but instead will have an extensible data type. The two that will be distributed with the library will be `Dense` and `CSR` (which simply do what they say on the tin), and all linear algebra operations between multiple `Qobj` are handled by a custom multiple-dispatch system that allows additional specialisations to be added in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matmul.add_specialisations(matmul_dense_csr_csr, (Dense, CSR), CSR); ```; QuTiP then knows about it, so it'll get used when appropriate. You can also add entirely new types to the dispatch table by adding them to the ""cast"" table `qutip.data.to`, giving at least one method to convert the new type into an already-known one, and at least one method to convert an already-known type into the new type. QuTiP will then",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:4695,simpl,simply,4695,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['simpl'],['simply']
Usability,"ally rigourous mathematical backing to them, such as `I . |g>` - the tensor product of an operator and a ket. QuTiP assigns this a type `'oper'`, though the way it reaches this decision is more like:; 1. is it a ket? [no]; 2. is it a bra? [no]; 3. is it a super-operator? [no]; 4. if here, it must be an operator. Such objects do have a use. Let's say we have a system with two computational qubits and one ancillary qubit, we've performed a calculation on it and ended up in some state `|x> = |a>.|b>.|c>`, and we want to extract the computational subspace when the ancilla bit is projected onto `|0>`. We can do this in a mathematically rigourous way with; ```python; >>> projector = qutip.tensor(qutip.qeye([2, 2]), qutip.basis(2, 0).proj()); >>> (projector * x).ptrace([0, 1]); Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; ...; ```; which will always return a density matrix. Alternatively, we can instead define the operator (note `proj()` to create `|g><g|` has become `dag()` to simply make `<g|`) as; ```python; >>> projector = qutip.tensor(qutip.qeye([2, 2]), qutip.basis(2, 0).dag()); >>> projector * x; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; ...; ```; which gets us what we wanted. This is not necessarily _common_, but it is useful in some circumstances. ## Other problem discussions. There have been some cases of complaint about the handling of tensor-product spaces in QuTiP in the past (see [this discussion in the Google group](https://groups.google.com/forum/#!msg/qutip/NAGU4iKZNBY/NjqiFEkyDlkJ)), but these largely revolve around people not liking the idea that we enforce the tensor structure to be maintained at all. My reading of these issues is that some people would like to see `dims` removed, or make mathematical operations effectively ignore it. ## Solutions. ### Rejections. Personally, I think enforcing the tensor product structure catches a whole lot of potential issues in code when working with o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:5152,simpl,simply,5152,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simply']
Usability,"am(); H = w * (np.cos(theta) * sz + np.sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(np.sqrt(rate) * sz); # evolve and calculate expectation values; output = qutip.mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * np.pi # qubit angular frequency; theta = 0.2 * np.pi # qubit angle from sigma_z axis (toward sigma_x axis); gamma1 = 0.5 # qubit relaxation rate; gamma2 = 0.2 # qubit dephasing rate; # initial state; a = 1.0; psi0 = (a*qutip.basis(2, 0) + (1-a)*qutip.basis(2, 1))/np.sqrt(a**2 + (1-a)**2); tlist = np.linspace(0, 4, 250); #expectation values for ploting; sx, sy, sz = qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist). fig = pyplot.figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = qutip.Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np.sin(theta), 0, np.cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = animation.FuncAnimation(fig, animate, np.arange(len(sx)),; init_func=init, blit=False, repeat=False); ani.save('bloch_sphere.mp4', fps=20); ```. ### Code Output. _No response_. ### Expected Behaviour. An animated Bloch sphere similar to the animation on the user guide [here](https://raw.githubusercontent.com/qutip/qutip/master/doc/figures/bloch_decay.mp4). ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.23.5; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.11.2; Number of CPUs: 12; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2156:2613,clear,clear,2613,https://qutip.org,https://github.com/qutip/qutip/issues/2156,2,"['clear', 'guid']","['clear', 'guide']"
Usability,"and this in dir_gen_anim.py; ```python; fig = figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np_sin(theta), 0, np_cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = FuncAnimation(fig, animate, arange(len(sx)),; init_func=init, blit=True, repeat=False). ani.save('bloch_sphere.mp4', fps=20). Traceback (most recent call last):; File ""dir_gen_anim.py"", line 87, in <module>; ani.save('bloch_sphere.mp4', fps=20); File ""/home/rohan/anaconda3/envs/nbdev/lib/python3.8/site-packages/matplotlib/animation.py"", line 1144, in save; anim._init_draw() # Clear the initial frame; File ""/home/rohan/anaconda3/envs/nbdev/lib/python3.8/site-packages/matplotlib/animation.py"", line 1727, in _init_draw; for a in self._drawn_artists:; TypeError: 'Axes3D' object is not iterable. ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842087604:142,clear,clear,142,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842087604,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"antiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2755,simpl,simply,2755,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simply']
Usability,"appens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:1163,simpl,simple,1163,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['simpl'],['simple']
Usability,"arkovian problems. It takes as input a collection of precomputed dynamical maps for a list of intial ""learning times"", and then tries to extrapolate the non-Markovian dynamics to larger times. `memorycascade`: This module implements the method introduced in [Phys. Rev. Lett 115, 060402 (2015)](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.115.060402) ([arXiv link](http://arxiv.org/abs/1502.06959)) to integrate the dynamics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=None, **kwargs); ```. where `dynamps` is a list of pre-computed dynamical maps to learn from, `rho0` is the initial state, `times` are the times at which to find the solution etc. The ""memory cascade"" implementation however, diverges a bit from this standard. In general I think it will be hard to have a kind of unified interface for different types of non-Markovian solvers, because unlike the Markovian case, there is no unified theoretical approach, and different solvers work in quite different ways. For the ""memory cascade"" implement",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:1575,feedback,feedback,1575,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['feedback'],['feedback']
Usability,"ated_controlvalue_qobjevo = np.gradient(angle_qobjevo, tlist_state_eval); interpolated_controlvalue_calling_qobjevo = np.gradient(angle_calling_qobjevo, tlist_state_eval); interpolated_controlvalue_callable_corrected = np.gradient(angle_callable_corrected, tlist_state_eval). fig, axs = plt.subplots(2); axs[0].plot(tlist_state_eval, interpolated_controlvalue_qobjevo, label='passing qobjevo', marker='.'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo, label='passing qobjevo as callable'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_callable_corrected, label='callable H, corrected'); axs[0].grid(); axs[0].legend(); axs[0].set_ylabel('interpolated values of control parameter'). axs[1].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo - interpolated_controlvalue_qobjevo,; label='passing qobjevo as callable - qobjevo'); axs[1].plot(tlist_state_eval, interpolated_controlvalue_callable_corrected - interpolated_controlvalue_qobjevo,; label='callable H, corrected - qobjevo'); axs[1].set_yscale('symlog', linthresh=1e-9); axs[1].grid(); axs[1].legend(); fig.savefig('qobjevo_vs_callable_interpolation.png'); ```. ### Code Output. _No response_. ### Expected Behaviour. The interpolation which is used when calling `qobjevo(t)` should match the interpolation used inside the solvers. I find the out-of-bounds behaviour inside the solvers (constant) more intuitive than the one used in `qobjevo(t)` (extrapolate). Between the different boundary condition types, I have no preference. The easiest would probably be to change the interpolation used in `qobjevo(t)` to match the one used inside the solvers. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.21.5; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.2; Python Version: 3.10.4; ```. ### Additional Context. ![qobjevo_vs_callable_interpolation](https://user-images.githubusercontent.com/46033310/214979557-609de51a-caab-4821-9341-e734ee45d6fd.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2063:3689,intuit,intuitive,3689,https://qutip.org,https://github.com/qutip/qutip/issues/2063,1,['intuit'],['intuitive']
Usability,"ble to use, `pypinfo` ; https://github.com/ofek/pypinfo; Note that with`pypinfo` Google's Big Data queries are not free, but new accounts come with some budget credited. Some data: . *`pip install qutip` data starts in 2016. In 2018, 8000 downloads are reported. For 2019, well over 10,000 downloads are predicted. *`conda install qutip` data starts in March 2017. For 2018, 30,000 downloads have been performed. This data is useful to gauge the effective popularity of the two package managers and distribution platforms and can help in setting priorities for relative support and bug fixing. . ## Anaconda downloads; <img width=""441"" alt=""qutip-conda-forge-downloads"" src=""https://user-images.githubusercontent.com/14573436/57989417-45d94380-7ad5-11e9-9694-623fec86865b.png"">. ## PyPI downloads; ![pip-install-qutip-png](https://user-images.githubusercontent.com/14573436/57979590-df174400-7a5a-11e9-807e-c2f46bbb830e.png). With `pypinfo` we can also easily extract other information on users' machines details, such as python usage, which can provide guidance on aspects: . ### Python version; #### 2018; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 3.6 | 47.33% | 4,079 |; | 2.7 | 24.25% | 2,090 |; | 3.7 | 13.97% | 1,204 |; | 3.5 | 12.43% | 1,071 |; | 3.4 | 1.94% | 167 |; | 2.6 | 0.09% | 8 |; | Total | | 8,619 |. #### 2017; | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 2.7 | 51.55% | 4,333 |; | 3.6 | 22.13% | 1,860 |; | 3.5 | 19.73% | 1,658 |; | 3.4 | 6.00% | 504 |; | 3.3 | 0.35% | 29 |; | 2.6 | 0.18% | 15 |; | 3.7 | 0.05% | 4 |; | 3.2 | 0.02% | 2 |; | Total | | 8,405 |. This information is relevant also regarding #882. About OS:; ### Operating System; #### 2018; | system_name | percent | download_count |; | -------------- | ------: | -------------: |; | Linux | 57.25% | 4,934 |; | Windows | 26.15% | 2,254 |; | Darwin | 16.38% | 1,412 |; | CYGWIN_NT-10.0 | 0.08% | 7 |; | FreeBSD | 0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/997:1553,guid,guidance,1553,https://qutip.org,https://github.com/qutip/qutip/issues/997,1,['guid'],['guidance']
Usability,"can propagate over the entire time grid in less than a few seconds. That would be a huge improvement over the current situation, where the lack of a good propagator limits the optimization effectively to toy problems. We *may* still try to implement in Cython some polynomial propagators (propagators that evaluate `exp[-i H dt] Ψ` or `exp[L dt] ρ` via expansion into a polynomial series - think Taylor series but faster converging, through the use of Chebychev or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the cu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:1491,guid,guide,1491,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,2,['guid'],"['guide', 'guide-control']"
Usability,"ced from <a href=""https://github.com/kjd/idna/blob/master/HISTORY.rst"">idna's changelog</a>.</em></p>; <blockquote>; <p>3.7 (2024-04-11); ++++++++++++++++</p>; <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d""><code>1d365e1</code></a> Release v3.7</li>; <li><a href=""https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6""><code>c1b3154</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/172"">#172</a> from kjd/optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623""><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966""><code>cd58a23</code></a> Merge pull request <a href=""http",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:1746,Guid,Guide,1746,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['Guid'],['Guide']
Usability,"coupled differential equation for the state $\rho$ of an open system, and a number of auxiliary density operators $\rho_{\mathbf n}$.; * The goat algorithm in qutip-qoc works by integrating coupled Schroedinger equations for two ore more unitary operators.; * In full counting statistics, we can find the first n derivatives of a moment-generating function by solving coupled Lindblad equations for n+1 operators.; * A direct product state could potentially be used instead of a tensor product state in cases where we know that two systems are only coupled classically and there will never be any coherences between them. ### Proposed Solution. I think that we would need the following:; * A way to construct objects such as $( |\psi\rangle, |\psi'\rangle )$ and the matrix in the equation above from their constituents.; * A way to describe the dimensions of these objects.; * A way to extract the constituents from these objects at the end of the calculation.; * The differential equations mentioned in the applications above should be solvable with `sesolve` and/or `mesolve`.; * Note that in the first three applications, we actually have direct products of operator spaces (which might make things complicated?). ### Alternate Solutions. If all the involved Hilbert spaces have the same dimension, then $\mathcal H \times \cdots \times \mathcal H \simeq \mathbb C^n \otimes \mathcal H$. In other words, a ""big matrix"" can be obtained by tensoring a ""small matrix"" with another appropriate matrix, for example. $$ \begin{pmatrix} H & 0 \\\\ H' & H \end{pmatrix} = \begin{pmatrix} 1 & 0 \\\\ 0 & 1 \end{pmatrix} \otimes H + \begin{pmatrix} 0 & 0 \\\\ 1 & 0 \end{pmatrix} \otimes H' . $$. This can be written in qutip already now, of course. However, proper support for this kind of object would be nicer. Also, it is not clear to me how one would apply this tensoring-approach, for example, to the coupled differential equations for unitary operators in goat. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384:2512,clear,clear,2512,https://qutip.org,https://github.com/qutip/qutip/issues/2384,1,['clear'],['clear']
Usability,"culating the distance between two quantum channels. It has a number of useful properties making it the gold standard [2] in the field for several applications. In general, a complex semidefinite program is required to calculate the diamond norm. Although elegant, this approach is very inefficient. Unfortunately, no alternative method has been discovered for calculating the diamond norm in the general case of CPTP channels. However, in the special case where we are trying to calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qut",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:1098,simpl,simple,1098,https://qutip.org,https://github.com/qutip/qutip/pull/2416,1,['simpl'],['simple']
Usability,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:70773,simpl,simple,70773,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['simpl'],['simple']
Usability,"e any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . # set up operators; a = destroy(N); n = a.dag()*a; x = np.sqrt(hbar/(2*m*w))*(a + a.dag()) #position operator (m); p = 1j*np.sqrt((hbar*m*w)/2) * (a - a.dag()) #momentum operator (kg(m/s)). # duration of ion transport; T = 1; t_f = (2*pi*T)/w; t_list = linspace(0,t_f,1001). # total distance travelled; dist = 220e-6 # distance in (m). # pre-define arguments; args = {'d' : dist, 't_f' : t_f, 'step' : t_list[1]-t_list[0]}. # hamiltonian ; H_0 = (p**2)/(2*m) + (m/2)*(w**2)*(x**2). H = [H_0,; [-m*(w**2)*x,q_0], ; [(m/2)*(w**2)*qeye(N),q_02]]. # initial state; psi0 = basis(N,0). # solve; result = mesolve(H, # hamiltonian; psi0, # initial state; t_list, # time; [], # expectation operators; args=args, # arguments to time dependent function; options=Options(nsteps=1e9), # number of steps solver can take; progress_bar=True) # progress bar; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834:2829,progress bar,progress bar,2829,https://qutip.org,https://github.com/qutip/qutip/issues/1834,1,['progress bar'],['progress bar']
Usability,"e object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discussing the interface itself and document what it should return. This will allow other software in the future to integrate with qutip, too, and I believe will help shape the ecosystem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:2539,simpl,simple,2539,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['simpl'],['simple']
Usability,"e one available everywhere and for v4. `mesolve` with `store_state` will have `result.states` being the output density matrix. `mcsolve` with the same `store_state` and default options should return a similar result.; > ; > So it would be better to have the new option be `precompute_average_states` and have it only control if the average is compute when all trajectories is stored. The if the `average_states` property it use, it could compute the average then, but never do so if not used.; > ; > Please keep `result.states` and `result.final_states` as is. They have the same behaviour as in v4 and we want to keep them for backward compatibility.; > ; > `runs_...` and `average_...` are new to v5 and could be renamed, but it's not clear that `density_matricies` is the average while `final_states` are for each trajectories. `smesolve` and sometime for `mcsolve` individual trajectories states are already density matrices. Thus `smesolve`'s result density_matricies could work as well for all states from all trajectories, causing confusion.; > ; > You implemented the `density_matricies` property twice.; > ; > Having the options to keep only the final states without keeping all the trajectories is a good idea. Be careful that the trajectory result have the final state stored. So I'm not entirely sure what you want the behaviour to be for each set of options. I think it is confusing to return a density matrix if you request store_states - the density matrix is not the same as the state of the system, and surely v5 is the perfect time to clear up issues like this. Personally I found this behaviour very surprising when updating to V5. I do agree that `density_matricies` should maybe be `average_density_matricies`. I am happy to change `mesolve` as part of this for consistency. If you want to keep it backwards compatible would it be possible to send a list of all combination of options and exactly what you want `states` to return in each case, just to prevent any back and forth.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023:1681,clear,clear,1681,https://qutip.org,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023,1,['clear'],['clear']
Usability,"e updating it yesterday, but was quite a rigmarole, and the solution is sub-optimal:; 1. Update modules and functions in `QuTiP_tree_plot/qutip-structure.py`; 2. Run `QuTiP_tree_plot/qutip-structure.py`, which updates `QuTiP_tree_plot/d3_data/qutip.json`; 3.a. Open `QuTiP_tree_plot/qutip_org.html` (this only seemed to work with Firefox browser); 3.b. Print to PDF, save as `guide/doc/qutip_tree.pdf`; 4. Somehow crop `qutip_tree.pdf` and export as `guide/figures/qutip_tree.png`. In general we would like to automate this process, so that when the docs are built, the tree is rebuilt automatically. Task 1: make `qutip_org.html` open in all browsers. Task 2: Auto-generate the `qutip.json` when the API docs are built.; The API function docs are built from `apidoc/functions.rst`. It would be much better if we only needed to add new functions in this doc, and it output the `qutip.json` when it gets built. Task 3: embed `qutip_org.html` in the HTML docs and somehow in the PDF docs; Now it would be much better if when the `guide-overview.rst` were build that the HTML in `qutip_org.html` were embedded in the resulting `guide-overview.html` rather than the PNG as is now. More tricky is how this can be embedded in the PDF docs. Task 4: link to the API docs (this is probably quite tricky); If Task 2 is possible, then I guess it should be possible to add links to the API docs. Task 5: Have something similar to the function tree for classes. All in all this is far to hard to be worth doing just for the QuTiP docs, but I assume that lots of other projects would like to have this function tree in their docs, so you might think someone would add this feature to Sphinx. Maybe someone already has. I would suggest that a good first step would be to investigate this, and if not ask a question on their Github; https://github.com/sphinx-doc/sphinx/issues. If no-one has picked this up after a few months, then we will just add the instructions (steps 1 to 4) above to the readme and close this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525:1273,guid,guide-overview,1273,https://qutip.org,https://github.com/qutip/qutip/issues/1525,1,['guid'],['guide-overview']
Usability,"e whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is identical to `Seq(1, 2, 3, 4)` and `Seq(1, Par(2), 3)` is identical to `Seq(1, 2, 3)` but distinct from `Seq(1, Par(2, 3))`). One alternative may be to have a single subclass `Outcome` of `tuple` instead of both, then overload operators like `|` to mean parallel. Internally, could use two subclasses like `Seq` and `Par` but display visually as `Outcome(1, 2 | 3, 4)` instead of `Outcome(1, Par(2, 3), 4)`. > * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:1510,clear,clear,1510,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['clear'],['clear']
Usability,"e-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.D6pMkAw1y3WWyirs_J8dFthmGjY4V6rIMr6JUHYZ19Y). Thank you for being so clear with the explanation, now I am able to build the html. I have done this update.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:2130,clear,clear,2130,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,1,['clear'],['clear']
Usability,"e; >; > -; >; >; > Leaving this blank line here makes the comments above it confusing.; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768189423>:; >; > > # Find the SVD.; >; > U, S, V = svd(q_oper.full()); >; >; >; > # Truncate away the zero singular values, up to a threshold.; >; > - nonzero_idxs = S > thresh; >; > - dK = nonzero_idxs.sum(); >; > - U = U[:, nonzero_idxs]; >; > - S = sqrt(S[nonzero_idxs]); >; > +; >; > + dK = np.count_nonzero(S > thresh); >; >; > I'm just checking why this code was changed. Yes, svd returns the; > singular values in descending order, but what was wrong with previous code; > that didn't rely on that?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768191681>:; >; > > ***@***.***(scope=""function"", params=[; >; > + pytest.param(rand_super, id=""super""); >; > +]); >; > +def superoperator(request, dimension):; >; > + return request.param(dimension); >; >; > This is quite a strange function to read given that it could have just; > been:; >; > @pytest.fixture; >; > def superoperator(dimension):; >; > return rand_super(dimension); >; >; > Maybe there was a plan to do something more? Could we either add another; > param or use the simpler implementation?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768192756>:; >; > > + # FIXME: problem if Kraus index is implicitly; >; > + # ptraced!; >; >; > Could you explain the FIXME a bit more? Was this an existing issue? Can we; > just fix it?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1491#pullrequestreview-830847431>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AFTMVKGNCG4DDNE5NVOSMRTUQZ4STANCNFSM42RMIOQA>; > .; >. -- ; *φ*",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001:2905,simpl,simpler,2905,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001,1,['simpl'],['simpler']
Usability,"e_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5719,simpl,simple,5719,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"e_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There is a bug in eigh on mac with openblas. --> **Switched to <code>qutip.sparse.eigh</code>**; * [x] What does this <code>optimizer</code> function optimize? Could you add a simple description. --> **This functions finds the optimal number of Lanczos algorithm iterations inside Krylov, added as small description**; * [x] <code>_estimate_norm</code> is nerver used. --> **Removed**; * [x] Why is tlist here and not in solve? It seems strange that you can reuse one instance for multiple H and psi0, but you cannot change tlist. --> **Removed when deprecating <code>KSolve</code> class**; * [x] Why do you need KSolve? --> **It was a workaround to the cognitive complexity check of github. But we decided to revert back to a non Class solver, as it adds another type of complexity.**; * [x] Increasing pdx here when it is already controlled by enumerate is strange. The best would be to include the first partition here too. Otherwise using update_progress_bar(pdx + 1) is clearer. --> **Changed ""pdx"" into ""idx"". Added the first lazy iteration inside the loop, now it is more clear with <code>update_progress_bar(idx)</code>.**; * [x] T",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:2189,simpl,simple,2189,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,1,['simpl'],['simple']
Usability,"ed features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Best; Boxi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:2094,simpl,simple,2094,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['simpl'],['simple']
Usability,"ee to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool = Flag specifying whether Qobj should get a copy of the input data, or use the original.; fast : bool = Flag for fast qobj creation when running ode solvers.; ```. For the case of the usage that netket would have, our objects already define the Hilbert space they are acting on (so `dims` and `shape`). `copy` doesn't really make sense for us, because we would be building the representation . The way I see it, `Qobj(other_pkg_obj,**kwargs)` should behave like `Qobj(qutip_obj, **kwargs)`, so `__qutip_qobj__` should return the matrix data, shape and dims if possible, and qutip will handle i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1813,clear,clear,1813,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,2,['clear'],['clear']
Usability,"emal eigenvalues: that is, eigenvalues with large magnitudes. In particular, using which = 'SM' may lead to slow execution time and/or anomalous results. A better approach is to use shift-invert mode."". See also the example on that page. I tried using the 'shift-invert mode' as suggested, and that gave better results. But, they are still pretty bad for the problem I want to solve: I'm trying to find the low lying spectrum for a very large Liouvillian, as I vary a single external Hamiltonian parameter. The smallest one (in magnitude) is always zero, and all others are negative. Supposedly, the vanishing of the real part of the eigenvalue with the second largest (closest to zero) real part can be useful for characterizing phase transitions, see, for example, this recent paper: http://prl.aps.org/abstract/PRL/v110/i15/e150401. I attach a plot where I have computed the eigenvalue with second largest real part (which is also the one with second smallest magnitude; the two criteria coincide) using 1) scipy.linalg.eigvals (green line) and 2) scipy.sparse.linalg.eigs (blue line): https://dl.dropboxusercontent.com/u/6042643/liouvspec.png. As you can see, the results from the sparse solver are pretty poor (I assume the dense solver results are correct). . As far as the physics goes: Another thing to notice is that the system goes through phase transitions at -2.0, 0.5 and 2.0 for the parameter along the x-axis, and there are no signs of that in the plot. On a side note, I also wasn't able to reproduce Fig 2(a), middle panel, of the PRL paper I linked to, although I got qualitative agreement if I tried with different parameters than what is quoted in the figure caption. Do you by any chance happen to have any experience with this way of characterizing dynamical phase transitions?. I might try to make a simpler example illustrating the problem later. The Liouvillian I am considering now is too big to use as an example, as using the dense solver requires a huge amount of memory.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/16#issuecomment-16416062:2154,simpl,simpler,2154,https://qutip.org,https://github.com/qutip/qutip/issues/16#issuecomment-16416062,1,['simpl'],['simpler']
Usability,"emory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=None, **kwargs); ```. where `dynamps` is a list of pre-computed dynamical maps to learn from, `rho0` is the initial state, `times` are the times at which to find the solution etc. The ""memory cascade"" implementation however, diverges a bit from this standard. In general I think it will be hard to have a kind of unified interface for different types of non-Markovian solvers, because unlike the Markovian case, there is no unified theoretical approach, and different solvers work in quite different ways. For the ""memory cascade"" implementation I chose a more object oriented style for the interface. The user first creates a `MemoryCascade` object, storing all the relevant parameters, and subsequently calls class methods to runs simulations. I personally like this style, and I think it is a general style that could be used across a great variety of solvers. I could however in addition write a function with a more `mesolve`-like interface. It can't, however, be identical, as there are several special arguments that has to be given. There is also a separate class method that computes output ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:2101,learn,learn,2101,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['learn'],['learn']
Usability,"er function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row about licensing primarily, and then about how we're going to handle tensor networks in general. In order to prevent headaches down the line (and again, very very sorry), would it be ok if we leave this unmerged, and don't attempt to modify it in any way? I don't want to get into a situation where we decide we can't accept non-QuTiP-licenced code, and we want to use/build on your code",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3928,UX,UX,3928,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['UX'],['UX']
Usability,"er only needs to add in the specialisations that they actually need for the bottle-neck parts of their application, and leave the dispatcher to handle all other minor components by automatic conversion. As in the previous subsection, they do this by calling `add_specialisations` on the relevant operations. #### Creating a new dispatcher. In most user-defined functions which operate on `Qobj.data` it will be completely sufficient for them to simply call `data.to(desired_type, input_data)` on entry to the function, and then they can guarantee that they are always working with the type of data they support. However, in some cases they may want to support dispatched operations in the same way that we do within the library code. For this reason, the data layer exports `Dispatcher` as a public symbol. The minimal amount of work that needs to be done is to call the initialiser, and then call `add_specialisations`. For example, let's say the user has defined two specialisations for their simple new function `add_square`:; ```python; >>> def add_square_csr(left, right):; ... return data.add_csr(left, data.matmul_csr(right, right)); ...; >>> def add_square_dense(left, right):; ... return data.add_dense(left, data.matmul_dense(right, right)); ...; ```; (Ignore for now that this would be better achieved by just using the dispatchers `data.add` and `data.matmul` directly.) Now they create the dispatcher simply by doing; ```python; >>> add_square = data.Dispatcher(add_square_csr, inputs=('left', 'right'), name='add_square', out=True); >>> add_square.add_specialisations([; ... (data.CSR, data.CSR, data.CSR, add_square_csr),; ... (data.Dense, data.Dense, data.Dense, add_square_dense),; ... ]); ```; This is enough for `Dispatcher` to have extracted the signature and satisfied all of the specialisations. Note that the `inputs` argument does not provide the signature, it tells the dispatcher which arguments are data-layer types it should dispatch on, e.g. for `data.pow` as defined abo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:12814,simpl,simple,12814,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['simpl'],['simple']
Usability,"er the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit thick here because I understand the overall idea of the code but somehow I am not confident it will be easy for others to understand on first read. Do you think we can make it a bit more transparent how the `_qfunc_alpha_matrix` works and that the crux of the method is computing the operators `coherent_dm` in an efficient way and saving them? If I have understood the code correct, I could try to document it a bit more and simplify it. . Let me know your thoughts and correct me if I misunderstood something @jakelishman @Ericgig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:2556,simpl,simplify,2556,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['simpl'],['simplify']
Usability,"es in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if anything, the pure python implementation is slightly faster), maybe it makes sense to replace the call to `cy_ode_rhs` with a call to `_ode_rhs_test` (see lines 744 to 747 in mesolve.py)? This makes the code a tiny bit easier to read. Of course, this was a single, very simplistic test. Sorry about all the merge commits. I'm still learning good workflow for this type of feature branch. Will use rebasing more in the future. Let me know if you have any questions about the implementation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:1591,simpl,simple,1591,https://qutip.org,https://github.com/qutip/qutip/pull/404,3,"['learn', 'simpl']","['learning', 'simple', 'simplistic']"
Usability,"ex_array_to_rgb` could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function `matrix_histogram_complex`. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from `matrix_histogram_complex` you get something like. ```; x = np.linspace(-5, 5, 100); X, Y = np.meshgrid(x,x); Z = X + 1j * Y; cdict = {'blue': ((0.00, 0.0, 0.0),; (0.25, 0.0, 0.0),; (0.50, 1.0, 1.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'green': ((0.00, 0.0, 0.0),; (0.25, 1.0, 1.0),; (0.50, 0.0, 0.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'red': ((0.00, 1.0, 1.0),; (0.25, 0.5, 0.5),; (0.50, 0.0, 0.0),; (0.75, 0.0, 0.0),; (1.00, 1.0, 1.0))}. cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); norm = mpl.colors.Normalize(-pi, pi); colors = cmap(norm(np.angle(Z))); colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(). plt.imshow(colors, interpolation='none');; ```. which produces the following map of the complex plane:. ![complex-plane-2](https://cloud.githubusercontent.com/assets/1198183/2809239/c3f6c3cc-cd61-11e3-83a1-cc4fff3f303c.png). compared to. ```; plt.imshow(complex_array_to_rgb(Z), interpolation='none');; ```. which produces. ![complex-plane-1](https://cloud.githubusercontent.com/assets/1198183/2809256/29caad3e-cd63-11e3-8e7a-3187afc2744f.png). Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41473950:1792,simpl,simple,1792,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41473950,2,['simpl'],['simple']
Usability,"expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qub",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:3932,simpl,simple,3932,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,expm() fails on simple Qobjs,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/508:16,simpl,simple,16,https://qutip.org,https://github.com/qutip/qutip/issues/508,1,['simpl'],['simple']
Usability,"fS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * February 2019: The first QuTiP developers workshop is held in RIKEN, Wako, Japan, to discuss development and roadmap ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most comprehensive toolbox to characterize noise and dissipation affecting quantum systems as well as quantum information processing features. QuTiP has been developed and maintained by a group of open-source contributors for several years and has been used for research, teaching and in the emerging quantum technology industry. The QuTiP community has grown immensely with several projects that build on top of it. In this document we refer to the “QuTiP project” or “ the project” with reference to all software developed under the QuTiP Github organization, hosted at “[www.github.com/qutip](www.github.com/qutip)” and all related activities involving its community happening",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3731,intuit,intuitive,3731,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['intuit'],['intuitive']
Usability,"feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the output are not kept at <code>evolved_states = map(Qobj, evolved_states[1:-1]</code> --> **Separated into two variables. Now dimensions are also ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1862,progress bar,progress bars,1862,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['progress bar'],['progress bars']
Usability,ffmpeg command from User Guide gives an error,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799:25,Guid,Guide,25,https://qutip.org,https://github.com/qutip/qutip/issues/799,1,['Guid'],['Guide']
Usability,"g. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. . This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Also, the last outcomes have some overlap with the last project. Although I also find this circuit importation very important, I guess two projects should not have overlap if they are both selected.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184:2097,simpl,simple,2097,https://qutip.org,https://github.com/qutip/qutip/issues/1184,1,['simpl'],['simple']
Usability,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:3593,Simpl,Simple,3593,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['Simpl'],['Simple']
Usability,"h measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. Thank you for the kind words!. > I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:; > ; > * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; > * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is identical to `Seq(1, 2, 3, 4)` and `Seq(1, Par(2), 3)` is identical to `Seq(1, 2, 3)` but distinct from `Seq(1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:1126,simpl,simple,1126,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['simpl'],['simple']
Usability,"hape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. ―――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[magnetization subspace state XXZ model] ――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum ob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:8365,simpl,simple,8365,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['simpl'],['simple']
Usability,"he problem is. Ex. I'm always frustrated when [...]. **Describe the solution you'd like**; A clear and concise description of what you want to happen. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here. Similarly, for bug reports, one finds:. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Please provide a minimal working example. For instance:. ```python; from qutip import identity; print(identity(2)); ```; The terminal out put is; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. **Expected behavior**; A clear and concise description of what you expected to happen. **Your Environment**; Please use `qutip.about()` to get the information about your environment and paste it here. **Additional context**; Add any other context about the problem here. -------------; The slight hiccup I find with these great templates introduced by @BoxiLi, especially in the first case above, is that many sub-titles need to be deleted by the user and are not uniform in the end. Something more standard could be achieved by clearly stating what lines should be removed by the user and are just explanations, and what are to be kept in the structure. Sometimes simply rewording the titles could help. For example:; From; ```; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; ```; To something like; ```; **Feature Request Description**; +++ remove this line and the text example below; **Describe the solution you'd like**; A clear and concise description of what you want to happen.; +++ remove this line and the text example above; ```; or something like that. Similarly, ; ```; **Describe the bug** ; ```; could become; ```; **Bug description** ; ```; and so on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1266:1480,clear,clearly,1480,https://qutip.org,https://github.com/qutip/qutip/issues/1266,4,"['clear', 'simpl']","['clear', 'clearly', 'simply']"
Usability,"heir projects, beginning in priority from the lead developers. . ## Other Funding Schemes; Similarly, I have been writing NumFOCUS [small development grants](https://numfocus.org/blog/fall-2018-open-source-development-grants), which have a different goal but can be set up similarly. Also, in the future we may apply again to [Google Season of Docs](https://developers.google.com/season-of-docs). . ## Future Opportunities; Several senior researchers and team leaders have aired the desire to contribute to the project more actively. Setting up a space where they can propose projects, even on their own funding resources (most probably together with the development of research projects), in coordination with the lead development team, could help foster development in a more sustainable way. . ## Proposal; I propose to help sustain available projects in a more structural way than what is done now. This is an example of a what we could call a **QEP, or ""QuTiP Enhancement Proposal"".**. - One thing that could be done is to simply expand the existing Wiki. The downside of taking only this action is that only organization members can modify the wiki. So this could work, but mainly as a more static and cleaner staple. . - I propose to integrate the Wiki with Issues that contain the projects, adding a `projects` (or similar) label. This is in the spirit also of other large quantum open source projects such as Qiskit, which has even an ad-hoc `qiskit-community` repository, https://github.com/qiskit-community/. In QuTiP case, we could create a new repository similar to the notebooks one, e.g., https://github.com/qutip/qutip-community/. The downside is that in general the division is subfolders is not advised for easiness of maintainability. So one could just open issues with open projects. Of course, for physics questions, sometimes spilling in to PRs and Issues, qutip already has a Google Group forum, where I advise that this new capabilities may be advertised with a proper thread.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1132:2447,simpl,simply,2447,https://qutip.org,https://github.com/qutip/qutip/issues/1132,1,['simpl'],['simply']
Usability,"her would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Python space exept for in special methods (`__mul__`, ...). I think that 3.i is the closest to an ideal solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:3198,clear,clear,3198,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['clear'],['clear']
Usability,"hey guys.. yes, things are fine now. Below is simplified code that shows this problem:; ```; import numpy as np; import qutip as q; q.about(); # opts=q.Odeoptions() #""low"" tolerances; opts=q.Odeoptions(method='adams', nsteps=100000, atol=1e-11, rtol=1e-11); times=np.linspace(0,10,300); epsilon=2*np.pi * 1; H=[epsilon/2*q.sigmaz(), [q.sigmax(), 'sin(2*pi*t)']]; U_prop_batch=q.propagator(H, times, options=opts, unitary_mode='batch', parallel=False); U_prop_single=q.propagator(H, times, options=opts, unitary_mode='single', parallel=False); print((U_prop_batch[-1]-U_prop_single[-1]).full()); ```. and here is the ""bad"" output with the older version of qutip that I was running before (Note, the difference between the 'batch' and 'single' has terms of order 1e-6). . ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+4277eae; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+4277eae-py3.4-linux-x86_64.egg/qutip. #I would expect this to have largest terms of order 1e-11 say.; [[-4.24096116e-07+1.00022928e-06j -4.16215462e-09-4.54122270e-07j]; [ 4.16215462e-09-4.54122270e-07j -4.24096116e-07-1.00022928e-06j]]; ```; and here is the result of running with the latest version (note, now difference between the two propagators respects the required tolerances):. ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+489fd41; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Insta",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-376601387:46,simpl,simplified,46,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-376601387,1,['simpl'],['simplified']
Usability,"hi amrit,. correlation_2op_1t() calculates the correlation function based on the steady-state of the Hamiltonian+collapse operators you provide, it doesn't take an initial condition as input (the steady-state will the the same irrespective of the initial condition of the qubit). For non-steady state correlations and spectrum, I think what is described here might be what you need:; https://qutip.org/docs/latest/guide/guide-correlation.html#non-steadystate-correlation-function. This kind of question is probably better to ask in the QuTiP mailing list, https://groups.google.com/g/qutip; you will receive a wider range of responses there, so I am going to close this issue. If you find some problem with the above approach that you think is a code bug, feel free to reopen it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1806#issuecomment-1042493241:414,guid,guide,414,https://qutip.org,https://github.com/qutip/qutip/issues/1806#issuecomment-1042493241,2,['guid'],"['guide', 'guide-correlation']"
Usability,"https://github.com/kjd/idna) from 3.4 to 3.7.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/releases"">idna's releases</a>.</em></p>; <blockquote>; <h2>v3.7</h2>; <h2>What's Changed</h2>; <ul>; <li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/kjd/idna/compare/v3.6...v3.7"">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/kjd/idna/blob/master/HISTORY.rst"">idna's changelog</a>.</em></p>; <blockquote>; <p>3.7 (2024-04-11); ++++++++++++++++</p>; <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:1016,Guid,Guido,1016,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['Guid'],['Guido']
Usability,"i think this difference comes because, if you look at equation A1 in Fabrizio's paper you linked, they do a row-ordering convention in turning states into vectors. Qutip does a column ordering convention, as described here ; http://qutip.org/docs/latest/guide/guide-states.html#superoperators-and-vectorized-operators. this is an arbitrary choice, as long as you do it consistently with the definition of states and superoperators. This means in our case -i[H, rho] gives -i[spre(H) -spost(H)] == -i zcsr_kron(spI, H.data) + 1j * zcsr_kron(Ht, spI). . i think row ordering is more intuitive, but column ordering is what we do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1285#issuecomment-643295362:254,guid,guide,254,https://qutip.org,https://github.com/qutip/qutip/issues/1285#issuecomment-643295362,3,"['guid', 'intuit']","['guide', 'guide-states', 'intuitive']"
Usability,"ich should only add in flimesolve as an option; for solvers (with an if statement or two to get the Hamiltonian into a; FloquetBasis object if flimesolve is the selected solver). Thanks again for your feedback!. On Mon, Jun 26, 2023 at 6:32 PM Fenton Clawson ***@***.***> wrote:. > Hey Eric,; >; > Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Something is strange in floquet.py, did you include change not meant to; >> be here?; >> Both floquet.py and flimesolve.py have the original fmesolve and the new; >> flimesolve...; >>; >> Tests should pass.; >> Right now, scipy 1.11 breaks cvxpy which we use so this breaks a few; >> tests, but the changes you made to correlation.py also break the tests.; >> We will want tests for the new solver.; >>; >> Could you also review the style (pep8).; >>; >> - There are some very long line, we use the official 80 characters; >> width.; >> - space are not uniform, sometime they are doubled, other time; >> missing.; >> - There are rules for empty lines, there should not be 3 empty lines; >> in a function.; >>; >> —; >> Reply to this email directly, view it on GitHub; >> <https://github.com/qutip/qutip/pull/214",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:2010,feedback,feedback,2010,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['feedback'],['feedback']
Usability,"igenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic oscillator, finite temperature, states ... ok; > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > correlation: legacy me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic oscillator, finite temperature, states ... ok; > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > correlation: legacy me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... ERROR; > correlation: legacy me and es for oscillator in steady-state ... ok; > correlation: comparing me and es for oscillator in steady-state ... ok; > correlation: legacy spectrum from es and pi methods ... ok; > correlation: comparing spectrum from es and fft methods ... ok; > correlation: comparing spectrum from es and pi methods ... ok; > correlation: comparing TLS emission correlations (str-list td forma",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:1763,simpl,simple,1763,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['simpl'],['simple']
Usability,"ild of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) mall",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:6148,clear,clearly,6148,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['clear'],['clearly']
Usability,"ilities that are different from their true prefactor in the initial state. The ratio between the sampling frequencies and true prefactors would be weights on the trajectories. This also fixes some things in merging `McResult`s and `NmmcResult`s, and perhaps fixes the target tolerance computation for the ""improved sampling"" option. **Implementation**. A difficulty in the implementation is that the weights depend on the total number of trajectories in different ways. For example, the no-jump trajectory has a fixed weight that never changes, but all other trajectories come with prefactors $(1-p_0) / (N-1)$ where $p_0$ is the probability of the no-jump trajectory, and $N$ the total number of trajectories (including the one no-jump trajectory). For this reason, I separate weights into *absolute weights* (like $p_0$) and *relative weights* (like the others). The average is performed as follows:. $$ \bar\rho = \sum_{T: \text{abs}} w_a(T) w_r(T) \rho(T) + \frac{1}{N_{\text{rel}}} \sum _{T: \text{rel}} w_r(T) \rho(T) $$. where the first sum is over all trajectories T that have absolute weights, and the second sum over all other trajectories. Here, $w_a(T)$ and $w_r(T)$ are the absolute and relative weights, $\rho(T)$ the state associated with a trajectory, and $N_{\text{rel}}$ the number of trajectories that have not been assigned absolute weights. Intuitively, the idea is that absolute weights are for trajectories where the contribution to the full state is known exactly, and the trajectories without absolute weights are the stochastic part. **Things to do**; - [x] Update tests and create new ones; - [x] Update photocurrent to work with weights; - [x] Update target tolerance calculation to work with weights; - [x] Think about how result objects should be added if both contain trajectories with absolute weights; - [x] Double-check that this creates no problems for stochastic solvers; - [x] Towncrier entry. **Related issues or PRs**; https://github.com/qutip/qutip/issues/2235",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369:2196,Intuit,Intuitively,2196,https://qutip.org,https://github.com/qutip/qutip/pull/2369,1,['Intuit'],['Intuitively']
Usability,"imeline regarding governance talks**:; * April 2018: QuTiP Joins NumFOCUS as an Affiliated Project (and since then participates in Google Summer of Code).; * September 2018: a slide presentation is shared among lead developers with ideas on QuTiP development and governance. ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * February 2019: The first QuTiP developers workshop is held in RIKEN, Wako, Japan, to discuss development and roadmap ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most comprehensive toolbox to characterize noise and dissipation affecting quantum systems as well as quantum information processing features. QuTiP has been developed and maintained by a group of open-source contributors for several years and has been used for research, teaching and in the emerging quantum technology industry. The QuTiP community has ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3339,Feedback,Feedback,3339,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['Feedback'],['Feedback']
Usability,"ing logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2848,simpl,simple,2848,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['simpl'],['simple']
Usability,"ing; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5""><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:4530,guid,guide,4530,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,"ingle time steps with `mesolve`, optimization becomes feasible for any system that `mesolve` can propagate over the entire time grid in less than a few seconds. That would be a huge improvement over the current situation, where the lack of a good propagator limits the optimization effectively to toy problems. We *may* still try to implement in Cython some polynomial propagators (propagators that evaluate `exp[-i H dt] Ψ` or `exp[L dt] ρ` via expansion into a polynomial series - think Taylor series but faster converging, through the use of Chebychev or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:1347,simpl,simplify,1347,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['simpl'],['simplify']
Usability,"into new-form dimension objects for user convenience. Certain objects, like the excitation-number-restricted spaces (enr) may not have ""compatible"" dimensions and shapes. This may need further discussion elsewhere. ## Proposal. ### Overview. The principle change is to make dimension objects singleton instances of classes. All `Qobj` of the same dimension will have a reference to the exact same object, which has all the expensive operations already calculated. Internally, dimensions will represented in a very pure linear algebra manner. A dimension object is a single `Dims` object, which is exactly one of the subclasses:; - `Space` representing a vector space; * `Space(size: int)` is a standard ket; * `Space(Map(...))` is an operator-ket; - `Space(Map(from, to))` representing an operator in column-stacked format.; - `Map(from, to)` representing some mapping `Dims -> Dims`; - `Field` used only to represent the absence of `Dims` in `Map` and `Compound`. A `Qobj` may not have this `dims`; it would simply be a complex number.; - `Compound(dims1, dims2, ...)` for tensor-product spaces. The current `Qobj.type` values (with no tensor products) map like so:; - ket: `Space`; - bra: `Map(Space, Field)`; - oper: `Map(Space, Space)`; - operator-ket: `Space(Map(Space, Space))`; - operator-bra: `Map(Space(Map(Space, Space)), Field)`; - super: `Map(Space(Map(Space, Space)), Space(Map(Space, Space)))`. Users will not have to type out such monstrosities as the mapping for `super`; the current QuTiP dims syntax will be parsed into these types, but internally this form will almost completely remove parsing costs. Some explicit mappings between the current list syntax and the new parsed syntax:; - `[[2], [1]]` = `Space(2)`: a qubit pure state; - `[[2, 10], [1, 1]]` = `Compound(Space(2), Space(10))`: a pure state of a qubit space tensor-product a 10-element space; - `[[2, 2], [2, 2]]` = `Map(Compound(Space(2), Space(2)), Compound(Space(2), Space(2)))`: a square operator on a two-qubit st",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:1980,simpl,simply,1980,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['simpl'],['simply']
Usability,"ion to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always good.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:2847,simpl,simpler,2847,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['simpl'],['simpler']
Usability,"is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `a == b and b == c` does not imply `a == c`). The primary consequence of this is that the cache will simply be a little under-zealous, and sometimes it will calculate the value twice for three similar `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:2345,simpl,simply,2345,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['simpl'],['simply']
Usability,"is is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using what",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10758,clear,clear,10758,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['clear'],['clear']
Usability,"ite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better and easier to read as time went on. (The later files haven't been converted yet.) The main things are to always be thinking about readability both of the code and the error messages that are coming out, and making sure that your tests are really testing that your functions have your behaviour you want them to have. Another thing we really don't have enough of in QuTiP yet is tests for ""negative"" behaviour, i.e. testing that functions _fail_ when they're passed incorrect inputs - consequently, quite a lot of QuTiP actually will just silently do the wrong thi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:1737,clear,clearly,1737,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['clear'],['clearly']
Usability,"itial_state = qt.basis(3, 0); e_ops = [gm(1), gm(2), gm(3)]; return qt.mesolve(hamiltonian, initial_state, tlist, None, e_ops).expect. run_experiment(StandardGaussianPi, np.linspace(0, 40, 250), -0.2); ```; The function `gm` was used to generate matrices. These matrices come from:; ```python; gell_mann = [[], [], [], [], [], [], [], []]. gell_mann[0] = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) / np.sqrt(2 / 3); gell_mann[1] = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 0]]); gell_mann[2] = np.array([[0, -1j, 0], [1j, 0, 0], [0, 0, 0]]); gell_mann[3] = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 0]]); gell_mann[4] = np.array([[0, 0, 1], [0, 0, 0], [1, 0, 0]]); gell_mann[5] = np.array([[0, 0, -1j], [0, 0, 0], [1j, 0, 0]]); gell_mann[6] = np.array([[0, 0, 0], [0, 0, 1], [0, 1, 0]]); gell_mann[7] = np.array([[0, 0, 0], [0, 0, -1j], [0, 1j, 0]]). def gm(n):; return qt.Qobj(gell_mann[n]); ```. The code above has the following output.; ```; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 7.569736410260631e-09; 7.569736410260631e-09; 7.569736410260631e-09; 1.1027338361068281e-05; 1.1027338361068281e-05; 1.1027338361068281e-05; 5.5136691805341405e-06; 5.5136691805341405e-06; 5.5136691805341405e-06; 0.05514220547452194; 0.05514220547452194; 0.05514220547452194; 0.6065091235279361; 0.6065091235279361; 0.6065091235279361; 6.120178304062077; 6.120178304062077; 6.120178304062077; 60.14556517658347; 60.14556517658347; 60.14556517658347; ```; Without even looking at the output of `mesolve`, there is an issue. Note that the values being printed are generated from the time dependent coefficient `coeff_1`, where I am just printing out the values of time that it has been given. Clearly, there are *not* 250 values, here, and in addition, values like 60.1 are not even in `tlist`, which ranges from 0 to 40. My `about()` is below; thank you in advance for any help.; ```; QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1638:3100,Clear,Clearly,3100,https://qutip.org,https://github.com/qutip/qutip/issues/1638,1,['Clear'],['Clearly']
Usability,"ization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum ob",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:5461,simpl,simple,5461,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['simpl'],['simple']
Usability,just testing with simple decaying exponential one gets about 5% or so improvement compared to np functions and no difference with cmath,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/251#issuecomment-61603338:18,simpl,simple,18,https://qutip.org,https://github.com/qutip/qutip/pull/251#issuecomment-61603338,1,['simpl'],['simple']
Usability,"k for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5505,simpl,simple,5505,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,keep the new text based progress bar as EnhancedTextProgressBar. Related to #121,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/256:24,progress bar,progress bar,24,https://qutip.org,https://github.com/qutip/qutip/pull/256,1,['progress bar'],['progress bar']
Usability,"l details. As of QuTiP 4.5 (and all previous versions), `Qobj` instantiation is slow and this permeates through to all operations on `Qobj`. Matrix multiplication, scalar multiplication, addition and so forth all need to instantiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2538,simpl,simple,2538,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simple']
Usability,"les in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance improvement. It improves the organization of the code, allows greater flexibility in adding new things to an existing class and modifying it easily. In terms of user experience, this means less clutter in the code and verbosity of arguments. You can initialize something once and keep re-calculating things by dynamically changing the parameters and calling the `class` method. If it does not hurt to slowly shift in this direction then I think we should go for it. If there is an alternative reason for not having classes then please let us know as the cons @bencbartlett mentions has more to do with following qutip precedent than some fundamental disadvantage in performance or use. @ajgpitch @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1871,clear,clearly,1871,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,2,"['clear', 'user experience']","['clearly', 'user experience']"
Usability,"ling test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions in `qutip.graph` were meant to be distinct from `Qobj`, so ideally they would be beyond our purview in this package. This actually has already lead to problems with the documentation, since the docstrings in; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L50-L53; and; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L71-L74; are out-of-date. I find that the only uses of `qutip.graph` are in `qutip.steadystate`, which uses `reverse_cuthill_mckee` and `weighted_bipartite_matching`. The former can be replaced directly with the `scipy` version, at the cost of ~10% speed. The latter is not yet in `scipy`, so we ought to perhaps keep it, since it is used and documented for `qutip.steadystate.steadystate`. All other functions in `qutip.graph` are not used, and not documented (and in `scipy` anyway). While obviously I don't want to trample on anybody's code, I think it might be worth co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:2688,clear,clear,2688,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['clear'],['clear']
Usability,"lution that works for both. > * What is the advantage of this over using the existing superoperator representations?. I don't think there is one, per se, in the same sense that there's no strict advantage to superoperators over Choi operators over χ operators — each is useful in different contexts, such that QuTiP supports all three in order to allow users to pick the right representation for their problem. Similarly, operator-sum decompositions of channels are quite common and are useful in some special circumstances (e.g.: expressing a Choi-rank–sparse channel without requiring a 4^n × 4^n matrix). In the Quantum Development Kit, for instance, we use `qutip.to_kraus` to express user-supplied superoperators, Choi operators, and χ operators in terms of an operator-sum decomposition that is then passed to the underlying open systems simulator. While the operator-sum decomposition is quite useful internally to the simulator, that's not a detail that we want to enforce upon users, such that QuTiP's support for multiple superoperator representations is quite useful in presenting a user-friendly interface for configuring noise models. > * Can this advantage be carryied over into, e.g., using solvers, eigenvalue finding, etc?. I'm not sure I entirely follow, sorry?. > * Would it be better to have a new object, sort of like QobjEvo but for sums rather than evolutions?. Perhaps, but at least for the operator-sum decomposition of channels, it would feel a bit weird to me to have superoperators, Choi operators and χ operators all have one Python type, but for Kraus representations to have a fully different Python type. Whether I represent Λ(ρ) by 0.9 𝟙ρ𝟙 + 0.1 𝑋ρ𝑋 or {√(0.9) 𝟙, √(0.1) 𝑋}, they both represent the same function from density operators to density operators. > * How do you see the various mathematical operations working?. My thought here would be that an operator-sum decomposition of a channel is just that: a representation of a channel. Thus, if `lambda_` is a `Qo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574:2508,user-friendly,user-friendly,2508,https://qutip.org,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574,1,['user-friendly'],['user-friendly']
Usability,"ly by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. That's an extremely exciting prospect! I'd love to be able to have internal sparse data for Qobj's that represent Hamiltonians/Liouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with nump",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:4063,simpl,simple,4063,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['simpl'],['simple']
Usability,"m any other complex value.). On 26 Apr 2014, at 18:55, Robert Johansson notifications@github.com wrote:. > OK, I see. complex_array_to_rgb could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function matrix_histogram_complex. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from matrix_histogram_complex you get something like; > ; > x = np.linspace(-5, 5, 100); > X, Y = np.meshgrid(x,x); > Z = X + 1j \* Y; > cdict = {'blue': ((0.00, 0.0, 0.0),; > (0.25, 0.0, 0.0),; > (0.50, 1.0, 1.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'green': ((0.00, 0.0, 0.0),; > (0.25, 1.0, 1.0),; > (0.50, 0.0, 0.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'red': ((0.00, 1.0, 1.0),; > (0.25, 0.5, 0.5),; > (0.50, 0.0, 0.0),; > (0.75, 0.0, 0.0),; > (1.00, 1.0, 1.0))}; > ; > cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); > norm = mpl.colors.Normalize(-pi, pi); > colors = cmap(norm(np.angle(Z))); > colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(); > ; > plt.imshow(colors, interpolation='none');; > which produces the following map of the complex plane:; > ; > compared to; > ; > plt.imshow(complex_array_to_rgb(Z), interpolation='none');; > which produces; > ; > Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41480460:2197,simpl,simple,2197,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41480460,2,['simpl'],['simple']
Usability,"m()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is other; or (; isinstance(other, Space); and self.size == other.size; and self.basis == other.basis; ); ); ```; so we'll almost invariably get the benefits right now, but we're rather more future-proof in the code. By analogy, it's clearly wrong to do `(1, 2) is (1, 2)` to compare tuples, even though `tuple` produces singletons in CPython (and that code will generally be `True`). The Python `tuple` class is basically what inspired me, and I'm 100% certain that the Python devs are smarter than I am, so we should probably stick with them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:3566,clear,clearly,3566,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['clear'],['clearly']
Usability,"ma_minus = 100000000; >; > epsilon = g*u*b/h*(2; > *cmath.pi) Delta = g*u*b_AC/h*(2*cmath.pi); >; > H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy; >; > print(abs(((w-w0)/(w)))*epsilon/2); >; > #note here the final time satisfies: omega*t_final = pi/2; > times=np.linspace(0, 0.0000001, 1000); >; > #our initial qubit state; > state0=(state_z_plus)/(np.sqrt(1)); >; > H/(2*cmath.pi); >; > results=q.mesolve(H, state0, times, c_ops=[cmath.sqrt(gamma_phi/2)*sz+; > cmath.sqrt(gamma_minus)*sm], e_ops=[sx, sy, sz], options=qutip_options); >; > fig, ax=plt.subplots(); > ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$'); > ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$'); > ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$'); > ax.set_xlabel(""time""); > ax.legend();; >; > import imageio; > def animate_bloch(values):; > b = q.Bloch(); > images=[]; > b.point_marker = ['o']; > b.point_size = [30]; > for i in range(len(values)):; > b.clear(); > b.add_states(values[i]); > b.add_states(values[:(i+1)],'point'); > beans = 'beans.png'; > b.save(beans); > images.append(imageio.imread(beans)); > imageio.mimwrite('beans.gif',images); >; > values = []; > for t in range(0,len(times),30):; > values.append((results.states[t])); > animate_bloch(values); >; > from IPython.core.interactiveshell import InteractiveShell; > InteractiveShell.ast_node_interactivity = ""all""; > from IPython import display; >; > from pathlib import Path; > gifPath = Path('beans.gif'); > with open(gifPath,'rb') as f:; > display.Image(data=f.read(), format='png'); >; > [image: g]; > <https://user-images.githubusercontent.com/29261370/105053116-36429880-5a36-11eb-978b-8804dd1e679e.PNG>; > [image: sp]; > <https://user-images.githubusercontent.com/29261370/105053129-3c387980-5a36-11eb-9c0d-da3fd30bbaf5.PNG>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/quti",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937:3457,clear,clear,3457,https://qutip.org,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937,1,['clear'],['clear']
Usability,made the use of progress bar in mcsolve optional. closes #219,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/220:16,progress bar,progress bar,16,https://qutip.org,https://github.com/qutip/qutip/pull/220,1,['progress bar'],['progress bar']
Usability,"matplotlib 3.4 has begun issuing some new deprecation warnings against some of the stuff we do in `bloch.py`. Simple reproducer from within `ipython --matplotlib`:; ```python; In [1]: import qutip; ...: b = qutip.Bloch(); ...: b.add_vectors([0, 1, 0]); ...: b.render(); ```; produces; ```; /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:451: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6. This is consistent with other Axes classes.; self.axes = Axes3D(self.fig, azim=self.view[0], elev=self.view[1]). /Users/jake/.anaconda3/envs/qutip/lib/python3.9/site-packages/qutip/bloch.py:59: MatplotlibDeprecationWarning:; The M attribute was deprecated in Matplotlib 3.4 and will be removed two minor releases later. Use self.axes.M instead.; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M); ```. This particular environment had `matplotlib==3.4.1`. The warnings themselves suggest fixes, however some care needs to be taken; I suspect that the additional keyword `auto_add_to_figure` might be new in matplotlib 3.4 (not sure about the `.M` attribute). We want to keep compatibility with at least `matplotlib>=3` (we don't want to picky so it's easy to use QuTiP with other packages), so it might be necessary to include a version test using `packaging.version.parse`. If someone could test whether that's necessary, that'd be great.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1503:110,Simpl,Simple,110,https://qutip.org,https://github.com/qutip/qutip/issues/1503,1,['Simpl'],['Simple']
Usability,"may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1655,learn,learn,1655,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['learn'],['learn']
Usability,"me build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19` this is due to the fact that on this platform `oldest-supported-numpy` (from `pyproject.toml`) defaults to 1.17.3, but `setup.cfg` requires `numpy>=1.19`. ### Code to Reproduce the Bug. ```shell; python -m pip install -v --upgrade qutip; ```. ### Code Output. ```shell; Using pip 24.0 from /home/defreule/.local/lib/python3.8/site-packages/pip (python 3.8); Defaulting to user installation because normal site-packages is not writeable; Requirement already satisfied: qutip in /usr/local/lib/python3.8/dist-packages (4.7.3); Link requires a different Python (3.8.10 not in: '>=3.9'): https://files.pythonhosted.org/packages/73/73/abcc185174ac6dbc7965e5aeb9418c163eafda704008ee795ee9cdc75e4a/qutip-5.0.2.tar.gz (from https://pypi.org/simple/qutip/) (requires-python:>=3.9); Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Running command pip subprocess to install build dependencies; Ignoring cython: markers 'python_version >= ""3.10""' don't match your environment; Collecting setuptools; Using cached setuptools-70.0.0-py3-none-any.whl.metadata (5.9 kB); Collecting packaging; Using cached packaging-24.0-py3-none-any.whl.metadata (3.2 kB); Collecting wheel; Using cached wheel-0.43.0-py3-none-any.whl.metadata (2.2 kB); Collecting cython<3.0.3,>=0.29.20; Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.1 kB); Collecting oldest-supported-numpy; Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB); Collecting scipy>=1.8; Using cached scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB); Collecting numpy==1.17.3 (from oldest-supported-numpy); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl.metadata (2.0 kB); INFO",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:1069,simpl,simple,1069,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['simpl'],['simple']
Usability,"mics of open quantum systems coupled to a coherent feedback loop with a time-delay. I decided to refer to this method as the ""memory cascade"" method in qutip. The method essentially maps the non-Markovian problem onto a cascaded chain of identical system, where each system in the chain represents a ""memory"" of a previous version of the system. There is a companion pull request to the qutip-notebooks repo with two new notebooks documenting the usage of these two modules, qutip/qutip-notebooks#21:. examples/example-transfer-tensor-method.ipynb; examples/example-coherent-delayed-feedback.ipynb. Together with code docstrings, these two notebooks should give a good idea of how the modules are to be used. As you will see in the notebooks, the TTM implementation has a user interface that closely mimicks the `mesolve` interface. The solver is called `ttmsolve` and has the following syntax (explained in more detail in the docstring and notebook):. ```; ttmsolve(dynmaps, rho0, times, e_ops=[], learningtimes=None, tensors=None, **kwargs); ```. where `dynamps` is a list of pre-computed dynamical maps to learn from, `rho0` is the initial state, `times` are the times at which to find the solution etc. The ""memory cascade"" implementation however, diverges a bit from this standard. In general I think it will be hard to have a kind of unified interface for different types of non-Markovian solvers, because unlike the Markovian case, there is no unified theoretical approach, and different solvers work in quite different ways. For the ""memory cascade"" implementation I chose a more object oriented style for the interface. The user first creates a `MemoryCascade` object, storing all the relevant parameters, and subsequently calls class methods to runs simulations. I personally like this style, and I think it is a general style that could be used across a great variety of solvers. I could however in addition write a function with a more `mesolve`-like interface. It can't, however, be iden",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405:1991,learn,learningtimes,1991,https://qutip.org,https://github.com/qutip/qutip/pull/405,1,['learn'],['learningtimes']
Usability,"minate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` tha",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5639,clear,clear,5639,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['clear'],['clear']
Usability,"modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g., the jump operator. Also, in `development-smesolve-tests`, the equations are already there for example. Block 23 is beautiful, and it could be reproduced in the tutorial. . * Similarly, a user guide entry would really enhance the adoption of these solvers. At a later stage, some more refined example applications could be provided. * Review is still ongoing, I will provide comments on the .py files and other solvers files. Help from other developers is welcome as these are massive changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:3824,guid,guide,3824,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['guid'],['guide']
Usability,"n QuTiP website's news section (http://qutip.org/news.html) and on the QuTiP google group (https://groups.google.com/forum/#!forum/qutip). . Below it is reported how we got there and the text we're adding to the governance. Before making any more official announcements, we thought it nice to ping the community watching this repository. . **Timeline regarding governance talks**:; * April 2018: QuTiP Joins NumFOCUS as an Affiliated Project (and since then participates in Google Summer of Code).; * September 2018: a slide presentation is shared among lead developers with ideas on QuTiP development and governance. ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * February 2019: The first QuTiP developers workshop is held in RIKEN, Wako, Japan, to discuss development and roadmap ([Link](https://docs.google.com/presentation/d/1lBfS7v4WxduvWy-rf1Vd-hSEeNOK4at91ALuaH58AnQ/edit?usp=sharing)); * 2019-2020: Seminars given in USA, Asia, and Europe about QuTiP and how the users community can get more engaged, collecting feedback on the package and project. ; * April-May 2020: Discussions for governance creation are revamped; * May-August 2020: First draft document created and circulated among core developers and project creators.; * Fall 2020: Feedback from NumFOCUS, Unitary Fund, update on the governance document. # QuTiP Governance Document. **<span style=""text-decoration:underline;"">The Project</span>**. QuTiP, the Quantum Toolbox in Python, is an open-source software to study and simulate quantum systems. It provides functionalities to define and simulate the dynamics of quantum systems and thus provides tools to develop an intuitive understanding of quantum mechanics. Apart from the educational aspect where QuTiP can be used to visualize and simulate simple quantum systems, there exists advanced functionalities that enable state-of-the-art research in open quantum systems using QuTiP. It provides the most compr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:3111,feedback,feedback,3111,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['feedback'],['feedback']
Usability,"n at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUC",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2114,clear,clear,2114,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['clear'],['clear']
Usability,"name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their own implementations, it puts the burden of maintain compatability on us, and takes it off downstream packages, who are able to define version requirements. For example, calling `otherlib.obj.toqobj()` and having it fail with QuTiP next.0 makes it clear that `otherlib` isn't compatible with QuTiP next, whereas `Qobj(otherlib.obj)` failing would (rightly) be taken as QuTiP being at fault, which stymies our development a little because we're forced to be more conservative than we otherwise would be with our constructor. This is going to be a particular problem with handling `dims`, since we're talking about completely changing the structure for how that's managed internally to help us in other parts of our library.; 4. what will happen with all the other keyword arguments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj.__init__` like normal, but now with our new `Qobj` instance as the argument. This would have a slightly nontrivial interaction with the `copy` keyword, I imagine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:2824,clear,clear,2824,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['clear'],['clear']
Usability,"ndarray(dtype=object)` arrays behaved when containing objects that all implemented `__array__`. To get around _some_ of these problems, they've introduced `__array_function__` and `__array_ufunc__`, though to me at best these are bandages. Those two concerns aren't immediately applicable in QuTiP, but they're sort of indicative of potential problems when using a `__qutip_qobj__` method implicitly in functions like `Qobj.__add__`. These are where it becomes very evident that Julia-style programming doesn't apply in the same way in Python. Python is only a single-dispatch language, so `a + b` will dispatch using the table of `a` predominantly, whereas `b + a` will dispatch on `b`. In a proper multiple-dispatch library the rules are separate to the classes, so neither class is called preferentially, there's just one rule and either library can define it. My point with this is that if `Qobj.__add__` has a case where it handles Qobj-like types, then we prevent the other library from overriding the method. Multi-methods like this simply don't work the same in Python as they do in Julia, so even if `Qobj` implements interfaces from a variety of other libraries, we'd never get good consistent behaviour with functions like this. Operations that ought to be commutative like `+` would become dependent on operand order. To some degree, implementing the interface would be a guarantee that an object would always be able to follow QuTiP's semantics, otherwise it would just be annoying to users - _sometimes_ an object would be able to be used implicitly, sometimes not. I know the ""Python way"" is supposedly ""try it and see"", but if you're doing any serious development, that quickly becomes unreasonable if a type works some times, but not others. The other part of the Python way is ""explicit is better than implicit"", and here having an explicit type conversion to me is just being explicit about which library's semantics you want to follow, which is easier to read and easier to debug.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108:1657,simpl,simply,1657,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108,1,['simpl'],['simply']
Usability,"ng like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is identical to `Seq(1, 2, 3, 4)` and `Seq(1, Par(2), 3)` is identical to `Seq(1, 2, 3)` but distinct from `Seq(1, Par(2, 3))`). One alternative may be to have a single subclass `Outcome` of `tuple` instead of both, then overload operators like `|` to mean parallel. Internally, could use two subclasses like `Seq` and `Par` but display visually as `Outcome(1, 2 | 3, 4)` instead of `Outcome(1, Par(2, 3), 4)`. > * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases like this where there are essentially an infinite number of possible constructors, it makes sense to not ""bless"" any of them by sticking them on the class. Sounds good, will move those out to be ordinary functions, then. > * It would be good to have one really nice use case that we could turn into a guide entry in the documentation. The current small examples are great, but it would be good to add one slightly bigger worked example that did something more ""exciting"". I've played around with using `if_` to compute the noisy channel one gets for state teleportation when operations are perfect but classical outcomes get scrambled; would that be useful, perhaps?. > * I would not push everything into the `qutip` namespace (largely because we would likely not want that in v5, although I should actually check what v5 is doing in `qutip.__init__` these days). Fair enough, easy to drop that as well. Would you want everything dropped, or would some things like the core type `QInstrument` itself be reasonable to keep in `qutip.__all__`?. > Hoping to hear comments from others!. Thanks for your review, I'll work on addressing, then excited to hear what others think as well! 💕",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:2875,guid,guide,2875,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['guid'],['guide']
Usability,"ng the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just process its options there. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:1633,clear,clear,1633,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,2,"['clear', 'simpl']","['clear', 'simpler']"
Usability,ng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-bench,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:2243,simpl,simplegeneric,2243,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['simpl'],['simplegeneric']
Usability,"np.inf; c_ops = (1/T_dephasing) * sigmaz(). ### Run simulation. tlist = np.linspace(0, 2, 10000); e_ops = [sigmaz()]; output = mesolve(H, psi0, tlist, c_ops = c_ops, e_ops = e_ops); Z_expectation = output.expect[0]; ```. ### Notes on system:. - The Hamiltonian is periodic and formed of two-pulses.; - H2 applies a full spin flip when applied for time 0.5, so if we start in a Z basis state then Z_expectation should change from +1 to -1 or vice versa. ### Problem:. - When I set c_ops = [], I get the expected behaviour of Z_expectation.; - When I set c_ops to be the zero matrix as in the code above, Z_expectation remains constant, even though this should give exactly the same result as setting c_ops = [].; - This effect seems to depend on the choice of initial state. For a random pure state, setting c_ops to be the zero matrix seems to give the correct result, but for a Z basis state I get the inconsistency.; - This effect is not reproduced by the Monte Carlo based solver, mcsolve. However, I would like to use mesolve if possible because it is much faster for the systems I am considering. ### Some further notes:. - I think this is something to do with the fact that the Hamiltonian is time-dependent. ; - If I just simulate H2, then Z_expectation oscillates as expected. ; - Additionally, if I swap the order of H1 and H2 in the Hamiltonian, then I get the correct result.; - Setting c_ops as the zero matrix results in a much quicker simulation time than setting c_ops = []. This seems somewhat counter-intuitive, since I thought setting c_ops as the zero matrix would force the program to simulate the evolution of the density matrix rather than the state vector.; - Given this, I wonder if mesolve is making an approximation to speed up the calculation which is not valid here. I would very much appreciate any insights into where this inconsistency comes from, and how to fix it. Since mcsolve does not reproduce it, I think this might be an issue with mesolve. Many thanks,. Oliver",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/898:3017,intuit,intuitive,3017,https://qutip.org,https://github.com/qutip/qutip/issues/898,1,['intuit'],['intuitive']
Usability,"np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:00; 80.0%. Run time: 0.10s. Est. time left: 00:00:00:00; 100.0%. Run time: 0.12s. Est. time left: 00:00:00:00. /home/eric/miniconda3/lib/python3.9/site-packages/tensorflow/python/framework/ops.py:1128: ComplexWarning: Casting complex values to real discards the imaginary part; return float(self._numpy()). Total run time: 0.12s; CPU times: user 15.9 s, sys: 174 ms, total: 16 s; Wall time: 16.1 s. <tf.Tensor: shape=(5,), dtype=complex128, numpy=; array([-0.17340122+2.03548130e-09j, -0.18075013+2.08120101e-09j,; -0.19236081+1.58339267e-08j, -0.18075012+1.12229134e-08j,; -0.17648842-7.47414642e-08j])>; ```; So while slow, it works.; Maybe adding simpler runge-kutta method and / or support for [tensorflow's ode](https://www.tensorflow.org/probability/api_docs/python/tfp/math/ode/Solver) could make it more usable. **Related issues or PRs**; Build on top of #1644. **Changelog**; Remove casting of coefficients to complex.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:3498,simpl,simpler,3498,https://qutip.org,https://github.com/qutip/qutip/pull/1816,2,"['simpl', 'usab']","['simpler', 'usable']"
Usability,"nstructors when passed sequences of objects that all implement `__array__`. It is still possible to make a Numpy array of `Qobj` even with `Qobj.__array__` defined in Numpy 1.20, but you have to be rather more indirect about it:. ```python; >>> arr = np.empty((3,), dtype=object); >>> arr[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; >>> arr.shape; (3,); >>> arr[0]; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. The reason numpy does this now is because (my understanding is that) defining `__array__` was meant to be a much stronger guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:2422,clear,clearly,2422,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['clear'],['clearly']
Usability,"nt some time updating it yesterday, but was quite a rigmarole, and the solution is sub-optimal:; 1. Update modules and functions in `QuTiP_tree_plot/qutip-structure.py`; 2. Run `QuTiP_tree_plot/qutip-structure.py`, which updates `QuTiP_tree_plot/d3_data/qutip.json`; 3.a. Open `QuTiP_tree_plot/qutip_org.html` (this only seemed to work with Firefox browser); 3.b. Print to PDF, save as `guide/doc/qutip_tree.pdf`; 4. Somehow crop `qutip_tree.pdf` and export as `guide/figures/qutip_tree.png`. In general we would like to automate this process, so that when the docs are built, the tree is rebuilt automatically. Task 1: make `qutip_org.html` open in all browsers. Task 2: Auto-generate the `qutip.json` when the API docs are built.; The API function docs are built from `apidoc/functions.rst`. It would be much better if we only needed to add new functions in this doc, and it output the `qutip.json` when it gets built. Task 3: embed `qutip_org.html` in the HTML docs and somehow in the PDF docs; Now it would be much better if when the `guide-overview.rst` were build that the HTML in `qutip_org.html` were embedded in the resulting `guide-overview.html` rather than the PNG as is now. More tricky is how this can be embedded in the PDF docs. Task 4: link to the API docs (this is probably quite tricky); If Task 2 is possible, then I guess it should be possible to add links to the API docs. Task 5: Have something similar to the function tree for classes. All in all this is far to hard to be worth doing just for the QuTiP docs, but I assume that lots of other projects would like to have this function tree in their docs, so you might think someone would add this feature to Sphinx. Maybe someone already has. I would suggest that a good first step would be to investigate this, and if not ask a question on their Github; https://github.com/sphinx-doc/sphinx/issues. If no-one has picked this up after a few months, then we will just add the instructions (steps 1 to 4) above to the readme and ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525:1176,guid,guide-overview,1176,https://qutip.org,https://github.com/qutip/qutip/issues/1525,1,['guid'],['guide-overview']
Usability,"ntermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Instead, I have a nested list like `[L0, [L1, control1], ...]` where `L0`, `L1`, ... are super-operators. I should also note that I use `mesolve` both for Schrödinger equations and Lindblad equations (relying on `mesolve` delegating to `sesolve`), and the Krotov package uses `H` as a variable/attribute name to refer to nested-Lindbladians or nested Hamiltonians interchangeable. Sorry if that's causing a bit of confusion. I am ultimately interested both in open system and closed system dynamics interchangeably. > [...] In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:1893,clear,clear,1893,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['clear'],['clear']
Usability,"och = qutip.Bloch(); bloch.add_vectors([0,0,1]); bloch.vector_style = ''; bloch.show(); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); Input In [4], in <cell line: 4>(); 2 bloch.add_vectors([0,0,1]); 3 bloch.vector_style = ''; ----> 4 bloch.show(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:883, in Bloch.show(self); 868 def show(self):; 869 """"""; 870 Display Bloch sphere and corresponding data sets.; 871 ; (...); 881 in the cell you create the figure in.; 882 """"""; --> 883 self.render(); 884 if self.run_from_ipython():; 885 display(self.fig). File ~/git_repo/qutip/qutip5/qutip/bloch.py:677, in Bloch.render(self); 675 self.plot_back(); 676 self.plot_points(); --> 677 self.plot_vectors(); 678 self.plot_lines(); 679 self.plot_arcs(). File ~/git_repo/qutip/qutip5/qutip/bloch.py:779, in Bloch.plot_vectors(self); 775 color = self.vector_default_color[idx]; 777 if self.vector_style == '':; 778 # simple line style; --> 779 self.axes.plot(xs3d, ys3d, zs3d,; 780 zs=0, zdir='z', label='Z',; 781 lw=self.vector_width, color=color,; 782 alpha=alpha); 783 else:; 784 print(; 785 xs3d, ys3d, zs3d,; 786 self.vector_mutation,; (...); 789 color,; 790 alpha). File ~/.virtualenvs/qutip5/lib/python3.10/site-packages/mpl_toolkits/mplot3d/axes3d.py:1490, in Axes3D.plot(self, xs, ys, zdir, *args, **kwargs); 1488 zs, *args = args; 1489 if 'zs' in kwargs:; -> 1490 raise TypeError(""plot() for multiple values for argument 'z'""); 1491 else:; 1492 zs = kwargs.pop('zs', 0). TypeError: plot() for multiple values for argument 'z'; ```. ### Expected Behaviour. it should draw a line. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+9bb7c7a; Numpy Version: 1.22.4; Scipy Version: 1.8.1; Cython Version: None; Matplotlib Version: 3.5.2; Python Version: 3.10.4; Number of CPUs: 8; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1916:1342,simpl,simple,1342,https://qutip.org,https://github.com/qutip/qutip/issues/1916,1,['simpl'],['simple']
Usability,"oeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests should probably be skipped if there is a dependency missing? (Just like they already are if cython is missing.) ; In case they are not skipped, the reason for the failure should somehow become more clear. Regarding the actual behavior, qutip could print a warning if `cython` is installed and `filelock` is not, but I am not sure whether that would be a good idea. ---. For completeness, my `qutip.about()` output:. ```; QuTiP Version: 5.0.0.dev0+7892453; Numpy Version: 1.24.3; Scipy Version: 1.10.1; Cython Version: 0.29.33; Matplotlib Version: 3.7.1; Python Version: 3.11.3; Number of CPUs: 16; BLAS Info: INTEL MKL; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/paul/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:9213,clear,clear,9213,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['clear'],['clear']
Usability,"ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... ERROR; correlation: legacy me and es for oscillator in steady-state ... ok; correlation: comparing me and es for oscillator in steady-state ... ok; correlation: legacy spectrum from es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:1431,simpl,simple,1431,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['simpl'],['simple']
Usability,"on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> he",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:2043,guid,guide,2043,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,"or (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:3805,simpl,simple,3805,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,"or ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4133,simpl,simple,4133,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,"or instance, if we start from the most excited state for N = 2,; >; > Here where you give an example you could use the; >; > Example; > -----------; >; > heading. It formats nicely in the docs; > see:; > http://qutip.org/docs/latest/apidoc/functions.html#quantum-states; > file qutip.states.py; > for example; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168800674>:; >; > > + -------; > + identity: Qobj matrix (QuTiP class); > + With the correct dimensions (dims); > + """"""; > + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:7390,clear,clear,7390,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['clear'],['clear']
Usability,"or list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H with constant collapse ... ok; > > > Monte-carlo: Constant H with single collapse operator ... ok; > > > Monte-carlo: Constant H with single expect operator ... ok; > > > Monte-carlo: Collapse terms constant (func format) ... ok; > > > Monte-carlo: Collapse terms constant (str format) ... ok; > > > Monte-carlo: Time-dependent H (func format) ... ok; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:3454,simpl,simple,3454,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"orly documented. For example, for the functions `optimize_pulse` and `optimize_pulse_unitary` there are 'params' arguments for many of the underlying classes, but it's not at all clear what count as valid key value pairs for each class.; ```python; Parameters; ----------; alg_params : Dictionary; options that are specific to the algorithm see above; ; optim_params : Dictionary; The key value pairs are the attribute name and value; used to set attribute values; Note: attributes are created if they do not exist already,; and are overwritten if they do.; Note: method_params are applied afterwards and so may override these. method_params : dict; Parameters for the optim_method. ; Note that where there is an attribute of the; Optimizer object or the termination_conditions matching the key ; that attribute. Otherwise, and in some case also, ; they are assumed to be method_options; for the scipy.optimize.minimize method. . dyn_params : dict; Parameters for the Dynamics object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. prop_params : dict; Parameters for the PropagatorComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. fid_params : dict; Parameters for the FidelityComputer object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created. init_pulse_params : dict; Parameters for the initial / guess pulse generator object; The key value pairs are assumed to be attribute name value pairs; They applied after the object is created; ```. As a further example, `dyn_params` is passed to a `Dynamics` object which stores it locally in `self.params`, but there isn't any checking of valid keys and values, and I can't find a function which actually uses whatever these params are set to. It's really difficult to run a top-level routine that creates all these objects which you have no clear control over.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1284:2062,clear,clear,2062,https://qutip.org,https://github.com/qutip/qutip/issues/1284,1,['clear'],['clear']
Usability,"ospection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:1846,clear,clearly,1846,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['clear'],['clearly']
Usability,"ossible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages or; > commonly used language e.g. through quantum assembly language (qasm); > ----------------------------------------------------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2780,simpl,simple,2780,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['simpl'],['simple']
Usability,"passes _all_ the information in one go:; ```python; out = Qobj(left.data + right.data,; copy=False,; dims=left.dims,; type=left.type,; isherm=left._isherm and right._isherm); ```; This is more verbose, but significantly faster. With no other changes to the code, doing this can save around one-quarter of the overhead on several `Qobj` operations. Moving to the new data-layer types also gets large improvements in instantiation time. This is fine, except for matrix multiplication of tensor structures. In these, like in the example above, the matrix multiplication can cause tensor structures to contract, and so they then become incompatible with their previous Hilbert spaces. If we instead maintain a _list_ of `'type'` and introduce a `'scalar'` type, such objects can sensibly be broadcast back up to the correct size when needed, treating the spaces containing as identities of the correct dimension. I envisage that this may have some nice use-cases within `qip`, for example a gate on a single qubit could be represented by a two-by-two matrix with all other dimensions scalars, rather than requiring the whole Hilbert space to be represented all the time. Optimisations can be done using only the required elements of the subspace, and only broadcast up to the full representation once at the end. Further, we can ease the burden of parsing the dimensions in the first place. I haven't fully attempted this yet so I don't have full details on this, but I imagine there is some internal information we can keep after a single parsing pass that will make other operations simpler. This is particularly true of super-operators, which often care about the input and output shapes of the spaces, necessitating several more calls to `np.prod`. Since this information _has_ to be computed at type-inference time, it's easy to save it and remove the overhead. I'd propose having this type be internal, something like `dimensions.Parsed` and storing it as a protected attribute on `Qobj` instances.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:9612,simpl,simpler,9612,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['simpl'],['simpler']
Usability,"pi*x/w)) * ((x+w/2.)>0) * ((-x+w/2.)>0) * \; np.exp(1j*phase- 2j*np.pi*df*x). c_x = lambda t, arg: cosine_pulse(t, t0=piLen/2.0, amp=0.5*piAmp)+\; cosine_pulse(t, t0=1.0*piLen+piLen/2.0, amp=0.5*piAmp). c_x_bug = lambda t, arg: cosine_pulse(t, t0=piLen/2.0, amp=0.5*piAmp)+\; cosine_pulse(t, t0=3.0*piLen+piLen/2.0, amp=0.5*piAmp). pulse_set = [c_x, c_x_bug]; bloch_set = []. def test_mesolve(time_test=np.arange(0,100,0.5), show_seq=True, bloch=True):; if show_seq:; plt.figure(figsize=(10,5)); for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test,pulse_set[idx](time_test,None),label=name); plt.legend(loc=1); plt.xlabel('time'); plt.show(). for idx, name in zip(range(len(pulse_set)), ['c_x', 'c_x_bug']):; H = [Hsys['Hq'],[Hsys['Hc_x'], pulse_set[idx]]]; result = qu.mesolve(H, psi0, time_test, Hsys['Hlbld'],; [qu.sigmax(), qu.sigmay(), qu.sigmaz()],; progress_bar=None, options=None); b = qu.Bloch(); b.clear(); Pg, Pe = [], []; qu_blochs = result.expect; plt.title('probability of excited state'); for i,j,k in zip(qu_blochs[0],qu_blochs[1],qu_blochs[2]):; points = [i,j,k]; b.add_points(points); P0, P1 = (1+k)/2.0, (1-k)/2.0; Pg.append(P0); Pe.append(P1); plt.subplot(len(pulse_set),1,idx+1); plt.plot(time_test, Pe, label=name); plt.legend(loc=1); bloch_set.append(b); plt.xlabel('time'); plt.show(); if bloch:; bloch_set[0].show(); bloch_set[1].show(); return result. # to run the test:; test_mesolve(time_test=np.arange(0,100,0.5), show_seq=True, bloch=False); ```. The terminal out put is; ```; ![sequence](https://user-images.githubusercontent.com/41005903/82047831-11976380-96e6-11ea-869d-7278ba1cbeaa.png); ![probability](https://user-images.githubusercontent.com/41005903/82047837-12c89080-96e6-11ea-98d6-0ba6528a50ad.png); ```. **Expected behavior**; As discussed above. **Your Environment**. QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1265:2076,clear,clear,2076,https://qutip.org,https://github.com/qutip/qutip/issues/1265,1,['clear'],['clear']
Usability,"pillow/Pillow/issues/5567"">#5567</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit TIFF strip size when saving with LibTIFF <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5514"">#5514</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Allow ICNS save on all operating systems <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4526"">#4526</a> [<a href=""https://github.com/newpanjing""><code>@​newpanjing</code></a>]</li>; <li>De-zigzag JPEG's DQT when loading; deprecate convert_dict_qtables <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4989"">#4989</a> [<a href=""https://github.com/gofr""><code>@​gofr</code></a>]</li>; <li>Do not use background or transparency index for new color <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5564"">#5564</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Simplified code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5315"">#5315</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Replaced xml.etree.ElementTree <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5565"">#5565</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a hr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:3687,Simpl,Simplified,3687,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['Simpl'],['Simplified']
Usability,"plicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:3932,clear,clear,3932,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,2,['clear'],['clear']
Usability,"plotlib/backends/backend_tkagg.py"", line 540, in resize; self.canvas._tkcanvas.master.geometry(""%dx%d"" % (width, height)); File ""/Users/tilek/miniconda2/lib/python2.7/lib-tk/Tkinter.py"", line 1668, in wm_geometry; return self.tk.call('wm', 'geometry', self._w, newGeometry); _tkinter.TclError: can't invoke ""wm"" command: application has been destroyed; ```. When I try to execute the code from the User Guide as a complete .py Python file (see below) ; it produces first bloch_0.png file where it is supposed to, but then shows the same error.; ```; import numpy as np; from qutip import *; from scipy import *. def qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist):; # operators and the hamiltonian; sx = sigmax(); sy = sigmay(); sz = sigmaz(); sm = sigmam(); H = w * (cos(theta) * sz + sin(theta) * sx); # collapse operators; c_op_list = []; n_th = 0.5 # temperature; rate = gamma1 * (n_th + 1); if rate > 0.0: c_op_list.append(sqrt(rate) * sm); rate = gamma1 * n_th; if rate > 0.0: c_op_list.append(sqrt(rate) * sm.dag()); rate = gamma2; if rate > 0.0: c_op_list.append(sqrt(rate) * sz). # evolve and calculate expectation values; output = mesolve(H, psi0, tlist, c_op_list, [sx, sy, sz]); return output.expect[0], output.expect[1], output.expect[2]. ## calculate the dynamics; w = 1.0 * 2 * pi # qubit angular frequency; theta = 0.2 * pi # qubit angle from sigma_z axis (toward sigma_x axis); gamma1 = 0.5 # qubit relaxation rate; gamma2 = 0.2 # qubit dephasing rate; # initial state; a = 1.0; psi0 = (a* basis(2,0) + (1-a)*basis(2,1))/(sqrt(a**2 + (1-a)**2)); tlist = linspace(0,4,250); #expectation values for ploting; sx, sy, sz = qubit_integrate(w, theta, gamma1, gamma2, psi0, tlist). b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; print 'len(sx) is ', len(sx); for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp') #saving images to temp directory in current working directory; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796:3112,clear,clear,3112,https://qutip.org,https://github.com/qutip/qutip/issues/796,1,['clear'],['clear']
Usability,"ptions` class, is the way in v4 and will probably stay that way for a while. Having a options not knowing about the solver let it accept bad options and typos. Also it hides the options documentation: solver's options could be in the `??solve` function, but not integrator options. The integrator was merged into the solver in v4 and is not made to be used directly by the average user. So the user should not need to know they exist to use qutip, nor refer to them directly to see which options are supported. I'm not sure I am quite following, but my thought was that options would be checked by the solver class when they are passed in. The mechanism the solver class would use for doing the check, would be to pass the description of the allowed options to the SolverOptions class, along with the options themselves. > Not sure I understand why this would be convenient, flat seems a easier to use and less confusing. Ideally the user should not need to know that there are 2 levels of options. The reason for nesting the ode options a little, is to make it clear which options might change if the ODE method changes. If one hides the structure completely, there is nothing to guide the user as to which options are related to what. E.g. If ODE method ""A"" took option ""opt1"" and method ""B"" took ""opt2"" then it's much clearer what is happening if one has to pass `""ode"": {""method"": ""A"", ""opt1"": 1}` and `""ode"": {""method"": ""B""}` than `""method"": ""A"", ""opt1"": 1"" and `""method"": ""B"", ""opt2"": 2`. In the flat case, one might accidentally have `""method"": ""B"": ""opt1"": 1` and ""opt1"" would be ignored. I am not too hung up on the exact approach for this bit though -- I just want it to be clear to the user what is going wrong, and for it to be a little be hard to options for different ODE methods clash with each other or other solver options. I wrote quite a lot in my previous post, but mostly I was suggesting one way to simplify and disentangle things more. I am happy for use to try other ways too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647:1233,clear,clear,1233,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647,5,"['clear', 'guid', 'simpl']","['clear', 'clearer', 'guide', 'simplify']"
Usability,"py` should stay there. It stands out from all other modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g., the jump operator. Also, in `development-smesolve-tests`, the equations are already there for example. Block 23 is beautiful, and it could be reproduced in the tutorial. . * Similarly, a user guide entry would really enhance the adoption of these solvers. At a later stage, some more refined example applications could be provided. * Review is still ongoing, I will provide comments on the .py files and other solvers files. Help from other ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:3094,intuit,intuitive,3094,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['intuit'],['intuitive']
Usability,"python; b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```. With `b.clear()` we erase the points and vectors in the image, which is nice for updating the data, but What if I want to update also the attributes of the Bloch sphere?. To give an example let's say that I want the viewing angle of the Bloch sphere to smoothly change throughout the animation. I can define a function like so:. ```python; def bloch_camera_path(t, dt, azim_0, azim_f, elev_0, elev_f):; azim = ((azim_f-azim_0)/dt)*t+azim_0; elev = ((elev_f-elev_0)/dt)*t+elev_0; return [azim, elev]; ```. This function changes the viewing angle across time from the initial `[azim_0, elev_0]` configuration to the final `[azim_f, elev_f]` configuration in a linear manner. So I thought that by doing. ```python; b = Bloch(); b.vector_color = ['r']; for i in range(len(t)):; b.clear(); b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```; My animation would had that change in position of the ""camera"", but the result is just as if `b.view` wouldn't update. The only way I can make this work is by making a new bloch sphere on each iteration and defining all the attributes again and again (which I find highly inconvenient in terms of speed), like so;. ```python; import os. for i in range(len(t)):; b = Bloch(); b.vector_color = ['r']; b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(os.getcwd()+'/temp/bloch_'+str(i)+'.png', dirc='temp'); b.clear(); ```. Could Qutip be modified so that attributes (such as viewing angle or the color of vectors) can be updated in the way I showed before? So that we don't have to create a new bloch sph",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1106:1235,clear,clear,1235,https://qutip.org,https://github.com/qutip/qutip/issues/1106,1,['clear'],['clear']
Usability,"quest unless otherwise informed. I'm going to submit another pull request, and it should be much better this; time. I made these changes:. - Fixed whitespace, blank line, and linting issues as far as I can tell; - I'm not sure that I broke lines up entirely the best way in all ; cases, but I think it looks okay enough as of now.; - Took all of my new functions out of floquet.py and placed them; properly into flimesolve.py; - The version of floquet.py that I'll be submitting was one I; directly copy-pasted from the main repository, such that there; shouldn't be any changes whatsoever to it; - replaced all scipy functions with numpy equivalents; - Fixed the issues in correlation.py, as far as I know; - Turns out the issue here was that I never updated correlation.py to; my most current version, which should only add in flimesolve as an option; for solvers (with an if statement or two to get the Hamiltonian into a; FloquetBasis object if flimesolve is the selected solver). Thanks again for your feedback!. On Mon, Jun 26, 2023 at 6:32 PM Fenton Clawson ***@***.***> wrote:. > Hey Eric,; >; > Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Somet",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:1233,feedback,feedback,1233,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['feedback'],['feedback']
Usability,qutip-doc/guide/scripts/floquet_ex3.py raises an exception in `floquet_master_equation_tensor`; ```; TypeError: Qobj data must be in fast_csr format.; ```; This should have been picked up by a test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/624:10,guid,guide,10,https://qutip.org,https://github.com/qutip/qutip/issues/624,1,['guid'],['guide']
Usability,"qutip.floquet does this floquet formalism supports any hamiltonian or just it works for two level systems? Also the code uploaded is not working, how to plot this wigner function? as an initial learning point. Floquet formalism is totally not working fro me. plz help",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-355746265:194,learn,learning,194,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-355746265,1,['learn'],['learning']
Usability,qutip/qutip wiki duplicates qutip-doc development guidelines,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1135:50,guid,guidelines,50,https://qutip.org,https://github.com/qutip/qutip/issues/1135,1,['guid'],['guidelines']
Usability,"r guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method for converting `Qobj` to `ndarray` - `Qobj.full()`, similar to `scipy`'s `spmatrix.toarray()` - so `Qobj.__array__` was never a _necessity_, just a convenience in some workflows. Given the tools we can use to suppress the ufunc behaviour, the only question we need to decide on is whether that particular convenience (converting a single `Qobj` to `ndarray` with `np.array` rather than `Qobj.full`) is worth the loss of another (it's now rather faffy to put `Qobj` into an `ndarray`). Both have simple alternatives and I'll go along with either, though my personal preference is not to define `Qobj.__array__`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:3876,simpl,simple,3876,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['simpl'],['simple']
Usability,"r']; b.view = [-40,30]; for i in range(len(sx)):; b.clear(); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```. With `b.clear()` we erase the points and vectors in the image, which is nice for updating the data, but What if I want to update also the attributes of the Bloch sphere?. To give an example let's say that I want the viewing angle of the Bloch sphere to smoothly change throughout the animation. I can define a function like so:. ```python; def bloch_camera_path(t, dt, azim_0, azim_f, elev_0, elev_f):; azim = ((azim_f-azim_0)/dt)*t+azim_0; elev = ((elev_f-elev_0)/dt)*t+elev_0; return [azim, elev]; ```. This function changes the viewing angle across time from the initial `[azim_0, elev_0]` configuration to the final `[azim_f, elev_f]` configuration in a linear manner. So I thought that by doing. ```python; b = Bloch(); b.vector_color = ['r']; for i in range(len(t)):; b.clear(); b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(dirc='temp'); ```; My animation would had that change in position of the ""camera"", but the result is just as if `b.view` wouldn't update. The only way I can make this work is by making a new bloch sphere on each iteration and defining all the attributes again and again (which I find highly inconvenient in terms of speed), like so;. ```python; import os. for i in range(len(t)):; b = Bloch(); b.vector_color = ['r']; b.view = bloch_camera_path(t[i], t[-1]-t[0], -80, -70, 45, 40); b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save(os.getcwd()+'/temp/bloch_'+str(i)+'.png', dirc='temp'); b.clear(); ```. Could Qutip be modified so that attributes (such as viewing angle or the color of vectors) can be updated in the way I showed before? So that we don't have to create a new bloch sphere on each iteration of the animation?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1106:2046,clear,clear,2046,https://qutip.org,https://github.com/qutip/qutip/issues/1106,1,['clear'],['clear']
Usability,"r(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + return total_R_tensor; > +; > +; > +def flimesolve(; > + H,; > + rho0,; > + taulist,; >; > ⬇️ Suggested change; >; > - taulist,; > + tlist,; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610703>:; >; > > + time_sense=0,; > + quicksolve=False,; > + options=None):; > + """"""; > + Parameters; > + ----------; > +; > + H :",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:3305,learn,learned,3305,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['learn'],['learned']
Usability,"r. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5""><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>; <li><a href=""https://github.com/psf/requests/commi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:4596,guid,guide,4596,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,"re those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of all N quantum trajectories ρ(t)'s expect (**Tr[ρ(t)A] maybe with different dW**), and on the other hand I want to compare the expected average of N quantum trajectories with the result of the master equation(`mesolve.expect`). This is similar to this code in Note (but the result in [Note](https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v4/time-evolution/016_smesolve-inefficient-detection.ipynb) is `result.measurement`). `fig, ax = plt.subplots(figsize=(8, 4)). for m in result.measurement:; ax.plot(times, m[:, 0].real, ""b"", alpha=0.025). ax.plot(times, result_ref.expect[1], ""k"", lw=2). ax.set_ylim(-25, 25); ax.set_xlim(0, times.max()); ax.set_xlabel(""time"", fontsize=12); ax.plot(times, np.array(result.measurement).mean(axis=0)[:, 0].real, ""b"", lw=2);`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:1816,simpl,simply,1816,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['simpl'],['simply']
Usability,"reated it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There is a bug in eigh on mac with openblas. --> **Switched to <code>qutip.sparse.eigh</code>**; * [x] What does this <code>optimizer</code> function optimize? Could you add a simple description. --> **This functions finds the optimal number of Lanczos algorithm iterations inside Krylov, added as small description**; * [x] <code>_estimate_norm</code> is nerver used. --> **Removed**; * [x] Why is tlist here and not in solve? It seems strange that you can reuse one instance for multiple H and psi0, but you cannot change tlist. --> **Removed when deprecating <code>KSolve</code> class**; * [x] Why do you need KSolve? --> **It was a workaround to the cognitive complexity check of github. But we decided to revert back to a non Class solver, as it adds another type of complexity.**; * [x] Increasing pdx here when it is already controlled by enumerate is strange. The best would be to include the first partition here too. Otherwise using update_progress_bar(pdx + 1) is clearer. --> **Changed ""pdx"" into ""idx"". Added the first lazy iteration inside the loop, now it is more clear with <code>update_progress_bar(idx)</code>.**; * [x] There is no work done between update_progress_bar(0) and update_progress_bar(1). Did you start it? --> **Fixed simultaneously by the previous change.**; * [x] Shouldn't this also double the last element? prepare_next_step remove the first and last so the last state is not stored. --> **Good catch, it was a bug. Fixed.**; * [x] <code>_happy_breadkown</code> never used... --> **Should be fixed, performing extra checks**; * [x] evolved states It should keep the input state dims. --> **Checked all situations that came to mind and output dimensions seem to be working properly.**; * [x] Why import <code>mcsolve</code>? --> **Removed**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:2988,clear,clearer,2988,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,2,['clear'],"['clear', 'clearer']"
Usability,restore the old text based progress bar as default,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/256:27,progress bar,progress bar,27,https://qutip.org,https://github.com/qutip/qutip/pull/256,1,['progress bar'],['progress bar']
Usability,"rivate-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.D6pMkAw1y3WWyirs_J8dFthmGjY4V6rIMr6JUHYZ19Y). Thank you for being so clear with the explanation, now I am able to build the html. I have done this upd",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:1202,guid,guide,1202,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,2,['guid'],"['guide', 'guide-tensor']"
Usability,"rlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5434,simpl,simple,5434,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"rs, and the result with `rho0` as a density matrix is compared to the result for `rho0` being the identity super-operator, by comparing the fidelity of the resulting states in each respective case. The reason the tests are a little bit slow compared to, e.g., the tests in `TestMESolveTDDecay` is the computation of the fidelity of the states at all the different times. If you think the tests are too slow, i can change them, and for example only check the fidelity of the final state. As a side note: As I wrote this new functionality, I also ran some simple tests comparing a pure python implementation of the right hand side for `_mesolve_const` to the cython implementation (I did this because I was considering how much cython code I had to write, or if a pure python implementation of the new functionality would suffice). I actually found that a pure python implementation was as fast (or maybe slightly _faster_) than the cython implementation. The pure python implementation of the right hand side is simply (see lines 767-769 of mesolve.py). ``` python; def _ode_rho_test(t, rho, data):; # for performance comparison of cython code; return data*(np.transpose(rho)); ```. Here is a plot of the performance compare to the standard cython implementation for a very simple test. The benchmark was a damped-cavity JC-model with Hilbert space dimension 4 for the cavity, integrated up to ""integration time"". ""run time"" is the real run time on my laptop. ![benchmark](https://cloud.githubusercontent.com/assets/2354542/11615553/48fe8604-9c32-11e5-83b9-2de366bd3cef.png). Since there is no big difference between the cython implementation and the pure python implementation (if anything, the pure python implementation is slightly faster), maybe it makes sense to replace the call to `cy_ode_rhs` with a call to `_ode_rhs_test` (see lines 744 to 747 in mesolve.py)? This makes the code a tiny bit easier to read. Of course, this was a single, very simplistic test. Sorry about all the merge commits",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404:1329,simpl,simply,1329,https://qutip.org,https://github.com/qutip/qutip/pull/404,1,['simpl'],['simply']
Usability,"rsonally envisage an ecosystem where one can write down an hamiltonian in the tool of choice, obtain the exact time evolution with qutip, and maybe have a look at it’s semiclassical trajectory. Jump into netket and check if a variational representation can properly capture the correlations. Trotterize the hamiltonian and get a circuit, without worrying about how to convert from one framework to the other. . I want to start the discussion on this topic eagerly because I am aware that it will take a fairly long time. If there is anything I can do to make your future internal discussions easier, do let me know. > I just want to caution you in case you're trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > T",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1256,simpl,simply,1256,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['simpl'],['simply']
Usability,"s (not sure what the most appropriate subpackage would be):. - `depolarizing_channel(strength : float, dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the depolarizing noise channel Λ(ρ) = (1 − 𝑝) ρ + 𝑝 (𝟙 / 𝑑), where 𝑑 is the dimension of ρ. Defaults to returning single-qubit channels. For example, `depolarizing_noise(1.0)` would map all input states to the maximally mixed state `qutip.qeye(2).unit()`.; - `pauli_channel(paulis : Union[Dict[str, float], List[float]], dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the Pauli channel Λ(ρ) = Σᵢ 𝑝ᵢ 𝑃ᵢ ρ 𝑃ᵢ, where {𝑝ᵢ} are the coefficients of each Pauli operator and where each 𝑃ᵢ is a Pauli operator. For example, `pauli_channel([0.9, 0, 0, 0.1])` would represent 10% dephasing noise along the 𝑍 axis, and could also be written as `pauli_channel({'I': 0.9, 'Z': 0.1})`. The `dims` input would be restricted to only allow elements of the form `2 ** nq` for `nq` a nonnegative integer.; - `amplitude_damping_channel(strength : float, dims : Optional[List[int]] = None) -> Qobj`: Returns a representation of the amplitude damping channel Λ(ρ) = (1 − γ) ρ + γ |0⟩⟨0|.; - `generalized_amplitude_damping_channel(strength : float, fixed_point : Qobj) -> Qobj`: Returns a representation of the generalized amplitude damping channel Λ(ρ) = (1 − γ) ρ + γ ρ\_\*, where ρ\_\* is given by `fixed_point`. It may also be good to consider introducing a function to represent simple overrotation channels (e.g.: ∫ 𝑒^{−𝑖𝐻θ} Pr(θ) 𝑑θ), perhaps by Monte Carlo sampling. **Describe alternatives you've considered**. - Allow specifying channels by fidelity rather than strength; e.g. `average_gate_fidelity(depolarizing_channel(fidelity=0.95))` would be guaranteed to be close to 0.95.; - Combining `amplitude_damping_channel` and `generalized_amplitude_damping_channel` into a single function, distinguished by making `fixed_point` have type `Optional[Qobj]`, with a default of `basis(dims, 0) * basis(dims, 0).dag()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1676:2081,simpl,simple,2081,https://qutip.org,https://github.com/qutip/qutip/issues/1676,1,['simpl'],['simple']
Usability,"s is that some people would like to see `dims` removed, or make mathematical operations effectively ignore it. ## Solutions. ### Rejections. Personally, I think enforcing the tensor product structure catches a whole lot of potential issues in code when working with objects in different Hilbert spaces, and so far I've not actually seen any examples where I think frequent overriding of the `dims` is necessary. I'd argue that the `Qobj` constructor taking a `dims` parameter is sufficient for any use-case which needs to manually set the dimensions because they're passing in an object constructed outside of QuTiP functions. Removing `dims` also makes a lot of operations harder to do. Various places in the code permute the order of the tensored spaces, and dropping `dims` means that the user has to ""remember"" the tensor product structure themselves so that they can pass it in, and we can then know what to reorder. Clearly this is undesirable - the `dims` are a non-computable property of the object, and therefore should be carried around as a data attribute on the class. The alternative in the Google group that's sometimes suggested is to keep `dims` for these use-cases, but make it more of a suggestion, so that any two objects which satisfy `left.shape == right.shape` should be compatible for addition-like operations, and ones which satisfy `left.shape[1] == right.shape[0]` should be compatible for matrix-multiplication-like operations. Again, I personally would tend to reject this on the grounds that enforcing the tensor-product structure is respected is a core part of what `Qobj` does; it ensures that the operations are mathematically possible, and that operations between different Hilbert spaces are not mixed. ### Proposal. First off, we can sidestep some of these issues by improving library code which creates `Qobj` instances. Operations like `Qobj.__add__` already know exactly what the output dimensions are, what the the type must be, and other things like if Hermitic",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:6782,Clear,Clearly,6782,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['Clear'],['Clearly']
Usability,"s) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj negation ... ok; > > > Qobj equals ... ok; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5764,simpl,simple,5764,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"s` format. Operators are used to represent operators and super-operators acting on hilbert spaces. We use a very custom format roughly corresponding to a lazy kronecker product. Those object satisfy the numpy `__array__` interface and can be converted by calling `np.array(netket_operator)` or `np.asarray(netket_operator)`. We can also obtain sparse representations (but there is no nice api to do that, so we simply provide a method `netket_operator.to_sparse()`. Variational states can also be converted to vectors or matrices (kets and density operators) as they also support the `__array__` interface. I would like our users to be able to call `Qobj(netket_operator)` or `Qobj(netket_state)` and obtain the corresponding qutip object. We could, in principle support a `netket_operator.to_qobj()` conversion method, but I am strongly opposed to that as this is an ugly design pattern: a way to construct a `Qobj` already exists, it's `Qobj(...)`, and the simplest-to-use api is, in my opinion, to overload this constructor to perform the conversion.; This is a standard design pattern in Julia, which I believe has the best ecosystem inter-compatibility thanks to a standardisation of this pattern through (multiple)dispatch. Numpy too, does the same, through the `__array__` interface: any object that defines a `__array__(self, dtype=None)->np.ndarray` method will be supported by `np.asarray` and `np.array`. Proposal: I would like QuTiP to support a `__qobj__` interface, meaning that your `Qobj` constructor should check if an object has this method, and if it has, then use it to convert it to a Qobj.; It should be relatively simple and involve adding another else-if in [your constructor](https://github.com/qutip/qutip/blob/624405e7c49f7c25d0623451cff5a5a5d0544559/qutip/qobj.py#L333). ```; if isinstance(inpt, Qobj):; ...; elif inpt is None:; ...; ...; elif hasattr(inpt, ""__qobj__""):; data = input.__qobj(options); self.shape = data.shape; ...; ```; The only thing to do would be discu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508:1861,simpl,simplest-to-use,1861,https://qutip.org,https://github.com/qutip/qutip/issues/1508,1,['simpl'],['simplest-to-use']
Usability,"sible to enforce the Code of Conduct. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at qutip-admin@googlegroups.com _[activate this or alternate email]_. . ### 2. Admin Team; **The Admin Team leads technical code development and manages directly QuTiP-related activities.** It’s thanks to their work and the broader community that the QuTiP project keeps lively, the software is maintained and the features keep expanding and improving. . **<span style=""text-decoration:underline;"">Tasks</span>**. The admin team is listed on the qutip website and specific areas of competence are shown. Members of the admin team pledge to volunteer to:. - Maintain the project through software release updates and bug fixes (core code development, documentation, notebooks, website, other Github-related things). . **- Make decisions about specific technical issues, features, bugs and pull requests. They are the primary mechanism of guiding the code review process and merging pull requests. This includes closing pull requests or issues that are inactive for long or deemed not relevant. **. - Develop new features in qutip/qutip and qutip/other-libraries. ; - Help keep a steady pace of qutip library releases (e.g., ~2 minor releases/year). ; - Actively participate / respond to the qutip-dev internal forum.; - Help in the Q&A support group, qutip public forum. ; - Volunteer time for remote mentorship.; - Discuss code developments.; - Once a year, on a rotation basis, one admin team member is responsible for drafting a report for the QuTiP board.; - **For each subproject that is not qutip/qutip, at least one admin should actively be watching the repository.**. - If there are new projects that wish to come under the umbrella of qutip/, either one of the existing admins should get involved with the project, or the maintainer/developer of the new project joins the admin team upon a consensus reached by the existing admins. **<span s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:7874,guid,guiding,7874,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['guid'],['guiding']
Usability,simplified setup.py by only supporting cythonizing pyx and not shipping ...,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/191:0,simpl,simplified,0,https://qutip.org,https://github.com/qutip/qutip/pull/191,1,['simpl'],['simplified']
Usability,"sion on the design. For this specific PR, I am in two minds: . A. I follow the previous code and make a `HSolverUnderDampedBrownian` class. This will be quite different from the HSolverDL class as now, we will take the coefficients ck and vk separately for the non-Matsubara part and then the Mastsubara part and combine them to get the RHS instead of computing them from the coupling strength as before. B. Rewrite a new `Heom` class with the `configure` method taking the ck and vk values and not caring about the spectral density. We add some additional functions to compute the cks and vks based on Drude-Lorrentz, Underdamped Lorrentzian or Ohmic spectral density. We can even do a numerical fitting for the coefficients using the `bath_correlation` function that I added now for any arbitrary spectral density and then feed it to the `configure` method of the new `Heom` class to build the RHS. This is a more generic version of the HEOM which separates the method from specific spectral densities and is close to implementing the following version that is simplified from @nwlambert 's paper :. ![screenshot 2019-03-05 14 41 25](https://user-images.githubusercontent.com/6968324/53809476-16468080-3f55-11e9-90bd-50159a075663.png). I am leaning more towards B and re-structuring the HEOM functions to seperate the SD and the implementation itself. This has some advantages in the future too perhaps if we want to work specificially on the HEOM part without caring about the form of the spectral density. The second point is:. Most of QuTiP's solvers are function based eg., `mesolve`. In `qutip.piqs` however, we tried to do things with the class called `Dicke`. We defined a `pisolve` method similar in spirit to `mesolve` which takes in an initial state, tlist and computes the evolution. For many sophisticated approaches like `piqs` or `heom`, there needs to be some amount of pre-processing such as computing the Liouvillian/Lindbladian or the levels of the Hierarchy that needs to be done ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/962:1184,simpl,simplified,1184,https://qutip.org,https://github.com/qutip/qutip/pull/962,1,['simpl'],['simplified']
Usability,"sis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is other; or (; isinstance(other, Space); and self.size == other.size; and self.basis == other.basis; ); ); ```; so we'll almost invariably get the benefits right now, but we're rather more future-proof in the code. By analogy, it's clearly wrong to do `(1, 2) is (1, 2)` to compare tuples, even though `tuple` produces singletons in CPython (and that code will generally be `True`). The Python `tuple` class is basically what inspired me, and I'm 100% certain that the Python devs are smarter than I am, so we should probab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:3026,simpl,simplifies,3026,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['simpl'],['simplifies']
Usability,"solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:5658,simpl,simply,5658,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['simpl'],['simply']
Usability,"specific to some methods. SInce new integrators could be added by project such as qutip-cupy, `Options` can no longer be the place to list all supported options. It become little more that a dict. So I propose deprecating it. The documentation of `sesolve`, `mesolve`, etc. now list the options used by the solver and most common ode options and link the the integrator documentation. The class interface has the options property which document the options used by the solver and the integrators have the same. In the online documentation, the integrator api entries only contain the description of the method and the supported options. Since users don't need to call them directly, other methods are hidden and will be included in the dev documentation only. Usage will look like this, for functions:; ```; sesolve(H, psi, tlist, options={""store_states"": True, ""method"": ""lsoda"", ""atol"": 1e-5}); ```; and for the class interface:; ```; solver = SeSolver(H, options={""store_states"": True, ""method"": ""lsoda"", ""atol"": 1e-5}); solver.run(...); solver.options[""atol""] = 1e-9; solver.run(...) # run with the new tol.; solver.options = {""atol"": 1e-2} # only change the affected items. ; solver.run(...) # Also run with the new tol.; solver.options[""method""] = ""adams"" # reset all ode options, including ""atol"" supported by both.; solver.options = {""method"": ""bdf"", ""atol"": 1e-2} # reset all ode options then apply the new atol ; ```. Inside solvers, options are stored in a `_SolverOptions` which is a dict with frozen keys and feedback (chaging atol will reset the integrator).; ; Some `Intergrator` are slip so one method correspond to one integrator. Otherwise, `method` was an options used by both the solver to know which integrator to use and by some integrators. `Options` and `SolverOptions` still both exist for backward compatibility: they raise a warning but return the dict of the same options so the change should not immediately break any code. **Related issues or PRs**; Alternative to #1947",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1955:1796,feedback,feedback,1796,https://qutip.org,https://github.com/qutip/qutip/pull/1955,1,['feedback'],['feedback']
Usability,"specific use cases. My idea was a bit more simple - precomputing the `coherent_dm` operators (using qutip.coherent_dm) and using the `expect` function. But that performs worse that the original `qfunc` as well as this implementation of course. So this is great. I would be happy to merge this but have one thought:. This new implementation is sacrificing the ease-of-understanding of how Q-functions are computed with a very efficient and fast, but complicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:1160,simpl,simple,1160,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['simpl'],['simple']
Usability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2647,intuit,intuitively,2647,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['intuit'],['intuitively']
Usability,"st sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a totally fair test, and simply replicate the full functionality of `qutip.displace` (including creating a `Qobj` at the end), my method is ~4x faster on small matrices (`1 <= dim <= 20`) and it only goes up from there (I found it's about ~10x faster at `dim = 1000`, and beyond that `qutip.displace` is too slow to bother). If I store the calculation of the eigensystem, and output an `ndarray` instead of converting to `csr_matrix` (and so don't produce a `Qobj`), then I find speed ups in getting the operator for a new `alpha` as ~100x for small matr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:1894,simpl,simpler,1894,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['simpl'],['simpler']
Usability,"sufficient for them to simply call `data.to(desired_type, input_data)` on entry to the function, and then they can guarantee that they are always working with the type of data they support. However, in some cases they may want to support dispatched operations in the same way that we do within the library code. For this reason, the data layer exports `Dispatcher` as a public symbol. The minimal amount of work that needs to be done is to call the initialiser, and then call `add_specialisations`. For example, let's say the user has defined two specialisations for their simple new function `add_square`:; ```python; >>> def add_square_csr(left, right):; ... return data.add_csr(left, data.matmul_csr(right, right)); ...; >>> def add_square_dense(left, right):; ... return data.add_dense(left, data.matmul_dense(right, right)); ...; ```; (Ignore for now that this would be better achieved by just using the dispatchers `data.add` and `data.matmul` directly.) Now they create the dispatcher simply by doing; ```python; >>> add_square = data.Dispatcher(add_square_csr, inputs=('left', 'right'), name='add_square', out=True); >>> add_square.add_specialisations([; ... (data.CSR, data.CSR, data.CSR, add_square_csr),; ... (data.Dense, data.Dense, data.Dense, add_square_dense),; ... ]); ```; This is enough for `Dispatcher` to have extracted the signature and satisfied all of the specialisations. Note that the `inputs` argument does not provide the signature, it tells the dispatcher which arguments are data-layer types it should dispatch on, e.g. for `data.pow` as defined above `inputs = ('matrix',)`, but the signature is `(matrix, n) -> out`. See that the specialisations are now complete:; ```python; >>> add_square; <dispatcher: add_square(left, right)>; >>> add_square[data.Dense, data.CSR, data.CSR]; <indirect specialisation (Dense, CSR, CSR) of add_square>; ```. In the initialisation, the function `add_square_csr` is passed as an example from which `Dispatcher` extracts the call signatur",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:13233,simpl,simply,13233,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['simpl'],['simply']
Usability,"sum_data = n_sum.data. def D2_ρ(t, ρ_vec):; e1 = cy.cy_expect_rho_vec(n_sum_data, ρ_vec, False); out = np.zeros((1,len(ρ_vec)), dtype=complex); out += cy.spmv(n_sum_data, ρ_vec) - e1 * ρ_vec; return out. res = general_stochastic(operator_to_vector(ρ0), times, d1=D1_ρ, d2=D2_ρ,; e_ops=[spre(op) for op in e_ops],; ntraj=ntraj, solver='explicit1.5',; m_ops=[spre(x)], dW_factors=[1/(2*sqrt(χ))],; nsubsteps=nsubsteps, store_measurement=True, normalize=True,; noise=123456, options=opts). # theoretical expressions for the conditional variances. r = χ/γ. VX0 = (sqrt(1+8*r) - 1)/(8*r). VX = VX0 + 2*VX0*(1 + 1/(8*VX0*r)) / (exp((8*VX0*r+1)*γ*times)*(1+1/(4*r*VX0))**2 - 1). VY = 0.5 + r - r*exp(-γ*times). #%%%%%%%% Calculate manually expectation values from states; ; rho_list = [vector_to_operator(rho) for rho in res.states[0]]. for i, rho in enumerate(rho_list):; rho_list[i] = rho / rho.tr(). my_expect = [expect(op, rho_list) for op in e_ops]. #%%%%%%%% Plotting. plt.figure('Time Evolution 2 -- Quantum State', clear=True). ax1 = plt.subplot(3,1,1, ylabel=r'$\langle X^2\rangle - \langle X\rangle^2$'); ax2 = plt.subplot(3,1,2, ylabel=r'$\langle Y^2\rangle - \langle Y\rangle^2$'); ax3 = plt.subplot(3,1,3, ylabel=r'$\langle X\rangle$', xlabel='time'). # plot expectation values calculated from states; ax1.plot(times, my_expect[1]-my_expect[0]**2, label=r'$\langle\rangle$ from stored state'); ax2.plot(times, my_expect[3]-my_expect[2]**2, label=r'$\langle\rangle$ from stored state'); ax3.plot(times, my_expect[0], label=r'$\langle\rangle$ from stored state'). # plot expectation values from result.expect; ax1.plot(times, res.expect[1]-res.expect[0]**2, label=r'$\langle\rangle$ from result.expect'); ax2.plot(times, res.expect[3]-res.expect[2]**2, label=r'$\langle\rangle$ from result.expect'); ax3.plot(times, res.expect[0], label=r'$\langle\rangle$ from result.expect'). ax1.plot(times, VX, 'k--', label='theory'); ax2.plot(times, VY, 'k--', label='theory'). ax1.legend(); ax2.legend(); ax",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1379#issuecomment-736750957:2948,clear,clear,2948,https://qutip.org,https://github.com/qutip/qutip/issues/1379#issuecomment-736750957,1,['clear'],['clear']
Usability,"thanks eric, I like the option of creation and full. Took me a moment to understand the meaning of the ''missing'' option. is there some clear situation where someone would use this? perhaps there is a better name too? . for `default_dtype_range`, how about `default_dtype_scope`?. i will try and play with the PR, see if it does what i would expect",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2519#issuecomment-2406431381:137,clear,clear,137,https://qutip.org,https://github.com/qutip/qutip/pull/2519#issuecomment-2406431381,1,['clear'],['clear']
Usability,"thanks for the comment, I didn't know about `qutip.propagator`. > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple. cool, can i learn more about this from you?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660472157:143,learn,learning,143,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660472157,2,['learn'],"['learn', 'learning']"
Usability,"the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerab",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:1977,guid,guide,1977,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['guid'],['guide']
Usability,"tigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import quantum circuits from other software packages; > > or commonly used language e.g. through quantum assembly language (qasm); > >; > > ------------------------------; > >; > > Also, the last outcomes have some overlap with the last project. Although; > > I also find this circuit importation very important, I guess two projects; > > should not have overlap if they are both selected.; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <; > https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA; > >,; > > or unsubscribe; > > <; > https://g",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:6308,simpl,simple,6308,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['simpl'],['simple']
Usability,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:1663,simpl,simply,1663,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['simpl'],['simply']
Usability,"torial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes than the number of available slots.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:2135,clear,clear,2135,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['clear'],['clear']
Usability,"ts calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the array[1, 10, 11]? ...; > ; > At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response.; > ; > Cheers,; > Qi; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:2166,guid,guidelines,2166,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['guid'],['guidelines']
Usability,"ts could pick up imaginary parts etc. Perhaps this kind of thing cancels out when you add the two unphysical D-L baths to get the shifted D-L bath?. One can use the analytic expression for monomer absorption spectra to test which Drude-Lorentz bath is correct. Also, one can use [DM-HEOM](https://github.com/noma/dm-heom) [2], where they have implemented the ""Shifted Drude Lorentz Bath"" [1]. Compared with their Matsubara implementation, it gives the same density matrix evolution (up to the numerical accuracy) as QuTiP's HEOM gives with `DrudeLorentzBath` and $\gamma \rightarrow \gamma \pm \Omega$ and $\lambda \rightarrow \lambda/2$. But it is not the case for `DrudeLorentzPadeBath`. You are right to think that the unphysical part goes away when two baths are added [1], one with $+i\Omega$ and the other with $-i\Omega$. > However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. You are very much in the right to be absolutely sure before making a change. As far as I understand and have tested, it will not change the real case because the changes are as follows (I have removed all the other lines in between for clarity):. ```python; - ck_real = [np.real(eta) for eta in eta_p]; + ck_real = [eta for eta in eta_p]. - ck_imag = [np.imag(eta_p[0])]; + ck_imag = [-lam*gamma]. - eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0) - 1.0j)]; + eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0))]; ```; if `gamma` is real, `lam * gamma * self._cot(gamma * beta / 2.0)` would be real, and hence `ck_real` would stay the same as before, and the same can be said for `ck_imag`. After all, this is how it is done for `DrudeLorentzBath`, so it should not impact anything. > A more ""complete"" and probably more efficient solution would be to add a whole new ShiftedDrudeLorentzBath, and to put in analytically derived formulas for the Matsubara",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274:1456,clear,clear,1456,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274,1,['clear'],['clear']
Usability,"ts using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is simple and intuitive until tensor-product structures are considered. At this point, it starts to become more complicated. In particular, the `type` of a `Qobj` is tied to its dimensions, but it becomes difficult to define this once there is tensor product structure. Some of this is because QuTiP allows us to construct objects which do not have a really rigourous mathematical backing to them, such as `I . |g>` - the tensor product of an operator and a ket. QuTiP assigns this a type `'oper'`, though the way it reaches this decision is more like:; 1. is it a ket? [no]; 2. is it a bra? [no]; 3. is it a super-operator? [no]; 4. if here, it must be an operator. Such objects do have a use. Let's say we have a system with two computational qubits and one ancillary qubit, we've performed a calculation on it and ended up in some state `|x> = |a>.|b>.|c>`, and we want to extract the computational subspace when the ancilla bit is projected onto `|0>`. We can do this in a mathematically rigourous way with; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:3776,simpl,simple,3776,https://qutip.org,https://github.com/qutip/qutip/issues/1320,2,"['intuit', 'simpl']","['intuitive', 'simple']"
Usability,"ture internal discussions easier, do let me know. > I just want to caution you in case you're trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1881,simpl,simply,1881,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['simpl'],['simply']
Usability,"ture using options. . The best signature I believe is `f(t, **args)` since it allows to use more natural function call using kwargs (`f(t, w=0, a=1)`). However, it is the slowest in the #1123 implementation (up to 10x): some items are added to `args` for internal use and they need to be filtered at each call. It could be brought to 2.5x with some work, but no better. `f(t)` is about 2x slower than `f(t, args)`. But it's less agile: if the Hamiltonian use `f(t, w1=0)`, we cannot add a c_ops using `f(t, w2=0)`, both function must accept `w1` and `w2`. `args` could just hide unused items. Which ever we choose as the main one will be 2~3x faster than the other. We can have automatic detection of the signature if we want to be fancy. Which signature do you think is better?. Second, these function can depend on the state with the option `rhs_with_state`. Thus the coefficients are `f(t, state, args)` with `state` a 1D numpy array.; When making QobjEvo, I added special `args`' keys that indicate that the value should be updated with the state: setting `args = {""val=Qobj"":psi0, ""val"":psi0}` would tell `args[""val""]` to be updated with the state at each use in the solver. The state can be obtained as Qobj, np.array or the args could be updated to be the expectation value of another Qobj.; There are some bug for it in master presently but it will work with PR #1127. Using these special keys for this work well but they need to be removed for the new signature candidate (`f(t, **args)`). Also you cannot remove / fix to a constant them once declared. Since they are not used/working yet, now is the time to change to something better. I could see 2 other options:; - reserved keys: `args = {""state_vec"":psi0}`, this will always be the state (np.array) if available.; -- collapse are less practical this way.; - special values: `args = {""state_vec"":qt.feedback(""vec"")}`. This seems the most natural to me since the value is what change. . I would appreciate feedback and ideas on the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136:2444,feedback,feedback,2444,https://qutip.org,https://github.com/qutip/qutip/issues/1136,2,['feedback'],['feedback']
Usability,"u supply the arguments for the particular Hamiltonian, i.e., pulse_length, area, `n_emission` etc. This is similar to the wrapping function that you wrote for your `pool` processes in the notebook. I need to understand the physics a little bit more to ascertain which are the quantitites that would form the arguments for the scattering_probability function and which ones would be fixed for an experiment (hamiltonian for instance). But the overall idea is that you make a class for a particular scattering experiment, give it a fixed Hamiltonian function and keep the calculations flexible wrt to the parameters of interest (pulses, gamma etc). A prototype example would then be:; ```; from qutip.scattering import PhotonScattering; from qutip.scattering import hamiltonian_tls, hamiltonian_rft; ...; scatter = PhotonScattering(hamiltonian_tls, tlist, c_ops, zero_state = psi0, effective_hamiltonian = True); prob_scatter = scatter.scattering_probability(n_emissions, gamma, pulse_length, pulse_area); ```; For a different hamiltonian, the example would be:; ```; scatter = PhotonScattering(hamiltonian_spdc, tlist, c_ops_spdc, zero_state = psi0); prob_scatter = scatter.scattering_probability(n_emissions, pulse_length=pulse_len); ```; I will be happy to help with this and discuss if you are interested, @bencbartlett. Adding these small changes from your notebook example into the main code could make your module more general and flexible. It is just a design choice and is usually followed in many Machine Learning modules (sklearn) where an experiment is abstracted in a class with global parameters (a Hamiltonian or propagators for instance) and then the methods of the class are used to compute things on-the-fly by supplying the variables of interest (gamma, pulse_area etc). We can still add the code in the current form but nevertheless I would like to discuss this once. This gives more functionality to the tool and could make it very flexible and easy to use. @ajgpitch @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384566684:2080,Learn,Learning,2080,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384566684,1,['Learn'],['Learning']
Usability,"ugh your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > -------------",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:1042,guid,guide,1042,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,1,['guid'],['guide']
Usability,"uilt produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travis, so it hasn't got caught. That makes me worry a lot that the OpenMP code isn't even being tested correctly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:1675,simpl,simple,1675,https://qutip.org,https://github.com/qutip/qutip/issues/1470,1,['simpl'],['simple']
Usability,"ve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 5.72e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ERROR; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:4088,simpl,simple,4088,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['simpl'],['simple']
Usability,"x measurements given a list of observables. Still needs addition of checks to see if the list of observables is valid ; - `Measurement.measurement_comp_basis(self, state)` : This adds measurement statistics for specific qubit measurements in the computational basis and also returns the collapsed states (without changing the dimensions). ; - `QubitCircuit.run(self, state, cbits)`: Given a ket input to the circuit, applies gates and measurements from the circuit and returns the resultant ket. . Right now, the measurement module is very bare-bones and splintered between the previous code ; from @hodgestar and the new code added by me. The eigenstate based measurements are slightly different than the measurements usually used on circuits (or I might be missing something). Ofc, in the case of measurements on all qubits, they amount to the same result. I have not added tests yet but I have added a basic quantum teleportation notebook. It will be nice to get feedback on testing methods as well as what kind of notebooks the community is interested in. Also, any other feature requests on this module would also be appreciated. . PS: I have also added measurement code from Simon's PR here so maybe we can either add him as a contributor to this PR or figure out something else. ; ; Update: . 1. Addressing some concerns about the PR containing multiple diverging pieces of code, I think classical registers, measurement on the circuit and the classically-controlled gates are best grouped together as they all rely on each other in some ways. The valid concern is that of the Measurement class encapsulating all projective style measurements. I also want to point out that it was raised by @BoxiLi that we may want to move the Gate class and Measurement class completely to qutip.qip.operations to which I agree but I believe that should be addressed in a clean-up PR with naming changes suggested by @ajgpitch. . **Related issues or PRs**; Adds to #1090. **Changelog**; Adds partial and compl",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274:2302,feedback,feedback,2302,https://qutip.org,https://github.com/qutip/qutip/pull/1274,1,['feedback'],['feedback']
Usability,"y.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a totally fair test, and simply replicate the full functionality of `qutip.displace` (including creating a `Qobj` at the end), my method is ~4x faster on small matrices (`1 <= dim <= 20`) and it only goes up from there (I found it's about ~10x faster at `dim = 1000`, and beyond that `qutip.displace` is too slow to bother). If I store the calculation of the eigensystem, and output an `ndarray` instead of converting to `csr_matrix` (and so don't produce a `Qobj`), then I find speed ups in getting the operator for a new `alpha` as ~100x for small matrices and ~25x for large ones. The larger a matrix is, the more the computational time is dominated by the dense dot product at the end. Code:; ```python; class Displacer:; def __init__(self, n):; # The off-diagonal of the real-symmetric similar matrix T.; sym = (2*(np.arange(1, n)%2) - 1) * np.sqrt(np.arange(1, n)); # Solve the eigensystem.; self.evals, self.evecs = scipy.linalg.eigh_tridiagonal(np.zeros(n), sym); self.range = np.arange(n); self.t_scale = 1j**(self.range % ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:2379,simpl,simply,2379,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['simpl'],['simply']
