quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Safety,Implemented skip_timer functions to help avoid timer clutter.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/762:41,avoid,avoid,41,https://psicode.org,https://github.com/psi4/psi4/pull/762,1,['avoid'],['avoid']
Safety,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888:382,detect,detect,382,https://psicode.org,https://github.com/psi4/psi4/issues/888,3,['detect'],"['detect', 'detected', 'detection']"
Safety,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:1113,redund,redundancy,1113,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355,1,['redund'],['redundancy']
Safety,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1515,detect,detection,1515,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,1,['detect'],['detection']
Safety,"In terms of geometry, it is still a likely conformation. Right? This would mean that the atoms in the CH and the carbon and one hydrogen of the CH3 are in the same plane. Is there anything in Psi4 that can't handle near-180 dihedrals and can I avoid this by slightly changing the the intial coordinates of the atoms?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712230398:244,avoid,avoid,244,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712230398,1,['avoid'],['avoid']
Safety,Initialize lebedev_mapping_ and make use thread-safe -- and do ONLY THAT,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2743:48,safe,safe,48,https://psicode.org,https://github.com/psi4/psi4/pull/2743,1,['safe'],['safe']
Safety,Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16458,detect,detecting,16458,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16633,detect,detecting,16633,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"Is the ""it"" you're trying the original input file you posted, or the one that Lori posted?. Your input file may or may not demonstrate the problem. Noise in the energy single points leads to noise in the computed gradient leads to noise in the optimization step leads to noise in whether or not you get a problematic geometry. Lori's input file should reproduce the bug 100% of the time. I've been exploring Psi's symmetry handling for an unrelated issue, and it looks like Psi's symmetry detection assumes the symmetry operations can be oriented along the x-, y-, z- axes. I'm not surprised to see problems with symmetry detection if you don't let Psi center-of-mass-adjust the molecule. The symmetry elements would need to be translated in space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442804174:489,detect,detection,489,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442804174,2,['detect'],['detection']
Safety,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182597595:166,safe,safe,166,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595,1,['safe'],['safe']
Safety,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:40,abort,abort,40,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426,1,['abort'],['abort']
Safety,"It doesn't really bother me that it takes 2-6 hours for Travis CI to build the 15 types, nor do I think it's hindering anything. I would actually like to see additional types added (specifically Mac, but I think there were other issues with that). It should be noted that we can merge pull requests in before Travis CI has completed testing. Travis CI is there as a safety net.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182562754:366,safe,safety,366,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182562754,1,['safe'],['safety']
Safety,"It is perhaps noteworthy that certain other codes converge this case even; with a core guess. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:305,safe,safe,305,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,1,['safe'],['safe']
Safety,"It is the molecule's job to make sure that its member data are; internally consistent. In the scenario you painted, the pg should be; recomputed every time you change the molecule, or it should be computed; on the fly. Either way it will remain consistent with the actual state; of the molecule. Not copying member data in a copy operation is counter intuitive and; should be avoided. Honestly, I don't think I have ever seen a scenario; in which it makes sense. On Thu, 2016-03-03 at 06:53 -0800, David Sherrill wrote:. > Right, unless you wanted to do a CP correction, so you copied the; > dimer; > molecule, then in the copy you turned some atoms from ""real"" atoms to; > ""ghost"" atoms.; > ; > Don't know if we ever do / would do that, just speculating about why; > someone would have come up with the idea that copying pg is bad.; > ; > On Thu, Mar 3, 2016 at 9:48 AM, Ryan Richard; > notifications@github.com; > wrote:; > ; > > Not copying pg seems somewhat silly because if you are making a copy; > > there; > > should be no way that the copy doesn't have the same symmetry, even; > > factoring in ghost atoms, since both molecules have the same ghost; > > atoms.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/299#issuecomment-191796461.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191801305:376,avoid,avoided,376,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191801305,1,['avoid'],['avoided']
Safety,It looks good so far as I can predict.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187462125:30,predict,predict,30,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187462125,1,['predict'],['predict']
Safety,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122294961:70,detect,detecting,70,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961,3,['detect'],"['detected', 'detecting']"
Safety,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304529137:67,timeout,timeout,67,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137,1,['timeout'],['timeout']
Safety,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:203,redund,redundant,203,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,1,['redund'],['redundant']
Safety,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343303520:210,safe,safe,210,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520,1,['safe'],['safe']
Safety,"It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!. Who dares to decouple libint from our build system such that it could become a detectable `ExternalProject_Add` CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355:470,detect,detectable,470,https://psicode.org,https://github.com/psi4/psi4/issues/355,1,['detect'],['detectable']
Safety,"It's a feature not a bug?. Symmetric molecules are supposed to have symmetric wavefunctions (because; the Hamiltonian commutes with the symmetry operators). Certainly, the; exact wavefunction does has the full point group symmetry. Occasionally,; approximate QM methods can have lower-energy non-symmetric solutions.; Anytime the wavefunction has a lower symmetry than the molecule, this is; usually considered a bad thing and is often called ""artifactual (spatial); symmetry breaking."" Wes Allen and Daniel Crawford have some excellent; papers on this topic (I've made a couple contributions, also). In most applications, generally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:806,predict,predictions,806,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['predict'],['predictions']
Safety,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43508954:560,detect,detects,560,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954,1,['detect'],['detects']
Safety,"It's not necessary to use the conda `gcc`– just that makes for a predictable `Makefile`. I'll investigate `nc-config`. It always helps to know use cases, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172279516:65,predict,predictable,65,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172279516,1,['predict'],['predictable']
Safety,"Jerome, Have you played around with CUHF at all for the stability analysis?. I know that this method avoids spin contamination.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171704058:101,avoid,avoids,101,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171704058,1,['avoid'],['avoids']
Safety,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144008:390,detect,detection,390,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008,2,['detect'],['detection']
Safety,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:71,safe,safely,71,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,1,['safe'],['safely']
Safety,"Just to clarify, is the long-term plan to use Bohr for external charges irrespective of the molecule units? I'd rather have both specified in the same units to avoid confusion and to make input creation easy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371:160,avoid,avoid,160,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371,1,['avoid'],['avoid']
Safety,"KE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:1329,Detect,Detecting,1329,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['Detect'],['Detecting']
Safety,"Lemme guess: Psi4 is using ATLAS inside OpenMP regions, but ATLAS is not compiled thread-safe?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455813118:89,safe,safe,89,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455813118,1,['safe'],['safe']
Safety,"Lengthy version very interesting. It slightly pains me that options specification isn't consistent through all of psi4, but having options specification not consistent for pcmsolver across all host programs would be more painful to the dedicated pcmsolver user. Is the `pcm {...}` to `pcmsolver.inp` safe for multiple invocations in one psi4 input (I remember labeling temp dirs with random numbers for dftd3)?. I like the multiple input strategies scheme. Would someday you approve of an additional strategy 1.75 where pcm options are specified in psi4 format (e.g., `set pcm_cavity_probe_radius 2`, then the whole pcm collection be written to `pcmsolver.inp`? That way, could be friendly to the dedicated pcmsolver user and the dedicated psi4 user?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171677827:300,safe,safe,300,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171677827,1,['safe'],['safe']
Safety,Lets pull this in and see how it effects PR's. I wonder if we should knocked out Clang 3.9 at the same time as it seems to timeout more than anything else at the moment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/595#issuecomment-276187772:123,timeout,timeout,123,https://psicode.org,https://github.com/psi4/psi4/pull/595#issuecomment-276187772,1,['timeout'],['timeout']
Safety,"Likely the snag is that ""Classic"" Python detection where pb11 calls PythonLibsNew is getting triggered instead of ""New FindPython"" mode. https://pybind11.readthedocs.io/en/stable/cmake/index.html#new-findpython-mode Maybe in addition to `find_package(Python)` to `find_package(pybind11)`, you can set `PYBIND11_FINDPYTHON` to `ON`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676489557:41,detect,detection,41,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676489557,1,['detect'],['detection']
Safety,"Lingering issues for finalizing CheMPS2:; - [ ] Make sure can detect Debian installation of CheMPS2 in ""list of files"" https://packages.debian.org/sid/libchemps2-dev ; - [ ] make up new conda package; - [ ] add conda package to metapackage; - [ ] add chemps2.rst to interfaces in docs; - [ ] add chemps2 to binary; - [ ] review keywords; - [ ] add acceptance for Intel redistributable for `chemps2.so`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150:62,detect,detect,62,https://psicode.org,https://github.com/psi4/psi4/issues/150,1,['detect'],['detect']
Safety,"Look at iteration 1: we're seeing a change in the iteration energy of over a mH due to this integral screening. This strongly suggests a bona fide bug. If you have additional systems that fail, this seems like a bug that is going to afflict a _lot_ of our users. I highly suggest we fast-track this for investigation but I would rather avoid being the one to debug this directly. (I'm trying to get into paper-writing mode.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755:336,avoid,avoid,336,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755,1,['avoid'],['avoid']
Safety,Looks good to me from the CMake/math point of view. The foreach [here](https://github.com/psi4/psi4/pull/591/commits/242c33255741ca6783ce13d4143ed7096ef79766) looks a bit overkill. Will it be possible for me to take these changes over to Autocmake? The grand plan there is to split up the math detection monolith into individual modules. I am asking this because this now becomes GPL code and Autocmake is BSD. Advantage of taking it to Autocmake would be more testing exposure to other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276088154:294,detect,detection,294,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276088154,1,['detect'],['detection']
Safety,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:817,safe,safe,817,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,1,['safe'],['safe']
Safety,Looks like we are still hitting timeouts occasionally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/573#issuecomment-272873624:32,timeout,timeouts,32,https://psicode.org,https://github.com/psi4/psi4/pull/573#issuecomment-272873624,1,['timeout'],['timeouts']
Safety,"Lori, could you comment on the long-term fate of the new `potentials_` field and the pre-existing `external_pot_` field, as well as other possible use cases for `potentials_`? The impression I get is that this is still a hack to avoid giving F/I-SAPT a wavefunction, rather than something that makes sense for wavefunctions _in general_. I'm open to being wrong, but if I'm right, I request some very heavy warnings about how this field is for internal Psi use only, is to-be-deprecated, and how anybody doing anything other than F/I-SAPT should stick to `external_pot_`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-801954271:229,avoid,avoid,229,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-801954271,1,['avoid'],['avoid']
Safety,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276161205:331,detect,detection,331,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205,2,['detect'],['detection']
Safety,MathOpenMP detection,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:11,detect,detection,11,https://psicode.org,https://github.com/psi4/psi4/issues/1118,1,['detect'],['detection']
Safety,"Most of the developers have Travis turned on in our psi4 forks (esp. as we each hosted _the_ Psi4 for a different phase over the summer). So every time we push a branch and make a PR back to psi4/psi4, Travis is running twice. According to [this](https://docs.travis-ci.com/user/customizing-the-build#Safelisting-or-blocklisting-branches), we can turn on/off travis for certain branches. So this PR hopefully keeps Travis running on all the psi4/psi4 PRs and any long-term non-PR branches you add, while turning it off for the branches that are covered under psi4/psi4 master testing. At least I think that's how this works.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/595:301,Safe,Safelisting-or-blocklisting-branches,301,https://psicode.org,https://github.com/psi4/psi4/pull/595,1,['Safe'],['Safelisting-or-blocklisting-branches']
Safety,"Moving the finite-difference code into Python seems like a good idea. I'm sure it could be much cleaner. For geometry optimization purposes, one only ever really needs cartesian Hessian -> internal coordinate Hessian. This capability is in the C++ and also now in the Python optking - including the gradient.derivative B term (with the derivative-B matrix elements computed analytically). I think that the challenge I ran into (long ago) in the referenced commented-out code in generating a cartesian Hessian using a finite-difference derivative B matrix for this term was in the Sayvetz/Eckart conditions. The rotations/translations are projected out (now by cdsalc) for the original, undisplaced geometry - but then will not be exactly so at the displaced geometries. I don't recall if my motivation for using finite-difference derivative-B elements at the time was for reduced computational expense, because the analytic derivative-B elements were not yet coded, or to try to avoid discontinuity problems in the derivative formulas. The f-d option might be a good capability to have; I'm not sure offhand if it is worth doing. On the coordinate transformation of course Wesley Allen is the guru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-352449546:979,avoid,avoid,979,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-352449546,1,['avoid'],['avoid']
Safety,"My bad, @loriab. I just re-read the libint manual and found this sentence `Macro LIBINT MAX AM specifies the maximum angular momentum + 1 of basis functions for which electron repulsion integrals can be computed.` The `+1` is a little counterintuitive and it was my neglect of it that caused me to change the sanity checks. Your revert of my change is correct; sorry to waste your time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241057256:309,sanity check,sanity checks,309,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241057256,1,['sanity check'],['sanity checks']
Safety,"My first point was that Molden hasn't been using `[5D]` anymore for some time when writing Molden files (since 2004). It might be a good idea to follow it to avoid ambiguities. My second point is that software that follows Molden format specification (I am developing one such code) will likely see a conflict in `[5D]` and `[7F]`. Molden does not use these two flags together when writing Molden files and it never did. Even though it attempts to silently interpret their combination in some way, `[7F]` was introduced in the same version (4.1) when `[5D]` was abandoned. You are right about the interchanged words in the third point. Thank you for consideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2612#issuecomment-1159347342:158,avoid,avoid,158,https://psicode.org,https://github.com/psi4/psi4/issues/2612#issuecomment-1159347342,1,['avoid'],['avoid']
Safety,"My one line of code worked, so this is ready for review. I'm still debating whether it's worth adding a test, given the timeout problems we've started to see and how hard it would be to trigger the bug this test would catch. The test question is the only holdup I see from being ready to merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379#issuecomment-448456482:120,timeout,timeout,120,https://psicode.org,https://github.com/psi4/psi4/pull/1379#issuecomment-448456482,1,['timeout'],['timeout']
Safety,"New SCF algorithms are _far_ outside the scope of this PR, which is limited to ""slightly more polished dynamic_damping and trailing_convergence methods, and possibly a method for detecting oscillations"". Better to leave new algorithm discussion to #888, or maybe even a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135#issuecomment-468656686:179,detect,detecting,179,https://psicode.org,https://github.com/psi4/psi4/pull/1135#issuecomment-468656686,1,['detect'],['detecting']
Safety,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241076197:393,detect,detection,393,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197,2,['detect'],['detection']
Safety,"No, I haven't. And my next goals for stability analysis are more for RHF; and ROHF, since it's what most people use... But even these, I don't know; when I'll have time for it... 2016-01-14 12:00 GMT-05:00 Kevin Hannon notifications@github.com:. > Jerome, Have you played around with CUHF at all for the stability analysis?; > ; > I know that this method avoids spin contamination.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171704058.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171749071:355,avoid,avoids,355,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171749071,1,['avoid'],['avoids']
Safety,"No, I'm still getting `pywrap` timeouts on Windows. Any ideas? I can't debug this readily.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683761996:31,timeout,timeouts,31,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683761996,1,['timeout'],['timeouts']
Safety,"No, no, no go ahead! This is fine with me. > On Aug 24, 2018, at 2:50 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > Right, this is purely a formatting pass (see #1144 <https://github.com/psi4/psi4/issues/1144>) according to the clang-format file <https://github.com/psi4/psi4/blob/master/.clang-format>. If you'd like to do it yourself to avoid disrupting authorship, just clang-format -i *.h *.cc in the fnocc directory.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/1158#issuecomment-415849759>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmjUCo2oya6rFRslki6b4bZ21Fdjks5uUEsPgaJpZM4WL0dE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1158#issuecomment-415850082:352,avoid,avoid,352,https://psicode.org,https://github.com/psi4/psi4/pull/1158#issuecomment-415850082,1,['avoid'],['avoid']
Safety,"No, we haven't taken over maintainership of libint-1 from Valeev. There's a bit of history at the README of https://github.com/psi4/libint . We'll probably mirror any bugfixes that Valeev implements. The new external repo is based on libint as extracted from Psi4, not on https://github.com/evaleev/libint/releases/tag/release-1-1-6 . I did a grand diff at one point, and there were very many little changes; so many that I did not examine them further, yet they were mostly line tweaks, not insertions/deletions. That's actually interesting that you've been using Valeev's libint-1 with Psi4, and it's presumably been working just fine. I don't think any of the Psi4 development people have tried that in years. The main purpose of the psi4/libint repo has been to get libint built with CMake and to get it switched over to exporting CMake targets through `libintConfig.cmake` rather than detecting the installation through `Findlibint.cmake`. In that, we may have broken your ability to use your upstream libint-1.1.5 package, as the Psi4 build system expects to link to a `libint::int` target. If there are things we can do to make your life easier in not dealing with two libint-1's, let us know. Our external repo does respect `GNUInstallDirs`. . Psi4 will probably switch over to libint-2 when we get the time. But once again, we'll want a CMake build and exported targets. Hopefully, we'll be able to contribute those changes upstream to evaleev/libint, as we have with other projects (e.g., CheMPS2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249616760:890,detect,detecting,890,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249616760,1,['detect'],['detecting']
Safety,Not tagged PSI_API and not exported means there's no risk of breaking downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630:53,risk,risk,53,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630,1,['risk'],['risk']
Safety,"Not that I'm aware of. There are three reasons somebody might be tempted to use a manual `compute_gradient` call.; 1. _Method developer reason_. You are a plugin developer and don't know you can edit `proc_table` to tell `gradient` how to run for your new method. Not a good reason because you actually can.; 2. _Method developer reason_. You are writing a gradient method and want your gradient function to enter the C-code to do your energy, return to the driver, then re-enter the C-code to do your gradient. This is the best reason I've come up with, and while I'm sympathetic, I just don't think it's worth the danger of exposing this function to completely general Python use. The gradient machinery should only ever be called after your energy computation finishes.; 3. _User reason_. You want to run some additional commands between your energy and your gradient computation. I just can't imagine a use case for this _other than_ bypassing some sanity check. There isn't a case where separating the calls saves times. Even if there were, shoving intermediates onto a `wfn` only works for SCF (not sure about general DFT functionals). Even MP2 gradient theory needs intermediates too large to store on the `wfn`. The best I've come up with is that you're doing SCF, serialize the wavefunction for later analysis, and then decide you want a gradient after that later analysis. But even in that case, the serialized wavefunction has the converged orbitals, so just use `gradient`. I would expect minor computational overhead for the energy step. (I suppose there is the cost of re-building the TEI?). Since this would affect Forte and heads off a possible bug in relativistic computations, it's probably worth asking @fevangelista for input on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209:953,sanity check,sanity check,953,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209,1,['sanity check'],['sanity check']
Safety,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:237,Detect,Detected,237,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,1,['Detect'],['Detected']
Safety,"OK, agreed, B3LYP is defined with VWN1RPA, B3LYP5 is with VWN5. I think this is good to go. One thing that might avoid unnecessary clarification in future is to rename PSI4's VWN3\* to VWN1*. Thanks to everyone for all your efforts in this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-210083202:113,avoid,avoid,113,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-210083202,1,['avoid'],['avoid']
Safety,OPTKING Aborts,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924:8,Abort,Aborts,8,https://psicode.org,https://github.com/psi4/psi4/issues/1924,1,['Abort'],['Aborts']
Safety,"Observations:; * RMcG found that psi4 Mac conda pkg (linked to native Accelerate) and numpy conda pkg (linked to in-env MKL) was fragile wrt psi4/numpy import ordering; * DGAS found that psi4 built from source (linked to native Accelerate but managing its own RPATH) and numpy conda pkg (linked to in-env MKL) was steady wrt psi4/numpy import ordering; * LAB found that psi4 built from source on Linux (linked to in-env OpenBlas) and numpy conda pkg (linked to in-env MKL) was fragile wrt numpy operation w/i psi4. Conclusions:; * Linking to multiple math libs in the same conda env is risky (perhaps more so on Mac than Linux); * Best solution for Mac is to just link Psi4 to MKL, not Accelerate if installing psi4 into same env as numpy (which, for ease of use and distribution, we want to do); * Requires mix and match of default-channel MKL and intel-channel mkl-include (for `mkl.h`) to get full py27/py35/py36 stack; * In practice, rolling this out along with `sse4.1` ""Illegal Instruction 4"" fix for old Mac hardware, so expect solutions in the coming week, rather than the coming day.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-312305798:586,risk,risky,586,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312305798,1,['risk'],['risky']
Safety,"Oh I meant project up atom by atom. This is just like doing the sad guess; in the big basis.; On Jun 4, 2016 10:40, ""Daniel Smith"" notifications@github.com wrote:. > Aha, Psi's CD algorithm is not parallelized and is probably why I was; > seeing CD tensor generation taking longer than the iterations in some; > cases. We could fix that, it would be nice to avoid an auxiliary basis.; > ; > Yea, thats something to consider; however, one thing I have noted is that; > projecting orbitals that result from a partial Cholesky of the SAD density; > results in some degradation in the accuracy of the SAD guess itself. This; > is kind of weird, but might come from the interplay of the projection and; > how Cholesky weights vectors. Right now the SAD guess takes a small; > fraction of the SCF time (even for dimers) so I didnt see a need to look; > into this. Ill add this functionality back in so someone can play with it; > if they want.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/400#issuecomment-223759128, or mute; > the thread; > https://github.com/notifications/unsubscribe/ACizP-uzAbBMjA_-PXb1rOPqHc6uBk6Dks5qIY5ZgaJpZM4It9wO; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223774180:358,avoid,avoid,358,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223774180,1,['avoid'],['avoid']
Safety,"Oh dear, I see your PR has become contaminated by non-you commits. This probably happened because you rebased to pull in changes from upstream, tried to push, GH told you that's not a fast-forward so you probably want to pull, you pulled, then pushed. Hence current state. In this instance, that was bad advice from git. From step 9 or the `git push -f origin fastci` text of http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow, what you really want to do in this case is *force push without pulling*. Because you're the only one using that branch on your fork, this is quite safe, and no one will chase you with pitchforks :-). Don't feel bad about about doing this wrong. Most everyone in the psi connection has done this (I did it three times in succession). Next step is to heal your branch. Don't do anything more on that branch locally. Check out master and update it to upstream. Check out a new branch, then apply the commits that are yours. Test and then force push back to GH to the branch that GH knows to be associated with this PR. ```; git checkout master; git pull --rebase upstream master; git checkout -b new_sinf; git cherry-pick b2b49f6; git cherry-pick 147f5b2; ...; # I'm applying the commits you authored in order, just reading the hashes from this webpage above; # it's possible but unlikely that you'll have to resolve conflicts; ...; git cherry-pick 502d234; # build and test; git push origin new_sinf:e2_exch_disp_sinf -f # force added in edit 15 May 2019; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390:601,safe,safe,601,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390,1,['safe'],['safe']
Safety,"Oh wow, I haven't experienced this error before. It detected the xz- and yz- mirror plane and nothing else. It should probably gracefully report the issue and then find a point group that best matches it. Even though you told Psi4 to use C1 symmetry it still attempts to detect the highest point group for reporting purposes. I'll see what I can do to fix this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380139496:52,detect,detected,52,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380139496,2,['detect'],"['detect', 'detected']"
Safety,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249699749:172,detect,detects,172,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749,4,['detect'],"['detection', 'detects']"
Safety,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:399,detect,detects,399,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,['detect'],['detects']
Safety,"Ok, good to know-- I'll probably just avoid using addons altogether when doing dev stuff, then. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347991366:38,avoid,avoid,38,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347991366,1,['avoid'],['avoid']
Safety,"Ok, good. Now that psi4 is up-to-date with cb3 and defaults libraries, it's possible to install it into the base env (that was a bad idea when psi4 was distributing gcc52 alongside), but there's still enough turbulence among the big channels that own env is a safer bet. Btw, if your base env is longstanding and contains `gcc-5-mp`, that's a non-modern-psi artifact that can be gotten rid of.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-395781344:260,safe,safer,260,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-395781344,1,['safe'],['safer']
Safety,"Ok, hopefully the latest commit has made Psi4 safe for Accelerate again. I wasn't able to recreate the missing symbol error on Linux, but I think these workarounds will suffice. I at least got the CMake to find the MKL fns and then not find them under a different name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541:46,safe,safe,46,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541,1,['safe'],['safe']
Safety,"Ok, sounds safe to leave the `boost::python` out for the time being and go ahead and merge this PR to get the python so `psi4.so` working again. @bennybp, you'll have noticed that I didn't do the initialize and finalize changes possibly necessary for your linux so `libpsi4.so` since I couldn't test the built product. Whenever you like, add a `libpsi4so` target to build your version. Even if the python so and the linux so are identical, I think they'll have different names and install locations (site-packages and lib, respectively), so they'll need different targets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/268#issuecomment-187021220:11,safe,safe,11,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-187021220,1,['safe'],['safe']
Safety,"Ok, the memory makes sense if confusing. 37.25 GiB supplied, 0.75 SCF safety factor so 28 GiB passed to SCF. The collection took 8 GiB so 20 GiB given to JK (all extra is fed there). Still a bit confused why Disk is used though and why #1667 is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503715161:70,safe,safety,70,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503715161,1,['safe'],['safety']
Safety,"Okay all my questions have been answered, so pending reviews this is ready to merge. I added the cost property to the vibanalysis test and applied the fix in `qcdb/molecule.py` to avoid the ""No atoms detected, returning"" lines printing. Since the test runs in 10s I left it in quicktests. Last question to answer, does this close out #714 or should that issue stay open after merge?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-382039560:180,avoid,avoid,180,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-382039560,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288573307:232,detect,detection,232,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307,1,['detect'],['detection']
Safety,"Okay, here are some other considerations that must be accounted for when constructing the correct DFJK object:. 1. PackedDFJK if do_wK_ else SymmDFJK; 2. SymmDFJK if SymmDFJK->AO_core() else PackedDFJK. Note that the above two will require knowledge of `do_wK_` and `doubles_` **in the JK constructor**. 3. PackedDFJK if procedure relies intrinsically on old DFJK else SymmDFJK. (3.) might be tricky. `DFJK` used `df_ints_io_` to prepare, save, and load the 3-center integrals. Some procedures in Psi4 intrinsically rely on being able to load files produced by DFJK. So not only will we need avoid using SymmDFJK in those procedures, but we might also need to do so in preemptive procedures (such as SCF) so that the files can be properly prepared for use later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382594587:592,avoid,avoid,592,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382594587,1,['avoid'],['avoid']
Safety,"On ""No atoms detected"", it's harmless but annoying. There's a couple PRs that'll fix it, but it wouldn't hurt to do it soon from a light PR like this one. https://psi4.slack.com/archives/C7W34BLQ7/p1521914834000079",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-382011515:13,detect,detected,13,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-382011515,1,['detect'],['detected']
Safety,"On some systems, the default temp location should not be `/tmp`; but it is set by either `$TMPDIR`, `$TEMP` or `$TMP` (commenly done on HPC; systems, where the temp location may be somthing special, a ssd for example).; This patch first checks those 3 environment variables; and uses its value when set. It falls back to `/tmp` when; nothing is set. `std::getenv` needs C++11 to be thread safe.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97:389,safe,safe,389,https://psicode.org,https://github.com/psi4/psi4/pull/97,1,['safe'],['safe']
Safety,"On the `clean` issue, I don't see a change in behavior from your PR. The below (on master) also requires the intervening `clean()` to avoid a PSIO error. Maybe the rules of how much the user should need to call clean need rethinking, but at least they are steady (one used to have to call it after practically everything). ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 2 0 0; }. set basis cc-pvdz; sapt_global = energy(""sapt2+(3)"", molecule=ne2). clean() # PSIO error without this line. # these two calls are equivalent; #cbs_string = energy(""mp2/6-311++G** + D:ccsd/6-311+G""); cbs_string = energy(cbs, corl_wfn='mp2', corl_basis='6-311++G**', delta_wfn='ccsd', delta_basis='6-311+G'); compare_values(-257.50097969, cbs_string, 5, 'cbs'); ```. On the caspt2, runs fine for me, too. If you want to see the error try [looking in the testing log file](http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput). But it's certainly outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379830469:134,avoid,avoid,134,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379830469,1,['avoid'],['avoid']
Safety,"One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a bit more in the spirit of object orientation. I'm a little puzzled as to why it detected a new linear bend in Frag 2 (one that was already there!) but not in Frag 1, i.e. whether it found it but ignored it had distorted far enough away from being linear, in which case, surely it should have deleted it and replaced it with a normal bend! I'll keep on digging...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-296160675:2080,detect,detected,2080,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675,1,['detect'],['detected']
Safety,"Ooh, and builds can take more than an hour. Hopefully we'll be seeing fewer timeouts.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368#issuecomment-441378062:76,timeout,timeouts,76,https://psicode.org,https://github.com/psi4/psi4/pull/1368#issuecomment-441378062,1,['timeout'],['timeouts']
Safety,"OpenBLAS has seen quite a few bugfixes in the last couple months, especially thread safety related. I would recommend pulling the latest trunk version from github, and then compiling it with GCC, and `USE_THREAD=1 USE_OPENMP=1 and DYNAMIC_ARCH = 1` in Makefile.rule. The DYNAMIC_ARCH is optional, it enables runtime CPU arch detection. ; This could rule out both bugs in older versions of OpenBLAS and the chance that the Intel compilers are messing up OpenBLAS.; IIRC OpenBLAS is rarely used/tested with Intel compilers, since most people who have Intel compilers end up using MKL instead. PS: The comment in Makefile.rule of OpenBLAS even includes a vague remark about Intel and other non-GNU compilers being non-recommended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387102336:84,safe,safety,84,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387102336,2,"['detect', 'safe']","['detection', 'safety']"
Safety,"Opportunity to avoid Libxc5 surprises ourselves and help Libxc out by testing their new parameters interface: https://gitlab.com/libxc/libxc/-/merge_requests/284 . I'll get to it later this week, but if anyone wants to play with the p4/xc connection, go for testing. Ping me on any setup issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934:15,avoid,avoid,15,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934,1,['avoid'],['avoid']
Safety,Outstanding detective work. I bet that was a nightmare to figure out. It's not obvious to me how Boost is related to DGEMMs; what am I overlooking?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-199094320:12,detect,detective,12,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199094320,1,['detect'],['detective']
Safety,"PR #1289 marks the `opt-full-hess-every` test as disabled on AppVeyor. As I commented in the AppVeyor file, that test requires angular momentum 6, due to the form that second derivative skeleton integrals take. Given AppVeyor's tendency to timeout, I opted to just exclude that test, rather than compile with higher angular momentum and make the timeout problem worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-433666463:240,timeout,timeout,240,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-433666463,2,['timeout'],['timeout']
Safety,"Parts are arriving for an AMD server in our lab, so this may get more testing. But for now, OpenBLAS is going to go the way of Accelerate (on Mac) and just get a nice Use At Your Own Risk warning. I daresay Psi could use openblas directives better, but the stack of difficulties (wrong fctls, scaling, numpy compatibility, conda compatibility) is too high when there's a free, compatible, and working alternative in place. Glad to revisit periodically. P. S. There might be a further technical choice why the conda openblas package isn't building the Fortran/LAPACK code with optimizations (https://github.com/psi4/psi4/issues/1009#issuecomment-387075271), but an immediate technical reason is that conda gfortran 7.2.0 isn't distributing `omp_lib.[h|mod]`, so threading isn't avail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669:183,Risk,Risk,183,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669,1,['Risk'],['Risk']
Safety,"Perhaps I am just an idiot, but I can't seem to import the Python bindings; into a Python script unless the library that contains them (in this case; psi4_main.so or libpsi4.so) has the same name as the boost python module; (psi4). This is why I was insisting on a a psi4.so library. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 23, 2016 1:58 PM, ""Lori A. Burns"" notifications@github.com wrote:. > To avoid the complications forecasted by my last comment, we're going to; > update this repo to the current development head. This probably still; > breaks the items mentioned in #442 (comment); > https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I; > know Ryan's already shifted to some of my commits, so I think the trouble; > of Pulsar maybe having to tie their externalproject psi4 to e705b88; > https://github.com/psi4/psi4/commit/e705b88b562a303e1b789417ad9cfe1648251d63; > is less than the trouble if the development head gets lost or nonlinear. So; > FYI, particularly @bennybp https://github.com/bennybp .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-241819043, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi5xifLl8M1ZtI7tKuEapnaMgrB0Qks5qizSugaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241853765:434,avoid,avoid,434,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241853765,1,['avoid'],['avoid']
Safety,"Point of clarification, I don't think density screening will allow ""fewer; iterations"", so I suggest deleting those words from the ""Notable Features""; description. But hopefully it will lead to ""less time"" because fewer; integrals will be computed. On Fri, Dec 11, 2020 at 1:09 PM Andy Jiang <notifications@github.com> wrote:. > Description; >; > Implements density screening into the direct SCF Algorithm, no iterative; > Fock build currently, but iterative Fock build will be a future addition; >; > Reference paper:; > https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111; > Notable Features; >; > - Improve the efficiency (fewer iterations, less time) of the direct; > SCF Algorithm without compromising accuracy; >; > Checklist; >; > - Passes Sanity Check for Water Molecule, will include a Google Sheets; > link as I include more tests; > - Code tested on a diverse set of molecules; >; > Status; >; > - Rough Draft Phase; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/2062; > Commit Summary; >; > - Density Screening Rough Draft; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/DirectJK.cc; > <https://github.com/psi4/psi4/pull/2062/files#diff-5be42036f62111d8e1e5420b7a1e5b178b56fa9b55cbbe2453950147f868481f>; > (92); > - *M* psi4/src/psi4/libfock/jk.h; > <https://github.com/psi4/psi4/pull/2062/files#diff-47381cdba9dc8065e0f8bcf7939d6dfbf532b7f85be2f1df584dfc4dde5b3bfb>; > (3); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/2062/files#diff-85f451c75b4e468882c42e9eb347a3e4b3e58891bbfe92168329cd0b32ce6cb4>; > (4); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/2062.patch; > - https://github.com/psi4/psi4/pull/2062.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2062>, or un",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743345990:757,Sanity Check,Sanity Check,757,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743345990,1,['Sanity Check'],['Sanity Check']
Safety,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:800,safe,safe,800,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,1,['safe'],['safe']
Safety,Problem with new BLAS / OpenMP detection,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:31,detect,detection,31,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['detect'],['detection']
Safety,"Psi4 doesn't seem to be initializing global variables in a way that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:489,detect,detector,489,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['detect'],['detector']
Safety,"Psi4 is really only safe to install with a defaults base, not a c-f base, on Linux. If you added `defaults` to the channel list or `anaconda::intel-openmp`, it'd likely solve, but I think you'd get a runtime error related to symbols and/or mkl- vs openblas-based environment. It's possible to get it working through a careful install order (iirc) or to run two conda envs at once (one defaults-based with psi4 and one c-f based with others) as the ecosystem GHA does. But on the whole, Linux psi4 in c-f env is not suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108:20,safe,safe,20,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108,1,['safe'],['safe']
Safety,Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4201,detect,detecting,4201,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:554,detect,detected,554,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['detect'],['detected']
Safety,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1924,safe,safe,1924,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,1,['safe'],['safe']
Safety,"Psi4 uses an branch of L2 that hasn't been merged to master and uses CMake detection, not pkgconfig detection. While the detection scheme can be overcome, several build options need to be set for Psi4 such that if you have a L2 install that works with any other QC package, it probably doesn't work with Psi4. See https://github.com/evaleev/libint/issues/190. > Could NOT find Libint2 (missing: Libint2_DIR). I'd guess this is a red herring. Unless you've built from https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 tarball, the Psi4 buildsys as-is won't succeed for L2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2675#issuecomment-1212521732:75,detect,detection,75,https://psicode.org,https://github.com/psi4/psi4/issues/2675#issuecomment-1212521732,3,['detect'],['detection']
Safety,"Psi4 uses the python headers, so it must be run with the same Python version that CMake detected at build time. The `__Py_ZeroStruct` strongly suggests to me that you're mixing Py2/3. You can see what Python psi was built with in your `{objdir}/CMakeCache.txt` or in the top line of built executable `{objdir}/stage/.../bin/psi4`. If you continue this thread, also report `otool -L {objdir}/stage/.../lib/psi4/core.so`, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316410141:88,detect,detected,88,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316410141,1,['detect'],['detected']
Safety,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-201953614:483,abort,aborts,483,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614,1,['abort'],['aborts']
Safety,"Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:3041,detect,detection,3041,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['detect'],['detection']
Safety,Python 3 library not detected correctly by cmake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/163:21,detect,detected,21,https://psicode.org,https://github.com/psi4/psi4/issues/163,1,['detect'],['detected']
Safety,"Regarding Ambit, Jet did a lot of the CMakeRewrite stuff, but I don't thing the Psi4 build system has been prepped to detect it. More importantly, I think KillTheBoost has to be done for Ambit before it's worth finializing the CMake for it. **Not Working:** `Ambit`, `v2rdm_casscf` (where not working means you'd have to do some real build work to get them running)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249036194:118,detect,detect,118,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249036194,1,['detect'],['detect']
Safety,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-123019591:21,detect,detection,21,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591,3,['detect'],"['detect', 'detection']"
Safety,Remove Redundant Dipole/Quadrupole Code,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485:7,Redund,Redundant,7,https://psicode.org,https://github.com/psi4/psi4/pull/2485,1,['Redund'],['Redundant']
Safety,Removed redundancies in OCC manual entries,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/147:8,redund,redundancies,8,https://psicode.org,https://github.com/psi4/psi4/pull/147,1,['redund'],['redundancies']
Safety,"Removed the DETCI refs from the docs table, and in select ccsd. . I also updated occ psivars. It was setting `CURRENT CORRELATION ENERGY` for `{df/cd}-ccsd(t)` but it was not setting `CCSD(T) CORRELATION ENERGY`. The test now runs through a more complete set of cross checking. Testing conv (fnocc, ccenergy) and df/cd (fnocc, occ) both with and without frozen core. . Note: The changes to occ required a rebuild, and I am noticing when doing df/cd (either occ or fnocc module) I get a message printed to `stdout`""No atoms detected, returning"". Are we aware of this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827387:523,detect,detected,523,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827387,1,['detect'],['detected']
Safety,Removed the VERSION file to avoid confusion. Resolves #271.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272:28,avoid,avoid,28,https://psicode.org,https://github.com/psi4/psi4/pull/272,1,['avoid'],['avoid']
Safety,Replace 'get_array' with 'variable' to avoid deprecation warning. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1549:39,avoid,avoid,39,https://psicode.org,https://github.com/psi4/psi4/pull/1549,1,['avoid'],['avoid']
Safety,"Reproach well deserved, @jgonthier. Info has been in [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L71), but that admittedly is an awful error message. I've figured out how to hit it locally (conda directory structure bypasses it all), and a fix will appear soon to a PR near you. Thanks for the report. @edeustua, `-DOpenMP_LIBRARY-DIRS` probably _is_ the intended solution. The usual case where this issue appears is you're building Psi with GCC compilers and MKL LAPACK. For a usual from-intel (as opposed to from-conda) MKL installation, libraries mkl_rt and iomp5 are in different locations. With GCC+MKL, Psi needs to explicitly use iomp5 to suppress the tenacious gomp. But unless the location of iomp5 is already known to CMake through another detection sequence, it can't find the library, hence the (poor) error message you got. `OpenMP_LIBRARY_DIRS` is the intended solution. If I'm misunderstanding your circumstance, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976:779,detect,detection,779,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976,1,['detect'],['detection']
Safety,Restarted. The land of timeouts is annoying. Is the build time going back up?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-369358445:23,timeout,timeouts,23,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-369358445,1,['timeout'],['timeouts']
Safety,"Right now, our SCF instability following algorithm is the following, very dumb one:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then repeat; * If unstable _with a new eigenvalue_, increment the magnitude. It must have been bad. We can guess more intelligently. A _smarter_ algorithm would look like:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then...; * Do a line fit of the SCF energy in the direction of the unstable vector. The instability analysis gave us the first two terms of the Taylor expansion, analytically. Given that, we can then use the SCF energy at the rotated build to fit the _third_ derivative. It may also be possible to project the SCF gradient into the unstable direction. We can then use both pieces of information to fit the third and fourth derivative. (Some numerical tests will be necessary to determine whether the fourth dimensional fit is worthwhile, and good rotation magnitudes.); * We then find the zeroes of f'(x)/x. This is a quadratic, and we can solve the roots analytically. If both are real, evaluate f at both zeroes to find a guess for the true minimum, and continue SCF at the guess rotation. If both are imaginary, a degree four polynomial fit predicts that f(x) has no zeroes, and our fit is unreliable. Print a warning and the current orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045:1388,predict,predicts,1388,https://psicode.org,https://github.com/psi4/psi4/issues/3045,1,['predict'],['predicts']
Safety,"Right, this is purely a formatting pass (see #1144) according to the [clang-format file](https://github.com/psi4/psi4/blob/master/.clang-format). If you'd like to do it yourself to avoid disrupting authorship, just `clang-format -i *.h *.cc` in the fnocc directory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1158#issuecomment-415849759:181,avoid,avoid,181,https://psicode.org,https://github.com/psi4/psi4/pull/1158#issuecomment-415849759,1,['avoid'],['avoid']
Safety,"Running the following input; ```; molecule {; symmetry c2v; 0 1; N; N 1 1.50; }. set basis cc-pCVDZ; set reference rohf. set restricted_docc [2, 0, 0, 0]; set ras1 [0, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [0, 0, 0, 0]; E, cas_wfn = energy('rasscf', return_wfn = True). set restricted_docc [0, 0, 0, 0]; set ras1 [2, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [4, 0, 2, 2]; E, ras_wfn = energy('detci', ref_wfn = cas_wfn, return_wfn = True); ```; results in a successful run but; ```; $ psi4 NN_1.50.in ; free(): invalid size; Aborted (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2309:530,Abort,Aborted,530,https://psicode.org,https://github.com/psi4/psi4/issues/2309,1,['Abort'],['Aborted']
Safety,S_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try Open,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:12862,Detect,Detecting,12862,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,Safer memory operations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607:0,Safe,Safer,0,https://psicode.org,https://github.com/psi4/psi4/pull/607,1,['Safe'],['Safer']
Safety,"Same timeout as before. `pywrap-alias` doesn't seem to enter `detci`, so I doubt that's the problem. Any other advice on diagnosing this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683894617:5,timeout,timeout,5,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683894617,1,['timeout'],['timeout']
Safety,Sanity check socc and docc arrays to avoid segfaults.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602:0,Sanity check,Sanity check,0,https://psicode.org,https://github.com/psi4/psi4/pull/602,2,"['Sanity check', 'avoid']","['Sanity check', 'avoid']"
Safety,"Seeing as this PR is almost four years old, it's safe to say somebody else will need to take over this PR, if we want it in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658#issuecomment-798431091:49,safe,safe,49,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-798431091,1,['safe'],['safe']
Safety,"Should be doable: in ERKALE I run an eigendecomposition of a 100x100 random matrix in sequential mode and repeat the calculation in a parallel OpenMP section. If the decompositions of the individual threads don’t match the sequential one, then LAPACK is not thread safe. Susi Lehtola; Sent from my phone so excuse my brevity. On 20 Jan 2019, at 15.03, Michael Banck <notifications@github.com<mailto:notifications@github.com>> wrote:. Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1461#issuecomment-455864865>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJ2QSkRaIyanSHwFBRQyrKH2-9W1_ks5vFGkggaJpZM4ZxGFP>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306:265,safe,safe,265,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306,1,['safe'],['safe']
Safety,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:1382,detect,detected,1382,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,1,['detect'],['detected']
Safety,"Since the problem is that CMake is not detecting the proper flags, this issue also affects all the other options; ```; option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798:39,detect,detecting,39,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798,1,['detect'],['detecting']
Safety,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:1001,detect,detection,1001,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,1,['detect'],['detection']
Safety,"So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. I really like the line broadening plot generation. If there's some kind of provenance info that can be added to the json reference data file that would be handy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644203551:39,safe,safe,39,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644203551,1,['safe'],['safe']
Safety,"So is libint2 detecting correctly now and psi4 is compiling, or are you still having problems? If the latter, is it a clean objdir?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2879#issuecomment-1437927691:14,detect,detecting,14,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437927691,1,['detect'],['detecting']
Safety,"So to reiterate, you are circumventing a safety feature of Psi4 this way. The analytical gradients are very likely wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-347016473:41,safe,safety,41,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-347016473,1,['safe'],['safety']
Safety,"Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3561,unsafe,unsafe,3561,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['unsafe'],['unsafe']
Safety,"Somewhere I saw a question about whether psi4 in psi4conda could update. . tl;dr no, create a new environment instead, as you'll get the latest, and it's far more predictable. Technically, yes, `conda update psi4 -c psi4` should get you the latest stable release, v1.3.2 from mid-2019, or `conda update psi4 -c psi4/label/dev` should get you the latest nightly build from this week. However, practical advice is that whenever your psi4 is more than a few months old, don't update, just create a new environment, `conda create -n <env-name-of-your-choice> python=3.<python-version-of-your-choice> psi4 -c psi4/label/dev`, activate that env, and use that new psi4 instead of the (remaining, still functional) psi4 in the main environment of psi4conda. The reasons that a freshly solved environment is better is that: (1) Far upstream packages like mkl or numpy or hdf5 update over time and new psi4 may not be built against the older ones in the psi4conda env, so you don't get the newest psi. (2) To make psi4-served conda packages easy to use for both compiling and installing binary psi4, I don't pin dependencies very tightly, so the constraints of the env may not allow all the latest packages to be pulled or even a consistent set of packages. Same advice for any psi4 install, not just psi4conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944:163,predict,predictable,163,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944,1,['predict'],['predictable']
Safety,"Sorry for being late on this one - I've been doing taxes all day :( The original error comes from a negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:926,safe,safer,926,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393,1,['safe'],['safer']
Safety,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/665#issuecomment-291492708:103,recover,recover,103,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708,1,['recover'],['recover']
Safety,"Sorry, I should have read your post more carefully. I didn't notice the 3.27.7 bit. I still don't actually understand it b/c [CMP0144](https://cmake.org/cmake/help/v3.27/policy/CMP0144.html) was introduced in 3.27.0 . Maybe Fedora patched it out b/c it could be disruptive? Anyway, I guess FAE's is the safer approach in #3089",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308:303,safe,safer,303,https://psicode.org,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308,1,['safe'],['safer']
Safety,"Sorry, didn’t mean to question the need for -fopenmp to compile the openblasusing program. Just concerned about this quote. . “AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.“. If that’s true and if other programs rely on openblas native threading, then the conda openblas can never be used for psi even after PR and rebuild. . Whereas if USE_OPENMP=1 only adds capabilities, there’s a plan forward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801:153,safe,safe,153,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801,2,['safe'],"['safe', 'safety']"
Safety,"Sounds good.; A bit more info on why I'm getting a seg fault that might help...I'm not expecting a quick solution but it might help with the process in the long run. The two fragments are detected properly and internal coords determined and printed out including one lin bend in each fragment (plus their complements) (listed as L/l(3,12,13) and L/l(18,25,26)). One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-296160675:188,detect,detected,188,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675,3,['detect'],"['detected', 'detects']"
Safety,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252934079:47,detect,detect,47,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079,2,['detect'],"['detect', 'detection']"
Safety,Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A9523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055CE518AA655 Unknown Unknown Unknown; python3.7 000055CE518AA77C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007F14B6F52BF7 __libc_start_main Unknown Unknown; python3.7 000055CE5184EFF0 Unknown Unknown Unknown; Aborted (core dumped); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:2267,Abort,Aborted,2267,https://psicode.org,https://github.com/psi4/psi4/issues/2084,1,['Abort'],['Aborted']
Safety,"Sure, I put X-s on them. On the other hand it'd be good get final reviews and merges on PRs w/o holds, or avoidable holds will just accumulate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1144#issuecomment-419255538:106,avoid,avoidable,106,https://psicode.org,https://github.com/psi4/psi4/issues/1144#issuecomment-419255538,1,['avoid'],['avoidable']
Safety,"Sure, we can always fix it later. Just looked like it would be an easy fix. > On Jul 20, 2016, at 6:11 PM, Andy Simmonett notifications@github.com wrote:; > ; > I agree that compatibility is nice, and will press ahead with adding the symmetry back in if that's the consensus. My hesitation to do so stems from the fact that only OUT_OF_CORE can use the symmetry, and it's the worst algorithm we have in JK. Symmetrizing is a lot more work than using transform() to transform the matrices (which doesn't seem to play nicely with mixed symmetric/c1 matrices), because the perturbations themselves must also be transformed to SALCs. None of that is hard, but it does make the response code messier; I currently check to see if the JK engine runs in C1 anyway, and avoid symmetrization for those cases.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/437#issuecomment-234099704, or mute the thread https://github.com/notifications/unsubscribe-auth/ATl9UO6JWO3v3-jWQ1Ieb9uCVbAm3YUGks5qXp0VgaJpZM4JFTfJ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234099972:761,avoid,avoid,761,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234099972,1,['avoid'],['avoid']
Safety,"Surprising that the low memory algorithm is faster! . I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/lowmemory_triples.cc#L72; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L659-L661; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L780",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556:107,avoid,avoid,107,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556,1,['avoid'],['avoid']
Safety,"Test case 32 from the FH51 subset of [GMTKN55](http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/FH51ref.html) computes the isomerization energy between H2C-C5-CH2 and heptatriyne. So as to not to bury the lede: very strange energies result when running H2C-C5-CH2 with wB97X-3c, which I suspect are tied to this message:. ```; !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!; ``` . The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. Similar results are seen when using B3LYP-D4/vDZP or r2SCAN-D4/vDZP, suggesting that vDZP is the common factor here. The orbital occupancies for H2C-C5-CH2 do seem a bit odd to me? I'm not used to seeing such low-energy virtual orbitals... ```; Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:573,predict,predicted,573,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['predict'],['predicted']
Safety,"Testing the gradients of dlDF/cc-pVDZ, I see similar differences between analytic and numerical gradients with modern Psi4 (1.2a1.dev829):. - Density fitting error <= 10^{-6}; - Differences b/t analytic & numerical as large as ~10^{-4}; - Nearly no difference between analytic gradients computed w/ standard and dense grids; numerical gradients differ by nearly 10^{-4} between dense and standard grids. For anyone interested, I've uploaded a file containing the raw gradients [here](https://github.com/psi4/psi4/files/1919924/dlDF_summary.txt) for perusal. These observations would seemingly point towards libXC kernel instabilities for meta-GGAs, instead of a more targeted problem with our M05-2X gradients in particular, exactly in line with @dgasmith's prediction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-381998886:758,predict,prediction,758,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-381998886,1,['predict'],['prediction']
Safety,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195957592:1229,avoid,avoid,1229,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592,1,['avoid'],['avoid']
Safety,"Thank you, I am glad to hear that the issue is known and fixed. For the future, though, I am troubled that this issue exists without warning in a build that looks safe (marked ""Stable Release""). How can I be more confident in Psi4 results? Is there a test suite including issues like SCF instability (more exhaustive than `psi4 --test`), that I could use to verify a Psi4 build before running large workflows?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869272035:163,safe,safe,163,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869272035,1,['safe'],['safe']
Safety,"Thank you, Zach. I'm sorry you hit the results of my loose precision choice, but thanks for investigating. I'll run a conda-build to avoid surprises.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139#issuecomment-804319190:133,avoid,avoid,133,https://psicode.org,https://github.com/psi4/psi4/pull/2139#issuecomment-804319190,1,['avoid'],['avoid']
Safety,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40186517:263,detect,detect,263,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517,1,['detect'],['detect']
Safety,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:293,detect,detecting,293,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['detect'],['detecting']
Safety,"Thanks a lot for you hard detective work to track this down. I'm happy to merge the PR, but I'd like to dig around and see if I can figure out why the off-diagonals appear in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292588286:26,detect,detective,26,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292588286,1,['detect'],['detective']
Safety,"Thanks for [the PR](https://github.com/loriab/psi4/pull/8), @bozkaya. Unfortunately, it (1) contains commits from authors other than yourself, indicating that the branch isn't based off loriab:ugurfno and (2) the final commit, which should contain just your changes from this week, shows over 3k files and 1M LOC changed. This is seriously wrong and probably not worth trying to recover from. Perhaps start over with [these directions](https://github.com/psi4/psi4/pull/1390#issuecomment-444903155). Get my branch and add your changes. The commits tab in the PR to me should be one or a few commits solely by you from this week, and the LOC diffs should be in the hundreds (or low thousands if you add many tests). Psi uses ordinary git and the PR workflow, so internet resources and [our resources](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow) are available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-447379000:379,recover,recover,379,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-447379000,1,['recover'],['recover']
Safety,"Thanks for answers! After disabling SIP in the recovery mode, I can debug the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258681033:47,recover,recovery,47,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258681033,1,['recover'],['recovery']
Safety,"Thanks for handling this, Ashutosh. Libtrans is showing its age, so it's great to see it being modernized. There are many CI and CC tests that don't run on Travis, so as a sanity check it'd be great if you could run the full test suite from the build directory: `ctest -j 12` if you have 12 cores available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303894263:172,sanity check,sanity check,172,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303894263,1,['sanity check'],['sanity check']
Safety,"Thanks for looking into it. It looks like none of these involve `Array2d::diagonalize`, so this PR is good on that front. This PR does not touch `Matrix::diagonalize`, so those calls are safe from it. But, some `Tensor2d::diagonalize` calls would indeed fail after this PR. I think the easiest option here is to back out the removal of `Tensor2d::diagonalize` overloads for now. FYI, my plan was to _eventually_ change the function signature of `Tensor2d::diagonalize` after this PR. The `init_dim` and `cutoff` arguments have been defunct (as in no-op, unused) for ages. But that can wait until dfocc is no longer in such flux, I can excise `sq_rsp` while keeping the current interfaces.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378:187,safe,safe,187,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378,1,['safe'],['safe']
Safety,"Thanks for the bug report! I knew there was no way I got that thoroughly right. Add `message(STATUS ""Detecting MathOpenMP -- ?OpenMP=${ENABLE_OPENMP}, ?MKL=${isMKL}, CXX=${CMAKE_CXX_COMPILER_ID}"")` near the top of https://github.com/psi4/psi4/blob/master/external/common/lapack/FindMathOpenMP.cmake and also uncomment the debug printing at the end of that file. Rerun the cmake to generate a fresh objdir and start the build, but no need to let it go past compiling the first psi4 dir. Post the sections like you did above, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304:101,Detect,Detecting,101,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304,1,['Detect'],['Detecting']
Safety,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35465591:582,detect,detection,582,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591,1,['detect'],['detection']
Safety,Thanks for the heads up! Ping @bast. Do you have an example for the nondeterministic behavior? Might be something that happens also to other codes using these math detection macros.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767#issuecomment-316203705:164,detect,detection,164,https://psicode.org,https://github.com/psi4/psi4/pull/767#issuecomment-316203705,1,['detect'],['detection']
Safety,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220698751:95,avoid,avoid,95,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751,1,['avoid'],['avoid']
Safety,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:128,avoid,avoid,128,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117,2,['avoid'],['avoid']
Safety,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:389,safe,safer,389,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338,1,['safe'],['safer']
Safety,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182649776:151,avoid,avoid,151,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776,1,['avoid'],['avoid']
Safety,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:1040,abort,abort,1040,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,1,['abort'],['abort']
Safety,"Thanks for the thorough report and fix. The seemingly extra declaration @susilehtola pointed out confused me, too, though perhaps https://stackoverflow.com/a/17392441 is the answer. The map looks to be from the boost-to-avoid-c++11-standard era, so it could be improved (https://github.com/psi4/psi4archive/blame/1.0.x/src/lib/libfock/cubature.h#L302).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268452077:220,avoid,avoid-c,220,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268452077,1,['avoid'],['avoid-c']
Safety,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347710296:286,risk,risk,286,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296,1,['risk'],['risk']
Safety,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252802760:241,risk,risk,241,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760,1,['risk'],['risk']
Safety,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:241,avoid,avoid,241,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759,1,['avoid'],['avoid']
Safety,"Thanks very much, @bozkaya. Safe travels!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358043177:28,Safe,Safe,28,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358043177,1,['Safe'],['Safe']
Safety,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298452280:256,detect,detect,256,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280,1,['detect'],['detect']
Safety,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:37,detect,detection,37,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805,1,['detect'],['detection']
Safety,"Thanks, already done and up in 1223. Just need to close this one. I ended up separating it to avoid mixing formatting and work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1193#issuecomment-418909480:94,avoid,avoid,94,https://psicode.org,https://github.com/psi4/psi4/pull/1193#issuecomment-418909480,1,['avoid'],['avoid']
Safety,"Thanks. Your input looks reasonable to me. You could add `freeze_core=""true""`, if appealing, for some cost savings. TDC could diagnose more fully. In the meantime, is there any chance you're interested in trying density-fitted `gradient(""df-ccsd(t)"")` instead? https://psicode.org/psi4manual/master/occ.html#id73 That's analytic, or `gradient(""ccsd(t)"", dertype=0)` would do finite difference of the implementation you're running. Once-upon-a-time, UHF-CC(T)-gradients-are-N^8 and/or RHF-CC(T)-gradients-not-specialized-from-UHF was true. I now suspect that when I redid the capabilities tables last year that my test cases were too small to detect over-steep scaling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511:642,detect,detect,642,https://psicode.org,https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511,1,['detect'],['detect']
Safety,"That actually looks like a C++11 issue. ICC uses GCC for a lot of operations, so even with ICC you need GCC 4.9+. In your CMake compile flags you need to give ICC a link a newer GCC as follows:. ```; -DCMAKE_C_FLAGS=""../gcc5/bin/gcc""; -DCMAKE_CXX_FLAGS=""-gcc-name=../gcc5/bin/gcc -gxx-name=../gcc5/bin/g++""; ```. `cmake` should throw a warning when it detects an older GCC when using ICC. Can you please check the output when `cmake` is first called to confirm its there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261730911:352,detect,detects,352,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261730911,1,['detect'],['detects']
Safety,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:864,avoid,avoid,864,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['avoid'],['avoid']
Safety,"That's curious. Both the source and final files show up as executable to me on Linux (see below), and Mac hasn't had a problem. Are they not showing up as executable to you?. Also note that the CMake-detected python gets baked in to the psi4 shell script as a shebang (see below). This is very handy for development environments where one generally wants to avoid the system python, but maybe you need that patched?. (from builddir); ```; > ls -l stage/bin/psi4 ; -rwxr-xr-x. 1 user user 14865 Jul 30 21:21 stage/bin/psi4; > ls -l ../psi4/run_psi4.py ; -rwxrwxr-x. 1 user user 14861 Jul 30 21:14 ../psi4/run_psi4.py; > head -1 stage/bin/psi4 ; #!/psi/toolchainconda/envs/py310/bin/python; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2685#issuecomment-1215181077:200,detect,detected,200,https://psicode.org,https://github.com/psi4/psi4/issues/2685#issuecomment-1215181077,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"That's impressive. If you're aiming for a working installation, maybe install ambit on its own and pass `-DAMBIT_DIR` to the psi4 build so psi4 detects it. Psi4 build development has moved over to #442, so I won't try to diagnose this eternal loop unless it appears in the new build scheme. Thanks for the report– I'll be on the lookout for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-238566031:144,detect,detects,144,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-238566031,1,['detect'],['detects']
Safety,"The Molden documentation is unclear, but based on the code snippets you posted, your understanding of Molden's behavior is in error, and Psi is correct. 1. `rdmodd` is proof-positive that `[5D]` is used. For historical reasons, it means ""use spherical D and F functions"". This is consistent with what the Molden documentation says: ""Use the keyword [5D] on a separate line to specify the use of 'spherical' D and F functions (5 D and 7 F functions)."" While I find the meaning of the keyword unintuitive and confusing, I see nothing to support your assessment that the use of `[5D]` is _incorrect_.; 2. `rdmodd` shows that `[7F]` uses spherical f-functions but makes no statement whatsoever about the `d` functions. While the documentation says that keywords such as `[7F]` enable the use of mixed spherical and cartesians for the d and f, the documentation does not specify whether `[7F]` does this by implicitly assuming `6D` or by not changing the `D` at all, which may well be in Cartesians.; 3. Your third bullet point seem to have been miswritten. You want ""spherical or Cartesian"" and not ""Cartesian or spherical"". By specifying [5D], [7F], and [9G], Psi gives Molden the following instructions:; * Use spherical D and F shells.; * Use spherical F shells. (This is redundant but harmless, and therefore, your issue is in error.); * Use spherical G shells. I'll leave the issue open in case you point out something I've overlooked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2612#issuecomment-1159340413:1271,redund,redundant,1271,https://psicode.org,https://github.com/psi4/psi4/issues/2612#issuecomment-1159340413,1,['redund'],['redundant']
Safety,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519:685,predict,predict,685,https://psicode.org,https://github.com/psi4/psi4/issues/2519,1,['predict'],['predict']
Safety,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83124188:476,detect,detect,476,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188,1,['detect'],['detect']
Safety,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:292,safe,safely,292,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,2,"['detect', 'safe']","['detected', 'safely']"
Safety,"The convention is definitely older and may connect to other quantum chemistry codes. I believe that ACES and ACESII used the same format for the Hessian file, at least many years ago. Perhaps the source is in one of the really old codes, like the HONDO code or Pulay’s TEXAS code?. -Daniel. > On Apr 15, 2018, at 10:59 PM, Rollin King <notifications@github.com> wrote:; > ; > The tone of the documentation to which Lori alludes sounds like Justin; > Fermann to me, but the convention is probably older than the arrival of the; > Quantum Trio to the CCQC.; > ; > On Sun, Apr 15, 2018 at 9:57 PM, Jonathon Misiewicz <; > notifications@github.com> wrote:; > ; > > I'll look into this. There aren't many people who might know here, which; > > (sadly) cuts the detective work short.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/pull/953#issuecomment-381466482>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/ADguTL4Ay7mIKdYFXiDGj9BYRY6wVpGIks5tpAingaJpZM4TPKkE>; > > .; > >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/953#issuecomment-381466773>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACtz7aXaLZcW6C3S6H9CqrBL_msPg9mHks5tpAkrgaJpZM4TPKkE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381467681:756,detect,detective,756,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381467681,1,['detect'],['detective']
Safety,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:12,detect,detection,12,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['detect'],['detection']
Safety,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:17,detect,detected,17,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,1,['detect'],['detected']
Safety,"The environment that I am working on had `mpmath`, and installing `mpmath` is successful. When running `conda list`, `mpmath` shows up. How would I be able to make sure cmake is properly detecting? I have created a new environment for this installation, and only used this environment during the duration of the build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382185804:187,detect,detecting,187,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382185804,1,['detect'],['detecting']
Safety,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281118096:251,abort,abort,251,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096,1,['abort'],['abort']
Safety,"The gdma wrapper expects an output file and/or fails to detect `stdout` correctly; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/gdma_interface/wrapper.cc#L51. A work around is to specify an output file for the python script; `psi4.core.set_output_file(""script.out"")`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661:56,detect,detect,56,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661,1,['detect'],['detect']
Safety,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348251623:532,avoid,avoid,532,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"The initialization code is pretty simple, however. One could just replace the `initialize_lebedev` function by an initializer list in https://github.com/psi4/psi4/blob/ac8f87a1dd3fdda2aabc3318713d6e5ce00e2c70/psi4/src/psi4/libfock/cubature.cc#L5065; This would also avoid the need for the mutexes. . The code is hacky also elsewhere; `lebedev_error` duplicates the same information. For what it's worth, I will be developing a general C++ Becke quadrature library that would eliminate these parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268606002:266,avoid,avoid,266,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268606002,1,['avoid'],['avoid']
Safety,The issue seems to be skipping frozen core setup when ECP is detected here:. https://github.com/psi4/psi4/blob/a79c21681e411777451f5b474d7b652e2ba8baa2/psi4/src/psi4/libmints/basisset.cc#L190-L203,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/976#issuecomment-383729139:61,detect,detected,61,https://psicode.org,https://github.com/psi4/psi4/issues/976#issuecomment-383729139,1,['detect'],['detected']
Safety,"The laboratory server cannot be connected to the network, so I downloaded Psi4conda-1.3.2-py36-Linux-x86_64.sh from the pis4 official website to install it:; ```; [chenh@Pauling programs]$ ./Psi4conda-1.3.2-py36-Linux-x86_64.sh . Welcome to Psi4conda 1.3.2. Psi4conda will now be installed into this location:; /home/chenh/psi4conda. - Press ENTER to confirm the location; - Press CTRL-C to abort the installation; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:391,abort,abort,391,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['abort'],['abort']
Safety,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:452,avoid,avoid,452,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,2,['avoid'],"['avoid', 'avoiding']"
Safety,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:667,detect,detect,667,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['detect'],['detect']
Safety,"The new `bsse_type='cp'` does what `bsse_type=['cp','nocp']` used to do, calculation wise, except the `nocp` interaction energies are not reported. . To safe computer time it was useful to only calculate the dimer-basis part and get CP-corrected interaction energies directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-519006759:153,safe,safe,153,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-519006759,1,['safe'],['safe']
Safety,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:344,avoid,avoided,344,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234,2,['avoid'],"['avoid', 'avoided']"
Safety,"The problem came about just because, in parallel, I'm (i) learning to build Mac conda packages for the half-dozen add-ons, (ii) bumping all the add-ons to their latest tag, (iii) determining a good package set (boost, libgcc, etc.) for a full-featured psi4 Mac binary for both users and developers, and (iv) trying out some new conda packaging and distribution tools. The conda package _does_ point to a git tag (hopefully the same git tag as in psi4's externalproject), but I had bumped the conda tag to `1.1.2`, got the conda pkg working, then fixed up psi4 to work with the detected conda pkg. Unfortunately, by the time I worked through some library issues and tried to build pcmsolver internally to psi4, with the `int` fix, I had forgotten the tagging details, leading to this whole mistaken first place. :-). So yes, in future when someone informs me of a new version or bumps the externalproject tag, I'll bump the conda tags in sync.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-226555751:577,detect,detected,577,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226555751,1,['detect'],['detected']
Safety,"The problem is [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L81) line of code, which does an unsafe cast from a *Wavefunction to a *HF. The first call passes in an HF object and is fine. The second call does not pass in an HF object and is not fine. I think there are two separate issues here:; 1. The SCF gradient machinery should not allow non-HF wavefunctions.; 2. We may want to consider adding a way to serialize Wavefunction subclasses. To close this issue, it suffices to satisfy (1). Item (2) should be a separate issue, IMO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2712#issuecomment-1240798091:130,unsafe,unsafe,130,https://psicode.org,https://github.com/psi4/psi4/issues/2712#issuecomment-1240798091,1,['unsafe'],['unsafe']
Safety,"The problem is this part in the output. ```; 	Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is ; ```. The current C++ optking will be replaced with a python version: https://github.com/psi-rking/optking; You can try it out already (see instructions in the repo) unless you require the CBS driver. Otherwise you have to chose a different coordinate systems https://psicode.org/psi4manual/master/autodir_options_c/module__optking.html#opt-coordinates; `CARTESIAN` is a safe, but slowly converging, choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2195#issuecomment-864987485:597,safe,safe,597,https://psicode.org,https://github.com/psi4/psi4/issues/2195#issuecomment-864987485,1,['safe'],['safe']
Safety,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:401,detect,detecting,401,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,2,['detect'],"['detected', 'detecting']"
Safety,"The question is not whether Psi4's current machinery adequate or not. It's about the sensible default. If I put out a `$TMPDIR` variable, I expect programs to obey it. Most Unix/Linux programs will do so, it's even part of the Unix specification. There is no reason why Psi4 should do something different.; Heck, with all the recent evolutions in the Linux world (systemd), it's even mandatory. Per user containers and ditto `/tmp` are coming to the HPC world. ; I really see no reason why there should be hardcoded default for this. I also disagree with your C++11 sentiment. I think this is an excellent example why C++11 is long overdue. If something as trivial as fetching a environment variable is not guaranteed thread safe...; There are now more than enough compilers that support it: Clang since 3.4, GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the largest part of C++14. If you are using old compilers for calculations, you're wasting computational time and money IMHO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105040869:725,safe,safe,725,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105040869,1,['safe'],['safe']
Safety,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:13,detect,detection,13,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003,1,['detect'],['detection']
Safety,"The third Travis test is timing out too much. This can be traced to the painfully slow download time for the GCC compiler. We have plans to replace this test with some plugin validation, using native GCC compilers to avoid the timeouts. For now, we'll just nuke it to allow the backlog of PRs through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1552:217,avoid,avoid,217,https://psicode.org,https://github.com/psi4/psi4/pull/1552,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"The tone of the documentation to which Lori alludes sounds like Justin; Fermann to me, but the convention is probably older than the arrival of the; Quantum Trio to the CCQC. On Sun, Apr 15, 2018 at 9:57 PM, Jonathon Misiewicz <; notifications@github.com> wrote:. > I'll look into this. There aren't many people who might know here, which; > (sadly) cuts the detective work short.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/953#issuecomment-381466482>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTL4Ay7mIKdYFXiDGj9BYRY6wVpGIks5tpAingaJpZM4TPKkE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381466773:359,detect,detective,359,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381466773,1,['detect'],['detective']
Safety,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:146,detect,detect,146,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202,4,['detect'],"['detect', 'detectable']"
Safety,"There is certainly a bug in the code where `SOCC` is assumed to be valid when `DOCC` isn't present. I'd suggest that is modified, too, to be safe: https://github.com/psi4/psi4/blob/0e9f9a53ab260b9e81b95c2355f6bd54b1c47457/psi4/src/psi4/libscf_solver/hf.cc#L178",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1370#issuecomment-443253505:141,safe,safe,141,https://psicode.org,https://github.com/psi4/psi4/issues/1370#issuecomment-443253505,1,['safe'],['safe']
Safety,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98491250:27,avoid,avoid,27,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,There seems to be a regression in Boost 1.60 that causes problems with Psi4 (and other projects).; It has been created as an issue in the boost python repo: https://github.com/boostorg/python/issues/56. Maybe the version could be checked in the CMake configure step. It can then either abort (if the user was trying to force the use of system boost) or use the boost distributed with Psi4. Adding this since #230 was closed (and it was unrelated anyway),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/243:286,abort,abort,286,https://psicode.org,https://github.com/psi4/psi4/issues/243,1,['abort'],['abort']
Safety,"There's going to be planning on this this week, so this is the opportunity for others (particularly @dsirianni and @alenaizan) to chime in with requirements and wishes. consider this issue a scratchpad. ### haphazard notes; * overlap or replacement of the `QMMM` class; * serialization so can be called from json; * but we'd like to be able to specify polarizabilities at given sites, and have the SCF solver use those to figure out the magnitude of induced dipoles at the MM sites; * needs a subdict of points with (up to) anisotropic polarizability, subdict of point charges, subdict of diffuse points; * extensibility is important also - may need more info, such as damping factors to avoid singularities",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:688,avoid,avoid,688,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['avoid'],['avoid']
Safety,There's nothing wrong with the PR. But I confess I was using it more to avoid misplacing files than to add to Psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-335235553:72,avoid,avoid,72,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-335235553,1,['avoid'],['avoid']
Safety,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252931820:161,detect,detection,161,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820,1,['detect'],['detection']
Safety,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275696746:984,Timeout,Timeout,984,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746,1,['Timeout'],['Timeout']
Safety,"These two commits (search `mo_ext`; Rob https://github.com/psi4/psi4archive/commit/a6153df40ec424e5fdc75fb037b8a3c3fd618484 and Jet https://github.com/psi4/psi4archive/commit/d337912cc48fe14aa8ae78820581fc8f0495383a) look to be the main ones in the mo_extents history. (Also Lori https://github.com/psi4/psi4archive/commit/79e09e2ed1092437bc80cabaf13acaad12686a49 from a psiworkweek but that wasn't operational.). From comment `// TODO: Print polarity <\vec x> and extents <\vec x^2> - <\vec x>^2` and [earlier print statements](https://github.com/psi4/psi4archive/commit/79e09e2ed1092437bc80cabaf13acaad12686a49#diff-2d2260d0be9213bdd2d346178da27329R518), it sounds like the dipole part was meant for polarity printing. So it should be safe to remove or move to another function rather than tagging along in the extents function.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1440#issuecomment-451495262:737,safe,safe,737,https://psicode.org,https://github.com/psi4/psi4/pull/1440#issuecomment-451495262,1,['safe'],['safe']
Safety,"They're linked b/c the Intel link-line advisor specifies them and b/c we do some manipulation of static/dynamic detection for the binary. I don't swear it's the best way, but it hasn't been causing problems. Your `/home/kruse/gcc-4.9.4/bin/gcc` is what's active at build time? I'm surprised it's not picking up that `/home/kruse/gcc-4.9.4/lib64` libraries are being used, then preserving them in `rpath`. You may want to uncomment [this](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L94) and its friends to see what's going on with rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/657#issuecomment-287817795:112,detect,detection,112,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-287817795,1,['detect'],['detection']
Safety,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:83,risk,risky,83,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711,1,['risk'],['risky']
Safety,"This also seems like a good time just to point out that if anyone has plans for portions of psi4 to use mpi parallelism, we would want to avoid having the psi4 executable explicitly call mpirun or similiar like `xcfour` does. The ideal mpi setup would be for the user to use the host's `mpirun / mpiexec` executable to run the container. Then, the host mpi and container mpi either need to use the same PMI library or the user would need to bind the host's mpi libraries into the container. GPU support only requires the `--rocm` and `--nv` flags that I referenced above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951#issuecomment-1536697098:138,avoid,avoid,138,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536697098,1,['avoid'],['avoid']
Safety,"This command fails:; ```; $ cd samples/cc24 && psi4 test.in ; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:884,timeout,timeout,884,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['timeout'],['timeout']
Safety,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:225,safe,safer,225,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602,1,['safe'],['safer']
Safety,"This grew a bit to encompass a few more issues, its still a general bug fix patch. ## Description; Fixes and adds test for two issues that were identified:; - Fixes #586 where the SAD basis was not being set when READ failed.; - Fixes #556 as the NO option was not tracked to the new MCSCF driver.; - CI OPDM/TPDM now correctly closes files when complete.; - MCSCF Rotate matrices are now built continuously to avoid difficult cases to exponentiate.; - Patched up Dvec reading between successive CI calls (especially for MCSCF).; - PK Non-symmetric density matrices should now always be detected correction.; - Makes CI printing to be more canonical.; - Prints occupation number for CI, fixes #590. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588:411,avoid,avoid,411,https://psicode.org,https://github.com/psi4/psi4/pull/588,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"This has been broken for years. Test if it's still just the two points in the long array of things checked. If it's still that, perhaps consult @robparrish whether safer to drop the appearance of the frac code being present or just comment out the broken numbers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129:164,safe,safer,164,https://psicode.org,https://github.com/psi4/psi4/issues/129,1,['safe'],['safer']
Safety,"This is a great upgrade in current and future use and robustness! My only suggestion is to moderate the requirement of an initial gradient before a frequency computation. I grant that the additional cost of a gradient is likely to be moderate-to-negligible (though if one were computing, e.g., only one irrep of displacements it could be significant). However, the workflow of ""opt + freq"" is so very common, that it's worth it to at least provide an easy way to avoid this extra computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-380206803:463,avoid,avoid,463,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380206803,1,['avoid'],['avoid']
Safety,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333:342,safe,safe,342,https://psicode.org,https://github.com/psi4/psi4/issues/2333,1,['safe'],['safe']
Safety,"This is a subtle problem: Psi4 reorients molecules to their principal axes, and shifts the origin to the center of mass by default (mostly for symmetry detection purposes); this shift makes the input grid inconsistent with the geometry. Long term, I guess the code should apply the same shift to any grids, for consistency. Until then, the translation / rotation can be disabled as follows:; ```python; geometry= """"""; 0 1; F 0.0 0.0 0.09241; H 0.0 0.0 -0.83169; noreorient; nocom; """"""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2964#issuecomment-1548014314:152,detect,detection,152,https://psicode.org,https://github.com/psi4/psi4/issues/2964#issuecomment-1548014314,1,['detect'],['detection']
Safety,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074419:79,detect,detecting,79,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419,1,['detect'],['detecting']
Safety,"This is an issue I came across when needing to calculate the molecular weight of a molecule (which I was surprised is not already part of the Molecule class). . Currently, ghost atoms still return a mass when calling `mol.mass(i)`. The best way I have found to avoid this on the Python side is to check the Z value `if mol.Z():` because ghost atoms (correctly) return false here. `optrot.cc` does not do this correctly and so uses an incorrect molecular weight for molecules with ghost atoms, and there may be more codes that have this issue. I thought it may be better to fix `mass()` rather than try to find every single code which calculates a molecular weight and add in the Z value check. I feel ghost atoms should not have any mass in the first place, as they are usually just coordinates on which to place basis functions corresponding to the atom. I can't think of any places where you would want the mass of a ghosted atom, so please correct me if I'm mistaken. . Within `masses.h`, a note is found:; ```; ** 10/08/99 EFV - Changed an2masses[0] to 0.0000; ** (ghost atom's weight should be 0); ```; But in `molecule.cc` the an2masses list is only used if `atoms_[atom]->mass() != 0` returns false, which will not happen for ghost atoms as they are currently done. Instead, it should probably be checked first `if atoms_[atom]->Z() == 0` and return a zero mass. (I thought this was better than pushing the Z == 0 case into the else statement, because doing that throws a _lot_ of warnings at the user). This is an easy fix, but as this effects the molecule class I wanted to check some other opinions before opening my PR. There also may be a more fundamental place to fix this problem, such as when the `atoms_` list is generated, but I wasn't sure.; @amjames",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909:261,avoid,avoid,261,https://psicode.org,https://github.com/psi4/psi4/issues/909,1,['avoid'],['avoid']
Safety,"This is the output of my cmake : ; It seems to be fine. CXX=icpc CC=icc cmake .. ; -- The C compiler identification is Intel 17.0.0.20160721; -- The CXX compiler identification is Intel 17.0.0.20160721; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:477,Detect,Detecting,477,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,2,['Detect'],['Detecting']
Safety,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:122,detect,detect,122,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604,3,['detect'],['detect']
Safety,"This issue is a code cleanup wishlist. Please place a code cleanup issue here if you see it in a PR, but fixing it would be outside the scope of the PR. - [x] Remove `new` from `lib3index/fittingmetric.cc`. In some cases, `new` is used to initialize... a raw pointer that points to `std::shared_ptr<OneBodyAOInt>`. In 2022, this should be a `std::vector`.; - [ ] `onebody.h` and its derived classes have many member variables that are `double*`. Let's change to `std::vector<double>` if we can, to avoid having to worry about new/delete.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412:498,avoid,avoid,498,https://psicode.org,https://github.com/psi4/psi4/issues/2412,1,['avoid'],['avoid']
Safety,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:158,avoid,avoid,158,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576,1,['avoid'],['avoid']
Safety,"This looks great! Thanks for figuring out this very tricky problem. A long time ago, @fevangelista and I figured out the machinery to map symmetry-dependent arrays like `DOCC` and `SOCC` into the appropriate subgroups. Would you mind quickly testing to see if `DOCC` can be specified in c2v symmetry with your current version? If not, we'll have to open a follow up PR to make sure this mapping is done (I think it's best left out of this PR to avoid scope creep).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242:445,avoid,avoid,445,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242,1,['avoid'],['avoid']
Safety,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:303,avoid,avoid,303,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,1,['avoid'],['avoid']
Safety,This pull request **fixes 1 alert** when merging 2b7850eeeb1dc8d025e15d68ea6b2349acc8cbad into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2be110d7ae94dbcc4973fbdc5a098a0880f12e9). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging 2d2c8cd002229f90176b3d930e2c28714de7e079 into c9b79fb016d8e3b09e8dd980093da576d06ce03d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-254cf1d1e2f779ca42d4f2d520a4a6cad494a4eb). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging 643451ec8104ee345521b0675147a520ee43629b into 58d3bc0ae55d3affca9c75c80126be08d610915c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0b919987994ea1b1be45839c560908e938a58255). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging 748bae92d70cf0e19af497f556068be7c3721f34 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5beb9c3620c1b55e8eb5ef7829a2c59d0d407612). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging ae77767cd65e9001c9e56fcde7c5bf4abab27e9a into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c491159b4fb95f1b6ad5ec2471c7b5a6e28e9015). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging d232b91fae696c3e5ff52e092ac2bc3b19dfe35b into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a1910976e51a18d568b90d9aca9fd67f7b151905). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging e82cd637a7bbb2a0ab9613f5df07b79d5fe14555 into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ce8ad6faf1c1497dbd02ae59bfe7b34ffe12cffa). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging eb0938024a80785ce5a99f1491a2be2f0a5548dd into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d746dd3b769b758b7085d20f4fd85ed38912269d). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging f55573bde60e561ca64f5e5aeddb5f61dd41d371 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e3da07fa43c3dda1694d8fb758216fe82b3a6579). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging f715e11e174760f3415ced1b6fff154ed5d9ce3c into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-66d8003b5900a07ff0545b9c739c7ba5c7a56ea1). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:341,Redund,Redundant,341,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:341,Redund,Redundant,341,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** when merging 00c99bedcaa1ba87381865f428c43f1c44f7002d into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5247ab5369215bab32e5264252af3c7482cf66ad). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319:275,Redund,Redundant,275,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** when merging bbd3aa3412ea20ff2ef9d729e5d2e26409416b36 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2458a2c1817707b15be6f2e2b716336bb481d859). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223:275,Redund,Redundant,275,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223,1,['Redund'],['Redundant']
Safety,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:342,Redund,Redundant,342,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458,1,['Redund'],['Redundant']
Safety,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:342,Redund,Redundant,342,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335,1,['Redund'],['Redundant']
Safety,"This reminds me, there *is* a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281:43,avoid,avoid,43,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281,1,['avoid'],['avoid']
Safety,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1275,detect,detects,1275,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,2,"['detect', 'recover']","['detects', 'recover']"
Safety,"This usually falls in our memory overhead buffers (our safety margins of 20%). Can just assume nbf x nbf, the size is trivial enough to elide any possible space saving in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1660#issuecomment-500006294:55,safe,safety,55,https://psicode.org,https://github.com/psi4/psi4/issues/1660#issuecomment-500006294,1,['safe'],['safety']
Safety,"This workaround solved the problem. Many thanks for your quick reply!; Still, it seems weird to me that the default `stdout` is not detected properly...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436212143:132,detect,detected,132,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436212143,1,['detect'],['detected']
Safety,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470461:1165,sanity check,sanity check,1165,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461,1,['sanity check'],['sanity check']
Safety,"Three hours and nine minutes, according to the timestamps I have for relevant events. I _believe_ the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433:175,avoid,avoid,175,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433,1,['avoid'],['avoid']
Safety,Throw PSIEXCEPTION instead of calling abort() in detci,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:38,abort,abort,38,https://psicode.org,https://github.com/psi4/psi4/pull/3168,1,['abort'],['abort']
Safety,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:533,avoid,avoid,533,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['avoid'],['avoid']
Safety,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920:653,avoid,avoid,653,https://psicode.org,https://github.com/psi4/psi4/issues/920,2,['avoid'],['avoid']
Safety,"To avoid bugs of this kind, is it recommended to go back to Psi4 1.3.2, or forward to 1.4rc2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869884912:3,avoid,avoid,3,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869884912,1,['avoid'],['avoid']
Safety,"To avoid the complications forecasted by my last comment, we're going to update this repo to the current development head. This probably still breaks the items mentioned in https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I know Ryan's already shifted to some of my commits, so I think the trouble of Pulsar maybe having to tie their externalproject psi4 to e705b88 is less than the trouble if the development head gets lost or nonlinear. So FYI, particularly @bennybp .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241819043:3,avoid,avoid,3,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241819043,1,['avoid'],['avoid']
Safety,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:887,redund,redundancy,887,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,1,['redund'],['redundancy']
Safety,To do the above you just need to copy [these lines.](https://github.com/fevangelista/psi4/blob/aac087f1c604787c1dd85d42bf2fcdc366ae858e/psi4/driver/procrouting/mcscf/mcscf_solver.py#L201-L210). Looking at the loops im not entirely sure that we can avoid another CI iteration/density build. . For better or worse the `SOSCF` module by and large does not handle frozen spaces. When you call `update` you can probably just set the `Cocc` and `Cvir` spaces to span the full space. The only catch is that you would need to turn off the tech that tries to save the frozen Fock and inactive Fock matrix when it is formed in other places. This would be the functions `set_AO_IFock` and `set_frozen_orbitals` and the booleans that they set. Maybe you want an option like `clean_focks` or some-such that will reset these booleans. The code will compute these quantities itself and the `Cocc` expansion to also include frozen orbitals should just work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304539496:248,avoid,avoid,248,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304539496,1,['avoid'],['avoid']
Safety,"To get this particular example to work I think you can look into `proc.py:run_detci` which calls the following:; ```python; ciwfn.cleanup_ci(); ciwfn.cleanup_dpd(); ```. For now, comment this out and it should work. In the future we can add this an option like `detci_dirty` or something that avoid cleanup so that the tpdm code works as expected. To avoid the segfault you can add something like this to `form_opdm`:. ```C++; if (cleaned_up_ci_) {; throw PSIEXCEPTION(""The CIWavefunction was cleaned up, please call xxx to avoid cleanup."");; }",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586425138:293,avoid,avoid,293,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586425138,3,['avoid'],['avoid']
Safety,"To give my 2 cents to the questions above:; - `freeze_core True` should be a best-effort solution, always freezing as much as possible, but ensuring there are valence electrons (ie. for Ca2+, [Ne] core is frozen instead of [Ar], while for Ca0, [Ar] is frozen; similarly for Ar- the whole [Ar] shell should be frozen). This one is charge aware. This option should never crash the code.; - `freeze_core N` where `N = [1,2,3...]` will always freeze the N-th previous full shell, ie for `N=1` the current behaviour in master. Validation error when no valence electrons remain, to avoid the non-helpful segfault in #1271.; - @JonathonMisiewicz's idea of per-atom frozen cores (or in my view even better: per-fragment frozen orbitals) is a good one, and I'd be keen to get that sorted, but it'd probably need changes to `molecule {}` or somewhere else.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950:576,avoid,avoid,576,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950,1,['avoid'],['avoid']
Safety,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264418892:45,detect,detection,45,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892,3,"['detect', 'predict']","['detection', 'predictable']"
Safety,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-217275131:708,avoid,avoid,708,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131,1,['avoid'],['avoid']
Safety,"Tweaked the geometry slightly to avoid a crossing a bit ago. Appears to have worked, closing for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322#issuecomment-260082001:33,avoid,avoid,33,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-260082001,1,['avoid'],['avoid']
Safety,"UPDATE: Above holds that Psi4 can be built against NumPy v1 _or_ v2, just be sure your runtime np is the same major version as your build-time numpy, or you'll get the ""atoms are too close"" error. _But_ I've learned a few more constraints and pitfalls since then:. * to use np v2, you must have `pybind11>=2.12` (right now the codedeps/psi4-path-advisor setup is constraining to 2.10 or 2.11 to avoid a docs issue; working on a resolution) (signature is ""atoms are too close""); * to use np v2, you must have `pint>=0.24.1` (v0.24.0 works for >=py310; v0.24.1 works for >=py39) (signature is something like sumprod not available in numpy); * to use np v2, you must have `qcelemental>=0.28.0` (fixed since last week; qcengine doesn't need changes); * on c-f, packages have ways or declaring what they're compatible with so that an env solves into a workable state. Those aren't in place at present for the numpy+pint and numpy+pybind11 combinations, so you need to check them yourself.; * even if your build env is np v2, beware of any pip installs that can surreptitiously sneak in a np v1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750:395,avoid,avoid,395,https://psicode.org,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750,1,['avoid'],['avoid']
Safety,"USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4380,detect,detection,4380,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['detect'],['detection']
Safety,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:4701,Abort,Aborted,4701,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['Abort'],['Aborted']
Safety,"Unmarking this as attached to any milestone. As noted in my previous message, this is a very difficult (and not pressing) bug to fix because we _really_ want to avoid touching wavefunction API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339:161,avoid,avoid,161,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339,1,['avoid'],['avoid']
Safety,Update base compiler version detection with Intel compiler and clang.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/579:29,detect,detection,29,https://psicode.org,https://github.com/psi4/psi4/pull/579,1,['detect'],['detection']
Safety,"Very true, @bozkaya, and we've done that. We'd really like to be able to run _any_ molecule through a code, though. If the code absolutely can't handle the case, an error is the way to go. But preferably, if the code's contribution is `0.` or unit matrix or anything predictable, I'd really appreciate it if that trivial return could be programmed in. This would greatly help high-throughput calcs or in @wardence's case, multi-stage single calcs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358041068:267,predict,predictable,267,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358041068,1,['predict'],['predictable']
Safety,"We don't pull VERSION into the manual somewhere do we?. On Monday, February 22, 2016, Lori A. Burns notifications@github.com; wrote:. > It looks good so far as I can predict.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/272#issuecomment-187462125.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187471134:166,predict,predict,166,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187471134,1,['predict'],['predict']
Safety,We had a major cmake / math-detect revamp of the code recently. Things should work more smoothly in the new version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122119411:28,detect,detect,28,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122119411,1,['detect'],['detect']
Safety,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:13,avoid,avoid,13,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755,1,['avoid'],['avoid']
Safety,"We pulled it in today. A fresh pull and rebuild should have these changes for you. . -Daniel Smith; Sent from my iPhone. . > On Nov 26, 2017, at 11:35, Ian Bell <notifications@github.com> wrote:; > ; > Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. ; > ; > Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347029051:883,safe,safelinks,883,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051,1,['safe'],['safelinks']
Safety,We were supposing it was something like that. Would it be reasonable to print results only from converged roots and then ending with coffee instead of beer? That could avoid the banks of zeros and the quick impression that all's well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2521#issuecomment-1089623349:168,avoid,avoid,168,https://psicode.org,https://github.com/psi4/psi4/issues/2521#issuecomment-1089623349,1,['avoid'],['avoid']
Safety,"We were thinking that the build_scf_wavefunction auxiliary basissets had already been consumed (except maybe decon) and the post-scf aux ones hadn't been added to Wfn. Thought we might be safe for the very particular location that c1_deep_copy is called at present, though, very true, not in general. Hopefully BasisSet will be copyable and/or rebuildable by then. Or our thing may be all wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/737#issuecomment-312405839:188,safe,safe,188,https://psicode.org,https://github.com/psi4/psi4/pull/737#issuecomment-312405839,1,['safe'],['safe']
Safety,We're also struggling with performance issues here in developing methods to predict tautomer ratios and pKas. Parallelization would be super helpful!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012:76,predict,predict,76,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012,1,['predict'],['predict']
Safety,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:116,detect,detecting,116,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,1,['detect'],['detecting']
Safety,"Well, good news is that the functional and the psi version are irrelevant. It's purely a particular geometry that you hit that's confusing the symmetry detection. And only when not shifted to center-of-mass. Never seen that error before, so will definitely investigate. Below is minimal example. BTW, `1.2a1.dev600` is still 300-400 commits behind master, due to my conda negligence. If I can get #946 in, I'll have a minimal _new_ conda build on the `-c psi4/label/agg` subchannel that actually uses the `-ng`/gcc72 compilers. ```; molecule MOL {; 1 1; nocom # toggle for disaster; C 0.000000000445 -0.000000002634 -0.176009819382; C 0.017055492504 1.213674219316 0.519005187104; C 0.010905297833 1.207533611621 1.904879649273; C 0.000000001371 -0.000000001015 2.595491320593; C -0.010905296809 -1.207533610178 1.904879653967; C -0.017055492743 -1.213674218642 0.519005186244; C 0.000000000685 -0.000000001418 -1.643506768663; H -0.011074063554 2.157895826255 -0.014254560550; H 0.006037200834 2.144998257605 2.447030976059; H 0.000000002397 0.000000004130 3.679031777447; H -0.006037200687 -2.144998259786 2.447030974663; H 0.011074059226 -2.157895829902 -0.014254553860; N -0.738518375832 -0.879256115198 -2.298061241871; N 0.738518376065 0.879256115454 -2.298061238276; H 0.714314308196 0.973365270982 -3.302615035270; H 1.398512102453 1.450008704958 -1.792988230964; H -1.398512105220 -1.450008704099 -1.792988237236; H -0.714314307164 -0.973365267449 -3.302615039280. }. energy = energy('B3lyp/cc-pvdz'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-379332937:152,detect,detection,152,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-379332937,1,['detect'],['detection']
Safety,"Well, it's not used there either. You can safely remove that file :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/271#issuecomment-187436091:42,safe,safely,42,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187436091,1,['safe'],['safely']
Safety,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98490617:525,safe,safe,525,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617,1,['safe'],['safe']
Safety,"When I attempt this, L2 complains that the angular momentum limit exceeded. Is this expected? I _should_ be able to fix this with a higher AM L2, but I'd rather avoid building myself, and we certainly aren't having the test suite build L2 itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352:161,avoid,avoid,161,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352,1,['avoid'],['avoid']
Safety,"When I passed OpenMP_CXX_LIBRARY_DIRS (correctly!) to cmake, it found libiomp5.so fine during the cmake step but then the build failed in the step configuring psi4-core where, presumably, the lapack detection cmake routines run again. At that point, OpenMP_CXX_LIBRARY_DIRS isn't set and it fails to find iomp5. I got past that point of the build by physically adding the relevant path into the HINTS list that includes ${OpenMP_CXX_LIBRARY_DIRS} in FindMathOpenMP.cmake (not exactly a portable solution but hopefully helps locate the problem). ```; $ ldd core.so ; linux-vdso.so.1 (0x00007ffc19d77000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x000014c592535000); libmkl_rt.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_rt.so (0x000014c591e88000); libiomp5.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64/libiomp5.so (0x000014c591aad000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x000014c59188f000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x000014c59150e000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x000014c59117b000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x000014c590f63000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x000014c590ba9000); /lib64/ld-linux-x86-64.so.2 (0x000014c595e3e000); ```. No dependence on libgomp.so and ""make test"" has passed 408/411 tests (2 longs ones still running, and cubeprop-esp failed due to a slight difference in the ESP cubes, although I've seen that fail before).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271:199,detect,detection,199,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271,1,['detect'],['detection']
Safety,"When running a `cp()` calculation, file 97 is left behind. It needs to be preserved at some points in the calc to avoid recomputation, but it shouldn't persist beyond the run.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/113:114,avoid,avoid,114,https://psicode.org,https://github.com/psi4/psi4/issues/113,1,['avoid'],['avoid']
Safety,"When using angstrom units, when parsing the molecule and including an external_potential, the geometry of the molecule gets scaled twice leading to incorrect energies. This only happens, when using python and not psithon.; This can easily be seen when adding a 0 charge far away of the molecule to the simulation, which changes energies significantly. I already prepared a PR to fix this, this is just for reference. To reproduce the problem, use the following:; ```; #! Python equivalent of extern5 test:; #! External potential sanity check with 0 charge far away; #! Checks if all units behave the same and energy is same as no; #! potential; import numpy as np; import psi4.core; import psi4. b2a=0.529177249; # Coordinates added in angstrom; coords = np.array([[ -0.778803000000 , 0.000000000000, 1.132683000000],; [ -0.666682000000, 0.764099000000, 1.706291000000],; [ -0.666682000000, -0.764099000000 , 1.706290000000]]); elements = [""O"",""H"",""H""]; molecule_ang = psi4.core.Molecule.from_arrays(geom=coords, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True); molecule_bohr = psi4.core.Molecule.from_arrays(geom=coords/b2a, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True, units=""Bohr""). external_potentials = [[0.00, np.array([10.0,10.0,10.0]) / b2a]]. psi4.set_options( {; ""scf_type"": ""df"",; ""d_convergence"": 12,; ""basis"": ""STO-3G"",; ""print"": 0,; ""debug"": 0,; }). ene_bohr_charges = psi4.energy('scf', molecule=molecule_bohr, external_potentials=external_potentials); ene_bohr_pure = psi4.energy('scf', molecule=molecule_bohr); psi4.compare_values(ene_bohr_charges, ene_bohr_pure, 6, ""Bohr geometry, charges vs no charges energy equality""). ene_ang_pure = psi4.energy('scf', molecule=molecule_ang); psi4.compare_values(ene_ang_pure, ene_bohr_pure, 6, ""No charges, Bohr vs Angstrom geometry energy equality""). ene_ang_charges = psi4.energy('scf', molecule=molecule_ang, external_potentials=external_potentials); psi4.compare_values(ene_ang_charges, ene_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3147:529,sanity check,sanity check,529,https://psicode.org,https://github.com/psi4/psi4/issues/3147,1,['sanity check'],['sanity check']
Safety,"Whew, I'd be alarmed if the hint variable wasn't doing its job. The cmake isn't set up to use $MKLROOT (I might have tried but that mkl and iomp5 aren't in the same place in a typical intel installation, as you noted). The complication is that this has to work even for `ExternalProject`s or across different computers and the purpose of TargetLAPACK is to provide a single entity to hand to subprojects without duplicating all the math detection machinery and all the cmake and envvars that influence it. I'm not sure current reworking is optimized, but I can live with one cmake hint var. The iomp5 detection works with GNU in conda b/c all the libs are gathered together so the second `find_library()` w/o `NO_DEFAULT_PATH` catches it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319:437,detect,detection,437,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319,2,['detect'],['detection']
Safety,"While attempting to run an ODC-12 computation, the correlation correction to the 1RDM (tau) didn't converge. I can't quite tell what ODC-12 did in response to this, but the effect was to zero the orbital gradient and make the energy negative NaN. The code should either recover gracefully if possible or, if not possible, quit ASAP. For the benefit of @mdav2 and @mlestep there's a side problem with the SCF converging to the wrong state. I'll add this as a post to the SCF topic when I've investigated further. I can tell you now that the ""true"" ground state seems to break CFOUR. [odc12_nan.txt](https://github.com/psi4/psi4/files/2254898/odc12_nan.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1117:270,recover,recover,270,https://psicode.org,https://github.com/psi4/psi4/issues/1117,1,['recover'],['recover']
Safety,"Whoa, fantastic! These kinds of issues are extremely tough to track down, so I also transfer 5 psicoin. ; Out of interest, is this limited to `libstdc++`, or have you observed the same with `libc++`? Great detective work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-380106497:206,detect,detective,206,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-380106497,1,['detect'],['detective']
Safety,"With `ENABLE_bse`, BSE tries to install in the wrong place; ```; [ 11%] Installing Psi4-detected BLAS/LAPACK; [ 11%] Performing build step for 'bse_external'; -- Install configuration: ""Release""; [ 11%] Built target lapack_external; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; [ 17%] Performing install step for 'bse_external'; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running install; /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; warnings.warn(; running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; running install_lib; copying build/lib/basis_set_exchange/_version.py -> /home/work/psi4/objdir/stage/lib/basis_set_exchange; byte-compiling /home/work/psi4/objdir/stage/lib/basis_set_exchange/_version.py to _version.cpython-311.pyc; running install_data; copying LICENSE -> /usr/local/; error: could not create '/usr/local/LICENSE': Permission denied; make[2]: *** [external/upstream/bse/CMakeFiles/bse_external.dir/build.make:105: external/upstream/bse/bse_external-prefix/src/bse_external-stamp/bse_external-install] Error 1; make[1]: *** [CMakeFiles/Makefile2:11190: external/upstream/bse/CMakeFiles/bse_external.dir/all] Error 2; make: *** [Makefile:146: all] Error 2; (p4env) [susi@lenovo objdir]$ ccmake . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3067:88,detect,detected,88,https://psicode.org,https://github.com/psi4/psi4/issues/3067,1,['detect'],['detected']
Safety,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:848,Abort,Abort,848,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['Abort'],['Abort']
Safety,"Without looking at ATLAS but extrapolating from OpenBLAS, unless the LAPACK is built with cmake components (or something similar), we can't even tell at psi-build+lapack-detection -time if the LAPACK has any chance of working. In OpenBLAS, of their 3 build modes (single, pthread, omp), the most commonly found, pthread, has no chance of working with psi, but one can't tell that from the blas installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455813717:170,detect,detection,170,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455813717,1,['detect'],['detection']
Safety,"Wow, thanks for the very detailed report, and detective work. Feel free to make changes if you'd like have have a shot at fixing this. If not, I'm going to be reworking the basis set parsing within the next week, to avoid all the duplication between Python and C++, so I can make the appropriate changes then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719#issuecomment-303779960:46,detect,detective,46,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303779960,2,"['avoid', 'detect']","['avoid', 'detective']"
Safety,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1342:132,detect,detection,132,https://psicode.org,https://github.com/psi4/psi4/pull/1342,1,['detect'],['detection']
Safety,"X2C doesn't decontract the basis by default so it is not automatically a redundant input. I'm getting the same error when trying to run X2C with a decontracted basis with the newest PSI4, I haven't run any X2C calculations in a while and was unaware of this issue. I'll look into this, making sure @fevangelista is also aware of this also.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288817347:73,redund,redundant,73,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288817347,1,['redund'],['redundant']
Safety,"XC_WB97M_V: 1.00E-13 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 2115829; Total Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:12217,Abort,Abort,12217,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Abort'],['Abort']
Safety,XHOST detection fails,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023:6,detect,detection,6,https://psicode.org,https://github.com/psi4/psi4/issues/2023,1,['detect'],['detection']
Safety,"Yay. If that was the only lib --> share I missed, I'll be pleased. . > On Feb 14, 2016, at 12:59 AM, Andy Simmonett notifications@github.com wrote:; > ; > Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183827620:219,detect,detective,219,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827620,1,['detect'],['detective']
Safety,"Yea, I see what you mean. The perl script is very comprehensive and it detects the type of calculation being run, changing the values that will be checked as needed. I am able to offer navigational/general help on this is someone volunteers B.TW. so if anyone is interested post here/slack me/ping me/send a smoke signal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376673025:71,detect,detects,71,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376673025,1,['detect'],['detects']
Safety,"Yeah, it's safe to remove to remove libint.h from those files. For ccsort, I'd suggest we come up with a mechanism for obtaining the max AM from libmints as it is responsible for interfacing with various integral packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240425944:11,safe,safe,11,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240425944,1,['safe'],['safe']
Safety,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:22,detect,detection,22,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160,1,['detect'],['detection']
Safety,"Yep, gcc version is your problem. Note this part of the cmake output:. > CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; > Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; > this build won't work without GCC intervention:; > https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; > Call Stack (most recent call first):; > CMakeLists.txt:119 (include). Acquire a >=4.9 gcc according to that link (or any way you care to) and pass `gcc-name` and `gxx-name` to icc/icpc as Daniel and that link advised. After that, the cmake warning won't go away (which is why I couldn't make it a fatal error), but it will compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733493:167,detect,detected,167,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733493,1,['detect'],['detected']
Safety,"Yes @andysim, I'm definitely responsible for the crazy path that EFPs take through psi4. Without the boost registration restrictions on the efp class and the general c-side focus, perhaps I can find a better way. I'll take on the efp and filesystem aspects of The Inversion. I agree @jturney on moving plugin-writing to python. In fact, that may get done in the CMake rewrite, just to avoid having to get things working again _twice_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235360382:385,avoid,avoid,385,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235360382,1,['avoid'],['avoid']
Safety,"Yes I believe you are right. I've experienced only with my own compiled from scratch, and never from conda env., also right now I am migrating to Ubuntu 18.04 and I don't think I have seen the problem with the gcc 7.3.0, compared to the gcc 5.4 in Ubuntu 16.04... I use the python/NumPy from PPA, does this mean that I should consider also to compile NumPy myself with same compiler to avoid this type of issue?? What is your experience on how to avoid it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387852931:386,avoid,avoid,386,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387852931,2,['avoid'],['avoid']
Safety,"Yes in most cases size_t would be better. However, we need to investigate all int variables in DFOCC whether they can have negative values or not, may be some of them are signed ints. Hence, the safest solution could be changing int to long long it. Overall, size_t is okay if we sure that we are not breaking any other part of the code, if we are not sure then long long int is a good solution. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051:195,safe,safest,195,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051,1,['safe'],['safest']
Safety,"Yes, I know but that's not what I mean. When I start the PSI calculation, the system has 122 GB of free RAM. Yet PSI causes it to start swapping (nothing else is running on it) and I want to avoid that. So, how does PSI handle the `memory` line? What does it do when opening its large files? Do you use the `POSIX_FADV_DONTNEED` flag on those files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-228589387:191,avoid,avoid,191,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228589387,1,['avoid'],['avoid']
Safety,"Yes, I re-cloned everything. All quicktests passed on my laptop. . Well, I can't reproduce the ambit being wrongly detected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249043838:115,detect,detected,115,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249043838,1,['detect'],['detected']
Safety,"Yes, LEOM_CCSD refers to the local-EOM-CC code we developed for testing in Psi3. Similarly, LOCAL_GHOST was a keyword for placing basis functions on a ghost atom to account for diffuse electronic states in the local-EOM-CC calculations. These capabilities were not transferred to Psi4, so these keywords may be safely removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824:311,safe,safely,311,https://psicode.org,https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824,1,['safe'],['safely']
Safety,"Yes, one of the cases where a stability analysis is detrimental is; closed-shell benzene with UHF. The closed-shell solution is unstable and; the stable UHF solution looks like a singlet hexaradical... Unfortunately I; believe this is related to the intrinsic spin contamination in UHF. There; are specific methods that can constrain or project UHF solutions to; alleviate this problem.; ROHF also avoids spin contamination, but lacks description of spin; polarization, which may sometimes be of interest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171662622:398,avoid,avoids,398,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622,1,['avoid'],['avoids']
Safety,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195054956:399,safe,safe,399,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956,1,['safe'],['safe']
Safety,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276091624:258,detect,detection,258,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624,1,['detect'],['detection']
Safety,"Yes, the dev version would work for your case. However, there is a small change in the DFT code (see note at the top http://psicode.org/psi4manual/master/dft.html) that is important if you are mid-project since you should not absolute energies between the versions. All mean-field methods (HF/DFT) will work with the current version but you would need to avoid double-hybrids DFT functionals since they contain an MP2 part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682129791:355,avoid,avoid,355,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682129791,1,['avoid'],['avoid']
Safety,"Yes, the integrals are recomputed every time a new DiskJK is built. There; is presently no way to avoid this. If you are being hamstrung by the AO; integrals, I recommend a DFJK object or perhaps a DirectJK object. Best,. -Rob. On Wed, Feb 4, 2015 at 1:59 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > I'm using DiskJK in a plugin:; > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292; > . Does it reuse the existing disk AO integrals or does it recompute them?; > In case of the latter: How do I avoid this? Is there a way to fetch the JK; > from the wavefunction object or the environment?; > ; > Thank you for your time and answer!; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/65.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65#issuecomment-72927187:98,avoid,avoid,98,https://psicode.org,https://github.com/psi4/psi4/issues/65#issuecomment-72927187,2,['avoid'],['avoid']
Safety,"Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347021249:643,safe,safelinks,643,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249,2,['safe'],['safelinks']
Safety,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343777115:348,detect,detected,348,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115,1,['detect'],['detected']
Safety,"Yes. As far as add-ons:. **Working:** `libint`, `libefp`, `liberd`, `dkh`, `gdma`, `CheMPS2`; **Unknown:** `GTFock`; **Not Working:** `PCMSolver` (this is in progress, but if you need it, it's within a few path hacks of working, so contact us). All of these can be compiled once and detected by the Psi4 superbuild, so possibly you need only compile libint/deriv one more time. Again, much of the build wiki is no good anymore. A mini compilation guide is at the top of the (main CMakeLists.txt)[https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L13-L102]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249025979:283,detect,detected,283,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249025979,1,['detect'],['detected']
Safety,"Yes. Though as I've fallen down on my conda-building duties, haven't personally confirmed. Should be safe to close.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-370246501:101,safe,safe,101,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370246501,1,['safe'],['safe']
Safety,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:390,detect,detection,390,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,2,['detect'],['detection']
Safety,You can't set negative weights to zero since that will change the results. The real fix would be to use grids with non-negative weights. Using a product grid instead of Lebedev would be one option. For now I would just disable the grids with negative weights as in done in many other codes. Switching to the use of the asymmetric form which avoids the square roots of the weights may be an option but it might also increase memory costs by a factor of 2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1505035691:341,avoid,avoids,341,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1505035691,1,['avoid'],['avoids']
Safety,"You may have found a memory allocation/usage bug. What kind of; computation is this?. Unfortunately we don't really have a way to estimate scratch usage at; present. It's a feature we'd like to add, but it needs to be added for; every module separately, so is a somewhat daunting task. In principle, can; be known ahead of time based on number of basis functions, number of atoms,; etc., but is different for every method (and sometimes depends on the; particular algorithm used within that method). On Mon, Aug 24, 2020 at 5:55 PM David Slochower <notifications@github.com>; wrote:. > I see memory usage significantly above psi4.set_memory() limit. I do see; > the note in the documentation that memory usage might be *slightly*; > higher, but if I even request within 20% of a node's total memory; > (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now,; > running with psi4.set_memory(""200 GB""), I see persistent VIRT usage of; > 259 GB and RES 256 GB. I know that determining the *actual* amount of memory; > consumed by a process is tricky; > <https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process>,; > but this is important to me to prevent the scheduler from killing my jobs.; > After some troubleshooting, I am requesting 300 GB from the scheduler, but; > 200 GB from psi4, and end up with ~260 GB used. Is this expected?; >; > Relatedly, but separate, is there a way to estimate what the scratch file; > size may be? I was planning to use node-local storage until I found out my; > scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead; > of time (number of atoms × level of theory × some magic thing?); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1985>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5WFYJDHW36AZTXMGCDSCLOVDANCNFSM4QJ6TFCA>; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520:837,risk,risk,837,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520,1,['risk'],['risk']
Safety,"You're right. The problem is the use of `docc` and `socc`: https://github.com/psi4/psi4/blob/1ffb67bf52dcca70e357d23714c7d975f9d1356e/psi4/src/psi4/libscf_solver/hf.cc#L474. After the recent addition of the sanity check in #2488, the code crashes in the iteration where some symmetries have more beta electrons and alpha electrons.; ```; Occupations; sym 0: 1 alpha 2 beta; sym 1: 0 alpha 0 beta; sym 2: 1 alpha 0 beta; sym 3: 1 alpha 0 beta; sym 4: 0 alpha 0 beta; sym 5: 1 alpha 1 beta; sym 6: 1 alpha 1 beta; sym 7: 1 alpha 1 beta; ```; The `docc` and `socc` syntax is unable to handle this, which leads to spin flips and the wrong spin state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476#issuecomment-1073387869:207,sanity check,sanity check,207,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1073387869,1,['sanity check'],['sanity check']
Safety,"You're welcome, @ryanmrichard. Sorry I was late to the party on this one. You can drive a Hummer around in first gear for the rest of your life, and you'll still have a negative carbon footprint after reducing the build time by so much. I know that Boost is going the way of the dodo, but building it is quite slow on Travis. I figured out the problem with detecting the `apt-get` version, and I think the latest changes will fix detection, allowing us to avoid building it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235348000:357,detect,detecting,357,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235348000,3,"['avoid', 'detect']","['avoid', 'detecting', 'detection']"
Safety,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156789433:588,abort,aborted,588,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433,1,['abort'],['aborted']
Safety,"Your fork is safe. It'll just look something like 8000 commits behind master and 8050 commits ahead and quite un-PR-able against psi4/psi4 master. Yes, consulting us when you're ready to merge will be the thing to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248198593:13,safe,safe,13,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248198593,1,['safe'],['safe']
Safety,"Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183827154:64,detect,detective,64,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827154,1,['detect'],['detective']
Safety,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059613:547,detect,detected,547,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613,3,['detect'],['detected']
Safety,"[According to the docs](https://psicode.org/psi4manual/master/api/psi4.core.Molecule.html?highlight=symmetry#psi4.core.Molecule.find_point_group) `psi::Molecule::find_point_group` is the function that does the detection, and it can take a threshold argument, but I cannot find a keyword that would change that.; Have not looked at the source yet, but I think the threshold may be hardcoded at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062292306:210,detect,detection,210,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062292306,1,['detect'],['detection']
Safety,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:395,avoid,avoid,395,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,1,['avoid'],['avoid']
Safety,"[GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf exte",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2980,avoid,avoid,2980,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['avoid'],['avoid']
Safety,"[Here's](https://github.com/AnacondaRecipes/openblas-feedstock/blob/master/recipe/build.sh#L15-L20) the compile conditions. It looks like OpenMP is enabled. Is something missing that you see?. Also, I was running the tests single-thread to avoid trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387072294:240,avoid,avoid,240,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387072294,1,['avoid'],['avoid']
Safety,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:1,Recover,Recovered,1,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['Recover'],['Recovered']
Safety,"[Recovered from the forums.](http://forum.psicode.org/t/thermodynamic-analysis/1014/2). The post-frequency vibrational information is difficult to get at in-file with a Psithon (not PsiAPI). See the original topic for a listing of the difficulties. User reports that `thermo` did not return a dict, but `git blame` says the return value of `thermo` has been a dict for quite some time. In the end, Lori recommended not getting the information through thermo in the first place, but loading the vibrational record.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1331:1,Recover,Recovered,1,https://psicode.org,https://github.com/psi4/psi4/issues/1331,1,['Recover'],['Recovered']
Safety,"[Recovered from the forums](http://forum.psicode.org/t/sapt0-job-fail-i-am-a-beginner/1034). As the forum mangles input file syntax, be wary that there may be an error or two hiding here. User reported the following input. ; ```; memory 5000 Mb; molecule dimer {; 1 1; C 4.19994 3.08488 -1.76044; C 5.06954 2.46285 -0.64984; C 4.64327 1.0663 -0.28153; O 4.85673 0.07495 -0.94802; O 3.96234 1.04199 0.88706; H 4.61569 4.07213 -1.97225; H 4.3027 2.5025 -2.67989; H 6.10053 2.39646 -1.00395; C 3.46892 -0.23561 1.35315; H 5.0473 3.09629 0.23787; C 1.89576 1.98716 -1.88508; C 2.70489 3.20283 -1.38087; C 2.1115 4.4631 -2.00089; O 2.22564 4.69469 -3.21122; N 1.45755 5.29818 -1.17121; H 1.82029 2.0666 -2.97331; H 2.43364 1.05863 -1.68462; H 2.61952 3.26827 -0.29319; H 0.99607 6.1109 -1.5546; H 1.29463 5.07123 -0.20248; C 0.54897 1.25688 0.14654; C 0.49167 1.90422 -1.2458; C -0.42151 1.12609 -2.17481; O -0.30845 -0.10438 -2.3373; N -1.33375 1.83551 -2.84989; H 1.41314 1.64705 0.68692; H 0.72592 0.18975 0.02069; H 0.09209 2.91772 -1.16504; H -1.48178 2.81502 -2.66023; H -1.96292 1.36772 -3.48833; C -0.75822 2.9873 1.46817; C -0.71562 1.51535 0.97554; C -0.84126 0.54385 2.14223; O 0.07905 -0.22265 2.47636; N -2.01096 0.56868 2.81099; H -0.38444 3.03627 2.49566; H -0.05905 3.57117 0.86785; H -1.58667 1.32703 0.34288; H -2.1767 -0.18204 3.47055; H -2.8428 0.94125 2.3602; H -1.95043 4.30157 -0.69534; C -2.6631 3.78375 -0.0493; C -2.12926 3.68676 1.38656; C -1.95827 5.09276 1.94691; O -1.18692 5.90686 1.41866; N -2.67996 5.39713 3.0393; H -3.6084 4.33293 -0.07465; H -2.84925 2.79578 -0.47069; H -2.85563 3.14558 1.99767; H -3.31103 4.73323 3.45906; H -2.59711 6.3152 3.45181; C 4.60787 -0.8758 2.13999; H 3.13705 -0.83567 0.50868; H 2.61634 0.00579 1.97897; H 4.90463 -0.2111 2.95001; N 4.27305 -2.20998 2.77179; H 5.46495 -1.04265 1.48973; C 3.078 -2.08869 3.6774; C 4.01212 -3.24631 1.71507; C 5.4587 -2.64236 3.59063; H 2.19356 -1.85215 3.09367; H 3.27107 -1.30183 4.40339; H 2.93642 -3.0407",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:1,Recover,Recovered,1,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['Recover'],['Recovered']
Safety,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/846:171,recover,recover,171,https://psicode.org,https://github.com/psi4/psi4/issues/846,1,['recover'],['recover']
Safety,\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15111,detect,detecting,15111,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13508,detect,detecting,13508,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14793,detect,detecting,14793,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install pac,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14473,detect,detecting,14473,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:5838,Detect,Detecting,5838,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10117,Detect,Detecting,10117,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['Detect'],['Detecting']
Safety,"`; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:1238,Abort,Aborted,1238,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Abort'],['Aborted']
Safety,`Libint_MAX_AM_ERI` from https://github.com/psi4/psi4/blob/master/external/upstream/libint/CMakeLists.txt#L5 might be available. I have no confidence in my CMake scope predictions. May need to global it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409#issuecomment-444991892:168,predict,predictions,168,https://psicode.org,https://github.com/psi4/psi4/pull/1409#issuecomment-444991892,1,['predict'],['predictions']
Safety,"`Molecule.geometry()` is providing all Cart coords, so the Mol should be fully specified and this should be safe (at first appearances). If opt/findif don't protest and a trial period proves safe, then I'm good with it. Downside is that we make `update_geometry()` even more rare and forgettable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316154922:108,safe,safe,108,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316154922,2,['safe'],['safe']
Safety,```; # Name Version Build Channel; abseil-cpp 20220623.0 he4e09e4_6 conda-forge; aiohttp 3.8.5 py39h0f82c59_0 conda-forge; aiosignal 1.3.1 pyhd8ed1ab_0 conda-forge; alembic 1.12.0 pyhd8ed1ab_0 conda-forge; ambertools 23.3 py39hdb62838_1 conda-forge; amberutils 21.0 pypi_0 pypi; appnope 0.1.2 py39h2804cbe_2 conda-forge; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py39h5161555_1 conda-forge; arpack 3.7.0 h58ebc17_2 conda-forge; arrow-cpp 11.0.0 hce30654_5_cpu conda-forge; asttokens 2.0.5 pyhd8ed1ab_0 conda-forge; astunparse 1.6.3 pyhd8ed1ab_0 conda-forge; async-timeout 4.0.3 pyhd8ed1ab_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; aws-c-auth 0.6.24 he8f13b4_5 conda-forge; aws-c-cal 0.5.20 h9571af1_6 conda-forge; aws-c-common 0.8.11 h1a8c8d9_0 conda-forge; aws-c-compression 0.2.16 h7334ab6_3 conda-forge; aws-c-event-stream 0.2.18 ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:595,timeout,timeout,595,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['timeout'],['timeout']
Safety,"```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m- 00007F8955E6A8F0 _ZN3psi5VBase10in Unknown Unknown; core.cpython-37m- 00007F8955E6A209 Unknown Unknown Unkno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:1106,abort,abort,1106,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['abort'],['abort']
Safety,```; $ ctest -j 1 -E dft-bench --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 799.52 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1815.94 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 406.26 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 407.07 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 652.29 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 433.67 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 248.39 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 644.29 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 188.07 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 207.25 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 169.73 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 287.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1746.35 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 117.02 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.02 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 38.38 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.85 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.66 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.72 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.05 sec; Start 7: casscf-sp; 21/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:33,timeout,timeout,33,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['timeout'],['timeout']
Safety,```; $ ctest -j 1 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 513.47 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1836.71 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 380.51 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 319.26 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 508.84 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 415.27 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 234.47 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 619.81 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 191.63 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 204.32 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 171.24 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 293.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1738.06 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 101.48 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.21 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 34.53 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.66 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.72 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.18 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.12 sec; Start 7: casscf-sp; 21/411 Test #7: casscf-sp .....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:33,timeout,timeout,33,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 245: nbody-convergence; Start 405: python-vibanalysis; Start 181: fsapt1; Start 11: cbs-delta-energy; Start 185: isapt1; Start 18: cbs-xtpl-func; Start 184: fsapt-allterms; Start 196: fd-freq-energy-large; Start 198: fd-freq-gradient-large; Start 287: opt13; Start 28: cc13b; Start 310: pywrap-all; Start 107: dcft-grad2; Start 22: cc1; Start 32: cc15; Start 45: cc28; 1/415 Test #184: fsapt-allterms ................... Passed 110.85 sec; Start 110: dcft1; 2/415 Test #287: opt13 ............................ Passed 189.62 sec; Start 79: cc8; 3/415 Test #45: cc28 ............................. Passed 206.85 sec; Start 152: dfomp3-grad2; 4/415 Test #32: cc15 ............................. Passed 210.28 sec; Start 233: mp2-module; 5/415 Test #22: cc1 .............................. Passed 218.85 sec; Start 35: cc18; 6/415 Test #28: cc13b ............................ Passed 229.19 sec; Start 312: pywrap-cbs1; 7/415 Test #110: dcft1 ............................ Passed 127.34 sec; Start 27: cc13a; 8/415 Test #107: dcft-grad2 ....................... Passed 252.96 sec; Start 116: dcft7; 9/415 Test #79: cc8 .............................. Passed 81.11 sec; Start 208: frac-traverse; 10/415 Test #185: isapt1 ........................... Passed 272.01 sec; Start 326: sapt2; 11/415 Test #35: cc18 ............................. Passed 60.66 sec; Start 328: sapt4; 12/415 Test #245: nbody-convergence ................ Passed 293.73 sec; Start 335: scf-bz2; 13/415 Test #152: dfomp3-grad2 ..................... Passed 117.47 sec; Start 251: ocepa-grad2; 14/415 Test #233: mp2-module ....................... Passed 120.91 sec; Start 68: cc49; 15/415 Test #326: sapt2 ............................ Passed 97.27 sec; Start 58: cc4; 16/415 Test #208: frac-traverse .................... Passed 108.53 sec; Start 390: cc-module; 17/415 Test #198: fd-freq-gradient-large ....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 103: cubeprop-frontier; Start 112: dcft4; Start 46: cc3; Start 105: dcft-grad1; Start 36: cc2; Start 40: cc24; Start 147: dfomp2-grad3; Start 42: cc26; Start 302: pywrap-all; Start 39: cc23; Start 116: dcft8; Start 306: pywrap-checkrun-rhf; Start 37: cc21; Start 41: cc25; Start 43: cc27; Start 30: cc14; 1/413 Test #103: cubeprop-frontier ................ Passed 3.69 sec; Start 308: pywrap-checkrun-uhf; 2/413 Test #30: cc14 ............................. Passed 795.14 sec; Start 396: python-vibanalysis; 3/413 Test #43: cc27 ............................. Passed 816.39 sec; Start 77: cc7; 4/413 Test #39: cc23 ............................. Passed 918.13 sec; Start 242: ocepa-freq1; 5/413 Test #37: cc21 ............................. Passed 921.94 sec; Start 32: cc16; 6/413 Test #41: cc25 ............................. Passed 923.19 sec; Start 25: cc13; 7/413 Test #42: cc26 ............................. Passed 1051.53 sec; Start 307: pywrap-checkrun-rohf; 8/413 Test #116: dcft8 ............................ Passed 1117.15 sec; Start 157: dft-grad-lr3; 9/413 Test #40: cc24 ............................. Passed 1209.65 sec; Start 229: mp2-def2; 10/413 Test #36: cc2 .............................. Passed 1231.86 sec; Start 180: fsapt1; 11/413 Test #32: cc16 ............................. Passed 452.47 sec; Start 113: dcft5; 12/413 Test #25: cc13 ............................. Passed 471.17 sec; Start 13: cbs-xtpl-alpha; 13/413 Test #147: dfomp2-grad3 ..................... Passed 1406.19 sec; Start 29: cc13d; 14/413 Test #105: dcft-grad1 ....................... Passed 1455.46 sec; Start 184: isapt1; 15/413 Test #308: pywrap-checkrun-uhf .............. Passed 1474.71 sec; Start 11: cbs-delta-energy; 16/413 Test #306: pywrap-checkrun-rhf .............. Passed 1487.57 sec; Start 48: cc31; 17/413 Test #302: pywrap-all ....................... Passed 1522.41",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 37: cc21; Start 46: cc3; Start 41: cc25; Start 39: cc23; Start 146: dfomp2-grad3; Start 77: cc7; Start 43: cc27; Start 306: pywrap-checkrun-rohf; Start 241: ocepa-freq1; Start 395: python-vibanalysis; Start 40: cc24; 1/412 Test #241: ocepa-freq1 ...................... Passed 939.44 sec; Start 42: cc26; 2/412 Test #40: cc24 ............................. Passed 990.28 sec; Start 115: dcft8; 3/412 Test #77: cc7 .............................. Passed 1076.46 sec; Start 36: cc2; 4/412 Test #43: cc27 ............................. Passed 1079.37 sec; Start 25: cc13; 5/412 Test #306: pywrap-checkrun-rohf ............. Passed 1087.82 sec; Start 156: dft-grad-lr3; 6/412 Test #39: cc23 ............................. Passed 1252.44 sec; Start 228: mp2-def2; 7/412 Test #37: cc21 ............................. Passed 1273.54 sec; Start 30: cc14; 8/412 Test #41: cc25 ............................. Passed 1338.20 sec; Start 179: fsapt1; 9/412 Test #395: python-vibanalysis ............... Passed 1362.17 sec; Start 112: dcft5; 10/412 Test #156: dft-grad-lr3 ..................... Passed 428.34 sec; Start 29: cc13d; 11/412 Test #307: pywrap-checkrun-uhf .............. Passed 1529.35 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #305: pywrap-checkrun-rhf .............. Passed 1560.06 sec; Start 360: tu6-cp-ne2; 13/412 Test #146: dfomp2-grad3 ..................... Passed 1580.99 sec; Start 183: isapt1; 14/412 Test #46: cc3 .............................. Passed 1614.45 sec; Start 387: cookbook-rohf-orb-rot; 15/412 Test #301: pywrap-all ....................... Passed 1620.63 sec; Start 45: cc29; 16/412 Test #104: dcft-grad1 ....................... Passed 1653.03 sec; Start 380: cc-module; 17/412 Test #228: mp2-def2 .........................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 37: cc21; Start 104: dcft-grad1; Start 301: pywrap-all; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 46: cc3; Start 41: cc25; Start 39: cc23; Start 77: cc7; Start 146: dfomp2-grad3; Start 43: cc27; Start 395: python-vibanalysis; Start 241: ocepa-freq1; Start 306: pywrap-checkrun-rohf; Start 42: cc26; 1/412 Test #42: cc26 ............................. Passed 687.16 sec; Start 115: dcft8; 2/412 Test #241: ocepa-freq1 ...................... Passed 734.19 sec; Start 40: cc24; 3/412 Test #77: cc7 .............................. Passed 831.63 sec; Start 36: cc2; 4/412 Test #43: cc27 ............................. Passed 832.91 sec; Start 156: dft-grad-lr3; 5/412 Test #306: pywrap-checkrun-rohf ............. Passed 852.37 sec; Start 25: cc13; 6/412 Test #41: cc25 ............................. Passed 1089.91 sec; Start 228: mp2-def2; 7/412 Test #37: cc21 ............................. Passed 1123.37 sec; Start 112: dcft5; 8/412 Test #39: cc23 ............................. Passed 1129.22 sec; Start 30: cc14; 9/412 Test #395: python-vibanalysis ............... Passed 1214.88 sec; Start 179: fsapt1; 10/412 Test #156: dft-grad-lr3 ..................... Passed 406.18 sec; Start 29: cc13d; 11/412 Test #146: dfomp2-grad3 ..................... Passed 1250.03 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #307: pywrap-checkrun-uhf .............. Passed 1252.06 sec; Start 183: isapt1; 13/412 Test #46: cc3 .............................. Passed 1265.86 sec; Start 360: tu6-cp-ne2; 14/412 Test #305: pywrap-checkrun-rhf .............. Passed 1275.03 sec; Start 45: cc29; 15/412 Test #301: pywrap-all ....................... Passed 1314.72 sec; Start 71: cc52; 16/412 Test #115: dcft8 ............................ Passed 739.08 sec; Start 387: cookbook-rohf-orb-rot; 17/412 Test #104: dcft-grad1 ....................... Passed 14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 112: dcft4; Start 46: cc3; Start 105: dcft-grad1; Start 147: dfomp2-grad3; Start 36: cc2; Start 40: cc24; Start 302: pywrap-all; Start 42: cc26; Start 306: pywrap-checkrun-rhf; Start 116: dcft8; Start 39: cc23; Start 308: pywrap-checkrun-uhf; Start 41: cc25; Start 37: cc21; Start 43: cc27; Start 30: cc14; 1/413 Test #43: cc27 ............................. Passed 417.34 sec; Start 396: python-vibanalysis; 2/413 Test #30: cc14 ............................. Passed 440.89 sec; Start 77: cc7; 3/413 Test #37: cc21 ............................. Passed 462.06 sec; Start 242: ocepa-freq1; 4/413 Test #41: cc25 ............................. Passed 464.40 sec; Start 307: pywrap-checkrun-rohf; 5/413 Test #39: cc23 ............................. Passed 467.64 sec; Start 32: cc16; 6/413 Test #116: dcft8 ............................ Passed 546.67 sec; Start 25: cc13; 7/413 Test #42: cc26 ............................. Passed 674.21 sec; Start 157: dft-grad-lr3; 8/413 Test #36: cc2 .............................. Passed 736.38 sec; Start 180: fsapt1; 9/413 Test #147: dfomp2-grad3 ..................... Passed 744.74 sec; Start 229: mp2-def2; 10/413 Test #32: cc16 ............................. Passed 318.84 sec; Start 113: dcft5; 11/413 Test #25: cc13 ............................. Passed 288.74 sec; Start 13: cbs-xtpl-alpha; 12/413 Test #308: pywrap-checkrun-uhf .............. Passed 858.01 sec; Start 29: cc13d; 13/413 Test #105: dcft-grad1 ....................... Passed 867.96 sec; Start 184: isapt1; 14/413 Test #77: cc7 .............................. Passed 433.83 sec; Start 11: cbs-delta-energy; 15/413 Test #306: pywrap-checkrun-rhf .............. Passed 876.28 sec; Start 48: cc31; 16/413 Test #40: cc24 ............................. Passed 876.40 sec; Start 114: dcft6; 17/413 Test #302: pywrap-all ....................... Passed 905.57 sec; Start 45: cc29",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 122: dfccdl1; Start 124: dfccsd1; Start 395: python-vibanalysis; Start 156: dft-grad-lr3; Start 104: dcft-grad1; Start 228: mp2-def2; Start 179: fsapt1; Start 111: dcft4; Start 301: pywrap-all; Start 39: cc23; Start 183: isapt1; Start 37: cc21; Start 36: cc2; Start 42: cc26; Start 46: cc3; Start 40: cc24; 1/412 Test #122: dfccdl1 .......................... Passed 6.36 sec; Start 18: cbs-xtpl-func; 2/412 Test #124: dfccsd1 .......................... Passed 10.68 sec; Start 182: fsapt-allterms; 3/412 Test #42: cc26 ............................. Passed 241.32 sec; Start 194: fd-freq-energy-large; 4/412 Test #36: cc2 .............................. Passed 267.40 sec; Start 196: fd-freq-gradient-large; 5/412 Test #40: cc24 ............................. Passed 276.21 sec; Start 279: opt13; 6/412 Test #37: cc21 ............................. Passed 307.87 sec; Start 241: ocepa-freq1; 7/412 Test #39: cc23 ............................. Passed 310.94 sec; Start 41: cc25; 8/412 Test #46: cc3 .............................. Passed 370.77 sec; Start 146: dfomp2-grad3; 9/412 Test #228: mp2-def2 ......................... Passed 429.97 sec; Start 307: pywrap-checkrun-uhf; 10/412 Test #183: isapt1 ........................... Passed 436.25 sec; Start 305: pywrap-checkrun-rhf; 11/412 Test #156: dft-grad-lr3 ..................... Passed 470.44 sec; Start 112: dcft5; 12/412 Test #104: dcft-grad1 ....................... Passed 479.75 sec; Start 374: dft-custom-mgga; 13/412 Test #111: dcft4 ............................ Passed 507.03 sec; Start 43: cc27; 14/412 Test #301: pywrap-all ....................... Passed 521.85 sec; Start 113: dcft6; 15/412 Test #41: cc25 ............................. Passed 236.96 sec; Start 321: sapt6; 16/412 Test #241: ocepa-freq1 ...................... Passed 240.27 sec; Start 77: cc7; 17/412 Test #196: fd-freq-gradient-large ......",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 36: cc2; Start 40: cc24; Start 46: cc3; Start 39: cc23; Start 37: cc21; Start 42: cc26; Start 41: cc25; Start 43: cc27; Start 112: dcft4; Start 105: dcft-grad1; Start 396: python-vibanalysis; Start 30: cc14; Start 147: dfomp2-grad3; Start 157: dft-grad-lr3; Start 229: mp2-def2; Start 32: cc16; 1/413 Test #229: mp2-def2 ......................... Passed 366.62 sec; Start 25: cc13; 2/413 Test #157: dft-grad-lr3 ..................... Passed 422.32 sec; Start 180: fsapt1; 3/413 Test #32: cc16 ............................. Passed 556.73 sec; Start 116: dcft8; 4/413 Test #30: cc14 ............................. Passed 752.25 sec; Start 29: cc13d; 5/413 Test #43: cc27 ............................. Passed 867.54 sec; Start 77: cc7; 6/413 Test #39: cc23 ............................. Passed 965.39 sec; Start 113: dcft5; 7/413 Test #25: cc13 ............................. Passed 598.94 sec; Start 242: ocepa-freq1; 8/413 Test #41: cc25 ............................. Passed 970.65 sec; Start 184: isapt1; 9/413 Test #37: cc21 ............................. Passed 984.02 sec; Start 45: cc29; 10/413 Test #42: cc26 ............................. Passed 997.98 sec; Start 61: cc43; 11/413 Test #29: cc13d ............................ Passed 374.09 sec; Start 13: cbs-xtpl-alpha; 12/413 Test #40: cc24 ............................. Passed 1131.64 sec; Start 59: cc41; 13/413 Test #36: cc2 .............................. Passed 1134.77 sec; Start 48: cc31; 14/413 Test #61: cc43 ............................. Passed 150.20 sec; Start 302: pywrap-all; 15/413 Test #45: cc29 ............................. Passed 198.44 sec; Start 306: pywrap-checkrun-rhf; 16/413 Test #396: python-vibanalysis ............... Passed 1286.48 sec; Start 114: dcft6; 17/413 Test #59: cc41 ............................. Passed 185.32 sec; Start 18: cbs-xtpl-func; 18/413 Test #184: isapt1 .........",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 395: python-vibanalysis; Start 179: fsapt1; Start 183: isapt1; Start 18: cbs-xtpl-func; Start 182: fsapt-allterms; Start 194: fd-freq-energy-large; Start 196: fd-freq-gradient-large; Start 279: opt13; Start 26: cc13a; Start 114: dcft7; Start 206: frac-traverse; Start 317: sapt2; Start 319: sapt4; Start 326: scf-bz2; Start 1: adc1; Start 2: adc2; 1/412 Test #1: adc1 ............................. Passed 40.38 sec; Start 3: casscf-fzc-sp; 2/412 Test #3: casscf-fzc-sp .................... Passed 7.58 sec; Start 4: casscf-semi; 3/412 Test #4: casscf-semi ...................... Passed 3.39 sec; Start 5: casscf-sa-sp; 4/412 Test #2: adc2 ............................. Passed 68.12 sec; Start 6: ao-casscf-sp; 5/412 Test #5: casscf-sa-sp ..................... Passed 17.41 sec; Start 7: casscf-sp; 6/412 Test #6: ao-casscf-sp ..................... Passed 8.11 sec; Start 8: castup1; 7/412 Test #8: castup1 .......................... Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 395: python-vibanalysis; Start 41: cc25; Start 46: cc3; Start 37: cc21; Start 39: cc23; Start 104: dcft-grad1; Start 43: cc27; Start 111: dcft4; Start 156: dft-grad-lr3; Start 228: mp2-def2; Start 40: cc24; Start 36: cc2; Start 179: fsapt1; Start 301: pywrap-all; Start 146: dfomp2-grad3; Start 305: pywrap-checkrun-rhf; 1/412 Test #228: mp2-def2 ......................... Passed 422.59 sec; Start 42: cc26; 2/412 Test #156: dft-grad-lr3 ..................... Passed 456.14 sec; Start 307: pywrap-checkrun-uhf; 3/412 Test #36: cc2 .............................. Passed 642.46 sec; Start 77: cc7; 4/412 Test #40: cc24 ............................. Passed 651.87 sec; Start 241: ocepa-freq1; 5/412 Test #43: cc27 ............................. Passed 960.14 sec; Start 183: isapt1; 6/412 Test #39: cc23 ............................. Passed 1144.43 sec; Start 306: pywrap-checkrun-rohf; 7/412 Test #41: cc25 ............................. Passed 1174.58 sec; Start 25: cc13; 8/412 Test #146: dfomp2-grad3 ..................... Passed 1217.72 sec; Start 45: cc29; 9/412 Test #46: cc3 .............................. Passed 1255.05 sec; Start 29: cc13d; 10/412 Test #42: cc26 ............................. Passed 914.66 sec; Start 115: dcft8; 11/412 Test #183: isapt1 ........................... Passed 401.39 sec; Start 112: dcft5; 12/412 Test #395: python-vibanalysis ............... Passed 1424.43 sec; Start 18: cbs-xtpl-func; 13/412 Test #37: cc21 ............................. Passed 1446.40 sec; Start 182: fsapt-allterms; 14/412 Test #45: cc29 ............................. Passed 300.99 sec; Start 194: fd-freq-energy-large; 15/412 Test #104: dcft-grad1 ....................... Passed 1521.99 sec; Start 196: fd-freq-gradient-large; 16/412 Test #305: pywrap-checkrun-rhf .............. Passed 1605.76 sec; Start 279: opt13; 17/412 Test #301: pywrap-all .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 3: casscf-fzc-sp; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 46: cc3; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 146: dfomp2-grad3; Start 37: cc21; Start 39: cc23; Start 41: cc25; Start 395: python-vibanalysis; Start 77: cc7; Start 43: cc27; Start 40: cc24; Start 306: pywrap-checkrun-rohf; 1/412 Test #3: casscf-fzc-sp .................... Passed 41.56 sec; Start 241: ocepa-freq1; 2/412 Test #43: cc27 ............................. Passed 853.53 sec; Start 42: cc26; 3/412 Test #77: cc7 .............................. Passed 857.39 sec; Start 36: cc2; 4/412 Test #40: cc24 ............................. Passed 881.10 sec; Start 115: dcft8; 5/412 Test #306: pywrap-checkrun-rohf ............. Passed 911.01 sec; Start 156: dft-grad-lr3; 6/412 Test #241: ocepa-freq1 ...................... Passed 872.67 sec; Start 228: mp2-def2; 7/412 Test #41: cc25 ............................. Passed 973.90 sec; Start 25: cc13; 8/412 Test #37: cc21 ............................. Passed 984.96 sec; Start 179: fsapt1; 9/412 Test #39: cc23 ............................. Passed 988.58 sec; Start 30: cc14; 10/412 Test #395: python-vibanalysis ............... Passed 1210.67 sec; Start 13: cbs-xtpl-alpha; 11/412 Test #146: dfomp2-grad3 ..................... Passed 1227.58 sec; Start 112: dcft5; 12/412 Test #46: cc3 .............................. Passed 1280.30 sec; Start 183: isapt1; 13/412 Test #228: mp2-def2 ......................... Passed 410.01 sec; Start 29: cc13d; 14/412 Test #305: pywrap-checkrun-rhf .............. Passed 1326.94 sec; Start 360: tu6-cp-ne2; 15/412 Test #307: pywrap-checkrun-uhf .............. Passed 1329.33 sec; Start 387: cookbook-rohf-orb-rot; 16/412 Test #156: dft-grad-lr3 ..................... Passed 429.40 sec; Start 45: cc29; 17/412 Test #301: pywrap-all ....................... Passed 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 46: cc3; Start 112: dcft4; Start 105: dcft-grad1; Start 36: cc2; Start 40: cc24; Start 147: dfomp2-grad3; Start 42: cc26; Start 37: cc21; Start 39: cc23; Start 41: cc25; Start 43: cc27; Start 396: python-vibanalysis; Start 30: cc14; Start 116: dcft8; Start 302: pywrap-all; Start 25: cc13; 1/413 Test #25: cc13 ............................. Passed 343.48 sec; Start 77: cc7; 2/413 Test #43: cc27 ............................. Passed 564.16 sec; Start 306: pywrap-checkrun-rhf; 3/413 Test #41: cc25 ............................. Passed 634.21 sec; Start 242: ocepa-freq1; 4/413 Test #37: cc21 ............................. Passed 636.00 sec; Start 32: cc16; 5/413 Test #30: cc14 ............................. Passed 773.98 sec; Start 308: pywrap-checkrun-uhf; 6/413 Test #39: cc23 ............................. Passed 954.07 sec; Start 157: dft-grad-lr3; 7/413 Test #42: cc26 ............................. Passed 1005.92 sec; Start 229: mp2-def2; 8/413 Test #77: cc7 .............................. Passed 682.74 sec; Start 180: fsapt1; 9/413 Test #147: dfomp2-grad3 ..................... Passed 1064.72 sec; Start 113: dcft5; 10/413 Test #116: dcft8 ............................ Passed 1093.28 sec; Start 29: cc13d; 11/413 Test #32: cc16 ............................. Passed 458.97 sec; Start 307: pywrap-checkrun-rohf; 12/413 Test #40: cc24 ............................. Passed 1133.10 sec; Start 13: cbs-xtpl-alpha; 13/413 Test #36: cc2 .............................. Passed 1137.87 sec; Start 184: isapt1; 14/413 Test #105: dcft-grad1 ....................... Passed 1187.32 sec; Start 48: cc31; 15/413 Test #242: ocepa-freq1 ...................... Passed 651.24 sec; Start 45: cc29; 16/413 Test #396: python-vibanalysis ............... Passed 1355.01 sec; Start 114: dcft6; 17/413 Test #29: cc13d ............................ Passed 265.22 sec; Start 59: cc41; 18/4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 98: cisd-sp; Start 243: ocepa1; Start 45: cc3; Start 103: dcft-grad1; Start 110: dcft4; Start 39: cc24; Start 35: cc2; Start 40: cc25; Start 38: cc23; Start 36: cc21; Start 41: cc26; Start 394: python-vibanalysis; Start 145: dfomp2-grad3; Start 42: cc27; Start 300: pywrap-all; Start 76: cc7; 1/411 Test #98: cisd-sp .......................... Passed 12.34 sec; Start 304: pywrap-checkrun-rhf; 2/411 Test #243: ocepa1 ........................... Passed 18.70 sec; Start 306: pywrap-checkrun-uhf; 3/411 Test #42: cc27 ............................. Passed 832.70 sec; Start 29: cc14; 4/411 Test #76: cc7 .............................. Passed 833.35 sec; Start 240: ocepa-freq1; 5/411 Test #41: cc26 ............................. Passed 876.66 sec; Start 155: dft-grad-lr3; 6/411 Test #38: cc23 ............................. Passed 937.42 sec; Start 114: dcft8; 7/411 Test #36: cc21 ............................. Passed 943.79 sec; Start 227: mp2-def2; 8/411 Test #40: cc25 ............................. Passed 955.88 sec; Start 178: fsapt1; 9/411 Test #35: cc2 .............................. Passed 975.82 sec; Start 111: dcft5; 10/411 Test #39: cc24 ............................. Passed 1000.55 sec; Start 13: cbs-xtpl-alpha; 11/411 Test #155: dft-grad-lr3 ..................... Passed 395.18 sec; Start 305: pywrap-checkrun-rohf; 12/411 Test #394: python-vibanalysis ............... Passed 1285.91 sec; Start 24: cc13; 13/411 Test #227: mp2-def2 ......................... Passed 371.74 sec; Start 31: cc16; 14/411 Test #29: cc14 ............................. Passed 619.00 sec; Start 28: cc13d; 15/411 Test #145: dfomp2-grad3 ..................... Passed 1456.77 sec; Start 182: isapt1; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1461.98 sec; Start 11: cbs-delta-energy; 17/411 Test #111: dcft5 ............................ Passed 505.16 sec; Start 4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; \ Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['timeout'],['timeout']
Safety,```; $ ctest -j 16 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 83: cdomp2-1; Start 160: dft-grad-lr1; Start 394: python-vibanalysis; Start 103: dcft-grad1; Start 300: pywrap-all; Start 110: dcft4; Start 162: dft-grad-lr3; Start 45: cc3; Start 227: mp2-def2; Start 178: fsapt1; Start 304: pywrap-checkrun-rhf; Start 306: pywrap-checkrun-uhf; Start 182: isapt1; Start 145: dfomp2-grad3; Start 38: cc23; Start 39: cc24; 1/411 Test #83: cdomp2-1 ......................... Passed 11.78 sec; Start 40: cc25; 2/411 Test #160: dft-grad-lr1 ..................... Passed 17.60 sec; Start 36: cc21; 3/411 Test #227: mp2-def2 ......................... Passed 416.34 sec; Start 240: ocepa-freq1; 4/411 Test #182: isapt1 ........................... Passed 437.25 sec; Start 35: cc2; 5/411 Test #162: dft-grad-lr3 ..................... Passed 438.96 sec; Start 76: cc7; 6/411 Test #38: cc23 ............................. Passed 670.24 sec; Start 18: cbs-xtpl-func; 7/411 Test #36: cc21 ............................. Passed 681.15 sec; Start 181: fsapt-allterms; 8/411 Test #40: cc25 ............................. Passed 702.11 sec; Start 193: fd-freq-energy-large; 9/411 Test #39: cc24 ............................. Passed 728.49 sec; Start 195: fd-freq-gradient-large; 10/411 Test #195: fd-freq-gradient-large ........... Passed 286.40 sec; Start 278: opt13; 11/411 Test #145: dfomp2-grad3 ..................... Passed 1015.18 sec; Start 11: cbs-delta-energy; 12/411 Test #76: cc7 .............................. Passed 587.31 sec; Start 373: dft-custom-mgga; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 1029.41 sec; Start 320: sapt6; 14/411 Test #45: cc3 .............................. Passed 1036.97 sec; Start 111: dcft5; 15/411 Test #240: ocepa-freq1 ...................... Passed 625.43 sec; Start 41: cc26; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1061.37 sec; Start 155: dfscf-bz2; 17/411 Test #35: cc2 .............................. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:34,timeout,timeout,34,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 305: pywrap-checkrun-rhf; Start 46: cc3; Start 307: pywrap-checkrun-uhf; Start 37: cc21; Start 146: dfomp2-grad3; 1/412 Test #37: cc21 ............................. Passed 527.58 sec; Start 41: cc25; 2/412 Test #307: pywrap-checkrun-uhf .............. Passed 595.37 sec; Start 39: cc23; 3/412 Test #305: pywrap-checkrun-rhf .............. Passed 613.40 sec; Start 77: cc7; 4/412 Test #301: pywrap-all ....................... Passed 652.73 sec; Start 43: cc27; 5/412 Test #146: dfomp2-grad3 ..................... Passed 673.97 sec; Start 306: pywrap-checkrun-rohf; 6/412 Test #46: cc3 .............................. Passed 677.84 sec; Start 241: ocepa-freq1; 7/412 Test #104: dcft-grad1 ....................... Passed 777.43 sec; Start 40: cc24; 8/412 Test #111: dcft4 ............................ Passed 834.58 sec; Start 42: cc26; 9/412 Test #77: cc7 .............................. Passed 317.71 sec; Start 36: cc2; 10/412 Test #41: cc25 ............................. Passed 421.47 sec; Start 115: dcft8; 11/412 Test #43: cc27 ............................. Passed 327.75 sec; Start 395: python-vibanalysis; 12/412 Test #306: pywrap-checkrun-rohf ............. Passed 359.48 sec; Start 25: cc13; 13/412 Test #241: ocepa-freq1 ...................... Passed 402.21 sec; Start 30: cc14; 14/412 Test #39: cc23 ............................. Passed 487.99 sec; Start 13: cbs-xtpl-alpha; 15/412 Test #42: cc26 ............................. Passed 471.50 sec; Start 156: dft-grad-lr3; 16/412 Test #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 46: cc3; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 146: dfomp2-grad3; Start 37: cc21; 1/412 Test #37: cc21 ............................. Passed 444.99 sec; Start 41: cc25; 2/412 Test #307: pywrap-checkrun-uhf .............. Passed 541.32 sec; Start 39: cc23; 3/412 Test #305: pywrap-checkrun-rhf .............. Passed 559.64 sec; Start 77: cc7; 4/412 Test #301: pywrap-all ....................... Passed 576.06 sec; Start 43: cc27; 5/412 Test #146: dfomp2-grad3 ..................... Passed 577.08 sec; Start 306: pywrap-checkrun-rohf; 6/412 Test #46: cc3 .............................. Passed 585.00 sec; Start 40: cc24; 7/412 Test #104: dcft-grad1 ....................... Passed 654.89 sec; Start 395: python-vibanalysis; 8/412 Test #111: dcft4 ............................ Passed 693.10 sec; Start 241: ocepa-freq1; 9/412 Test #41: cc25 ............................. Passed 298.26 sec; Start 42: cc26; 10/412 Test #39: cc23 ............................. Passed 294.97 sec; Start 36: cc2; 11/412 Test #77: cc7 .............................. Passed 286.85 sec; Start 115: dcft8; 12/412 Test #43: cc27 ............................. Passed 281.14 sec; Start 25: cc13; 13/412 Test #306: pywrap-checkrun-rohf ............. Passed 302.83 sec; Start 156: dft-grad-lr3; 14/412 Test #40: cc24 ............................. Passed 311.20 sec; Start 30: cc14; 15/412 Test #42: cc26 ............................. Passed 239.25 sec; Start 228: mp2-def2; 16/412 Test #241: ocepa-freq1 ...................... Passed 322.81 sec; Start 13: cbs-xtpl-alpha; 17/412 Test #25: cc13 ............................. Passed 164.06 sec; Start 179: fsapt1; 18/412 Test #30: cc14 ............................. Passed 144.79 sec; Start 112: dcft5; 19/412 Test #115: dcft8 ............................ Pas",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 226: mp2-1; Start 228: mp2-grad1; Start 394: python-vibanalysis; Start 300: pywrap-all; Start 103: dcft-grad1; Start 304: pywrap-checkrun-rhf; Start 306: pywrap-checkrun-uhf; Start 162: dft-grad-lr3; 1/411 Test #228: mp2-grad1 ........................ Passed 2.06 sec; Start 110: dcft4; 2/411 Test #226: mp2-1 ............................ Passed 6.34 sec; Start 40: cc25; 3/411 Test #40: cc25 ............................. Passed 153.57 sec; Start 178: fsapt1; 4/411 Test #306: pywrap-checkrun-uhf .............. Passed 204.87 sec; Start 39: cc24; 5/411 Test #304: pywrap-checkrun-rhf .............. Passed 232.62 sec; Start 45: cc3; 6/411 Test #300: pywrap-all ....................... Passed 243.53 sec; Start 38: cc23; 7/411 Test #110: dcft4 ............................ Passed 251.30 sec; Start 35: cc2; 8/411 Test #39: cc24 ............................. Passed 155.32 sec; Start 227: mp2-def2; 9/411 Test #103: dcft-grad1 ....................... Passed 361.43 sec; Start 36: cc21; 10/411 Test #38: cc23 ............................. Passed 142.28 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #35: cc2 .............................. Passed 153.53 sec; Start 41: cc26; 12/411 Test #162: dft-grad-lr3 ..................... Passed 443.69 sec; Start 182: isapt1; 13/411 Test #45: cc3 .............................. Passed 236.97 sec; Start 145: dfomp2-grad3; 14/411 Test #36: cc21 ............................. Passed 148.51 sec; Start 42: cc27; 15/411 Test #305: pywrap-checkrun-rohf ............. Passed 140.52 sec; Start 29: cc14; 16/411 Test #41: cc26 ............................. Passed 135.18 sec; Start 111: dcft5; 17/411 Test #42: cc27 ............................. Passed 101.05 sec; Start 18: cbs-xtpl-func; 18/411 Test #29: cc14 ............................. Passed 87.25 sec; Start 181: fsapt-allterms; 19/411 Test #145: dfomp2-grad3 .................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 297.78 sec; Start 162: dft-grad-lr3; 2/411 Test #182: isapt1 ........................... Passed 469.93 sec; Start 227: mp2-def2; 3/411 Test #18: cbs-xtpl-func .................... Passed 485.98 sec; Start 25: cc13a; 4/411 Test #193: fd-freq-energy-large ............. Passed 551.44 sec; Start 113: dcft7; 5/411 Test #181: fsapt-allterms ................... Passed 652.63 sec; Start 205: frac-traverse; 6/411 Test #394: python-vibanalysis ............... Passed 680.49 sec; Start 316: sapt2; 7/411 Test #25: cc13a ............................ Passed 254.82 sec; Start 318: sapt4; 8/411 Test #162: dft-grad-lr3 ..................... Passed 489.85 sec; Start 325: scf-bz2; 9/411 Test #113: dcft7 ............................ Passed 278.82 sec; Start 373: dft-custom-mgga; 10/411 Test #278: opt13 ............................ Passed 847.95 sec; Start 320: sapt6; 11/411 Test #205: frac-traverse .................... Passed 221.61 sec; Start 155: dfscf-bz2; 12/411 Test #227: mp2-def2 ......................... Passed 440.79 sec; Start 183: isapt2; 13/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 347: sapt-dft2; 14/411 Test #320: sapt6 ............................ Passed 169.47 sec; Start 112: dcft6; 15/411 Test #155: dfscf-bz2 ........................ Passed 146.26 sec; Start 97: cisd-opt-fd; 16/411 Test #373: dft-custom-mgga .................. Passed 193.16 sec; Start 281: opt-irc-2; 17/411 Test #316: sapt2 ............................ Passed 360.69 sec; Start 300: pywrap-all; 18/411 Test #347: sapt-dft2 ........................ Passed 128.97 sec; Start 161: dft-grad-lr2;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 340.82 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 486.53 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 538.29 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 603.47 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 281.79 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 716.17 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 235.66 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.11 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 326.30 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ......................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 98: cisd-sp; Start 119: dfcasscf-sp; Start 394: python-vibanalysis; Start 45: cc3; Start 162: dft-grad-lr3; Start 227: mp2-def2; Start 178: fsapt1; Start 103: dcft-grad1; 1/411 Test #119: dfcasscf-sp ...................... Passed 4.33 sec; Start 300: pywrap-all; 2/411 Test #98: cisd-sp .......................... Passed 10.64 sec; Start 304: pywrap-checkrun-rhf; 3/411 Test #45: cc3 .............................. Passed 367.14 sec; Start 39: cc24; 4/411 Test #300: pywrap-all ....................... Passed 381.81 sec; Start 306: pywrap-checkrun-uhf; 5/411 Test #304: pywrap-checkrun-rhf .............. Passed 390.00 sec; Start 182: isapt1; 6/411 Test #227: mp2-def2 ......................... Passed 446.06 sec; Start 35: cc2; 7/411 Test #162: dft-grad-lr3 ..................... Passed 473.06 sec; Start 41: cc26; 8/411 Test #103: dcft-grad1 ....................... Passed 617.53 sec; Start 110: dcft4; 9/411 Test #39: cc24 ............................. Passed 338.53 sec; Start 40: cc25; 10/411 Test #182: isapt1 ........................... Passed 433.14 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #41: cc26 ............................. Passed 423.76 sec; Start 38: cc23; 12/411 Test #35: cc2 .............................. Passed 450.90 sec; Start 36: cc21; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 571.32 sec; Start 42: cc27; 14/411 Test #394: python-vibanalysis ............... Passed 966.42 sec; Start 76: cc7; 15/411 Test #40: cc25 ............................. Passed 480.63 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 484.30 sec; Start 181: fsapt-allterms; 17/411 Test #38: cc23 ............................. Passed 495.58 sec; Start 193: fd-freq-energy-large; 18/411 Test #42: cc27 ............................. Passed 441.98 sec; Start 195: fd-freq-gradient-large; 19/411 Test #76: cc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 243: ocepa1; Start 394: python-vibanalysis; Start 162: dft-grad-lr3; Start 227: mp2-def2; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; 1/411 Test #243: ocepa1 ........................... Passed 1.89 sec; Start 193: fd-freq-energy-large; 2/411 Test #227: mp2-def2 ......................... Passed 436.21 sec; Start 195: fd-freq-gradient-large; 3/411 Test #182: isapt1 ........................... Passed 472.25 sec; Start 278: opt13; 4/411 Test #162: dft-grad-lr3 ..................... Passed 488.24 sec; Start 103: dcft-grad1; 5/411 Test #193: fd-freq-energy-large ............. Passed 507.09 sec; Start 300: pywrap-all; 6/411 Test #18: cbs-xtpl-func .................... Passed 512.61 sec; Start 304: pywrap-checkrun-rhf; 7/411 Test #181: fsapt-allterms ................... Passed 628.73 sec; Start 45: cc3; 8/411 Test #195: fd-freq-gradient-large ........... Passed 291.98 sec; Start 373: dft-custom-mgga; 9/411 Test #394: python-vibanalysis ............... Passed 771.15 sec; Start 320: sapt6; 10/411 Test #304: pywrap-checkrun-rhf .............. Passed 277.81 sec; Start 306: pywrap-checkrun-uhf; 11/411 Test #300: pywrap-all ....................... Passed 288.34 sec; Start 112: dcft6; 12/411 Test #45: cc3 .............................. Passed 192.30 sec; Start 155: dfscf-bz2; 13/411 Test #103: dcft-grad1 ....................... Passed 361.67 sec; Start 183: isapt2; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 99.74 sec; Start 39: cc24; 15/411 Test #373: dft-custom-mgga .................. Passed 186.38 sec; Start 305: pywrap-checkrun-rohf; 16/411 Test #320: sapt6 ............................ Passed 165.71 sec; Start 110: dcft4; 17/411 Test #112: dcft6 ............................ Passed 164.24 sec; Start 38: cc23; 18/411 Test #155: dfscf-bz2 ........................ Passed 143.19 sec; Start 4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 287.94 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 442.34 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 511.29 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 597.58 sec; Start 316: sapt2; 5/411 Test #205: frac-traverse .................... Passed 227.64 sec; Start 318: sapt4; 6/411 Test #278: opt13 ............................ Passed 764.00 sec; Start 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 316.06 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 469.47 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 544.74 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 628.02 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 336.73 sec; Start 318: sapt4; 6/411 Test #205: frac-traverse .................... Passed 224.53 sec; Start 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 323.95 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 528.74 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 536.55 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 593.28 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 297.32 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 736.98 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 247.88 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.30 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 318.32 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 6.14 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 2.45 sec; Start 5: casscf-sa-sp; 12/411 Test #2: adc2 ............................. Passed 46.87 sec; Start 6: ao-casscf-sp; 13/411 Test #394: python-vibanalysis ............... Passed 861.59 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['timeout'],['timeout']
Safety,"```; The following tests FAILED:; 	132 - dfmp2-ecp (Failed); 	368 - dft-bench-interaction (Timeout); 	370 - pywrap-align (Failed); 	371 - pywrap-align-chiral (Failed); ```; The 132 is not surprising, as with this patch up to `[Kr]` is frozen for Xe, without it only up to `[Ar] + 3d` from the ECP. I guess this is a question of what we want as default behaviour for `freeze_core` - always freeze up to the previous Rg (as done here and in other codes), or ignore further freezing for ECP's (as is done in `master`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-383831824:91,Timeout,Timeout,91,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-383831824,1,['Timeout'],['Timeout']
Safety,"`coldim` isn't a wavefunction attribute. It's the dimension of the columns of the orbital coefficient `Matrix` and is thus a `Matrix` attribute. Redundancy is not the problem here. The problem is that `nmopi_` is _wrong_. Why it's wrong is a deeper issue. The `common_init` code is called anytime a wavefunction is initialized, and it initializes all orbital spaces by assuming no linear dependences. This is reasonable if you can rely on the linear dependency checking code to be called later and to re-initialize orbital spaces if necessary. If you cannot (as in this case), you get this issue. My naive vote would be to move orbital space initialization out of `common_init` entirely. If you're initializing from a reference wavefunction that already has those spaces defined, there's no need to touch those. Otherwise, initialize MO spaces only once you have determined the number of MOs, i.e., after [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/hf.cc#L785).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560:145,Redund,Redundancy,145,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560,1,['Redund'],['Redundancy']
Safety,`compute_gradient` is also in use py-side for dispersion. perhaps we could cease to export the fn for general wfn and only keep export for libdisp and dfmp2. that reduces the risk of relativistic misuse to one method.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927:175,risk,risk,175,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927,1,['risk'],['risk']
Safety,"`initialize_lebedev` wasn't ever actually called. Since we're using c++11 elsewhere, we can just use an initializer_list to build `lebedev_mapping_` and skip all this `initialize_lebedev` nonsense. Also changes the technically-thread-unsafe `[]` to a `.at()` so this can't be re-broken later. Now, it turns out that there's a lot more ado about `SpherialGrid` and `RadialGrid` and cubature.cc in general, but, we're discussing that over in #2736 . This PR's purpose is JUST to fix the nasty bug that could cause parallel code to hang (if multiple threads tried to touch `lebedev_mapping_` at once, and write a value because `[]` access fills-when-missing, one or more thread could get stuck forever in a tree-that-has-become-a-loop). See #2736 for more details on who/what/where/when/why.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2743:234,unsafe,unsafe,234,https://psicode.org,https://github.com/psi4/psi4/pull/2743,1,['unsafe'],['unsafe']
Safety,"`libsapt_solver` has many manual BLAS calls that could be written in a way that is both more transparent and more memory-safe by using the machinery of `libmints`. For example, [this fragment](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libsapt_solver/sapt.cc#L223-L230) of code is just a verbose way to do `linalg::triplet`. This is just one of _many_ examples throughout the module, and I recommend that our two SAPT-based groups invest the time to clean this module up.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2337:121,safe,safe,121,https://psicode.org,https://github.com/psi4/psi4/issues/2337,1,['safe'],['safe']
Safety,"`phi_ao` is passed to `dx_read` as an argument. I'm pretty sure that the description of `phi_ao` is wrong; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libqt/dx_read.cc#L60. The only place where `dx_read` is used is; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libscf_solver/hf.cc#L601. The warning is; ```; -Wnonnull; Warn about passing a null pointer for arguments marked as requiring a non-null value by the ""nonnull"" function attribute. -Wnonnull is included in -Wall and -Wformat. It can be disabled with the -Wno-nonnull option.; ```; There is no null pointer issue; the code is merely unsafe since it assumes that the pointers are not null. Adding a check for null pointers and throwing an error in that case should fix this warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490:681,unsafe,unsafe,681,https://psicode.org,https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490,1,['unsafe'],['unsafe']
Safety,"a psi4 build.). Which is where my runs always hang (on the [] access, specifically) when they do. If I pop open gdb, attach, and check what lebedev_mapping_ looks like, I see something somewhat disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:1672,safe,safe,1672,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['safe'],['safe']
Safety,"a/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12710,detect,detecting,12710,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly buil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3165,detect,detection,3165,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['detect'],['detection']
Safety,"ack (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds !; ! !; !---------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:1074,Timeout,TimeoutExpired,1074,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['Timeout'],['TimeoutExpired']
Safety,addons.py::test_snsmp2 SKIPPED [ 68%]; 2018-12-05T15:54:21.2547307Z ..\lib\psi4\tests\test_addons.py::test_resp SKIPPED [ 72%]; 2018-12-05T15:54:23.0849642Z ..\lib\psi4\tests\test_psi4.py::test_psi4_basic PASSED [ 77%]; 2018-12-05T15:54:34.9658940Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cc PASSED [ 81%]; 2018-12-05T15:54:39.2671697Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cas PASSED [ 86%]; 2018-12-05T15:55:14.7785164Z ..\lib\psi4\tests\test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; 2018-12-05T15:55:32.0037962Z ..\lib\psi4\tests\test_psi4.py::test_psi4_sapt PASSED [ 95%]; 2018-12-05T15:55:39.8034520Z ..\lib\psi4\tests\test_psi4.py::test_psi4_scfproperty PASSED [100%]; 2018-12-05T15:55:39.8037151Z =========================== short test summary info ===========================; 2018-12-05T15:55:39.8038147Z SKIP [1] lib\psi4\tests\test_addons.py:43: Psi4 not compiled with gdma. Rebuild with -DENABLE_gdma; 2018-12-05T15:55:39.8039347Z SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:2867,detect,detecting,2867,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety,"ads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1706,detect,detect,1706,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['detect'],['detect']
Safety,age if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4689,detect,detecting,4689,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,ages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2087,detect,detecting,2087,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,aimis/psi4_2.git/build/stage/include/pybind11/pybind11.h:627; #18 0x561a734dcb93 in _PyCFunction_FastCallDict (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x10eb93). SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform_moinfo.cc:278 in psi::IntegralTransform::process_spaces(); Shadow bytes around the buggy address:; 0x0c068006f870: 00 00 00 fa fa fa 00 00 00 fa fa fa fd fd fd fa; 0x0c068006f880: fa fa fd fd fd fa fa fa 00 00 00 fa fa fa 00 00; 0x0c068006f890: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa; 0x0c068006f8a0: 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00 00 00; 0x0c068006f8b0: fa fa fd fd fd fd fa fa 00 00 00 00 fa fa 00 00; =>0x0c068006f8c0: 00 00 fa fa 00 00 00 00 fa fa 00 00 00[fa]fa fa; 0x0c068006f8d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17573,ABORT,ABORTING,17573,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['ABORT'],['ABORTING']
Safety,"al Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU information:. <details>. ```; processor : 15; vendor_id : GenuineIntel; cpu family : 6; model : 45; model name : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz; stepping : 6; microcode : 0x621; cpu MHz : 1832.125; cache size : 20480 KB; physical id : 1; siblings : 8; c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:12475,abort,abort,12475,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['abort'],['abort']
Safety,"ammatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:2983,detect,detection,2983,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['detect'],['detection']
Safety,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:6573,avoid,avoid,6573,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['avoid'],['avoid']
Safety,"approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate optimization problem. Or what do y'all think?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:1932,predict,predict,1932,https://psicode.org,https://github.com/psi4/psi4/issues/3134,1,['predict'],['predict']
Safety,arallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -openmp; -- Found MPI_C: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/i,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:5982,Detect,Detecting,5982,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"atible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2261,detect,detectable,2261,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['detect'],['detectable']
Safety,avoid macro rename vs l2 in integral.h,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2429:0,avoid,avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/2429,1,['avoid'],['avoid']
Safety,avoid overload_cast,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1454:0,avoid,avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/1454,1,['avoid'],['avoid']
Safety,"b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2443,detect,detectable,2443,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['detect'],['detectable']
Safety,"be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3512,safe,safety,3512,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['safe'],['safety']
Safety,"ble points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1595,unsafe,unsafe,1595,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['unsafe'],['unsafe']
Safety,"bling const&, char const (&) [59])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #23 0x7fa1377e0955 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #24 0x7fa146d8c08c in _PyCFunction_FastCallDict Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/psi4.git/psi4/src/psi4/detci/sem.cc:994 in psi::detci::CIWavefunction::sem_iter(psi::detci::CIvect&, psi::detci::stringwr**, psi::detci::stringwr**, double*, double, double, double, double, int, int, int); Shadow bytes around the buggy address:; 0x0c0480080860: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x0c0480080870: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x0c0480080880: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x0c0480080890: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00; 0x0c04800808a0: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00; =>0x0c04800808b0: fa fa fd fa fa fa 04 fa fa fa 00[fa]fa fa fd fd; 0x0c04800808c0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c04800808d0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c04800808e0: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c04800808f0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c0480080900: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==8917==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:15847,ABORT,ABORTING,15847,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['ABORT'],['ABORTING']
Safety,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:2113,safe,safely,2113,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375,1,['safe'],['safely']
Safety,"bs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU information:. <details>. ```; processor : 15; vendor_id : GenuineIntel; cpu family : 6; model : 45; model name : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz; stepping : 6; microcode : 0x621; cpu MHz : 1832.125; cache size : 20480 KB; physical id : 1; siblings : 8; core id : 7; cpu cores : 8; apicid : 46; initial apicid : 46; fpu : yes; fpu_exception : yes; cpuid level : 13; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid xsaveopt dtherm arat pln pts md_clear flush_l1d; bugs : cpu_meltdown sp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:13175,Abort,Aborted,13175,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Abort'],['Aborted']
Safety,"builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if nece",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12391,detect,detecting,12391,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:10512,safe,safe,10512,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['safe'],['safe']
Safety,"c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table do",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1174,detect,detected,1174,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['detect'],['detected']
Safety,"ce(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/detci/params.cc on line: 949; The most recent 5 function calls w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1753,detect,detecting,1753,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['detect'],['detecting']
Safety,"cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to clos",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:3901,avoid,avoid,3901,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['avoid'],['avoid']
Safety,"changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `null",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1380,avoid,avoids,1380,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['avoid'],['avoids']
Safety,"ck.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;... ```. Building then fails with:; ```; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:3462,Detect,Detecting,3462,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,10,['Detect'],['Detecting']
Safety,clang-tidy apply modernize-redundant-void-arg fixes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1317:27,redund,redundant-void-arg,27,https://psicode.org,https://github.com/psi4/psi4/pull/1317,1,['redund'],['redundant-void-arg']
Safety,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:2301,avoid,avoid,2301,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['avoid'],['avoid']
Safety,"clude/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; ../../../lib/libpsio.a(rw.cc.o): In function `void boost::mpi::detail::broadcast_impl<unsigned long>(boost::mpi::communicator const&, unsigned long*, int, int, mpl_::bool_<true>)':; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/include/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; ../../../lib/libpsio.a(volseek.cc.o): In function `void boost::mpi::detail::broadcast_impl<int>(boost::mpi::communicator const&, int*, int, int, mpl_::bool_<true>)':; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/include/boost/mpi/collectives/broadcast.hpp:96: undefined reference to `MPI_Bcast'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::abort(int)':; environment.cpp:(.text+0x21d): undefined reference to `MPI_Abort'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::initialized()':; environment.cpp:(.text+0x26b): undefined reference to `MPI_Initialized'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::finalized()':; environment.cpp:(.text+0x2cb): undefined reference to `MPI_Finalized'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(environment.o): In function `boost::mpi::environment::max_tag()':; environment.cpp:(.text+0x342): undefined reference to `MPI_Attr_get'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411:27799,abort,abort,27799,https://psicode.org,https://github.com/psi4/psi4/issues/411,1,['abort'],['abort']
Safety,"cmake doesn't detect `mpmath` directly. But you can look in `<objdir>/CMakeCache.txt` `PYTHON_EXECUTABLE` to check if right python is found. Otherwise, psi doesn't actually need `mpmath` anymore, so #968 drops the requirement. I'd guess it'll be merged tomorrow, then you can update your source.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382188857:14,detect,detect,14,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382188857,1,['detect'],['detect']
Safety,"com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confid",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1066,detect,detect-prebuilt-libtool-,1066,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,['detect'],"['detect-or-build-pure-cmake-', 'detect-prebuilt-libtool-']"
Safety,"conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To sil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:4680,safe,safe,4680,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['safe'],['safe']
Safety,"corrupted header of a `timer.dat` file, represented w/ a latin-1 encoding (since it can't be read w/ the standard utf-8 encoding):; ```; Host: ip-172-31-XX-XXX.us-east-2.compute.interá^X. Timers On : Sat Sep 2 14:14:18 2023; Timers Off: Sat Sep 2 14:14:18 2023. Wall Time: 0.52 seconds. Time (seconds); Module User System Wall Calls. --------------------------------------------------------------------------------------; ```; In all of these problematic timer.dat files, the host name is truncated and ends with a random assortment of bytes. In the above example, the full host name should be `ip-172-31-XX-XXX.us-east-2.compute.internal`. We then examined how psi4 determines and processes the host name. It turns out, psi4 uses the `gethostname` function from the C API to get up to the first 40 bytes of the host name, and then it writes those bytes to `timer.dat`. The host name of this particular compute cluster is over 40 chars/bytes. This is unsafe because if a host name has more than 40 characters, the null byte (`\0`) won't be written to `timer.dat` to signify the end of the string, and psi4 will continue to write whatever is in memory past the 40 chars/bytes until it hits a null byte. This also explains the original error, b/c writing random bytes to a file can lead to non-utf-8-compliant files. It turns out that [linux defines a maximum host name length of 64](https://man7.org/linux/man-pages/man2/gethostname.2.html), so the easy fix here is to just increase the size of the host name buffer from 40 to 65 (== 64 + 1 for the null byte at the end). I have no idea why this length was previously limited to 40. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fix bug resulting in `UnicodeDecodeError` and corrupted `timer.dat` files. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043:2453,unsafe,unsafe,2453,https://psicode.org,https://github.com/psi4/psi4/pull/3043,1,['unsafe'],['unsafe']
Safety,"cting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source should be edited so that those arguments are passed through to the psi4_core build.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:3186,detect,detected,3186,https://psicode.org,https://github.com/psi4/psi4/issues/516,2,['detect'],"['detected', 'detecting']"
Safety,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:1904,safe,safe,1904,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['safe'],['safe']
Safety,"d make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3993,detect,detect,3993,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,4,['detect'],['detect']
Safety,"d, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract444.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract444.cc; ```. I should probably turn off verbose compile in general, then this PR is rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2742,safe,safer,2742,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['safe'],['safer']
Safety,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16799,detect,detecting,16799,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,5,['detect'],['detecting']
Safety,"dec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_dat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228:1615,avoid,avoid,1615,https://psicode.org,https://github.com/psi4/psi4/issues/2228,1,['avoid'],['avoid']
Safety,detect cppe module not lib,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:0,detect,detect,0,https://psicode.org,https://github.com/psi4/psi4/pull/2391,1,['detect'],['detect']
Safety,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:1179,predict,predict,1179,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,2,"['predict', 'safe']","['predict', 'safe']"
Safety,dons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install pac,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1744,detect,detecting,1744,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,dons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_basic PASSED [ 90%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput optimization) [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:7179,detect,detecting,7179,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"e ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds !; ! !; !-------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:1100,timeout,timeout,1100,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['timeout'],['timeout']
Safety,"e CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:8059,redund,redundancy,8059,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['redund'],['redundancy']
Safety,"e average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-6 (1); > - _M_ psi4/share/psi4/fsapt/copy_pymol.py; > https://github.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1375,detect,detect,1375,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['detect'],['detect']
Safety,"easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphson SCF and trust region SCF. These are bound to give you a local solution, but they are 1) unreliable and 2) slow in the initial phases of the calculation. It is better to do first some ADIIS/EDIIS to get you to a reasonable solution, and only then start refining it with something fancier. Also GDM is a great solution for the initial phase of the calculation, since as you have a **guarantee** that you are taking a step down in energy. At variance, the first step in DIIS is usually up in energy, and it takes you a few steps to recover from. I'm sure there is always a use for the real second-order methods, but - when properly preconditioned - the gradient descent methods work really well, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:5385,recover,recover,5385,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['recover'],['recover']
Safety,"eba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(157): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::pointer pointer;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:12217,detect,detected,12217,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"ecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install packag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12868,detect,detecting,12868,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,ecessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3305,detect,detecting,3305,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"ecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /Users/bsenjean/Documents/intelpython3/bin/python3 (found suitable version ""3.7.7"", minimum required is ""3.6"") ; -- Found PythonLibs: /Users/bsenjean/Documents/intelpython3/lib/libpython3.7m.dylib; -- Found Python 3.7: /Users/bsenjean/Documents/intelpython3/bin/python3 (found version 3.7.7); -- Psi4 staging: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage; -- Math lib search order is MKL;SYSTEM_NATIVE;OPENBLAS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:6153,Detect,Detecting,6153,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Detect'],['Detecting']
Safety,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3519,Detect,Detecting,3519,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,8,['Detect'],['Detecting']
Safety,ectorize -march=corei7-avx -mavx -fopenmp -O3 -funroll-all-loops -w -ftree-vectorize; -- Libraries : /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so;/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:9456,Detect,Detecting,9456,https://psicode.org,https://github.com/psi4/psi4/issues/581,4,['Detect'],['Detecting']
Safety,"ed with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3768,detect,detectability,3768,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['detect'],['detectability']
Safety,ema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschem,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:7013,detect,detecting,7013,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"ements (transition metals), so for now my solution is to just use `freeze_core true` for all SAPT0 calcs and go about my life. And when I thought the bad setting _just_ caused segfaults, I was fine to assume that all calculations that ran to completion were obviously OK. Now seeing that there's some shade of undefined behavior leading to memory corruption possibly going on, I'd like to understand what is going wrong so I can figure out what's likely impacted... cases where the energy is obviously and egregiously wrong (like above) are easy, but I'm worried more about subtle incorrectness. As for the general fix -- if `num_frozen_docc` is disabled for SAPT0, then it becomes impossible for a user to impose their own beliefs about frozen orbitals in tricky cases like transition metals, which seems... bad. Since it does impact the dispersion portion of the calc, it needs to be user-mutable. This setting *shouldn't* be actually impacting the HF energies, and fixing that strange interaction seems like most of the battle. I'm less sure of what to do in the MP2 case, since it does seem relevant that the user should be able to specify their own core policy as required... At the risk of further complication, would it make sense to implement either:; 1. The ability for `num_frozen_docc` to take in a tuple the same length of the number of fragments in the active `Molecule` (such that correct behavior can be inferred in cases like SAPT where both monomer and dimer calcs are run in a global context); 2. The ability to define, via a list(?), a custom policy on a per-element basis that can be fed to `freeze_core`? . Both of these would allow both for the user to handle cases like custom frozen thresholds in multi-calc situations and keep things consistent. At the same time, these are... possibly a lot of work. I'm prototyping a solution of type (2) but I'm not sure if it'll be too clunky for others to use -- assuming I haven't messed up horribly, I'll propose the patch later today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380:2391,risk,risk,2391,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380,1,['risk'],['risk']
Safety,"emote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH releases matches metadata script, that upcoming in metadata script matches current versioner version. * Note that current tag is ""v1.1a1"". Decide on imminent tag, say ""v1.1rc1"". * 2. **ACTION** Bump tag in code. * Edit current & prospective tag in psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:4194,predict,predict,4194,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['predict'],['predict']
Safety,"ers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From discussion below, they approve._; - [x] Currently require CMake 3.1. Can we require 3.2 (for `continue()`) or 3.3 (for HDF5 versioning)? 3.3 and 3.6 available on conda.; - [x] RPATH work focused on Linux. Mac I don't think is a problem, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:2865,detect,detection,2865,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['detect'],['detection']
Safety,es/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2257,detect,detecting,2257,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"esolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/psi4/files/13431543/output_dav.txt) and [RSP](https://github.com/psi4/psi4/files/13431545/output_rsp.txt) schemes, as well as [GAMESS](https://github.com/psi4/psi4/files/13431555/output_gms.txt).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2729,recover,recover,2729,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['recover'],['recover']
Safety,est); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfomp2 = 943.08 sec*proc (7 tests); dfomp2.5 = 233.40 sec*proc (4 tests); dfomp3 = 229.00 sec*proc (4 tests); dfscf = 28.93 sec*proc (1 test); dft = 5629.04 sec*proc (26 tests); docs = 1.78 sec*proc (2 tests); ecp = 57.50 sec*proc (2 tests); fci = 7.32 sec*proc (2 tests); fcidump = 6.32 sec*proc (1 test); findif = 698.00 sec*proc (5 tests); fnocc = 141.78 sec*proc (4 tests); freq = 1043.60 sec*proc (6 tests); gradient = 1568.40 sec*proc (16 tests); json = 19.71 sec*proc (8 tests); longtests = 933.44 sec*proc (5 tests); mcscf = 5.98 sec*proc (3 tests); minitests = 44.49 sec*proc (3 tests); mints = 40.79 sec*proc (14 tests); misc = 369.08 sec*proc (16 tests); mp2 = 283.13 sec*proc (13 tests); nbody = 73.23 sec*proc (2 tests); numpy = 1.44 sec*proc (1 test); ocepa = 739.92 sec*proc (6 tests); omp = 845.55 sec*proc (18 tests); opt = 956.86 sec*proc (21 tests); prop = 1.97 sec*proc (1 test); properties = 104.12 sec*proc (10 tests); psi = 34317.61 sec*proc (400 tests); psi4numpy = 23.83 sec*proc (6 tests); psimrcc = 87.03 sec*proc (8 tests); python = 1082.76 sec*proc (10 tests); pywrap = 3836.93 sec*proc (12 tests); quicktests = 4351.03 sec*proc (137 tests); rasci = 45.35 sec*proc (3 tests); sapt = 1501.22 sec*proc (20 tests); scf = 6069.20 sec*proc (51 tests); shorttests = 47.02 sec*proc (4 tests); smoketests = 175.49 sec*proc (11 tests); stability = 7.67 sec*proc (2 tests); tutorial = 383.76 sec*proc (6 tests); x2c = 76.86 sec*proc (3 tests). Total Test time (real) = 3000.10 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:39933,Timeout,Timeout,39933,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Timeout'],['Timeout']
Safety,ests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15279,detect,detecting,15279,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,ests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necess,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13995,detect,detecting,13995,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"etci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/detci/params.cc on line: 949; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. Please could you go through it and see if you would find what's still wrong with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:2529,detect,detected,2529,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['detect'],['detected']
Safety,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1794,predict,predictable,1794,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,3,"['detect', 'predict']","['detected', 'predictable']"
Safety,f necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if ne,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2522,detect,detecting,2522,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"fit.gbs ); for((ib=0;ib<${#b[@]};ib++)); do for((jb=0;jb<ib;jb++)); do echo -n ""${b[ib]} vs ${b[jb]}: ""; diff ${b[ib]} ${b[jb]}| wc -l;done;done; def2-qzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 4; def2-sv_p_-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1727; def2-sv_p_-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 1723; def2-svp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 1727; def2-svp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-qzvp-jkfit.gbs: 0; def2-tzvpp-jkfit.gbs vs def2-qzvpp-jkfit.gbs: 4; def2-tzvpp-jkfit.gbs vs def2-sv_p_-jkfit.gbs: 1727; def2-tzvpp-jkfit.gbs vs def2-svp-jkfit.gbs: 1723; def2-tzvpp-jkfit.gbs vs def2-tzvp-jkfit.gbs: 0; ```. According to @bennybp the sets should be all the same, see https://github.com/MolSSI-BSE/basis_set_exchange/issues/103. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] remove redundant def2-*-[jk|j]fit basis sets. Presuming Susi accepts my PR, this one will additionally accomplish; - [x] fixes #1798 At least make all the def2 orbital and rifit basis sets parseable. These have been read through diff_gbs.py so I know all the elements parse now. Variety of errors found.; - [x] helps #1804 by redirecting def2-*-jkfit specifications toward the universal files. only took about four files to find a satisfactory and minimally disruptive place for a simple map-and-warn :-(; - [x] helps plugins like v2rdm_casscf that are adding internal pb11 by attaching the found Python headers location to the plugin target. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804:2245,redund,redundant,2245,https://psicode.org,https://github.com/psi4/psi4/pull/1804,1,['redund'],['redundant']
Safety,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:2961,detect,detected,2961,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['detect'],['detected']
Safety,forrtl: error (76): Abort trap signal,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:20,Abort,Abort,20,https://psicode.org,https://github.com/psi4/psi4/issues/2084,1,['Abort'],['Abort']
Safety,"ftware/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(155): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::value_type value_type;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:8485,detect,detected,8485,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"g (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2798,detect,detected,2798,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['detect'],['detected']
Safety,"g/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an OpenMP plugin, it was mixing omp libs in a sad manner, so _some_ fix is needed, maybe less drastic than this.; - New cmake (>=3.10, I think) makes nice targets for OpenMP that are per-lang (Psi only cares about CXX) and include both flags and libraries. So in this PR, BLAS is handled as before, except it stops a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:1315,detect,detects,1315,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['detect'],['detects']
Safety,"gdma1 is the test that's failing on Travis. (For once, timeout is not at fault.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275582318:55,timeout,timeout,55,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275582318,1,['timeout'],['timeout']
Safety,ge if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2r,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5028,detect,detecting,5028,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,ges\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13191,detect,detecting,13191,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,ges\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14952,detect,detecting,14952,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"gstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:9678,detect,detection,9678,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['detect'],['detection']
Safety,"gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pytests failed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416:2084,redund,redundant,2084,https://psicode.org,https://github.com/psi4/psi4/issues/2416,1,['redund'],['redundant']
Safety,"h of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3086,redund,redundant,3086,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['redund'],['redundant']
Safety,"hOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/Target",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2690,Detect,Detecting,2690,https://psicode.org,https://github.com/psi4/psi4/issues/1041,9,['Detect'],['Detecting']
Safety,"h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7267,safe,safe,7267,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['safe'],['safe']
Safety,"he SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of its; > self-imposed symmetry constraints.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/875>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlmJNWz39F1kSptiR8vFq7913CBnks5s9aN8gaJpZM4Q25IB>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:2166,avoid,avoid,2166,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['avoid'],['avoid']
Safety,"he compilation flag list when enabled. The `-pedantic-errors` flag has the compilation fail any time the code does not strictly follow the C++ language standard, i.e., whenever a compiler-specific language extension is used. `FORCE_PEDANTIC` is currently set to be enabled by default. ; 2. Fixes any instances of the code where the above option/flag would cause a compilation failure. This only requires two changes currently - removing extra semicolons in `libdiis/diismanager.h`, and replacing use of variable-length C-style arrays in `libmints/extern.cc`. The goal of these changes is to improve code portability across different compilers. By effectively disabling compiler-specific language extensions, the code no longer relies on specific compiler functionalities to work, and therefore should be compatible with a larger range of compilers across a wider variety of systems. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Adds a new compile-time setting, `FORCE_PEDANTIC`, that causes compilation to fail whenever use of a compiler-specific extension is detected.; - [X] Removes extraneous semicolons in `libddis/diismanager.h` that led to compiler error with the `FORCE_PEDANTIC` option enabled.; - [X] Replaces the use of variable-length C-style arrays in `libmints/extern.cc` with `std::vector` constructs. ## Questions; - [X] Should this new option be on by default?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:1570,detect,detected,1570,https://psicode.org,https://github.com/psi4/psi4/pull/3145,1,['detect'],['detected']
Safety,"hen PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - [x] Used to do `psi4 --new-plugin-makefile` to generate `Makefile`. Now do `psi4 --plugin-compile` to get a cmake command to generate a `Makefile` against that psi4.; - [x] `--new-plugin` --> `--plugin-name`.; - [x] `ctest -L mini` --> `ctest -L smoke`; ; - [x] @amjames, the pasture is going to need a slight update to mesh with the new plugin infrastructure. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:1895,detect,detection,1895,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['detect'],['detection']
Safety,"hen will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>. ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347029051:1660,safe,safelinks,1660,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051,2,['safe'],['safelinks']
Safety,"hmm, right. Best to keep it simple and abort then, it's a corner case after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375:39,abort,abort,39,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375,1,['abort'],['abort']
Safety,"hmm, you're right -- adcc 15.14 is getting installed https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:16:956 but not detected for tests https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:21:656",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359:142,detect,detected,142,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359,1,['detect'],['detected']
Safety,i4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_q,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3476,detect,detecting,3476,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,i4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3822,detect,detecting,3822,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,i4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if nece,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14153,detect,detecting,14153,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,i4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6846,detect,detecting,6846,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"ibraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-openmp;-Wl,--end-grou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:790,Detect,Detecting,790,https://psicode.org,https://github.com/psi4/psi4/issues/262,2,['Detect'],['Detecting']
Safety,"if I had to hazard a guess, it probably has to do with `run_cc_property` directly checking `core.OEProp.valid_methods` rather than running the `oeprop_validator` (which seems to let multipoles through).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2219#issuecomment-869256248:12,hazard,hazard,12,https://psicode.org,https://github.com/psi4/psi4/issues/2219#issuecomment-869256248,1,['hazard'],['hazard']
Safety,ile /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:1386,Detect,Detecting,1386,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,8,['Detect'],['Detecting']
Safety,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:2780,avoid,avoiding,2780,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['avoid'],['avoiding']
Safety,incorrect symmetry detection for cubane (Oh),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:19,detect,detection,19,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['detect'],['detection']
Safety,"inux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp .....................***Failed 6.27 sec. 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cubeprop = 6.27 sec*proc (1 test); psi = 6.27 sec*proc (1 test). Total Test time (real) = 6.33 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); Error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:1243,timeout,timeout,1243,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,1,['timeout'],['timeout']
Safety,ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1932,detect,detecting,1932,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"is command fails:; ```; $ cd samples/cc24 && psi4 test.in ; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:982,timeout,timeout,982,https://psicode.org,https://github.com/psi4/psi4/issues/2803,2,['timeout'],['timeout']
Safety,"is is a draft of the DLPNO-CCSD PR that will be coming in the next few months. The purpose of this is for the developers and research groups to be able to run and test DLPNO-CCSD before it is officially part of the code. . Credit to @JoseMadriaga for the derivations ; [LocalCCSD1to10.pdf](https://github.com/psi4/psi4/files/11114337/LocalCCSD1to10.pdf). Useful References:; [Original DLPNO-CCSD Paper](https://aip.scitation.org/doi/full/10.1063/1.47735); [Sparse Maps II Paper](https://aip.scitation.org/doi/10.1063/1.4939030). Example Input File; ```; memory 20 GB. molecule mol {; 0 1; O 0.705 0.744 0.16; H -0.071 0.264 0.45; H 1.356 0.064 -0.014; symmetry c1; }. set {; basis cc-pVDZ; scf_type df; freeze_core true; pno_convergence normal; }; energy('dlpno-ccsd'); ```. ### Results (Waterclusters in TZ); [Speedups, relative to DF-CCSD]; ![wc_tz_speedups](https://user-images.githubusercontent.com/60559795/228892229-c3269bf9-3386-4861-8660-92a6dcc3685e.jpeg). [Percent Correlation Energy Recovered, relative to DF-CCSD, all >= 99.9%]; ![wc_tz_percent_corr_recovered](https://user-images.githubusercontent.com/60559795/228892322-7c968c62-f874-496c-84e3-06b65c84803d.jpeg). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Implement the DLPNO-CCSD algorithm. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feel free to use this code, it is not fully tested yet, but preliminary tests show encouraging results, and is MUCH faster than conventional CCSD; - [ ] If you benchmark my code, please post results in the thread. ## Questions; - [ ] Question1. ## Checklist; - [ ] Add documentation; - [ ] Add references to terms and equations; - [ ] Tests added for any new features; - [ ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915:1026,Recover,Recovered,1026,https://psicode.org,https://github.com/psi4/psi4/pull/2915,1,['Recover'],['Recovered']
Safety,"itals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (DCFT) thoroughly rebranded to density cumulant theory (DCT). Adjust your calls and keywords accordingly or psi will reproach you (#1719).; - Drop Travis-CI (thank you for years of compiling) and consolidate on Azure for Linux and Windows builds so we can host more complex pipelines (#1752).; - Update orthogonalization routines and consolidate them back to libmints instead of SCF (#1759); - Let the `Deriv` class be instructable in the flavor it computes, rather than trying to devine SCF vs correlated (#1756); - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:7202,safe,safe,7202,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['safe'],['safe']
Safety,"ization seen in https://github.com/psi4/psi4/pull/2682. To describe the problem, as of now, different integral-direct JK algorithms use different implementations of the incremental Fock build formalism. DirectJK and DFJLinK use the same incremental Fock build formalism, while DFJCOSK uses its own methodology. This introduces two problems:. 1. The next step of CompositeJK development is to combine DFJLinK and DFJCOSK into the pilot CompositeJK subclass. To ease this process, DFJLinK and DFJCOSK need to use the same incremental Fock process.; 2. The incremental Fock formalism currently used by DirectJK and DFJLinK has a couple of extra bells and whistles that DFJCOSK does not have - mainly, the ability to recompute the full Fock matrix every couple of iterations and the ability to disable incremental Fock construction entirely past a specific convergence threshold. These bells and whistles can greatly improve the convergence capabilities of the calculation, while ""normal"" IncFock implementations without these bells and whistles run the risk of greatly increasing the number of SCF iterations needed to converge. This issue is meant to be addressed with https://github.com/psi4/psi4/pull/2682; however, the introduction of DFJLinK to the JK hierarchy has potentially changed how that PR should be handled. This PR addresses both of the above issues by changing DFJLinK to use the same incremental Fock formalism as DFJCOSK. Using the DFJCOSK incremental Fock formalism is preferred because DFJCOSK stores fewer matrices in the DFJCOSK class for incremental Fock usage, reducing memory requirements from a practical perspective, and lowering the amount of state contained in DFJLinK from a code design perspective. In standardizing the DFJLinK and DFJCOSK incremental Fock processes, the next CompositeJK PR will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:1305,risk,risk,1305,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['risk'],['risk']
Safety,"kage supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and not in a release (discussion at [MR 61](https://gitlab.com/libxc/libxc/issues/61)).; * I've prepared a 4.2.3 + !67 + windows PRs + build PRs branch described [here](https://gitlab.com/libxc/libxc/issues/61#note_128653141) that works works with Psi and doesn't have any of the Maple changes. (Indeed, if I build #1101 against libxc master, it links and runs but I see a lot of numerical problems, so avoiding the ongoing libxc work is probably a good idea.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:2400,avoid,avoiding,2400,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,1,['avoid'],['avoiding']
Safety,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2413,detect,detection,2413,https://psicode.org,https://github.com/psi4/psi4/issues/537,2,['detect'],"['detect', 'detection']"
Safety,"l Fock process across the current integral-direct JK algorithms present in Psi4. However, this PR stands somewhat in contrast to https://github.com/psi4/psi4/pull/2682 and https://github.com/psi4/psi4/pull/2792. In those PRs, their IncFock schemes were adapted to use that of DFJCOSK, without removing the bells and whistles of their IncFock implementations (e.g., recomputing the full Fock matrix every so often, disabling IncFock after a given convergence threshold). In contrast, DFJCOSK is the template IncFock upon which the two previous PRs were based; however, DFJCOSK does not have the IncFock bells and whistles that DirectJK and DFJLinK had. Unmitigated, the incremental Fock procedure can actually significantly increase the number of SCF iterations needed to converged; and the IncFock bells and whistles in DirectJK and DFJLinK notably mitigate the effect of IncFock on SCF convergence counts. Without these bells and whistles, DFJCOSK runs the significant risk of excessive SCF iterations needed to converge when IncFock is enabled, an issue I have run into in my own calculations. This PR seeks to rectify the aforementioned issue by implementing the IncFock bells and whistles of DirectJK and DFJLinK into DFJCOSK. With these extra features, DFJCOSK can now recompute the full Fock matrix every n iterations, or disable IncFock past a given convergence threshold, at the will of the end user. These features can notably reduce the amount of SCF iterations needed to converge. This PR is also the continued effort to standardize IncFock among all integral-direct SCF algorithms in Psi4. With this PR, DirectJK, DFJLinK, and DFJCOSK will have effectively the exact same incremental Fock schemes, each featuring the lower memory usage of DFJCOSK's former IncFock scheme, and the bells and whistles of DirectJK and DFJLinK's former IncFock schemes. The final step to the IncFock standardization process, then, is the movement of the IncFock scheme of these algorithms into the base JK clas",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816:1280,risk,risk,1280,https://psicode.org,https://github.com/psi4/psi4/pull/2816,1,['risk'],['risk']
Safety,"l project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3234,avoid,avoid,3234,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['avoid'],['avoid']
Safety,"l. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1139,detect,detecting,1139,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"lar because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1697,detect,detection,1697,https://psicode.org,https://github.com/psi4/psi4/pull/615,2,['detect'],['detection']
Safety,"le ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds !; ! !; !----------------------------------------------------------------------------!; ```. However, this command r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:1121,Timeout,TimeoutExpired,1121,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['Timeout'],['TimeoutExpired']
Safety,lebedev_mapping_ access is thread-unsafe (and also never initialized?),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:34,unsafe,unsafe,34,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['unsafe'],['unsafe']
Safety,"led with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, 21 deselected in 80.60 seconds =============; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:4122,detect,detecting,4122,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,4,['detect'],['detecting']
Safety,"length in Eh. Options added to properties(‘ccsd’, properties=[‘polarizability’, ‘rotation’]): ; - local_method: `PNO`, `PNO++` and `CPNO++`; - local_pert: `DIPOLE`; - unpert_cutoff: double between 0 and 1. Pytest added to check the functionality at:; - Tcut=0 against the conventional CC code; - Tcut=1e-5 against hardcoded values. Some additional tweaks to existing code that were needed for me to run the simulation code:. - Under cclambda/ , L1_build and dijabL2 functions were outside of the CCLambdaWavefunction class, while L2 build functions were not. So I moved `L1_build`, `cc2_L1_build` and `dijabL2` into the class to make it more consistent and also to help run the simulation code. - cctransort/local.cc has an extra function to localize the occupied orbitals before the transformation of the one- and two-electron integrals. - Overloaded the schmidt_add_row function in libmints/matrix.cc in order to specify the cutoff value for vector norms to be discarded. - The ccenergy function that is called when Psi4 fails attempts to switch off the ‘ccenergy’ timer twice. The error was mentioned in issue #1864. And I see a new pull request that removes the line (#2150). I just commented out the line that was redundantly switching off the timer and that causes Psi4 to exit correctly when iterations fail to converge. - The psio_tocprint function under libpsio/psio.h didn’t match its definition in libpsio/tocprint.cc so I commented out the extra argument. ## Todos; - [x] Add simulation code to CCLR; - [x] Add tests; - [x] Remove the `WERNER` option completely, since it’s not implemented. ## Questions; - [ ] Old (non-working) code in ccenergy/ has been shifted to local_old.cc and Local_old.h, is it okay if I get rid of this code? There are also identical local.cc files under cclambda/ and ccresponse/ that are not needed. ## Checklist; - [x] Tests added for any new features; - [x] All or relevant fraction of full tests run. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2151:1824,redund,redundantly,1824,https://psicode.org,https://github.com/psi4/psi4/pull/2151,1,['redund'],['redundantly']
Safety,ler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is Intel 17.0.0.20160721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Inte,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:5546,Detect,Detecting,5546,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239050499:2011,avoid,avoid,2011,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499,1,['avoid'],['avoid']
Safety,ma.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsm,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5482,detect,detecting,5482,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:919,Abort,Aborted,919,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,1,['Abort'],['Aborted']
Safety,"me/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:2009,recover,recovers,2009,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['recover'],['recovers']
Safety,"my 2 cents on this:; The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly.; Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136:238,redund,redundant,238,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136,1,['redund'],['redundant']
Safety,"n 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1479,detect,detecting,1479,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"n Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.89217",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:3323,Abort,Aborted,3323,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Abort'],['Aborted']
Safety,"n core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:2342,avoid,avoid,2342,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['avoid'],['avoid']
Safety,"n fsdecode\n filename = fspath(filename) # Does type-checking of `filename`.\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n')); ```; From yml install; ```; Collecting package metadata (repodata.json): done; Solving environment: |; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:19<00:29, 3.66s/it]|Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental psi4: 57%|▌| 8/14 [00:22<00:10, \Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:02, 3.49Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:02, 3.71Examining conflict for matplotlib python: : 20it [01:07, 3.71s/it] failed -; Solving environment: /; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████▍ | 9/14 [00:30<00:24, 4.99s/it]|Examining conflict for geometric torsiondrive: 43%|███████████████▍ | 6/14 [00:16<00:10, 1.28s/it]\Examining conflict for matplotlib psi4 geometric torsiondrive: 86%|████████████████▎ | 12/14 [00:43<00:07, 3.92s/it]|Examining conflict for matplotlib psi4 geometric: 93%|█████████████████████████████▋ | 13/14 [00:47<00:04, 4.52s/it]/Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:06, 3.74Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:06, 3.94Examining conflict for matplotlib python: : 20it [01:11, 3.94s/it] failed /. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available version",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:4245,abort,abort,4245,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['abort'],['abort']
Safety,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:829,Detect,Detecting,829,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,2,['Detect'],['Detecting']
Safety,"nd11::is_method const&, pybind11::sibling const&, char const (&) [36])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #19 0x7f7ba5fdbbcd in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #20 0x564ef0ac8743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/libscf_solver/rohf.cc:590 in psi::scf::ROHF::Hx(std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>); Shadow bytes around the buggy address:; 0x0c06800375e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c06800375f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037610: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037620: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; =>0x0c0680037630: fa fa 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa; 0x0c0680037640: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037650: fa fa fa fa fa fa 00 00 00 fa fa fa fa fa fa fa; 0x0c0680037660: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037670: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037680: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==18335==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881:21395,ABORT,ABORTING,21395,https://psicode.org,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881,1,['ABORT'],['ABORTING']
Safety,"ne-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10 pin for docs build by adding to nitpick list; - [x] Avoid all the warnings about INSIST_FIND_PACKAGE_<pkg> and <pkg>_DIR unused user-spec variable warnings that could be unnerving.; - [x] Use a different way of detecting libdl for plugins that doesn't throw cmake warnings. lmk if there's any problems.; - [x] Patch over a sapt+windows+ecp bug described at #3072 so can test complete ecosystem; - [x] Add a plain `psi4 --psiapi` variation on `psi4 --psiapi-path` that can be used in `eval $(psi4 --psiapi)`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:4809,Avoid,Avoid,4809,https://psicode.org,https://github.com/psi4/psi4/pull/3021,2,"['Avoid', 'detect']","['Avoid', 'detecting']"
Safety,new python detection downstream,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2096:11,detect,detection,11,https://psicode.org,https://github.com/psi4/psi4/pull/2096,1,['detect'],['detection']
Safety,"ng libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2929,avoid,avoid,2929,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['avoid'],['avoid']
Safety,"nt atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Ques",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:11711,safe,safe,11711,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['safe'],['safe']
Safety,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1686,detect,detection,1686,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['detect'],['detection']
Safety,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1691,Abort,Aborted,1691,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,2,"['Abort', 'abort']","['Aborted', 'aborted']"
Safety,nu++98 -mkl=parallel -openmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -openmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -openmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:5663,Detect,Detecting,5663,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"nually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libraries) to set library folder path.; Then, Intel Compiler + Intel OMP libraries works even single thread calculation for dft-custom-gga test. Anyway, I am not sure why on",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:1065,Abort,Aborted,1065,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['Abort'],['Aborted']
Safety,"nutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new version of QCEngine are a prereq.; - [x] https://github.com/qcdb/qcdb/pull/57 is associated QCDB PR (psi4 PR is a prereq to it); - [ ] TODO full stdsuite in the presence of MRCC will have a couple faults of the ""not NYI"" variety after the MRCC defaulting logic switch from Q. I haven't decided how to remedy this, but it's unlikely to be hit, so I'll defer. ## Questions; - [ ] My version of Psi4+MRCC doesn't run CC2. Anyone else see this? (Just curious, not really needed for PR.); - [ ] I don't think the original module authors will find issues, but if you want to look over pertinent docs and capabilities tables, please do so.; - [x] [ADDED from #2737 For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to set qc_module=mrcc|adcc|chemps2 ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. @maxscheurer prefers not requiring (2). In this PR, I just switched MRCC syntax to yes require (2). That was in keeping with the user opt-ing in via energy(""mrccsd""). I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment. EDIT: ok, MRCC can be a default. above section edited. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:13820,detect,detectable,13820,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['detect'],['detectable']
Safety,"o untangle this, I started from master, cherry-picked the dfocc2 commits, cherry-picked the #2354 commits, modernized the DIIS calls, then added the neglected stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing: OO ROHF was printing and setting wrong plain MP2 energies, OMP3 & OMP2.5 wasn't setting right `Wfn.energy_`, stop setting ROHF MP3 and MP2.5 out of caution.; - [x] tightened the min rms_mograd_convergence from 6.0 to 6.5 so that stdsuite (3 mol/basis sets) could reliably compute energies, gradients, and findif gradients to 1e-6. ## Questions; - [x] sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. @b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:1629,risk,risk,1629,https://psicode.org,https://github.com/psi4/psi4/pull/2653,1,['risk'],['risk']
Safety,odule libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_optio,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6320,detect,detecting,6320,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,odule pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6496,detect,detecting,6496,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"oost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. compilation aborted for /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc (code 2); src/lib/libmints/CMakeFiles/mints.dir/build.make:583: recipe for target 'src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o' failed; make[2]: *** [src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o] Error 2; CMakeFiles/Makefile2:1861: recipe for target 'src/lib/libmints/CMakeFiles/mints.dir/all' failed; make[1]: *** [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ```. With the GNU compiler (g++ (Ubuntu 5.2.1-22ubuntu2) 5.2.1 20151010) it works fine. I'm just warning because many HPCs prefer the intel compiler and you might want to provide support. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:15226,abort,aborted,15226,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['abort'],['aborted']
Safety,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-127808983:12,abort,aborting,12,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983,2,"['abort', 'redund']","['aborting', 'redundant']"
Safety,"ortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log"". Howevewer, there is no file /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/CMakeFiles/CMakeOutput.log and no directory objdir at all.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:16015,Detect,Detecting,16015,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:9462,detect,detection,9462,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['detect'],['detection']
Safety,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3855,detect,detection,3855,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['detect'],['detection']
Safety,p2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4329,detect,detecting,4329,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,p2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install pac,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6049,detect,detecting,6049,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4858,detect,detecting,4858,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:3617,detect,detect,3617,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['detect'],['detect']
Safety,"per. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"" in `libmints/matrix.cc` (`Matrix::diagonalize`); - [x] Check that all requested roots converge in the `libqt` Davidson solver used by `adc/prepare_tensors.cc`; - [x] Mark the return value of the `libqt` Davidson solver as `[[nodiscard]]` to force callers to check how many of the requested roots actually converged. ### Unrelated fixes; - [x] Fix a memory leak in the ROHF stability check. **(merged: #2671)**. ### Changes to comments, formatting, etc.; - [x] Fix typos in comments in `adc/diagonalize.cc` and `occ/dpd.h`; - [x] clang-format some files; - [x] Delete some empty lines between doc-comment-blocks and the function definitions so that VSCode can parse the docstrings automatically. (eg. d8cd1b9fee1422ebd10173010e4aa0b7a046335d ); - [x] Use the more generic ""LAPACK"" as a term, instead of MKL/ACML/etc. when referring to the linear algebra library in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:3701,sanity check,sanity checks,3701,https://psicode.org,https://github.com/psi4/psi4/pull/2642,4,['sanity check'],"['sanity check', 'sanity checks']"
Safety,"per](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital response or the exact form of the conjugate gradient equation to be solved. The caller code should be able to compute the PDMs however they want, with just a link to the relevant paper in the comments. ## Open Questions; * @dgasmith, what do you need to get MP2 RDM information passed to double hybrid functionals (#1333)?; * Crawford group in general, how willing are you to adapt the CC gradients to the new style of gradients?; * What is the fate of CI gradients? These were operational in Psi3 but were not hooked back up to Psi4. This means that at present, Psi can't even do CASSCF gradients. I believe this is enough of an issue for @fevangelista that he was playing with getting these hooked back in.; * Do we want to allow blocks to only include the correlation density but not the reference density? This is simple enough for a Hartree-Fock reference but does introduce ambiguity for other references, e.g., if MR-DSRG wants the gradient code to add a CAS reference to its correlation density.; * Is there some inherent problem with Psi's 3-index tensor technology that would have forced Ugur to use his own tensor classes? I'm not familiar with 3-index manipulations.; * One of the other major problems with the current approach to gradients is prefactors. When writing different blocks of the gradient code to `libiwl`, there's a prefactor you need for different blocks. At present, the needed prefactor seems completely random. I'd _like_ to figure out the origin of these prefactors and determine if there's a way to make them saner, or at least documented. I'll get to this when I've recovered, but if anybody has any knowledge about this, let us know! This issue will be especially important for _spin-restricted_ gradients.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:8475,recover,recovered,8475,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['recover'],['recovered']
Safety,perhaps wise to make a test that loops through all names in dashparam to see; if psi4 knows the functional name. Especially the exotic ones that are not regularly used.; Is there a smart way to avoid a calculation? . Just now found these:. - mpwp91 -> mpwpw; - mpw1pw91 -> mpw1pw,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996:194,avoid,avoid,194,https://psicode.org,https://github.com/psi4/psi4/issues/996,1,['avoid'],['avoid']
Safety,"plugins on windows could be pursued, but they're not in demand. presently failing on OpenMP detection in plugin cmake configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229:92,detect,detection,92,https://psicode.org,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229,1,['detect'],['detection']
Safety,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10387,Detect,Detecting,10387,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['Detect'],['Detecting']
Safety,"recipies repo ( before the boost recipe was upgraded to 1.60.0). Installed in `$HOME/anaconda/envs/psi4-py2.7` ; - Hombrew boost 1.60.0 installed in `/usr/local/Cellar` and linked by hombrew to `/usr/local`; - I am using CMake 3.2.2; ## Problem:; 1. If I pass the setup args `--boost-libdir/incdir` or the CMake flags `DBOOST_INCLUDEDIR/LIBRARYDIR` ; CMake will report boost version 1.59.0, but actually only set the `INCLUDE` paths correctly, and the `LIBRARY` paths all point to the binaries for 1.60.0 leading to errors in the linking step. ; 2. If I `brew unlink boost` then FindBoost.cmake seems to find boost 1.59.0 as I intended, but then the `Boost_FOUND` variable is ignored and the pre-packaged boost 1.55 is configured to build anyway. ; ## Details/Examples. If I run this setup command:. ```; ./setup --prefix=$HOME/psi4-install \; -DBOOST_INCLUDEDIR=$HOME/anaconda/envs/psi4-py2.7/include \ ; -DBOOST_LIBRARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //Boost python library (debug); Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_python-mt.a; ```. If I unlink the home-brew boost in `/usr/local` and run the same setup the custom boost is configured to build. . adding the flags `-DBoos",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:1244,detect,detected,1244,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['detect'],['detected']
Safety,removed redundant code in rhf hessian test file,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/894:8,redund,redundant,8,https://psicode.org,https://github.com/psi4/psi4/pull/894,1,['redund'],['redundant']
Safety,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:2693,Predict,Predicting,2693,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['Predict'],['Predicting']
Safety,"ring the HF energy of the first Brueckner iteration as `SCF TOTAL ENERGY` and the quantities from the final B iteration as `CCSD TOTAL ENERGY`, `CCSD(T) TOTAL ENERGY`, and `(T) CORRECTION ENERGY`. In the below, I've reworked it so:; * final B energies get their own qcvars `(BCCD|BCCD(T)) (TOTAL|CORRELATION) ENERGY` in accordance with the principle that `energy(mtd)` should set `mtd TOTAL ENERGY`; * MP2 and CCSD qcvars are now collected from the first B iteration, not the last, so they have canonical values. `SCF TOTAL ENERGY` still from first B iteration.; * `(BCCD|BCCD(T)) CORRELATION ENERGY` now defined as total E of last B iteration minus HF of first B iteration. This is in accordance with the pattern that `mtd CORRELATION ENERGY` = `mtd TOTAL ENERGY` - `SCF TOTAL ENERGY`, but it is admittedly wacky when applied to Brueckner. It is, however, the same way the orbital-optimized methods of occ/dfocc have been handled. The OO methods additionally set a `mtd REFERENCE CORRECTION ENERGY` so that one can recover the ref/corl split of the final OO iteration. That could be added to the BCCD methods. Does the above sound ok, or does it need further reworking? I also tightened up the B r_conv formula a bit because the standard tests (not shown in PR) weren't matching (to 1.e-6) the highly converged values under default conditions (e_conv = 6 --> brueckner_r_conv =4). I've also been on a rampage of late to better (and automatically) document what methods are available under what detailed conditions (e.g., dertype, reference, conv/df/cd type, all-electron/frozen-core). I'd like to add the table snapshotted below to the main [CC docs page](https://psicode.org/psi4manual/master/cc.html). Unfortunately, it doesn't cover excited states or properties, so it can't replace the existing summary table, but it does provide more detail. Does it look ok, and are there any cc* capabilities in the ground-state realm that I've missed?. **Note:** No worries if the CI on this fails. I've copi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708:1135,recover,recover,1135,https://psicode.org,https://github.com/psi4/psi4/pull/2708,1,['recover'],['recover']
Safety,"rmation of that final target, it first calls FindMathOpenMP that depending on compiler & isMKL=T/F & ENABLE_OPENMP=T/F, sets some stuff to guide FindTargetOpenMP. FindTargetOpenMP calls ordinary FindOpenMP provided by cmake which will return a flag-and-libs containing target from modern cmake or this is constructed in-file as compensation for old cmake. That target (which might or might not be present depending on if OpenMP is enabled or found for compiler) is passed back to FindMathOpenMP which links to it if present but _always_ returns a `tgt::MathOpenMP`. This target may be dummy if there's no OpenMP enabled and the BLAS & Compiler need no mods. Or it may contain modifying flags and libs demanded by BLAS, plus the cmake-like `OpenMP::OpenMP_CXX`. In any case, `tgt::MathOpenMP` is suitable for the OpenMP part of `tgt::lapack`.; - As far as exported targets, still just the BLAS is exported. OpenMP is re-detected at `find_package(TargetLAPACK)`-time, since what it acts upon (isMKL (from target), CMAKE_CXX_COMPILER_ID, and ENABLE_OPENMP) are fundamentally variable in calling pkg.; - Consequence is that psi4/src/core.cc and plugins which have been getting their openmp flag from CMAKE_CXX_FLAGS, now have to be linked to `tgt::lapack` (former) and have ENABLE_OPENMP passed & linked to `tgt::MathOpenMP` (latter).; - Works on Linux GCC & ICPC and cmake 3.3 & 3.11. ## Questions; - [x] @robertodr and @bast, I'd really appreciate your impressions as to whether this is a good way forward. For reference, here are some target printouts. Intel + MKL + cmake 3.3. ```; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-qopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/home/psilocaluser/toolchainconda/envs/p4dev36/lib/libiomp5.so;/usr/lib64/libpthread.so""; Properties for TARGET tgt::MathOpe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:3363,detect,detected,3363,https://psicode.org,https://github.com/psi4/psi4/pull/1031,1,['detect'],['detected']
Safety,rollback detect dynamic Boost,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/425:9,detect,detect,9,https://psicode.org,https://github.com/psi4/psi4/pull/425,1,['detect'],['detect']
Safety,"ror logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:1485,detect,detection,1485,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['detect'],['detection']
Safety,"rray_to_vector(int n, const int* array)` to initialize some of its `std::vector<int>` members by copying the innards of `Dimension` objects. Unfortunately this is happening through the rather inelegant mechanism of implicitly calling `Dimension::operator const int*() const`, which is set to be removed eventually. This PR replaces all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization. Now, this could in theory lead to a change in behavior, as the former only copies the first `n` elements of the array inside the Dimension object instead of the entire thing, but in practice that does not seem to be happening. As far as I can tell, for trouble to happen it would require an internally inconsistent `Wavefunction` object or `libmoinfo` trying to use only a subset of the irreps. Nevertheless, I have added checks to ensure that any condition that would lead to an unpredictable change in behavior after this PR, results in a crash instead. I don't think it should ever happen, but internal consistency checks are probably not a bad idea anyways. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] None. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace all calls of `convert_int_array_to_vector` in `libmoinfo` with simple assignment-initialization; - [x] Add internal consistency checks to guard against possible hazards; - [x] Remove now-unused function `MOInfoBase::convert_int_array_to_vector`. ## Questions; - If everyone else is confident that the checks are redundant I _could_ remove them. ## Checklist; - [x] No new features; - [x] No new errors in the full test suite. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3177:1894,hazard,hazards,1894,https://psicode.org,https://github.com/psi4/psi4/pull/3177,2,"['hazard', 'redund']","['hazards', 'redundant']"
Safety,"rtantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are in the same directory as the file they are included in and are fine for now). The reason for this is we want to transition to a modular nature and it is easiest for the users of these modules if they only have to specify the Psi4 include directory as an include and not each subdirectory of it. Note that this is how nearly every professional C++ library I am aware of does this (Boost, Eigen, TBB, ...). The second (and arguably better reason) is doing it any other way makes the superbuild a lot harder when something is staged.; ## No More Convenience Headers. Convenience headers, like `mints.h` are evil. If they exist (like in many professional libraries) they are to be used by your users only. The primary reason for avoiding them is that they increase compile times. This is one of the primary reasons you had to recompile half of Psi4 when changing most files. Lesser reasons:; - Harder to know exactly what you brought in (people duplicated the contents of `mints.h` all over the place). ; - Can destroy distinction between interface/implementation classes if done incorrectly; - Splitting the header is a nightmare (as I can attest to) and is required if code gets factored, which really should happen to mints.; ## Removed psiconfig.h. The macros in it are easily replace by CMake's `add_definitions` function and doing so clears up the macro namespace considerably. Furthermore a lot of those macros weren't even being used.; ## Static vs. Shared Psi4 Core libraries. CMake provides the variable `BUILD_SHARED_LIBS` to toggle this. We weren't respecting this and have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6022,avoid,avoiding,6022,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['avoid'],['avoiding']
Safety,"ry and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1754,Detect,Detecting,1754,https://psicode.org,https://github.com/psi4/psi4/issues/516,4,['Detect'],['Detecting']
Safety,"s are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is _heavy_, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 packa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2485,detect,detect,2485,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['detect'],['detect']
Safety,"s that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105040869.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:2295,safe,safe,2295,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,1,['safe'],['safe']
Safety,"s, and one ecosystem file~; - [x] removed all the `LGTM_SRC` stuff since it's defunct and all the ""CHOOSE"" stuff, since a master L2 won't work anymore b/c need the shg order switching.; - [x] finishes the job of fully C++17 from #2392 . Newest Intel compilers from 2023.0 oneapi (versions icpc 2021.8 and icpx 2023.0) are ok with Libint2 and C++17. For older Intel, there's a keyword `psi4_CXX_STANDARD_Libint2` that can be reset to 14.; - [ ] pull together accumulated xhost changes (hiccup here is that `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a select few boost headers. In building the L2 package, one can either ask L2 to copy those few files in to `include/libint2/boost/` (that is, vendor boost) or not, effectively passing the problem along to the consumer (psi). In my own conda packages for L2, I did the former, so psi didn't need any boost. For the c-f L2 packages, I figured it was better practice to not vendor, hence the ""new"" dep. It's header-only, not boost::python or any of the boost compiled libs, so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:2325,detect,detected,2325,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['detect'],['detected']
Safety,s.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcsche,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15611,detect,detecting,15611,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,s/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_ad,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3989,detect,detecting,3989,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:6205,detect,detected,6205,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['detect'],['detected']
Safety,s\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13348,detect,detecting,13348,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"save one-electron ints in wfn so that (1) not writing to disk, thus freeing SCF from disk and thread-safety issues, and (2) better carry around external potentials btwn modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-473124434:101,safe,safety,101,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-473124434,1,['safe'],['safety']
Safety,"shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [59])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #22 0x7fb0da7c0ae5 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #23 0x7fb0e963f08c in _PyCFunction_FastCallDict Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/psi4.git/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc:209 in psi::IntegralTransform::presort_so_tei(); Shadow bytes around the buggy address:; 0x0c3080047fa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c3080047ff0: 00 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa; 0x0c3080048000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c3080048010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080048020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080048030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080048040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==16127==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861:15795,ABORT,ABORTING,15795,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861,1,['ABORT'],['ABORTING']
Safety,si4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom ==,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4355,detect,detecting,4355,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,si4.py::test_psi4_cc PASSED [ 81%]; 2018-12-05T15:54:39.2671697Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cas PASSED [ 86%]; 2018-12-05T15:55:14.7785164Z ..\lib\psi4\tests\test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; 2018-12-05T15:55:32.0037962Z ..\lib\psi4\tests\test_psi4.py::test_psi4_sapt PASSED [ 95%]; 2018-12-05T15:55:39.8034520Z ..\lib\psi4\tests\test_psi4.py::test_psi4_scfproperty PASSED [100%]; 2018-12-05T15:55:39.8037151Z =========================== short test summary info ===========================; 2018-12-05T15:55:39.8038147Z SKIP [1] lib\psi4\tests\test_addons.py:43: Psi4 not compiled with gdma. Rebuild with -DENABLE_gdma; 2018-12-05T15:55:39.8039347Z SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3140,detect,detecting,3140,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety,si4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if n,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2869,detect,detecting,2869,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,si4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addon,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3647,detect,detecting,3647,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,si4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13667,detect,detecting,13667,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,si4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5779,detect,detecting,5779,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"so the environment is solvable on Linux:; ```conda create -n amber ambertools=20.9 python=3.7 blas=*=mkl gau2grid psi4/label/dev::libxc psi4/label/dev::psi4=1.4a2.dev1058 -c conda-forge -c defaults -c psi4/label/dev```. on Mac, I agree that `libgfortran` is the problem. it comes about b/c conda-forge pins on gfortran v4 and defaults on gfortran v3 (then there's various soversions and libgfortran versions, too). once upon a time, the pinning that was applied by run_exports was >3.0.1, but that's been narrowed to >3.0.1,<4.0.0 . there's still some old add-on packages with the former, so if I suppress the libgfortran pinning on psi4 itself (psi4=1.4a2.dev1084 for py37 at https://anaconda.org/psi4/psi4/files), then I can get an environment to solve with it and ambertools=20. of course, then the libgfortran.3.dylib is missing, but if I symlink (!) that to libgfortran.4.dylib, I can get some psi4 test cases to pass (gdma fails to load lib, while some dft is off a bit). altogether, not a satisfactory or safe fix. and libxc is both required and fortran, so I can't just build you a non-fortran psi4. so unless I think of something else, I think you just can't mix fortran dependencies when compiled against a mix of c-f and defaults pinnings. sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014:1012,safe,safe,1012,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014,1,['safe'],['safe']
Safety,"software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(158): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::reference reference;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:14079,detect,detected,14079,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1046,Detect,Detecting,1046,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,8,['Detect'],['Detecting']
Safety,"sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:3041,detect,detected,3041,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['detect'],['detected']
Safety,"sr/lib64/libutil.so; -- Found libm: /usr/lib64/libm.so; -- Found librt: /usr/lib64/librt.so; -- Found libdl: /usr/lib64/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /usr/bin/python2.6 (found version ""2.6.6""); -- Found PythonLibs: /usr/lib64/libpython2.6.so (found suitable exact version ""2.6.6""); -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread, mpi; -- Toolset to be used: intel-linux; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- DKH in LibMints ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. ---. The full out from the ./setup for the 0.3 release with the intel/13.1.0 compiler is:. ./setup --cc mpicc --cxx mpicxx --fc mpif77 --prefix /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 --omp --mpi --mkl parallel --cmake ~/bin/cmake/bin/cmake; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/cmake/bin/cmake -DCMAKE_Fortran_COMPILER=mpif77 -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DENABLE_MPI=ON -DENABLE_SGI_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:8835,Detect,Detecting,8835,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,ssary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3135,detect,detecting,3135,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"st libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2661,detect,detect,2661,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['detect'],['detect']
Safety,st_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15445,detect,detecting,15445,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"stead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; ...; -- Using CheMPS2: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libchemps2.so.2 (version 1.8.3); -- Using dkh: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libdkh.so (version 1.2); -- Using libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (version 1.3.0); -- Using Libxc: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libxc.so (version 3.0.0); -- Disabled erd; -- Us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2722,Detect,Detecting,2722,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,2,['Detect'],['Detecting']
Safety,"structure of `qcdb.molparse` (or `qcel.molparse`) which now handles Molecule I/O; ```; def from_arrays(**arrays):; validate_and_type ...; construct_molrec_dictionary ...; return molrec. def from_string(str):; parse ...; return from_arrays(**arrays). def from_schema(schema_dict):; process ...; return from_arrays(**arrays). def to_string(molrec, dtype):; format_by_dtype ...; return str. def to_schema(molrec, dtype):; depending_on_schema_flavor_dtype_rearrange_and_remove_fields ...; return dict; ```. then proper objects like `qcdb.Molecule` and `psi4.core.Molecule` can hook in through; ```; class Molecule():; def to_dict(self):; convert_object_structure_into_molrec ...; return molrec. @classmethod; def from_dict(cls, molrec):; construct_object_from_molrec_contents ...; return mol. @staticmethod; def from_string(str):; molrec = molparse.from_string(str); return Molecule.from_dict(molrec). def to_string(self, dtype):; return molparse.to_string(self.to_dict(), dtype=dtype). @staticmethod; def from_arrays(**arrays):; molrec = molparse.from_arrays(**arrays); return Molecule.from_dict(molrec). def to_schema(self, dtype):; return molparse.to_schema(self.to_dict(), dtype=dtype); ```. The above is more detailed than you need, but it's about time I wrote it down. By external function, I just meant one that returns your findif dictionary. If you want to keep arrays as numpy structures, then can have a flag that does or does not call `unnp` (or similar) and things that are destined for a JSON file (like a `to_schema()` call) can be sure to use `to_dict(np_out=False)` while internal calls can do `to_dict(np_out=True)`. I suggest it merely as a way to avoid lots of `np.array(inp)` and `to_list`s. And keep in mind that the above structure is necessary b/c the ""molrec"" psi4 internal repr dict isn't quite the same as the QCSchema dict, so some translation necessary. Possibly you can avoid that complication. This answer is more background than specifics. Glad to talk the latter instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-429944965:1696,avoid,avoid,1696,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-429944965,2,['avoid'],['avoid']
Safety,sts\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if neces,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13833,detect,detecting,13833,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,sweeeet: ; `psi4-path-advisor --intel`; ```; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:706,Detect,Detecting,706,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,4,['Detect'],['Detecting']
Safety,"t (&) [65])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #24 0x7f70032fcbc5 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #25 0x557a4165f743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:720 in __interceptor_memmove; Shadow bytes around the buggy address:; 0x0c04800fc760: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc770: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fa; 0x0c04800fc780: fa fa fd fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc790: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc7a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fa; =>0x0c04800fc7b0: fa fa fd fa fa fa 00[fa]fa fa fd fa fa fa fa fa; 0x0c04800fc7c0: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc7d0: fa fa fa fa fa fa fa fa fa fa 00 fa fa fa fd fa; 0x0c04800fc7e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc7f0: fa fa 00 fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc800: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==1078==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:21378,ABORT,ABORTING,21378,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['ABORT'],['ABORTING']
Safety,"t a dangling sym link or anything like that).; `$ cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DOpenMP_CXX_LIBRARY_DIRS=opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/`; gives:; ```. -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX"". -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396744575:1415,Detect,Detecting,1415,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396744575,1,['Detect'],['Detecting']
Safety,"t get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Change Mac math precedence to `MKL SYSTEM_NATIVE OPENBLAS ESSL ATLAS ACML` so native accelerate only behind MKL; - [x] New mechanism to pass in math libs explicitly through `LAPACK_LIBRARIES` and `LAPACK_INCLUDE_DIRS`; - [x] Collects all the addon libraries into a list, then forms RPATH of internal (relative to ORIGIN), then all non-static, non `/usr/` paths. Redundancy removed and math libs paths _always_ first. This takes over from `INSTALL_RPATH_USE_LINK_PATH`.; - [x] Bumped CMake minimum version to 3.2; - [x] Added some extra badges to README. ## Questions; - [x] I had already implemented the isMKL? detection in ConfigMath before I looked back and found [mkl testing] (https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174). Do we want to do that way instead? Who added the ""NEEDS"" there? _From discussion below, No, bad idea._; - [x] @robertodr and/or @bast, I've commented out all the EXPLICIT_LIB and EXTERNAL_LIB stuff from ConfigMath because the new CMake scheme isn't doing anything with those libs, and the TargetLAPACK uses only `BLAS/LAPACK_LIBRARIES`. But we do need a way to take in a raw library string. By inclination, I would just have that if user specifies `BLAS/LAPACK_LIBRARIES`, then those get processed immediately into the TargetLAPACK. But I thought I'd see if you had other/opposing opinions. _From di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:2616,Redund,Redundancy,2616,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['Redund'],['Redundancy']
Safety,"t has already been patched into c-f builds as of v1.8.2 `_1`. ## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] test py312 where possible (mac py312 works, but to keep testing legacy qcfractal (until psi4 v1.9), need to stick with py39); - [x] switch azure windows to miniforge, so it doesn't spend 18m switching default channels and doing the solve to get mamba. (note that this isn't a weakness of miniconda (which has packaged conda and mamba since this summer) but of the age of the miniconda on chocolatey vs the age of the miniforge.; - [x] tested the new qcfractal 0.51 and found that (1) there's a snowflake threading bug that Ben has since fixed (unreleased) and (2) there's a new space-saving step on qcfractal, so psi4 driver needs to regenerate qcvars info for distributed driver thru qcf runs (fixed here).; - [x] on py312 on windows, there's a change in `shutil.which` that affects us through qcel. currently patched, but awaiting a new release there.; - [x] py312 starts visible SyntaxWarning about non-escaped special characters (like '\n' newline or '\b' bell) and unfortunately, they abound in Windows paths. Further unfortunately, the error detection in the new version parsing for psi4 in qcengine (implemented to avoid those ""[-1] index is not accessible"" means ""pull psi4 tags or otherwise fix version"" errors) springs into defense and thinks a clean psi4 isn't present. So, let's convert possible filepaths to raw strings so no confusion with special chars. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3049:1490,detect,detection,1490,https://psicode.org,https://github.com/psi4/psi4/pull/3049,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"t set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdr3o6Z-YaJeCQ901ywG8eMHjO8c5ks5taBxDgaJpZM4Qhais>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:1633,safe,safe,1633,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,1,['safe'],['safe']
Safety,"t&, char const (&) [47])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #9 0x7f356be2bb8d in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #10 0x556f522e2743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1036 in __interceptor_write; Shadow bytes around the buggy address:; 0x0c068005b3a0: fa fa fa fa fa fa fa fa fa fa fd fd fd fd fa fa; 0x0c068005b3b0: fd fd fd fd fa fa fd fd fd fd fa fa fa fa fa fa; 0x0c068005b3c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fd; 0x0c068005b3d0: fd fd fa fa 00 00 00 fa fa fa fa fa fa fa fa fa; 0x0c068005b3e0: fd fd fd fd fa fa 00 00 00 fa fa fa fa fa fa fa; =>0x0c068005b3f0: fa fa fa fa fa fa fa fa 00 00 00[fa]fa fa 00 00; 0x0c068005b400: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa; 0x0c068005b410: 00 00 00 fa fa fa 00 00 00 fa fa fa fa fa fa fa; 0x0c068005b420: fa fa fd fd fd fd fa fa fd fd fd fa fa fa fa fa; 0x0c068005b430: fa fa fa fa fa fa fa fa fa fa fd fd fd fd fa fa; 0x0c068005b440: fa fa fa fa fa fa 00 00 00 fa fa fa 00 00 00 fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10585==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133:11767,ABORT,ABORTING,11767,https://psicode.org,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133,1,['ABORT'],['ABORTING']
Safety,"t>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existing CIWavefunction class to overtake the whole implementation of the CC functionality.; * The class will manage MOInfo,Params, DPD as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; * The class will contain the various steps in a CC calculation as methods.; * Move from tstart-tstop to the new timers timer_on-timer_off. DPD Library. * Remove use of static global machinery from DPD member functions.; * Implement proper copy/move assign/construct for the DPD object.; * Implement internal structs with proper constructors as needed.; * Replace c-style arrays/raw pointers with appropriate smart pointer/containers; * Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s).; * Note: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; * Insert a layer of abstraction between DPD and psio. (slated for deprecation/replacement). For visibility: @lothian<https://github.com/lothian> @CDSherrill<https://github.com/CDSherrill> @andysim<https://github.com/andysim> @jturney<https://github.com/jturney> @fevangelista<https://github.com/fevangelista> @dgasmith<https://github.com/dgasmith>. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9Qdt-9Cic7AcHOMo2bMq1iF3Nyc5FZks5uc6dJgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:2989,safe,safe,2989,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['safe'],['safe']
Safety,t_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psic,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537:1858,Timeout,Timeout,1858,https://psicode.org,https://github.com/psi4/psi4/pull/2537,2,['Timeout'],['Timeout']
Safety,tecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschem,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15948,detect,detecting,15948,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"tered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the matrix central to the observed error) to be able to handle positive grid weights. . ## Checklist; - [X] Tests added f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:1097,sanity check,sanity check,1097,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['sanity check'],['sanity check']
Safety,"testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454:3291,avoid,avoid,3291,https://psicode.org,https://github.com/psi4/psi4/pull/2454,1,['avoid'],['avoid']
Safety,tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2700,detect,detecting,2700,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14314,detect,detecting,14314,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14632,detect,detecting,14632,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1345,detect,detected,1345,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,3,['detect'],"['detect', 'detected']"
Safety,thread pool: fix unsafe variable change,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/20:17,unsafe,unsafe,17,https://psicode.org,https://github.com/psi4/psi4/pull/20,1,['unsafe'],['unsafe']
Safety,"tions from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the matrix central to the observed error) to be able to handle positive grid weights. . ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:1453,avoid,avoid,1453,https://psicode.org,https://github.com/psi4/psi4/pull/2906,2,"['avoid', 'sanity check']","['avoid', 'sanity checks']"
Safety,"tives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY` in C++ where available.; - [x] Fixes up the conventional CCSD qcvars in ccenergy, including closes #1702 ; - [x] Fixes up CD/DF-CCSD qcvars in fnocc, dfocc; - [x] Moves qcvars in fnocc from P::e.globals to wfn; - [x] Adds fc/ae aspects to managed method for gradient mp2. Old behavior for fc conv mp2 grad was to stop with an informative message. New behavior is to hop into finite difference. Users who definitely want to avoid finite difference for compute time or accuracy should run `gradient(..., dertype=1)` to get psi to stop instead. ## Questions; - [ ] ~Organization of tests is not finalized. qcng does 6 tests per method (r/u/ro x ae/fc) (https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/test_standard_suite_ccsd.py), which is nice, but in psi, it's nice to keep all the modules together. I'm undecided.~; - [ ] @JonathonMisiewicz, did you ever get the impression that `pcg_convergence` should be tighter in dfocc? Present setting 1.e-6 doesn't converge gradients to 6 digits. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review - most of the new tests are skipped pending https://github.com/MolSSI/QCEngine/pull/238; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:2512,avoid,avoid,2512,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['avoid'],['avoid']
Safety,"tl;dr Psi4 itself needs no changes for numpy v2, but its runtime major version does need to match the compile-time major version. Current conda-package v1.9.1 with _1 needs to be used in a np v1 env. I'll rebuild a _2 soon that can be used with np v2. longer:; Numpy v2 is up on conda-forge and so may show up in an environment near you. The situation wrt psi4 is that it needs either v1 or v2 depending on what it was compiled against. So:. * the conda package -- AVOIDABLE PROBLEM, this is compiled against numpy v1, so constrain your env. I'll do a new build against v2 after qcel is ready.; * an old objdir compiled against a v1 numpy -- no problem, just don't let any new conda commands update the env to v2 numpy. use `numpy=1* -c conda-forge` in any `conda update` or `conda install` commands.; * a fresh objdir where the numpy is v2 -- no problem, psi4 compiles just fine. Might need https://github.com/MolSSI/QCElemental/pull/338; * an old objdir compiled against a v1 numpy that now sees a v2 numpy at runtime -- PROBLEM, see signature below. downgrade the numpy with `conda install numpy=1 -c conda-forge`. The symptom of an incompatible psi4+numpy is the following. ```; !----------------------------------------------------------------------------------!; ! !; ! Following atoms are too close: [(0, np.int64(1), np.float64(0.0)), (0, !; ! np.int64(2), np.float64(0.0)), (1, np.int64(2), np.float64(0.0))] !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184:465,AVOID,AVOIDABLE,465,https://psicode.org,https://github.com/psi4/psi4/issues/3184,1,['AVOID'],['AVOIDABLE']
Safety,to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11_regex/CMakeFiles/CMakeTmp/cmTC_a8cfe; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11_regex/CMakeFiles/CMakeTmp/Debug/cmTC_a8cfe; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11_regex/CMakeFiles/CMakeTmp/Development/cmTC_a8cfe. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -mkl=parallel -qopenmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /o,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:11036,detect,detection,11036,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['detect'],['detection']
Safety,trict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -qopenmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -qopenmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- dec,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:12299,Detect,Detecting,12299,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,"tropy agrees completely; - NWChem 6.6; - For default isotope H2O, we agree completely; - For _any_ non-default isotope D2O, HDO, DTO; - trans entropy disagrees since the total molecular mass is not recomputed.; - rot entropy disagrees since the symmetry number is not updated. And it disagrees with Q-Chem and Molpro (which also don't update the symmetry number) presumably because by not updating the molecular mass they also don't update the MOI.; - For all isotopologs, vib entropy agrees completely. So, @psi-rking, @jturney, and any others with thermo experience, is psi4 indeed right on this issue? Conditions, key results, and input files below. . Conditions. ```; HF/sto-3g. O -0.0000000000 0.0000000000 0.0711556763; H -0.0000000000 0.7580818420 -0.5646461096; H 0.0000000000 -0.7580818420 -0.5646461096. all STP. H2O: default masses; D2O: w/2.014101779; HDO: w/2.014101779; DTO: w/2.014101779, 3.01604927; ```. Psi4 (with new printing) (and fixing the molecule parser that wasn't playing nicely with the basis set detector so that isotopologs weren't even isoenergetic). ```; Electronic S 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K] (multiplicity = 1); Translational S 34.608 [cal/(mol K)] 144.801 [J/(mol K)] 0.05515186 [mEh/K] (mol. weight = 18.0106, P = 101325.00 [Pa]); Rotational S 10.673 [cal/(mol K)] 44.654 [J/(mol K)] 0.01700786 [mEh/K] (symmetry no. = 2); Vibrational S 0.001 [cal/(mol K)] 0.003 [J/(mol K)] 0.00000103 [mEh/K]; Total S 45.282 [cal/(mol K)] 189.458 [J/(mol K)] 0.07216074 [mEh/K]. Electronic S 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K] (multiplicity = 1); Translational S 34.924 [cal/(mol K)] 146.122 [J/(mol K)] 0.05565504 [mEh/K] (mol. weight = 20.0231, P = 101325.00 [Pa]); Rotational S 12.592 [cal/(mol K)] 52.685 [J/(mol K)] 0.02006667 [mEh/K] (symmetry no. = 2); Vibrational S 0.008 [cal/(mol K)] 0.034 [J/(mol K)] 0.00001311 [mEh/K]; Total S 47.524 [cal/(mol K)] 198.842 [J/(mol K)] 0.07573483 [mEh/K]. Electronic S 0.000 [cal/(m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345:2328,detect,detector,2328,https://psicode.org,https://github.com/psi4/psi4/issues/345,1,['detect'],['detector']
Safety,"ts angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1566,abort,abort,1566,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['abort'],['abort']
Safety,ts/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4016,detect,detecting,4016,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"ub.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; > http://packages.ubuntu.com/trusty/libboost-all-dev; > ; > My python interpreter support UCS-4.; > ; > python -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > python3 -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; > in particular, I only need to generate MOLDEN file from SCF calculations.; > ; > With respect, Vladimir.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94#issuecomment-100760375:2349,avoid,avoid,2349,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375,1,['avoid'],['avoid']
Safety,"uble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc (code 2); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232825635:1929,abort,aborted,1929,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635,1,['abort'],['aborted']
Safety,"uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day. thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge. I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547:354,detect,detecting,354,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547,1,['detect'],['detecting']
Safety,"uild; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Core; 401: ---------------------------------------------------------; 401: ; 401: ==> Geometry <==; 401: ; 401: Molecular point group: c2v; 401: Full point group: C2v; 401: ; 401: Geometry (in Bohr), charge = 0, multiplicity = 1:; 401: ; 401: Center X Y Z Mass ; 401: ------------ ----------------- ----------------- ----------------- -----------------; 401: O 0.000000000000 0.000000000000 -0.129476941194 15.99491",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:1296,timeout,timeout,1296,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['timeout'],['timeout']
Safety,ule psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16117,detect,detecting,16117,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,upcoming changes:. - [x] formatting request; - [x] modifying tests; - [x] NL_DISPERSION_PARAMETERS name; - [x] partially avoiding EmpiricalDispersion,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385183176:121,avoid,avoiding,121,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385183176,1,['avoid'],['avoiding']
Safety,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new features; - [x] 503/503 ctests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2107,sanity check,sanity checks,2107,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['sanity check'],['sanity checks']
Safety,"ver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest control",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:2744,detect,detectable,2744,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['detect'],['detectable']
Safety,"xing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347021249:1406,safe,safelinks,1406,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249,2,['safe'],['safelinks']
Safety,"y makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue, but it sounds like an extra `rm -rf` or two gets the desired behavior?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:1558,detect,detected,1558,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,1,['detect'],['detected']
Safety,"ybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [95])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #10 0x7fdb45716bcd in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #11 0x55e06162b743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform_moinfo.cc:210 in psi::IntegralTransform::process_spaces(); Shadow bytes around the buggy address:; 0x0c0e8001b930: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b940: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b950: fa fa fa fa fa fa fa fa fa fa fa fa fa fa 00 00; 0x0c0e8001b960: 00 00 00 00 00 00 00 00 fa fa fa fa fd fd fd fd; 0x0c0e8001b970: fd fd fd fd fd fa fa fa fa fa 00 00 00 00 00 00; =>0x0c0e8001b980: 00 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b990: fa fa fa fa fa fa fd fd fd fd fd fd fd fd fd fd; 0x0c0e8001b9a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b9b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b9c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b9d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==17351==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401:12532,ABORT,ABORTING,12532,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401,1,['ABORT'],['ABORTING']
Security," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1698,sanitiz,sanitizer,1698,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,4,['sanitiz'],['sanitizer']
Security," [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ^; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libqt/qt.h:47:7: note: forward declaration of 'psi::Options'; class Options;; ^; 2 errors generated. ```. I'm doing this on my intel mac: `2.6 GHz 6-Core Intel Core i7`; using clang++ ; ```; (base) gwood@EXS-001355 build % /usr/local/opt/llvm/bin/clang++ -v; Homebrew clang version 15.0.7; Target: x86_64-apple-darwin22.4.0; Thread model: posix; InstalledDir: /usr/local/opt/llvm/bin`; ```. The only issue prior to this was to install libxc and point to it, which i did with 6.2.2; I downloaded the source from git and am using master:. ```; git clone git@github.com:psi4/psi4.git; (base) gwood@EXS-001355 src % git branch; * master; ```; my cmake version is:. ```; (base) gwood@EXS-001355 src % cmake --version; cmake version 3.23.3. CMake suite maintained and supported by Kitware (kitware.com/cmake).; ```; blas and lapack is pi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:1964,access,access,1964,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['access'],['access']
Security," are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; - [x] Tests added for any new features (or rather, edited in); - [x] [Relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024:1404,access,access-by-index,1404,https://psicode.org,https://github.com/psi4/psi4/pull/1024,2,['access'],"['access-by-index', 'accessor']"
Security," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1394,access,accessible,1394,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['access'],['accessible']
Security," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2169,confidential,confidential,2169,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,1,['confidential'],['confidential']
Security," isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degenerac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:12855,access,access,12855,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['access']
Security," running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed);",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1872,validat,validation,1872,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['validat'],['validation']
Security," the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3410,access,access,3410,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['access']
Security,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:32,Access,Access,32,https://psicode.org,https://github.com/psi4/psi4/issues/1375,5,"['Access', 'access']","['Access', 'access']"
Security,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961:506,access,access,506,https://psicode.org,https://github.com/psi4/psi4/pull/961,1,['access'],['access']
Security,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481:659,access,accessed,659,https://psicode.org,https://github.com/psi4/psi4/pull/481,2,['access'],"['access', 'accessed']"
Security,"## Description. The DOI Foundation [started recommending a new resolver](https://www.doi.org/doi_handbook/3_Resolution.html#3.8). While their URL change may be a bit ironic, it's now [encrypted](https://www.ssllabs.com/ssltest/analyze.html?d=doi.org) and the old `dx` subdomain is being redirected. So, there is no urgency here. However, for consistency, this PRs suggests to update all static DOI links accordingly, plus the code that generates new DOI links. ## Checklist; - [-] Tests added for any new features; - [-] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1761:184,encrypt,encrypted,184,https://psicode.org,https://github.com/psi4/psi4/pull/1761,1,['encrypt'],['encrypted']
Security,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:130,access,access,130,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['access'],['access']
Security,"## Description. housekeeping; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] enables plugins to access wfn python only (w/o `psi4.wavefunction()`), if they're not needing it c-side; - [x] removes pyparsing.py that was pcmsolver legacy and cleans up a few wrappers refs; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/377:138,access,access,138,https://psicode.org,https://github.com/psi4/psi4/pull/377,1,['access'],['access']
Security,"## Description. smooth user interactions with mp2 & cepa so that minimal inputs have a chance of working (esp. w/grad) and the same call to different modules returns the same answer.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] `cepa(0)`/`ocepa(0)` in occ/dfocc called more specifically as `lccd`/`olccd`. psivars adjusted accordingly.; - [x] meanwhile, `cepa(0)` in fnocc called more specifically as `lccsd` (alias `cepa(0)`) or w/o singles as `lccd`. psivars and managed methods adjusted accordingly.; - [x] fixed defaulting of grad to findif of energies for managed methods. it had broken b/c just tested availability of analytic grad on `procedures['gradient']` and for managed methods that doesn't tell the full story. now probe the managed method in proc.py to see if gradient available.; - [x] alter default algorithms for scf for fnocc and dfocc. we've always said that the scf default for df post-HF methods was df, but only actually did algorithm switching for dfmp2 and sapt. now we really do it. in particular, so long as you don't set scf_type to the contrary, this will make a conv mp2 gradient run conv+conv and a df mp2 gradient run df+df.; ## Minor Todos; - [x] test cases build and run all the plugin templates; - [x] let ppl know how to access rohf mp3 & mp4 for toy problems; ## Questions; - [x] @edeprince3 should look over my changes to fnocc procedures in proc.py to make sure the scf algorithm flipping is sensible.; - [x] ditto, @bozkaya for occ/dfocc; ## Status; - [x] Ready to go, after @edeprince3 and @bozkaya sign off on it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/306:1301,access,access,1301,https://psicode.org,https://github.com/psi4/psi4/pull/306,1,['access'],['access']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. --> ; Fixes a couple of minor issues for a research project of mine. See todos. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Within the OCC module, updating the opdm to the wavefunction; - [x] Exposed a function to update the num_frozen_uocc global. ## Checklist. - [x] quick tests, occ module tests, standard suite tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072:330,Expose,Exposed,330,https://psicode.org,https://github.com/psi4/psi4/pull/2072,1,['Expose'],['Exposed']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `basis_relativistic <name> {...}` now works; - [x] Python 3.11 basically tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Windows CI allowed to access new qcel bump 0.25.1 that has broader pint compatibility; - [x] closes #2754 and fixes dft-pruning test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2764:596,access,access,596,https://psicode.org,https://github.com/psi4/psi4/pull/2764,1,['access'],['access']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. @lothian, the primary files to look at are procedures/proc.py, cc.rst, preview_capabilities_ccenergy.rst, and (for example) cc13b/input.dat. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Conventional ccsd(t) gradients will now proceed as finite-difference calculations, which are much more memory efficient. If you still want to access the analytic gradients, add `set qc_module ccenergy`. ## Dev notes & details; - [x] the main change is disabling default conv rhf/uhf ccsd(t) analytic gradients through ccenergy in proc.py . they're still accessible by setting `qc_module=ccenergy` explicitly; - [x] changes to tests so that we're still testing the gradients; - [x] changes to the capabilities auto-documentation that starts with stdsuite, gets stored in samples/stdsuite_psi4.txt, and gets processed into docs tables, a viz preview of which are stored in sphinxman/source/.; - [x] simpler docs-building environment!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). closes #2913 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943:536,access,access,536,https://psicode.org,https://github.com/psi4/psi4/pull/2943,2,['access'],"['access', 'accessible']"
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:435,access,access,435,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['access'],['access']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Fixes a bug encountered when running optimizations in BAKERJCC96. All calculations in a finite difference; calculation were writing orbitals to disk and overwriting the old orbitals. Only reference calculation should; be saved. In cases were the symmetry was lowered in one of the last displacements, subsequent gradient calculations; were failing to read orbitals. ``` ; File ""/home/zander/github/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1761, in scf_helper; raise ValidationError(""Cannot compute projection of different symmetries.""); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] scf_helper assumes orbitals should always be written. Passes `write_orbitals` = `false` through kwargs for displacements. ## Questions; - [ ] The new test is an optimization, would a test in ddd-function-kwargs or similar be preferred?. ## Checklist; - [x] Tests added for any new features; - [x] full ctest (Psi4, Psi4 + [CheMPS2, DFTD3, dkh, gCP, gdma, simint, ecpint]). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2827:566,Validat,ValidationError,566,https://psicode.org,https://github.com/psi4/psi4/pull/2827,1,['Validat'],['ValidationError']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; In, SAPT(DFT), I removed setting ""DF_INTS_IO"" to ""SAVE"" because it blocked scf_type==""DF"" from accessing MemDF on its own. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3173:175,access,accessing,175,https://psicode.org,https://github.com/psi4/psi4/pull/3173,1,['access'],['accessing']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The common thread of this PR is be more explicit in what calculations Psi4 can do and conveying that to the user at runtime and through the docs. In practice, this involves expanding the coverage of stdsuite, using those results to autogenerate docs tables, reconciling hand-generated docs tables, referring to all in runtime errors, and cleaning stuff up along the way. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicod",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:790,Validat,ValidationError,790,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['Validat'],['ValidationError']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR allows for using basis sets from the Basis Set Exchange library (https://github.com/MolSSI-BSE/basis_set_exchange) directly in psi4. To use a basis set from the BSE, you prefix the name of the basis set with `bse:`. Optionally, you can specify the version with a suffix (like `:1`). ```; # use most recent def2-tzvp version; set basis bse:def2-tzvp. # specifically use version 0 of sto-3g; set basis bse:sto-3g:0; ```. Also can be used with `assign`. ```; basis {; assign DZ; assign C bse:sto-3g:0; }; ```. Using these of course requires that the BSE be installed. This should be accessible from both schema/json and psithon. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Add capability to use basis sets from the Basis Set Exchange. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Adds optional dependency to basis_set_exchange; - [x] Adds handling for basis sets that start with `bse:`; - [ ] Modifies some regexes to allow for colons in basis set names. ## Questions; None. ## Checklist; - [x] Optional dependency added to build chain; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905:668,access,accessible,668,https://psicode.org,https://github.com/psi4/psi4/pull/2905,1,['access'],['accessible']
Security,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is the continuation of my previous MOInfo PR #3112, with the following general themes:. - Adding new docstrings and making existing ones machine readable for VS Code (and probably also Doxygen); - Rebalancing the class hierarchy by sinking things that get reused to the base class, and hoisting things up in the inheritance chain that only get used in one derived class; - Reducing visible and mutable state, as well as the contact surface of the classes. This is achieved by making data and functions as private as possible, providing access to data through getters returning `const&` when necessary, and making a few data members `const`. Having `const` members in classes is sometimes considered to be bad form, but AFAIK all of the downsides are already incurred on account of `MOInfoBase` having reference members. The git history on this branch is admittedly a bit messy, I changed my mind about a couple of things. LMK if that is a problem.; The next PR in this series will get to what I originally wanted to achieve and remove uses of the ugly ""cast Dimension object to pointer"" operators (see #2953) from `libmoinfo.`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No API changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolet",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:621,access,access,621,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['access'],['access']
Security,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:1538,Sanitiz,Sanitized,1538,https://psicode.org,https://github.com/psi4/psi4/pull/1772,1,['Sanitiz'],['Sanitized']
Security,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:61,access,access,61,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['access'],['access']
Security,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:298,access,access,298,https://psicode.org,https://github.com/psi4/psi4/pull/1381,2,['access'],['access']
Security,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:664,access,accessed,664,https://psicode.org,https://github.com/psi4/psi4/pull/630,2,"['Access', 'access']","['Access', 'accessed']"
Security,"## Description; Add PSI_API to all functions called by Forte (also see #955, there might be some duplication to address). ## Todos; This PR exposes C++ functions/classes that are required by Forte. . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/958:140,expose,exposes,140,https://psicode.org,https://github.com/psi4/psi4/pull/958,1,['expose'],['exposes']
Security,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:279,validat,validating,279,https://psicode.org,https://github.com/psi4/psi4/pull/1934,2,['validat'],"['validating', 'validation']"
Security,"## Description; Add rotational strength as new property, which has become available in adcc 0.14.3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Rotational strength for all ADC methods from adcc; - [x] Velocity gauge for oscillator strength. ## Questions; - [x] Adcc now allows oscillator strengths to be computed in both velocity and length gauge. What is the canonical way to expose this in Psi4?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1892:431,expose,expose,431,https://psicode.org,https://github.com/psi4/psi4/pull/1892,1,['expose'],['expose']
Security,## Description; Add set_Lagrangian in Wavefunction. Also expose `C_DGEQP3` function. . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L quick` all passed. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2064:57,expose,expose,57,https://psicode.org,https://github.com/psi4/psi4/pull/2064,1,['expose'],['expose']
Security,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1212:193,Expose,Exposes,193,https://psicode.org,https://github.com/psi4/psi4/pull/1212,1,['Expose'],['Exposes']
Security,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922:807,expose,exposed,807,https://psicode.org,https://github.com/psi4/psi4/pull/922,1,['expose'],['exposed']
Security,"## Description; Added the one line `ao_multipole_potential` function to `export_mints.cc`. This allows the user to access one-center integrals from the python interface. The most common use case for this is to calculate electrostatic potential and field from an auxiliary basis set expansion of the electron density. ## User API & Changelog headlines; - added `ao_multipole_potential` to `export_mints.cc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - Makes no changes to existing `export_mints.cc`; - Adds a function to grab One Body Integrals for a given basis set. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:115,access,access,115,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['access'],['access']
Security,## Description; Addresses a linker warning when building on OSX.; Original change in 703c8a07b238249134424fd938374eae01d8c5af.; related: https://stackoverflow.com/questions/9894961/strange-warnings-from-the-linker-ld. example of the warning:; ```; ld: warning: direct access in function '__GLOBAL__sub_I_blas_diis.cc' from file 'psi4/psimrcc/libpsimrcc.a(blas_diis.cc.o)' to global weak symbol '__ZNSt6vectorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ESaIS7_EED1Ev' from file 'CMakeFiles/core.dir/create_new_plugin.cc.o' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.; ```. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2129:268,access,access,268,https://psicode.org,https://github.com/psi4/psi4/pull/2129,1,['access'],['access']
Security,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981:213,access,access,213,https://psicode.org,https://github.com/psi4/psi4/pull/981,1,['access'],['access']
Security,"## Description; Adds a few functionals (SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L).; ~Enables `dft_bench_i*` tests for SCAN, SCAN0, revPBE, SOGGA, SOGGA11, MN12-SX, MGGA_MS2h, MN12-L, BMK, N12, MGGA_MVS, PKZB, MN15-L, PBE50, MGGA_MVSh, SOGGA11-X, M06-L, N12-SX, PBEOP, MPW1LYP and GAM.~; Enables all reference values in `dft_bench_i*` tests, now sorted alphabetically. Functionals not present in Psi4 are automatically ~marked with `xfail`~ skipped - this currently includes B3TLAP, BP86VWN, LRC-BOP, PBEsol, t-HCTH, t-HCTHh, wM05-D and wM06-D3, in addition to wB97X-D3 which was already marked `xfail`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] adds SCAN and SCAN0; - [ ] tests for revSCAN, revSCAN0, revM06-L are missing - if anyone has access to these in other codes, I'd appreciate reference values!. ## Checklist; - [x] Tests added for functionals, where available; - [x] `dft_bench_interaction` and `dft_bench_ionization` pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597:799,access,access,799,https://psicode.org,https://github.com/psi4/psi4/pull/1597,1,['access'],['access']
Security,## Description; Adds the ability to consume and produce MolSSI QC JSON Schema. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] A prototype MolSSI QC Schema has been implemented (http://molssi-qc-schema.readthedocs.io/en/latest/index.html). ## Questions; - [x] How much validation do we want?; - [x] A full test suite should like come from the schema itself?; - [x] How we will we handle extra psi vars? Is the current setup sufficient. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979:336,validat,validation,336,https://psicode.org,https://github.com/psi4/psi4/pull/979,1,['validat'],['validation']
Security,"## Description; Allow access to wfn (incl. geom) after optking errors. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] If optking fails internally or through exceeding max cycles and throws a `ConvergenceError`, you can now catch it with:. ```; try:; optimize('hf'); except psi4.ConvergenceError as err:; gotcha = err.wfn; print(gotcha.molecule().nuclear_repulsion_energy()); ```. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/pull/881,1,['access'],['access']
Security,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:1179,Validat,Validated,1179,https://psicode.org,https://github.com/psi4/psi4/pull/1846,1,['Validat'],['Validated']
Security,## Description; Because @huangm29 needs the SVD function plugin-exposed for Forte purposes. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2585:64,expose,exposed,64,https://psicode.org,https://github.com/psi4/psi4/pull/2585,1,['expose'],['exposed']
Security,"## Description; Cleanup `ccenergy/rotate.cc`. There's more cleanup to do, but this is a sufficiently large algorithm change that I'm breaking up the PR here. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `ccenergy/rotate` return type changed to `bool`; - [x] Orbital rotation uses newer `libmints` tech for greatly reduced LoC; - [x] Gets rid of the last bit of code in `ccenergy` that needs to map between QT and Pitzer ordering. I'll leave it to a future PR to eject that from `ccenergy` permanently; - [x] Replaces yet more `MOInfo` variable access with wavefunction variable access. ## Checklist; - [x] `cc15` and `cc16` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2719:606,access,access,606,https://psicode.org,https://github.com/psi4/psi4/pull/2719,2,['access'],['access']
Security,## Description; Closes #2031 . ## Todos; - [X] Add `compute_field_over_grid_in_memory` to `oeprop.cc` and `oeprop.h`; - [X] Expose `compute_field_over_grid_in_memory` in `export_oeprop.cc`.; - [X] Update `mints14` test. ## Questions; - N / A. ## Checklist; - [X] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2032:124,Expose,Expose,124,https://psicode.org,https://github.com/psi4/psi4/pull/2032,1,['Expose'],['Expose']
Security,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506:254,access,access,254,https://psicode.org,https://github.com/psi4/psi4/pull/506,2,['access'],"['access', 'accessed']"
Security,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914:446,access,access,446,https://psicode.org,https://github.com/psi4/psi4/pull/914,2,['access'],['access']
Security,"## Description; During the switch over to the super build the `ENABLE_{ASAN,TSAN,UBSAN}` flags stopped working. This PR fixes them. To use these sanitizers you must compile a copy of Python with the corresponding flags added. If you do not then you'll receive runtime errors. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845:145,sanitiz,sanitizers,145,https://psicode.org,https://github.com/psi4/psi4/pull/845,1,['sanitiz'],['sanitizers']
Security,## Description; Expose P::e.options in Python and enable pure pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720:16,Expose,Expose,16,https://psicode.org,https://github.com/psi4/psi4/pull/720,1,['Expose'],['Expose']
Security,## Description; Expose the function C_DGELS (found in `qt.h`). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2356:16,Expose,Expose,16,https://psicode.org,https://github.com/psi4/psi4/pull/2356,1,['Expose'],['Expose']
Security,## Description; Exposes `FittingMetric` to plugins for one of @fevangelista's students. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2420:16,Expose,Exposes,16,https://psicode.org,https://github.com/psi4/psi4/pull/2420,1,['Expose'],['Exposes']
Security,## Description; Exposes options class functions necessary for pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/725:16,Expose,Exposes,16,https://psicode.org,https://github.com/psi4/psi4/pull/725,1,['Expose'],['Exposes']
Security,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [ ] Computing hessians from energies _will be_ Py-side.; - [ ] Add the banner.; - [ ] Finish renaming the finite difference functions.; - [ ] Review the findif test suite and add any tests as needed. In particular, make sure the functions are agnostic as to psi4 vs. qcdb molecules.; - [ ] Run the entire test suite, to make sure my PyBind'ing hasn't caused any deep problems.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor. ## Questions; - [ ] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1010:1273,access,access-by-index,1273,https://psicode.org,https://github.com/psi4/psi4/pull/1010,2,['access'],"['access-by-index', 'accessor']"
Security,"## Description; Fixes #1052 at long, long last: when the user explicitly declares a symmetry, findif is now smart enough to put displacements in the proper subgroup. As part of the fix, control over molecule cloning for finite difference has passed to `_process_displacement`. It seemed easier (and more appropriate) than adding code to make a new clone in each for loop. The clone would be necessary so that each displacement can have its own symmetry. Since I was touching that part of the code anyways, I have reorganized so that the reference is guaranteed to be the first displacement. This has the advantage that if orbital reading is enabled, the following displacements will be able to read from the reference, as intended. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes #1052; - [x] Exposes more C functions to Python; - [x] Move the reference geometry first for ease of orbital reads. ## Checklist; - [x] Tests modified to account for bug fix; - [x] All findif tests passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424:849,Expose,Exposes,849,https://psicode.org,https://github.com/psi4/psi4/pull/1424,1,['Expose'],['Exposes']
Security,## Description; Fixes #655 and some other possibly nasty issues that come from; - Psithon->Python replacements being executed on literal strings; - Truncation of lines with literal python strings that contain a hash character (`#`). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Improved handling of literal strings inside `inputparser.py` to avoid regex replacements being attempted inside Python literals.; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658:211,hash,hash,211,https://psicode.org,https://github.com/psi4/psi4/pull/658,1,['hash'],['hash']
Security,"## Description; Fixes a bug in the semicanonicalization procedure cause by an uninitialized matrix. This also exposes a `set_Lagrangian` in the `Wavefunction` class, which is needed to make gradients work for plugins not based on `Wavefunction`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847:110,expose,exposes,110,https://psicode.org,https://github.com/psi4/psi4/pull/1847,1,['expose'],['exposes']
Security,"## Description; For now, a shot in the dark to fix the psicode docs and the nightly windows package. As far as I can tell, there's nothing wrong with the master docs build -- https://psi4manual.netlify.app/ has all its links working just fine. But there's something a little different about how the internal links are expressed, and that makes the redirects misfire when accessed from psicode.org https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L12 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3023:371,access,accessed,371,https://psicode.org,https://github.com/psi4/psi4/pull/3023,1,['access'],['accessed']
Security,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872:1032,Expose,Exposed,1032,https://psicode.org,https://github.com/psi4/psi4/pull/872,3,['Expose'],['Exposed']
Security,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950:29,access,access,29,https://psicode.org,https://github.com/psi4/psi4/pull/1950,1,['access'],['access']
Security,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1994:694,validat,validation,694,https://psicode.org,https://github.com/psi4/psi4/pull/1994,1,['validat'],['validation']
Security,"## Description; Include external potentials in the FISAPT module. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add interaction of external potential with nuclei to nuclear repulsion; - [x] Add interaction of external potential with basis functions to one-electron Hamiltonian for SCF calculations and calculation of HF interaction energy; - [x] Fixed minor typo in proc_util.py. ## Questions; - [ ] I added a method to the Wavefunction class to access the protected external_pot_ object. Was there some other way I could have accessed this object?; - [ ] Adding the external potential directly to the one-electron potential matrices for each fragment leads to this potential being double-counted in some terms used to calculate the HF interaction energy. So I stored the external potential as an additional matrix, matrices_[""VE""], that is then added to the one-electron potential for the monomer SCF calculations and the HF term. Is there a better way to handle this problem that doesn't require storing an additional matrix?; - [ ] I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy with the SAPT module?. ## Checklist; - [x] For a 2-fragment system, total SAPT0 energies with and without an external potential in FISAPT module agree with SAPT module; - [x] For a 3-fragment system, total SAPT0 energies with and without an external potential give reasonable energies; - [x] Passed included smoke and sapt tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608:498,access,access,498,https://psicode.org,https://github.com/psi4/psi4/pull/1608,2,['access'],"['access', 'accessed']"
Security,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443:467,Access,Access,467,https://psicode.org,https://github.com/psi4/psi4/pull/1443,1,['Access'],['Access']
Security,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534:832,inject,injected,832,https://psicode.org,https://github.com/psi4/psi4/pull/534,1,['inject'],['injected']
Security,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:65,access,accessible,65,https://psicode.org,https://github.com/psi4/psi4/pull/2190,1,['access'],['accessible']
Security,"## Description; Modifies how one electron properties are computed to allow the `properties` kwarg to behave consistently with other modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCDENSITY no longer calls into OEPROPs this is now done in the python layer. ; - [x] After calling CCDENSITY the `wfn.arrays['CC ROOT {n} D{a|b}']` can be used to access the OPDM for excited states in the SO basis as in the convention for matrix quantities set on the wfn. ; * **User-Facing for Release Notes**; - [x] Excited state OPDMs are now set in the wfn.arrays, so that they can be used to compute 1e properties for all roots requested in EOM-CC* calls.; - [x] Now additional valid one electron properties can be passed as part of the `properties=[]` list. These would previously cause a validation error. Valid one electron properties are now:; - dipole *; - quadrupole *; - mulliken_charges **; - lowdin_charges; - mayer_indices; - wiberg_lowdin_indices; - no_occupations **; - [x] The previous behavior was such that requesting the properties marked with * above would lead to all * -ed properties and additional (**) properties being computed automatically. The new logic implemented in the driver still has this behavior so existing workflows do no need to change, at least for now. . ## Questions; - [x] @loriab The block of code that I removed from CCDENSITY had comments that were used to trigger documentation of some psivars. Where should these go now? . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I ran all of the CC tests and there were no errors. The new logic changes where in the output file the 1 electron properties appear, but the perl script still finds them since they are labeled/formatted the same way. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/995:419,access,access,419,https://psicode.org,https://github.com/psi4/psi4/pull/995,2,"['access', 'validat']","['access', 'validation']"
Security,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:101,sanitiz,sanitize,101,https://psicode.org,https://github.com/psi4/psi4/pull/524,3,"['access', 'sanitiz']","['accessed', 'accessible', 'sanitize']"
Security,## Description; Move components of the mp2 energy into the `variables_` map so that they're accessible from Python (cc #642). ## Questions; Are the any backwards compatibility or other reasons to leave the `energies_` member variable around?. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643:92,access,accessible,92,https://psicode.org,https://github.com/psi4/psi4/pull/643,1,['access'],['accessible']
Security,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/751:812,access,accessors,812,https://psicode.org,https://github.com/psi4/psi4/pull/751,1,['access'],['accessors']
Security,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857:124,access,accessed,124,https://psicode.org,https://github.com/psi4/psi4/pull/857,1,['access'],['accessed']
Security,"## Description; Per @fevangelista request, this PR allows Forte to compile with master Psi, almost. That also requires a Forte PR. ## Todos; - [x] Exposes `reset_subspace` to C++. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2437:147,Expose,Exposes,147,https://psicode.org,https://github.com/psi4/psi4/pull/2437,1,['Expose'],['Exposes']
Security,"## Description; Prints out the MBIS valence charges. These were already being computed, just not exposed to the user. Tests were added for the new output, and all tests pass. There is no impact on runtime because it is just exposing values already being computed. Addresses https://github.com/psi4/psi4/issues/3140. ## User API & Changelog headlines; - [x] MBIS valence charges are now exposed and printed in MBIS output; - [x] The wfn array_variable `MBIS VALENCE CHARGES` is now available to be retrieved. ## Dev notes & details; - [x] Saves the MBIS valence charges to it's own little matrix; - [x] And exposes those charges on the python side as the wfn variable `MBIS VALENCE CHARGES`; - [x] Updates the relevant tests. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:97,expose,exposed,97,https://psicode.org,https://github.com/psi4/psi4/pull/3226,3,['expose'],"['exposed', 'exposes']"
Security,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1330:494,access,access,494,https://psicode.org,https://github.com/psi4/psi4/pull/1330,1,['access'],['access']
Security,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950:379,expose,expose,379,https://psicode.org,https://github.com/psi4/psi4/pull/950,1,['expose'],['expose']
Security,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2395:29,expose,exposes,29,https://psicode.org,https://github.com/psi4/psi4/pull/2395,1,['expose'],['exposes']
Security,"## Description; Provides users the ability to form a basisset composed of two combined basissets, the two can be combined simply or through use of the complementary auxiliary basis set (CABS) approach of Valeev et al. ## Dev notes & details; - [X ] Uncomments `pyconstruct_combined` in qcdb with minor changes to fit updated python; - [X ] Changes input to `build_ri_space` in OrbitalSpace to require a prebuilt combined `BasisSet` object; - [X ] Changes `build_cabs_space` in OrbitalSpace to use a full SVD; - [X ] Adds pytest `test_orbitalspace.py` to check orthonormality between orbital basis set and CABS; - [X ] Adds updated F12 basissets from the Basis Set Exchange; - [X ] Use of the CABS created works with my F12 plugin giving correct energies. ## Questions; - [ ] Shoud I generalize `_pybuild_basis` aka `BasisSet.build` to work with a list of keys, targets, roles, and other? Or create a new function to more easily access the building of a combined basisset?. ## Checklist; - [X ] `test_orbitalspace.py`; - [X ] Passes quick tests [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982:928,access,access,928,https://psicode.org,https://github.com/psi4/psi4/pull/2982,1,['access'],['access']
Security,## Description; Remove a now-meaningless validation step in `detci`. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2666:41,validat,validation,41,https://psicode.org,https://github.com/psi4/psi4/pull/2666,1,['validat'],['validation']
Security,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:755,access,access,755,https://psicode.org,https://github.com/psi4/psi4/pull/2462,4,['access'],['access']
Security,"## Description; The CC2/CCSD static polarizability values i.e when omega = 0 ev or Inf nm can be properly accessed now. Ex for CC2: ``psi4.get_variable(""CC2 DIPOLE POLARIZABILITY @ INF NM"")``. Right now, the tag is erroneously set to ``""...POLARIZABILITY @ 0NM""`` for such cases. So, this is a very minor bug.; ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/902:106,access,accessed,106,https://psicode.org,https://github.com/psi4/psi4/pull/902,1,['access'],['accessed']
Security,"## Description; The CdSalcList code is made fully accessible to the Python layer, per #884. This code does that and makes a few other changes to clean up code I found while trying to write the documentation for Pybind. Pinging @loriab and @dgasmith by request. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves the factory argument from the CdSalcList constructor to an argument of the method that uses it, getting rid of several null pointers and also meaning that a list of displacements no longer needs to care about orbital irreps.; - [x] Adds missing `const` declarations; - [x] The documentation no longer tells developers to use the non-existent SimpleMatrix class; - [x] Other misc. cleanup, from removing an overloaded term to simplification; * **User-Facing for Release Notes**; - [x] Exposed `CdSalcList` to Python; - [x] Made the needed irreps for Cartesian displacements more readable. ## Questions; - [x] ~~I am playing with reworking the print function. needed_irreps displays as an integer, so that part of the output is unintelligible to people who do not know that it is internally a bitstring. Would this be worth changing?~~ Changed!. ## Status; - [x] Ready to go!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/895:50,access,accessible,50,https://psicode.org,https://github.com/psi4/psi4/pull/895,2,"['Expose', 'access']","['Exposed', 'accessible']"
Security,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:370,access,access,370,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['access'],['access']
Security,"## Description; The `large-atoms` test was previously sitting around unused, waiting for improved ECPs (see discussion in #2234). This PR renovates that test, checking SCF and DF-MP2 energies and gradients on period 5/6 atoms. . ~~TODO (future PR): after MP2 ECP gradients are validated+enabled, should be added to this test~~ 01/25 update: DF-MP2 gradients now enabled and tested. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add `test_large_atoms` pytest; - [x] Enable DF-MP2 gradients . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2836:277,validat,validated,277,https://psicode.org,https://github.com/psi4/psi4/pull/2836,1,['validat'],['validated']
Security,"## Description; The `potential_` of SCF subclasses has been moved. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The HF base class has been weakened from having a `std::shared_ptr<VBase> potential_` to having a method `get_potential()` that returns a `std::shared_ptr<VBase>`. After #2885, the subclasses may need to access subclass-specific methods. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2889:511,access,access,511,https://psicode.org,https://github.com/psi4/psi4/pull/2889,1,['access'],['access']
Security,"## Description; The idea here was suggested by @CDSherrill, and implemented in this PR. What is this ""idea""? Currently, CompositeJK methods are accessed through `SCF_TYPE` options of the form `J_algo+K_algo`, with `J_algo` and `K_algo` being the respective composite J and K build algorithms to be used for the calculation. Meanwhile, one notable benefit of the CompositeJK class is that, for DFT calculations that use non-hybrid functionals, composite methods can be used to specify an algorithm specifically optimized for J matrix construction, in contrast to general algorithms which need to also account for the K matrix. Since non-hybrid DFT calculations only require the J matrix, CompositeJK can lead to speedups in such cases. But in those cases where only the J algorithm is needed, the current `SCF_TYPE` specification for CompositeJK has a problem - the composite K algorithm that must be specified, is unnecessary and unused. . This PR allows for the specification of CompositeJK algorithms via _only_ the J algorithm for cases such as non-hybrid DFT, where only the J matrix is needed. If CompositeJK is called without a K algorithm in cases where a K algorithm is needed, such as HF or hybrid DFT, an exception is thrown. Additionally, if the `J_algo+K_algo` `SCF_TYPE` specification for CompositeJK is used in conjunction with a non-hybrid functional, a note is given to the user, letting them know that the K algorithm won't be used. ## User API & Changelog headlines; - [X] Adds a new `SCF_TYPE` option, `DFDIRJ`, for usage in non-hybrid DFT calculations. ## Dev notes & details; - [X] Adjusts the CompositeJK class so that it can be called and used with _only_ the J algorithm as the `SCF_TYPE` keyword. This can be useful in non-hybrid DFT calculations, where the K matrix is unnecessary.; - [X] If only a J algorithm is specified in cases where a K matrix is required, the code throws an exception.; - [x] If the old CompositeJK `SCF_TYPE` notation is used when the K matrix is not",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001:144,access,accessed,144,https://psicode.org,https://github.com/psi4/psi4/pull/3001,1,['access'],['accessed']
Security,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2171:685,access,access,685,https://psicode.org,https://github.com/psi4/psi4/pull/2171,1,['access'],['access']
Security,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:45,expose,expose,45,https://psicode.org,https://github.com/psi4/psi4/pull/1061,3,"['access', 'expose']","['access', 'expose']"
Security,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644:456,Expose,Exposes,456,https://psicode.org,https://github.com/psi4/psi4/pull/644,1,['Expose'],['Exposes']
Security,"## Description; This PR adds implementation of `force_soccpi` and `force_doccpi`, allowing the user to change the singly and doubly occupied orbitals per irrep in the Wavefunction object. The alpha and beta electron counts are also updated accordingly. This functionality should only be used by expert users in special circumstances, since it causes inconsistency in the Wavefunction object for SCF purposes. (Let me know if I should add some sort of ""expert"" flag in the documentation to reflect this, or if I need to add any other documentation besides what I've put in already!). ## Todos; - [x] Add implementation of `force_soccpi` and `force_doccpi` C++-side; - [x] Add Python-side accessibility to `force_soccpi` and `force_doccpi`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/876:687,access,accessibility,687,https://psicode.org,https://github.com/psi4/psi4/pull/876,1,['access'],['accessibility']
Security,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:55,access,access,55,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['access'],['access']
Security,"## Description; This PR aims to expose useful functions from _detci_ and _libpsio_ to the python side:; - libpsio needs **read()**, **write()**, **read_entry()**, and **write_entry()** functions available in python to be actually useful to the user who intends to use Psi4 intermediate files, containers and buffers.; - There are publicly accessible _get_opdm()_ and _get_tpdm()_ functions in _detci_ but for the active-space only. This PR tries to bring the **opdm_add_inactive()** function to the public scope as well and expose it to the python side.; - Members of the **psio_address** structure are also exposed that can be adopted as arguments in _libsio_'s _read()/write()_ function calls. ## Todos. * Having a spatial symmetry-imposed bock-structured sparse TPDM as a result of get_tpdm() instead of the dense format only is desirable.; * Adding _opdm_add_inactive()_'s counterpart in order to complete the full structure of TPDM [such as **tpdm_add_inactive()**] will be extremely useful. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821:32,expose,expose,32,https://psicode.org,https://github.com/psi4/psi4/pull/1821,4,"['access', 'expose']","['accessible', 'expose', 'exposed']"
Security,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:723,access,access,723,https://psicode.org,https://github.com/psi4/psi4/pull/2534,1,['access'],['access']
Security,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:594,expose,exposes,594,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['expose'],['exposes']
Security,"## Description; This PR enables CCSD calculations with the PCM in the [PTE (Perturbation-To-Energy) approximation](http://dx.doi.org/10.1063/1.3245400). The CCSD amplitude equations are solved using the solvated Fock matrix and MOs, _i.e._ running SCF with PCM and then using the solvated SCF determinant as the reference.; It boils down to adding the PCM polarization energy in the reference energy used in the CC modules. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] CCSD with the PCM in the PTE approximation. ## Questions; - [x] Accessing the PCM polarization energy of the reference with `Process::environment.globals[""PCM POLARIZATION ENERGY""]` is probably not the cleanest solution. Are there alternatives?; - [x] This PR lacks documentation. Where should I add some notes about this?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683:614,Access,Accessing,614,https://psicode.org,https://github.com/psi4/psi4/pull/683,1,['Access'],['Accessing']
Security,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/2525,1,['expose'],['exposes']
Security,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2375:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/2375,1,['expose'],['exposes']
Security,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/1400,5,"['Expose', 'expose']","['Expose', 'exposes']"
Security,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:24,expose,exposes,24,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['expose'],['exposes']
Security,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2250:404,validat,validation,404,https://psicode.org,https://github.com/psi4/psi4/pull/2250,1,['validat'],['validation']
Security,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:1790,access,access,1790,https://psicode.org,https://github.com/psi4/psi4/pull/2336,1,['access'],['access']
Security,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:989,access,accessed,989,https://psicode.org,https://github.com/psi4/psi4/pull/2974,1,['access'],['accessed']
Security,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:33,access,access,33,https://psicode.org,https://github.com/psi4/psi4/pull/1344,1,['access'],['access']
Security,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2438:225,access,access,225,https://psicode.org,https://github.com/psi4/psi4/pull/2438,1,['access'],['access']
Security,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:29,expose,expose,29,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['expose'],['expose']
Security,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/861:29,expose,expose,29,https://psicode.org,https://github.com/psi4/psi4/pull/861,1,['expose'],['expose']
Security,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/919:199,validat,validation,199,https://psicode.org,https://github.com/psi4/psi4/pull/919,1,['validat'],['validation']
Security,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:120,access,access,120,https://psicode.org,https://github.com/psi4/psi4/pull/1480,1,['access'],['access']
Security,"## Description; This is a part of *Psi4* porting to Windows (#933). The size `ref_wfn.frzcpi()` is not `nirreps_ref` in `psimrcc-fd-freq2` test:; https://github.com/psi4/psi4/blob/5c0e495bdd3042795d8e39fe250ec153c4d236e9/psi4/src/psi4/libmoinfo/moinfo.cc#L257; It makes `convert_int_array_to_vector` to access invalid memory. In the past, I replaced `nirreps` with `nirreps_ref` to solve another problem #1427 and this one became visible after fixing #1480. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix the memory error in `psi::MOInfo::read_mo_spaces`. ## Questions; - [x] I'm lacking enough understanding of the code to fix, so just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521:303,access,access,303,https://psicode.org,https://github.com/psi4/psi4/pull/1521,1,['access'],['access']
Security,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489:387,access,access,387,https://psicode.org,https://github.com/psi4/psi4/pull/1489,2,['access'],['access']
Security,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350:85,hash,hash,85,https://psicode.org,https://github.com/psi4/psi4/pull/1350,1,['hash'],['hash']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1442:337,sanitiz,sanitize,337,https://psicode.org,https://github.com/psi4/psi4/pull/1442,1,['sanitiz'],['sanitize']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441:221,access,access,221,https://psicode.org,https://github.com/psi4/psi4/pull/1441,1,['access'],['access']
Security,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1422:218,access,access,218,https://psicode.org,https://github.com/psi4/psi4/pull/1422,1,['access'],['access']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469:93,access,access,93,https://psicode.org,https://github.com/psi4/psi4/pull/1469,1,['access'],['access']
Security,"## Description; This is part of *Psi4* porting to Windows (#933). `EaT_RHF.cc` and `ET_RHF.cc` contain incompatible declarations of `psi::cctriples::thread_data`. During compilation, templates (i.e. `std::vector<psi::cctriples::thread_data>`) are generated once and reused, while memory access instructions to `psi::cctriples::thread_data` are generate at each translation unit. That results into an overflow:; ```; ==29447==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800007a380 at pc 0x7fa994502627 bp 0x7fffc3cb6560 sp 0x7fffc3cb6558; WRITE of size 4 at 0x60800007a380 thread T0; #0 0x7fa994502626 in psi::cctriples::EaT_RHF() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206; #1 0x7fa993ee2cec in psi::cctriples::cctriples(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/triples.cc:154; #2 0x7fa993dfd890 in psi::cclambda::CCLambdaWavefunction::compute_energy() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cclambda/cclambda.cc:324; #3 0x7fa9937cfa84 in py_psi_cclambda(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:382; #4 0x7fa9938b8a3c in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1874; #5 0x7fa9938a441c in std::enable_if<!std::is_void<std::shared_ptr<psi::Wavefunction> >::value, std::shared_ptr<psi::Wavefunction> >::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Wavefunction>, pybind11::detail::void_type, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:287,access,access,287,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['access'],['access']
Security,"## Description; This is part of my summer work that I'm submitting as a PR now. These changes unify exchange and correlation functionals into a single list of functionals, which improves code readability and removes the XC functional special case (see below). ## User API & Changelog headlines; - [ ] Changes the Python API surface for the Superfunctional class: A complete list of functionals in a superfunctional can be accessed with `functionals()`. `add_x_functional(fnctl)` and `add_c_functional(fnctl)` were removed in favor of `add_functional(fnctl)`. Also removes `is_libxc_func()` since there is now no distinction. ## Dev notes & details; - [ ] The base `Functional` class now has a `kind()` field. When implemented in the `LibXCFunctional`, this allows one to get the kind of functional from LibXC -- Now, LibXC is treated as the single source of truth for the kind of functional. Accordingly, constants are [imported from LibXC to define these types.](https://github.com/psi4/psi4/blob/b40aa4fdce0996db38bdeafa454af8fb1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:422,access,accessed,422,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['access'],['accessed']
Security,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:938,access,access,938,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['access'],['access']
Security,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:148,access,accessors,148,https://psicode.org,https://github.com/psi4/psi4/pull/1133,3,['access'],"['access', 'accessors']"
Security,"## Description; This separates all the additional Molecule work, including py-side parsing, out from the py-side SCF/PCM/EFP PR. I recommend this go into 1.2 so that 1.2 Mol isn't half-baked. This **does not switch Mol parsing py-side**. I can, but that's an extra step to pull out of py-side SCF/PCM/EFP and a more drastic change to Psi. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `qcdb.Molecule` constructor learned to take, str (psi4, xyz, xyz+, psi4+), dict, or arrays and pass things on to `from_string`, `from_dict`, or `from_arrays` accordingly. In fact, these fns are simply different entry points. `from_arrays` validates arguments then calls `from_dict`. `from_string` parses into arrays then calls `from_arrays`. The three `from_*` methods are also available for `psi4.core.Molecule` (completely bypassing `create_molecule_from_string`), but the primary c-side Mol constructor in molutil.py is still using `c_m_f_s`.; - [x] py-side & c-side Molecule & CoordEntry classes learned `A` or `mass_number`. Pretty much this is a pass-through/holder slot for info populated in PQ Mol JSON. `set_mass` voids `A`.; - [x] `*.Molecule` learned `add_unsettled_atom` for adding `ZMatrixEntry`s analogous to `add_atom` `CartesianEntry`s for the zmat extension.; - [x] `qcdb.BasisSet.pyconstruct` learned to act on anything it can make a `qcdb.Molecule` of: Mol, str, or dict. It also learned to return BasisSet object or dict based on `return_dict` value, not on type of molecule-ish entity passed in.; - [x] changed some output unit labels to be more specific or use known abbr; - [x] In keywords (`read_options`), remove global `UNITS` since unused and covered by Mol parser; - [x] Write `.hess`, `.normal_modes_molden`, and a proto-JSON for vib/thermo analysis py-side. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965:693,validat,validates,693,https://psicode.org,https://github.com/psi4/psi4/pull/965,1,['validat'],['validates']
Security,"## Description; Ticks off an item on #2486 and #2477 by allowing ""TD-DFT"" to be a way to access TD-DFT psivars. As far as I'm aware, TD-DFT psivars are now as we want them. ## Checklist; - [x] `tdscf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2506:89,access,access,89,https://psicode.org,https://github.com/psi4/psi4/pull/2506,1,['access'],['access']
Security,"## Description; Tries to set the correct density label and solves some bugs with writing the incorrect densities. Relates issue: #1272 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] deducts density label (`|SCF|MP2|CC|CI|DCT`) for the FCHK file from the method.; - [x] allows PSI4 method names as density label with option `strict_label=False`; - [x] related issue [1886](https://github.com/psi4/psi4/issues/1886) is handled within the FCHK driver.; - [x] new pytests for FCHK files that check if the correct SCF density and SCF orbital coefficients is set.; - [x] No densities available from `occ` gradients. FCHK driver exists with a warning.; - [x] DCT, DFOCC densities available; - [x] exposes `Vector.copy()` to python; - [x] better ECP support. Fixes #2021.; - [x] adds a 'compare_fchkfiles` function. ## Checklist; - [x] docs changed to reflect that the high-level `fchk()` should be called (instead of `FCHKWriter()` directly); - [x] new test passes; - [x] manual inspect of various fchk files using this (ugly) script: https://gist.github.com/hokru/f1b00a87665ac345415b4ad3e0006f1d. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884:743,expose,exposes,743,https://psicode.org,https://github.com/psi4/psi4/pull/1884,1,['expose'],['exposes']
Security,"## Description; Update cc-pVXZ (D through 5) for Li, Be, Na, and Mg, and add cc-pwCVXZ (D through 5) for Li, Be, Na and Mg with values from Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011), accessed from http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html. Closes gh-727. Add cc-pwCVXZ-RI (D through 5) for Li, Be, Na and Mg with values from J. G. Hill and K. A Peterson, ""Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and core-valence basis sets for Li, Be, Na, and Mg"" Phys. Chem. Chem. Phys. (2010). The values were accessed from http://www.rsc.org/suppdata/cp/c0/c0cp00020e/c0cp00020e.pdf. Update cc-pV5Z-RI for Na from Hill and Peterson (2010). ## Todos. - [x] Add RI; - [x] Check locally against molpro.; - [x] Fix cc-pwCV5Z for Na and Mg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728:242,access,accessed,242,https://psicode.org,https://github.com/psi4/psi4/pull/728,2,['access'],['accessed']
Security,## Description; Updates the Psi4 interface to the MolSSI QCSchema using canonical QCElemental objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Begins deprecation of the old JSON command line.; - [x] Validates and runs Psi4 via QCSchema conventions and objects.; - [x] Allows both JSON and Msgpack CLI execution. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1723:257,Validat,Validates,257,https://psicode.org,https://github.com/psi4/psi4/pull/1723,1,['Validat'],['Validates']
Security,"## Description; While working on some more DF technology, I discovered a bug when trying to load using `Matrix::SaveType::Full`. The code assumed the matrix was square. One of the things this PR does is have the code work when that assumption fails. But the bigger problem is that `Matrix::SaveType::Full` is Psi3 era tech that shouldn't exist anymore. That SaveType reads/writes a matrix _where all elements of the wrong symmetry are replaced with zeros_. The better solution is to use `Matrix::SaveType::SubBlocks`, where those zero's are neither written nor read. Accordingly, I'm deprecating the Full save in favor of SubBlocks save. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `Matrix::SaveType::Full` is deprecated; - [x] Fixed a correctness bug with loading from `Matrix::SaveType::Full`. ## Checklist; - [x] quicktests, standard stuite, and dfmp2 all pass; - [ ] I didn't bother adding a new test that I actually fixed the bug, since I accessed the buggy code through a method that's going to be deprecated anyways. Any objections?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092:1007,access,accessed,1007,https://psicode.org,https://github.com/psi4/psi4/pull/2092,1,['access'],['accessed']
Security,"## Description; Yet another PR to get densities properly accessible on the wavefunction. This one sets the alpha and beta densities for the DF and CD methods in `dfocc` that support gradients - we should be able to close #1952. Because this is `dfocc`, I also got in some code cleanup as well. Some of the CD methods claim to have working one-electron properties, but not gradients, but there's no elaboration. To be cautious, I haven't set densities for those methods. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Exposes `dfocc` densities for methods with gradients. ## Checklist; - [x] `ctest -L ^dfo -j4`, `ctest -L ^dfm -j4`, and `ctest -L ^dfc -j4` all pass. I'm using that as a proxy for running all dfocc tests. Sadly, those aren't known. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1964:57,access,accessible,57,https://psicode.org,https://github.com/psi4/psi4/pull/1964,2,"['Expose', 'access']","['Exposes', 'accessible']"
Security,"## Description; `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. This PR seems way too easy. @brianz98, please let me know if there are issues. Obligatory @fevangelista and @dnascimento13 pings. ## User API & Changelog headlines. - [x] `RelPotentialInt` and associated integral classes now expose all four W integral types instead of just the W0 integrals. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes `RelPotentialInt` to expose W0, Wx, Wy, and Wz integrals. ## Questions; - [x] Any objections to changing an existing integral type rather than creating a new one?; - [x] Any documentation edits needed?; - [x] Do any of the users need the derivative integrals?. ## Checklist; - [ ] Are any tests necessary?; - [x] `ctest -L x2c` passes, in addition to standard tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174:70,expose,expose,70,https://psicode.org,https://github.com/psi4/psi4/pull/3174,3,['expose'],['expose']
Security,"## Description; `Slice` class is used in Forte. However, recent modifications blinds `Slice` from plugins.; This PR expose `Slice` class as `PSI_API` to be called in plugins. ## Modification; - [x] Added `PSI_API` flag for class `Slice`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1028:116,expose,expose,116,https://psicode.org,https://github.com/psi4/psi4/pull/1028,1,['expose'],['expose']
Security,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:290,access,access,290,https://psicode.org,https://github.com/psi4/psi4/pull/2513,1,['access'],['access']
Security,"## Description; `c1_deep_copy` sent `nsopi_` to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When `nsopi_[h] > nmopi_[h]` for some `h`, this led to accessing out-of-bounds memory. No more. ## Checklist; - [x] `fnocc7` (which alerted us to this issue) passes again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2692:186,access,accessing,186,https://psicode.org,https://github.com/psi4/psi4/pull/2692,1,['access'],['accessing']
Security,"## Description; closes #973 . ## Todos; * **User-Facing for Release Notes**; - [x] setting `stability_analysis = ""FOLLOW""` will cause a `ValidationError` when used with `REFERENCE` that is not `UHF`; - [x] SCF docs have been updated to include a note that follow is only implemented for UHF, and the stability analysis methods table has been expanded to include a column showing valid `STABILITY_ANALYSIS` values for each reference. #973 Contained the report that RHF stability analysis = follow would silently check for instabilities and then continue on doing nothing about them, and a request to implement FOLLOW for RHF/ROHF. This PR fixes the first part, The feature request has been added under a separate issue (#1005). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1006:137,Validat,ValidationError,137,https://psicode.org,https://github.com/psi4/psi4/pull/1006,1,['Validat'],['ValidationError']
Security,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:897,access,access,897,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['access'],['access']
Security,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes a crash when attempting DFMP2 on systems with too few electrons to support MP2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Massively simplified the DFMP2 validation logic. ## Checklist; - [x] dfmp2 tests pass; - [x] Turned the bug report into a new test case. (Thanks for a clean one, Susi.). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2977:530,validat,validation,530,https://psicode.org,https://github.com/psi4/psi4/pull/2977,1,['validat'],['validation']
Security,"### Conda changes since v1.1; * MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; * Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; * (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386708662:267,access,accessing,267,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386708662,1,['access'],['accessing']
Security,"### Storing data on `Wavefunction` instances. #### Choices (dipole gradient used as example). - (a) store in dedicated slot, `wfn.dipole_gradient_`. access through `wfn.dipole_gradient()`; - (b) store in `wfn.arrays_`. access through `wfn.variable('CURRENT DIPOLE GRADIENT')` or `wfn.variable('MTD DIPOLE GRADIENT')`; - (c) do (b) but also accessible through `wfn.dipole_gradient()` which just performs `wfn.arrays_` lookup; - (d) store in both `wfn.dipole_gradient_` and `wfn.arrays_` (memory-independent copies). access through `wfn.dipole_gradient()` (former) or `wfn.variable('CURRENT DIPOLE GRADIENT')` (latter) or `wfn.variable('MTD DIPOLE GRADIENT')` (latter). #### Present; - E/G/H are (d) and both, either, or neither may be set or consistent. even for energies, these haven’t been thoroughly rolled out past SCF.; - non-E/G/H are (b). #### Future; - E/G/H; - first (v1.4) work on getting data set in both places (reserved slot (e.g., `energy_`) and map (i.e., `variables_`)); - next cycle (v.1.5) do (c); - next next cycle (v1.6) do (b); - non-E/G/H, do (c)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-449694968:149,access,access,149,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-449694968,4,['access'],"['access', 'accessible']"
Security,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:944,hash,hash,944,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,1,['hash'],['hash']
Security,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:309,Validat,ValidationError,309,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Validat'],['ValidationError']
Security,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5943,expose,exposed,5943,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['expose'],['exposed']
Security,(1) `lenv` is already sanitized: https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3715; (2) `subprocess` call seems to follow the same pattern already: https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3749-L3769,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132#issuecomment-412529684:22,sanitiz,sanitized,22,https://psicode.org,https://github.com/psi4/psi4/issues/1132#issuecomment-412529684,1,['sanitiz'],['sanitized']
Security,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:2124,access,access,2124,https://psicode.org,https://github.com/psi4/psi4/pull/1393,2,['access'],['access']
Security,"**kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:4376,Validat,ValidationError,4376,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['Validat'],['ValidationError']
Security,"**kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:6520,Validat,ValidationError,6520,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc473c360>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:42070,Validat,ValidationError,42070,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:30598,Validat,ValidationError,30598,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_value",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:38854,Validat,ValidationError,38854,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:13097,Validat,ValidationError,13097,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4be7678>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:20398,Validat,ValidationError,20398,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:23529,Validat,ValidationError,23529,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:7588,Validat,ValidationError,7588,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_functional.build_superfunctional(core.get_option(""SCF"", ""DFT_FUNCTIONAL"")); elif isinstance(functional, core.SuperFunctional):; superfunc = functional; disp_type = False; elif isinstance(functional, (str, unicode)):; superfunc, disp_type = dft_functional.build_superfunctional(functional); else:; raise ValidationError(""Functional %s is not understood"" % str(functional)); ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); if reference in [""RHF"", ""RKS""]:; > wfn = core.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:26957,Validat,ValidationError,26957,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Validat'],['ValidationError']
Security,", v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:3250,access,access,3250,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['access'],['access']
Security,"- [ ] `-D(abc)` work needs to continue, see https://github.com/psi4/psi4/pull/1151#issuecomment-417101476 and below; - [ ] add named per-parameter access to DFT functionals now that we can get names from libxc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-433542414:147,access,access,147,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-433542414,1,['access'],['access']
Security,".0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; blas[build=*mkl] -> m2w64-gcc-libs. Package numpy-base conflicts for:; psi4 -> numpy -> numpy-base[versi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8353,certificate,certificates,8353,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['certificate'],['certificates']
Security,".8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06.8247099Z pytest_scratches = []; 2018-12-06T18:15:06.8247318Z for pat in patterns:; 2018-12-06T18:15:06.8247695Z pytest_scratches.extend(glob.glob(pat)); 2018-12-06T18:15:06.8247928Z for fl in pytest_scratches:; 2018-12-06T18:15:06.8248147Z > os.unlink(fl); 2018-12-06T18:15:06.8249031Z E PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pytest_output.dat'; 2018-12-06T18:15:06.8249336Z ; 2018-12-06T18:15:06.8249582Z ..\lib\psi4\tests\conftest.py:28: PermissionError; ```; So for now, they will run on core only!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:2340,access,access,2340,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['access'],['access']
Security,".py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5199,hash,hash,5199,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['hash'],['hash']
Security,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4388,validat,validated,4388,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['validat'],['validated']
Security,"/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Plea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1027,access,access,1027,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['access'],['access']
Security,"/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== Address 0x18 is not stack'd, malloc'd or (recently) free'd; ==98805== ; ==98805== ; ==98805== Process terminating with default action of signal 11 (SIGSEGV); ==98805== Access not within mapped region at address 0x18; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abst",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:2231,Access,Access,2231,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['Access'],['Access']
Security,"0. I call this a good start. ### Step Two: Conventional TPDM Tech; I don't see a way around still using `dpdbuf4` for this, even though this isn't the most plugin-friendly. The main simplification here will be eliminating the need to dump to `libiwl`. ## Questions; - [ ] There is a goof in `libtrans`: There is a [pre-defined frozen core space `O`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L51-L57), and also a [pre-defined occupied space `o`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L58-L68), and likewise for virtual orbitals. These spaces have conflicting labels. ; [Uppercase letters mean the alpha orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L306) and [lower case letters mean the beta orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L505). We need to change the labels of the frozen core and frozen virtual spaces to break the conflict. We currently have five votes (Lori, Andy, Susi, Jet, and I) for `C` for frozen core and `W` for frozen virtual. Anybody opposed? Also, how on earth do I deprecate _this_? I need this for some frozen core gradient plans, so I would appreciate being able to change this sooner rather than later. Thankfully, neither space seems to be used anywhere in Psi.; - [ ] I made some internal changes to `libtrans`. There is now a case sensitive `MOCoefficients_` map, and there are case-insensitive `aMOCoefficients` and `bMOCoefficients` functions. I'd like to remove the old `aMOCoefficients_` and `bMOCoefficients_` maps, now that we have these new functions. Do I need to formally deprecate them? These were never exposed via PyBind. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:4412,expose,exposed,4412,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['expose'],['exposed']
Security,08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:14 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```. Full conda env is this:. ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) conda list; # packages in environment at /psi/toolchainconda/envs/py311cf_L1:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_kmp_llvm conda-forge; binutils_impl_linux-64 2.39 h6ceecb4_0 conda-forge; binutils_linux-64 2.39 h5fc0e48_11 conda-forge; blas 2.116 mkl conda-forge; blas-devel 3.9.0 16_linux64_mkl conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.18.1 h7f98852_0 conda-forge; ca-certificates 2022.9.24 ha878542_0 conda-forge; cmake 3.24.2 h5432695_0 conda-forge; deepdiff 6.2.1 pyhd8ed1ab_0 conda-forge; expat 2.5.0 h27087fc_0 conda-forge; gcc_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gcc_linux-64 12.2.0 h4798a0e_11 conda-forge; gxx_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gxx_linux-64 12.2.0 hb41e900_11 conda-forge; kernel-headers_linux-64 2.6.32 he073ed8_15 conda-forge; keyutils 1.6.1 h166bdaf_0 conda-forge; krb5 1.19.3 h08a2579_0 conda-forge; ld_impl_linux-64 2.39 hc81fddc_0 conda-forge; libblas 3.9.0 16_linux64_mkl conda-forge; libcblas 3.9.0 16_linux64_mkl conda-forge; libcurl 7.86.0 h2283fc2_0 conda-forge; libedit 3.1.20191231 he28a2e2_2 conda-forge; libev 4.33 h516909a_1 conda-forge; libffi 3.4.2 h7f98852_5 conda-forge; libgcc-devel_linux-64 12.2.0 h3b97bd3_19 conda-forge; libgcc-ng 12.2.0 h65d4601_19 conda-forge; libgfortran-ng 12.2.0 h69a702a_19 conda-forge; libgfortran5 12.2.0 h337968e_19 conda-forge; libgomp 12.2.0 h65d4601_19 conda-forge,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719:2418,certificate,certificates,2418,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719,1,['certificate'],['certificates']
Security,"1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1570,Validat,ValidationError,1570,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Validat'],['ValidationError']
Security,"1. The key phrase here is _would give us_. The capabilities aren't there yet. This is GauXC. I know this was a feature they desired, but I don't know how close it is to being complete. My guess is that things are, as always, not going as optimistically as they would like.; 2. Psi4 1.9.1 should not raise this error. You're saying that the input; ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check', 'basis_guess': 'true'}); mol = psi4.geometry(""""""; symmetry c1; 0 3; O; """""");; psi4.energy('PBE/6-31G', molecule=mol); ```; gave you `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`? Can you double-check and post the output file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042:597,Validat,ValidationError,597,https://psicode.org,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042,1,['Validat'],['ValidationError']
Security,"1.) Thank you, I read it from a graduate student thesis I remember summarizing it with different levels of basis sets and theories but definitely needed some validation on that front. . 2.) Awesome I will give it a shot and check it out, let you know if I run into any problems. . 3.) `mode=(continuous|sow|reap))` ah I think I got confused on the parameter meant. I thought it was a way to single out individual modes. . This is great and moves me a long! Thank you!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226074577:158,validat,validation,158,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226074577,1,['validat'],['validation']
Security,"24, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:3945,access,accessed,3945,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['access'],['accessed']
Security,"5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5300,hash,hash,5300,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['hash'],['hash']
Security,"680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c11 -DNDEBUG' '-DCUSTOM_CXX_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -std=c++11 -DNDEBUG'; ```; which already includes the C++11 standard, but the build system seems to append this with -std=gnu++11 which is probably the reason why the build is broken. It's funny though, that the same flags work in earlier gcc!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631:1857,secur,security,1857,https://psicode.org,https://github.com/psi4/psi4/issues/631,2,['secur'],['security']
Security,"6\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:3997,Validat,ValidationError,3997,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,"['Validat', 'validat']","['ValidationError', 'validation']"
Security,82c59_0 conda-forge; aiosignal 1.3.1 pyhd8ed1ab_0 conda-forge; alembic 1.12.0 pyhd8ed1ab_0 conda-forge; ambertools 23.3 py39hdb62838_1 conda-forge; amberutils 21.0 pypi_0 pypi; appnope 0.1.2 py39h2804cbe_2 conda-forge; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py39h5161555_1 conda-forge; arpack 3.7.0 h58ebc17_2 conda-forge; arrow-cpp 11.0.0 hce30654_5_cpu conda-forge; asttokens 2.0.5 pyhd8ed1ab_0 conda-forge; astunparse 1.6.3 pyhd8ed1ab_0 conda-forge; async-timeout 4.0.3 pyhd8ed1ab_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; aws-c-auth 0.6.24 he8f13b4_5 conda-forge; aws-c-cal 0.5.20 h9571af1_6 conda-forge; aws-c-common 0.8.11 h1a8c8d9_0 conda-forge; aws-c-compression 0.2.16 h7334ab6_3 conda-forge; aws-c-event-stream 0.2.18 ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-for,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1111,checksum,checksums,1111,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['checksum'],['checksums']
Security,"; 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1768,Validat,ValidationError,1768,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Validat'],['ValidationError']
Security,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8200,Expose,Expose,8200,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['Expose'],['Expose']
Security,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2593,Expose,Expose,2593,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Expose'],['Expose']
Security,"='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8203,certificate,certificates,8203,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,3,['certificate'],['certificates']
Security,"> 1. Libxc: This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 > includes libxc/xc.h when libxc installs include/xc.h. Yes, I've been pushing for namespaced headers (point 2 of https://gitlab.com/libxc/libxc/issues/61). If we really must, Psi can do non-namespaced libxc, but haven't gotten much response either way from upstream. > 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. I've fixed the latter two of these in https://gitlab.com/libxc/libxc/merge_requests/113. Not sure what to do about the first -- I really wish they would namespace their headers. The greater Libxc problem is that even if the above two points were cleaned up, there is no upstream Libxc release that has ever worked with Psi4. The Libxc3 series didn't have cmake. Early Libxc4 changed the interface so that some features we needed weren't accessible. Current Libxc4 master has those features, but they're not available in a release. When the questions of https://gitlab.com/libxc/libxc/issues/61 are resolved, https://github.com/psi4/psi4/pull/1101 is ready. > Libint: Similarly to Libxc, Libint has problems in its cmake build and it can't be used evaleev/libint#111 evaleev/libint#112. Thanks for pinging me on these. I don't watch that repo.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737:1078,access,accessible,1078,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737,1,['access'],['accessible']
Security,"> ; > ; > I am still completely lost when I try to read `_validate_cbs_inputs`.; > ; > What I understand is that the user provides the energy call with metadata information in the form of either a structured dictionary or a string using special CBS syntax that is then converted into a structured dictionary. There's actually a third option - a legacy subset of keywords, such as `scf_wfn`, `corl_scheme`, etc. I agree, it's a mess, and someone should do something about it. . Basically, if it's a `method/basis` string, that gets parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:1010,validat,validated,1010,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,1,['validat'],['validated']
Security,"> ; > ; > Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices.; > ; > I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html . Thanks for replying! When I try the `help(psi4.set_memory` it says that there's no `set_memory` attribute. The cell with the `import psi4` runs ok, but it seems it cant access any attribute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590:957,access,access,957,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590,1,['access'],['access']
Security,"> @tomspur Have you gotten a chance to look at my last comments or begun work on any of those changes? @robertodr and myself are prepared to complete the work needed to get this feature working as it would be a great step forward for improving the api of the CC codes. I had ineed a look into your comments and tried to understand the infrastructure around the global dpd... Unfortunately, It would be quite difficult for me to properly fix the above comments fully... > We could submit PRs to your working branch if you are able to merge, you could give us access to push directly to this branch, or a third option if you don't plan on working on this any further we could open a new PR (retaining the commits you have already authored of course) to complete the feature.; > ; > Please let us know how you would prefer we proceed, thanks!. I added you two directly access to push to my repository at tomspur/psi4release, so feel free to add anything you like there. Please let me know, how else I could help to move this feature forward.; I just rebased my branch against the current master and hope this helps to get this included",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-423988930:558,access,access,558,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-423988930,2,['access'],['access']
Security,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:60,access,access,60,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379,2,['access'],['access']
Security,"> I can validate that pinning libint2 fixes this on our Cloud platform as well, I'll close this case.; Thanks again for addressing this so quickly!. Glad it's fixed. The Libint2 migration was bound to cause problems, so I'm glad you reported it. We started pinning psi4 conda packages to specific Libint2 builds earlier this year, so hopefully smoother future migrations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1146376321:8,validat,validate,8,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1146376321,1,['validat'],['validate']
Security,> I don't know how you can check the fingerprint for a repo. Probably not for github. Github downloads are fundamentally insecure as implemented by cmake. Documentation says that hash can be set for URL downloads though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-344327124:179,hash,hash,179,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344327124,1,['hash'],['hash']
Security,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:1087,access,access,1087,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104,1,['access'],['access']
Security,"> I don't know what your background is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense.; > ; > Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:90,access,accessible,90,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,1,['access'],['accessible']
Security,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343778164:499,secur,security,499,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164,1,['secur'],['security']
Security,"> I'm fine with the PR as is. If you tidy up the BIND and TAGL dictionaries as Jonathon suggested above, even better. did the part with `TAGL`, not sure about `BIND` since assigned values should be unique per each entry. I would prefer to keep it in a declarative fashion, instead of cooking up some scary bind values array accessed by index.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-882792295:324,access,accessed,324,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-882792295,1,['access'],['accessed']
Security,"> I'm running through tests now to see if just... removing this entirely breaks anything. Short of `print_details` being accessible through some print settings, it doesn't appear that any of this is even exposed on the python side anyway?. Haha yes spaghetti code!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268651045:121,access,accessible,121,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268651045,2,"['access', 'expose']","['accessible', 'exposed']"
Security,"> Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?. Yes. Lori's comment was ""trick you can use to prevent accidentally stumbling into this again,"" not a fix. `scf::HF::compute_fcpi` probably needs a validation check...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818:356,validat,validation,356,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818,1,['validat'],['validation']
Security,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:602,expose,expose,602,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698,1,['expose'],['expose']
Security,"> LGTM, awesome python side testing!; > ; > Do we have a plan to add this keyword to globals so that Psi4 users can start accessing this screening?. Would adding a global, user-specified boolean (something like `CSAM_SCREENING`, default false) be the best way to do this? It could be accessed by the JK object, much like `INTS_TOLERANCE` already is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724:122,access,accessing,122,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724,2,['access'],"['accessed', 'accessing']"
Security,"> Might as well. Do I make a PR to the attic repo, or is there some other procedure?. feel free to commit directly. lmk if you don't have write access -- it isn't much in demand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964408575:144,access,access,144,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964408575,1,['access'],['access']
Security,"> Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python.; > ; > I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that. thanks for this very useful pointer! I will then give `PySCF` a try. however, my main concern with `PySCF` is, after getting the SAD Guess from it, I have to reorder the rows and columns of the density matrix, so that it aligns with the ordering in `psi4` ? I believe these 2 programs do not have the same ordering (but I'm not certain). I need to do this as most of my workflow is centred in `psi4`, and a large amount of calculations of density matrices have already been done with `psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056:157,access,accessible,157,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056,1,['access'],['accessible']
Security,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:243,expose,expose,243,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016,1,['expose'],['expose']
Security,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:302,expose,exposed,302,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795,1,['expose'],['exposed']
Security,"> One thing that puzzles me right now is how to figure out center(s) involved in the MO indices in epsilon_a(). Core orbitals are delocalized between identical nuclei. To figure out which nuclei a core orbital corresponds to, you would have to have a suitable metric. This could be the square norm of the MO coefficient of predefined core functions. A more accessible way would be to first localize the orbitals, so that you get rid of the mixing between nuclei, and then it would be straightforward to calculate e.g. <r^2>. If you are asking how to do this by hand in a small system, and not in a general case, then that's pretty straightforward. Just look at the orbital coefficients. If you're using a contracted basis set, the contracted functions should be good approximations to the core orbitals. Thus, you should see a coefficient close to 1 in absolute value for the core function in the corresponding core orbital, if you only have one heavy atom. If you have more, then the amplitude will be divided among the nuclei.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038:357,access,accessible,357,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038,1,['access'],['accessible']
Security,"> Per the last Psi4 call, I'd like to challenge you to think about how much of libcfmm could be factored out of Psi4. Many other codes might be interested in this functionality, too, if it can be made accessible through a simple API. I like your idea, but I think that is something to think about in the future because the rest of `libfmm` is currently entangled with Psi functionalities (like `IntegralFactory`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208511310:201,access,accessible,201,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208511310,1,['access'],['accessible']
Security,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:506,inject,injected,506,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154,1,['inject'],['injected']
Security,"> Thanks for switching the base from `1.3.x` to `master`. Unfortunately, it didn't go as cleanly as we need. The thing to do is on your clone, make sure you have `origin` and `upstream` remotes at `git remote -v`. Then checkout the upstream master branch, check that its hash matches the upstream psi4 master (that is, the hash next to ""Latest commit"" right off the https://github.com/psi4/psi4/ page). Then checkout a new branch, e.g., `git checkout -b libpsioexport`. Then apply your one commit, `git cherry-pick 9788333289e4c48d57a9bf7e453fb8855fbc8ae9`. Then push that new branch to the branch associated with this PR. It will have to be force-pushed b/c overwriting history, `git push origin libpsioexport:psi4-dev --force`. Then this PR should have only one commit in it, yours, and be with respect to the development, master branch. Done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-592557057:271,hash,hash,271,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-592557057,2,['hash'],['hash']
Security,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:237,expose,exposed,237,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467,3,"['access', 'expose']","['accessors', 'exposed']"
Security,"> The BoysLocalizer and PMLocalizer have a void-type localize() function and accessors L() and U(). The IBOLocalizer class has no accessors and instead returns a map of info from the localize function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent. Agree. Consistency is crucial and within the PR scope. I think the accessors design is more common in psi4 but other than that I have no strong opinion on either choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-998184973:77,access,accessors,77,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998184973,3,['access'],['accessors']
Security,"> The below line still does an assert within the threaded code. I don't think that hurts any, just pointing out it's still there in case you wanted to remove it. It's already constrained, so I think it's harmless and can remain as a hint for refactoring. My guess is that that file would be helped by separate validation and work steps as many of the functions have defensive checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017:310,validat,validation,310,https://psicode.org,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017,1,['validat'],['validation']
Security,"> The internal ""validated"" dictionary is in my view perfectly well documented here:; > ; > https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365. So, just to be clear, that applies for every stage in the entire dict? I thought that only applied to DFT stages because you mentioned it in Sec. 2a). > > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete.; > ; > This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to be validated anyway. Then I stand by my comment that the function name and docstring are incomplete in the current version. Neither mentions that the dict needs to be completed (and needs to lose at least one field).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886:16,validat,validated,16,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886,4,['validat'],"['validated', 'validating', 'validation']"
Security,"> The other files are split based on the components. I guess we could in theory split the complete XC functionals exposed by libxc into the other categories, but this way they are all kept together and can be updated easier. So I guess if you want a hybrid, you have to check two files (as opposed to several), which is not that terrible. Yes, and hybrid metas one might look for in three files. Without merging all into one file, I agree the present organization is reasonable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-764396454:114,expose,exposed,114,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-764396454,1,['expose'],['exposed']
Security,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:142,expose,expose,142,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,1,['expose'],['expose']
Security,"> This looks great! Access to the amplitudes of cclambda would be great as well :). Is this solved, can we obtain amplitudes from cclambda as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344#issuecomment-1744631107:20,Access,Access,20,https://psicode.org,https://github.com/psi4/psi4/pull/1344#issuecomment-1744631107,1,['Access'],['Access']
Security,"> Two comments about lines that weren't changed:; > ; > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1910-L1912); > ; > Lines 1910 to 1912 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > # Drop out for props and freqs ; > if ptype in [""properties"", ""frequency""]: ; > raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)) ; > ; > We shouldn't be dropping out for frequencies anymore. Fair point. I changed the raw 'frequency' function too, to be a true wrapper around 'hessian', that code is just a left-over. Changed. > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1940-L1944); > ; > Lines 1940 to 1944 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > if len(method_list) > 1: ; > cbs_kwargs['delta_wfn'] = method_list[1] ; > cbs_kwargs['delta_basis'] = basis_list[1] ; > if 'delta_scheme' in kwargs: ; > cbs_kwargs['delta_scheme'] = kwargs['delta_scheme'] ; > ; > It would be good to put a comment here explicitly saying that `_parse_cbs_gufunc_string` should enforce that `len(method_list)` can only be 1 or 2. The logic confused me for a few minutes, on first read. I'll edit the docs. The idea is that one usually only specifies one ""delta correction"" in a string, ie:; ```; mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz; ```; as opposed to trying to do two delta corrections in a ""method/basis"" syntax (which is not supported):; ```; hf/cc-pv[q5]z+D:mp2/cc-pv[tq]z+D2:ccsd(t)/cc-pvtz; ```; Folks that want to pile on the deltas can use the old interface (with scf, corl, delta and delta2 stages) or the cbs_metadata interface, which doesn't have a limit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793:391,Validat,ValidationError,391,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793,1,['Validat'],['ValidationError']
Security,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:726,secur,security,726,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930,2,['secur'],['security']
Security,> Which version of numpy do you use. I use the 1.20.3. same.; ```; conda list; # packages in environment at /home/psilocaluser/toolchainconda/envs/py39b:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 4.5 1_gnu ; apipkg 1.5 py39h06a4308_0 ; appdirs 1.4.4 py_0 ; argon2-cffi 20.1.0 py39h27cfd23_1 ; async_generator 1.10 pyhd3eb1b0_0 ; attrs 20.3.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyhd3eb1b0_0 ; binutils_impl_linux-64 2.33.1 he6710b0_7 ; binutils_linux-64 2.33.1 h9595d00_15 ; black 21.4b2 pyhd8ed1ab_0 conda-forge; blas 1.0 mkl ; bleach 3.3.0 pyhd3eb1b0_0 ; boost 1.73.0 py39h06a4308_11 ; bzip2 1.0.8 h7b6447c_0 ; ca-certificates 2021.7.5 h06a4308_1 ; certifi 2021.5.30 py39h06a4308_0 ; cffi 1.14.5 py39h261ae71_0 ; click 7.1.2 pyhd3eb1b0_0 ; cmake 3.19.6 h973ab73_0 ; dataclasses 0.8 pyhc8e2a94_1 conda-forge; dbus 1.13.18 hb2f20db_0 ; decorator 4.4.2 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd3eb1b0_0 ; dftd3 3.2.1 h84218bc_2 psi4/label/dev; dftd4 v3.3.0 py39h1d74c00_0 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; eigen 3.3.7 hfd86e86_0 ; entrypoints 0.3 py39h06a4308_0 ; execnet 1.8.0 pyhd3eb1b0_0 ; expat 2.2.10 he6710b0_2 ; fontconfig 2.13.1 h6c09931_0 ; freetype 2.10.4 h5ab3b9f_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4/label/dev; gcc_impl_linux-64 7.3.0 habb00fd_1 ; gcc_linux-64 7.3.0 h553295d_15 ; gcp 2.0.2 he991be0_2 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; geometric 0.9.7.2 py_0 conda-forge; gfortran_impl_linux-64 7.3.0 hdf63c60_1 ; gfortran_linux-64 7.3.0 h553295d_15 ; glib 2.68.2 h36276a3_0 ; gmp 6.2.1 h2531618_2 ; gst-plugins-base 1.14.0 h8213a91_2 ; gstreamer 1.14.0 h28cd5cc_2 ; gxx_impl_linux-64 7.3.0 hdf63c60_1 ; gxx_linux-64 7.3.0 h553295d_15 ; hdf5 1.10.6 hb1b8bf9_0 ; icu 58.2 he6710b0_3 ; importlib-metadata 3.7.3 py39h06a4308_1 ; importlib_metadata 3.7.3 hd3eb1b0_1 ; importlib_resources 5.1.2 py39h06a4308_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.3.0 h06a4308_3350 ; ipykernel 5.3.4 py39hb070fc8_0 ; ipython 7.22.0 py39hb070fc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:641,certificate,certificates,641,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127,1,['certificate'],['certificates']
Security,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258535598:79,Integrity,Integrity,79,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598,1,['Integrity'],['Integrity']
Security,"> please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was [dftd3/simple-dftd3#35](https://github.com/dftd3/simple-dftd3/issues/35) . I'd have to see your versions to gauge susceptibility. packages in environment at /home/gang/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 5.1 1_gnu ; ambit 0.6 py39h53dec33_2 psi4; attrs 22.1.0 py39h06a4308_0 ; blas 1.0 mkl ; brotlipy 0.7.0 py39h27cfd23_1003 ; ca-certificates 2022.10.11 h06a4308_0 ; certifi 2022.9.24 py39h06a4308_0 ; cffi 1.15.1 py39h5eee18b_3 ; charset-normalizer 2.0.4 pyhd3eb1b0_0 ; chemps2 1.8.11 hbe8a562_0 psi4; conda 22.11.1 py39h06a4308_4 ; conda-package-handling 1.9.0 py39h5eee18b_1 ; cryptography 38.0.1 py39h9ce1e76_0 ; dftd3 3.2.1 h84218bc_2 psi4; dftd4 v3.3.0 py39h758d17c_2 psi4; dkh 1.2 h173d85e_2 psi4; flit-core 3.6.0 pyhd3eb1b0_0 ; fockci 0.2.0 pyh681c21d_0 psi4; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.6 hb1b8bf9_0 ; idna 3.4 py39h06a4308_0 ; importlib-metadata 4.11.3 py39h06a4308_0 ; importlib_metadata 4.11.3 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ld_impl_linux-64 2.38 h1181459_1 ; libecpint 1.0.7 hfebba4c_0 psi4; libefp 1.5.0 h117b10a_4 psi4; libffi 3.4.2 h6a678d5_6 ; libgcc-ng 11.2.0 h1234567_1 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgfortran4 7.5.0 ha8ba4b0_17 ; libgomp 11.2.0 h1234567_1 ; libint2 2.7.1 h2fe1556_15 psi4; libstdcxx-ng 11.2.0 h1234567_1 ; libxc 5.2.3 hfebba4c_0 psi4; mkl 2021.4.0 h06a4308_640 ; mkl-service 2.4.0 py39h7f8727e_0 ; mkl_fft 1.3.1 py39hd3c417c_0 ; mkl_random 1.2.2 py39h51133e4_0 ; mp2d 1.1.0 hfd86e86_0 psi4; msgpack-python 1.0.3 py39hd09550d_0 ; ncurses 6.3 h5eee18b_3 ; networkx 2.8.4 py39h06a4308_0 ; numpy 1.20.0 pypi_0 pypi; openssl 1.1.1s h7f8727e_0 ; optking 0.2.1 pyhbc12335_1 psi4; packaging 21.3 pyhd3eb1b0_0 ; pcmsolver 1.2.1.1 py39h92d4a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028:493,certificate,certificates,493,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028,1,['certificate'],['certificates']
Security,">>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py ; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5802,hash,hash,5802,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['hash'],['hash']
Security,">It would be nice for the users to have a memory estimate and check at some point.; Unless adcc does the checking itself. I agree, but so far we do not have this feature in adcc and we don't check. If you run low on memory adcc will more or less just fail. It's a little tricky to estimate that beforehand in adcc due to the lazy import and computational nature of adcc, importing things only as needed. I could be very crude and come up with something rough for the workflows exposed to psi4, but I'd rather think about this more properly and do it at a later point, unless you think it's a major blocker.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-553307162:477,expose,exposed,477,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553307162,1,['expose'],['exposed']
Security,"@CDSherrill I was under the impression that psio was going to be completely removed, but if the plan is to replace the internals and keep psio around as the abstraction layer then there is no need for DPD to implement one. However we do need DPD to insulate its user. Since the DPD instances rely on files being open/closed externally any other code using any DPD instance that does not properly ensure files are managed will leave all DPD instances in an invalid state. This is especially important for exposing amplitude access py side since in theory those accessor methods could be called at any point after a handle to the ccwfn is obtained. I guess what I really meant by that point wasn't that something needs to go in between DPD <-> PSIO, rather that DPD shouldn't be passing responsibility over management of an implementation detail on to it's users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423279853:523,access,access,523,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423279853,2,['access'],"['access', 'accessor']"
Security,"@amjames You can probably get around the constness of the `Da` attribute. Or easier, if slightly annoying, you can use the Wavefunction `set_array(""OPDM"", opdm_)` function which will set the Matrix which can then be accessed Python side through `get_array(""OPDM"")` and then use numpy functions to to set it back to Da. ``` python; opdm = ...; ref_wfn = ..; for h in range(nirrep):; ref_wfn.Da().nph[h][:] = opdm.nph[h][:]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258902901:216,access,accessed,216,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258902901,1,['access'],['accessed']
Security,"@amjames, to my knowledge there is not yet a detailed plan about I/O ... your comments gave me an excuse to bring up the topic prior to our next developers' meeting. What you're saying about DPD makes sense to me... the users of DPD shouldn't have to worry about opening/closing files themselves, DPD should handle these details for them. I didn't realize or remember that it didn't already handle this. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 2:07:40 PM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: Re: [psi4/psi4] Coupled Cluster Rewrite (#1247). @CDSherrill<https://github.com/CDSherrill> I was under the impression that psio was going to be completely removed, but if the plan is to replace the internals and keep psio around as the abstraction layer then there is no need for DPD to implement one. However we do need DPD to insulate its user. Since the DPD instances rely on files being open/closed externally any other code using any DPD instance that does not properly ensure files are managed will leave all DPD instances in an invalid state. This is especially important for exposing amplitude access py side since in theory those accessor methods could be called at any point after a handle to the ccwfn is obtained. I guess what I really meant by that point wasn't that something needs to go in between DPD <-> PSIO, rather that DPD shouldn't be passing responsibility over management of an implementation detail on to it's users. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247#issuecomment-423279853>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9QdoFCG1HVF9-VktlmDeetttgktmX6ks5uc9lsgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918:1189,access,access,1189,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918,2,['access'],"['access', 'accessor']"
Security,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235131408:69,secur,security,69,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408,2,['secur'],['security']
Security,@bozkaya What is the commit hash for the version of Psi4 that you have?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258466734:28,hash,hash,28,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258466734,1,['hash'],['hash']
Security,"@bozkaya, I've just rebased and force-pushed to remove a conflict, so this branch should be good to go for whenever you care to proceed. Let me know if you have any problems accessing it. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-443764684:174,access,accessing,174,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-443764684,1,['access'],['accessing']
Security,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266893399:321,access,accessible,321,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399,1,['access'],['accessible']
Security,@dgasmith I have fixed VMFC gradients and added three long tests to validate the computation of nbody gradients.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-433243666:68,validat,validate,68,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-433243666,1,['validat'],['validate']
Security,"@dgasmith I just gave you access. Sorry, I was on vacation for the last two weeks without laptop access.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-264890664:26,access,access,26,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264890664,2,['access'],['access']
Security,@dgasmith I think right now returning the dimer SCF wavefunction is fine. It gives the user easy access to it in case more computations are required. If there are other requests from users/developers in the future we could consider it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184963064:97,access,access,97,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184963064,1,['access'],['access']
Security,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:241,inject,inject,241,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896,2,"['Expose', 'inject']","['Expose', 'inject']"
Security,"@dgasmith Would you prefer I sub out all `core.set_variable(...)` with `wfn.set_variable(...)` or just ensure that all variables set are also bound to the wavefunction? I've was about to commit the latter as I've just got that working properly, but I'm not sure how important it is to keep access to the psivars w/ `P::e`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952#issuecomment-380454214:290,access,access,290,https://psicode.org,https://github.com/psi4/psi4/pull/952#issuecomment-380454214,1,['access'],['access']
Security,"@dgasmith, is just the Ne test enough? I don't have ORCA, but I have access to G09.D01 (SOGGA, SOGGA11-X, M06-L, MN12-L) and a colleague of mine has G16 (MN15, MN15-L and PBE0-DH), that should be good enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/904#issuecomment-362349573:69,access,access,69,https://psicode.org,https://github.com/psi4/psi4/pull/904#issuecomment-362349573,1,['access'],['access']
Security,"@dgasmith, it works with `LLVM` (#1264) and the sanitizers cannot find anything. I think, this is a `MSVC` bug or something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238#issuecomment-425941121:48,sanitiz,sanitizers,48,https://psicode.org,https://github.com/psi4/psi4/pull/1238#issuecomment-425941121,1,['sanitiz'],['sanitizers']
Security,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355376217:126,access,accessible,126,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217,1,['access'],['accessible']
Security,@fevangelista psi4/psi4@c8b3767e76e4e76c54dec2004b961025fac1afa6 hopefully fixes your troubles. @loriab I do not unfortunately know what's the procedure for the private/public sync (I might not even be authorized to do it),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171104138:202,authoriz,authorized,202,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171104138,1,['authoriz'],['authorized']
Security,"@hokru, @jturney, @AlexHeide, @susilehtola, @bennybp, and anyone else interested/knowledgeable about containers:. I've got a proof-of-principle building in GHA at https://github.com/psi4/docker-expt . It seems to be successful at building a linux docker container from a conda environment.yaml, uploading it to dockerhub (https://hub.docker.com/repository/docker/psi4/clockbox/general), running smoke tests on the image, building an apptainer from the docker, and doing nothing with the sif file. This is all based on a tutorial https://docs.docker.com/build/ci/github-actions/ (hence the `clockbox`es) and modeled on some files that Ben is using (operational docker file is the `Dockerfile-BPP` one). So far it's gone remarkably smoothly for me not knowing what I'm doing. At this point, other than cleaning up names, what else shall I do to improve it? If anyone wants edit access to the repo to fix it up, just let me know. A few points:; * I think we can stick with just Linux for the v1.8; * Where should the apptainer image be sent?; * Should there be a container for each py version or do ppl not care since layers are independent?. Thanks for any guidance and edits.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951:876,access,access,876,https://psicode.org,https://github.com/psi4/psi4/issues/2951,1,['access'],['access']
Security,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356771661:194,access,access,194,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661,1,['access'],['access']
Security,@kannon92 Can you give me access to your repository so I can clean up the last few details?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-264881934:26,access,access,26,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264881934,1,['access'],['access']
Security,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:111,inject,injection,111,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,1,['inject'],['injection']
Security,"@loriab . Yes, *MSVC* is not very sophisticated in this matter. For our distributed computing project, we will just build a separate *Psi4* for each instruction set (SSE2, AVX, AXV2). For a public distribution, I don't know a better solution. Ideally, it could be rebuild with the Intel compiler, but I don't access to it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411690608:309,access,access,309,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411690608,1,['access'],['access']
Security,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241027531:262,access,access,262,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531,1,['access'],['access']
Security,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:331,access,access,331,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['access'],['access']
Security,@loriab somewhere between difficult and impossible due to the remote access policy here :(,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405016692:69,access,access,69,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405016692,1,['access'],['access']
Security,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1334,access,access,1334,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879,1,['access'],['access']
Security,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:905,access,accessing,905,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,1,['access'],['accessing']
Security,"@mzott When you use the python side molden driver passing `density_a` or `density_b`it will generate molden files for the natural orbitals, the occupancies of the NOs will be determined at the same time as the natural orbitals are computed (via diagonalization of the provided density matrices). When densitites aren't provided the molden driver is going to generate a file with the canonical molecular orbitals and take the occupations from the `occupation_a/b` functions. In both cases the same method you mention in write.cc is used to write the data to file. The method and the class it belongs to are exposed python side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300684695:606,expose,exposed,606,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300684695,1,['expose'],['exposed']
Security,"@raimis Yes, either the `pytest` command you show or `make pytest` will do. Right now you're only running the smoke pytests (which admittedly for a long time were all there were) https://github.com/psi4/psi4/blob/master/psi4/extras.py#L158 . It'd be good to run them all. I probably ought to make a `psi4 --fulltests` for yet another mode of access. If you'd prefer that, I can do that quickly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444546373:342,access,access,342,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444546373,1,['access'],['access']
Security,"@tomspur Have you gotten a chance to look at my last comments or begun work on any of those changes? @robertodr and myself are prepared to complete the work needed to get this feature working as it would be a great step forward for improving the api of the CC codes. . We could submit PRs to your working branch if you are able to merge, you could give us access to push directly to this branch, or a third option if you don't plan on working on this any further we could open a new PR (retaining the commits you have already authored of course) to complete the feature. . Please let us know how you would prefer we proceed, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-422007222:356,access,access,356,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-422007222,1,['access'],['access']
Security,"@tzyii, good to know. but I'll need `conda list`, `ldd --version`, `which conda python psi4`, `cat /proc/cpuinfo | grep flags`, OS info, and `ldd -v CONDA_PREFIX/lib/pyth.../site-packages/psi4/core.so` to have any real hope of diagnosing. Or login access.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405825074:248,access,access,248,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405825074,1,['access'],['access']
Security,"@wadejong, the trick is that some of our codes can't handle symmetry, so; frequently users ask for C1 even though they really don't mean it, due to; parts of the code being C1 only (although maybe some recent code I added; fixes this?). Most of these users will want the symmetric solution because; it tends to be more free of unphysical values for properties like; vibrational frequencies. The situation is analogous to running a closed shell molecule with UHF. It; will always give the RHF solution, not a UHF solution, unless the user; intervenes and deliberately breaks the alpha / beta symmetry that is; naturally there. Some programs have special keywords to do this. Or do; you automatically mix alpha and beta in NWChem when a user asks for UHF on; a closed shell molecule?. On Dec 5, 2017 7:52 PM, ""Bert de Jong"" <notifications@github.com> wrote:. Communicating with Daniel, the challenge is that the solver somehow was; sticking to a symmetry solution inherent in the molecule, this while a no; symmetry solution was requested. I would expect a symmetry broken solution; if I tell the calculation to assume a symmetry lower than possible; (assuming there is a lower energy solution in the symmetry broken case). > On Dec 5, 2017, at 4:46 PM, Lori A. Burns <notifications@github.com>; wrote:; >; > FYI, @wadejong. Are you more concerned with accessing the symmetry-broken; sol'n (perhaps through geometry tweaks or stability analysis) or with it; being the default sol'n?; >; > —; > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or mute the thread.; >. —; You are receiving this because you commented. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/875#issuecomment-349492637>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdkqkvy84OvbrJRm6E6z73AM6ZWBXks5s9eU_gaJpZM4Q25IB>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349516046:1351,access,accessing,1351,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349516046,1,['access'],['accessing']
Security,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-185192172:275,access,access,275,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172,2,"['access', 'firewall']","['access', 'firewall']"
Security,"@zachglick Nice job! Are you still working on this? How difficult would it be to wire it up with the Python interface, to expose PNOs and integrals in Python?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591:122,expose,expose,122,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591,1,['expose'],['expose']
Security,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:157,inject,inject,157,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503,1,['inject'],['inject']
Security,"A fresh compile of psi4 1.9.1 on Fedora (yay, finally updating from 1.3.2!) fails to run; all the tests fail with the error; ```; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Exit Status: overall (1); ```; which suggests that there is critical path code that is accessing a `std::vector` out-of-bounds. All Fedora packages are compiled with the following default optimization flags; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Wno-complain-wrong-lang -Werror=format-security -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=3 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214:491,access,accessing,491,https://psicode.org,https://github.com/psi4/psi4/issues/3214,2,"['access', 'secur']","['accessing', 'security']"
Security,"Aaah, great work! If it's fortran direct access, rather than DPD, that should hopefully be easy to cure with some `close` statements in the plugin 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600:41,access,access,41,https://psicode.org,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600,1,['access'],['access']
Security,Access to terms in the MP2 energy from Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642:0,Access,Access,0,https://psicode.org,https://github.com/psi4/psi4/issues/642,1,['Access'],['Access']
Security,"Actually, as defined above, the M11 dictionary should raise a validation error, see section 2b of `check_consistency()`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383216051:62,validat,validation,62,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383216051,1,['validat'],['validation']
Security,Add TD-DFT psivar access pattern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2506:18,access,access,18,https://psicode.org,https://github.com/psi4/psi4/pull/2506,1,['access'],['access']
Security,"Add a new method in `share/python/procedures/proc_table.py:172` that links to a function in `share/python/procedures/proc_table.py:1710` (line number approximate) that should mimic `run_scf_gradient` right above that line. Make sure to raise a Validation error for non-RHF and DFT references for now. The Hessian should then run assuming some untested code works as expected. For frequencies: when we use finite difference Hessians its easy to assign different frequencies to different symmetries, without that it becomes much more difficult. You can guess which frequency applies to which frequency, but you cannot be certain in some cases. @loriab Do you remember the conclusion of this? I think we might have to insert our new thermo module for this. @bwb314 Hows the NumPy thermo module coming?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230648867:244,Validat,Validation,244,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230648867,1,['Validat'],['Validation']
Security,Add one body integral access,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['access'],['access']
Security,"After #953 and py-side molecule parsing, this magnesium returns `ValidationError: First line must be Cartesian or single atom.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/731#issuecomment-410339120:65,Validat,ValidationError,65,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-410339120,1,['Validat'],['ValidationError']
Security,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:83,Validat,ValidationError,83,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081,1,['Validat'],['ValidationError']
Security,"Ah wonderful! Yes, `sup.set_vv10_b()` is what I was looking for. I also (finally) found [api/psi4.core.SuperFunctional](http://www.psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html); for a good overview what is accessible. DFT-NL (nl=non-local) is just like DFT-D, where the _b_ parameter of the VV10 kernel is fitted to an arbitrary functional. Ideally I would like to add an automatic detection similar to the -D dashparam in superfuncs.py to an eventual PR.; Though I am wondering if it is a good idea to piggy-back on the -D part and extent it to -NL or to make something separate. It would make sense to add the non-local dispersion to the 'empirical' dispersion. This is mostly a design choice, i suppose. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348128880:226,access,accessible,226,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348128880,1,['access'],['accessible']
Security,"Ah, NumPy issue. Needs a rebuild after Psi4 1.3.2 release since NumPy fixed a security bug and broke quite a few downstream repos. You can try downgraded NumPy by one patch version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492354867:78,secur,security,78,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492354867,1,['secur'],['security']
Security,"Aha, that makes perfect sense -- none of the Psi4 developers have access to BrianQC anymore. Lmk if the fix in #3186 isn't what you were suggesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3185#issuecomment-2179692899:66,access,access,66,https://psicode.org,https://github.com/psi4/psi4/issues/3185#issuecomment-2179692899,1,['access'],['access']
Security,"All comments addressed. Unfortunately, I need to filter out renamed methods before any checks of the derivative type, since that raises a validation error if the method is invalid. Hence I need to catch the error in multiple branches of `gradient`. Isn't recursive driver wonderful?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591:138,validat,validation,138,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591,1,['validat'],['validation']
Security,"All right, I believe all outstanding issues up to this point have been resolved! As of recent, all checks and queries based on GauXC's AM (e.g., L2 cross-validation) are now conducted at runtime instead of compile-time, GauXC GPU memory allocation is user-controllable, and the build system is set up to propogate `CMAKE_CUDA_ARCHITECTURES` to GauXC in a reasonable fashion. Current issues in CI seem to revolve around problems with finding a suitable `basis_set_exchange` package to use for configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429:154,validat,validation,154,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429,1,['validat'],['validation']
Security,"Also, regarding cache types, LOW is only the default for `ccenergy`, because it's the only code for which I built statistics on how frequently specific data were accessed. Otherwise, LRU is used for all other CC codes. The docs are misleading on this point.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734:162,access,accessed,162,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734,1,['access'],['accessed']
Security,"Also; ```; mol = psi4.core.Molecule.from_arrays([0, 0, -0.01, 0, 0, 0.01], elez=[2,2]); activate(mol); set basis ugbs; energy('scf'); ```; fails with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0)]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132:179,Validat,ValidationError,179,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132,1,['Validat'],['ValidationError']
Security,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:219,access,access,219,https://psicode.org,https://github.com/psi4/psi4/pull/1393,5,['access'],['access']
Security,Analytic Hessian Memory Validation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297:24,Validat,Validation,24,https://psicode.org,https://github.com/psi4/psi4/issues/2297,1,['Validat'],['Validation']
Security,"Apologies if this is off the development timeline or out of left field. The psi4 plugin system is excellent, and it's one of the really cool unique features of the package. One way to make it even better would be if it didn't require having access to the source to compile a plugin. Currently, all the static archives stay inside the object directory and are not installed to `prefix`, which means that when the plugins need to link against psi4, they link against the archives in the object directory, and the psi4 binary embeds the location of the source and build directory to use when generating an example plugin makefile. It would be nice to copy the archives to `$PREFIX/lib` instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162:241,access,access,241,https://psicode.org,https://github.com/psi4/psi4/issues/162,1,['access'],['access']
Security,"As a note to everyone working on this, please push and pull to this branch. Let me know if you do not have access and give us a heads up before rebasing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-437981646:107,access,access,107,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-437981646,1,['access'],['access']
Security,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205094545:520,validat,validated,520,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545,1,['validat'],['validated']
Security,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201#issuecomment-169689686:35,access,accessible,35,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686,1,['access'],['accessible']
Security,Because I wanted to access certain variants I did some work towards this on a local branch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1835#issuecomment-815586442:20,access,access,20,https://psicode.org,https://github.com/psi4/psi4/issues/1835#issuecomment-815586442,1,['access'],['access']
Security,"Building from ToT in conda at home, I can confirm that `initialize_lebedev` in fact is never called... it's optimized straight out of the code! (I couldn't find anywhere where it got called, so I am not surprised). ```; (base) liz@Gaston:~/Development/psi4/objdir/stage/tests$ nm ../lib/psi4/core.cpython-38-x86_64-linux-gnu.so | grep lebedev; 00000000020dbe80 b _ZN3psi13SphericalGrid16lebedev_mapping_E; ```. Doing the same breakpoint tests using the line-numbers in ToT cubature.cc, I can also see that `initialize_lebedev` is never called, and `lebedev_mapping_` ends up with no entries in it when it's first accessed. Will work on a patch now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371:613,access,accessed,613,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371,1,['access'],['accessed']
Security,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:964,validat,validate,964,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,1,['validat'],['validate']
Security,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281235825:525,access,access,525,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825,2,['access'],['access']
Security,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239211359:847,inject,injecting,847,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359,1,['inject'],['injecting']
Security,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809#issuecomment-334001557:74,validat,validation,74,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557,1,['validat'],['validation']
Security,"CSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/pro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:8044,Validat,ValidationError,8044,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['Validat'],['ValidationError']
Security,"Can the average github user create a handful of private projects and then; invite certain collaborators to have access? If so, then I think this; would suffice as a replacement for the centralized private repo. David. On Fri, Oct 28, 2016 at 3:36 PM, jgonthier notifications@github.com wrote:. > @loriab https://github.com/loriab: Killing it off is fine with me. My; > only concern was the ability to work on a private project, but Github; > allows us to create our own private copy of the repository (through; > duplication, I believe). So if that's right, there is no reason to get; > through the hassle of maintaining private for everyone.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-257009273, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdld-VE3iH81lv7sYM5MwAR5wk2oWks5q4k6lgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-257019349:112,access,access,112,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-257019349,1,['access'],['access']
Security,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276601209:23,access,access,23,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209,1,['access'],['access']
Security,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:1000,validat,validation,1000,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['validat'],['validation']
Security,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295524802:225,access,accessing,225,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802,1,['access'],['accessing']
Security,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:46,expose,expose,46,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214,3,['expose'],['expose']
Security,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:279,access,accessed,279,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,3,['access'],"['access', 'accessed']"
Security,"Closes #2735 . Previously, `initialize_lebedev` was never called, and in fact was getting optimized out of the module completely upon compilation. When `lebedev_mappping_[]` is then accessed across multiple OpenMP threads, the std::map is empty, and a deadlock can happen where two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:182,access,accessed,182,https://psicode.org,https://github.com/psi4/psi4/pull/2736,3,['access'],"['access-write', 'accessed', 'accesses']"
Security,"Communicating with Daniel, the challenge is that the solver somehow was sticking to a symmetry solution inherent in the molecule, this while a no symmetry solution was requested. I would expect a symmetry broken solution if I tell the calculation to assume a symmetry lower than possible (assuming there is a lower energy solution in the symmetry broken case). > On Dec 5, 2017, at 4:46 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > FYI, @wadejong. Are you more concerned with accessing the symmetry-broken sol'n (perhaps through geometry tweaks or stability analysis) or with it being the default sol'n?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349492637:490,access,accessing,490,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349492637,1,['access'],['accessing']
Security,Compile plugins without access to source directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/174:24,access,access,24,https://psicode.org,https://github.com/psi4/psi4/pull/174,1,['access'],['access']
Security,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867:1372,Validat,ValidationError,1372,https://psicode.org,https://github.com/psi4/psi4/issues/867,2,['Validat'],['ValidationError']
Security,"Condense MP2, Sanitize Spin Scaling: OCC's Open-Heart Surgery III",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789:14,Sanitiz,Sanitize,14,https://psicode.org,https://github.com/psi4/psi4/pull/1789,1,['Sanitiz'],['Sanitize']
Security,Consolidate https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/local2.cc into https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/local.cc. The goal is to get straightforward access to the IBO localizer without the need to go into the fsapt name space.; A new subclass would need to be created for IBO. Tentatively labeled as _new_dev_ but not very familiar with the code base.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2379:198,access,access,198,https://psicode.org,https://github.com/psi4/psi4/issues/2379,1,['access'],['access']
Security,"Correct, I need to symmetrize individual intermediates in the gradient expression that get printed. Now that you mention it, I think moving more of the driver portion of DFOCC Py-side is the way to go. All I'd need to move is `dfgrad.cc` into `proc.py:run_dfocc_gradient`. `proc.py:run_dfocc_gradient` has access to the input molecule, so it can `symmetrize_gradient` correctly. Does this sound good? It may need to be its own PR, separate from the 1143 fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-459074235:306,access,access,306,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459074235,1,['access'],['access']
Security,"Could you implement a specific SCFConvergenceErrors similar to OptimizationConvergenceError such that the exception provides access to the wfn or the geometry of the input?. This would allow users to catch the exception and retry the SCF with different options.; Something like this:; try:; optE, optWfn = optimize(optMethod, return_wfn=True); except SCFConvergenceError as e:; optWfn = e.wfn; # let try again:; optE, optWfn = optimize(optMethod, return_wfn=True); print(""SCF did not converge"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1062:125,access,access,125,https://psicode.org,https://github.com/psi4/psi4/issues/1062,1,['access'],['access']
Security,"Couldn't see anything obviously wrong on first pass through. I wonder if the EXTERN stuff is best handled by having a C++ class that's exposed using pybind11, so that it can be constructed py-side but easily stored in wfn. That way we wouldn't be passing a py object around. This is really great stuff - some long overdue cleanup and standardization in here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-309296744:135,expose,exposed,135,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-309296744,1,['expose'],['exposed']
Security,Create and Python-expose functions for the DF deriv integrals,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2088:18,expose,expose,18,https://psicode.org,https://github.com/psi4/psi4/pull/2088,1,['expose'],['expose']
Security,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:257,hash,hash,257,https://psicode.org,https://github.com/psi4/psi4/issues/1986,1,['hash'],['hash']
Security,"DF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:8629,Validat,ValidationError,8629,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['Validat'],['ValidationError']
Security,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936:694,Validat,ValidationError,694,https://psicode.org,https://github.com/psi4/psi4/issues/936,2,['Validat'],['ValidationError']
Security,"Dear all,. I am trying to compile psi4 on a supercomputer, which i don't have a root access to. It is based on Xeons and has the following software avaliable: . gcc/5.2.0, pgi/12.9. intel/13.1.0, intel/15.0.090. mkl/4.0.2.146, mkl/11.2.0. impi/4.0.3, impi/4.1.0-32bit, impi/4.1.0, impi/4.1.0-ofa, impi/5.0.1, impi/5.0.1-ofa. openmpi/1.5.5-gcc, openmpi/1.5.5-icc, openmpi/1.8.4-gcc, openmpi/1.8.4-icc, openmpi/1.6.5-gcc, openmpi/1.6.5-icc. I choosed impi/5.0.1 and mkl/11.2.0.; I have tried to use both intel compiler versions to compile ""master"" and ""0.3 release from 5 Aug 2015"" versions. All times I have failed. With the intel/15.0.090 compilers it even fails on the ./setup script as follows:. CMake Error: Unable to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Debug/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Development/cmTC_e39a7. And with the intel/13.1.0 compilers ./setup runs successfully. To avoid crushes I have changed -std=g++98 to -std=c++11 in the CMAKE_CXX_FLAGS:STRING in the CMakeCache.txt and followed the post http://forum.psicode.org/t/undefined-git-version/61/3 in case of ""0.3 release"". Thus in case of both versions of psi4 using the intel/13.1.0 compilers I have ended with:. ..........; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_efp.cc.o; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_cubeprop.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/clean.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/create_new_plugin.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/script.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/set_memory.cc.o; [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:85,access,access,85,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['access'],['access']
Security,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-132368809:444,confidential,confidential,444,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809,1,['confidential'],['confidential']
Security,"Do you happen to have access to v5 ORCA, @annulen? My orca is quite old -- v3.6. If you could generate ref values for this system perhaps https://github.com/psi4/psi4/blob/master/psi4/share/psi4/databases/S22.py#L695-L708 (monoA, monoB, dimer), that'd be a great help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2850#issuecomment-1831287726:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/issues/2850#issuecomment-1831287726,1,['access'],['access']
Security,"Do you happen to know if there's a lit citation for extrapolating the def2 basis sets or if they need a different extrapolation formula? I know Orca does def2 extrapolations; I've just never looked up how or what procedure they use. I'd defer the -PP fallbacks from this PR. That means changing the basis set compositing which is a huge pain. I'm hoping the MolSSI basisset project can be API-accessed to cover this (very sensible) case. Hand-pieced, other program, or `energy(cbs, ...)` call with calculator spot-checks will do fine for tests. If def2's need their own extrapolation formula, tests should probably check that those default correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381265832:393,access,accessed,393,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381265832,1,['access'],['accessed']
Security,"Do you want me to fix it up, or do you want to give it a try? The below should do the trick. ```; # on master; git checkout -b moldennormco; # last commit should be ""Fix typo in doc and specify non-mass-weighted/normalized normal modes""; git pull --rebase upstream master; # last commit should be ""Fix typo ..."" and ; # first non-you commit should be ""Merge pull request #641 "" with hash 0c08 ; # (from https://github.com/psi4/psi4/commits/master); git push origin moldennormco:master; # fails because you're trying to rewrite published history; git push -f origin moldennormco:master; # success; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286614076:383,hash,hash,383,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286614076,1,['hash'],['hash']
Security,Documentation fails to build with perl 5.22 and reports the following error:. Can't use 'defined(%hash)' (Maybe you should just omit the defined()?); at /build/psi4-0.3/doc/sphinxman/document_options_c.pl line 150.; doc/sphinxman/CMakeFiles/sphinxman.dir/build.make:106: recipe for; target 'doc/sphinxman/source/autodoc_abbr_options_c.rst' failed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/200:98,hash,hash,98,https://psicode.org,https://github.com/psi4/psi4/pull/200,1,['hash'],['hash']
Security,"ED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; > fnocc_wfn = core.fn",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:9746,Validat,ValidationError,9746,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['Validat'],['ValidationError']
Security,Even c-side Mol manipulation has very little (no?) need to access `CoordEntry`/`CoordValue` directly. I'd leave them hidden unless a need arises.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444528303:59,access,access,59,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444528303,1,['access'],['access']
Security,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260369576:66,access,access,66,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576,1,['access'],['access']
Security,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:100,access,accessible,100,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382,1,['access'],['accessible']
Security,Expose C_DGELS via PSI_API,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2356:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/2356,1,['Expose'],['Expose']
Security,Expose P::e.options in Python.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/720,1,['Expose'],['Expose']
Security,Expose class Slice as PSI_API.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1028:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1028,1,['Expose'],['Expose']
Security,Expose flexible cube generation to Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['Expose'],['Expose']
Security,Expose good chunks of libmints and libciomr to plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1400,1,['Expose'],['Expose']
Security,Expose reset_subspace to C++ for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2437:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/2437,1,['Expose'],['Expose']
Security,Expose wavefunction and amplitudes to python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:0,Expose,Expose,0,https://psicode.org,https://github.com/psi4/psi4/pull/1061,1,['Expose'],['Expose']
Security,"FWIW the default compiler flags in Fedora 35 x86_64 are; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection; ```; which also includes the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. These flags were made default in 2019, see https://fedoraproject.org/wiki/Changes/HardenedCompiler for the rationale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1025977577:160,secur,security,160,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1025977577,1,['secur'],['security']
Security,"FYI Reviewers: the `tdscf_excitations` driver code [here](https://github.com/psi4/psi4/pull/1349/files#diff-341c62f24f732e5bdaaef3c16b0fa970R281) is not intended to be complete. I did some work on it before I realized that there were problems preventing a complete implementation. Some kwargs only accept one value, and are not fully validated which is something that can be added once the module is feature complete. I left it in so curious users had an entry point to experiment with and future work on the module can improve it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-454810480:334,validat,validated,334,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-454810480,1,['validat'],['validated']
Security,"FYI, @susilehtola the site has been unreachable for me all afternoon and still is. Just letting you know in case it's a misconfigured firewall or something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1688#issuecomment-515613120:134,firewall,firewall,134,https://psicode.org,https://github.com/psi4/psi4/pull/1688#issuecomment-515613120,1,['firewall'],['firewall']
Security,"FYI, @wadejong. Are you more concerned with accessing the symmetry-broken sol'n (perhaps through geometry tweaks or stability analysis) or with it being the default sol'n?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349491583:44,access,accessing,44,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349491583,1,['access'],['accessing']
Security,Fix an invalid memory access in psi::CIWavefunction::sem_iter,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/pull/1441,1,['access'],['access']
Security,Fix invalid memory access in psi::IntegralTransform::presort_so_tei,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1469,1,['access'],['access']
Security,Fix invalid memory access in psi::ROHF::Hx,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1489,1,['access'],['access']
Security,Fix invalid memory access in psi::cceom::get_moinfo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1422:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1422,1,['access'],['access']
Security,Fix invalid memory access in psi::sapt::SAPTDFInts and psi::sapt::Iterator,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238:19,access,access,19,https://psicode.org,https://github.com/psi4/psi4/pull/1238,1,['access'],['access']
Security,"For the most part, we let CMake figure out `-lm`. We'll try to catch the clang warnings in a cleanup pass. If there's anything you'd like to submit a PR for, please do so. The dev community doesn't have a FreeBSD machine accessible. Thanks for packaging!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-381031400:221,access,accessible,221,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-381031400,1,['access'],['accessible']
Security,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:414,Validat,ValidationError,414,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['Validat'],['ValidationError']
Security,GitHub Workflows security hardening,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:17,secur,security,17,https://psicode.org,https://github.com/psi4/psi4/pull/2723,2,['secur'],['security']
Security,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122478325:735,confidential,confidential,735,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325,1,['confidential'],['confidential']
Security,"Hello Francesco.; I don't quite understand you. The only matrix determine orbital coefficients is [MO] section data of the MOLDEN file and different determinants have only different occupation numbers of there orbitals.; I only sort MO orbitals by energy if required before feed it into CASINO. I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2 hours when I will have access to the server. But you can also create these files easily from my inputs or you talk about some other matrices. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331875695:392,access,access,392,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331875695,1,['access'],['access']
Security,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804:1028,Validat,ValidationError,1028,https://psicode.org,https://github.com/psi4/psi4/issues/804,1,['Validat'],['ValidationError']
Security,Here is the `conda list`:; ```; (p4env) [henrique@dhcppc3 ~] $ conda list; # packages in environment at /home/henrique/bin/anaconda3/envs/p4env:; #; # Name Version Build Channel; ambit 0.2 he865b90_0 psi4/label/dev; atomicwrites 1.2.1 py36_0 ; attrs 18.2.0 py36h28b3542_0 ; blas 1.0 mkl ; ca-certificates 2018.03.07 0 ; certifi 2018.8.24 py36_1 ; chemps2 1.8.7 h8c3debe_2 psi4/label/dev; decorator 4.3.0 py36_0 ; deepdiff 3.3.0 py36_1 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; gau2grid 1.2.0 h035aef0_0 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; hdf5 1.10.2 hba1933b_1 ; intel-openmp 2019.0 118 ; jsonpickle 0.9.6 py36_0 psi4/label/dev; libedit 3.1.20170329 h6b74fdf_2 ; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 8.2.0 hdf63c60_1 ; libgfortran-ng 7.3.0 hdf63c60_0 ; libint 1.2.1 h87b9b30_4 psi4/label/dev; libstdcxx-ng 8.2.0 hdf63c60_1 ; libxc 4.0.2 h14c3975_1 psi4/label/dev; mkl 2019.0 118 ; mkl_fft 1.0.4 py36h4414c95_1 ; mkl_random 1.0.1 py36h4414c95_1 ; more-itertools 4.3.0 py36_0 ; ncurses 6.1 hf484d3e_0 ; networkx 2.1 py36_0 ; numpy 1.15.1 py36h1d66e8a_0 ; numpy-base 1.15.1 py36h81de0dd_0 ; openssl 1.0.2p h14c3975_0 ; pcmsolver 1.2.1 py36h8733eb9_0 psi4/label/dev; pip 10.0.1 py36_0 ; pluggy 0.7.1 py36h28b3542_0 ; psi4 1.3a1.dev470+d6effa8 py36hc72e644_0 psi4/label/dev; py 1.6.0 py36_0 ; pytest 3.8.0 py36_0 ; python 3.6.6 hc3d631a_0 ; readline 7.0 h7b6447c_5 ; setuptools 40.2.0 py36_0 ; simint 0.7 h642920c_1 psi4/label/dev; six 1.11.0 py36_1 ; sqlite 3.24.0 h84994c4_0 ; tk 8.6.8 hbc83047_0 ; wheel 0.31.1 py36_0 ; xz 5.2.4 h14c3975_4 ; zlib 1.2.11 ha838bed_2 ; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902379:292,certificate,certificates,292,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902379,1,['certificate'],['certificates']
Security,"Hi @JonathonMisiewicz . > Can TREXIO be extended to support other C++ types, such as complex or double?. `double` type is fully supported (it is the default for floats or can be explicitly accessed by using the `_64` suffix in the API). In fact, we fully support 32- and 64-bit integers and floats as well as strings and arrays of strings. The `complex` type is supported implicitly, namely the real and imaginary parts can be written in two independent calls to the TREXIO API. > If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?. Exactly, it is up to the user to decide which data to store. > Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?. I think you would need to modify a format for that, only items listed in the `trex.org` (`trex.json`) can be written since the source code of the library is auto-generated from the format specification. @scemama please correct me if I am wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470:189,access,accessed,189,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470,1,['access'],['accessed']
Security,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:195,access,access,195,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175,1,['access'],['access']
Security,"Hi @mkrompiec, thanks! I'm still working on local correlation methods in Psi4. This pull request is effectively done, and is only waiting on the official Psi4 1.4 release to be merged. I expect that to happen relatively soon, but I'm not sure of the exact timeline. . Once this pull request is merged in, it would be straightforward to expose PNOs and integrals to the Python layer. By the way, if you're interested in regular (non-DLPNO) two-electron integrals, those are easily accessible through the `MintsHelper` class, [as is done here.](https://github.com/psi4/psi4numpy/blob/1233d1af2d168f91065e4f7dbb1a96e02b95b6e1/Tutorials/01_Psi4NumPy-Basics/1e_mints-helper.ipynb)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414:336,expose,expose,336,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414,2,"['access', 'expose']","['accessible', 'expose']"
Security,"Hi Daniel, ; It would be a good idea to allow SAPT(DFT) calculations without the AC, but this does not seem to be a possibility at the moment as the GRAC shifts are needed and they need to be non-zero. . GRAC should be an optional part of the SAPT(DFT) calculation. And all parameters in GRAC should be user accessible (this is normally the case in other codes) so the way the splicing is done can be altered if needed. At present only the shifts are user-defined. This would allow range-separated functionals to be used in SAPT(DFT). Right now it does not seem like they can. ; Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/939:308,access,accessible,308,https://psicode.org,https://github.com/psi4/psi4/issues/939,1,['access'],['accessible']
Security,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300648648:86,access,accessible,86,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648,1,['access'],['accessible']
Security,"Hi Lori,. Thank you very much for your help. I have updated my tensor class. Further, I have added delte-MP2 corrections to the energy of the method, hence it is saved to PsiVar now. I think, you may add it public repo now. However, when try to make a push I got the following error:. remote: Permission to loriab/psi4.git denied to bozkaya.; fatal: unable to access 'https://github.com/loriab/psi4.git/': The requested URL returned error: 403. As I understand you should allow me to push my changes. Let me know if we need anything else. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988:360,access,access,360,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988,1,['access'],['access']
Security,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:25,hash,hashing,25,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085,1,['hash'],['hashing']
Security,"Hi loriab,. Thank you for your reply. I already have access to GCC 5.2.0 and 6.2.0 on the cluster. I currently try to compile psi4 with GCC 5.2.0. I am currently struggling with specifying the BLAS library. I would like to use OpenBLAS 0.2.13, but somehow cmake has problems to automatically detecting it and I also don't know how I can specify the explicit path to the library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so). I already tried setting. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib. and. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0. but in both cases OpenBLAS is not detected. If I disable the ENABLE_AUTO_BLAS and the ENABLE_AUTO_LAPACK settings, how can I specify the absolute path to the library ?. Thank you for your help. @andysim:; According to https://gcc.gnu.org/projects/cxx-status.html#cxx11:. ""GCC 4.8.1 was the first feature-complete implementation of the 2011 C++ standard, previously known as C++0x."". Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274478774:53,access,access,53,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274478774,1,['access'],['access']
Security,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:968,access,access,968,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['access'],['access']
Security,"Hi, I was wondering if anyone is facing any problems accessing ps4 forum webpage. Anytime I try to open any link on psi4 forum it shows me this error. I have used multiple devices and internet connections to access this.; <img width=""1646"" alt=""Screen Shot 2023-01-31 at 12 27 09 PM"" src=""https://user-images.githubusercontent.com/96807514/215875127-ef6dcd14-6e27-480f-a31e-860c85ac0bce.png"">",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2868:53,access,accessing,53,https://psicode.org,https://github.com/psi4/psi4/issues/2868,2,['access'],"['access', 'accessing']"
Security,"Hi,. @raimis and I are working with a development version of psi4. I installed a fresh conda directory (python 3.6) where I ran `conda install psi4=1.2a1.dev611 -c psi4/label/dev -c psi4`. Here's what's installed:. ```; -bash-4.2$ conda list; # packages in environment at /home/damasj02/software/psi4dev:; #; # Name Version Build Channel; asn1crypto 0.24.0 py36_0; attrs 17.4.0 py36_0; ca-certificates 2018.03.07 0; certifi 2018.1.18 py36_0; cffi 1.11.4 py36h9745a5d_0; chardet 3.0.4 py36h0f667ec_1; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0; conda 4.4.10 py36_0; conda-env 2.6.0 h36134e3_1; cryptography 2.1.4 py36hd09be54_0; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 h6c8ec71_1; hdf5 1.8.17 2; idna 2.6 py36h82fb2a8_1; intel-openmp 2018.0.0 8; isl 0.12.2 0; libedit 3.1 heed3624_0; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 h7cc24e2_2; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 1 psi4/label/dev; libstdcxx-ng 7.2.0 h7a57d05_2; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.2 1; mkl_fft 1.0.1 py36h3010b51_0; mkl_random 1.0.1 py36h629b387_0; more-itertools 4.1.0 py36_0; mpc 1.0.1 0; mpfr 3.1.2 0; ncurses 6.0 h9df7e31_2; numpy 1.14.2 py36hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.1.10 py36_1 psi4/label/dev; pip 9.0.1 py36h6c6f9ce_4; pluggy 0.6.0 py36hb689045_0; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; py 1.5.3 py36_0; pycosat 0.6.3 py36h0a5515d_0; pycparser 2.18 py36hf9f622e_1; pyopenssl 17.5.0 py36h20ba746_0; pysocks 1.6.7 py36hd97a5b1_1; pytest 3.5.0 py36_0; python 3.6.4 hc3d631a_1; readline 7.0 ha6073c6_4; requests 2.18.4 py36he2e5f8d_1; ruamel_yaml 0.15.35 py36h14c3975_1; setuptools 38.4.0 py36_0; simint 0.7 0 psi4; six 1.11.0 py36h372c433_1; sqlite 3.22.0 h1bed415_0; tk 8.6.7 hc745277_3; urllib3 1.22 py36hbe7ace6_0; wheel 0.30.0 py36hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:389,certificate,certificates,389,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['certificate'],['certificates']
Security,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:364,access,accessible,364,https://psicode.org,https://github.com/psi4/psi4/issues/2239,1,['access'],['accessible']
Security,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:118,access,accessed,118,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687,1,['access'],['accessed']
Security,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:157,validat,validate,157,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769,8,"['Validat', 'validat']","['ValidationError', 'validate', 'validating', 'validators']"
Security,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-225929051:131,access,access,131,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051,1,['access'],['access']
Security,"Hmm, your right it might be good to doc the SuperFunctional class somewhere accessible. VV10 is automatically detected for full LibXC superfunctionals which contain VV10 parameters. However, -D and -NL and disparate enough that they likely need to be handled separately. What kind of automatic detection where you thinking about? Tagging `-V` to a functional will not work unless fit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348223488:76,access,accessible,76,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348223488,1,['access'],['accessible']
Security,"Hmm... can anybody give a bit of input into how I can access the Density Matrix (Da) at the basis function level (I have tried to do it like in the add_orbital() function), or if I can calculate the electron density from the orbital matrix (Ca)?. for the second option I guess I have to do something along this code in points.cc:; ```; // Rho_a = 2.0 * D_xy phi_xa phi_ya; C_DGEMM('N', 'N', npoints, nlocal, nlocal, 2.0, phip[0], coll_funcs, D2p[0], nglobal, 0.0, Tp[0], nglobal);; for (int P = 0; P < npoints; P++) {; rhoap[P] = C_DDOT(nlocal, phip[P], 1, Tp[P], 1);; }; ```. Regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433740725:54,access,access,54,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433740725,1,['access'],['access']
Security,How to access density matrix history in SCF iterations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065:7,access,access,7,https://psicode.org,https://github.com/psi4/psi4/issues/3065,1,['access'],['access']
Security,"I agree, it'd be nice to catch those and warn ppl off from that feature of GBS format. In the existing logic https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L183-L184 is already catching only `<element symbol(s)> 0` through the zero near the end of https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115. This would be a general (to all files read), not specific, catch, but if you change that `0` in [the regex](; https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115) to `\d+` then add the below after https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L184, does that catch and provide better guidance?. ```; gbsint = int(atom_array.match(line).group(2)); if gbsint != 0:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unsupported basis to atom by number assignment. Use ""assign"" statements as in https://github.com/psi4/psi4/blob/master/tests/mints2/input.dat : line %d: %s"""""" % (lineno, line)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178:820,Validat,ValidationError,820,https://psicode.org,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178,1,['Validat'],['ValidationError']
Security,"I am actually performing these calculations on Google Colab. (It is for a future workshop.) You can access a Colab notebook exemplifying the error [here](https://colab.research.google.com/drive/1uTsmVcFJY5xArRbo4sQ0RGgPiT406xdM?usp=sharing). Additionally, here is the output from `conda list`. . ```; # packages in environment at /usr/local:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 1_gnu conda-forge; alsa-lib 1.2.3 h516909a_0 conda-forge; ambit 0.5.1 hbe8a562_1 psi4; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py37h5e8e339_1 conda-forge; attrs 21.4.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; beautifulsoup4 4.10.0 pyha770c72_0 conda-forge; blas 1.0 mkl ; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; boost 1.74.0 py37h6dcda5c_3 conda-forge; boost-cpp 1.74.0 h312852a_4 conda-forge; bottleneck 1.3.4 py37hce1f21e_0 ; brotli 1.0.9 he6710b0_2 ; brotlipy 0.7.0 py37h5e8e339_1001 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.17.1 h7f98852_1 conda-forge; ca-certificates 2021.10.8 ha878542_0 conda-forge; cairo 1.16.0 hf32fb01_1 ; certifi 2021.10.8 py37h89c1867_1 conda-forge; cffi 1.15.0 py37h036bc23_0 conda-forge; chardet 4.0.0 py37h89c1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c099",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:100,access,access,100,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['access'],['access']
Security,"I am currently testing out the ddx solvent model implementation (https://psicode.org/psi4manual/master/ddx.html) in my high throughput script. However, currently the DDX_SOLVENT_EPSILON option being ignored in favor of DDX_SOLVENT. . According to the manual, DDX_SOLVENT is ignored if DDX_SOLVENT_EPSILON is supplied. Initially I took this as meaning one could *just* supply the DDX_SOLVENT_EPSILON value directly. However, without supplying the DDX_SOLVENT field too, the calculation fails with `psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.`. Hence, in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:527,Validat,ValidationError,527,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['Validat'],['ValidationError']
Security,"I am fine with all three access calls, and I agree with Max regarding the clarification of the third one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1061067997:25,access,access,25,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1061067997,1,['access'],['access']
Security,"I am getting an error in Psi4 1.5 that I believe is a bug. Here is a minimal script to reproduce it. ```python; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol); ```. It throws the exception. ```; psi4.driver.p4util.exceptions.ValidationError: Stability analysis root following is only available for UHF; ```. Since the script does use UHF, the error doesn't make sense.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577:355,Validat,ValidationError,355,https://psicode.org,https://github.com/psi4/psi4/issues/2577,1,['Validat'],['ValidationError']
Security,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:243,Validat,ValidationError,243,https://psicode.org,https://github.com/psi4/psi4/issues/2157,1,['Validat'],['ValidationError']
Security,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:120,access,access,120,https://psicode.org,https://github.com/psi4/psi4/issues/3004,1,['access'],['access']
Security,"I can help better if I know your goal. The `ENABLE_GENERIC=ON` for BLAS/LAPACK was added to facilitate static linking of MKL libraries for binary packaging and distribution, both to minimize file size and make sure the binary had high-quality math libraries w/o needing an Intel license. Since then, we've learned that there can be bad reactions between psi4-w/-mkl-statically-linked and other software (namely numpy) that also accesses the same symbols. (#748 and #755 for gory details.) So we've dropped static linking for BLAS. It helps that conda distributes MKL now, too. So, I'm glad to help if that hasn't warned you off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386411503:428,access,accesses,428,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386411503,1,['access'],['accesses']
Security,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:176,sanitiz,sanitizers,176,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479,1,['sanitiz'],['sanitizers']
Security,I don't have access any more to large memory systems and I haven't found the time to look at more recent version of PSI4. Yet the concern remains: you want to avoid that a system starts swapping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-274321046:13,access,access,13,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-274321046,1,['access'],['access']
Security,"I don't have access to G*, so can't easily verify. Is the difference due to Psi4's use of density fitting by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376533125:13,access,access,13,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376533125,1,['access'],['access']
Security,"I don't have access to check right now, but I don't think `intrinsics_avx.h` should ever be included for SSE builds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356792009:13,access,access,13,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356792009,1,['access'],['access']
Security,I don't know how to access this to show you. It stopped working around 11 am today,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109#issuecomment-1856788141:20,access,access,20,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856788141,1,['access'],['access']
Security,"I don't know what your background is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense. Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i. Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation. For reference, the code that Susi linked does the following:; ```; for each irreducible representation of the first index of A, Ha:; 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; 	lda is the number of column",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688:88,access,accessible,88,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688,1,['access'],['accessible']
Security,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:12,access,access,12,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,2,['access'],['access']
Security,"I had to write some code recently using the Dimension object and I was thinking that it would be useful to support initialization from a list, for example:; ```; Dimension orbs({3,0,1,1}); ```; This is particularly useful when working with Slices to avoid doing this:; ```; auto start_dim = psi::Dimension(1);; start_dim[0] = start;; ```; I think it might already be supported on the python side. Another useful thing would be to have direct access to the underlying std::vector object, or const iterators for it. That way, one could use Dimensions in loops more naturally. I was wondering, since you are modifying the class, would you be able to implement these changes as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903:442,access,access,442,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903,1,['access'],['access']
Security,I have download the Psi4conda-1.3.2-py37-Linux-x86_64.sh and install it on a scientific Linux 6 computer with ldd (GNU libc) 2.12.; The installation finish without any error and I got a `Segmentation fault` when running `psi4 --test`. `conda list` gives. ```; # packages in environment at /users/grte2001/psi4conda:; #; # Name Version Build Channel; ambit 0.3 h137fa24_1 psi4; asn1crypto 0.24.0 py37_0 ; atomicwrites 1.3.0 py37_1 ; attrs 19.1.0 py37_1 ; blas 1.0 mkl ; ca-certificates 2019.1.23 0 ; certifi 2019.3.9 py37_0 ; cffi 1.12.3 py37h2e261b9_0 ; chardet 3.0.4 py37_1 ; chemps2 1.8.9 h8c3debe_0 psi4; conda 4.6.14 py37_0 ; cryptography 2.6.1 py37h1ba5d50_0 ; cvxopt 1.2.0 py37hfa32c7d_0 ; decorator 4.4.0 py37_1 ; deepdiff 3.3.0 py37_1 psi4; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; future 0.17.1 py37_0 ; gau2grid 1.3.1 h035aef0_0 psi4; gcp 2.0.2 h84218bc_1 psi4; gdma 2.2.6 h0e1e685_6 psi4; glpk 4.65 h3ceedfd_2 ; gmp 6.1.2 h6c8ec71_1 ; gsl 2.4 h14c3975_4 ; h5py 2.8.0 py37h989c5e5_3 ; hdf5 1.10.2 hba1933b_1 ; idna 2.8 py37_0 ; intel-openmp 2019.3 199 ; jsonpickle 0.9.6 py37_0 psi4; libedit 3.1.20181209 hc058e9b_0 ; libefp 1.5.0 h84097be_1 psi4; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 8.2.0 hdf63c60_1 ; libgfortran-ng 7.3.0 hdf63c60_0 ; libint 1.2.1 hb4a4fd4_6 psi4; libstdcxx-ng 8.2.0 hdf63c60_1 ; libxc 4.3.4 h7b6447c_0 psi4; metis 5.1.0 hf484d3e_4 ; mkl 2019.3 199 ; mkl_fft 1.0.12 py37ha843d7b_0 ; mkl_random 1.0.2 py37hd81dba3_0 ; more-itertools 7.0.0 py37_0 ; ncurses 6.1 he6710b0_1 ; networkx 2.3 pypi_0 pypi; numpy 1.16.3 py37h7e9f1db_0 ; numpy-base 1.16.3 py37hde5b4d6_0 ; openfermion 0.9 py37hd763080_1 psi4; openfermionpsi4 0.4 py37h934b37d_0 psi4; openssl 1.1.1b h7b6447c_1 ; pcmsolver 1.2.1 py37h142c950_0 psi4; pint 0.9 py37_2 psi4; pip 19.1.1 py37_0 ; pluggy 0.11.0 pypi_0 pypi; psi4 1.3.2+ecbda83 py37h31b3128_0 psi4; psi4-rt 1.3.2 py37ha6b60c8_0 psi4; py 1.8.0 py37_0 ; pycosat 0.6.3 py37h14c3975_0 ; pycparser 2.19 py37_0 ; pydantic 0.23 py37_0 psi4; pylibefp ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792:472,certificate,certificates,472,https://psicode.org,https://github.com/psi4/psi4/issues/1792,1,['certificate'],['certificates']
Security,"I have tried to run the following input:. molecule no3 {; 0 2; N -0.000000289178 0.000000000000 -0.107371527464; O 0.000000787144 0.000000000000 1.265621161075; O 1.089067344013 0.000000000000 -0.585809671624; O -1.089067877991 0.000000000000 -0.585810897335; symmetry c1; }. set globals {; basis cc-pvtz; #df_basis_scf cc-pvtz-jkfit; #df_basis_cc cc-pvtz-ri; reference uhf; scf_type df; guess gwh; e_convergence 8; d_convergence 6; mo_maxiter 400; cepa_type df; qc_module occ; }; energy('cepa(0)'). Then, I get the following error:. PsiException: Error: cepa(0) requires ""reference rhf"". An error has occurred Py-side; Traceback:; <class 'p4xcpt.ValidationError'>: Error: cepa(0) requires ""reference rhf"".: File ""<string>"", line 37, in <module>. File ""/usr/local/programs/psi4intel/share/psi/python/driver.py"", line 629, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/usr/local/programs/psi4intel/share/psi/python/proc.py"", line 3783, in run_cepa; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). Something should be wrong in proc.py or I missed something. @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/273:647,Validat,ValidationError,647,https://psicode.org,https://github.com/psi4/psi4/issues/273,2,['Validat'],['ValidationError']
Security,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-187310350:260,validat,validate,260,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350,2,['validat'],"['validate', 'validation']"
Security,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304475473:127,access,access,127,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473,1,['access'],['access']
Security,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:165,secur,security,165,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,1,['secur'],['security']
Security,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205097386:891,validat,validated,891,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386,1,['validat'],['validated']
Security,"I posted some obvious fixes. @jturney: Can you please advise on whether or not to expose the following?; - Classes derived from `PotentialInt `, e.g. `class PSI_API ElectrostaticInt : public PotentialInt {`; - Anything derived from `TwoBodyAOInt`, `GaussianFundamental`, `Fjt`; - Classes derived from `CoordEntry` or `CoordValue`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444284649:82,expose,expose,82,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444284649,1,['expose'],['expose']
Security,"I pushed a fix to the molden1 test. The issue with the dipole moment is more complex. I think the OPDM and the MOs are certainly not consistent. . One solution would be to converge the orbitals and then do the following:; - transform orbs. to either canonical or natural basis; - transform integrals; - solve the CI problem; - compute 1/2-RDMs. @dgasmith: since you are more familiar with the mcscf code, can you think of a place where we can put these orbital transformations (semi/nat) before the computation of the OPDM? Better, if you have a few minutes could you try to implement the above code?. Also, is there a way I can access the full Fock matrix with frozen docc and virt blocks? This is of course irrelevant now, but I am thinking that in the future if we try to do gradients of MRPTs it might be better if we have all blocks diagonalize the Fock matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304537094:629,access,access,629,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304537094,1,['access'],['access']
Security,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239042342:444,hash,hash,444,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342,2,['hash'],['hash']
Security,"I removed the Prop baseclass in the upcoming commits (pending tests). i had to add a Da_name accessor to prop though, because OEProp uses the Da matrix as a fallback if no title is given.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133#issuecomment-413024630:93,access,accessor,93,https://psicode.org,https://github.com/psi4/psi4/pull/1133#issuecomment-413024630,1,['access'],['accessor']
Security,"I run psi4 by specifying the scratch drive (psi4 -s /scratch). But pcmsolver seems to use /tmp. Security-wise it's nice for me to be able to limit drive access to only one directory. Is there a way to propagate the -s switch from psi4 to pcmsolver, so that it uses the same scratch directory as psi4 instead of /tmp?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3054:96,Secur,Security-wise,96,https://psicode.org,https://github.com/psi4/psi4/issues/3054,2,"['Secur', 'access']","['Security-wise', 'access']"
Security,"I should have learned by now not to agree to deal with issues you bring up when they involve OCC or DFOCC. We're getting a bad access exception when trying to [open the libtrans PSIO file](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/open.cc#L69). I'm not sure what the connection is between the wavefunction you pass in and making PSIO unhappy, but I'll investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-600658163:127,access,access,127,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-600658163,1,['access'],['access']
Security,"I think I could get the access to Michał Hapka's (JCP 2012) dev molpro code with SAPT0(UKS), which can be force to run CPUHF, but it would be a comparison with code without density fitting. I had these results laying around, with larger than usual fitting basis set. ```python; import time; import psi4. geometry = """"""; 0 1; O 0.0000 0.00000 3.175060; H 0.0000 0.75750 2.587994; H 0.0000 -0.75750 2.587994; --; 0 2; O 0.0000 0.00000 0.000000; O 0.0000 1.32501 0.000000; H 0.0000 -0.22470 -0.973420. units angstrom; no_reorient; no_com; symmetry c1; """""". BASIS = ""aug-cc-pvdz""; MEMORY = ""20000 MB""; THREADS = 4. psi4.set_memory(MEMORY); psi4.core.set_num_threads(THREADS); psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""mem_df"",; ""stability_analysis"": ""follow"",; ""d_convergence"": 1e-10,; ""e_convergence"": 1e-10,; ""guess"": ""sad"",; ""basis"": BASIS,; ""df_basis_sapt"": ""aug-cc-pv5z-ri"",; ""df_basis_scf"": ""aug-cc-pv5z-jkfit"",; }; ). def compute_s2():; time_start = time.time(); dimer = psi4.geometry(geometry); psi4.energy(""sapt0"", molecule=dimer). if __name__ == ""__main__"":; compute_s2(); ```. run on top of `2d342fe`. ```shell; SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]; Elst10,r -3.76447859 [mEh] -2.36224598 [kcal/mol] -9.88363717 [kJ/mol]. Exchange 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10 2.19095680 [mEh] 1.37484615 [kcal/mol] 5.75235628 [kJ/mol]; Exch10(S^2) 2.18871598 [mEh] 1.37344002 [kcal/mol] 5.74647303 [kJ/mol]. Induction -0.46899705 [mEh] -0.29430009 [kcal/mol] -1.23135159 [kJ/mol]; Ind20,r -0.81555155 [mEh] -0.51176632 [kcal/mol] -2.14123029 [kJ/mol]; Exch-Ind20,r 0.51152243 [mEh] 0.32098517 [kcal/mol] 1.34300196 [kJ/mol]; delta HF,r (2) -0.16496793 [mEh] -0.10351894 [kcal/mol] -0.43312325 [kJ/mol]. Dispersion -1.62383455 [mEh] -1.01897156 [kcal/mol] -4.26337702 [kJ/mol]; Disp20 -1.79467532 [m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624:24,access,access,24,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-656278624,1,['access'],['access']
Security,"I think anytime the unrelaxed density is built we should set it to the Da/Db accessors. It would be nice to compute the density based properties using OEProp at the python level as well. Example:. https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L2476. Perhaps a bit ambitious for this pass, but it would be nice for consistency.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258862824:77,access,accessors,77,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258862824,1,['access'],['accessors']
Security,"I think not. I removed my ""closes"" and the signal went away. But with write access, you can edit the PR post and add it yourself. Go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1017#issuecomment-388644126:76,access,access,76,https://psicode.org,https://github.com/psi4/psi4/pull/1017#issuecomment-388644126,1,['access'],['access']
Security,"I think the question is is this the grand boost python module that is a shared library, could respond to `import psi4`, has all the addons linked in, has everything in the repo except `main{...}`, etc. In that case, it should be `psi4.so`. If it's just a stepping stone on the way to the executable, is shared _or_ static, may or may not have addons linked, has mostly stuff from the former `src/bin/psi4_main`, then it's better called `libpsi4.a/so`. The former is what we want eventually, no question, and is what we had pre-CMakeRewrite, and is what Ryan got working for Pulsar's purposes. I rather killed it off temporarily to focus on the add-on linking, so I think the latter's what the psi4 library is right now. So basically, @ryanmrichard, I agree. But importable psi4 is not guaranteed at the moment. We'll get it working again, perhaps in different form at time of deBoosting. So please just use a hash that has it in a state that's useable for you for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241859429:909,hash,hash,909,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241859429,1,['hash'],['hash']
Security,"I think this is enough for now. I want to very carefully check the handling of perturbations before making this accessible enough to be tested by our normal suite. For posterity, standard usage with the current interface is:; ```; std::shared_ptr<OneBodySOInt> wOBI(integral_->so_rel_potential());; OperatorSymmetry msymm(OperatorSymmetry::L, molecule_, integral_, soFactory_);; auto wMats = msymm.create_matrices(""SO Relativistic Potential"");; wMats.insert(wMats.begin(), soFactory_->create_matrix(""SO Relativistic Potential""));; wOBI->compute(wMats);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157:112,access,accessible,112,https://psicode.org,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157,1,['access'],['accessible']
Security,I think what we need to do is organize the non-XC custom functionals into a series of tests like `tests/test-custom-gga` where all of the custom functionals that we build in `gga_superfuncs.py` should be there. Similar folders for hybrid/double hybrid. Right now its kind of scattered all over the place. If you could start your tests in that manner it would be very helpful. This could be a good project for a new-dev to clean up. @susilehtola One more example why we need access to parameters in LibXC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877#issuecomment-349731179:474,access,access,474,https://psicode.org,https://github.com/psi4/psi4/pull/877#issuecomment-349731179,1,['access'],['access']
Security,"I thought it might be useful to share the failed tests of psi4 (using commit e4070d0024742579a445) on our systems. We have 4 failed tests:. ```; The following tests FAILED:; 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:344,firewall,firewall,344,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['firewall'],['firewall']
Security,"I tried both `freq1` and `freq2` tests, but could not find any problems with GCC8 (with sanitizers) on my Mac. My linux machines have a kernel that [doesn't allow the use of sanitizers](https://github.com/google/sanitizers/issues/856) so I can't test those. However, if I put the same print statement into an Intel linux build, I see the exact same output that I posted above - *i.e.* that both dimensions are the same. It appears that the mismatch in dimensions is only happening on windows, which is very strange. Can anybody else confirm the behavior on Linux and/or Mac?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495:88,sanitiz,sanitizers,88,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495,3,['sanitiz'],['sanitizers']
Security,"I tried it, but I got the following:. Ugurs-MacBook-Pro:psijob ugur$ lldb python /Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4 input.dat ; (lldb) target create ""python""; Current executable set to 'python' (x86_64).; (lldb) settings set -- target.run-args ""/Users/ugur/psi4/objdir/stage/Users/ugur/psi4install/psi4cmake/bin/psi4"" ""input.dat""; (lldb) r; error: process exited with status -1 (cannot attach to process due to System Integrity Protection); (lldb) . However, I can debug my old psi4. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258441424:455,Integrity,Integrity,455,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258441424,1,['Integrity'],['Integrity']
Security,I typed conda list into my Ubuntu terminal and got the following return(s):. ```; # packages in environment at /home/emkal/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_kmp_llvm conda-forge; adcc 0.15.17 py310hc6cd4ac_2 conda-forge; annotated-types 0.6.0 pyhd8ed1ab_0 conda-forge; archspec 0.2.3 pyhd8ed1ab_0 conda-forge; boltons 23.1.1 pyhd8ed1ab_0 conda-forge; brotli-python 1.1.0 py310hc6cd4ac_1 conda-forge; bzip2 1.0.8 hd590300_5 conda-forge; c-ares 1.26.0 hd590300_0 conda-forge; ca-certificates 2024.6.2 hbcca054_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; certifi 2024.6.2 pyhd8ed1ab_0 conda-forge; cffi 1.16.0 py310h2fee648_0 conda-forge; charset-normalizer 3.3.2 pyhd8ed1ab_0 conda-forge; colorama 0.4.6 pyhd8ed1ab_0 conda-forge; conda 24.5.0 py310hff52083_0 conda-forge; conda-libmamba-solver 24.1.0 pyhd8ed1ab_0 conda-forge; conda-package-handling 2.2.0 pyh38be061_0 conda-forge; conda-package-streaming 0.9.0 pyhd8ed1ab_0 conda-forge; cppe 0.3.1 py310h7c63755_9 conda-forge; dftd3-python 1.0.0 py310hdbe52f6_2 conda-forge; dftd4 3.6.0 hf49bc11_0 conda-forge; dftd4-python 3.6.0 py310hc409063_1 conda-forge; distro 1.9.0 pyhd8ed1ab_0 conda-forge; dkh 1.2 hd59d2e7_0 conda-forge; exceptiongroup 1.2.0 pyhd8ed1ab_2 conda-forge; execnet 2.0.2 pyhd8ed1ab_0 conda-forge; fmt 10.2.1 h00ab1b0_0 conda-forge; frozendict 2.4.4 py310hc51659f_0 conda-forge; gau2grid 2.0.7 h0b41bf4_2 conda-forge; gcp-correction 2.3.1 h1990efc_2 conda-forge; geometric 1.0 pyhd8ed1ab_1 conda-forge; gtest 1.14.0 h00ab1b0_1 conda-forge; h5py 3.11.0 nompi_py310hf054cd7_102 conda-forge; hdf5 1.14.3 nompi_h4f84152_100 conda-forge; icu 73.2 h59595ed_0 conda-forge; idna 3.6 pyhd8ed1ab_0 conda-forge; iniconfig 2.0.0 pyhd8ed1ab_0 conda-forge; jsonpatch 1.33 pyhd8ed1ab_0 conda-forge; jsonpointer 3.0.0 py310hff52083_0 conda-forge; keyutils 1.6.1 h166bdaf_0 conda-forge; krb5 1.21.3 h659f571_0 c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098:551,certificate,certificates,551,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098,1,['certificate'],['certificates']
Security,"I was afraid of that. I don't have much else to suggest in the way of directed debugging. I'll put out a call to other Rocks users among the psi4 devs to see if we can debug your troubles on an accessible system. A few last-ditch queries:. * When you compiled from source, was that with Intel or GCC compilers? Was it all with cluster software or were you using anything (compilers, python, numpy, libint, etc.) from conda?. * What types of processors running? `cat /proc/cpuinfo | grep flags | grep -o -e sse2 -e sse4_2 -e avx -e avx2`. * Did the 1.1 binary work on the cluster?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405285716:194,access,accessible,194,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405285716,1,['access'],['accessible']
Security,"I will admit I considered that, then decided I didn't want to reformat the map into the initializer because it was long and I was lazy. My bigger concern is still: what was the consequence of `order_` being incorrectly 0 for so long, and who actually uses this property up-stream? The git commit where this was added says `Hack DFT grids to retain indexing data for ISA` but the only files touched were:. ```; src/lib/libfock/cubature.cc.REMOVED.git-id; src/lib/libfock/cubature.h; src/lib/libfock/gridblocker.h; ```. And I can't find anywhere that seems to use `order_` or the `order()` method of `SphericalGrid`. . Unfortunately, trying to look further back in the history of `cubature.cc` results in several instances of `psi4/src/psi4/libfock/cubature.cc.REMOVED.git-id` which (I think?) means things were stripped from the repo at some point, and the resulting commit stuff is all assigned to the wrong person (e.g., nearly `all` of `cubature.cc` is assigned to one commit 7e4ecf968e from dgasmith). `print_details` is the only place the `spherical_grids_` are ever apparently used, and I can comment out the block where they print nicely. _That_ function is only ever used in `v.cc` and only if `print_ > 2`. I don't think this is used much, and is creating unnecessary complexity, and doesn't feature in any tests I can find. I'm running through tests now to see if just... removing this entirely breaks anything. Short of `print_details` being accessible through some print settings, it doesn't appear that any of this is even exposed on the python side anyway?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268644487:1452,access,accessible,1452,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268644487,2,"['access', 'expose']","['accessible', 'exposed']"
Security,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:246,access,access,246,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927,1,['access'],['access']
Security,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1296:460,Validat,ValidationError,460,https://psicode.org,https://github.com/psi4/psi4/issues/1296,1,['Validat'],['ValidationError']
Security,"I would find it a bit odd that Q-Chem does not add in any MP2 pieces considering the recent dipole benchmarking paper showing that DH's were very good, see [here](https://pubs.acs.org/doi/abs/10.1021/acs.jctc.7b01252). Though I do not have access while traveling and cannot read the details. @hokru do you have a paper of the ""proper"" implementation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1333#issuecomment-436276152:240,access,access,240,https://psicode.org,https://github.com/psi4/psi4/issues/1333#issuecomment-436276152,1,['access'],['access']
Security,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116:1183,expose,exposes,1183,https://psicode.org,https://github.com/psi4/psi4/issues/1116,1,['expose'],['exposes']
Security,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:675,checksum,checksum,675,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,1,['checksum'],['checksum']
Security,I'll attack this in #1994 as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681918986:5,attack,attack,5,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681918986,1,['attack'],['attack']
Security,"I'll be taking this one myself, for the sake of `ccdensity` sanitizing. Alas, I already have a mug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-1038488470:60,sanitiz,sanitizing,60,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-1038488470,1,['sanitiz'],['sanitizing']
Security,"I'm having a hard time following all this, so let me try to make sure I'm understanding your concerns about `driver/p4util/numpy_helper.py:_np_read`. I think you're suggesting we explicitly mark `allow_pickle=False` for that function because; 1. security reasons mean `allow_pickle` should be `False` unless needed to be `True`; 2. `allow_pickle` is not needed to be `True` for that function (as demonstrated by `np-array-interface` passing, even with Travis passing in `False`); 3. some users may compile with pre-16.3 NumPy, where default definitions would make `allow_pickle=True`, which is bad by (1) and (2). Did I get that right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657:246,secur,security,246,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657,1,['secur'],['security']
Security,"I'm ok with linking to a PDF manual or external website for GDMA, but I; think we would also at least need a little paragraph in our manual; explaining that the capability is there, and giving any Psi keywords that; are used to access GDMA. On Thu, Mar 24, 2016 at 11:38 PM, Andy Simmonett notifications@github.com; wrote:. > Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone; > yesterday, but haven't heard back. He is retired now, so I don't know if; > his Cambridge email is active; his seminal red book was updated last year; > so I think he's still doing some work. I doubt he will object to our; > distribution idea; I think he would've chosen a different license to GPL if; > he didn't want his code to be used in this way. Regardless, I think we; > should wait a week to hear back and merge the PR if we don't get a; > response. He deserves to have a say in how we handle his code.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/323#issuecomment-201122403",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201297358:228,access,access,228,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201297358,1,['access'],['access']
Security,I've added memory sanitizer and comments that Python and Numpy need to be compiled similarly. I'm happy to change to using `check_cxx_source_compiles` if that's the way it needs to go.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343241183:18,sanitiz,sanitizer,18,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343241183,1,['sanitiz'],['sanitizer']
Security,"I've added the var on Azure (several hours ago now, sorry). Also sent invite for write access to psi4meta. There's no PRs there -- just free pushing to master. I'm expecting the `diff`s btwn Win and Linux/Mac recipes to be significant, so feel free to make a separate win conda dir or win recipe dirs, if you like. Or, if it's more convenient with Azure to keep the recipes w/i the p4 repo, the `conda/` dir is fine. I'm the only one who looks in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468075957:87,access,access,87,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468075957,1,['access'],['access']
Security,"I've authorized the test suite to run. This is our way of confirming that nothing is obviously broken. If everything passes (as I expect it should), there's nothing on your end yet to do. If it fails, give it a quick look and flag Lori or I if you need assistance in identifying the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1212275829:5,authoriz,authorized,5,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1212275829,1,['authoriz'],['authorized']
Security,"I've been battling intermittent (read: ~1/1000 runs) hangs of DFT runs that I think I've traced back to some rather mystifying bits of code in cubature.cc... (h/t for @rmcgibbo for lots of help here). The problems begin here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5106. (Don't mind the mismatch between line numbers I quote and line numbers in my gdb outputs -- there's some edits in a local version of psi4 we're using but I pinkie-promise they're not at all related to the code in-question! ...but to be very sure, I'll check that the same things happen with a truly vanilla build when I get home and have access to my ""normal""/vanilla psi4 build.). Which is where my runs always hang (on the [] access, specifically) when they do. If I pop open gdb, attach, and check what lebedev_mapping_ looks like, I see something somewhat disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more dis",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:647,access,access,647,https://psicode.org,https://github.com/psi4/psi4/issues/2735,2,['access'],['access']
Security,"I've made a nofortran py37 Mac build accessible through `conda create -n amber3 ambertools=20 blas=*=mkl psi4/label/dev::libxc psi4 -c conda-forge -c psi4/label/nofortran -c psi4/label/dev`. It won't get automatically updated regularly, but I can do so upon pinging. Hopefully this'll do for CI. lmk if a different python preferred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235:37,access,accessible,37,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235,1,['access'],['accessible']
Security,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:304,access,access,304,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062,1,['access'],['access']
Security,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343300716:95,sanitiz,sanitizer,95,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716,1,['sanitiz'],['sanitizer']
Security,"If my statement https://github.com/psi4/psi4/issues/1557#issuecomment-467273962 ""and fitting"" had been correct, then yes, it should have worked. But looking again, http://tyr0.chem.wsu.edu/~kipeters/basissets/alkal-nr.html is focused on orbital, and old EMSL for Dunning alkali has no fitting for _diffuse_ RI or for any JK. So #1559 wouldn't have fixed the original issue. But Ben extracted fitting sets from Turbomole, so at least aug-cc-pV5Z-RI for Li is accessible with the [new EMSL](https://www.basissetexchange.org/) and from Grant Hill's site (thanks, @hokru). No JK in sight. Basis sets have too many dimensions ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-481268731:458,access,accessible,458,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-481268731,1,['access'],['accessible']
Security,"If nothing else, Psi should raise a `ValidationError` during the pre-iteration stage. Seeing that DOCC + SOCC isn't either 0 or the number of electrons shouldn't be difficult to trap. Do we not have the tech in Psi to let it vary DOCC while fixing SOCC, or more directly, varying the occupation while fixing the spatial symmetry? The point of setting SOCC without DOCC in the original computation was because that seemed to be the only way to select a spatial symmetry without knowing the exact occupation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1370#issuecomment-443248019:37,Validat,ValidationError,37,https://psicode.org,https://github.com/psi4/psi4/issues/1370#issuecomment-443248019,1,['Validat'],['ValidationError']
Security,"If that's the case, everything looks ok on my Haswell machine. Would it be possible for me to get access to problematic box sometime next week?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198800148:98,access,access,98,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198800148,1,['access'],['access']
Security,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441001:435,access,access,435,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001,1,['access'],['access']
Security,"If, upon `conda list psi4` the hash-like build string ends in `_2`, then all's well. [linux-64/psi4-1.8.1-py39hd162a35_2.conda](https://anaconda.org/conda-forge/psi4/1.8.1/download/linux-64/psi4-1.8.1-py39hd162a35_2.conda) is one such. That's probably what you got since the solver tries hard to pick the most recent build and only won't if other constraints get in the way. If you wanted to specify it directly, it'd be `conda create ... 'psi4=1.8.1=*_2'` to specify the version exactly and the build ending in `_2`. I should have been clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644:31,hash,hash-like,31,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644,1,['hash'],['hash-like']
Security,Improve Vibrational Information Access,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1331:32,Access,Access,32,https://psicode.org,https://github.com/psi4/psi4/issues/1331,1,['Access'],['Access']
Security,"In case we do ever switch to tarball+sha256 downloading in ExternalProject, here's a GH blogpost on accessing non-tagged versions. https://github.com/blog/651-annotated-downloads",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-350826018:100,access,accessing,100,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-350826018,1,['access'],['accessing']
Security,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121658832:468,confidential,confidential,468,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832,1,['confidential'],['confidential']
Security,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:451,access,access,451,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,1,['access'],['access']
Security,"In the slightly modified codebase I work off of -- I flipped the `[]` to a `.at()` and tests now fail due to `std::out_of_range`, as expected, given that the map is starting and staying empty until accessed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267612768:198,access,accessed,198,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267612768,1,['access'],['accessed']
Security,"Indeed, @JonathonMisiewicz , the terms coming from the derivatives of two-electron integrals are not trivially available or easy to cast into one-body form. However, the total terms (Nuclear, Core, Coulomb...) should, and that would be enough to make me happy. I do think that accessing these terms can be useful for the userbase. . Exposing the one-electron terms for Overlap etc. should also be possible, but this is both silly and shaky as a feature (i.e. not consistent across levels of theory) and sometimes a picky user should have to differentiate like a grown-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796719993:277,access,accessing,277,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796719993,1,['access'],['accessing']
Security,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345317385:451,certificate,certificates,451,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385,1,['certificate'],['certificates']
Security,"IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1864,access,accessible,1864,https://psicode.org,https://github.com/psi4/psi4/pull/2547,2,['access'],"['accessed', 'accessible']"
Security,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:120,expose,exposes,120,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,1,['expose'],['exposes']
Security,It is still gives an error:; ```; Error in atexit._run_exitfuncs:; PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pytest_output.dat'; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1276#issuecomment-430541097:117,access,access,117,https://psicode.org,https://github.com/psi4/psi4/pull/1276#issuecomment-430541097,1,['access'],['access']
Security,"It shouldn't take a bit of time to execute. The implementation symbols are currently not exported but will be from the PR. I just want to expose the interface and not the implementation. Ultimately, I will move to keep the implementation header files from being installed as the interface headers are the only ones that should be used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208:138,expose,expose,138,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208,1,['expose'],['expose']
Security,"It's not much advertised, but the cc* modules can do some density fitting. In particular, it's found that:; * df-cc2 rhf gradients run and equal findif gradients. #2137; * df-ccsd rhf gradients run and differ from conventional by <1.e-6 . Jonathon finds that not all terms make use of DF and not hooked up to DF gradient tech.; * df-ccsd rhf energies run and differ from fnocc by 2e-7 for correlation energy (inconsistent ref energy so printing and qcvars differ more); * df-ccsd uhf energies print NYI msg; * df-ccsd rohf energies run and are plausible compared to conventional. But plumbing-wise, these aren't ready to activate:; * ccenergy vs. (fnocc, dfocc) choose a different reference. ccenergy uses CONV as the ints are needed anyways. others choose DF since that's the SCF_TYPE setting; * is DF used thoroughly enough to match DF-only implementations? if not, is it used in the expensive places so that it's worth calling instead of the reliable CONV?; * does df-rohf need validation and if so, from where?. Current state of accessibility for DF CCENERGY is that CCSD has been barred by it being a managed method, while CC2 could be accessed by turning on `cc_type=df`. Probably any DF in CCENERGY is accessible through `energy(""ccenergy"")` with a lot of manual option setting. When I converted CC2 to a managed method (locally), that broke the DF-CC2 gradient test https://github.com/psi4/psi4/blob/master/tests/pytests/test_gradients.py#L41 and reminded me that DF in CCENERGY was semi-active. For now, I plan to add an escape clause to the CC2 managed gradient so that the test can run but otherwise leave DF CCENERGY inaccessible and out of stdsuite and capabilities tables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2710:981,validat,validation,981,https://psicode.org,https://github.com/psi4/psi4/issues/2710,4,"['access', 'validat']","['accessed', 'accessibility', 'accessible', 'validation']"
Security,Konrad [suggests](http://forum.psicode.org/t/sapt-calculation/2698/2) the basis set should be flagged as not-containing-enough-basis-functions during validation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853#issuecomment-1387584061:150,validat,validation,150,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1387584061,1,['validat'],['validation']
Security,"Let me know if I can help here, it would be great to get something like this in. The iterations are now in Python so implementing a new solver should be much more accessible to new developers as well. This could be a fun project to tackle... . Feel free to ping someone to add occupation smearing to the density formation which would likely need to happen C side, should be very straightforward to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900:163,access,accessible,163,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492649900,1,['access'],['accessible']
Security,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:1710,access,accessors,1710,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,1,['access'],['accessors']
Security,"Looks like you tried to fix the test cases that formerly tested scf findif-by-grad freq and now are accessing the analytic freq by adding `der_type=1`. Sounds like a good plan to me, as we don't want this PR lingering and getting out of sync. The `der_type=1` didn't work. Perhaps try `dertype=1`, which I think is what the driver acts on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231261903:100,access,accessing,100,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231261903,1,['access'],['accessing']
Security,"Looks the OS is supposed to provide it, [except on Apple](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L49-L53). Maybe that ifdef needed to be more specific to BSD than Apple. Though that code is still present in master, accessing the environment is not, so it should be removed. For now compiling 1.1, please just adjust that ifdef or whatever is necessary. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/851#issuecomment-343700592:254,access,accessing,254,https://psicode.org,https://github.com/psi4/psi4/issues/851#issuecomment-343700592,1,['access'],['accessing']
Security,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122476853:694,confidential,confidential,694,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853,1,['confidential'],['confidential']
Security,"Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; like this for CASSCF. Are they CAS NO's? Perhaps the most important; determinants are printed prior to the natural orbital procedure (in which; case there would be a mismatch between the orbitals and the determinant; printout)? Or, alternatively, I wonder if we enforce any kind of phase; convention in our MOLDEN writer that the CASSCF code is unaware of?. David. On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:. > Hello Francesco.; > I don't quite understand you. The only matrix determine orbital; > coefficients is [MO] section data of the MOLDEN file and different; > determinants have only different occupation numbers of there orbitals.; > I only sort MO orbitals by energy if required before feed it into CASINO.; >; > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > hours when I will have access to the server.; >; > But you can also create these files easily from my inputs or you can talk; > about some other matrices.; >; > Best, Vladimir.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331884804:932,access,access,932,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331884804,1,['access'],['access']
Security,"Move it over to Molecule? I think years ago that is where it lived. On Wed, Dec 5, 2018 at 10:33 AM fevangelista <notifications@github.com>; wrote:. > Thanks! It looks like I will have to move the function SharedVector; > DipoleInt::nuclear_contribution out of the class DipoleInt:: otherwise it; > won't be exposed since DipoleInt is a class DipoleInt : public; > OneBodyAOInt. Any idea of where to put it?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1400#issuecomment-444527333>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AADQjLInJn115-oM07dqAoj1wZXtZh4uks5u1-dBgaJpZM4ZAuxC>; > .; >; -- ; Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444527919:308,expose,exposed,308,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444527919,1,['expose'],['exposed']
Security,"My issue was trying to use a `psi4` executable built inside a container from the `psi4` python client from my host machine--i.e., to treat the `psi4` executable as an external executable I could call from `python`; however, the `psi4` python client requires close coupling to the executable (access to shared files) so this separation was not possible because the client has to access files shared with the executable, which are only available inside the container :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267:292,access,access,292,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267,2,['access'],['access']
Security,"My pybind11 package was accepted in Fedora, so I started updating the psi4 package (which was at rc1!). It built fine on the released versions, but failed in the development version that has the newest GCC. The error(s) I get is. ```; cd /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/objdir-x86_64-redhat-linux-gnu/psi4-core-prefix/src/psi4-core-build/src/psi4/libpsio && /usr/bin/g++ -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/include -I/builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src -isystem /usr/include/python3.6m -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic -fopenmp -DUSING_CheMPS2 -O2 -DNDEBUG -fPIC -std=c++11 -std=gnu++11 -o CMakeFiles/psio.dir/aio_handler.cc.o -c /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc: In member function 'long unsigned int psi::AIOHandler::read(unsigned int, const char*, char*, psi::ULI, psi::psio_address, psi::psio_address*)':; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: error: 'bind' is not a member of 'std'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; /builddir/build/BUILD/psi4-926879e243ce44dcc0ecfe7cda680a01383982fd/psi4/src/psi4/libpsio/aio_handler.cc:91:48: note: suggested alternative: 'find'; thread_ = std::make_shared<std::thread>(std::bind(&AIOHandler::call_aio,this));; ^~~~; find; ```. Note that I've defined; ```; -DCUSTOM_C_FLAGS=-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631:636,secur,security,636,https://psicode.org,https://github.com/psi4/psi4/issues/631,1,['secur'],['security']
Security,"My thoughts on the questions:; > How much validation do we want?. I would think that input would need to be validated always as the source is unknown, and output should be validated as part of the test suite, but then does not need to be validated at run-time before they are returned since (ideally) the test-suite ensures that our output jsons always adhere to the schema. Is there a best practice followed by applications using JSON APIs? For example does the JSON ""consumer"" always hold responsibility for checking that the object received is valid, or is it up to the JSON ""producer"" to ensure that objects are valid before sending them? . >A full test suite should like come from the schema itself?. Not sure what you mean here. Should the schema project provide functionality to validate objects that can be used by applications adhering to the schema to test that their JSON generating functions are generating valid objects? That would be great, and would reduce the amount of work that needs to be done by devs of individual QC packages to adopt the interface. > How we will we handle extra psi vars? Is the current setup sufficient.; If the schema allows for extra/arbitrary fields somewhere, we could provide all psivars/arrays there. If not then I guess we can just add handling of additional psivars in the future as they apply to new revisions of the schema?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979#issuecomment-384995562:42,validat,validation,42,https://psicode.org,https://github.com/psi4/psi4/pull/979#issuecomment-384995562,5,['validat'],"['validate', 'validated', 'validation']"
Security,Normal mode vectors are not accessible via Python API,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/940:28,access,accessible,28,https://psicode.org,https://github.com/psi4/psi4/issues/940,1,['access'],['accessible']
Security,"Not currently. The plan is to move all internal variables to the [`variables` dictionary](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L547) on the Wavefunction which is exposed to Python. For DFMP2 this is rather straight forward, you could find and replace all `energy_` variables with `variables_` and pop the `energy_` dictionary from the MP2 header. Other classes are more difficult which is why this is on the TODO list, but feel free to do this one if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642#issuecomment-284878288:204,expose,exposed,204,https://psicode.org,https://github.com/psi4/psi4/issues/642#issuecomment-284878288,1,['expose'],['exposed']
Security,"Not helping the current discussion, but if `DF` and `RI` modifiers are no longer valid, the manual needs to be modified accordingly. Is it already done ? I had a look but could not find it. Also, if someone could write somewhere (for example in the Psi4 forum) how the TravisCI works, i.e. how do we know what fails and which details do we have access to, that would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183819784:345,access,access,345,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183819784,1,['access'],['access']
Security,"Not sure what you exactly mean. Setting vv10_b in the superfunctional is straightforward. I followed what was done for the LRC omega. . Ideally the user has not do anything for the pre-defined functionals once I get the -nl dashparam to work. The manual setting is more for developers who want to fit the vv10_b for a new functional. Using DFT-NL should be like using DFT-D. Having the vv10 integrator exposed to python and supplying a user-defined density would be nice. And for a post-scf VV10 correction that is probably the way to go for the scfitertopy implementation. Though this pybind is currently a level too much for me, i dont even understand the errors i get. Small steps for me ;-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364091920:402,expose,exposed,402,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364091920,1,['expose'],['exposed']
Security,"Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python. I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524:155,access,accessible,155,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524,1,['access'],['accessible']
Security,"Now throws `ValidationError: Inconsistent or unspecified chg/mult: sys chg: -2.0, frag chg: [None, None], sys mult: 1, frag mult: [None, None]` at parse-time rather than mysterious SCF error at Runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/114#issuecomment-381460426:12,Validat,ValidationError,12,https://psicode.org,https://github.com/psi4/psi4/issues/114#issuecomment-381460426,1,['Validat'],['ValidationError']
Security,"OK, I see _viz_ ""pcmsolver as proper module"" I'll stack it on my TODO list. And it should be no problem for other projects, which only access `pcmsolver.py` anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594#issuecomment-276302044:135,access,access,135,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276302044,1,['access'],['access']
Security,"OK, I'll contact user about the input deck - is there some suitable address to send such things in case the user doesn't want his input paraded in public (doesn't happen often but we have had users play the confidentiality card)?; Machine in question is http://nci.org.au/nci-systems/national-facility/peak-system/raijin/; Intel 12 and 13 compilers with MKL (-mkl=parallel) for BLAS.; Our nodes are 16 core (2 oct-core sandybridge) with 32/64/128 GB memory.; We have local (< 440GB) and global scratch and we run over a lustre filesystem.; I don't think IO is the issue as we ran it through Darshan on some fast disks the sysguys were trying out and the time didn't change much and the Darshan report didn't find anything.; The job we profiled was 36 atoms /640 primary,2424 auxiliary bf 'sapt2+3-ct' and took 200 hour on 16 processors so that sounds in line with your experience. The trouble was (I don't have the numbers to hand ) but it took much the same time on 4 and 8 processors. I didn't go anywhere near the 1000 hr job!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41634364:207,confidential,confidentiality,207,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41634364,1,['confidential'],['confidentiality']
Security,"OK, the results are here:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. The ""missing"" field are all non-dispersion corrected functionals currently in Psi4 master without a reference value. The ones in the ""skip"" array fail to run. I can not do much about some of them, as I don't have access to many other QC packages. The good part is, that with the exception of SOGGA (which fails against old Psi4), all other functionals currently pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424428280:1216,access,access,1216,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424428280,1,['access'],['access']
Security,"Oh dear, I see your PR has become contaminated by non-you commits. This probably happened because you rebased to pull in changes from upstream, tried to push, GH told you that's not a fast-forward so you probably want to pull, you pulled, then pushed. Hence current state. In this instance, that was bad advice from git. From step 9 or the `git push -f origin fastci` text of http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow, what you really want to do in this case is *force push without pulling*. Because you're the only one using that branch on your fork, this is quite safe, and no one will chase you with pitchforks :-). Don't feel bad about about doing this wrong. Most everyone in the psi connection has done this (I did it three times in succession). Next step is to heal your branch. Don't do anything more on that branch locally. Check out master and update it to upstream. Check out a new branch, then apply the commits that are yours. Test and then force push back to GH to the branch that GH knows to be associated with this PR. ```; git checkout master; git pull --rebase upstream master; git checkout -b new_sinf; git cherry-pick b2b49f6; git cherry-pick 147f5b2; ...; # I'm applying the commits you authored in order, just reading the hashes from this webpage above; # it's possible but unlikely that you'll have to resolve conflicts; ...; git cherry-pick 502d234; # build and test; git push origin new_sinf:e2_exch_disp_sinf -f # force added in edit 15 May 2019; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390:1279,hash,hashes,1279,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390,1,['hash'],['hashes']
Security,"Oh, and I meant to add that docs should say whether un-mass-weighted vs. mass-weighted and normalized vs. unnormalized normal coordinates are printed to the molden file. Pretty sure that it's the former on both choices. On the Python accessibility issue, there's some discussion [here](https://github.com/psi4/psi4/issues/347) (start in the paragraph above ""Future""). Findif's vibrational analysis capabilities have to be moved out of that module because it's organized on the assumption the psi4 has _no_ analytic Hessians available. Some of the shift to py-side is already in the works (@bwb314), and I expect this molden-writing can be moved py-side, too, once the data is accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286431537:234,access,accessibility,234,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286431537,2,['access'],"['accessibility', 'accessible']"
Security,"Oh, good. We'll want the data structures accessible in python, too (plan for the last three years), but for text, Molden format should do for convention.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-285475194:41,access,accessible,41,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285475194,1,['access'],['accessible']
Security,"Oh, here's the full debuginfo. ==12645== Process terminating with default action of signal 11 (SIGSEGV); ==12645== Access not within mapped region at address 0x0; ==12645== at 0x11C73A9: psi::scfgrad::SCFGrad::compute_gradient() (scf_grad.cc:330); ==12645== by 0x11BF3EC: psi::scfgrad::scfgrad(psi::Options&) (wrapper.cc:16); ==12645== by 0x67BD9E: py_psi_scfgrad() (python.cc:177); ==12645== by 0x682F96: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (invoke.hpp:75); ==12645== by 0x31C2429AAA: boost::python::objects::function::call(_object_, _object_) const (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2429CC7: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2432C4A: boost::python::handle_exception_impl(boost::function0<void>) (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2427F84: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x3D50849C0D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508D9582: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508DDCBE: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D5086DA36: ??? (in /usr/lib64/libpython2.7.so.1.0)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/6#issuecomment-17472943:115,Access,Access,115,https://psicode.org,https://github.com/psi4/psi4/issues/6#issuecomment-17472943,1,['Access'],['Access']
Security,"Ok the previous code somewhat makes sense if, for some reason, the PG wasn't copied on purpose, but I don't know why that wouldn't be. Conceptually, a copy is a copy. Hence the bug, I suppose. Segfaults probably come from trying to access the symmetry info (which are null pointers) based on what you thought the symmetry was, although I would hope there are checks for that",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191806383:232,access,access,232,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191806383,1,['access'],['access']
Security,"Ok, 3 min to inspect and fix code, 1 hr to access it in an actual job to check it's doing the right thing. That `_AM` bit is only in local, which isn't hit by any test case. If you turn on local, it complains about no Weak Pairs TOC entry. Fair enough. Transplant code to main ccsort for better observation, but ccsort is turned off in favor of cctranssort. Force ccsort. Possible helpful note: from objdir, it's not ../psi4/share that's running _unless_ it's been through an install. Rather, stage/... is running. Anyway, change made and it should work, not that anyone could know :-) CC codes free of libint deps. Thanks Andy and Jet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240466044:43,access,access,43,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240466044,1,['access'],['access']
Security,"Ok, I've secured `psi4` login at sylabs. I'm for storing them where they can be found. The ""install apptainer"" GHA only had two stars, so I bet there isn't a ready-made ""upload to sylabs GHA"". I'm not sure if it's doing no root or writeable filesys or anything. Do you want repo access to play with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064:9,secur,secured,9,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064,2,"['access', 'secur']","['access', 'secured']"
Security,"Ok, after @susilehtola's heads-up and some Googling, I think I now have a working solution. The COPYING file now contains GPLv2 **verbatim** (no mention of newer ones). I got rid of both LICENSE and CITATION and essentially stuck them into README.md so they're very accessible; the statement that newer GPL versions are allowed is in this README.md file. Removing LICENSE also forces the GitHub parser to parse CITATION, so that it correctly accredits us with the GPLv2 license. As you can see, this took a few failed attempts, so this should be squashed when merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/684#issuecomment-296445736:266,access,accessible,266,https://psicode.org,https://github.com/psi4/psi4/pull/684#issuecomment-296445736,1,['access'],['accessible']
Security,"Ok, so you've got two branches, ""devdevel_bugs"" and ""cepa_test"" and they both have the same commits. Make note of which commit hashes ought to be in each PR. Then go back to your master branch and update it wrt upstream master (`git checkout master`, `git pull --rebase upstream master`). Make a _new_ branch and apply only the appropriate commits (`git checkout -b cepa_new`, `git cherry-pick aaaa`, `git cherry-pick dddd`). Then push the new branch onto github using the name of the old branch so that the new set of fewer commits show up under the existing PR. It'll have to be a force push because you're rewriting the history of the github branch (`git push -f cepa_new:cepa_test`). Then go back to master (`git checkout master`) and repeat with the t1/d1 commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712#issuecomment-302948800:127,hash,hashes,127,https://psicode.org,https://github.com/psi4/psi4/pull/712#issuecomment-302948800,1,['hash'],['hashes']
Security,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184#issuecomment-156220388:339,access,access,339,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388,1,['access'],['access']
Security,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:223,expose,exposed,223,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259,1,['expose'],['exposed']
Security,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-344288297:56,hash,hash,56,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297,2,['hash'],['hash']
Security,"On my HPC cluster compute nodes do not have access to a user's home directory. This makes dftd3 crash with the following error:. RuntimeError: [Errno 13] Permission denied: '/home/s/spoel/dftd3_d6f02c65'. I checked the source code dftd3.f and found; ```; call get_environment_variable(""HOME"", homedir); write (*,*) trim(homedir); write(dtmp,'(a,''/.dftd3par.'',a)')trim(homedir),trim(ftmp) ; inquire(file=dtmp,exist=ex); ```. Do I need to hack the fortran to make this run? I realize this is not strictly a Psi4 problem...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1960:44,access,access,44,https://psicode.org,https://github.com/psi4/psi4/issues/1960,1,['access'],['access']
Security,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234668387:978,access,access,978,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387,1,['access'],['access']
Security,"Ooooooooooooh I didn't know that. It's awesome. I kind of want something to break again now :D. Also, I can't close the issue, actually, because I don't have write access to this repository, I guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189552370:164,access,access,164,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189552370,1,['access'],['access']
Security,"PY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:2392,access,access,2392,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['access'],['access']
Security,"Per the last Psi4 call, I'd like to challenge you to think about how much of libcfmm could be factored out of Psi4. Many other codes might be interested in this functionality, too, if it can be made accessible through a simple API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208484833:199,access,accessible,199,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208484833,1,['access'],['accessible']
Security,"Please supply the git hash of your Psi4 version, plugins have changed a lot lately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271911191:22,hash,hash,22,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271911191,1,['hash'],['hash']
Security,"Please, can you provide an input file?. Anyway, I think the problem here is that in the IBO localization procedure, one uses a different basis set than for the whole calculation - and the minimal atomic orbital basis set `cc-pvtz-minao` likely doesn't have definitions for iodine. You can override the default by setting the `minao_basis` keyword to something that's defined for iodine. I would imagine that with an overall `def2-tzvp` basis set, you'd still want to use the same ECP for the localization procedure, so try with `set minao_basis def2-svp`. This makes a calculation including iodine complete without crashing on my PC, but whether the results are physical, I cannot tell. @loriab: Note that the tutorial video mentioned [here](https://psicode.org/psi4manual/master/fisapt.html#f-i-sapt-keywords) is not accessible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291#issuecomment-916338339:818,access,accessible,818,https://psicode.org,https://github.com/psi4/psi4/issues/2291#issuecomment-916338339,1,['access'],['accessible']
Security,"Poking around the PSIO machinery, it seems to me that it is meant to be capable of doing a sort of ""userland RAID0"", where IO is striped over multiple scratch directories. But as far as I can tell, this is not (in any shape or form) accessible to users, so the number of volumes is always 1. While this is a somewhat interesting feature, and I can imagine that there are circumstances where it would be useful, it comes at the cost of increasing code complexity in PSIO. Right now, it is the worst of both worlds: noone can benefit from the feature, and PSIO code is more complicated. So IMO, this feature should be either rehabilitated and documented, or stripped out. I am not volunteering for either, so this may very well be one of those ""for the sake of posterity"" issues.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725:233,access,accessible,233,https://psicode.org,https://github.com/psi4/psi4/issues/2725,1,['access'],['accessible']
Security,Provide Read-only access to T1/T2 python side,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344:18,access,access,18,https://psicode.org,https://github.com/psi4/psi4/pull/1344,1,['access'],['access']
Security,Psi4 Accessing More Cores Than Requested on our Cluster,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:5,Access,Accessing,5,https://psicode.org,https://github.com/psi4/psi4/issues/2747,1,['Access'],['Accessing']
Security,"Psi4 doesn't seem to be initializing global variables in a way that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:75,access,accessed,75,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['access'],['accessed']
Security,"Psi5 only exists in arguments about version naming :-) . I agree that `1.0.0` is out-of-sync with the released beta versions like 4.0b5. But it is in sync with the past 11 months (https://anaconda.org/psi4/psi4/files), ever since we started identifying commits by actual version numbers rather than just git hashes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182956745:308,hash,hashes,308,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182956745,1,['hash'],['hashes']
Security,QCEngine support would be great for a general interface and access to all the LNO and F12 goodies!. The PSI4 (and I suspect also ORCA and Molpro) interface is a bit different in the sense that those programs compute the integrals and hand them over to MRCC for arbitrary order CC(n) type of calculations. Dates back to when MRCC was essentially only doing that. . Not sure how much use the (broken) 'classic' interface has.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1092765492:60,access,access,60,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1092765492,1,['access'],['access']
Security,Re-enables sanitizer flags with the CMake superbuild,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845:11,sanitiz,sanitizer,11,https://psicode.org,https://github.com/psi4/psi4/pull/845,1,['sanitiz'],['sanitizer']
Security,"Recent forum interactions have exposed that even if the wavefunction class were documented, there's no page that tells users ""to find quantities, look on the wavefunction."" The importance of the wavefunction doesn't seem documented anywhere. This should be added to the Psi4 tutorial section, possibly as a new page on how to find quantities in Psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339:31,expose,exposed,31,https://psicode.org,https://github.com/psi4/psi4/issues/2339,1,['expose'],['exposed']
Security,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/132#issuecomment-121991365:499,confidential,confidential,499,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365,1,['confidential'],['confidential']
Security,Regularize Wfn and P::e psivar access for scalars and arrays,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:31,access,access,31,https://psicode.org,https://github.com/psi4/psi4/pull/1393,1,['access'],['access']
Security,"Related issue: [2577](https://github.com/psi4/psi4/issues/2577). Using a similar script as the previous reporter (using Psi4 1.9.1 and this build; `conda install -n $VENV_PSI4 psi4 numpy scipy dftd3-python dftd4-python gcp-correction python=$PYTHON_VERSION -c conda-forge`); ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97X-D3BJ/def2-TZVPD', molecule=mol); ```. I get the NYI message:; `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`. Is the implementation of stability check for DFT on the roadmap for the near future? This would be very helpful especially when running UKS as we have observed that open shell systems often have instabilities in the SCF. . I also tried with `PBE/6-31G` and still get this exception. However, this [merged PR](https://github.com/psi4/psi4/pull/2849) implemented stability check for GGA functionals - is this a bug? The NYI message looks like it's triggered for every DFT functional ([see this line](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L578)), whereas [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/subclass_methods.py#L129) the program only raises the error if the functional is meta or needs vv10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236:516,Validat,ValidationError,516,https://psicode.org,https://github.com/psi4/psi4/issues/3236,1,['Validat'],['ValidationError']
Security,Replace deprecated defined(%hash) with exists(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/200:28,hash,hash,28,https://psicode.org,https://github.com/psi4/psi4/pull/200,1,['hash'],['hash']
Security,Sanitize CC Excited State Symmetry Labels,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2524:0,Sanitiz,Sanitize,0,https://psicode.org,https://github.com/psi4/psi4/issues/2524,1,['Sanitiz'],['Sanitize']
Security,"Seems reasonable to me. We can inject the default parameters for the model parameters (``ga``, ``gc``, ``wf``) when we transform the parameters provided from *dftd4* to the qcng format. It might make sense to add them in the ``parameters.toml`` file in *dftd4* as well, not sure about that yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2121#issuecomment-1368077959:31,inject,inject,31,https://psicode.org,https://github.com/psi4/psi4/issues/2121#issuecomment-1368077959,1,['inject'],['inject']
Security,"Since moving to LibInt2, the functions that access one-electron integrals, such as `ao_overlap()`, `ao_kinetic()`, ... behave differently when given no parameters (so the integrals are computed within the orbital basis set) and when given two basis set parameters (which is e.g. needed to access integrals in an auxiliary basis). The former gives an appropriate symmetric matrix with all integrals filled in. The latter produces a matrix with only the lower triangle filled with integrals and the upper triangle containing zeros. I think it would be better if the integral functions always filled in the other triangle (by symmetry) and returned a symmetric matrix. Here's the Python code that demonstrates the issue in case of the AO overlap integrals:; ```; import sys; import numpy as np; import psi4. psi4.set_memory('16 GB'); np.set_printoptions(threshold=sys.maxsize). mol = psi4.geometry(""""""; 0 1; O -0.0669991400 0.0000000000 1.4943547400; H 0.8157342700 0.0000000000 1.8658663900; H 0.0688551000 0.0000000000 0.5391427700. units angstrom; symmetry c1; """"""). psi4.set_options({'basis': 'aug-cc-pvdz',; 'df_basis_mp2':'aug-cc-pvdz-ri',; }). conv = psi4.core.BasisSet.build(mol,'BASIS', psi4.core.get_global_option('BASIS')); aux = psi4.core.BasisSet.build(mol,'DF_BASIS_MP2',"""", ""RIFIT"", psi4.core.get_global_option('DF_BASIS_MP2')). wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); mints = psi4.core.MintsHelper(wfn.basisset()). Soo = np.asarray(mints.ao_overlap()); Sxx = np.asarray(mints.ao_overlap(aux,aux)). print(""Orbital overlap matrix""); print(Soo); print(""Auxiliary overlap matrix""); print(Sxx); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2985:44,access,access,44,https://psicode.org,https://github.com/psi4/psi4/issues/2985,2,['access'],['access']
Security,"Since the problem is that CMake is not detecting the proper flags, this issue also affects all the other options; ```; option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798:592,sanitiz,sanitizer,592,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798,4,['sanitiz'],['sanitizer']
Security,"Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205091286:146,validat,validated,146,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205091286,1,['validat'],['validated']
Security,"Sorry, I wasn't specific enough before. I have no objection to strings being sanitized at this level, but we should check with the options parser what the `type()` is first. If we get `istring`, it shouldn't be uppercased, but `string` should.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/511#issuecomment-260098923:77,sanitiz,sanitized,77,https://psicode.org,https://github.com/psi4/psi4/pull/511#issuecomment-260098923,1,['sanitiz'],['sanitized']
Security,"Stepping through, it seems it crashes in `DFHelper::transform()` when calling in `identify_order()`, in particular in this line:. ```; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; ```. segfault seems to happen in C++ standard lib at. ```; /usr/include/c++/8/bits/stl_tree.h:1888; 1888		if (!_M_impl._M_key_compare(_S_key(__x), __k)); ```. This is C++ 8.2.0-13 (the -13 being Debian's revision). Will try to dig deeper. It seems the iterator `itr` gets bogus after the `itr--` on line 1537:. ```; 1536	 needs.erase(itr);; (gdb) ; 1537	 itr--;; (gdb) p itr; $124 = ""Aaa""; (gdb) n; 1519	 for (itr = needs.begin(), end = needs.end(); itr != end; ++itr) {; (gdb) p itr; $125 = <error: Cannot access memory at address 0x701040707070707>; (gdb) n; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; (gdb) p itr; $126 = <error reading variable: Cannot access memory at address 0x207070007060505>; (gdb) n. Program received signal SIGSEGV, Segmentation fault.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059:709,access,access,709,https://psicode.org,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059,2,['access'],['access']
Security,"Sure thing, Ryan can get you access next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198809968:29,access,access,29,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198809968,1,['access'],['access']
Security,"Sure, I can expose the other GRAC terms to allow users to modify them. For SAPT(DFT) requiring GRAC I was under the impression that some sort of check is (effectively) required so that users do not skip this in the input (and thus get very poor results). Do you have an idea of a clean way to check that the user has satisfied the asymptotic correction in *some* way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/939#issuecomment-373475590:12,expose,expose,12,https://psicode.org,https://github.com/psi4/psi4/issues/939#issuecomment-373475590,1,['expose'],['expose']
Security,"Sure, I'm ok with that modification. On Fri, Feb 26, 2016 at 2:24 PM, Lori A. Burns notifications@github.com; wrote:. > If the above works, and you think it'd be helpful, I can edit; > https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to; > something like; > ; > ```; > elif reference == 'ROHF':; > if mtd_type == 'CONV':; > if module == 'DETCI': # no default for this case; > func = run_detci; > elif module in ['']:; > psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282#issuecomment-189441001.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441755:572,access,access,572,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441755,1,['access'],['access']
Security,"Sure, `cpscf_linear_response` in principle allows one to pass a list of operators [here](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/response/scf_response.py#L113), so you can build your own response property. But apparently this feature is neither tested nor accessible from `psi4.properties`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-964898464:322,access,accessible,322,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964898464,1,['access'],['accessible']
Security,"Taken from the forum: http://forum.psicode.org/t/mbis-radial-moments/1990. ""Would it be possible to also compute/output the third radial moment of the atomic electron density, ie eq 24 from this paper?: https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456. This would be really valuable for dispersion C6 coefficients, and should be readily accessible from the MBIS partitioned AIM densities."". @andyj10224 @zachglick thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2041:338,access,accessible,338,https://psicode.org,https://github.com/psi4/psi4/issues/2041,1,['access'],['accessible']
Security,"Thank you @loriab!!! . I can validate that pinning libint2 fixes this on our Cloud platform as well, I'll close this case. ; Thanks again for addressing this so quickly!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1146353841:29,validat,validate,29,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1146353841,1,['validat'],['validate']
Security,"Thank you dgasmith. I've just seen that loriab fixed some plugins including the one I need (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so thank you very much again loriab. I will try this new version soon, when I have access to my office PC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195050556:256,access,access,256,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195050556,1,['access'],['access']
Security,Thank you for the detailed report. You're probably right about the firewall causing the `pubchem*` tests to fail. I'll see what I can figure out about the others.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184197959:67,firewall,firewall,67,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184197959,1,['firewall'],['firewall']
Security,"Thanks Jonathon. If it is simpler, I can give you access to our cluster (by sending you the login data via email) where you can test the problematic input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155166619:50,access,access,50,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155166619,1,['access'],['access']
Security,"Thanks for fixing that one! I have found another however which comes up when I request to save all wavefunction properties via QCEngine using the latest dev version of psi4, here is the error message.; ```; QCEngine Input Error: Traceback (most recent call last):; File ""/Users/joshua/miniconda3/envs/psi4/lib//python3.8/site-packages/psi4/driver/schema_wrapper.py"", line 410, in run_qcschema; ret = qcel.models.AtomicResult(**ret_data, stdout=_read_output(outfile)); File ""pydantic/main.py"", line 274, in pydantic.main.BaseModel.__init__\npydantic.error_wrappers.ValidationError: 1 validation error for AtomicResult\nwavefunction -> occupations_a; Return quantity scf_occupations_a does not exist in the values. (type=value_error); ```. I think this is related to the lines here which pulls out the occupations which have been commented out I am not sure if these simply need to be uncommented or if there is some formatting that needs to be worked out https://github.com/psi4/psi4/blob/670a85012a2864dd6673ac4a39243156205c500e/psi4/driver/schema_wrapper.py#L344. ccing @dgasmith in case he knows the status of this. @hokru could you please re-open this issue or should I make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946:564,Validat,ValidationError,564,https://psicode.org,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946,2,"['Validat', 'validat']","['ValidationError', 'validation']"
Security,"Thanks for helping with that, Lori. I think the CMake and libmints integration tasks are pretty well separated at this point. The stuff I added to external was mostly placeholder so please overwrite at will - you have write access to my branch. It looks like some upstream changes to the CMake config file naming scheme might be needed, so I just decided to build a standalone lib and worry about integration later - therefore you won't be interfering with anything if you feel like changing the CMake stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421:224,access,access,224,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421,1,['access'],['access']
Security,"Thanks for switching the base from `1.3.x` to `master`. Unfortunately, it didn't go as cleanly as we need. The thing to do is on your clone, make sure you have `origin` and `upstream` remotes at `git remote -v`. Then checkout the upstream master branch, check that its hash matches the upstream psi4 master (that is, the hash next to ""Latest commit"" right off the https://github.com/psi4/psi4/ page). Then checkout a new branch, e.g., `git checkout -b libpsioexport`. Then apply your one commit, `git cherry-pick 9788333289e4c48d57a9bf7e453fb8855fbc8ae9`. Then push that new branch to the branch associated with this PR. It will have to be force-pushed b/c overwriting history, `git push origin libpsioexport:psi4-dev --force`. Then this PR should have only one commit in it, yours, and be with respect to the development, master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-592552146:269,hash,hash,269,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-592552146,2,['hash'],['hash']
Security,"Thanks for the detailed report. I can reproduce the segfault, though for the benefit of other developers, I'll point out that this can be reproduced with `scf` instead of `wb97m-d3bj`. Sophisticated DFT functionality is not the issue here. This looks like a missing option validation at runtime. I'll add that my advisor is _also_ unhappy with the way Psi4 assumes options for precisely situations like these, but I have a few other things to patch before I touch options passing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1182482578:273,validat,validation,273,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1182482578,1,['validat'],['validation']
Security,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:304,expose,exposes,304,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270,1,['expose'],['exposes']
Security,"Thanks for the report. I've been able to reproduce the crash. (I observe a fifth decimal place disagreement in DF-RKS SAD energy and a third decimal place disagreement in all iteration energies.) There are two things that worry me here:. 1. The crash itself. I struggle to imagine why the ADIIS optimization problem is so difficult to solve here.; 2. The abhorrent SCF energies. The energy jumps 138 hartrees after the guess! If I remember correctly, the SAD energy isn't the energy corresponding to a particular set of orbitals, but this is still astounding. @susilehtola may have some insight on this. I can poke on this, but the first step will be to try and reproduce this with a smaller system. I don't have access to 14 threads, so I'll have trouble running this repeatedly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164:713,access,access,713,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164,1,['access'],['access']
Security,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1528,confidential,confidential,1528,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760,1,['confidential'],['confidential']
Security,Thanks guys. Here is the list:. # packages in environment at /usr/local:; #; ```; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_gnu conda-forge; brotlipy 0.7.0 py310h5764c6d_1005 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.18.1 h7f98852_0 conda-forge; ca-certificates 2022.12.7 ha878542_0 conda-forge; certifi 2022.12.7 pyhd8ed1ab_0 conda-forge; cffi 1.15.1 py310h255011f_3 conda-forge; charset-normalizer 3.1.0 pyhd8ed1ab_0 conda-forge; colorama 0.4.6 pyhd8ed1ab_0 conda-forge; conda 23.1.0 py310hff52083_0 conda-forge; conda-package-handling 2.0.2 pyh38be061_0 conda-forge; conda-package-streaming 0.7.0 pyhd8ed1ab_1 conda-forge; condacolab 0.1.7 pypi_0 pypi; cryptography 40.0.1 py310h34c0648_0 conda-forge; fmt 9.1.0 h924138e_0 conda-forge; icu 72.1 hcb278e6_0 conda-forge; idna 3.4 pyhd8ed1ab_0 conda-forge; keyutils 1.6.1 h166bdaf_0 conda-forge; krb5 1.20.1 h81ceb04_0 conda-forge; ld_impl_linux-64 2.40 h41732ed_0 conda-forge; libarchive 3.6.2 h3d51595_0 conda-forge; libcurl 7.88.1 hdc1c0ab_1 conda-forge; libedit 3.1.20191231 he28a2e2_2 conda-forge; libev 4.33 h516909a_1 conda-forge; libffi 3.4.2 h7f98852_5 conda-forge; libgcc-ng 12.2.0 h65d4601_19 conda-forge; libgomp 12.2.0 h65d4601_19 conda-forge; libiconv 1.17 h166bdaf_0 conda-forge; libmamba 1.4.1 hcea66bb_0 conda-forge; libmambapy 1.4.1 py310h1428755_0 conda-forge; libnghttp2 1.52.0 h61bc06f_0 conda-forge; libnsl 2.0.0 h7f98852_0 conda-forge; libsolv 0.7.23 h3eb15da_0 conda-forge; libsqlite 3.40.0 h753d276_0 conda-forge; libssh2 1.10.0 hf14f497_3 conda-forge; libstdcxx-ng 12.2.0 h46fd767_19 conda-forge; libuuid 2.38.1 h0b41bf4_0 conda-forge; libxml2 2.10.3 hfdac1af_6 conda-forge; libzlib 1.2.13 h166bdaf_4 conda-forge; lz4-c 1.9.4 hcb278e6_0 conda-forge; lzo 2.10 h516909a_1000 conda-forge; mamba 1.4.1 py310h51d5547_0 conda-forge; ncurses 6.3 h27087fc_1 conda-forge; openssl 3.1.0 h0b41bf4_0 conda-forge; pip 23.0.1 pyhd8ed1ab_0 conda-forge; pluggy 1.0.0 pyhd8ed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109#issuecomment-1856808647:316,certificate,certificates,316,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856808647,1,['certificate'],['certificates']
Security,Thanks! It looks like I will have to move the function `SharedVector DipoleInt::nuclear_contribution` out of the class `DipoleInt` otherwise it won't be exposed since it is a derived class (`class DipoleInt : public OneBodyAOInt`). Any idea of where to put it?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444527333:153,expose,exposed,153,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444527333,1,['expose'],['exposed']
Security,"Thanks, @bozkaya, I'm glad you'll have a chance to work on it. You can use standard `git` to access the branch. From a local clone, make sure my fork is a remote (analogous to ""alex"" below). If not, then `git remote add loriab https://github.com/loriab/psi4.git`. Then pull down the branch with `git fetch loriab ugurfno`. Then check out the branch with `git checkout ugurfno`, and ""make dfocc fno defaults match fnocc"" should be the top commit in `git log`. Proceed with normal development, and push to your account `git push origin ugurfno`. You can either open a new PR to psi4 master from there (to replace this PR) or open a PR to loriab ugurfno (to continue this PR). ```; >>> git remote -v; alex	https://github.com/AlexHeide/psi4.git (fetch); alex	https://github.com/AlexHeide/psi4.git (push); origin	https://github.com/loriab/psi4.git (fetch); origin	https://github.com/loriab/psi4.git (push); upstream	https://github.com/psi4/psi4.git (fetch); upstream	https://github.com/psi4/psi4.git (push); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-444903155:93,access,access,93,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-444903155,1,['access'],['access']
Security,Thanks. We'll see how azure likes this state. It's a little tricky to access CI records for old commits.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089#issuecomment-768406431:70,access,access,70,https://psicode.org,https://github.com/psi4/psi4/pull/2089#issuecomment-768406431,1,['access'],['access']
Security,"That's going to be logic on values not readily accessible at ""select-function"" time when scf is not yet run. If someone was running a slew of molecules with cisd/sto-3g and wanted a single serial calc of them all to continue, then I can see the benefit, but sto-3g is so tentative a calc that I'm inclined to think the existing error msg suffices. Glad to do it if the consensus is it's wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/546#issuecomment-266559167:47,access,accessible,47,https://psicode.org,https://github.com/psi4/psi4/issues/546#issuecomment-266559167,1,['access'],['accessible']
Security,"That's much clearer, thank you. The syntax seems good to me, but I vote for single access / multi storage. That prevents the syntax from getting unwieldy if we decide we need variables of types other than float and array. My main reason is that having different accessors feels like a clunky interface to me, especially for PsiAPI. Variable getting in PsiAPI should treat types like Python does, not C++.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485:83,access,access,83,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485,2,['access'],"['access', 'accessors']"
Security,"The ""other"" lebedev_mapping_: That's just the declaration for it. The problem is that `SphericalGrid::build` is a _static_ method so the; constructor isn't called when that happens. Someone might yank out the; `new` there and still statically access `lebedev_mapping_` and we are back; where we started. There's no guarantee of construction, so I stapled it; into the one place it's actually used. (And, again, I don't understand why it's used at all as it never seems to; show up downstream). Even if it was in the constructor though (which would fire on the _new_) it; would still need the mutex to ensure it's initialized once as; lebedev_mapping_ is also (purposefully) static. No sense doing the rebuild; of the map on every single object instantiation. On Wed, Oct 5, 2022, 4:59 AM Susi Lehtola ***@***.***> wrote:. > lebedev_mapping_ is a member of SphericalGrid, so initialize_lebedev(); > should be called in the constructor of SphericalGrid. No need to add; > mutexes etc.; >; > More worryingly, I also see another lebedev_mapping_ in cubature.cc; >; > https://github.com/psi4/psi4/blob/ac8f87a1dd3fdda2aabc3318713d6e5ce00e2c70/psi4/src/psi4/libfock/cubature.cc#L5065; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2736#issuecomment-1268150804>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JCEAMFQBY2H6OKMPYLWBU7NRANCNFSM6AAAAAAQ5DTWOY>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086:243,access,access,243,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086,1,['access'],['access']
Security,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282102859:309,Validat,ValidationError,309,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859,1,['Validat'],['ValidationError']
Security,"The PseudoSpectral stuff should move to the attic as it's neither tested nor accessed, but I understand there is work on COSX which would re-use parts of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414#issuecomment-1064423492:77,access,accessed,77,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064423492,1,['access'],['accessed']
Security,"The `809f363` is the commit hash, which is the latest commit ""Merge pull request 743"" on the main GH page. The `dev419` just means 419 commits beyond the latest tag, which you probably saw is ""v1.1"". The conda dev package version is computed from a [git describe](https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L105) command so that there's always a sortable version for every commit but it can also be linked back to the git record via the hash. Last set of release notes will be for 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/763#issuecomment-314960521:28,hash,hash,28,https://psicode.org,https://github.com/psi4/psi4/issues/763#issuecomment-314960521,2,['hash'],['hash']
Security,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83124188:303,access,access,303,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188,1,['access'],['access']
Security,"The affected files are psi_start.cc, python.cc, and version.cc . One potential complication is that it has to be accessible before much else has started up in order to be a command-line option. After The Inversion might be a time to find a solution that won't need changing again in short order. The fact of the versioned_code target building first rather than last is, I think, just because it hasn't any dependencies, since it really only depends on `git describe`. If you want to tweak this to happen later, rather than sooner, go right ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239193115:113,access,accessible,113,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239193115,1,['access'],['accessible']
Security,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:324,access,accessible,324,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['access'],['accessible']
Security,The does-your-PR-break-the-docs and archive-a-tarball-of-your-PRs-docs-for-you-to-check-offline aspects of this PR are long fulfilled. The let-netlify-build-you-a-website-preview-of-your-PRs-docs and have-bot-push-updates-of-samples-to-your-PR aspects are complicated by security and by people having to understand why they can't simple (not force) push to their own PR branches. I don't think these latter aspects are worth the hassle.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568:271,secur,security,271,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568,1,['secur'],['security']
Security,"The existing sapt-dft1 test case isn't passing with this PR, so some edits here weren't compatible. I'd make up test cases for your new formulation from values in the technical report, then adjust the code so that both old and new tests pass. Or, there will need to be careful explanations of why the old way shouldn't be accessible anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-613182718:322,access,accessible,322,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613182718,1,['access'],['accessible']
Security,"The following calculation; ```; molecule {; 0 1; He 0.0 0.0 -0.01; Gh(Be) 0.0 0.0 0.0; He 0.0 0.0 0.01; }. set basis ugbs; energy('scf'); ```; crashes with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0), (0, 2, 0.0), (1, 2, 0.0)]; ```; Something in the code (QCElemental?) is bastardizing the input so that the atoms that are well-separated are placed on top of each other. @loriab @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978:185,Validat,ValidationError,185,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595606978,1,['Validat'],['ValidationError']
Security,"The following input file segfaults:; ```; molecule {; symmetry c1; H; H 1 1.0 ; }. set basis cc-pvdz; e, wfn = energy('fci', return_wfn=True); wfn.form_tpdm(); ```. The issue is that the driver [cleans up DETCI after every energy call](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579). That cleanup [frees the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458). But `form_tpdm` works by [creating a new CI vector](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56), which is [set with the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115), which the driver freed, giving rise to a bad access exception. So which code is supposed to be responsible for DETCI cleanup? If that's the responsibility of `procrouting`, then `form_tpdm` is always going to segfault, so `form_tpdm` shouldn't be exposed to Python at all, and the user should have the TPDM be formed and kept via `set tpdm true`. If cleanup is not the responsibility of `procrouting`, then which code is supposed to be responsible for it? Leave it to the destructor?. DETCI design decisions are above my pay grade, so I'm leaving this to DGAS and CDS. The 1.4 paper is of course higher priority, but I need this feature working very badly, so I will start pinging on Tuesday.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812:722,access,access,722,https://psicode.org,https://github.com/psi4/psi4/issues/1812,2,"['access', 'expose']","['access', 'exposed']"
Security,"The following input file; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set solver_precondition subspace; set solver_n_guess 3. gradient('mp2/cc-pvdz'); ```; segfaults due to a bad access exception. While the segfault occurred on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L290), the real problem is earlier. The loop structure [assumes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L280-L285) that `x_` and `b_` have the same number of elements. But the last method we ran [was `setup`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L163-L164), which [clears `x_`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L276). Even then, `setup` appears to have its own, unrelated problem. The preconditioner submatrix `A_` is [populated using the results of a `products_x()` call](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L259-L272). But `x_` [consists of zero vectors](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/solver.cc#L251), so the submatrix guess procedure is just an overcomplicated way to write zero at present. That is probably very bad for the algorithm. Making matters even worse, I have not been able to find a standard conjugate gradients preconditioner with a name similar to ""SUBSPACE,"" so I cannot figure out how this algorithm was supposed to work. In short, this code is broken, and I would say beyond repair. Can I eliminate all the code for the ""SUBSPACE"" preconditioner from the `CGRSolver`? We'd just fall back to the ""JACOBI"" preconditioner, which is the default anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1918:185,access,access,185,https://psicode.org,https://github.com/psi4/psi4/issues/1918,1,['access'],['access']
Security,"The following input:. ```; import psi4. mol = psi4.geometry(""""""; He 0 0 0; """"""). wfn = psi4.properties('scf/sto-3g'); ```. fails with the following exception:; ```; Traceback (most recent call last):; File ""/Users/daniel/Gits/psi4/psi4/run_psi4.py"", line 259, in <module>; exec(content); File ""<string>"", line 23, in <module>; File ""/Users/daniel/Gits/psi4/psi4/driver/driver.py"", line 826, in properties; optstash = driver_util._set_convergence_criterion('properties', lowername, 6, 10, 6, 10, 8); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 78, in _set_convergence_criterion; _method_exists(ptype, method_name); File ""/Users/daniel/Gits/psi4/psi4/driver/driver_util.py"", line 50, in _method_exists; raise ValidationError('%s method ""%s"" is not available.%s' % (Cptype, method_name, alternatives)). ValidationError: Properties method ""scf/sto-3g"" is not available.; ```. How `frequency` uses the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1674) to overcome the issue. The `properties` call in Psi4 is located [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L754) and could use a similar fix (or a nice little function to prevent duplication with `frequency`).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934:727,Validat,ValidationError,727,https://psicode.org,https://github.com/psi4/psi4/issues/934,2,['Validat'],['ValidationError']
Security,"The functions weren't exposed to plugins or Python, so the only downstreams we could possibly break are using locally modified Psi. I'm not worried about them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511:22,expose,exposed,22,https://psicode.org,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511,1,['expose'],['exposed']
Security,"The general plan here is to merge this likely before 1.3, but not hook this up to an external driver yet. So users curious in this code can still access it with a beta warning flag, but in general will not be accessible by non-power users. This will close #886.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-449586996:146,access,access,146,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-449586996,2,['access'],"['access', 'accessible']"
Security,"The issue is probably a few lines lower than that: l. 2474 and l.2475 are accessing `data`, which initializes at the first element in the vector, when it should initialize at the first entry for this thread, `data[aux * tri]`... I'll get a fix up once I'm able to run tests on my cluster. ""Turning parallelization off"" is not the correct fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2192#issuecomment-861481737:74,access,accessing,74,https://psicode.org,https://github.com/psi4/psi4/issues/2192#issuecomment-861481737,1,['access'],['accessing']
Security,"The laboratory server cannot be connected to the network, so I downloaded Psi4conda-1.3.2-py36-Linux-x86_64.sh from the pis4 official website to install it:; ```; [chenh@Pauling programs]$ ./Psi4conda-1.3.2-py36-Linux-x86_64.sh . Welcome to Psi4conda 1.3.2. Psi4conda will now be installed into this location:; /home/chenh/psi4conda. - Press ENTER to confirm the location; - Press CTRL-C to abort the installation; - Or specify a different location below. [/home/chenh/psi4conda] >>> /home/chenh/ly/sourcefolders/psi4conda; PREFIX=/home/chenh/ly/sourcefolders/psi4conda; installing: python-3.6.8-h0371630_0 ...; Python 3.6.8 :: Anaconda, Inc.; installing: blas-1.0-mkl ...; installing: ca-certificates-2019.1.23-0 ...; installing: dftd3-3.2.1-h84218bc_2 ...; installing: dkh-1.2-h173d85e_2 ...; installing: gcp-2.0.2-h84218bc_1 ...; installing: gdma-2.2.6-h0e1e685_6 ...; installing: intel-openmp-2019.3-199 ...; installing: libgcc-ng-8.2.0-hdf63c60_1 ...; installing: libgfortran-ng-7.3.0-hdf63c60_0 ...; installing: libint-1.2.1-hb4a4fd4_6 ...; installing: libstdcxx-ng-8.2.0-hdf63c60_1 ...; installing: simint-0.7-h642920c_1 ...; installing: gau2grid-1.3.1-h035aef0_0 ...; installing: gmp-6.1.2-h6c8ec71_1 ...; installing: gsl-2.4-h14c3975_4 ...; installing: libffi-3.2.1-hd88cf55_4 ...; installing: libxc-4.3.4-h7b6447c_0 ...; installing: metis-5.1.0-hf484d3e_4 ...; installing: mkl-2019.3-199 ...; installing: ncurses-6.1-he6710b0_1 ...; installing: openssl-1.1.1b-h7b6447c_1 ...; installing: tbb-2019.4-hfd86e86_0 ...; installing: xz-5.2.4-h14c3975_4 ...; installing: yaml-0.1.7-had09818_2 ...; installing: zlib-1.2.11-h7b6447c_3 ...; installing: glpk-4.65-h3ceedfd_2 ...; installing: hdf5-1.10.2-hba1933b_1 ...; installing: libedit-3.1.20181209-hc058e9b_0 ...; installing: libefp-1.5.0-h84097be_1 ...; installing: readline-7.0-h7b6447c_5 ...; installing: suitesparse-5.2.0-h9e4a6bb_0 ...; installing: tk-8.6.8-hbc83047_0 ...; installing: ambit-0.3-h137fa24_1 ...; installing: chemps2-1.8.9-h8c3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1788:689,certificate,certificates-,689,https://psicode.org,https://github.com/psi4/psi4/issues/1788,1,['certificate'],['certificates-']
Security,"The lack of normalization was introduced by the CCA. I don't have access to it right now, but I'm fairly sure it's [this paper](http://onlinelibrary.wiley.com/doi/10.1002/jcc.20815/abstract).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874#issuecomment-349333069:66,access,access,66,https://psicode.org,https://github.com/psi4/psi4/issues/874#issuecomment-349333069,1,['access'],['access']
Security,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:202,validat,validate,202,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,1,['validat'],['validate']
Security,The readily available scf gradient terms can be found here: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L122. Not sure about the best way to expose them.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796629840:172,expose,expose,172,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796629840,1,['expose'],['expose']
Security,"The sowreap one is a failure of both the capability and the testing mechanics. It's been removed temporarily through wfn_pass PR. Sapt4 changes are due to actually turning on by default the nat orb tricks we always recommended. That test case has been modified to pass also in wfn_pass PR. The opt one sounds like an actual problem. . Sent from my iPhone. > On Feb 15, 2016, at 8:06 AM, Justin Turney notifications@github.com wrote:; > ; > Thank you for the detailed report. You're probably right about the firewall causing the pubchem\* tests to fail. I'll see what I can figure out about the others.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184200636:507,firewall,firewall,507,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184200636,1,['firewall'],['firewall']
Security,"The third Travis test is timing out too much. This can be traced to the painfully slow download time for the GCC compiler. We have plans to replace this test with some plugin validation, using native GCC compilers to avoid the timeouts. For now, we'll just nuke it to allow the backlog of PRs through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1552:175,validat,validation,175,https://psicode.org,https://github.com/psi4/psi4/pull/1552,1,['validat'],['validation']
Security,"There are further changes that I'd like to make (getting rid of the extra basis set constructor that extracts a single atom basis, in favor of a member to directly get atom hashes) but extra cleanup will be determined by whether we move to py-side construction. This is a decent start that I think we can use as a basis for further debate, once #736 is also merged. Therefore, I think this one's ready to review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734#issuecomment-307941227:173,hash,hashes,173,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307941227,1,['hash'],['hashes']
Security,"There are suggestions that our ADC code is currently incorrect and we have marked it, we could consider deprecating our own ADC module in favor of this approach. Otherwise the select adc approach is the correct one. For now I would inject a name of `adcc-adc` or similar so that it is currently a unique identifier for testing and we can correctly wire up the select functionality later. Dictionary objects are fine to return to the user, the Wavefunction is a PyBind11 dynamic object so you can set additional objects to it `wfn.mydata = {""hello"": ""world""}`. I would take this approach for the first pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288:232,inject,inject,232,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288,1,['inject'],['inject']
Security,This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.; It is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:167,secur,security,167,https://psicode.org,https://github.com/psi4/psi4/pull/2723,12,"['authenticat', 'inject', 'secur']","['authentication', 'injection', 'security', 'security-guides', 'securitylab']"
Security,"This PR exposes EOMCC oscillator strengths to psivars and makes other miscellaneous changes:. - Adds a comment to the TD-DFT code to disambiguate between eigenvectors of two different matrices.; - Renames a variable created earlier in the `cc` cleanup series.; - Makes the `oscillator_strength.cc` and `ex_oscillator_strength.cc` files more similar; - Begins changing `cc47` to newstyle.; - Adds refactor TODOs. **That said**, the EOMCC code currently only supports irrep-separated indexing. The irrep-combined indexing isn't easily obtainable due to the awkward way `cceom` passes information to `ccdensity`. While I could fix this, I'll save that until after `ccdensity` has a wavefunction, so the task becomes easier. I'm happy to make an issue so we don't forget. ## Checklist; - [x] Modified `cc47` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2514:8,expose,exposes,8,https://psicode.org,https://github.com/psi4/psi4/pull/2514,1,['expose'],['exposes']
Security,"This fundamentally isn't how Psi4 works. Psi uses a AO density matrix representation wherever it can, switching to a real space for evaluation of DFT functionals but nowhere else. Maybe you can use Psi4 functions to write your own HF code with this functionality (I'd need to think harder to know if that's even doable), but you can't inject such a density into Psi4's existing HF algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158:335,inject,inject,335,https://psicode.org,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158,1,['inject'],['inject']
Security,"This is also happens on Linux!. `master` (b51ecbca2dfef69d69d2fc4e7ebee54ed6859431) compiled with the address sanitizer (`-DENABLE_ASAN`) finds an overflow on the same line, while running `casscf-fzc-sp` and the others:; ```; $ LD_PRELOAD=/shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/sysroot/lib/libasan.so.4.0.0 ctest -R ""^casscf-fzc-sp$"" --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 3: casscf-fzc-sp; 1/1 Test #3: casscf-fzc-sp ....................***Failed 27.28 sec; =================================================================; ==10081==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6030003bc668 at pc 0x7f28e2c1b07c bp 0x7ffdf8287a00 sp 0x7ffdf82879f8; READ of size 4 at 0x6030003bc668 thread T0; #0 0x7f28e2c1b07b in psi::IntegralTransform::process_spaces() /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform_moinfo.cc:278; #1 0x7f28e2bc18ba in psi::IntegralTransform::initialize() /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform.cc:272; #2 0x7f28e2bdfa02 in psi::IntegralTransform::IntegralTransform(std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>, std::vector<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >, psi::IntegralTransform::TransformationType, psi::IntegralTransform::OutputType, psi::IntegralTransform::MOOrdering, psi::IntegralTransform::FrozenOrbitals, bool) /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform.cc:195; #3 0x7f28dbecd5ad in psi::detci::CIWavefunction::setup_mcscf_ints() /home/raimis/psi4_2.git/psi4/src/psi4/detci/ints.cc:360; #4 0x7f28dbdc38d5 in psi::detci::CIWavefunction::init_mcscf_object() /home/raimis/psi4_2.git/psi4/src/psi4/detci/ciwave.cc:626; #5 0x7f28dbdceeff in psi::detci::CIWavefunction::mcscf_object() /home/raimis/psi4_2.git/psi4/src/psi4/detci/ciwave.cc:655; #6 0x7f28d97a0389 in pybind11::cpp_functio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:110,sanitiz,sanitizer,110,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['sanitiz'],['sanitizer']
Security,"This is pretty simple, so merging. Docs-build tonight will validate harmlessness of removal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187516909:59,validat,validate,59,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187516909,1,['validat'],['validate']
Security,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562:1294,access,access,1294,https://psicode.org,https://github.com/psi4/psi4/issues/562,2,['access'],['access']
Security,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:166,sanitiz,sanitizing,166,https://psicode.org,https://github.com/psi4/psi4/issues/2486,3,"['access', 'sanitiz']","['access', 'sanitizing']"
Security,"This is the output and pydantic has version 1.3. How can it be that ""conda update --all"", or a fresh install for that matter, would not give me the up-to-date version?; ```; # Name Version Build Channel; atomicwrites 1.4.0 pyh9f0ad1d_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; bzip2 1.0.8 h8ffe710_4 conda-forge; ca-certificates 2022.6.15 h5b45459_0 conda-forge; certifi 2022.6.15 py38haa244fe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; dftd3 3.2.1 1 psi4; gau2grid 2.0.7 hcb41399_1 conda-forge; gcp 2.0.2 0 psi4; importlib-metadata 4.11.4 py38haa244fe_0 conda-forge; importlib_metadata 4.11.4 hd8ed1ab_0 conda-forge; importlib_resources 5.8.0 pyhd8ed1ab_0 conda-forge; iniconfig 1.1.1 pyh9f0ad1d_0 conda-forge; intel-openmp 2019.1 144; libblas 3.8.0 8_mkl conda-forge; libcblas 3.8.0 8_mkl conda-forge; libffi 3.4.2 h8ffe710_5 conda-forge; libint2 2.6.0 h2e52968_4 psi4; liblapack 3.8.0 8_mkl conda-forge; libxc 5.2.3 py38h294d835_1 conda-forge; libzlib 1.2.12 h8ffe710_1 conda-forge; m2w64-gcc-libgfortran 5.3.0 6 conda-forge; m2w64-gcc-libs 5.3.0 7 conda-forge; m2w64-gcc-libs-core 5.3.0 7 conda-forge; m2w64-gmp 6.1.0 2 conda-forge; m2w64-libwinpthread-git 5.0.0.4634.697f757 2 conda-forge; mkl 2019.1 144; msgpack-python 1.0.4 py38hbd9d945_0 conda-forge; msys2-conda-epoch 20160418 1 conda-forge; networkx 2.8.4 pyhd8ed1ab_0 conda-forge; numpy 1.22.4 py38h1d2777f_0 conda-forge; openssl 3.0.3 h8ffe710_0 conda-forge; packaging 21.3 pyhd8ed1ab_0 conda-forge; pint 0.17 pyhd8ed1ab_0 psi4; pip 21.2.2 py38haa95532_0; pluggy 1.0.0 py38haa244fe_3 conda-forge; psi4 1.6+77475b5 py38_0 psi4; psutil 5.9.1 py38h294d835_0 conda-forge; py 1.11.0 pyh6c4a22f_0 conda-forge; py-cpuinfo 8.0.0 pyhd8ed1ab_0 conda-forge; pydantic 1.3 py38hfa6e2cd_0 psi4; pyparsing 3.0.9 pyhd8ed1ab_0 conda-forge; pytest 7.1.2 py38haa244fe_0 conda-forge; python 3.8.13 hcf16a7b_0_cpython conda-forge; python_abi 3.8 2_cp38 conda-forge; pyyaml 6.0 py38h294d835_4 conda-forge; qcelemental 0.17.0 py_0 psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:327,certificate,certificates,327,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['certificate'],['certificates']
Security,This is very cool! I have an instance of [Drone CI](https://www.drone-ci.science/) that can be used to run these sanitizer jobs on each commit.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343231505:113,sanitiz,sanitizer,113,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343231505,1,['sanitiz'],['sanitizer']
Security,"This isn't a new numbers PR. This is a ""make numbers that are already computed accessible"" PR. I know how to test this one: hook up `occ` properties, and add this to `test_dipoles`. I can do that, but that's involved enough to be a separate PR, and one for me, not for Nate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767124709:79,access,accessible,79,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767124709,1,['access'],['accessible']
Security,"This looks great. It's good to have the large monolithic chunks of driver code split into smaller parts, printing functions tucked away and not scattered across calculations. Counterpoise-corrected CBS is something I wanted to do for a while!. One point I'd like to make quite early in this PR: the whole pydantic validation mechanism is rather obscure. I understand that each `Computer` inherits from the base class, but I am not 100% sure how things fit together and launching what will get me where. The two tests are currently only of little help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-437622451:314,validat,validation,314,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-437622451,1,['validat'],['validation']
Security,"This sounds nice! Python accessibility of amplitudes would be a great new feature. And cleanup from C structs towards Wavefunction object would also be welcome. The proposed layer of abstraction between DPD and libpsio is perhaps worth some discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:25,access,accessibility,25,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['access'],['accessibility']
Security,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:991,access,access,991,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,1,['access'],['access']
Security,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267205350:276,access,accessible,276,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350,1,['access'],['accessible']
Security,"To give my 2 cents to the questions above:; - `freeze_core True` should be a best-effort solution, always freezing as much as possible, but ensuring there are valence electrons (ie. for Ca2+, [Ne] core is frozen instead of [Ar], while for Ca0, [Ar] is frozen; similarly for Ar- the whole [Ar] shell should be frozen). This one is charge aware. This option should never crash the code.; - `freeze_core N` where `N = [1,2,3...]` will always freeze the N-th previous full shell, ie for `N=1` the current behaviour in master. Validation error when no valence electrons remain, to avoid the non-helpful segfault in #1271.; - @JonathonMisiewicz's idea of per-atom frozen cores (or in my view even better: per-fragment frozen orbitals) is a good one, and I'd be keen to get that sorted, but it'd probably need changes to `molecule {}` or somewhere else.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950:522,Validat,Validation,522,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950,1,['Validat'],['Validation']
Security,"Try out the following:. ``` python; molecule mol {; He; He 1 3.0; symmetry c1; }. scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True). scf_wfn.Da().print_out(); scf_wfn.basisset().print_detail_out(). # Accessors for Da; print scf_wfn.Da().get(0, 0) # Python to C++ accessor; print scf_wfn.Da().np # Numpy accessor; ```. Using `C1` so that we get the AO basis set, SO->AO transformations are pretty simple as well. You can also run python-based help on a BasisSet object (`help(scf_wfn.basisset())`) to get a better idea of how to access it. The docs are pretty limited, but hopefully the function names are somewhat self explanatory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260372655:205,Access,Accessors,205,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260372655,4,"['Access', 'access']","['Accessors', 'access', 'accessor']"
Security,"Ugh. This could be bad if we have to register every boost::shared_ptr that; we want accessible to the Python layer. In the meantime, I'm going to; shift my boost back. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Feb 3, 2016 at 3:45 PM, Ben Pritchard notifications@github.com; wrote:. > Seems boost 1.60 breaks some boost::shared_ptr handling in boost python.; > It looks like before it would automatically register; > boost::shared_ptr<CLASS> into the python registry when you exported the; > class, but it doesn't do that anymore. Instead, you might have to register; > it yourself (?); > ; > See http://permalink.gmane.org/gmane.comp.python.c++/16601 and; > boostorg/python#29 https://github.com/boostorg/python/issues/29; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-179510813.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-179588161:84,access,accessible,84,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179588161,1,['access'],['accessible']
Security,"Ultimately we want to run the JSON through a `jsonschema` validator based on the QC schema spec. However, we are not quite there yet as we would need quite a few extensions. Mostly the question at the moment is how much validation do we want at this moment. For the QC schema test suite: We have about a dozen examples currently of input/ouput. I would imagine that this will expand quiet considerably over time and ultimately represent a test suite in of itself. The QC schema project will produce a `jsonschema` specification of input and output which can validate structure in most languages, see [here](http://json-schema.org/implementations.html). The sample could be turned into a test suite to validate the information contained. A general comment about schema's. They unfortunately have no hope of validating content, just structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979#issuecomment-385076049:58,validat,validator,58,https://psicode.org,https://github.com/psi4/psi4/pull/979#issuecomment-385076049,5,['validat'],"['validate', 'validating', 'validation', 'validator']"
Security,Unfortunately I don't have access to VASP/CRYSTAL as I am not associated with any institution/company... I am using Octopus for periodic systems now but considering alternatives.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/151#issuecomment-122900049:27,access,access,27,https://psicode.org,https://github.com/psi4/psi4/issues/151#issuecomment-122900049,1,['access'],['access']
Security,"Unfortunately, historically the reliability of the libxc testing hasn't been very good, the main reason being that the main developers aren't quantum chemists and haven't had access to a Gaussian basis program. Because most functionals have been trained with a Gaussian basis set, reference values are usually given. Unfortunately, very few paper actually give raw datapoints, and running e.g. G2 atomization energies to validate a single functional might not really make sense....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1266#issuecomment-425099115:175,access,access,175,https://psicode.org,https://github.com/psi4/psi4/issues/1266#issuecomment-425099115,2,"['access', 'validat']","['access', 'validate']"
Security,"Updated this a bit after talking with @bennybp. I think he's going to do the following, then it'll be about ready:; * tarball with higher (h) AM; * also, could you throw an error in libmints if try to access out of bounds AM through simint? or switch to libint?; * absorb the config6 branch into upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281710846:201,access,access,201,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281710846,1,['access'],['access']
Security,"Ups, a proper typo in the original input, but the right molecule was used and the error persists. ----. I think I identified the (or a) problem. There are direct access fortran files that are never closed as far as I tracked it down. If I do so, it seems to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009#issuecomment-696734325:162,access,access,162,https://psicode.org,https://github.com/psi4/psi4/issues/2009#issuecomment-696734325,1,['access'],['access']
Security,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242:842,validat,validated,842,https://psicode.org,https://github.com/psi4/psi4/issues/2242,10,"['Validat', 'validat']","['ValidationError', 'validate', 'validated', 'validating', 'validators']"
Security,Validate DOCC/SOCC; Cleanup Occupation Code in HF,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:0,Validat,Validate,0,https://psicode.org,https://github.com/psi4/psi4/pull/1637,1,['Validat'],['Validate']
Security,ValidationError: Unrecognized point group bits: 96,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:0,Validat,ValidationError,0,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['Validat'],['ValidationError']
Security,"Very true on exposing more symbols later, @dgasmith. I haven't even attempted v2rdm. @edeprince3, FYI, this affects you. There's a discussion in https://github.com/psi4/psi4/pull/814 if you want the details, but the tl;dr is that Psi4's `core.so` built with this PR will not have all the symbols exposed like a normal Linux `.so` for a plugin's use. If there's extra classes or functions that v2rdm needs, they'll need a `PSI_API` added to the (psi) source code. If you get to the v2rdm/psi reconciliation process before me, please ping with any trouble. I'm updating and rebuilding all the conda packages now, but v2rdm is always last, having psi as a dep. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950#issuecomment-380192190:296,expose,exposed,296,https://psicode.org,https://github.com/psi4/psi4/pull/950#issuecomment-380192190,1,['expose'],['exposed']
Security,"We (@amjames and @robertodr) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending [PR #1061, Expose wavefunction and amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform alloca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:166,Expose,Expose,166,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['Expose'],['Expose']
Security,"We are _finally_ passing on Windows. The problem was quite subtle and involved treacherous raw pointers. The old code used `trans_one` and would pass in a pointer to position N in a `*double`, where N was the number of orbitals from previous irreps. The relevant test cases had a final irrep with no orbitals, so the old code would pass in a pointer to one position _after_ the last value. Which was fine, because it was never used. That stopped being fine, according to the Windows compiler, when I switched from `*double` to `std::array`. To be fair, trying to access a non-existent index should never have worked in the first place. The fix I adopted was to eliminate those `trans_one` calls with `libmints::Matrix` operations, with the result that we're using less specialized `libtrans` tech and fewer LoC. Unsurprisingly, I am okay with that. @loriab, unless you want to Jet to double-check that last commit, I think we're clear to bring this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-684999864:563,access,access,563,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-684999864,1,['access'],['access']
Security,"We do have a function somewhere that sanitizes basis set filenames. I wonder if it can be used here, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1442#issuecomment-449408303:37,sanitiz,sanitizes,37,https://psicode.org,https://github.com/psi4/psi4/pull/1442#issuecomment-449408303,1,['sanitiz'],['sanitizes']
Security,We're switching to a consider-all-molecule-at-once test to validate input geometries rather than the present each-atom-at-a-time. The `Adding atom on top of an existing atom` check is thus unneeded and just causes very rare trouble. It has been silenced (though I can't find in which PR).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804#issuecomment-381037567:59,validat,validate,59,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-381037567,1,['validat'],['validate']
Security,"Well, I wholly approve of this sentence: ""Please note that ; sSAPT0 is thus not the same as requesting `exch_scale_alpha 3.0`."" For the psivars, I think I'll just compute from the keyword in the driver, same as you do and pass it along the the qcdb routine (which doesn't access `psi4` commands. Below is what you're doing I think. ``` python; alpha = psi4.get_option('SAPT', 'EXCH_SCAL_ALPHA'); scale = 1.0 if alpha is True else (0.0 if alpha is False else alpha); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/248#issuecomment-183819601:272,access,access,272,https://psicode.org,https://github.com/psi4/psi4/pull/248#issuecomment-183819601,1,['access'],['access']
Security,"What about:. ```python; try:; infile = open(filename, 'r'); if os.stat(filename).st_size == 0:; raise ValidationError(""""""BasisSetParser::parse: given filename '%s' is blank."""""" % (filename)); contents = infile.readlines(); except IOError:; raise BasisSetFileNotFound(""""""BasisSetParser::parse: Unable to open basis set file: %s"""""" % (filename)); finally:; infile.close(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687#issuecomment-518681059:102,Validat,ValidationError,102,https://psicode.org,https://github.com/psi4/psi4/pull/1687#issuecomment-518681059,1,['Validat'],['ValidationError']
Security,"What happened was your previous commits were rebased so your local and master git hashes differed. However, since the new commits had the same diff as your current commits they effectively did nothing. Probably not terribly clear unless your familiar with git. The best thing to do as AJ mentioned is to always make a new branch a pull down a fresh version of `psi4/psi4:master`. . @amjames The histories probably were muddled. We probably need to squash this anyway so we can make a merge as the diff looks fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602#issuecomment-277130364:82,hash,hashes,82,https://psicode.org,https://github.com/psi4/psi4/pull/602#issuecomment-277130364,1,['hash'],['hashes']
Security,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1957:221,access,accessing,221,https://psicode.org,https://github.com/psi4/psi4/issues/1957,1,['access'],['accessing']
Security,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987:1050,validat,validate,1050,https://psicode.org,https://github.com/psi4/psi4/issues/1987,1,['validat'],['validate']
Security,"When you say that the memory usage doesn't go above 70%, what do you mean precisely, and how is it measured? `vmstat -S M` during a run may help us see the breakdown of memory usage a bit. I think the concern is that when using large files, the OS will try to keep (parts of) the files in memory for faster access later. Then these pages may get swapped (or just having them in memory causes other things to get swapped). I'm not sure if/why the kernel would choose to swap rather than free some memory from the page cache (cached data is already on a disk...), but I'm far from a kernel memory expert. Last note: Psi4 is mostly written in C++, and therefore can't always use `posix_fadvise`, since there's no (standard) way to get a `FILE*` or file descriptor from an `std::fstream`. Others can comment about how memory management in psi4 works, but I think it is pretty rudimentary and doesn't interact with the OS at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-228791186:307,access,access,307,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228791186,1,['access'],['access']
Security,"With above commit, gdma1 is still going to fail **even with libint**, as described in psi4/psi4#587. But otherwise, with ERD activated (and ERD traps switched to `sys.exit(0)` from `ValidationError`), get a test suite clean except for below. The first and last are expected to fail on this computer. The middle two are sowreap's that return 0.0000 but, due to our testing structure, continue anyways and fail. I think answers of zero aren't failing silently. ```; The following tests FAILED:; 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	333 - dftd3-version (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277363294:182,Validat,ValidationError,182,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277363294,1,['Validat'],['ValidationError']
Security,"With some python-wrangling, I revived a beta5 (c. mid 2013), and detci is the same. You're exonerated, @dgasmith . (Note to anyone trying this, you'll have to run a mp4 to secure access to detci, since this was way before `qc_module`.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-195805223:172,secur,secure,172,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195805223,2,"['access', 'secur']","['access', 'secure']"
Security,"With the df-mp2 wavefunction object in Python, is there any way to get access to the content of the `energies_` map other than through the global process state (`core.get_variable()`)?. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L792-L800",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642:71,access,access,71,https://psicode.org,https://github.com/psi4/psi4/issues/642,1,['access'],['access']
Security,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344706017:123,access,access,123,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017,1,['access'],['access']
Security,"Yes, see [comment](https://github.com/psi4/psi4/issues/580#issuecomment-273803591). If you absolutely must build 1.0, I can see about getting you access to a proper codebase. But because of the history rewrite, building 1.0 from main repo is impossible. Because of all the other changes, you don't even want 1.0 because you can't move forward from it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581#issuecomment-273805880:146,access,access,146,https://psicode.org,https://github.com/psi4/psi4/issues/581#issuecomment-273805880,1,['access'],['access']
Security,"Yes, the new test would hit the bug and raise the `ValidationError` above in 1.6 and 1.7. The test is very quick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094:51,Validat,ValidationError,51,https://psicode.org,https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094,1,['Validat'],['ValidationError']
Security,"Yes, this is a good point. In my opinion, `freeze_core = 1` is meant to be best-effort behaviour, and freezing 4f for post-lanthanides and 5f for post-actinides will have the additional benefit of freezing all electrons contained in most ECPs, and the 5s5p / 6s6p shell for lanthanides/actinides. This means `freeze_core = 1` will get you the same active occupied orbitals whether you have an ECP or not. The previous behaviour is still accessible using `freeze_core = -1` which would freeze [Xe] strictly for all elements in 6th period and [Rn] for all in 7th period. The behaviour here with a 60-core ECP is clearly nonsensical, but as it's an ""advanced option"" I'm fine with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1930#issuecomment-643713575:437,access,accessible,437,https://psicode.org,https://github.com/psi4/psi4/pull/1930#issuecomment-643713575,1,['access'],['accessible']
Security,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184837562:479,hash,hash,479,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562,1,['hash'],['hash']
Security,"You're right - neither wPBE nor wPBE0 seem to have a defined reference value in the `dft-bench-interaction` test. If you have access to any other code with a trusted implementation, i suppose adding it into the test (and if UKS works, the `dft-bench-ionisation` test too) would help a lot. Note to self: go through all functionals that we provide and check which ones are missing from these two tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424382417:126,access,access,126,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424382417,1,['access'],['access']
Security,"Your next push will clean up this history. We are trying very hard to remove Psivars (and all globals) so id much rather have a setter on the object itself. . Grid is a pretty small quantity all things considered, 10M grid points isn't all that much data these days. It would actually be nice if we could access the entire grid python side. We have some neat interactive visualization examples where this would be very interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234660060:305,access,access,305,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234660060,1,['access'],['access']
Security,"`Ca` and `Cb` are the same in RHF and ROHF theory, yes. For this reason, the spin name is not _incorrect_ but _confusing_. On the C++ side, `Ca` and `Cb` are probably the same object for restricted orbitals, so of course you will find the same name, whether you access the object by `Ca` or `Cb`. For this reason, naming the orbitals ""Alpha"" and ""Beta"" is unacceptable. The best we could remove a spin-specifier from the name entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2587#issuecomment-1137216947:262,access,access,262,https://psicode.org,https://github.com/psi4/psi4/issues/2587#issuecomment-1137216947,1,['access'],['access']
Security,`[ch1jgh@xxx ~]$ conda list; # packages in environment at /home/software/miniconda3:; #; # Name Version Build Channel; ambit 0.2 he865b90_0 psi4; asn1crypto 0.24.0 py36_0 ; atomicwrites 1.1.5 py36_0 ; attrs 18.1.0 py36_0 ; blas 1.0 mkl ; ca-certificates 2018.03.07 0 ; certifi 2018.4.16 py36_0 ; cffi 1.11.5 py36h9745a5d_0 ; chardet 3.0.4 py36h0f667ec_1 ; chemps2 1.8.7 he865b90_1 psi4; conda 4.5.5 py36_0 ; conda-env 2.6.0 h36134e3_1 ; cryptography 2.2.2 py36h14c3975_0 ; decorator 4.3.0 py36_0 ; deepdiff 3.3.0 py36_1 psi4; dftd3 3.2.0 h0e1e685_8 psi4; dkh 1.2 h173d85e_2 psi4; gau2grid 1.1.0 h035aef0_1 psi4; gcp 2.0.2 h0e1e685_0 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.2 hba1933b_1 ; idna 2.6 py36h82fb2a8_1 ; intel-openmp 2018.0.3 0 ; jsonpickle 0.9.6 py36_0 psi4; libedit 3.1.20170329 h6b74fdf_2 ; libefp 1.5.0 h0ecbdb1_1 psi4; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 7.2.0 hdf63c60_3 ; libgfortran-ng 7.2.0 hdf63c60_3 ; libint 1.2.1 h87b9b30_4 psi4; libstdcxx-ng 7.2.0 hdf63c60_3 ; libxc 4.0.2 h14c3975_1 psi4; mkl 2018.0.3 1 ; mkl_fft 1.0.1 py36h3010b51_0 ; mkl_random 1.0.1 py36h629b387_0 ; more-itertools 4.2.0 py36_0 ; ncurses 6.1 hf484d3e_0 ; networkx 2.1 py36_0 ; numpy 1.14.5 py36hcd700cb_3 ; numpy-base 1.14.5 py36hdbf6ddf_3 ; openssl 1.0.2o h20670df_0 ; pcmsolver 1.2.1 py36h8733eb9_0 psi4; pip 10.0.1 py36_0 ; pluggy 0.6.0 py36hb689045_0 ; psi4 1.2+9d4a61c py36hf231b52_1 psi4; psi4-rt 1.2 py36ha3f051b_1 psi4; py 1.5.3 py36_0 ; pycosat 0.6.3 py36h0a5515d_0 ; pycparser 2.18 py36hf9f622e_1 ; pyopenssl 18.0.0 py36_0 ; pysocks 1.6.8 py36_0 ; pytest 3.6.2 py36_0 ; python 3.6.6 hc3d631a_0 ; readline 7.0 ha6073c6_4 ; requests 2.18.4 py36he2e5f8d_1 ; resp 0.7 py36ha93d1a2_0 psi4; ruamel_yaml 0.15.37 py36h14c3975_2 ; scipy 1.1.0 py36hfc37229_0 ; setuptools 39.2.0 py36_0 ; simint 0.7 h642920c_1 psi4; six 1.11.0 py36h372c433_1 ; snsmp2 1.0.1 py36hda7112b_2 psi4; sqlite 3.24.0 h84994c4_0 ; tk 8.6.7 hc745277_3 ; urllib3 1.22 py36hbe7ace6_0 ; v2rdm_casscf 0.8 py36hbddea90_0 psi4; wheel ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526:241,certificate,certificates,241,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404235526,1,['certificate'],['certificates']
Security,"``` bash; $ time psi4 --help. real 0m5.980s; user 0m1.279s; sys 0m4.693s; ```. This is done with b8a2f55b719d3. Why is psi4 so extremely slow to start? I have it both with g++/4.9.2 and icpc/2015.0.090 on multiple computers. As it is the sys time that is very high, I've used strace which tells me:. ```; % time seconds usecs/call calls errors syscall; ------ ----------- ----------- --------- --------- ----------------; 99.99 3.413450 1 5057853 times; 0.01 0.000177 4 43 mmap; 0.00 0.000082 2 37 brk; 0.00 0.000079 79 1 execve; 0.00 0.000071 4 16 close; 0.00 0.000032 2 18 fstat; 0.00 0.000018 1 30 mprotect; 0.00 0.000016 1 15 open; 0.00 0.000015 15 1 1 access; 0.00 0.000000 0 14 read; 0.00 0.000000 0 1 munmap; 0.00 0.000000 0 2 rt_sigaction; 0.00 0.000000 0 1 rt_sigprocmask; 0.00 0.000000 0 2 getdents; 0.00 0.000000 0 1 getrlimit; 0.00 0.000000 0 1 arch_prctl; 0.00 0.000000 0 2 futex; 0.00 0.000000 0 1 sched_getaffinity; 0.00 0.000000 0 1 set_tid_address; 0.00 0.000000 0 1 openat; 0.00 0.000000 0 1 set_robust_list; ------ ----------- ----------- --------- --------- ----------------; 100.00 3.413940 5058042 1 total; ```. Too much time sampling?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89:657,access,access,657,https://psicode.org,https://github.com/psi4/psi4/issues/89,1,['access'],['access']
Security,```; # packages in environment at /home/tjsntlci/.conda/envs/p4dev:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main; _openmp_mutex 5.1 1_gnu; _sysroot_linux-64_curr_repodata_hack 3 haa98f57_10; ambit 0.6 py38h53dec33_2 psi4; attrs 22.1.0 py38h06a4308_0; binutils_impl_linux-64 2.35.1 h27ae35d_9; binutils_linux-64 2.35.1 h454624a_30; blas 1.0 mkl; bzip2 1.0.8 h7b6447c_0; c-ares 1.18.1 h7f8727e_0; ca-certificates 2023.01.10 h06a4308_0; certifi 2022.12.7 py38h06a4308_0; chemps2 1.8.11 hbe8a562_0 psi4; cmake 3.22.1 h1fce559_0; dkh 1.2 h173d85e_2 psi4; eigen 3.3.7 hd09550d_1; execnet 1.9.0 pyhd3eb1b0_0; expat 2.4.9 h6a678d5_0; flit-core 3.6.0 pyhd3eb1b0_0; gau2grid 2.0.7 hd18ef5c_0 psi4; gcc_impl_linux-64 7.5.0 h7105cf2_17; gcc_linux-64 7.5.0 h8f34230_30; gdma 2.2.6 h0e1e685_6 psi4; gfortran_impl_linux-64 7.5.0 ha8c8e06_17; gfortran_linux-64 7.5.0 h96bb648_30; gxx_impl_linux-64 7.5.0 h0a5bf11_17; gxx_linux-64 7.5.0 hffc177d_30; hdf5 1.10.6 hb1b8bf9_0; importlib-metadata 4.11.3 py38h06a4308_0; importlib_metadata 4.11.3 hd3eb1b0_0; importlib_resources 5.2.0 pyhd3eb1b0_1; iniconfig 1.1.1 pyhd3eb1b0_0; intel-openmp 2021.4.0 h06a4308_3561; kernel-headers_linux-64 3.10.0 h57e8cba_10; krb5 1.19.4 h568e23c_0; ld_impl_linux-64 2.35.1 h7274673_9; libcurl 7.87.0 h91b91d3_0; libecpint 1.0.7 hfebba4c_0 psi4; libedit 3.1.20221030 h5eee18b_0; libev 4.33 h7f8727e_1; libffi 3.4.2 h6a678d5_6; libgcc-devel_linux-64 7.5.0 hbbeae57_17; libgcc-ng 11.2.0 h1234567_1; libgfortran-ng 7.5.0 ha8ba4b0_17; libgfortran4 7.5.0 ha8ba4b0_17; libgomp 11.2.0 h1234567_1; libint2 2.7.1 h2fe1556_15 psi4; libnghttp2 1.46.0 hce63b2e_0; libssh2 1.10.0 h8f2d780_0; libstdcxx-devel_linux-64 7.5.0 hf0c5c8d_17; libstdcxx-ng 11.2.0 h1234567_1; libuv 1.40.0 h7b6447c_0; libxc 5.2.3 hfebba4c_0 psi4; lz4-c 1.9.4 h6a678d5_0; mkl 2021.4.0 h06a4308_640; mkl-devel 2021.4.0 h66538d2_640; mkl-include 2021.4.0 h06a4308_640; mkl-service 2.4.0 py38h7f8727e_0; mkl_fft 1.3.1 py38hd3c417c_0; mkl_random 1.2.2 py38h51133e4_0; ms,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923:410,certificate,certificates,410,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923,1,['certificate'],['certificates']
Security,"```; >>> bin/conda list; # packages in environment at /home/usrname/.local/opt/PSI4/v1.2:; #; # Name Version Build Channel; ambit 0.2 he865b90_0 psi4; asn1crypto 0.24.0 py36_0 ; atomicwrites 1.1.5 py36_0 ; attrs 18.1.0 py36_0 ; blas 1.0 mkl ; ca-certificates 2018.03.07 0 ; certifi 2018.4.16 py36_0 ; cffi 1.11.5 py36h9745a5d_0 ; chardet 3.0.4 py36h0f667ec_1 ; chemps2 1.8.7 he865b90_1 psi4; conda 4.5.8 py36_0 ; conda-env 2.6.0 h36134e3_1 ; cryptography 2.2.2 py36h14c3975_0 ; decorator 4.3.0 py36_0 ; deepdiff 3.3.0 py36_1 psi4; dkh 1.2 h173d85e_2 psi4; gau2grid 1.1.0 h035aef0_1 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.2 hba1933b_1 ; idna 2.6 py36h82fb2a8_1 ; intel-openmp 2018.0.3 0 ; jsonpickle 0.9.6 py36_0 psi4; libedit 3.1.20170329 h6b74fdf_2 ; libefp 1.5.0 h0ecbdb1_1 psi4; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 7.2.0 hdf63c60_3 ; libgfortran-ng 7.2.0 hdf63c60_3 ; libint 1.2.1 h87b9b30_4 psi4; libstdcxx-ng 7.2.0 hdf63c60_3 ; libxc 4.0.2 h14c3975_1 psi4; mkl 2018.0.3 1 ; mkl_fft 1.0.2 py36h651fb7a_0 ; mkl_random 1.0.1 py36h4414c95_1 ; more-itertools 4.2.0 py36_0 ; ncurses 6.1 hf484d3e_0 ; networkx 2.1 py36_0 ; numpy 1.14.5 py36h1b885b7_4 ; numpy-base 1.14.5 py36hdbf6ddf_4 ; openssl 1.0.2o h20670df_0 ; pcmsolver 1.2.1 py36h8733eb9_0 psi4; pip 10.0.1 py36_0 ; pluggy 0.6.0 py36_0 ; psi4 1.2+9d4a61c py36hf231b52_1 psi4; py 1.5.4 py36_0 ; pycosat 0.6.3 py36h0a5515d_0 ; pycparser 2.18 py36hf9f622e_1 ; pyopenssl 18.0.0 py36_0 ; pysocks 1.6.8 py36_0 ; pytest 3.6.2 py36_0 ; python 3.6.5 hc3d631a_2 ; readline 7.0 ha6073c6_4 ; requests 2.18.4 py36he2e5f8d_1 ; ruamel_yaml 0.15.37 py36h14c3975_2 ; setuptools 39.2.0 py36_0 ; simint 0.7 h642920c_1 psi4; six 1.11.0 py36h372c433_1 ; sqlite 3.23.1 he433501_0 ; tk 8.6.7 hc745277_3 ; urllib3 1.22 py36hbe7ace6_0 ; wheel 0.31.1 py36_0 ; xz 5.2.4 h14c3975_4 ; yaml 0.1.7 had09818_2 ; zlib 1.2.11 ha838bed_2; ```; ```; >>> ldd --version; ldd (GNU libc) 2.12; Copyright (C) 2010 Free Software Foundation, Inc.; This is free software; see the sourc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690:246,certificate,certificates,246,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690,1,['certificate'],['certificates']
Security,"`initialize_lebedev` wasn't ever actually called. Since we're using c++11 elsewhere, we can just use an initializer_list to build `lebedev_mapping_` and skip all this `initialize_lebedev` nonsense. Also changes the technically-thread-unsafe `[]` to a `.at()` so this can't be re-broken later. Now, it turns out that there's a lot more ado about `SpherialGrid` and `RadialGrid` and cubature.cc in general, but, we're discussing that over in #2736 . This PR's purpose is JUST to fix the nasty bug that could cause parallel code to hang (if multiple threads tried to touch `lebedev_mapping_` at once, and write a value because `[]` access fills-when-missing, one or more thread could get stuck forever in a tree-that-has-become-a-loop). See #2736 for more details on who/what/where/when/why.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2743:629,access,access,629,https://psicode.org,https://github.com/psi4/psi4/pull/2743,1,['access'],['access']
Security,"advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:2148,access,accessible,2148,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['access'],['accessible']
Security,"all this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry trouble.; - New `from_dict` fn takes a fully validated and defaulted molrec dict and constructs a Mol. psi4 fn is in export_mints.cc, and qcdb fn is in molecule.py.; - New `to_dict` fn serializes Mol into molrec dict. This fn in molecule.py is shared by psi4 & qcdb Mol classes. For the moment (not mandatory), this dict passes again through `from_arrays` and output is compared to make sure (1) resulting dict is pure and (2) Mol hasn't been tampered with in an unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to `molecule {...}`, it's still getting exercised a lot.; - ISAPT calcs may well need to use `from_arrays` rather",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:7022,validat,validated,7022,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['validat'],['validated']
Security,"any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other changes to suggested syntax. - Whole point of posting this as a PEP instead of leaving it on core-dev is so users/downstream/interested parties can weigh in. Please do so.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:3273,access,access,3273,https://psicode.org,https://github.com/psi4/psi4/issues/1375,4,['access'],"['access', 'accessors']"
Security,"ate (0.0, (0.0, 0.0), 1, (1, 2)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (2, 1)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (2, 2)): T T T T T T T T T T T --> False; Traceback (most recent call last):; File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/qcdb/molecule.py"", line 1468, in to_dict; validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/from_arrays.py"", line 381, in from_arrays; verbose=verbose); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 485, in validate_and_fill_chgmult; c_final, fc_final, m_final, fm_final = reconcile(cgmp_exact_c, cgmp_exact_fc, cgmp_exact_m, cgmp_exact_fm); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 475, in reconcile; raise ValidationError(err); qcelemental.exceptions.ValidationError: Inconsistent or unspecified chg/mult: sys chg: 0.0, frag chg: [0.0, 0.0], sys mult: 1, frag mult: [1, 1]. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""tests/python/databases/input.py"", line 10, in <module>; psi4.wrapper_database.database('scf', 'O24by5mb', cp=0, subset=[""4-0.9"", ""12-0.9"", ""20-0.9"", ""23-0.9""]); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/wrapper_database.py"", line 452, in database; molecule = core.Molecule.from_dict(GEOS[rgt].to_dict()); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/qcdb/molecule.py"", line 1477, in to_dict; validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/from_arrays.py"", line 381, in from_arrays; verbose=verbose); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 485, in validate_and_fill_chgmult; c_final, fc_final, m_final, fm_fi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765:2140,Validat,ValidationError,2140,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765,1,['Validat'],['ValidationError']
Security,"b.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuclide, -1 otherwise or unknown.; - Fragmentation member data public access. Rename fragments --> get_fragments; similar for fragment_types, fragment_charges, fragment_multiplicities. Only fisapt code was using this. For setters, added `set_fragmentation_pattern` that sets them all at once.; - Added `input_units_to_au` getter/setter; checks physical reasonableness.; - Sets input_units_to_au whenever set_units called, rather than as extra step.; - Finally add a `com_fixed` fn to mirror `orientation_fixed`. In qcdb.Mol, also a `fix_com`.; - `create_molecule_from_string` was doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_mult",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:3214,access,accessor,3214,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['accessor']
Security,"b/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring for it is kinda moot anyway. > ; > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete. This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to be validated anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:1646,validat,validated,1646,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,6,['validat'],"['validated', 'validating', 'validation', 'validator']"
Security,"b1cef136d/psi4/src/psi4/libfunctional/functional.h#L40-L43) A field is added for ""kinetic"" functionals for future-proofing, but error(s) will be encountered trying to use them.; - [ ] The inheritance structure of the `Functional` class was improved by moving LibXC specific code into the LibXCFunctional class; - [ ] The `Superfunctional` class was modified to have only a single list of functionals, as opposed to a separate list of X and C functionals. This removed the need for special-case behavior for XC functionals -- See [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/src/psi4/libfunctional/superfunctional.cc#L223) and [here](https://github.com/psi4/psi4/blob/1813c0c31e3049511f558a78db15bb2290257650/psi4/driver/procrouting/dft/superfunctionals.py#L90-L92); - [ ] Unused variables and definitions were cleaned up. ## Questions; - [ ] I have all but removed `libxc_xc_func_`... Is there any use for this that I can't think of?; - [ ] Currently, X and C functionals can be accessed with `x_functionals()` and `c_functionals()`. Neither of these return XC functionals as these were previously included in C functionals. These simply create a new filtered vector, which isn't efficient or clean. Perhaps these should be removed in favor of filtering from the Python side?; - [ ] GRAC functionals are still split into X and C functionals. The effect of my changes on this needs to be tested, and perhaps the GRAC functionals should be unified. ## Checklist; - [ ] Remove all `TODO`s corresponding to the above questions; - [ ] Double check that I haven't used `x_functionals()` anywhere that I might want XC functionals -- See question 2; - [ ] Double check that I haven't broken GRAC; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - I have run all DFT tests on my system, but perhaps you would want to confirm?; - [ ] Edit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3203:2050,access,accessed,2050,https://psicode.org,https://github.com/psi4/psi4/pull/3203,1,['access'],['accessed']
Security,"ber, mass, ghosting, extra-label in mol spec.; * **Developer Interest**; - [x] `*.Molecule` forgot `charge_specified` and `multiplicity_specified` attributes. They were only used once in deciding mult defaulting in the SCF and that logic is now handled at mol parsing time.; - [x] `*.Molecule` forgot `create_molecule_from_string()` and good riddance. Also `*.Molecule` `init_with_xyz` (all the format variations can be handled by plain `from_string`. There's an optional `dtype` if you want to be specific.; - [x] Remove singlet/doublet defaulting logic in `Wavefunction::common_init()`, as this is taken care of by mol init; - [x] In keywords (`read_options`), `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`.; - [x] Main `molutil.set_geometry()` that all psithon and psiapi calls use to process user molecule switch from c-side parsing to `qcdb.molparse.from_string()` parsing. This fn handles QM mol, EFP frag, and PubChem contents.; - [x] `libefp` accessed through `PylibEFP` and `-DENABLE_libefp=ON` activates both; - [x] `psi4.core.Molecule.molecule_from_string(string)` constructor calls py-side parsing. Can override string contents with `fix_com`, `fix_orientation`, `fix_symmetry` args. `string` can have QM mol, EFP frag, and pubchem contents. ## Questions; - [ ] @robertodr, feel free to elaborate PCMSolver changes; - [x] ~**Everyone** the previous PR #965 gets both Mol classes to a point where they _can_ be instantiated by py-side parsing (or arrays, or dict). Do we want the second set of changes above where inputparser is calling py-side parsing into 1.2? It will require PylibEFP. SCF/EFP will remain c-side.~; - [x] @robertodr https://github.com/psi4/psi4/pull/953#discussion_r203921398 full test suite (incl. pcm) passes with form_F commented out. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] symmetrize pubc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953:3371,access,accessed,3371,https://psicode.org,https://github.com/psi4/psi4/pull/953,1,['access'],['accessed']
Security,bimf.so]; 0x0000000000000001 (NEEDED) Shared library: [libsvml.so]; 0x0000000000000001 (NEEDED) Shared library: [libstdc++.so.6]; 0x0000000000000001 (NEEDED) Shared library: [libgcc_s.so.1]; 0x0000000000000001 (NEEDED) Shared library: [libintlc.so.5]; 0x0000000000000001 (NEEDED) Shared library: [libc.so.6]; 0x000000000000000e (SONAME) Library soname: [core.cpython-39-x86_64-linux-gnu.so]; 0x000000000000000f (RPATH) Library rpath: [/home/psilocaluser/toolchainconda/envs/py39/lib:$ORIGIN/../:/home/psilocaluser/toolchainconda/envs/py39/lib]; 0x000000000000000c (INIT) 0x1d7000; 0x000000000000000d (FINI) 0x1b03250; 0x0000000000000019 (INIT_ARRAY) 0x2193c00; 0x000000000000001b (INIT_ARRAYSZ) 7200 (bytes); 0x0000000000000004 (HASH) 0x260; 0x000000006ffffef5 (GNU_HASH) 0xe010; 0x0000000000000005 (STRTAB) 0x5e368; 0x0000000000000006 (SYMTAB) 0x1d118; 0x000000000000000a (STRSZ) 851488 (bytes); 0x000000000000000b (SYMENT) 24 (bytes); 0x0000000000000003 (PLTGOT) 0x21a5d60; 0x0000000000000002 (PLTRELSZ) 121032 (bytes); 0x0000000000000014 (PLTREL) RELA; 0x0000000000000017 (JMPREL) 0x1b94d0; 0x0000000000000007 (RELA) 0x133a18; 0x0000000000000008 (RELASZ) 547512 (bytes); 0x0000000000000009 (RELAENT) 24 (bytes); 0x0000000000000018 (BIND_NOW) ; 0x000000006ffffffb (FLAGS_1) Flags: NOW; 0x000000006ffffffe (VERNEED) 0x133868; 0x000000006fffffff (VERNEEDNUM) 6; 0x000000006ffffff0 (VERSYM) 0x12e188; 0x000000006ffffff9 (RELACOUNT) 15654; 0x0000000000000000 (NULL) 0x0; ```; ```; >>> ldd stage/lib/psi4/core.cpython-39-x86_64-linux-gnu.so ; 	linux-vdso.so.1 => (0x00007fffd195a000); 	libpython3.9.so.1.0 => /home/psilocaluser/toolchainconda/envs/py39/lib/libpython3.9.so.1.0 (0x00007f6527640000); 	libgg.so.2 => /home/psilocaluser/toolchainconda/envs/py39/lib/libgg.so.2 (0x00007f652719f000); 	libxc.so.9 => /home/psilocaluser/toolchainconda/envs/py39/lib/libxc.so.9 (0x00007f6525fdf000); 	libint2.so.2 => /home/psilocaluser/toolchainconda/envs/py39/lib/libint2.so.2 (0x00007f64cf7cf000); 	libdl.so.2 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188:3033,HASH,HASH,3033,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188,1,['HASH'],['HASH']
Security,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:2726,access,accessed,2726,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['access'],['accessed']
Security,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:157,hash,hash,157,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,1,['hash'],['hash']
Security,"c-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeErr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:9138,Validat,ValidationError,9138,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['Validat'],['ValidationError']
Security,conda list; ```; # packages in environment at /home/termo/miniconda3/envs/p4dev35:; #; # Name Version Build Channel; attrs 17.4.0 py35_0; binutils_impl_linux-64 2.28.1 had2808c_3; binutils_linux-64 7.2.0 26; bzip2 1.0.6 h9a117a8_4; ca-certificates 2018.03.07 0; certifi 2018.4.16 py35_0; chemps2 1.8.7 ha40901b_0 psi4/label/dev; cmake 3.9.4 h142f0e9_0; curl 7.59.0 h84994c4_0; decorator 4.3.0 py35_0; deepdiff 3.3.0 py_0 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; expat 2.2.5 he0dffb1_0; gau2grid 1.0.1 h14c3975_0 psi4/label/dev; gcc_impl_linux-64 7.2.0 habb00fd_3; gcc_linux-64 7.2.0 26; gdma 2.2.6 hf4d0741_5 psi4/label/dev; gfortran_impl_linux-64 7.2.0 hdf63c60_3; gfortran_linux-64 7.2.0 26; gxx_impl_linux-64 7.2.0 hdf63c60_3; gxx_linux-64 7.2.0 26; hdf5 1.10.1 h9caa474_1; intel-openmp 2018.0.0 8; jsonpickle 0.9.6 py_0 psi4/label/dev; libcurl 7.59.0 h1ad7b7a_0; libedit 3.1 heed3624_0; libefp 1.5b2 h470d631_0 psi4/label/dev; libffi 3.2.1 hd88cf55_4; libgcc-ng 7.2.0 hdf63c60_3; libgfortran-ng 7.2.0 hdf63c60_3; libint 1.2.1 h73b9bb0_3 psi4/label/dev; libssh2 1.8.0 h9cfc8f7_4; libstdcxx-ng 7.2.0 hdf63c60_3; libuv 1.20.0 h14c3975_0; libxc 4.0.2 h14c3975_0 psi4/label/dev; mkl 2018.0.2 1; mkl-devel 2018.0.1 h470d631_5; mkl-include 2017.0.3 intel_8 psi4/label/dev; mkl_fft 1.0.1 py35h3010b51_0; mkl_random 1.0.1 py35h629b387_0; more-itertools 4.1.0 py35_0; ncurses 6.0 h9df7e31_2; networkx 2.1 py35_0; numpy 1.14.2 py35hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.2.1 py35hce75f6e_0 psi4/label/dev; pip 10.0.1 py35_0; pluggy 0.6.0 py35hb428803_0; psi4-dev 1.2a1.dev8 py35h45acd66_0 psi4/label/dev; py 1.5.3 py35_0; pybind11 2.2.3 py35_0 psi4/label/dev; pytest 3.5.1 py35_0; python 3.5.5 hc3d631a_3; readline 7.0 ha6073c6_4; rhash 1.3.5 hbf7ad62_1; setuptools 39.1.0 py35_0; six 1.11.0 py35h423b573_1; sqlite 3.23.1 he433501_0; tk 8.6.7 hc745277_3; wheel 0.31.0 py35_0; xz 5.2.3 h5e939de_4; zlib 1.2.11 ha838bed_2. ```; gcc --version; `gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 201,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008:235,certificate,certificates,235,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008,1,['certificate'],['certificates']
Security,"cratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi4-1.0]$; ```; At the end of the output of the setup script, the user is pointed to CMake log files:. ```; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```; These log files do not exist:; ```. [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log: No such file or directory; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log; ls: cannot access /scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log: No such file or directory; ```. Complete log of the setup script:. ```. [sfux@develop01 psi4-1.0]$ ./setup --cc gcc --cxx g++ --fc gfortran --type release --prefix /cluster/apps/psi4/1.0/x86_64 --max-am-eri 7 --boost-incdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/include --boost-libdir /cluster/apps/boost/1.55.0/x86_64/serial/gcc_4.8.2/lib64 --omp --blas /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --lapack /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_4.8.2/lib/libopenblas.so --cxx11 --zlib-dir /usr --gsl-dir /cluster/apps/gsl/1.16/x86_64/gcc_4.8.2 --hdf5-dir /cluster/apps/hdf5/1.8.12/x86_64/gcc_4.8.2/serial --extra-cc-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-cxx-flags '-ftree-vectorize -march=corei7-avx -mavx' --extra-fc-flags '-ftree-vectorize -march=corei7-avx -mavx' -D CMAKE_VERBOSE_MAKEFILE=ON -D HDF5_sz_LIBRARY_RELEASE=/cluster/apps/szip/2.1/x86_64/gcc_4.8.2/lib/libsz.so",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:2586,access,access,2586,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['access'],['access']
Security,"d be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > > .; > >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/796#issuecomment-331884804>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcVnVaDTdIjAAgctHtOFPT0ldszOGks5sl63AgaJpZM4PK23n>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331891537:1537,access,access,1537,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537,1,['access'],['access']
Security,"date (0.0, (0.0, 0.0), 1, (1, 1)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (1, 2)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (2, 1)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (2, 2)): T T T T T T T T T T T --> False; Traceback (most recent call last):; File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/qcdb/molecule.py"", line 1468, in to_dict; validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/from_arrays.py"", line 381, in from_arrays; verbose=verbose); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 485, in validate_and_fill_chgmult; c_final, fc_final, m_final, fm_final = reconcile(cgmp_exact_c, cgmp_exact_fc, cgmp_exact_m, cgmp_exact_fm); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 475, in reconcile; raise ValidationError(err); qcelemental.exceptions.ValidationError: Inconsistent or unspecified chg/mult: sys chg: 0.0, frag chg: [0.0, 0.0], sys mult: 1, frag mult: [1, 1]. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""tests/python/databases/input.py"", line 10, in <module>; psi4.wrapper_database.database('scf', 'O24by5mb', cp=0, subset=[""4-0.9"", ""12-0.9"", ""20-0.9"", ""23-0.9""]); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/wrapper_database.py"", line 452, in database; molecule = core.Molecule.from_dict(GEOS[rgt].to_dict()); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/qcdb/molecule.py"", line 1477, in to_dict; validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/from_arrays.py"", line 381, in from_arrays; verbose=verbose); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765:2095,Validat,ValidationError,2095,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765,1,['Validat'],['ValidationError']
Security,dftd3 crash trying to access home directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1960:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/issues/1960,1,['access'],['access']
Security,"dos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|-----",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3818,access,access,3818,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['access'],['access']
Security,"dpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1147,access,access,1147,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,1,['access'],['access']
Security,"e or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s->order_ = lebedev_mapping_[npoints];` (the line where things hang on an Unlucky Run), and that line is definitely hit (so my breakpoints are firing correctly). I'm not sure what the consequences of this all are, as I seem to be getting sensible energies (though I suppose I haven't compared to a known good literature benchmark calculated without psi4). I don't think I'm the first person to run into concerns in this part of the code, though, given this comment:; https://github.com/psi4/psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:2177,access,accessed,2177,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['access'],['accessed']
Security,"eason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > Why don't you keep the sensitive new code in separate branches of your; > > (private) fork of the psi4public repo and only merge when the paper is; > > ready? Or only use the private repo for that kind of stuff and push; > > everything still straight to the public repo?; > > I think you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1399,access,access,1399,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['access'],['access']
Security,"elf.set_point_group(self.find_point_group()); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2432, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2532, in find_highest_point_group; return PointGroup(pg_bits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1533, in __init__; self.constructor_bits(*args); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1576, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1754, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). ValidationError: Unrecognized point group bits: 96; ```. If I switch to B3LYP functional, there's no problem. And we're also able to run it on another site (different resources). Maybe we're missing some installation or the local machine libraries are not the right versions? I also paste here an `ldd` of the `core.so`. ```; linux-vdso.so.1 => (0x00007ffddc916000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00002ac921db4000); libc.so.6 => /lib64/libc.so.6 (0x00002ac921fd0000); libpcm.so.1 => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002ac922391000); libxc.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00002ac928dfa000); libdl.so.2 => /lib64/libdl.so.2 (0x00002ac92920a000); libgdma.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002ac92940e000); libderiv.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libderiv.so (0x00002ac92987b000); libint.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:6560,Validat,ValidationError,6560,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['Validat'],['ValidationError']
Security,"ere two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid? It never appears to be used anywhere except one print function that also appears unused. ## Checklist; - [x] No tests needed -- no observable changes and it's hard to write a test for a very rare race condition :). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:1713,access,accessing,1713,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['access'],['accessing']
Security,"ere](https://colab.research.google.com/drive/1uTsmVcFJY5xArRbo4sQ0RGgPiT406xdM?usp=sharing). Additionally, here is the output from `conda list`. . ```; # packages in environment at /usr/local:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 1_gnu conda-forge; alsa-lib 1.2.3 h516909a_0 conda-forge; ambit 0.5.1 hbe8a562_1 psi4; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py37h5e8e339_1 conda-forge; attrs 21.4.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; beautifulsoup4 4.10.0 pyha770c72_0 conda-forge; blas 1.0 mkl ; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; boost 1.74.0 py37h6dcda5c_3 conda-forge; boost-cpp 1.74.0 h312852a_4 conda-forge; bottleneck 1.3.4 py37hce1f21e_0 ; brotli 1.0.9 he6710b0_2 ; brotlipy 0.7.0 py37h5e8e339_1001 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.17.1 h7f98852_1 conda-forge; ca-certificates 2021.10.8 ha878542_0 conda-forge; cairo 1.16.0 hf32fb01_1 ; certifi 2021.10.8 py37h89c1867_1 conda-forge; cffi 1.15.0 py37h036bc23_0 conda-forge; chardet 4.0.0 py37h89c1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c09931_0 ; fonttools 4.25.0 pyhd3eb1b0_0 ; freetype 2.11.0 h70c0345_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:1155,certificate,certificates,1155,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['certificate'],['certificates']
Security,"ernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.10.0-693.5.2.el7.x86_64; - Python 3.6.3; - Jupyter 4.4.0; - Psi4 1.2a1.dev611+8fe3513; <details><summary>Output of `conda list`</summary><p>. ```; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; erd 3.0.6 1 psi4/label/dev; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; gmp 6.1.2 0 conda-forge; hdf5 1.8.17 11 conda-forge; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36_0 conda-forge; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_core 4.4.0 py_0 conda-forge; libefp 1.5b1 0 psi4/label/dev; libgfortran 3.0.0 1 ; libint 1.2.1 1 psi4/label/dev; libsodium 1.0.10 0 conda-forge; libxc 3.0.0 6 psi4/label/dev; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; ncurses 5.9 10 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pexpect 4.2.1 py36_0 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:2706,certificate,certificates,2706,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['certificate'],['certificates']
Security,"ew matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; - Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; - (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017. # Known Bugs; - PCM-ROHF is broken. See #999",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:7066,access,accessing,7066,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['access'],['accessing']
Security,exposes useful functions from detci and libpsio classes to python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821:0,expose,exposes,0,https://psicode.org,https://github.com/psi4/psi4/pull/1821,1,['expose'],['exposes']
Security,"f FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > --------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1100,access,accessed,1100,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['access'],['accessed']
Security,"f what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->. - [x] fix Eco (W) GHA by recognizing that updating the setup-miniconda version changed the environment path, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 139",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:1188,access,access,1188,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['access'],['access']
Security,"favor of DDX_SOLVENT. . According to the manual, DDX_SOLVENT is ignored if DDX_SOLVENT_EPSILON is supplied. Initially I took this as meaning one could *just* supply the DDX_SOLVENT_EPSILON value directly. However, without supplying the DDX_SOLVENT field too, the calculation fails with `psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.`. Hence, in my high throughput script I provided a placeholder in this field if the DDX_SOLVENT_EPSILON option is selected:. ```; #check if dialetric constant is specified or not; if settings.ddx_settings.epsilon is not None:; print('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Req",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:1181,Validat,ValidationError,1181,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['Validat'],['ValidationError']
Security,"four/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'ccsd(t)'},; 'molecule': {'atom_labels': ['', '', ''],; 'atomic_numbers': [8, 1, 1],; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragments': [[0, 1, 2]],; 'geometry': [0.0,; 0.0,; -0.12403886030029525,; 0.0,; -1.431430901356359,; 0.9842933627189459,; 0.0,; 1.431430901356359,; 0.9842933627189459],; 'mass_numbers': [16, 1, 1],; 'masses': [15.99491461957,; 1.00782503223,; 1.00782503223],; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'H2O',; 'provenance': {'creator': 'QCElemental',; 'routine': 'qcelemental.molparse.from_string',; 'version': 'v0.24.0'},; 'real': [True, True, True],; 'schema_name': 'qcschema_molecule',; 'schema_version': 2,; 'symbols': ['O', 'H', 'H'],; 'validated': True},; 'provenance': {'cpu': 'Intel(R) Xeon(R) CPU E7-4870 v2 @ '; '2.30GHz',; 'creator': 'QCEngine',; 'hostname': 'nod10',; 'qcengine_version': 'v0.23.0',; 'username': 'tobias',; 'version': 'v0.23.0',; 'wall_time': 1.2955999374389648}},; 'success': False}; ```; ; Could you please help me what causes this error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:3184,validat,validated,3184,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['validat'],['validated']
Security,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:1990,access,access,1990,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['access'],['access']
Security,"git diff to nominally fix. Further testing required.; ```; --- a/psi4/src/export_mints.cc; +++ b/psi4/src/export_mints.cc; @@ -151,6 +151,7 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; std::string atomlabel = atominfo[0].cast<std::string>();; std::string hash = atominfo[1].cast<std::string>();; int ncore = atominfo[2].cast<int>();; + printf(""%s %s %d is ghost %8.4f\n"", atomlabel.c_str(), hash.c_str(), ncore, mol->Z(atom));; for (int atomshells = 3; atomshells < py::len(atominfo); ++atomshells) {; // Each shell entry has p primitives that look like; // [ angmom, [ [ e1, c1, r1 ], [ e2, c2, r2 ], ...., [ ep, cp, rp ] ] ]; @@ -166,7 +167,9 @@ std::shared_ptr<BasisSet> construct_basisset_from_pydict(const std::shared_ptr<M; coefficients.push_back(primitiveinfo[1].cast<double>());; ns.push_back(primitiveinfo[2].cast<int>());; }; + if (mol->Z(atom)) {; vec_shellinfo.push_back(ShellInfo(am, coefficients, exponents, ns));; + }; }; basis_atom_ncore[name][atomlabel] = ncore;; basis_atom_ecpshell[name][atomlabel] = vec_shellinfo;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261:295,hash,hash,295,https://psicode.org,https://github.com/psi4/psi4/issues/1968#issuecomment-1779923261,2,['hash'],['hash']
Security,ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fft,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1882,certificate,certificates,1882,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['certificate'],['certificates']
Security,"hat your background is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense. Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i. Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation. For reference, the code that Susi linked does the following:; ```; for each irreducible representation of the first index of A, Ha:; 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; 	lda is the number of columns of matrix A;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688:984,validat,validation,984,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688,1,['validat'],['validation']
Security,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1401,Access,Accessors,1401,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,4,"['Access', 'access']","['Accessors', 'access', 'accessor', 'accessorprint']"
Security,"hi, can `psi4` accept density matrix (`Da` / `Db`) instead of orbital coefficients (`Ca` / `Cb`) as initial guess? ; (this is for `RHF` so `Da` == `Db` and same for `C`). I only have some guessed density matrix from an external source, and I want to feed it into `psi4` to check if the SCF calculation still works. I've seen https://forum.psicode.org/t/custom-guess-for-hartree-fock/2026 but my main concern is i'm not sure if this will also work for assigning `Da` rather than `Ca`. I don't have access to a guessed `Ca` matrix, only `Da`. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2896:497,access,access,497,https://psicode.org,https://github.com/psi4/psi4/issues/2896,1,['access'],['access']
Security,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2267:1282,Validat,ValidationError,1282,https://psicode.org,https://github.com/psi4/psi4/issues/2267,1,['Validat'],['ValidationError']
Security,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:2511,access,access,2511,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['access'],['access']
Security,"ing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an open source code so long as we; > > adopt the accompanying philosophy. It's now a matter of getting everyone; > > on board.; > > ; > > Sent f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1854,access,access,1854,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924,1,['access'],['access']
Security,"int('ddx numeric option'); psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"": settings.ddx_settings.epsilon,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again replicated where the solvent_epsilon is set to that of water, and the DDX_SOLVENT_EPSILON option is ignored: ; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"":'5'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:1848,validat,validate,1848,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['validat'],['validate']
Security,"le = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference in ['RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'DFMP2']:; func = run_dfmp2; ; if func is None:; > raise ManagedMethodError(['select_mp2', name, 'MP2_TYPE', mtd_type, reference, module]); E psi4.driver.p4util.exceptions.ManagedMethodError: select_mp2: Method 'mp2' with MP2_TYPE 'DF' and REFERENCE 'RHF' not directable to QC_MODULE 'DETCI'. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:121: ManagedMethodError; ________________________________________________",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:34521,validat,validation,34521,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['validat'],['validation']
Security,lebedev_mapping_ access is thread-unsafe (and also never initialized?),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:17,access,access,17,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['access'],['access']
Security,"lecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/insta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:3878,Validat,ValidationError,3878,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['Validat'],['ValidationError']
Security,"lecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; 6. FNOCC; - QCISD(T)/cc-pVDZ: **ENERGY FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:5986,Validat,ValidationError,5986,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['Validat'],['ValidationError']
Security,"lly; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETCI design decisions are above my pay grade, so I'm leaving this to DGAS; > and CDS. The 1.4 paper is of course higher priority, but I need this; > feature working very badly, so I will start pinging on Tuesday.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1812?email_source=notifications&email_token=AAXVA5XS3UFCJKRLHOJNWI3RC3M2FA5CNFSM4KVNDPSKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4INUQS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1733,access,access,1733,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,1,['access'],['access']
Security,"ma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; > v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; > #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); > at /psi/gits/libxc/src/gga.c:126; > #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; > #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; > #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; > #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; > #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; > #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; > ```; > ; > Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks. Yes, it turns out that the hotfix branch was still a work-in-progress by the time I was forced to go on holidays. I hope to get the remaining issues in the Python frontend fixed today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:3297,access,access,3297,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['access'],['access']
Security,"me discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existing CIWavefunction class to overtake the whole implementation of the CC functionality.; * The class will man",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:1236,Expose,Expose,1236,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['Expose'],['Expose']
Security,"mmend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent, but its effects on COM, inertial frame, symmetry, etc. would need to be probed. Or maybe our moments of inertia are even now wrong in the presence of ghosts. Summary: I would love a rationalization pass through the Mol accessor fns. But what I value more than that is (1) Mol not breaking for downstream code we don't control, (2) a pass through the psi codebase making sure `Z` and `mass` are being used in accordance with the programmers' intentions (apparently not in optrot), and (3) you not going down a Mol rabbit hole. Maybe we should talk more at the conf call tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:2222,access,accessor,2222,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['access'],['accessor']
Security,"nd have been forcing static builds. Again moving to modules is facilitated by shared libraries. I will note that apparently libiwl can't be compiled dynamically. ; ## No More setup.py. `setup.py` just wrapped the CMake call and rewriting it is an exercise in code duplication. My understanding is the point of this file was meant to ease the transition to CMake from GNU Make. Well, I think it's safe to say we've transitioned.; ## Angle Brackets for Includes Clean Up. The vast majority of includes that incorrectly used angled-brackets have been changed to quotes. Although not exactly correct, for all intents and purposes, use quotes to indicate that a header file is part of the current project and angled-brackets indicate it is an external dependency. This is not just semantics, it changes how the compiler behaves. It also can lead to subtle hard to find bugs when you have very commonly named header files and you use directives like `using namespace std` all over the place.; ## Accessing Python Bindings. It used to be there were three ways to compile Psi4: for the conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:7861,Access,Accessing,7861,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['Access'],['Accessing']
Security,"ntly is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few mo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1955,access,access,1955,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['access'],['access']
Security,"o the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:1442,access,access,1442,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['access'],['access']
Security,"on there. This PR completely eliminates the `ERISieve` class, and replaces all of its old functionalities with that of `TwoBodyAOInt`. `ERISieve` is a class in libmints that does many of the same things as `TwoBodyAOInt`. The amount of features that `ERISieve` has, that `TwoBodyAOInt` doesn't, is minimal. It's really just absolute redundancy. Currently, `ERISieve` _only_ finds use within the PKJK class and its subalgorithms. As mentioned, this PR eliminates `ERISieve` and replaces it with `TwoBodyAOInt` in all of the former's previous use cases. Any previously-utilized functionality that was present in `ERISieve` and not in `TwoBodyAOInt` (a couple functions determining basis function significance) were added to `TwoBodyAOInt`. Furthermore, any adjustments needed to support `TwoBodyAOInt` within the PKJK code were made. With all of this, `ERISieve` was also ripped out of the code entirely. Maybe it could go into the attic. ## User API & Changelog headlines; - [X] The core.ERISieve class has been removed, along with its associated functions core.ERISieve.build and core.ERISieve.shell_significant. The removed functionalities, specifically shell_significant, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been removed from Psi4 and replaced with `TwoBodyAOInt`.; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [ ] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - [ ] I guess `ERISieve` can go into the attic now?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933:1366,access,accessed,1366,https://psicode.org,https://github.com/psi4/psi4/pull/2933,1,['access'],['accessed']
Security,"private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an open source code so long as we; > > adopt the accompanying philosophy. It's now a matter of getting everyone; > > on board.; > > ; > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > > ; > > > Why don't you keep the sensitive new code in separate branches of your; > > > (private) fork of the psi4public repo and only merge when the paper is; > > > ready? Or only use the private repo for that kind of stuff and push; > > > everything still",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98501924:2233,access,access,2233,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924,1,['access'],['access']
Security,"psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snaps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5049,hash,hash,5049,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['hash'],['hash']
Security,"ptional addons) or micro (no build tools, just L2, g2g, libxc, qcng, scipy, pytest) or several of those choices Docker images? (I have one vote for minimal.); 3. Docker images are hefty (~600MB for the built psi4). Can I just push them to a `latest` tag and overwrite old ones, or does there need to be a history?; 4. For Docker of psi4 itself, I'm only doing linux-64 (https://hub.docker.com/r/psi4/psi4/tags). Since docker is usually run VM-like, is that all developers want, or should I be building containers for other arch? Certainly I have the other-arch conda pkgs available -- it's just a matter of figuring out docker from them.; 5. I can build singularity/apptainer images from the Docker images, but I haven't figured out how to upload them yet. _For devs_, are apptainers wanted, or will docker alone do?; 6. I'll probably revive the `psi4-dev` pkg, just because it is simple and durable. (And it's the easiest way to convey the Intel-atop-GNU flags.) It'll be a `conda install psi4/label/dev::psi4-dev -c conda-forge` access. Thoughts on improving it?; 7. Those `devtools/*/*buildrun*yaml` env specs are semi-auto-generated from the ecosystem GHA. Are they handy enough to maintain and promote, even though they don't come with `cmake` lines?; 8. Any other build tools to support other workflows wanted? It's easier to set them up all at once. ### Psi4 Conda Packages at Present with Channels. Built psi4 packages are slightly off-topic, but I thought this could be a handy reference for the more exotic ones. Note that these don't have as many addons as previous `-c psi4` packages did. See https://github.com/orgs/psi4/projects/2 for the conda-forge progress tracker. * `linux-64`; * `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge` (GNU compilers, AM5 L2, MKL, all pythons); * `conda install psi4/label/dev::psi4 -c psi4/label/testing -c conda-forge` (Intel compilers, AM7 L2, MKL, even pythons); * `conda install psi4/label/testing::psi4=1.8a2=py310hfdeccc3_2 libb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2965:4679,access,access,4679,https://psicode.org,https://github.com/psi4/psi4/issues/2965,1,['access'],['access']
Security,"q; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.arra",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:12967,access,access,12967,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['access'],['access']
Security,"round is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense.; > ; > Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; > 	lda is the num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:1000,validat,validation,1000,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,1,['validat'],['validation']
Security,"ry happy to see this, it will be a nice addition!. Maybe @andysim and/or @robertodr can check some of the external potential; handling stuff. My group and I will look into some of the subtleties of FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1016,access,access,1016,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['access'],['access']
Security,"s doing all kinds of contortions with fr_types and efp_chg/mult to the extend that fragment* arrays were not the same length. Function to be retired shortly, so papered over.; - Psi has long had the problem that set_multiplicity/set_molecular_charge values might not stick upon reinterpret_coordentries b/c recomputed from fragments (which the user can't change) and by high-spin-sum. Adds logic to retain set_mult value if all fragments real (still no guarantee of physical reasonableness wrt frags) b/c otherwise I couldn't do isapt. See `validate_and_fill_chgmult` for general solution at the boundaries of Mol class, but no good internally to psi4.Mol b/c in python.; - `to_arrays`, `to_dict`, `BFS`, `B787`, `scramble` fns shared btwn psi4 & qcdb Mol classes. When drop py27, can attach qcdb fns directly to psi4 and drop the @static raw_ intermed fns.; - Molecule serialization; - New `from_arrays` constructor that takes minimal (geom & Z) to full geom spec as arrays (homogeneous natom-length, not heterogeneous per-atom) and thoroughly validates them and fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `it",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:4963,validat,validates,4963,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['validat'],['validates']
Security,sanitize molecule names for dfhelper,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2984:0,sanitiz,sanitize,0,https://psicode.org,https://github.com/psi4/psi4/pull/2984,1,['sanitiz'],['sanitize']
Security,"speclabel=False, verbose=0, domain='qm', **molrec); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/from_arrays.py"", line 381, in from_arrays; verbose=verbose); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 485, in validate_and_fill_chgmult; c_final, fc_final, m_final, fm_final = reconcile(cgmp_exact_c, cgmp_exact_fc, cgmp_exact_m, cgmp_exact_fm); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 475, in reconcile; raise ValidationError(err); qcelemental.exceptions.ValidationError: Inconsistent or unspecified chg/mult: sys chg: 0.0, frag chg: [0.0, 0.0], sys mult: 1, frag mult: [1, 1]. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""tests/python/databases/input.py"", line 10, in <module>; psi4.wrapper_database.database('scf', 'O24by5mb', cp=0, subset=[""4-0.9"", ""12-0.9"", ""20-0.9"", ""23-0.9""]); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/wrapper_database.py"", line 452, in database; molecule = core.Molecule.from_dict(GEOS[rgt].to_dict()); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/qcdb/molecule.py"", line 1477, in to_dict; validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/from_arrays.py"", line 381, in from_arrays; verbose=verbose); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 485, in validate_and_fill_chgmult; c_final, fc_final, m_final, fm_final = reconcile(cgmp_exact_c, cgmp_exact_fc, cgmp_exact_m, cgmp_exact_fm); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 475, in reconcile; raise ValidationError(err); qcelemental.exceptions.ValidationError: Inconsistent or unspecified chg/mult: sys chg: 0.0, frag chg: [None, None], sys mult: 1, frag mult: [None, None]; ```. I'm inclined to discourage using it :(",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765:3358,Validat,ValidationError,3358,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765,2,['Validat'],['ValidationError']
Security,switch hash to f936ef3 upon rebase,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/704#issuecomment-301347085:7,hash,hash,7,https://psicode.org,https://github.com/psi4/psi4/pull/704#issuecomment-301347085,1,['hash'],['hash']
Security,"t be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !--------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177:1444,Validat,ValidationError,1444,https://psicode.org,https://github.com/psi4/psi4/issues/2177,2,['Validat'],['ValidationError']
Security,"t has already been patched into c-f builds as of v1.8.2 `_1`. ## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] test py312 where possible (mac py312 works, but to keep testing legacy qcfractal (until psi4 v1.9), need to stick with py39); - [x] switch azure windows to miniforge, so it doesn't spend 18m switching default channels and doing the solve to get mamba. (note that this isn't a weakness of miniconda (which has packaged conda and mamba since this summer) but of the age of the miniconda on chocolatey vs the age of the miniforge.; - [x] tested the new qcfractal 0.51 and found that (1) there's a snowflake threading bug that Ben has since fixed (unreleased) and (2) there's a new space-saving step on qcfractal, so psi4 driver needs to regenerate qcvars info for distributed driver thru qcf runs (fixed here).; - [x] on py312 on windows, there's a change in `shutil.which` that affects us through qcel. currently patched, but awaiting a new release there.; - [x] py312 starts visible SyntaxWarning about non-escaped special characters (like '\n' newline or '\b' bell) and unfortunately, they abound in Windows paths. Further unfortunately, the error detection in the new version parsing for psi4 in qcengine (implemented to avoid those ""[-1] index is not accessible"" means ""pull psi4 tags or otherwise fix version"" errors) springs into defense and thinks a clean psi4 isn't present. So, let's convert possible filepaths to raw strings so no confusion with special chars. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3049:1595,access,accessible,1595,https://psicode.org,https://github.com/psi4/psi4/pull/3049,1,['access'],['accessible']
Security,"te-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1604, in update_geometry; self.set_point_group(self.find_point_group()); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2432, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2532, in find_highest_point_group; return PointGroup(pg_bits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1533, in __init__; self.constructor_bits(*args); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1576, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1754, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). ValidationError: Unrecognized point group bits: 96; ```. If I switch to B3LYP functional, there's no problem. And we're also able to run it on another site (different resources). Maybe we're missing some installation or the local machine libraries are not the right versions? I also paste here an `ldd` of the `core.so`. ```; linux-vdso.so.1 => (0x00007ffddc916000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00002ac921db4000); libc.so.6 => /lib64/libc.so.6 (0x00002ac921fd0000); libpcm.so.1 => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002ac922391000); libxc.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00002ac928dfa000); libdl.so.2 => /lib64/libdl.so.2 (0x00002ac92920a000); libgdma.so => /home/damasj02/software/psi4dev/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002ac92940e000); libderiv.so => /home/damasj02/software/psi4dev/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:6495,Validat,ValidationError,6495,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['Validat'],['ValidationError']
Security,"tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2043,access,access,2043,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['access'],['access']
Security,"thanks, @konpat, this is mostly waiting on v1.3 tag before merge. what's hooked up at present is enough to collect sinf info for runs en masse, and I think that's the plan. Then use best-ways-to-sum-together findings to decide what `energy('sapt???')` should be defined (though I agree that something like `energy('sapt0-sinf')` is almost certainly wanted). would you want to add a paragraph about the sinf methods to https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/sapt.rst ? `.. include:: autodir_options_c/sapt__aio_cphf.rst` is how to auto-inject the read_options.cc blurb into the narrative docs. feel free to put any papers in the introduction.rst sections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629:558,inject,inject,558,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629,1,['inject'],['inject']
Security,"that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETCI design decisions are above my pay grade, so I'm leaving this to DGAS; > and CDS. The 1.4 paper is of course higher priority, but I need this; > feature working very badly, so I will start pinging on Tuesday.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1812?email_source=notifications&email_token=AAXVA5XS3UFCJKRLHOJNWI3RC3M2FA5CNFSM4KVNDPSKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4INUQSEQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5SRRGB7SRIJPXE5OATRC3M2FANCNFSM4KVNDPSA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1941,expose,exposed,1941,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,1,['expose'],['exposed']
Security,this PR now has higher order multipole access and is complete (imo),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1800#issuecomment-582534340:39,access,access,39,https://psicode.org,https://github.com/psi4/psi4/pull/1800#issuecomment-582534340,1,['access'],['access']
Security,"this will get past molecule. ```; diff --git a/psi4/driver/qcdb/molecule.py b/psi4/driver/qcdb/molecule.py; index f8f7ea6..361f059 100644; --- a/psi4/driver/qcdb/molecule.py; +++ b/psi4/driver/qcdb/molecule.py; @@ -1171,7 +1171,7 @@ class Molecule(LibmintsMolecule):; provenance=None,; connectivity=None,; missing_enabled_return='error',; - tooclose=0.1,; + tooclose=1.e-6, #0.1,; zero_ghost_fragments=False,; nonphysical=False,; mtol=1.e-3,; @@ -1465,7 +1465,7 @@ class Molecule(LibmintsMolecule):; # to_dict, but is included as a check. in practice, only fills in mass; # numbers and heals user chgmult.; try:; - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); except qcel.ValidationError as err:; # * this can legitimately happen if total chg or mult has been set; # independently b/c fragment chg/mult not reset. so try again.; @@ -1474,7 +1474,7 @@ class Molecule(LibmintsMolecule):; ); molrec['fragment_charges'] = [None] * len(fragments); molrec['fragment_multiplicities'] = [None] * len(fragments); - validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); + validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', tooclose=1.e-6, **molrec); forgive.append('fragment_charges'); forgive.append('fragment_multiplicities'); compare_molrecs(validated_molrec, molrec, 'to_dict', atol=1.e-6, forgive=forgive, verbose=0); ; diff --git a/psi4/src/psi4/libmints/molecule.h b/psi4/src/psi4/libmints/molecule.h; index 30ef61e..6129121 100644; --- a/psi4/src/psi4/libmints/molecule.h; +++ b/psi4/src/psi4/libmints/molecule.h; @@ -317,9 +317,9 @@ class PSI_API Molecule {; ; /// @{; /// Tests to see of an atom is at the passed position with a given tolerance; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:839,Validat,ValidationError,839,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879,1,['Validat'],['ValidationError']
Security,"ties/input.py; @@ -43,6 +43,9 @@ json_data = {; },; ""keywords"": {""scf_type"": ""df"",; ""mp2_type"": ""df"",; + ""function_kwargs"": {; + ""properties"": [""DIPOLE_POLARIZABILITIES"", ""dipole"", ""quadrupole"", ""mulliken_charges"", ""lowdin_charges"", ""wiberg_lowdin_indices"", ""mayer_indices""],; + },; ""e_convergence"": 9}; }; import copy; @@ -146,6 +149,8 @@ expected_return_result[""wiberg_lowdin_indices""] = np.array(expected_return_resul; expected_return_result[""mayer_indices""] = np.array(expected_return_result[""mayer_indices""]).reshape((3, 3)); ; json_ret = psi4.json_wrapper.run_qcschema(json_data).dict(); +import pprint; +pprint.pprint(json_ret, width=200); ; # can't write msgpack arrays to json; ; @@ -156,3 +161,5 @@ for k in expected_return_result.keys():; ; for k in expected_properties.keys(): #TEST; psi4.compare_values(expected_properties[k], json_ret[""properties""][k], 5, k.upper()) #TEST; +; +print(json_ret[""extras""][""qcvars""][""DIPOLE POLARIZABILITY XX""]); ```; * (2) Access the results afterwards in the AtomicResult through `print(json_ret[""extras""][""qcvars""][""DIPOLE POLARIZABILITY XX""])` and similarly for other 8 components. Bad news: as you see, none of that specification was intuitive or in line with other properties, the polarizability wasn't in return_result like other properties, and polarizabilities missed the boat when multipoles got converted to single arrays from multiple scalars. This could clearly use some cleanup, so please leave the issue open. ----; running the schema-1-properties test with mods above now ends with:. ```; '\n'; ' ==> Response Properties <==\n'; '\n'; ' => Dipole polarizabilities <=\n'; '\n'; ' X Y Z \n'; ' ----- ---------- ---------- ----------\n'; ' X 1.32497 -0.00000 -0.00000\n'; ' Y -0.00000 7.67620 0.00000\n'; ' Z -0.00000 -0.00000 4.87695\n'; '\n'; '*** tstop() called on psinet at Thu Apr 7 18:34:48 2022\n'; 'Module time:\n'; '\tuser time = 0.24 seconds = 0.00 minutes\n'; '\tsystem time = 0.01 seconds = 0.00 minutes\n'; '\ttotal time = 0 second",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2535#issuecomment-1092277160:1446,Access,Access,1446,https://psicode.org,https://github.com/psi4/psi4/issues/2535#issuecomment-1092277160,1,['Access'],['Access']
Security,"to be very sure, I'll check that the same things happen with a truly vanilla build when I get home and have access to my ""normal""/vanilla psi4 build.). Which is where my runs always hang (on the [] access, specifically) when they do. If I pop open gdb, attach, and check what lebedev_mapping_ looks like, I see something somewhat disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attache",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:1492,access,access,1492,https://psicode.org,https://github.com/psi4/psi4/issues/2735,2,['access'],['access']
Security,"tools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry trouble.; - New `from_dict` fn takes a fully validated and defaulted molrec dict and constructs a Mol. psi4 fn is in export_mints.cc, and qcdb fn is in molecule.py.; - New `to_dict` fn serializes Mol into molrec dict. This fn in molecule.py is shared by psi4 & qcdb Mol classes. For the moment (not mandatory), this dict passes again through `from_arrays` and output is compared to make sure (1) resulting dict is pure and (2) Mol hasn't been tampered with in an unphysical way.; - `from_arrays` used internally to qcdb.Molecule for decomposing and reconstituting Mol into np arrays for fragmentation and alignment (potentially reordering); - BasisSet molecule handover (happens a lot to construct py basis for c++ mol and hand it back; also happens once per atom for SAD) that used to use create_psi4_string_from_molecule & create_molecule_from_string now uses to_dict & from_dict. So even though all this serialization tech isn't hooked up to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:6860,Validat,Validates,6860,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Validat'],['Validates']
Security,"ttings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again replicated where the solvent_epsilon is set to that of water, and the DDX_SOLVENT_EPSILON option is ignored: ; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"":'5',; ""DDX_RADII_SET"": 'uff',; ""DDX_MODEL"": 'PCM',; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing. psi4.set_memory('500mb'). psi4.energy('scf/sto-3g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:2190,Validat,ValidationError,2190,https://psicode.org,https://github.com/psi4/psi4/issues/3119,3,['Validat'],['ValidationError']
Security,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:784,sanitiz,sanitizer,784,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,4,['sanitiz'],['sanitizer']
Security,"version='>=2.0.7'] -> vc[version='>=14.1,<15.0a0|>=14.2,<15']; python=3.9 -> bzip2[version='>=1.0.8,<2.0a0'] -> vc[version='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8082,certificate,certificates,8082,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,2,['certificate'],['certificates']
Security,"vide a brief description of the PR's purpose here. -->; The common thread of this PR is be more explicit in what calculations Psi4 can do and conveying that to the user at runtime and through the docs. In practice, this involves expanding the coverage of stdsuite, using those results to autogenerate docs tables, reconciling hand-generated docs tables, referring to all in runtime errors, and cleaning stuff up along the way. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicode character width, othe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:1038,access,accessible,1038,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['access'],['accessible']
Security,"vs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1570, in update_geometry; self.set_point_group(self.find_point_group()); ^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2423, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2523, in find_highest_point_group; return PointGroup(pg_bits); ^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1530, in __init__; self.constructor_bits(*args); File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1573, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1755, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). psi4.driver.qcdb.exceptions.ValidationError: Unrecognized point group bits: 80. Printing out the relevant lines from the Psithon --> Python processed input file:; H -0.3913180530 -0.8282585144 -0.5761431456; H 0.0839750469 -0.2910425067 1.0389058590; H 0.9764814973 0.2730248868 -0.3781855106; """"""); core.IO.set_default_namespace(""""); --> energy(""BP86/sto-3g""). !------------------------------------!; ! !; ! Unrecognized point group bits: 80 !; ! !; !------------------------------------!. Psi4 stopped on: Friday, 30 August 2024 04:55PM; Psi4 wall time for execution: 0:00:00.03. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3213:4766,Validat,ValidationError,4766,https://psicode.org,https://github.com/psi4/psi4/issues/3213,2,['Validat'],['ValidationError']
Security,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1943:128,access,access,128,https://psicode.org,https://github.com/psi4/psi4/issues/1943,1,['access'],['access']
Security,"what disturbing:. ```; #4 psi::SphericalGrid::build (scheme="""", npoints=1852534357, points=0x1b2) at /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc:5142; 5142 /tmp/garden-install.1c2be761ae20/psi4-1.6.1-desres02-c7/psi4/src/psi4/libfock/cubature.cc: No such file or directory.; (gdb) print lebedev_mapping_; $5 = std::map with 6 elements = {; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0,; [26] = 0; }; ```. Which is obviously not correct in two ways:; 1. There shouldn't be multiple entries for 26; 2. The entry for 26 should be 3. The threads are all deadlocking on the `[]` access, probably because multiple threads all tried to access an _unset_ entry of 26, wrote 0 to it in the process, and ran into each other. From what I can find `[]` isn't thread-safe (because of situations like this), and `.at()` should be used instead. Since `lebedev_mapping_` is a static member of `SphericalGrid`, all threads within their nice shiny `new SphericalGrid()`s inside `SphericalGrid::build` are still accessing the same global map, and mayhem is happening in the process. ...but the more disturbing problem, IMO, is that `lebedev_mapping_` appears uninitialized up until this point. I suspect in an ideal codebase all entries in `lebedev_mapping_` that would ever be accessed would already exist, so the difference between `[]` and `.at()` is just the slight performance hit in the latter of checking that the entry exists. There _is_ a function that's supposed to take care of this... https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5125. But from what I can tell, it never gets called. In the attached minimal example I set a breakpoint at `void SphericalGrid::initialize_lebedev()` and it's _never hit_. I also set a breakpoint at `s->order_ = lebedev_mapping_[npoints];` (the line where things hang on an Unlucky Run), and that line is definitely hit (so my breakpoints are firing correctly). I'm not sure what the consequ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:1911,access,accessing,1911,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['access'],['accessing']
Security,"whoa, poltype needs a lot of software! the segfault you posted is not in my power to interpret. do you have access to the file or commands poltype is submitting to psi4? I suspect a bad interaction among software libraries. does `psi4 --test` run ok (that is, no failures)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033:108,access,access,108,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033,1,['access'],['access']
Security,"wrt to the security issues you brought up @yurivict I know that cmake's ExternalProject tools make it possible to check fingerprints after the download step, but this is usually done when some tarball is being downloaded. In our case we are actually using git to clone a repo with the source code, I don't know how you can check the fingerprint for a repo. Now, if we do download any of the external projects as a tarball I completely agree with you that we should probably start checking the fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-344296003:11,secur,security,11,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344296003,1,['secur'],['security']
Security,"you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Individual classes may need to access signatures of the specific subclass they have. Instead, subclasses now have a specific subclass for their `potential_` attribute if applicable. An abstract method has been added to the HF base class to get the potential when the subclass doesn't change the method signature.; - [x] RV::compute_Vx_full now exists alongside RV::compute_Vx. The former needs to exist so we can have a flag to control the spin-integration. The latter needs to exist to not break polymorphism when we don't need that flag.; - [x] A new function has been created to make a UKS version of an RKS functional.; - [x] If a triplet is requested, `compute_functional` will build a UKS functional, compute for that, and cannibalize the pieces to get the properly triplet spin-integrated quantity.; - [x] Ability to do `DAXPBY` added.; - [x] Updated a bad test value. ## Checklist; - [x] `test_tdscf_excitations.py` passes. All 70 of the tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:3288,access,access,3288,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['access'],['access']
Security,"you'd submit to psi4 with `input.protocols.native_files = ""all""` and then access the file _contents_ as `result.native_files[""grid_field.dat""]`, and that can be readily read into arrays. we don't have any grid-dependent qcvariables at present. adding those would probably need a pass that included MO cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384:74,access,access,74,https://psicode.org,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384,1,['access'],['access']
Security,"you're right. it's hitting [this logic](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L802) which didn't have aux-basis-sets-derived-from-orbital-basis-sets in mind when it was derived. two solutions:. a) forget envvar `PSIPATH`. instead, put the `ano-rcc.gbs` in the same directory as the input file. `.` is in the search path.; b) edit `libraryPath` to `basisPath` [here](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasisset.py#L811) and remake (and possibly re-install) to copy into right place. Without write access, (a) is probably the way to go. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487691447:567,access,access,567,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487691447,1,['access'],['access']
Security,"…on the external point charges of the ExternalPotential. ## Description; Provides a way to get the gradient of the potential between a Wavefunction object and an ExternalPotential object on the external point charges. These gradients are collected and stored in a protected SharedMatrix object of the ExternalPotnetial during the ExternalPotential.computePotentialGradients() routine, and they are accessible through a ExternalPotential.gradient() method which is bound to a corresponding method in the Python API. ## User API & Changelog headlines; - [ ] Given a Wavefunction object with an ExternalPotential for which a gradient call has been made, the corresponding gradient on the embedded point charges represented by the ExternalPotential can be retrieved by calling gradient() on the ExternalField. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:398,access,accessible,398,https://psicode.org,https://github.com/psi4/psi4/pull/3087,1,['access'],['accessible']
Testability,	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X- - ]; [gw0] [ 72%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[MN12-SX- - ]; [gw8] [ 88%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; [gw9] [ 91%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97- - ]; [gw10] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D- - ]; [gw0] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D3BJ- - ]; [gw2] [ 99%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X- - ]; ```; Most all the trouble are wB97. The B5050 is off in 3rd decimal but most of the other are; ```; E RuntimeError: ; E Fatal Error: Matrix::power: C_DSYEV failed; E Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/matrix.cc on line: 2280; E The most recent 5 function calls were:; E ; E psi::PsiE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:1972,test,tests,1972,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['test'],['tests']
Testability, 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X- - ]; [gw0] [ 72%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[MN12-SX- - ]; [gw8] [ 88%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; [gw9] [ 91%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97- - ]; [gw10] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D- - ]; [gw0] [ 96%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-D3BJ- - ]; [gw2] [ 99%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X- - ]; ```; Most all the trouble are wB97. The B5050 is off in 3rd decimal but most of the other are; ```; E RuntimeError: ; E Fatal Error: Matrix::power: C_DSYEV failed; E Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/sr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:1874,test,tests,1874,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['test'],['tests']
Testability," ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end time: Apr 16 15:44 CEST; ""nbody-convergence"" time elapsed: 00:00:00; ```. Thank you for your help !",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:2849,Test,Test,2849,https://psicode.org,https://github.com/psi4/psi4/issues/1870,2,['Test'],['Test']
Testability," # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7763,test,testing,7763,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['test'],['testing']
Testability, #100: ci-property ...................... Passed 21.60 sec; Start 106: dcft-grad4; 149/404 Test #54: cc38 ............................. Passed 6.52 sec; Start 267: opt2; 150/404 Test #196: fd-gradient ...................... Passed 23.74 sec; Start 92: ci-multi; 151/404 Test #252: omp2-grad2 ....................... Passed 5.58 sec; Start 323: sapt7; 152/404 Test #92: ci-multi ......................... Passed 7.78 sec; Start 148: dfomp3-grad1; 153/404 Test #348: sapt-compare ..................... Passed 20.49 sec; Start 166: dft-psivar; 154/404 Test #282: opt-irc-3 ........................ Passed 14.20 sec; Start 159: dft-grad-meta; 155/404 Test #148: dfomp3-grad1 ..................... Passed 3.61 sec; Start 342: soscf-dft; 156/404 Test #106: dcft-grad4 ....................... Passed 14.52 sec; Start 49: cc33; 157/404 Test #375: pywrap-bfs ....................... Passed 25.33 sec; Start 72: cc54; 158/404 Test #172: dft3 ............................. Passed 18.93 sec; Start 150: dfomp2p5-1; 159/404 Test #267: opt2 ............................. Passed 15.94 sec; Start 296: psithon2; 160/404 Test #150: dfomp2p5-1 ....................... Passed 2.94 sec; Start 163: dft-freq; 161/404 Test #49: cc33 ............................. Passed 5.98 sec; Start 272: opt6; 162/404 Test #72: cc54 ............................. Passed 5.02 sec; Start 189: fci-tdm-2; 163/404 Test #323: sapt7 ............................ Passed 18.91 sec; Start 32: cc17; 164/404 Test #166: dft-psivar ....................... Passed 17.69 sec; Start 138: dfmp2-grad5; 165/404 Test #296: psithon2 ......................... Passed 10.77 sec; Start 20: cc1; 166/404 Test #32: cc17 ............................. Passed 6.82 sec; Start 207: gibbs; 167/404 Test #159: dft-grad-meta .................... Passed 20.03 sec; Start 146: dfomp3-1; 168/404 Test #342: soscf-dft ........................ Passed 18.93 sec; Start 248: omp2-3; 169/404 Test #272: opt6 ............................. Passed 11.40 sec; Start 131: dfmp2-3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:14718,Test,Test,14718,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #100: ci-property ...................... Passed 41.71 sec; Start 101: cubeprop; 113/411 Test #101: cubeprop ......................... Passed 8.48 sec; Start 102: decontract; 114/411 Test #102: decontract ....................... Passed 1.32 sec; Start 103: dcft-grad1; 115/411 Test #103: dcft-grad1 ....................... Passed 73.33 sec; Start 104: dcft-grad2; 116/411 Test #104: dcft-grad2 ....................... Passed 10.18 sec; Start 105: dcft-grad3; 117/411 Test #105: dcft-grad3 ....................... Passed 7.23 sec; Start 106: dcft-grad4; 118/411 Test #106: dcft-grad4 ....................... Passed 25.47 sec; Start 107: dcft1; 119/411 Test #107: dcft1 ............................ Passed 5.06 sec; Start 108: dcft2; 120/411 Test #108: dcft2 ............................ Passed 1.64 sec; Start 109: dcft3; 121/411 Test #109: dcft3 ............................ Passed 2.46 sec; Start 110: dcft4; 122/411 Test #110: dcft4 ............................ Passed 43.32 sec; Start 111: dcft5; 123/411 Test #111: dcft5 ............................ Passed 43.09 sec; Start 112: dcft6; 124/411 Test #112: dcft6 ............................ Passed 113.61 sec; Start 114: dcft8; 125/411 Test #114: dcft8 ............................ Passed 19.93 sec; Start 115: dcft9; 126/411 Test #115: dcft9 ............................ Passed 10.65 sec; Start 116: ao-dfcasscf-sp; 127/411 Test #116: ao-dfcasscf-sp ................... Passed 1.35 sec; Start 117: dfcasscf-sa-sp; 128/411 Test #117: dfcasscf-sa-sp ................... Passed 3.60 sec; Start 118: dfcasscf-fzc-sp; 129/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.66 sec; Start 119: dfcasscf-sp; 130/411 Test #119: dfcasscf-sp ...................... Passed 1.91 sec; Start 120: dfccd1; 131/411 Test #120: dfccd1 ........................... Passed 1.39 sec; Start 121: dfccdl1; 132/411 Test #121: dfccdl1 .......................... Passed 1.41 sec; Start 122: dfccd-grad1; 133/411 Test #122: dfccd-grad1 ...................... Passed 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:10945,Test,Test,10945,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability, #101: ci-property ...................... Passed 54.46 sec; Start 350: sapt-compare; 141/413 Test #38: cc22 ............................. Passed 43.86 sec; Start 338: scf5; 142/413 Test #26: cc13a ............................ Passed 552.09 sec; Start 276: opt8; 143/413 Test #52: cc35 ............................. Passed 48.07 sec; Start 24: cc12; 144/413 Test #172: dft1-alt ......................... Passed 51.80 sec; Start 309: pywrap-db1; 145/413 Test #63: cc45 ............................. Passed 26.77 sec; Start 198: fd-gradient; 146/413 Test #164: dft-grad-meta .................... Passed 51.13 sec; Start 221: mints-benchmark; 147/413 Test #33: cc17 ............................. Passed 37.13 sec; Start 54: cc37; 148/413 Test #85: cdomp2-2 ......................... Passed 38.27 sec; Start 111: dcft3; 149/413 Test #152: dfomp2p5-1 ....................... Passed 33.21 sec; Start 93: ci-multi; 150/413 Test #254: omp2-grad2 ....................... Passed 36.93 sec; Start 362: x2c1; 151/413 Test #127: dfccsd-grad1 ..................... Passed 40.30 sec; Start 339: scf6; 152/413 Test #108: dcft-grad4 ....................... Passed 40.75 sec; Start 49: cc32; 153/413 Test #338: scf5 ............................. Passed 41.28 sec; Start 73: cc54; 154/413 Test #24: cc12 ............................. Passed 33.78 sec; Start 2: adc2; 155/413 Test #276: opt8 ............................. Passed 35.88 sec; Start 133: dfmp2-3; 156/413 Test #350: sapt-compare ..................... Passed 45.30 sec; Start 51: cc34; 157/413 Test #198: fd-gradient ...................... Passed 35.36 sec; Start 314: rasci-ne; 158/413 Test #309: pywrap-db1 ....................... Passed 43.56 sec; Start 16: cbs-xtpl-gradient; 159/413 Test #54: cc37 ............................. Passed 33.76 sec; Start 325: sapt7; 160/413 Test #111: dcft3 ............................ Passed 34.81 sec; Start 135: dfmp2-ecp; 161/413 Test #49: cc32 ............................. Passed 23.42 sec; Start 284: opt-irc-3; 162,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:14239,Test,Test,14239,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability, #101: cubeprop ......................... Passed 8.78 sec; Start 102: decontract; 114/411 Test #102: decontract ....................... Passed 1.30 sec; Start 103: dcft-grad1; 115/411 Test #103: dcft-grad1 ....................... Passed 210.20 sec; Start 104: dcft-grad2; 116/411 Test #104: dcft-grad2 ....................... Passed 27.58 sec; Start 105: dcft-grad3; 117/411 Test #105: dcft-grad3 ....................... Passed 17.50 sec; Start 106: dcft-grad4; 118/411 Test #106: dcft-grad4 ....................... Passed 32.11 sec; Start 107: dcft1; 119/411 Test #107: dcft1 ............................ Passed 19.13 sec; Start 108: dcft2; 120/411 Test #108: dcft2 ............................ Passed 3.76 sec; Start 109: dcft3; 121/411 Test #109: dcft3 ............................ Passed 8.94 sec; Start 110: dcft4; 122/411 Test #110: dcft4 ............................ Passed 90.18 sec; Start 111: dcft5; 123/411 Test #111: dcft5 ............................ Passed 91.88 sec; Start 112: dcft6; 124/411 Test #112: dcft6 ............................ Passed 113.93 sec; Start 114: dcft8; 125/411 Test #114: dcft8 ............................ Passed 23.39 sec; Start 115: dcft9; 126/411 Test #115: dcft9 ............................ Passed 13.46 sec; Start 116: ao-dfcasscf-sp; 127/411 Test #116: ao-dfcasscf-sp ................... Passed 2.46 sec; Start 117: dfcasscf-sa-sp; 128/411 Test #117: dfcasscf-sa-sp ................... Passed 4.12 sec; Start 118: dfcasscf-fzc-sp; 129/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.70 sec; Start 119: dfcasscf-sp; 130/411 Test #119: dfcasscf-sp ...................... Passed 1.91 sec; Start 120: dfccd1; 131/411 Test #120: dfccd1 ........................... Passed 1.41 sec; Start 121: dfccdl1; 132/411 Test #121: dfccdl1 .......................... Passed 1.38 sec; Start 122: dfccd-grad1; 133/411 Test #122: dfccd-grad1 ...................... Passed 2.48 sec; Start 123: dfccsd1; 134/411 Test #123: dfccsd1 .......................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:11061,Test,Test,11061,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability, #101: cubeprop ......................... Passed 9.11 sec; Start 86: cepa0-grad2; 253/404 Test #127: dfccsdt1 ......................... Passed 2.46 sec; Start 295: psithon1; 254/404 Test #241: ocepa-grad1 ...................... Passed 2.76 sec; Start 83: cdomp2-1; 255/404 Test #253: omp2p5-1 ......................... Passed 1.72 sec; Start 123: dfccsd1; 256/404 Test #255: omp2p5-grad1 ..................... Passed 2.83 sec; Start 10: castup3; 257/404 Test #226: mp2-1 ............................ Passed 3.95 sec; Start 199: fnocc1; 258/404 Test #83: cdomp2-1 ......................... Passed 2.31 sec; Start 243: ocepa1; 259/404 Test #369: dft-jk ........................... Passed 5.86 sec; Start 15: cbs-xtpl-freq; 260/404 Test #86: cepa0-grad2 ...................... Passed 3.02 sec; Start 218: mints8; 261/404 Test #123: dfccsd1 .......................... Passed 2.54 sec; Start 198: freq-isotope2; 262/404 Test #295: psithon1 ......................... Passed 4.02 sec; Start 385: psi4numpy-fci; 263/404 Test #243: ocepa1 ........................... Passed 2.07 sec; Start 139: dfomp2-1; 264/404 Test #285: props2 ........................... Passed 6.83 sec; Start 158: dft-ghost; 265/404 Test #199: fnocc1 ........................... Passed 3.03 sec; Start 388: python-curve; 266/404 Test #10: castup3 .......................... Passed 4.38 sec; Start 108: dcft2; 267/404 Test #198: freq-isotope2 .................... Passed 3.71 sec; Start 393: python-3-index-transforms; 268/404 Test #139: dfomp2-1 ......................... Passed 2.72 sec; Start 137: dfmp2-grad4; 269/404 Test #385: psi4numpy-fci .................... Passed 3.33 sec; Start 98: cisd-sp; 270/404 Test #388: python-curve ..................... Passed 2.61 sec; Start 329: scf-guess-read2; 271/404 Test #108: dcft2 ............................ Passed 1.50 sec; Start 269: opt3; 272/404 Test #15: cbs-xtpl-freq .................... Passed 5.56 sec; Start 265: opt1; 273/404 Test #218: mints8 ........................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:24334,Test,Test,24334,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #104: decontract ....................... Passed 1.30 sec; Start 300: pubchem2; 382/413 Test #355: tu1-h2o-energy ................... Passed 1.26 sec; Start 212: mcscf2; 383/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.63 sec; Start 213: mcscf3; 384/413 Test #356: tu2-ch2-energy ................... Passed 0.86 sec; Start 218: mints5; 385/413 Test #330: scf-upcast-custom-basis .......... Passed 1.54 sec; Start 241: numpy-array-interface; 386/413 Test #351: sapt-sf1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: options1; 388/413 Test #336: scf3 ............................. Passed 0.87 sec; Start 214: mints1; 389/413 Test #332: scf-bs ........................... Passed 1.06 sec; Start 211: mcscf1; 390/413 Test #216: mints3 ........................... Passed 1.11 sec; Start 177: docs-dft; 391/413 Test #223: mints9 ........................... Passed 2.13 sec; Start 162: dft-grac; 392/413 Test #347: dfep2-2 .......................... Passed 2.02 sec; Start 311: pywrap-molecule; 393/413 Test #8: castup1 .......................... Passed 1.50 sec; Start 310: pywrap-db3; 394/413 Test #213: mcscf3 ........................... Passed 0.90 sec; Start 176: docs-bases; 395/413 Test #217: mints4 ........................... Passed 0.61 sec; Start 210: matrix1; 396/413 Test #366: options1 ......................... Passed 0.61 sec; Start 103: cubeprop-frontier; 397/413 Test #241: numpy-array-interface ............ Passed 0.80 sec; Start 88: cepa1; 398/413 Test #214: mints1 ........................... Passed 0.75 sec; 399/413 Test #177: docs-dft ......................... Passed 0.62 sec; 400/413 Test #218: mints5 ........................... Passed 1.04 sec; 401/413 Test #212: mcscf2 ........................... Passed 1.45 sec; 402/413 Test #211: mcscf1 ........................... Passed 0.71 sec; 403/413 Test #300: pubchem2 ......................... Passed 1.60 sec; 404/413 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:36819,Test,Test,36819,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability, #107: dcft1 ............................ Passed 7.05 sec; Start 79: cc8b; 105/411 Test #65: cc48 ............................. Passed 13.29 sec; Start 263: omp3-grad2; 106/411 Test #337: scf6 ............................. Passed 19.28 sec; Start 336: scf5; 107/411 Test #79: cc8b ............................. Passed 9.03 sec; Start 307: pywrap-db1; 108/411 Test #297: pubchem1 ......................... Passed 48.50 sec; Start 34: cc19; 109/411 Test #263: omp3-grad2 ....................... Passed 15.79 sec; Start 348: sapt-compare; 110/411 Test #2: adc2 ............................. Passed 41.12 sec; Start 68: cc50; 111/411 Test #34: cc19 ............................. Passed 15.82 sec; Start 219: mints-benchmark; 112/411 Test #336: scf5 ............................. Passed 22.47 sec; Start 237: nbody-he-cluster; 113/411 Test #170: dft1-alt ......................... Passed 43.76 sec; Start 131: dfmp2-3; 114/411 Test #68: cc50 ............................. Passed 19.88 sec; Start 81: cc9; 115/411 Test #81: cc9 .............................. Passed 4.79 sec; Start 77: cc8; 116/411 Test #307: pywrap-db1 ....................... Passed 37.30 sec; Start 33: cc18; 117/411 Test #77: cc8 .............................. Passed 6.02 sec; Start 66: cc49; 118/411 Test #33: cc18 ............................. Passed 6.57 sec; Start 64: cc47; 119/411 Test #348: sapt-compare ..................... Passed 38.30 sec; Start 106: dcft-grad4; 120/411 Test #237: nbody-he-cluster ................. Passed 25.96 sec; Start 80: cc8c; 121/411 Test #80: cc8c ............................. Passed 6.42 sec; Start 55: cc39; 122/411 Test #219: mints-benchmark .................. Passed 41.17 sec; Start 56: cc4; 123/411 Test #64: cc47 ............................. Passed 13.48 sec; Start 71: cc53; 124/411 Test #66: cc49 ............................. Passed 19.49 sec; Start 245: ocepa3; 125/411 Test #55: cc39 ............................. Passed 10.10 sec; Start 67: cc4a; 126/411 Test #131: dfmp2-3 ........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:10778,Test,Test,10778,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability, #109: dcft3 ............................ Passed 2.96 sec; Start 172: dft3; 176/411 Test #196: fd-gradient ...................... Passed 17.24 sec; Start 50: cc34; 177/411 Test #189: fci-tdm-2 ........................ Passed 20.47 sec; Start 146: dfomp3-1; 178/411 Test #163: dft-freq ......................... Passed 18.25 sec; Start 248: omp2-3; 179/411 Test #50: cc34 ............................. Passed 2.13 sec; Start 315: sapt1; 180/411 Test #358: tu5-sapt ......................... Passed 18.98 sec; Start 338: scf7; 181/411 Test #146: dfomp3-1 ......................... Passed 4.61 sec; Start 126: dfccsd-t-grad1; 182/411 Test #322: sapt-dft-lrc ..................... Passed 19.18 sec; Start 272: opt6; 183/411 Test #172: dft3 ............................. Passed 17.82 sec; Start 290: psimrcc-ccsd_t-4; 184/411 Test #248: omp2-3 ........................... Passed 7.49 sec; Start 165: dft-grad2; 185/411 Test #126: dfccsd-t-grad1 ................... Passed 8.25 sec; Start 16: cbs-xtpl-gradient; 186/411 Test #338: scf7 ............................. Passed 10.67 sec; Start 267: opt2; 187/411 Test #315: sapt1 ............................ Passed 16.80 sec; Start 321: sapt-dft-api; 188/411 Test #272: opt6 ............................. Passed 17.70 sec; Start 62: cc45; 189/411 Test #16: cbs-xtpl-gradient ................ Passed 10.97 sec; Start 22: cc11; 190/411 Test #165: dft-grad2 ........................ Passed 16.52 sec; Start 301: pywrap-basis; 191/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.30 sec; Start 160: dft-grad-lr1; 192/411 Test #62: cc45 ............................. Passed 6.45 sec; Start 202: fnocc4; 193/411 Test #22: cc11 ............................. Passed 7.17 sec; Start 392: python-cc54; 194/411 Test #267: opt2 ............................. Passed 16.01 sec; Start 143: dfomp2-grad1; 195/411 Test #321: sapt-dft-api ..................... Passed 16.61 sec; Start 277: opt12; 196/411 Test #143: dfomp2-grad1 ..................... Passed 4.35 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:17255,Test,Test,17255,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability, #110: dcft5 ............................ Passed 355.89 sec; Start 276: opt-irc-1; 18/401 Test #112: dcft7 ............................ Passed 358.91 sec; Start 90: cepa-module; 19/401 Test #164: dft1 ............................. Passed 106.51 sec; Start 96: cisd-opt-fd; 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 Test #42: cc27 ............................. Passed 392.24 sec; Start 44: cc29; 22/401 Test #75: cc7 .............................. Passed 394.89 sec; Start 47: cc31; 23/401 Test #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69: cc52; 29/401 Test #96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting; 31/401 Test #19: cbs-xtpl-wrapper ................. Passed 62.39 sec; Start 166: dft1-alt; 32/401 Test #90: cepa-module ...................... Passed 125.09 sec; Start 343: sapt-dft2; 33/401 Test #236: ocepa-freq1 ...................... Passed 489.86 sec; Start 58: cc41; 34/401 Test #179: isapt2 ........................... Passed 46.85 sec; Start 366: dft-custom-dhdf; 35/401 Test #316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-delta-energy; 36/401 Test #25: cc13a ............................ Passed 519.27 sec; Start 27: cc13c; 37/401 Test #47: cc31 ............................. Passed 131.54 sec; Start 61: cc44; 38/401 Test #74: cc6 .............................. Passed 78.78 sec; Start 12: cb,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:3295,Test,Test,3295,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #112: dcft6 ............................ Passed 173.25 sec; Start 171: dft2; 167/411 Test #166: dft-psivar ....................... Passed 23.23 sec; Start 172: dft3; 168/411 Test #171: dft2 ............................. Passed 5.02 sec; Start 173: dft-omega; 169/411 Test #111: dcft5 ............................ Passed 186.87 sec; Start 174: docs-bases; 170/411 Test #174: docs-bases ....................... Passed 0.65 sec; Start 175: docs-dft; 171/411 Test #175: docs-dft ......................... Passed 0.59 sec; Start 176: extern1; 172/411 Test #169: dft-vv10 ......................... Passed 16.32 sec; Start 177: extern2; 173/411 Test #159: dft-grad-meta .................... Passed 54.22 sec; Start 179: fsapt2; 174/411 Test #179: fsapt2 ........................... Passed 6.00 sec; Start 180: fsapt-terms; 175/411 Test #172: dft3 ............................. Passed 21.48 sec; Start 183: isapt2; 176/411 Test #180: fsapt-terms ...................... Passed 9.72 sec; Start 184: fci-dipole; 177/411 Test #176: extern1 .......................... Passed 21.11 sec; Start 185: fci-h2o; 178/411 Test #177: extern2 .......................... Passed 24.14 sec; Start 186: fci-h2o-2; 179/411 Test #173: dft-omega ........................ Passed 28.39 sec; Start 187: fci-h2o-fzcv; 180/411 Test #184: fci-dipole ....................... Passed 8.58 sec; Start 188: fci-tdm; 181/411 Test #185: fci-h2o .......................... Passed 7.32 sec; Start 189: fci-tdm-2; 182/411 Test #188: fci-tdm .......................... Passed 1.10 sec; Start 190: fci-coverage; 183/411 Test #187: fci-h2o-fzcv ..................... Passed 5.15 sec; Start 191: fcidump; 184/411 Test #186: fci-h2o-2 ........................ Passed 8.30 sec; Start 192: fd-freq-energy; 185/411 Test #190: fci-coverage ..................... Passed 10.54 sec; Start 194: fd-freq-gradient; 186/411 Test #191: fcidump .......................... Passed 9.42 sec; Start 196: fd-gradient; 187/411 Test #170: dft1-alt .......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:16443,Test,Test,16443,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability, #115: dcft8 ............................ Passed 910.89 sec; Start 169: dft1; 40/412 Test #48: cc31 ............................. Passed 213.55 sec; Start 303: pywrap-cbs1; 41/412 Test #184: isapt2 ........................... Passed 116.22 sec; Start 26: cc13a; 42/412 Test #30: cc14 ............................. Passed 609.23 sec; Start 114: dcft7; 43/412 Test #59: cc41 ............................. Passed 217.43 sec; Start 206: frac-traverse; 44/412 Test #75: cc5a ............................. Passed 142.09 sec; Start 317: sapt2; 45/412 Test #61: cc43 ............................. Passed 214.21 sec; Start 319: sapt4; 46/412 Test #155: dft-grad-lr2 ..................... Passed 112.09 sec; Start 326: scf-bz2; 47/412 Test #360: tu6-cp-ne2 ....................... Passed 430.46 sec; Start 92: cepa-module; 48/412 Test #105: dcft-grad2 ....................... Passed 159.99 sec; Start 372: dft-custom-dhdf; 49/412 Test #169: dft1 ............................. Passed 111.48 sec; Start 31: cc15; 50/412 Test #32: cc16 ............................. Passed 283.37 sec; Start 262: omp3-5; 51/412 Test #279: opt13 ............................ Passed 767.47 sec; Start 260: omp3-3; 52/412 Test #13: cbs-xtpl-alpha ................... Passed 452.73 sec; Start 70: cc51; 53/412 Test #380: cc-module ........................ Passed 296.59 sec; Start 79: cc8a; 54/412 Test #387: cookbook-rohf-orb-rot ............ Passed 326.91 sec; Start 76: cc6; 55/412 Test #303: pywrap-cbs1 ...................... Passed 147.49 sec; Start 281: opt-irc-1; 56/412 Test #79: cc8a ............................. Passed 41.89 sec; Start 116: dcft9; 57/412 Test #31: cc15 ............................. Passed 76.78 sec; Start 280: opt14; 58/412 Test #372: dft-custom-dhdf .................. Passed 95.04 sec; Start 44: cc28; 59/412 Test #326: scf-bz2 .......................... Passed 122.51 sec; Start 320: sapt5; 60/412 Test #70: cc51 ............................. Passed 79.59 sec; Start 83: cc9a; 61/412 Test #92: cepa-mo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:5016,Test,Test,5016,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability, #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b; 24/412 Test #23: cc11 ............................. Passed 25.37 sec; Start 28: cc13c; 25/412 Test #20: cbs-xtpl-wrapper ................. Passed 66.34 sec; Start 29: cc13d; 26/412 Test #26: cc13a ............................ Passed 329.40 sec; Start 30: cc14; 27/412 Test #27: cc13b ............................ Passed 52.22 sec; Start 31: cc15; 28/412 Test #196: fd-freq-gradient-large ........... Passed 362.66 sec; Start 32: cc16; 29/412 Test #28: cc13c ............................ Passed 57.54 sec; Start 33: cc17; 30/412 Test #114: dcft7 ............................ Passed 366.03 sec; Start 34: cc18; 31/412 Test #34: cc18 ............................. Passed 33.35 sec; Start 35: cc19; 32/412 Test #317: sapt2 ............................ Passed 402.38 sec; Start 36: cc2; 33/412 Test #33: cc17 ............................. Passed 40.14 sec; Start 37: cc21; 34/412 Test #31: cc15 .......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:2491,Test,Test,2491,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #120: dfcasscf-sp ...................... Passed 5.45 sec; Start 252: omp2-grad1; 277/412 Test #162: dft-ghost ........................ Passed 8.71 sec; Start 266: opt1; 278/412 Test #185: fci-dipole ....................... Passed 6.72 sec; Start 386: psi4numpy-fci; 279/412 Test #311: rasci-c2-active .................. Passed 8.44 sec; Start 172: dft2; 280/412 Test #186: fci-h2o .......................... Passed 6.87 sec; Start 96: cisd-h2o+-2; 281/412 Test #199: freq-isotope2 .................... Passed 9.29 sec; Start 95: cisd-h2o+-1; 282/412 Test #371: scf-coverage ..................... Passed 10.34 sec; Start 100: cisd-sp-2; 283/412 Test #330: scf-guess-read2 .................. Passed 8.08 sec; Start 332: scf1; 284/412 Test #314: rasscf-sp ........................ Passed 27.06 sec; Start 84: cdomp2-1; 285/412 Test #118: dfcasscf-sa-sp ................... Passed 6.95 sec; Start 237: mpn-bh; 286/412 Test #142: dfomp2-3 ......................... Passed 8.01 sec; Start 135: dfmp2-grad1; 287/412 Test #254: omp2p5-1 ......................... Passed 7.58 sec; Start 188: fci-h2o-fzcv; 288/412 Test #225: molden2 .......................... Passed 7.31 sec; Start 340: scf-property; 289/412 Test #252: omp2-grad1 ....................... Passed 4.16 sec; Start 137: dfmp2-grad3; 290/412 Test #266: opt1 ............................. Passed 4.53 sec; Start 377: pywrap-align; 291/412 Test #187: fci-h2o-2 ........................ Passed 9.46 sec; Start 270: opt3; 292/412 Test #386: psi4numpy-fci .................... Passed 5.25 sec; Start 180: fsapt2; 293/412 Test #96: cisd-h2o+-2 ...................... Passed 5.40 sec; Start 94: cisd-h2o+-0; 294/412 Test #95: cisd-h2o+-1 ...................... Passed 5.19 sec; Start 258: omp3-1; 295/412 Test #100: cisd-sp-2 ........................ Passed 4.88 sec; Start 295: psimrcc-sp1; 296/412 Test #135: dfmp2-grad1 ...................... Passed 4.05 sec; Start 226: mom; 297/412 Test #172: dft2 ............................. Passed 5.97 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:26902,Test,Test,26902,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #121: dfccdl1 .......................... Passed 4.09 sec; Start 130: dfmp2-2; 297/411 Test #265: opt1 ............................. Passed 5.13 sec; Start 397: json-v11-energy; 298/411 Test #351: dft-reference .................... Passed 3.24 sec; Start 246: omp2-1; 299/411 Test #262: omp3-grad1 ....................... Passed 5.74 sec; Start 136: dfmp2-grad3; 300/411 Test #294: psimrcc-sp1 ...................... Passed 4.69 sec; Start 226: mp2-1; 301/411 Test #199: fnocc1 ........................... Passed 7.10 sec; Start 120: dfccd1; 302/411 Test #246: omp2-1 ........................... Passed 1.40 sec; Start 269: opt3; 303/411 Test #130: dfmp2-2 .......................... Passed 2.10 sec; Start 243: ocepa1; 304/411 Test #355: tu3-h2o-opt ...................... Passed 2.86 sec; Start 251: omp2-grad1; 305/411 Test #136: dfmp2-grad3 ...................... Passed 1.72 sec; Start 190: fci-coverage; 306/411 Test #397: json-v11-energy .................. Passed 1.89 sec; Start 344: dfep2-1; 307/411 Test #120: dfccd1 ........................... Passed 1.33 sec; Start 134: dfmp2-grad1; 308/411 Test #251: omp2-grad1 ....................... Passed 2.95 sec; Start 388: python-curve; 309/411 Test #226: mp2-1 ............................ Passed 3.67 sec; Start 295: psithon1; 310/411 Test #344: dfep2-1 .......................... Passed 2.83 sec; Start 376: pywrap-align; 311/411 Test #243: ocepa1 ........................... Passed 3.16 sec; Start 4: casscf-semi; 312/411 Test #269: opt3 ............................. Passed 3.32 sec; Start 399: json-schema-1-energy; 313/411 Test #190: fci-coverage ..................... Passed 3.00 sec; Start 377: pywrap-align-chiral; 314/411 Test #134: dfmp2-grad1 ...................... Passed 2.56 sec; Start 236: mpn-bh; 315/411 Test #4: casscf-semi ...................... Passed 1.77 sec; Start 213: mints2; 316/411 Test #399: json-schema-1-energy ............. Passed 1.83 sec; Start 118: dfcasscf-fzc-sp; 317/411 Test #388: python-curve ............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:28566,Test,Test,28566,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #127: dfccsdt1 ......................... Passed 2.37 sec; Start 232: mp2p5-grad2; 309/411 Test #345: dfep2-2 .......................... Passed 1.82 sec; Start 397: json-v11-energy; 310/411 Test #221: mints9 ........................... Passed 1.93 sec; Start 199: fnocc1; 311/411 Test #83: cdomp2-1 ......................... Passed 2.27 sec; Start 4: casscf-semi; 312/411 Test #139: dfomp2-1 ......................... Passed 2.64 sec; Start 395: python-mints13; 313/411 Test #363: zaptn-nh2 ........................ Passed 1.87 sec; Start 271: opt5; 314/411 Test #86: cepa0-grad2 ...................... Passed 3.41 sec; Start 234: mp3-grad2; 315/411 Test #395: python-mints13 ................... Passed 1.71 sec; Start 361: x2c2; 316/411 Test #397: json-v11-energy .................. Passed 2.95 sec; Start 362: x2c3; 317/411 Test #191: fcidump .......................... Passed 3.66 sec; Start 223: molden1; 318/411 Test #232: mp2p5-grad2 ...................... Passed 3.51 sec; Start 119: dfcasscf-sp; 319/411 Test #271: opt5 ............................. Passed 3.06 sec; Start 399: json-schema-1-energy; 320/411 Test #361: x2c2 ............................. Passed 1.96 sec; Start 224: molden2; 321/411 Test #362: x2c3 ............................. Passed 2.32 sec; Start 130: dfmp2-2; 322/411 Test #4: casscf-semi ...................... Passed 4.96 sec; Start 228: mp2-grad1; 323/411 Test #234: mp3-grad2 ........................ Passed 3.56 sec; Start 136: dfmp2-grad3; 324/411 Test #119: dfcasscf-sp ...................... Passed 4.30 sec; Start 118: dfcasscf-fzc-sp; 325/411 Test #399: json-schema-1-energy ............. Passed 3.59 sec; Start 262: omp3-grad1; 326/411 Test #130: dfmp2-2 .......................... Passed 2.96 sec; Start 255: omp2p5-grad1; 327/411 Test #223: molden1 .......................... Passed 5.46 sec; Start 190: fci-coverage; 328/411 Test #228: mp2-grad1 ........................ Passed 3.17 sec; Start 134: dfmp2-grad1; 329/411 Test #199: fnocc1 ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:29775,Test,Test,29775,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #139: dfomp2-1 ......................... Passed 4.23 sec; Start 184: fci-dipole; 272/411 Test #9: castup2 .......................... Passed 7.67 sec; Start 93: cisd-h2o+-0; 273/411 Test #117: dfcasscf-sa-sp ................... Passed 4.15 sec; Start 251: omp2-grad1; 274/411 Test #251: omp2-grad1 ....................... Passed 1.29 sec; Start 339: scf-property; 275/411 Test #86: cepa0-grad2 ...................... Passed 1.91 sec; Start 141: dfomp2-3; 276/411 Test #141: dfomp2-3 ......................... Passed 1.85 sec; Start 370: scf-coverage; 277/411 Test #93: cisd-h2o+-0 ...................... Passed 3.91 sec; Start 99: cisd-sp-2; 278/411 Test #185: fci-h2o .......................... Passed 6.04 sec; Start 171: dft2; 279/411 Test #339: scf-property ..................... Passed 4.12 sec; Start 331: scf1; 280/411 Test #186: fci-h2o-2 ........................ Passed 5.93 sec; Start 179: fsapt2; 281/411 Test #184: fci-dipole ....................... Passed 5.96 sec; Start 108: dcft2; 282/411 Test #370: scf-coverage ..................... Passed 2.67 sec; Start 94: cisd-h2o+-1; 283/411 Test #108: dcft2 ............................ Passed 1.25 sec; Start 246: omp2-1; 284/411 Test #99: cisd-sp-2 ........................ Passed 4.22 sec; Start 95: cisd-h2o+-2; 285/411 Test #246: omp2-1 ........................... Passed 1.31 sec; Start 243: ocepa1; 286/411 Test #331: scf1 ............................. Passed 3.74 sec; Start 376: pywrap-align; 287/411 Test #171: dft2 ............................. Passed 4.47 sec; Start 241: ocepa-grad1; 288/411 Test #94: cisd-h2o+-1 ...................... Passed 4.05 sec; Start 120: dfccd1; 289/411 Test #243: ocepa1 ........................... Passed 1.92 sec; Start 136: dfmp2-grad3; 290/411 Test #179: fsapt2 ........................... Passed 4.94 sec; Start 388: python-curve; 291/411 Test #120: dfccd1 ........................... Passed 1.95 sec; Start 3: casscf-fzc-sp; 292/411 Test #241: ocepa-grad1 ...................... Passed 2.87 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:26167,Test,Test,26167,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability, #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Start 182: fsapt-allterms; 32/412 Test #113: dcft6 ............................ Passed 130.50 sec; Start 194: fd-freq-energy-large; 33/412 Test #395: python-vibanalysis ............... Passed 734.63 sec; Start 196: fd-freq-gradient-large; 34/412 Test #156: dft-grad-lr3 ..................... Passed 451.76 sec; Start 279: opt13; 35/412 Test #228: mp2-def2 ......................... Passed 428.14 sec; Start 374: dft-custom-mgga; 36/412 Test #183: isapt1 ........................... Passed 433.43 sec; Start 321: sapt6; 37/412 Test #374: dft-custom-mgga .................. Passed 185.89 sec; Start 48: cc31; 38/412 Test #196: fd-freq-gradient-large ........... Passed 270.86 sec; Start 98: cisd-opt-fd; 39/412 Test #48: cc31 ............................. Passed 55.67 sec; Start 59: cc41; 40/412 Test #321: sapt6 ............................ Passed 165.07 sec; Start 61: cc43; 41/412 Test #59: cc41 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:3058,Test,Test,3058,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability, #143: dfomp2-4 ......................... Passed 54.17 sec; Start 324: sapt7; 138/412 Test #152: dfomp2p5-2 ....................... Passed 83.00 sec; Start 130: dfmp2-1; 139/412 Test #11: cbs-delta-energy ................. Passed 312.41 sec; Start 127: dfccsd-t-grad1; 140/412 Test #33: cc17 ............................. Passed 40.44 sec; Start 149: dfomp3-grad1; 141/412 Test #51: cc34 ............................. Passed 25.66 sec; Start 207: ghosts; 142/412 Test #338: scf6 ............................. Passed 43.58 sec; Start 343: soscf-dft; 143/412 Test #107: dcft-grad4 ....................... Passed 41.08 sec; Start 375: dft-custom-gga; 144/412 Test #246: ocepa3 ........................... Passed 50.41 sec; Start 50: cc33; 145/412 Test #337: scf5 ............................. Passed 42.96 sec; Start 34: cc18; 146/412 Test #93: ci-multi ......................... Passed 40.23 sec; Start 52: cc35; 147/412 Test #134: dfmp2-ecp ........................ Passed 35.02 sec; Start 275: opt8; 148/412 Test #324: sapt7 ............................ Passed 33.88 sec; Start 126: dfccsd-grad1; 149/412 Test #195: fd-freq-gradient ................. Passed 42.38 sec; Start 253: omp2-grad2; 150/412 Test #127: dfccsd-t-grad1 ................... Passed 31.06 sec; Start 197: fd-gradient; 151/412 Test #12: cbs-parser ....................... Passed 51.49 sec; Start 361: x2c1; 152/412 Test #149: dfomp3-grad1 ..................... Passed 26.78 sec; Start 53: cc36; 153/412 Test #130: dfmp2-1 .......................... Passed 34.73 sec; Start 327: scf-ecp; 154/412 Test #201: fnocc2 ........................... Passed 46.22 sec; Start 265: opt-lindep-change; 155/412 Test #50: cc33 ............................. Passed 20.35 sec; Start 393: python-cc54; 156/412 Test #343: soscf-dft ........................ Passed 32.64 sec; Start 153: dfomp2p5-grad1; 157/412 Test #52: cc35 ............................. Passed 23.72 sec; Start 147: dfomp3-1; 158/412 Test #207: ghosts ........................... Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:13957,Test,Test,13957,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability, #148: dfomp3-grad1 ..................... Passed 13.18 sec; Start 125: dfccsd-grad1; 197/411 Test #393: python-3-index-transforms ........ Passed 9.92 sec; Start 275: opt9; 198/411 Test #207: gibbs ............................ Passed 17.38 sec; Start 84: cdomp2-2; 199/411 Test #142: dfomp2-4 ......................... Passed 20.28 sec; Start 23: cc12; 200/411 Test #194: fd-freq-gradient ................. Passed 18.11 sec; Start 79: cc8b; 201/411 Test #275: opt9 ............................. Passed 15.80 sec; Start 360: x2c1; 202/411 Test #77: cc8 .............................. Passed 26.70 sec; Start 252: omp2-grad2; 203/411 Test #125: dfccsd-grad1 ..................... Passed 22.78 sec; Start 7: casscf-sp; 204/411 Test #200: fnocc2 ........................... Passed 36.41 sec; Start 372: dft-custom-hybrid; 205/411 Test #23: cc12 ............................. Passed 18.66 sec; Start 369: dft-jk; 206/411 Test #372: dft-custom-hybrid ................ Passed 11.55 sec; Start 146: dfomp3-1; 207/411 Test #84: cdomp2-2 ......................... Passed 30.25 sec; Start 62: cc45; 208/411 Test #369: dft-jk ........................... Passed 10.91 sec; Start 176: extern1; 209/411 Test #79: cc8b ............................. Passed 30.57 sec; Start 53: cc37; 210/411 Test #7: casscf-sp ........................ Passed 18.52 sec; Start 126: dfccsd-t-grad1; 211/411 Test #252: omp2-grad2 ....................... Passed 26.82 sec; Start 180: fsapt-terms; 212/411 Test #360: x2c1 ............................. Passed 31.42 sec; Start 365: cubeprop-esp; 213/411 Test #146: dfomp3-1 ......................... Passed 14.83 sec; Start 78: cc8a; 214/411 Test #62: cc45 ............................. Passed 15.77 sec; Start 50: cc34; 215/411 Test #53: cc37 ............................. Passed 12.36 sec; Start 37: cc22; 216/411 Test #176: extern1 .......................... Passed 15.70 sec; Start 52: cc36; 217/411 Test #180: fsapt-terms ...................... Passed 8.57 sec; Start 248: omp2-3; 218/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:19302,Test,Test,19302,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability, #150: dfomp3-grad1 ..................... Passed 60.14 sec; Start 23: cc11; 125/413 Test #81: cc8c ............................. Passed 77.74 sec; Start 196: fd-freq-gradient; 126/413 Test #68: cc4a ............................. Passed 74.31 sec; Start 154: dfomp2p5-grad1; 127/413 Test #275: opt7 ............................. Passed 62.91 sec; Start 148: dfomp3-1; 128/413 Test #34: cc18 ............................. Passed 70.30 sec; Start 50: cc33; 129/413 Test #55: cc38 ............................. Passed 54.69 sec; Start 38: cc22; 130/413 Test #239: nbody-he-cluster ................. Passed 61.77 sec; Start 52: cc35; 131/413 Test #299: pubchem1 ......................... Passed 62.13 sec; Start 172: dft1-alt; 132/413 Test #109: dcft1 ............................ Passed 104.14 sec; Start 164: dft-grad-meta; 133/413 Test #278: opt11 ............................ Passed 53.92 sec; Start 33: cc17; 134/413 Test #23: cc11 ............................. Passed 41.50 sec; Start 85: cdomp2-2; 135/413 Test #148: dfomp3-1 ......................... Passed 34.66 sec; Start 63: cc45; 136/413 Test #57: cc4 .............................. Passed 48.48 sec; Start 254: omp2-grad2; 137/413 Test #154: dfomp2p5-grad1 ................... Passed 43.84 sec; Start 152: dfomp2p5-1; 138/413 Test #50: cc33 ............................. Passed 40.84 sec; Start 127: dfccsd-grad1; 139/413 Test #196: fd-freq-gradient ................. Passed 46.68 sec; Start 108: dcft-grad4; 140/413 Test #101: ci-property ...................... Passed 54.46 sec; Start 350: sapt-compare; 141/413 Test #38: cc22 ............................. Passed 43.86 sec; Start 338: scf5; 142/413 Test #26: cc13a ............................ Passed 552.09 sec; Start 276: opt8; 143/413 Test #52: cc35 ............................. Passed 48.07 sec; Start 24: cc12; 144/413 Test #172: dft1-alt ......................... Passed 51.80 sec; Start 309: pywrap-db1; 145/413 Test #63: cc45 ............................. Passed 26.77 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:12763,Test,Test,12763,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability, #155: dfscf-bz2 ........................ Passed 143.01 sec; Start 215: mints4; 205/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 216: mints5; 206/411 Test #213: mints2 ........................... Passed 2.55 sec; Start 217: mints6; 207/411 Test #215: mints4 ........................... Passed 0.54 sec; Start 218: mints8; 208/411 Test #216: mints5 ........................... Passed 0.62 sec; Start 219: mints-benchmark; 209/411 Test #202: fnocc4 ........................... Passed 28.48 sec; Start 220: mints-helper; 210/411 Test #220: mints-helper ..................... Passed 1.24 sec; Start 221: mints9; 211/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 222: mints10; 212/411 Test #168: dft1 ............................. Passed 104.93 sec; Start 223: molden1; 213/411 Test #222: mints10 .......................... Passed 2.63 sec; Start 224: molden2; 214/411 Test #207: gibbs ............................ Passed 22.11 sec; Start 225: mom; 215/411 Test #217: mints6 ........................... Passed 13.02 sec; Start 226: mp2-1; 216/411 Test #225: mom .............................. Passed 5.50 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 18.43 sec; Start 228: mp2-grad1; 218/411 Test #223: molden1 .......................... Passed 11.23 sec; Start 229: mp2-grad2; 219/411 Test #206: ghosts ........................... Passed 34.53 sec; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:19965,Test,Test,19965,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability, #156: dft-grac ......................... Passed 1.56 sec; Start 160: dft-grad1; 252/401 Test #157: dft-ghost ........................ Passed 6.04 sec; Start 161: dft-grad2; 253/401 Test #155: dft-b2plyp ....................... Passed 9.05 sec; Start 162: dft-psivar; 254/401 Test #160: dft-grad1 ........................ Passed 9.39 sec; Start 163: dft-b3lyp; 255/401 Test #152: dfomp2p5-grad2 ................... Passed 26.51 sec; Start 164: dft1; 256/401 Test #161: dft-grad2 ........................ Passed 9.14 sec; Start 166: dft1-alt; 257/401 Test #154: dfscf-bz2 ........................ Passed 28.72 sec; Start 167: dft2; 258/401 Test #159: dft-freq ......................... Passed 18.41 sec; Start 168: dft3; 259/401 Test #158: dft-grad-meta .................... Passed 20.68 sec; Start 169: dft-omega; 260/401 Test #167: dft2 ............................. Passed 6.22 sec; Start 170: docs-bases; 261/401 Test #170: docs-bases ....................... Passed 0.64 sec; Start 171: docs-dft; 262/401 Test #171: docs-dft ......................... Passed 0.70 sec; Start 173: extern2; 263/401 Test #162: dft-psivar ....................... Passed 20.12 sec; Start 179: isapt2; 264/401 Test #13: cbs-xtpl-alpha ................... Passed 152.72 sec; Start 181: fci-h2o; 265/401 Test #181: fci-h2o .......................... Passed 3.69 sec; Start 182: fci-h2o-2; 266/401 Test #111: dcft6 ............................ Passed 123.09 sec; Start 183: fci-h2o-fzcv; 267/401 Test #182: fci-h2o-2 ........................ Passed 4.36 sec; Start 184: fci-tdm; 268/401 Test #184: fci-tdm .......................... Passed 1.06 sec; Start 185: fci-tdm-2; 269/401 Test #183: fci-h2o-fzcv ..................... Passed 2.12 sec; Start 186: fci-coverage; 270/401 Test #113: dcft8 ............................ Passed 121.68 sec; Start 188: fd-freq-energy; 271/401 Test #169: dft-omega ........................ Passed 17.38 sec; Start 190: fd-freq-gradient; 272/401 Test #173: extern2 .......................... ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:24494,Test,Test,24494,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability, #156: dft-grad-lr3 ..................... Passed 456.14 sec; Start 307: pywrap-checkrun-uhf; 3/412 Test #36: cc2 .............................. Passed 642.46 sec; Start 77: cc7; 4/412 Test #40: cc24 ............................. Passed 651.87 sec; Start 241: ocepa-freq1; 5/412 Test #43: cc27 ............................. Passed 960.14 sec; Start 183: isapt1; 6/412 Test #39: cc23 ............................. Passed 1144.43 sec; Start 306: pywrap-checkrun-rohf; 7/412 Test #41: cc25 ............................. Passed 1174.58 sec; Start 25: cc13; 8/412 Test #146: dfomp2-grad3 ..................... Passed 1217.72 sec; Start 45: cc29; 9/412 Test #46: cc3 .............................. Passed 1255.05 sec; Start 29: cc13d; 10/412 Test #42: cc26 ............................. Passed 914.66 sec; Start 115: dcft8; 11/412 Test #183: isapt1 ........................... Passed 401.39 sec; Start 112: dcft5; 12/412 Test #395: python-vibanalysis ............... Passed 1424.43 sec; Start 18: cbs-xtpl-func; 13/412 Test #37: cc21 ............................. Passed 1446.40 sec; Start 182: fsapt-allterms; 14/412 Test #45: cc29 ............................. Passed 300.99 sec; Start 194: fd-freq-energy-large; 15/412 Test #104: dcft-grad1 ....................... Passed 1521.99 sec; Start 196: fd-freq-gradient-large; 16/412 Test #305: pywrap-checkrun-rhf .............. Passed 1605.76 sec; Start 279: opt13; 17/412 Test #301: pywrap-all ....................... Passed 1667.37 sec; Start 30: cc14; 18/412 Test #241: ocepa-freq1 ...................... Passed 1040.94 sec; Start 113: dcft6; 19/412 Test #29: cc13d ............................ Passed 491.27 sec; Start 374: dft-custom-mgga; 20/412 Test #25: cc13 ............................. Passed 606.44 sec; Start 71: cc52; 21/412 Test #196: fd-freq-gradient-large ........... Passed 319.51 sec; Start 282: opt-irc-2; 22/412 Test #112: dcft5 ............................ Passed 561.65 sec; Start 321: sapt6; 23/412 Test #113: dcft6 ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:1564,Test,Test,1564,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability, #159: dfscf-bz2 ........................ Passed 140.15 sec; Start 184: isapt2; 36/412 Test #306: pywrap-checkrun-rohf ............. Passed 1018.83 sec; Start 75: cc5a; 37/412 Test #98: cisd-opt-fd ...................... Passed 177.98 sec; Start 105: dcft-grad2; 38/412 Test #348: sapt-dft2 ........................ Passed 122.47 sec; Start 155: dft-grad-lr2; 39/412 Test #115: dcft8 ............................ Passed 910.89 sec; Start 169: dft1; 40/412 Test #48: cc31 ............................. Passed 213.55 sec; Start 303: pywrap-cbs1; 41/412 Test #184: isapt2 ........................... Passed 116.22 sec; Start 26: cc13a; 42/412 Test #30: cc14 ............................. Passed 609.23 sec; Start 114: dcft7; 43/412 Test #59: cc41 ............................. Passed 217.43 sec; Start 206: frac-traverse; 44/412 Test #75: cc5a ............................. Passed 142.09 sec; Start 317: sapt2; 45/412 Test #61: cc43 ............................. Passed 214.21 sec; Start 319: sapt4; 46/412 Test #155: dft-grad-lr2 ..................... Passed 112.09 sec; Start 326: scf-bz2; 47/412 Test #360: tu6-cp-ne2 ....................... Passed 430.46 sec; Start 92: cepa-module; 48/412 Test #105: dcft-grad2 ....................... Passed 159.99 sec; Start 372: dft-custom-dhdf; 49/412 Test #169: dft1 ............................. Passed 111.48 sec; Start 31: cc15; 50/412 Test #32: cc16 ............................. Passed 283.37 sec; Start 262: omp3-5; 51/412 Test #279: opt13 ............................ Passed 767.47 sec; Start 260: omp3-3; 52/412 Test #13: cbs-xtpl-alpha ................... Passed 452.73 sec; Start 70: cc51; 53/412 Test #380: cc-module ........................ Passed 296.59 sec; Start 79: cc8a; 54/412 Test #387: cookbook-rohf-orb-rot ............ Passed 326.91 sec; Start 76: cc6; 55/412 Test #303: pywrap-cbs1 ...................... Passed 147.49 sec; Start 281: opt-irc-1; 56/412 Test #79: cc8a ............................. Passed 41.89 sec; Start 116: dcft9; 57/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:4641,Test,Test,4641,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability, #15: cbs-xtpl-freq .................... Passed 5.84 sec; Start 124: dfccsdl1; 243/411 Test #341: soscf-ref ........................ Passed 5.62 sec; Start 201: fnocc3; 244/411 Test #393: python-3-index-transforms ........ Passed 10.01 sec; Start 365: cubeprop-esp; 245/411 Test #268: opt2-fd .......................... Passed 8.69 sec; Start 180: fsapt-terms; 246/411 Test #124: dfccsdl1 ......................... Passed 2.51 sec; Start 10: castup3; 247/411 Test #372: dft-custom-hybrid ................ Passed 9.23 sec; Start 88: cepa2; 248/411 Test #201: fnocc3 ........................... Passed 7.24 sec; Start 266: opt1-fd; 249/411 Test #88: cepa2 ............................ Passed 2.56 sec; Start 132: dfmp2-4; 250/411 Test #10: castup3 .......................... Passed 6.02 sec; Start 247: omp2-2; 251/411 Test #197: freq-isotope1 .................... Passed 9.03 sec; Start 137: dfmp2-grad4; 252/411 Test #291: psimrcc-fd-freq1 ................. Passed 11.03 sec; Start 150: dfomp2p5-1; 253/411 Test #365: cubeprop-esp ..................... Passed 8.78 sec; Start 270: opt4; 254/411 Test #180: fsapt-terms ...................... Passed 8.64 sec; Start 367: scf-hess1; 255/411 Test #137: dfmp2-grad4 ...................... Passed 4.16 sec; Start 310: rasci-c2-active; 256/411 Test #132: dfmp2-4 .......................... Passed 5.34 sec; Start 158: dft-ghost; 257/411 Test #266: opt1-fd .......................... Passed 6.12 sec; Start 108: dcft2; 258/411 Test #247: omp2-2 ........................... Passed 6.61 sec; Start 139: dfomp2-1; 259/411 Test #150: dfomp2p5-1 ....................... Passed 6.20 sec; Start 9: castup2; 260/411 Test #108: dcft2 ............................ Passed 2.06 sec; Start 127: dfccsdt1; 261/411 Test #310: rasci-c2-active .................. Passed 3.72 sec; Start 3: casscf-fzc-sp; 262/411 Test #139: dfomp2-1 ......................... Passed 2.10 sec; Start 141: dfomp2-3; 263/411 Test #127: dfccsdt1 ......................... Passed 2.35 sec; Start 15,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:23545,Test,Test,23545,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #15: cbs-xtpl-freq .................... Passed 8.46 sec; Start 217: mints9; 273/401 Test #129: dfmp2-2 .......................... Passed 2.57 sec; Start 229: mp3-grad1; 274/401 Test #82: cdomp2-1 ......................... Passed 9.33 sec; Start 153: dfrasscf-sp; 275/401 Test #267: opt5 ............................. Passed 3.79 sec; Start 239: ocepa1; 276/401 Test #228: mp2p5-grad2 ...................... Passed 5.14 sec; Start 120: dfccdl1; 277/401 Test #224: mp2-grad1 ........................ Passed 3.56 sec; Start 230: mp3-grad2; 278/401 Test #217: mints9 ........................... Passed 2.05 sec; Start 199: frac; 279/401 Test #250: omp2p5-2 ......................... Passed 19.95 sec; Start 220: molden2; 280/401 Test #183: fci-h2o-fzcv ..................... Passed 3.11 sec; Start 377: psi4numpy-cphf; 281/401 Test #180: fci-dipole ....................... Passed 5.14 sec; Start 4: casscf-semi; 282/401 Test #176: fsapt-terms ...................... Passed 5.54 sec; Start 232: mpn-bh; 283/401 Test #225: mp2-grad2 ........................ Passed 6.04 sec; Start 242: omp2-1; 284/401 Test #126: dfccsdt1 ......................... Passed 10.41 sec; Start 279: opt-freeze-coords; 285/401 Test #336: soscf-large ...................... Passed 6.56 sec; Start 95: cisd-h2o-clpse; 286/401 Test #286: psimrcc-ccsd_t-4 ................. Passed 9.76 sec; Start 6: ao-casscf-sp; 287/401 Test #377: psi4numpy-cphf ................... Passed 2.58 sec; Start 350: tu3-h2o-opt; 288/401 Test #84: cepa0-grad1 ...................... Passed 7.54 sec; Start 261: opt1; 289/401 Test #327: scf1 ............................. Passed 5.91 sec; Start 385: python-curve; 290/401 Test #229: mp3-grad1 ........................ Passed 6.62 sec; Start 219: molden1; 291/401 Test #198: fnocc4 ........................... Passed 16.58 sec; Start 253: omp3-1; 292/401 Test #95: cisd-h2o-clpse ................... Passed 2.85 sec; Start 116: dfcasscf-sa-sp; 293/401 Test #199: frac ............................. Passed 5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:26820,Test,Test,26820,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #163: dft-grad-meta .................... Passed 57.17 sec; Start 308: pywrap-db1; 121/412 Test #171: dft1-alt ......................... Passed 61.25 sec; Start 12: cbs-parser; 122/412 Test #74: cc55 ............................. Passed 69.06 sec; Start 349: sapt-compare; 123/412 Test #274: opt7 ............................. Passed 67.33 sec; Start 21: cc1; 124/412 Test #238: nbody-he-cluster ................. Passed 70.58 sec; Start 220: mints-benchmark; 125/412 Test #279: opt13 ............................ Passed 837.45 sec; Start 338: scf6; 126/412 Test #73: cc54 ............................. Passed 63.23 sec; Start 132: dfmp2-3; 127/412 Test #64: cc46 ............................. Passed 66.40 sec; Start 201: fnocc2; 128/412 Test #83: cc9a ............................. Passed 95.41 sec; Start 337: scf5; 129/412 Test #81: cc8c ............................. Passed 100.16 sec; Start 33: cc17; 130/412 Test #308: pywrap-db1 ....................... Passed 48.18 sec; Start 107: dcft-grad4; 131/412 Test #85: cdomp2-2 ......................... Passed 78.83 sec; Start 195: fd-freq-gradient; 132/412 Test #143: dfomp2-4 ......................... Passed 65.99 sec; Start 93: ci-multi; 133/412 Test #349: sapt-compare ..................... Passed 46.08 sec; Start 361: x2c1; 134/412 Test #220: mints-benchmark .................. Passed 43.40 sec; Start 313: rasci-ne; 135/412 Test #246: ocepa3 ........................... Passed 65.44 sec; Start 49: cc32; 136/412 Test #132: dfmp2-3 .......................... Passed 43.03 sec; Start 134: dfmp2-ecp; 137/412 Test #338: scf6 ............................. Passed 48.44 sec; Start 207: ghosts; 138/412 Test #12: cbs-parser ....................... Passed 75.97 sec; Start 130: dfmp2-1; 139/412 Test #337: scf5 ............................. Passed 45.22 sec; Start 324: sapt7; 140/412 Test #49: cc32 ............................. Passed 27.50 sec; Start 153: dfomp2p5-grad1; 141/412 Test #107: dcft-grad4 ....................... Passed 40.41 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:12384,Test,Test,12384,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #164: dft-freq ......................... Passed 38.32 sec; Start 283: opt-irc-3; 155/412 Test #347: sapt-dft1 ........................ Passed 40.04 sec; Start 268: opt2; 156/412 Test #33: cc17 ............................. Passed 32.91 sec; Start 259: omp3-2; 157/412 Test #1: adc1 ............................. Passed 41.95 sec; Start 167: dft-psivar; 158/412 Test #197: fd-gradient ...................... Passed 43.92 sec; Start 34: cc18; 159/412 Test #265: opt-lindep-change ................ Passed 42.45 sec; Start 208: gibbs; 160/412 Test #327: scf-ecp .......................... Passed 38.57 sec; Start 273: opt6; 161/412 Test #376: pywrap-bfs ....................... Passed 41.27 sec; Start 377: pywrap-align; 162/412 Test #174: dft-omega ........................ Passed 40.84 sec; Start 361: x2c1; 163/412 Test #173: dft3 ............................. Passed 40.11 sec; Start 359: tu5-sapt; 164/412 Test #190: fci-tdm-2 ........................ Passed 39.31 sec; Start 304: pywrap-checkrun-convcrit; 165/412 Test #259: omp3-2 ........................... Passed 36.64 sec; Start 378: pywrap-align-chiral; 166/412 Test #278: opt12 ............................ Passed 41.89 sec; Start 178: extern2; 167/412 Test #18: cbs-xtpl-func .................... Passed 1370.26 sec; Start 38: cc22; 168/412 Test #283: opt-irc-3 ........................ Passed 42.19 sec; Start 127: dfccsd-t-grad1; 169/412 Test #268: opt2 ............................. Passed 42.03 sec; Start 16: cbs-xtpl-gradient; 170/412 Test #160: dft-b2plyp ....................... Passed 44.98 sec; Start 253: omp2-grad2; 171/412 Test #34: cc18 ............................. Passed 37.73 sec; Start 126: dfccsd-grad1; 172/412 Test #167: dft-psivar ....................... Passed 44.26 sec; Start 23: cc11; 173/412 Test #208: gibbs ............................ Passed 33.33 sec; Start 323: sapt-dft-lrc; 174/412 Test #361: x2c1 ............................. Passed 24.98 sec; Start 52: cc35; 175/412 Test #273: opt6 ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:15566,Test,Test,15566,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability, #165: dft-grad2 ........................ Passed 17.21 sec; Start 167: dft-b3lyp; 171/411 Test #166: dft-psivar ....................... Passed 24.53 sec; Start 168: dft1; 172/411 Test #155: dfscf-bz2 ........................ Passed 136.88 sec; Start 169: dft-vv10; 173/411 Test #161: dft-grad-lr2 ..................... Passed 109.89 sec; Start 170: dft1-alt; 174/411 Test #169: dft-vv10 ......................... Passed 18.49 sec; Start 171: dft2; 175/411 Test #171: dft2 ............................. Passed 9.23 sec; Start 172: dft3; 176/411 Test #167: dft-b3lyp ........................ Passed 68.55 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 22.99 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.54 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.59 sec; Start 176: extern1; 180/411 Test #173: dft-omega ........................ Passed 25.63 sec; Start 177: extern2; 181/411 Test #170: dft1-alt ......................... Passed 52.20 sec; Start 179: fsapt2; 182/411 Test #179: fsapt2 ........................... Passed 6.09 sec; Start 180: fsapt-terms; 183/411 Test #180: fsapt-terms ...................... Passed 8.63 sec; Start 183: isapt2; 184/411 Test #176: extern1 .......................... Passed 21.39 sec; Start 184: fci-dipole; 185/411 Test #177: extern2 .......................... Passed 25.58 sec; Start 185: fci-h2o; 186/411 Test #184: fci-dipole ....................... Passed 8.00 sec; Start 186: fci-h2o-2; 187/411 Test #168: dft1 ............................. Passed 107.43 sec; Start 187: fci-h2o-fzcv; 188/411 Test #185: fci-h2o .......................... Passed 7.69 sec; Start 188: fci-tdm; 189/411 Test #186: fci-h2o-2 ........................ Passed 6.82 sec; Start 189: fci-tdm-2; 190/411 Test #188: fci-tdm .......................... Passed 4.98 sec; Start 190: fci-coverage; 191/411 Test #187: fci-h2o-fzcv ..................... Passed 9.54 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:16675,Test,Test,16675,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability, #165: dft-grad2 ........................ Passed 17.46 sec; Start 167: dft-b3lyp; 171/411 Test #166: dft-psivar ....................... Passed 25.00 sec; Start 168: dft1; 172/411 Test #155: dfscf-bz2 ........................ Passed 140.29 sec; Start 169: dft-vv10; 173/411 Test #161: dft-grad-lr2 ..................... Passed 107.26 sec; Start 170: dft1-alt; 174/411 Test #169: dft-vv10 ......................... Passed 21.05 sec; Start 171: dft2; 175/411 Test #171: dft2 ............................. Passed 5.71 sec; Start 172: dft3; 176/411 Test #167: dft-b3lyp ........................ Passed 68.08 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 25.39 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.53 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.59 sec; Start 176: extern1; 180/411 Test #170: dft1-alt ......................... Passed 53.20 sec; Start 177: extern2; 181/411 Test #176: extern1 .......................... Passed 21.93 sec; Start 179: fsapt2; 182/411 Test #173: dft-omega ........................ Passed 26.82 sec; Start 180: fsapt-terms; 183/411 Test #179: fsapt2 ........................... Passed 6.95 sec; Start 183: isapt2; 184/411 Test #180: fsapt-terms ...................... Passed 10.10 sec; Start 184: fci-dipole; 185/411 Test #184: fci-dipole ....................... Passed 7.67 sec; Start 185: fci-h2o; 186/411 Test #177: extern2 .......................... Passed 31.38 sec; Start 186: fci-h2o-2; 187/411 Test #185: fci-h2o .......................... Passed 6.97 sec; Start 187: fci-h2o-fzcv; 188/411 Test #186: fci-h2o-2 ........................ Passed 6.73 sec; Start 188: fci-tdm; 189/411 Test #187: fci-h2o-fzcv ..................... Passed 6.96 sec; Start 189: fci-tdm-2; 190/411 Test #168: dft1 ............................. Passed 110.06 sec; Start 190: fci-coverage; 191/411 Test #188: fci-tdm .......................... Passed 4.23,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:16682,Test,Test,16682,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability, #165: dft-grad2 ........................ Passed 17.69 sec; Start 171: dft2; 167/411 Test #171: dft2 ............................. Passed 5.88 sec; Start 172: dft3; 168/411 Test #166: dft-psivar ....................... Passed 23.66 sec; Start 173: dft-omega; 169/411 Test #169: dft-vv10 ......................... Passed 15.94 sec; Start 174: docs-bases; 170/411 Test #174: docs-bases ....................... Passed 0.59 sec; Start 175: docs-dft; 171/411 Test #175: docs-dft ......................... Passed 0.68 sec; Start 176: extern1; 172/411 Test #112: dcft6 ............................ Passed 157.11 sec; Start 177: extern2; 173/411 Test #159: dft-grad-meta .................... Passed 53.77 sec; Start 179: fsapt2; 174/411 Test #176: extern1 .......................... Passed 12.65 sec; Start 180: fsapt-terms; 175/411 Test #179: fsapt2 ........................... Passed 5.27 sec; Start 183: isapt2; 176/411 Test #172: dft3 ............................. Passed 20.38 sec; Start 184: fci-dipole; 177/411 Test #177: extern2 .......................... Passed 16.19 sec; Start 185: fci-h2o; 178/411 Test #173: dft-omega ........................ Passed 24.42 sec; Start 186: fci-h2o-2; 179/411 Test #180: fsapt-terms ...................... Passed 8.89 sec; Start 187: fci-h2o-fzcv; 180/411 Test #185: fci-h2o .......................... Passed 6.44 sec; Start 188: fci-tdm; 181/411 Test #184: fci-dipole ....................... Passed 6.80 sec; Start 189: fci-tdm-2; 182/411 Test #188: fci-tdm .......................... Passed 1.51 sec; Start 190: fci-coverage; 183/411 Test #187: fci-h2o-fzcv ..................... Passed 4.69 sec; Start 191: fcidump; 184/411 Test #190: fci-coverage ..................... Passed 3.16 sec; Start 192: fd-freq-energy; 185/411 Test #186: fci-h2o-2 ........................ Passed 6.66 sec; Start 194: fd-freq-gradient; 186/411 Test #191: fcidump .......................... Passed 3.32 sec; Start 196: fd-gradient; 187/411 Test #170: dft1-alt .........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:16432,Test,Test,16432,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #166: dft-grad1 ........................ Passed 14.28 sec; Start 141: dfomp2-1; 227/413 Test #220: mints8 ........................... Passed 14.77 sec; Start 10: castup3; 228/413 Test #243: ocepa-grad1 ...................... Passed 2.97 sec; Start 378: pywrap-align; 229/413 Test #141: dfomp2-1 ......................... Passed 2.41 sec; Start 124: dfccd-grad1; 230/413 Test #171: dft-vv10 ......................... Passed 16.12 sec; Start 288: props3; 231/413 Test #10: castup3 .......................... Passed 5.00 sec; Start 110: dcft2; 232/413 Test #268: opt1-fd .......................... Passed 7.16 sec; Start 14: cbs-xtpl-energy; 233/413 Test #5: casscf-sa-sp ..................... Passed 11.15 sec; Start 228: mp2-1; 234/413 Test #124: dfccd-grad1 ...................... Passed 4.92 sec; Start 287: props2; 235/413 Test #199: freq-isotope1 .................... Passed 12.45 sec; Start 84: cdomp2-1; 236/413 Test #368: dft-smoke ........................ Passed 13.16 sec; Start 219: mints6; 237/413 Test #110: dcft2 ............................ Passed 2.46 sec; Start 370: scf-freq1; 238/413 Test #340: scf7 ............................. Passed 10.04 sec; Start 367: cubeprop-esp; 239/413 Test #352: dft-custom ....................... Passed 13.50 sec; Start 126: dfccsdl1; 240/413 Test #378: pywrap-align ..................... Passed 7.73 sec; Start 139: dfmp2-grad4; 241/413 Test #326: sapt8 ............................ Passed 12.95 sec; Start 359: tu4-h2o-freq; 242/413 Test #102: cubeprop ......................... Passed 10.42 sec; Start 129: dfccsdt1; 243/413 Test #84: cdomp2-1 ......................... Passed 2.74 sec; Start 371: dft-jk; 244/413 Test #228: mp2-1 ............................ Passed 4.43 sec; Start 245: ocepa1; 245/413 Test #126: dfccsdl1 ......................... Passed 4.23 sec; Start 374: dft-custom-hybrid; 246/413 Test #342: soscf-large ...................... Passed 14.81 sec; Start 159: dfrasscf-sp; 247/413 Test #139: dfmp2-grad4 ...................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:22203,Test,Test,22203,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability, #166: dft-psivar ....................... Passed 26.35 sec; Start 169: dft-vv10; 173/411 Test #158: dfscf-bz2 ........................ Passed 127.56 sec; Start 170: dft1-alt; 174/411 Test #169: dft-vv10 ......................... Passed 17.44 sec; Start 171: dft2; 175/411 Test #171: dft2 ............................. Passed 5.81 sec; Start 172: dft3; 176/411 Test #167: dft-b3lyp ........................ Passed 67.03 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 22.14 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.67 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.64 sec; Start 176: extern1; 180/411 Test #170: dft1-alt ......................... Passed 49.68 sec; Start 177: extern2; 181/411 Test #176: extern1 .......................... Passed 19.19 sec; Start 179: fsapt2; 182/411 Test #173: dft-omega ........................ Passed 26.14 sec; Start 180: fsapt-terms; 183/411 Test #179: fsapt2 ........................... Passed 5.23 sec; Start 183: isapt2; 184/411 Test #180: fsapt-terms ...................... Passed 8.49 sec; Start 184: fci-dipole; 185/411 Test #184: fci-dipole ....................... Passed 7.84 sec; Start 185: fci-h2o; 186/411 Test #168: dft1 ............................. Passed 103.78 sec; Start 186: fci-h2o-2; 187/411 Test #185: fci-h2o .......................... Passed 7.23 sec; Start 187: fci-h2o-fzcv; 188/411 Test #177: extern2 .......................... Passed 29.73 sec; Start 188: fci-tdm; 189/411 Test #188: fci-tdm .......................... Passed 2.64 sec; Start 189: fci-tdm-2; 190/411 Test #187: fci-h2o-fzcv ..................... Passed 6.27 sec; Start 190: fci-coverage; 191/411 Test #186: fci-h2o-2 ........................ Passed 7.96 sec; Start 191: fcidump; 192/411 Test #191: fcidump .......................... Passed 9.36 sec; Start 192: fd-freq-energy; 193/411 Test #190: fci-coverage ..................... Passed 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:16885,Test,Test,16885,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability, #166: dft-psivar ....................... Passed 27.99 sec; Start 168: dft1; 172/411 Test #161: dft-grad-lr2 ..................... Passed 107.10 sec; Start 169: dft-vv10; 173/411 Test #155: dfscf-bz2 ........................ Passed 140.97 sec; Start 170: dft1-alt; 174/411 Test #169: dft-vv10 ......................... Passed 16.06 sec; Start 171: dft2; 175/411 Test #167: dft-b3lyp ........................ Passed 67.63 sec; Start 172: dft3; 176/411 Test #171: dft2 ............................. Passed 5.27 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 22.31 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.61 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.66 sec; Start 176: extern1; 180/411 Test #110: dcft4 ............................ Passed 584.82 sec; Start 177: extern2; 181/411 Test #173: dft-omega ........................ Passed 26.82 sec; Start 179: fsapt2; 182/411 Test #103: dcft-grad1 ....................... Passed 727.44 sec; Start 180: fsapt-terms; 183/411 Test #170: dft1-alt ......................... Passed 49.38 sec; Start 183: isapt2; 184/411 Test #179: fsapt2 ........................... Passed 5.31 sec; Start 184: fci-dipole; 185/411 Test #180: fsapt-terms ...................... Passed 8.67 sec; Start 185: fci-h2o; 186/411 Test #184: fci-dipole ....................... Passed 8.39 sec; Start 186: fci-h2o-2; 187/411 Test #176: extern1 .......................... Passed 20.31 sec; Start 187: fci-h2o-fzcv; 188/411 Test #185: fci-h2o .......................... Passed 8.16 sec; Start 188: fci-tdm; 189/411 Test #188: fci-tdm .......................... Passed 0.88 sec; Start 189: fci-tdm-2; 190/411 Test #186: fci-h2o-2 ........................ Passed 10.10 sec; Start 190: fci-coverage; 191/411 Test #187: fci-h2o-fzcv ..................... Passed 7.22 sec; Start 191: fcidump; 192/411 Test #177: extern2 .......................... Passed 27.27 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:16773,Test,Test,16773,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability, #167: dft-b3lyp ........................ Passed 67.69 sec; Start 19: cbs-xtpl-wrapper; 53/411 Test #145: dfomp2-grad3 ..................... Passed 121.49 sec; Start 114: dcft8; 54/411 Test #29: cc14 ............................. Passed 41.75 sec; Start 61: cc44; 55/411 Test #292: psimrcc-fd-freq2 ................. Passed 66.23 sec; Start 74: cc5a; 56/411 Test #75: cc6 .............................. Passed 56.18 sec; Start 159: dft-grad-meta; 57/411 Test #19: cbs-xtpl-wrapper ................. Passed 49.61 sec; Start 24: cc13; 58/411 Test #204: frac-ip-fitting .................. Passed 62.23 sec; Start 297: pubchem1; 59/411 Test #61: cc44 ............................. Passed 50.54 sec; Start 17: cbs-xtpl-opt; 60/411 Test #74: cc5a ............................. Passed 53.95 sec; Start 100: ci-property; 61/411 Test #114: dcft8 ............................ Passed 75.09 sec; Start 280: opt-irc-1; 62/411 Test #159: dft-grad-meta .................... Passed 54.04 sec; Start 389: python-pubchem; 63/411 Test #297: pubchem1 ......................... Passed 54.36 sec; Start 28: cc13d; 64/411 Test #24: cc13 ............................. Passed 61.45 sec; Start 58: cc41; 65/411 Test #17: cbs-xtpl-opt ..................... Passed 52.63 sec; Start 2: adc2; 66/411 Test #100: ci-property ...................... Passed 50.10 sec; Start 219: mints-benchmark; 67/411 Test #58: cc41 ............................. Passed 34.52 sec; Start 170: dft1-alt; 68/411 Test #389: python-pubchem ................... Passed 50.39 sec; Start 131: dfmp2-3; 69/411 Test #28: cc13d ............................ Passed 45.89 sec; Start 60: cc43; 70/411 Test #280: opt-irc-1 ........................ Passed 62.40 sec; Start 43: cc28; 71/411 Test #2: adc2 ............................. Passed 42.66 sec; Start 302: pywrap-cbs1; 72/411 Test #219: mints-benchmark .................. Passed 44.34 sec; Start 46: cc30; 73/411 Test #131: dfmp2-3 .......................... Passed 42.79 sec; Start 348: sapt-compare; 74/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:6032,Test,Test,6032,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability, #168: dft1 ............................. Passed 80.23 sec; Start 169: dft-vv10; 180/411 Test #169: dft-vv10 ......................... Passed 13.15 sec; Start 170: dft1-alt; 181/411 Test #170: dft1-alt ......................... Passed 41.39 sec; Start 171: dft2; 182/411 Test #171: dft2 ............................. Passed 4.80 sec; Start 172: dft3; 183/411 Test #172: dft3 ............................. Passed 17.51 sec; Start 173: dft-omega; 184/411 Test #173: dft-omega ........................ Passed 21.17 sec; Start 174: docs-bases; 185/411 Test #174: docs-bases ....................... Passed 0.56 sec; Start 175: docs-dft; 186/411 Test #175: docs-dft ......................... Passed 0.60 sec; Start 176: extern1; 187/411 Test #176: extern1 .......................... Passed 9.56 sec; Start 177: extern2; 188/411 Test #177: extern2 .......................... Passed 12.08 sec; Start 179: fsapt2; 189/411 Test #179: fsapt2 ........................... Passed 4.38 sec; Start 180: fsapt-terms; 190/411 Test #180: fsapt-terms ...................... Passed 8.43 sec; Start 183: isapt2; 191/411 Test #183: isapt2 ........................... Passed 128.00 sec; Start 184: fci-dipole; 192/411 Test #184: fci-dipole ....................... Passed 5.75 sec; Start 185: fci-h2o; 193/411 Test #185: fci-h2o .......................... Passed 5.68 sec; Start 186: fci-h2o-2; 194/411 Test #186: fci-h2o-2 ........................ Passed 5.36 sec; Start 187: fci-h2o-fzcv; 195/411 Test #187: fci-h2o-fzcv ..................... Passed 4.49 sec; Start 188: fci-tdm; 196/411 Test #188: fci-tdm .......................... Passed 0.85 sec; Start 189: fci-tdm-2; 197/411 Test #189: fci-tdm-2 ........................ Passed 18.76 sec; Start 190: fci-coverage; 198/411 Test #190: fci-coverage ..................... Passed 1.66 sec; Start 191: fcidump; 199/411 Test #191: fcidump .......................... Passed 1.78 sec; Start 192: fd-freq-energy; 200/411 Test #192: fd-freq-energy ................... Passed 5.2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:17254,Test,Test,17254,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability, #169: dft-vv10 ......................... Passed 17.44 sec; Start 171: dft2; 175/411 Test #171: dft2 ............................. Passed 5.81 sec; Start 172: dft3; 176/411 Test #167: dft-b3lyp ........................ Passed 67.03 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 22.14 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.67 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.64 sec; Start 176: extern1; 180/411 Test #170: dft1-alt ......................... Passed 49.68 sec; Start 177: extern2; 181/411 Test #176: extern1 .......................... Passed 19.19 sec; Start 179: fsapt2; 182/411 Test #173: dft-omega ........................ Passed 26.14 sec; Start 180: fsapt-terms; 183/411 Test #179: fsapt2 ........................... Passed 5.23 sec; Start 183: isapt2; 184/411 Test #180: fsapt-terms ...................... Passed 8.49 sec; Start 184: fci-dipole; 185/411 Test #184: fci-dipole ....................... Passed 7.84 sec; Start 185: fci-h2o; 186/411 Test #168: dft1 ............................. Passed 103.78 sec; Start 186: fci-h2o-2; 187/411 Test #185: fci-h2o .......................... Passed 7.23 sec; Start 187: fci-h2o-fzcv; 188/411 Test #177: extern2 .......................... Passed 29.73 sec; Start 188: fci-tdm; 189/411 Test #188: fci-tdm .......................... Passed 2.64 sec; Start 189: fci-tdm-2; 190/411 Test #187: fci-h2o-fzcv ..................... Passed 6.27 sec; Start 190: fci-coverage; 191/411 Test #186: fci-h2o-2 ........................ Passed 7.96 sec; Start 191: fcidump; 192/411 Test #191: fcidump .......................... Passed 9.36 sec; Start 192: fd-freq-energy; 193/411 Test #190: fci-coverage ..................... Passed 12.29 sec; Start 194: fd-freq-gradient; 194/411 Test #189: fci-tdm-2 ........................ Passed 21.59 sec; Start 196: fd-gradient; 195/411 Test #192: fd-freq-energy .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:17069,Test,Test,17069,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability, #169: dft1 ............................. Passed 101.86 sec; Start 221: mints-helper; 211/412 Test #208: gibbs ............................ Passed 20.62 sec; Start 222: mints9; 212/412 Test #159: dfscf-bz2 ........................ Passed 147.05 sec; Start 223: mints10; 213/412 Test #221: mints-helper ..................... Passed 1.97 sec; Start 224: molden1; 214/412 Test #222: mints9 ........................... Passed 2.02 sec; Start 225: molden2; 215/412 Test #223: mints10 .......................... Passed 2.02 sec; Start 226: mom; 216/412 Test #218: mints6 ........................... Passed 12.96 sec; Start 227: mp2-1; 217/412 Test #224: molden1 .......................... Passed 3.38 sec; Start 228: mp2-def2; 218/412 Test #193: fd-freq-energy ................... Passed 61.77 sec; Start 229: mp2-grad1; 219/412 Test #226: mom .............................. Passed 3.66 sec; Start 230: mp2-grad2; 220/412 Test #225: molden2 .......................... Passed 3.82 sec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Start 235: mp3-grad2; 225/412 Test #232: mp2p5-grad1 ...................... Passed 4.41 sec; Start 236: mp2-property; 226/412 Test #234: mp3-grad1 ........................ Passed 3.21 sec; Start 237: mpn-bh; 227/412 Test #233: mp2p5-grad2 ...................... Passed 6.31 sec; Start 238: nbody-he-cluster; 228/412 Test #227: mp2-1 ............................ Passed 10.68 sec; Start 239: nbody-intermediates; 229/412 Test #235: mp3-grad2 ........................ Passed 5.49 sec; Start 240: numpy-array-interface; 230/412 Test #236: mp2-property ..................... Passed 4.03 sec; Start 241: ocepa-freq1; 231/412 Test #240: numpy-array,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:20538,Test,Test,20538,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #169: dft1 ............................. Passed 105.11 sec; Start 326: scf-bz2; 57/412 Test #114: dcft7 ............................ Passed 220.51 sec; Start 372: dft-custom-dhdf; 58/412 Test #326: scf-bz2 .......................... Passed 127.87 sec; Start 281: opt-irc-1; 59/412 Test #206: frac-traverse .................... Passed 215.39 sec; Start 260: omp3-3; 60/412 Test #26: cc13a ............................ Passed 258.97 sec; Start 17: cbs-xtpl-opt; 61/412 Test #260: omp3-3 ........................... Passed 29.11 sec; Start 231: mp2-module; 62/412 Test #281: opt-irc-1 ........................ Passed 69.46 sec; Start 280: opt14; 63/412 Test #17: cbs-xtpl-opt ..................... Passed 43.31 sec; Start 19: cbs-xtpl-nbody; 64/412 Test #231: mp2-module ....................... Passed 49.95 sec; Start 76: cc6; 65/412 Test #372: dft-custom-dhdf .................. Passed 94.74 sec; Start 27: cc13b; 66/412 Test #19: cbs-xtpl-nbody ................... Passed 29.27 sec; Start 31: cc15; 67/412 Test #27: cc13b ............................ Passed 12.53 sec; Start 70: cc51; 68/412 Test #279: opt13 ............................ Passed 803.57 sec; Start 28: cc13c; 69/412 Test #31: cc15 ............................. Passed 17.78 sec; Start 318: sapt3; 70/412 Test #28: cc13c ............................ Passed 24.56 sec; Start 145: dfomp2-grad2; 71/412 Test #76: cc6 .............................. Passed 63.00 sec; Start 264: omp3-grad2; 72/412 Test #280: opt14 ............................ Passed 90.98 sec; Start 250: omp2-4; 73/412 Test #317: sapt2 ............................ Passed 360.01 sec; Start 116: dcft9; 74/412 Test #145: dfomp2-grad2 ..................... Passed 24.12 sec; Start 261: omp3-4; 75/412 Test #264: omp3-grad2 ....................... Passed 21.01 sec; Start 193: fd-freq-energy; 76/412 Test #70: cc51 ............................. Passed 70.89 sec; Start 21: cc1; 77/412 Test #318: sapt3 ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:6386,Test,Test,6386,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability, #16: cbs-xtpl-gradient ................ Passed 81.48 sec; Start 34: cc19; 154/411 Test #28: cc13d ............................ Passed 892.45 sec; Start 65: cc48; 155/411 Test #256: omp2p5-grad2 ..................... Passed 236.27 sec; Start 245: ocepa3; 156/411 Test #12: cbs-parser ....................... Passed 214.30 sec; Start 133: dfmp2-ecp; 157/411 Test #263: omp3-grad2 ....................... Passed 238.71 sec; Start 176: extern1; 158/411 Test #133: dfmp2-ecp ........................ Passed 15.59 sec; Start 261: omp3-5; 159/411 Test #34: cc19 ............................. Passed 179.49 sec; Start 67: cc4a; 160/411 Test #27: cc13c ............................ Passed 433.11 sec; Start 115: dcft9; 161/411 Test #176: extern1 .......................... Passed 40.24 sec; Start 372: dft-custom-hybrid; 162/411 Test #260: omp3-4 ........................... Passed 367.41 sec; Start 104: dcft-grad2; 163/411 Test #372: dft-custom-hybrid ................ Passed 16.33 sec; Start 369: dft-jk; 164/411 Test #369: dft-jk ........................... Passed 14.21 sec; Start 101: cubeprop; 165/411 Test #245: ocepa3 ........................... Passed 125.71 sec; Start 338: scf7; 166/411 Test #101: cubeprop ......................... Passed 12.33 sec; Start 250: omp2-5; 167/411 Test #338: scf7 ............................. Passed 28.83 sec; Start 59: cc42; 168/411 Test #65: cc48 ............................. Passed 220.80 sec; Start 393: python-3-index-transforms; 169/411 Test #393: python-3-index-transforms ........ Passed 9.60 sec; Start 5: casscf-sa-sp; 170/411 Test #67: cc4a ............................. Passed 159.27 sec; Start 249: omp2-4; 171/411 Test #26: cc13b ............................ Passed 367.76 sec; Start 268: opt2-fd; 172/411 Test #5: casscf-sa-sp ..................... Passed 33.51 sec; Start 291: psimrcc-fd-freq1; 173/411 Test #268: opt2-fd .......................... Passed 18.35 sec; Start 14: cbs-xtpl-energy; 174/411 Test #14: cbs-xtpl-energy .................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:15446,Test,Test,15446,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #170: dft1-alt ......................... Passed 41.39 sec; Start 171: dft2; 182/411 Test #171: dft2 ............................. Passed 4.80 sec; Start 172: dft3; 183/411 Test #172: dft3 ............................. Passed 17.51 sec; Start 173: dft-omega; 184/411 Test #173: dft-omega ........................ Passed 21.17 sec; Start 174: docs-bases; 185/411 Test #174: docs-bases ....................... Passed 0.56 sec; Start 175: docs-dft; 186/411 Test #175: docs-dft ......................... Passed 0.60 sec; Start 176: extern1; 187/411 Test #176: extern1 .......................... Passed 9.56 sec; Start 177: extern2; 188/411 Test #177: extern2 .......................... Passed 12.08 sec; Start 179: fsapt2; 189/411 Test #179: fsapt2 ........................... Passed 4.38 sec; Start 180: fsapt-terms; 190/411 Test #180: fsapt-terms ...................... Passed 8.43 sec; Start 183: isapt2; 191/411 Test #183: isapt2 ........................... Passed 128.00 sec; Start 184: fci-dipole; 192/411 Test #184: fci-dipole ....................... Passed 5.75 sec; Start 185: fci-h2o; 193/411 Test #185: fci-h2o .......................... Passed 5.68 sec; Start 186: fci-h2o-2; 194/411 Test #186: fci-h2o-2 ........................ Passed 5.36 sec; Start 187: fci-h2o-fzcv; 195/411 Test #187: fci-h2o-fzcv ..................... Passed 4.49 sec; Start 188: fci-tdm; 196/411 Test #188: fci-tdm .......................... Passed 0.85 sec; Start 189: fci-tdm-2; 197/411 Test #189: fci-tdm-2 ........................ Passed 18.76 sec; Start 190: fci-coverage; 198/411 Test #190: fci-coverage ..................... Passed 1.66 sec; Start 191: fcidump; 199/411 Test #191: fcidump .......................... Passed 1.78 sec; Start 192: fd-freq-energy; 200/411 Test #192: fd-freq-energy ................... Passed 5.29 sec; Start 194: fd-freq-gradient; 201/411 Test #194: fd-freq-gradient ................. Passed 9.96 sec; Start 196: fd-gradient; 202/411 Test #196: fd-gradient ...................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:17440,Test,Test,17440,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability, #170: dft1-alt ......................... Passed 42.06 sec; Start 219: mints-benchmark; 92/411 Test #57: cc40 ............................. Passed 20.87 sec; Start 237: nbody-he-cluster; 93/411 Test #151: dfomp2p5-2 ....................... Passed 13.25 sec; Start 348: sapt-compare; 94/411 Test #249: omp2-4 ........................... Passed 20.17 sec; Start 261: omp3-5; 95/411 Test #178: fsapt1 ........................... Passed 1845.18 sec; Start 107: dcft1; 96/411 Test #2: adc2 ............................. Passed 30.67 sec; Start 250: omp2-5; 97/411 Test #299: pywrap-alias ..................... Passed 26.27 sec; Start 59: cc42; 98/411 Test #107: dcft1 ............................ Passed 19.00 sec; Start 65: cc48; 99/411 Test #250: omp2-5 ........................... Passed 28.24 sec; Start 200: fnocc2; 100/411 Test #261: omp3-5 ........................... Passed 32.62 sec; Start 66: cc49; 101/411 Test #237: nbody-he-cluster ................. Passed 37.15 sec; Start 131: dfmp2-3; 102/411 Test #219: mints-benchmark .................. Passed 39.00 sec; Start 307: pywrap-db1; 103/411 Test #59: cc42 ............................. Passed 21.57 sec; Start 276: opt11; 104/411 Test #348: sapt-compare ..................... Passed 39.20 sec; Start 81: cc9; 105/411 Test #65: cc48 ............................. Passed 22.80 sec; Start 263: omp3-grad2; 106/411 Test #81: cc9 .............................. Passed 13.37 sec; Start 30: cc15; 107/411 Test #200: fnocc2 ........................... Passed 21.81 sec; Start 82: cc9a; 108/411 Test #66: cc49 ............................. Passed 21.92 sec; Start 73: cc55; 109/411 Test #263: omp3-grad2 ....................... Passed 24.71 sec; Start 68: cc50; 110/411 Test #307: pywrap-db1 ....................... Passed 36.87 sec; Start 34: cc19; 111/411 Test #131: dfmp2-3 .......................... Passed 38.25 sec; Start 79: cc8b; 112/411 Test #276: opt11 ............................ Passed 41.10 sec; Start 312: rasci-ne; 113/411 Test #73: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:9671,Test,Test,9671,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability, #171: dft1 ............................. Passed 99.43 sec; Start 213: mcscf2; 287/415 Test #213: mcscf2 ........................... Passed 2.95 sec; Start 214: mcscf3; 288/415 Test #214: mcscf3 ........................... Passed 3.35 sec; Start 217: mints3; 289/415 Test #217: mints3 ........................... Passed 1.60 sec; Start 218: mints4; 290/415 Test #218: mints4 ........................... Passed 1.05 sec; Start 219: mints5; 291/415 Test #219: mints5 ........................... Passed 1.43 sec; Start 220: mints6; 292/415 Test #199: fd-gradient ...................... Passed 57.97 sec; Start 221: mints8; 293/415 Test #114: dcft5 ............................ Passed 434.07 sec; Start 222: mints-benchmark; 294/415 Test #209: ghosts ........................... Passed 16.15 sec; Start 223: mints-helper; 295/415 Test #220: mints6 ........................... Passed 5.74 sec; Start 224: mints9; 296/415 Test #202: fnocc1 ........................... Passed 51.45 sec; Start 228: mom; 297/415 Test #223: mints-helper ..................... Passed 2.71 sec; Start 229: mp2-1; 298/415 Test #224: mints9 ........................... Passed 2.34 sec; Start 230: mp2-def2; 299/415 Test #221: mints8 ........................... Passed 9.19 sec; Start 231: mp2-grad1; 300/415 Test #204: fnocc3 ........................... Passed 56.11 sec; Start 232: mp2-grad2; 301/415 Test #197: fd-freq-gradient ................. Passed 71.35 sec; Start 235: mp2p5-grad2; 302/415 Test #222: mints-benchmark .................. Passed 9.85 sec; Start 236: mp3-grad1; 303/415 Test #228: mom .............................. Passed 7.35 sec; Start 237: mp3-grad2; 304/415 Test #207: frac-ip-fitting .................. Passed 55.28 sec; Start 240: nbody-he-cluster; 305/415 Test #231: mp2-grad1 ........................ Passed 6.35 sec; Start 241: nbody-intermediates; 306/415 Test #232: mp2-grad2 ........................ Passed 11.81 sec; Start 242: nbody-nocp-gradient; 307/415 Test #237: mp3-grad2 ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:27879,Test,Test,27879,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability, #171: dft1-alt ......................... Passed 50.08 sec; Start 199: freq-isotope2; 190/412 Test #168: dft-b3lyp ........................ Passed 69.27 sec; Start 200: fnocc1; 191/412 Test #199: freq-isotope2 .................... Passed 9.58 sec; Start 201: fnocc2; 192/412 Test #198: freq-isotope1 .................... Passed 13.94 sec; Start 202: fnocc3; 193/412 Test #190: fci-tdm-2 ........................ Passed 21.79 sec; Start 203: fnocc4; 194/412 Test #200: fnocc1 ........................... Passed 13.37 sec; Start 204: frac; 195/412 Test #204: frac ............................. Passed 3.84 sec; Start 205: frac-ip-fitting; 196/412 Test #202: fnocc3 ........................... Passed 12.86 sec; Start 207: ghosts; 197/412 Test #197: fd-gradient ...................... Passed 30.99 sec; Start 208: gibbs; 198/412 Test #195: fd-freq-gradient ................. Passed 36.55 sec; Start 209: matrix1; 199/412 Test #209: matrix1 .......................... Passed 0.79 sec; Start 210: mcscf1; 200/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 211: mcscf2; 201/412 Test #211: mcscf2 ........................... Passed 2.13 sec; Start 212: mcscf3; 202/412 Test #203: fnocc4 ........................... Passed 23.31 sec; Start 213: mints1; 203/412 Test #212: mcscf3 ........................... Passed 1.42 sec; Start 214: mints2; 204/412 Test #213: mints1 ........................... Passed 0.94 sec; Start 215: mints3; 205/412 Test #215: mints3 ........................... Passed 2.55 sec; Start 216: mints4; 206/412 Test #214: mints2 ........................... Passed 3.45 sec; Start 217: mints5; 207/412 Test #216: mints4 ........................... Passed 0.78 sec; Start 218: mints6; 208/412 Test #217: mints5 ........................... Passed 1.01 sec; Start 219: mints8; 209/412 Test #201: fnocc2 ........................... Passed 36.04 sec; Start 220: mints-benchmark; 210/412 Test #169: dft1 ............................. Passed 101.86 sec; Start 221: mints,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:18613,Test,Test,18613,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #171: dft2 ............................. Passed 5.81 sec; Start 172: dft3; 176/411 Test #167: dft-b3lyp ........................ Passed 67.03 sec; Start 173: dft-omega; 177/411 Test #172: dft3 ............................. Passed 22.14 sec; Start 174: docs-bases; 178/411 Test #174: docs-bases ....................... Passed 0.67 sec; Start 175: docs-dft; 179/411 Test #175: docs-dft ......................... Passed 0.64 sec; Start 176: extern1; 180/411 Test #170: dft1-alt ......................... Passed 49.68 sec; Start 177: extern2; 181/411 Test #176: extern1 .......................... Passed 19.19 sec; Start 179: fsapt2; 182/411 Test #173: dft-omega ........................ Passed 26.14 sec; Start 180: fsapt-terms; 183/411 Test #179: fsapt2 ........................... Passed 5.23 sec; Start 183: isapt2; 184/411 Test #180: fsapt-terms ...................... Passed 8.49 sec; Start 184: fci-dipole; 185/411 Test #184: fci-dipole ....................... Passed 7.84 sec; Start 185: fci-h2o; 186/411 Test #168: dft1 ............................. Passed 103.78 sec; Start 186: fci-h2o-2; 187/411 Test #185: fci-h2o .......................... Passed 7.23 sec; Start 187: fci-h2o-fzcv; 188/411 Test #177: extern2 .......................... Passed 29.73 sec; Start 188: fci-tdm; 189/411 Test #188: fci-tdm .......................... Passed 2.64 sec; Start 189: fci-tdm-2; 190/411 Test #187: fci-h2o-fzcv ..................... Passed 6.27 sec; Start 190: fci-coverage; 191/411 Test #186: fci-h2o-2 ........................ Passed 7.96 sec; Start 191: fcidump; 192/411 Test #191: fcidump .......................... Passed 9.36 sec; Start 192: fd-freq-energy; 193/411 Test #190: fci-coverage ..................... Passed 12.29 sec; Start 194: fd-freq-gradient; 194/411 Test #189: fci-tdm-2 ........................ Passed 21.59 sec; Start 196: fd-gradient; 195/411 Test #192: fd-freq-energy ................... Passed 15.37 sec; Start 197: freq-isotope1; 196/411 Test #194: fd-freq-gradient .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:17160,Test,Test,17160,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability, #173: dft3 ............................. Passed 24.11 sec; Start 178: extern2; 180/412 Test #268: opt2 ............................. Passed 23.85 sec; Start 7: casscf-sp; 181/412 Test #304: pywrap-checkrun-convcrit ......... Passed 21.48 sec; Start 323: sapt-dft-lrc; 182/412 Test #129: dfccsdat1 ........................ Passed 18.08 sec; Start 54: cc37; 183/412 Test #160: dft-b2plyp ....................... Passed 25.40 sec; Start 259: omp3-2; 184/412 Test #314: rasscf-sp ........................ Passed 22.75 sec; Start 208: gibbs; 185/412 Test #278: opt12 ............................ Passed 24.35 sec; Start 38: cc22; 186/412 Test #164: dft-freq ......................... Passed 24.88 sec; Start 291: psimrcc-ccsd_t-4; 187/412 Test #347: sapt-dft1 ........................ Passed 25.41 sec; Start 22: cc10; 188/412 Test #359: tu5-sapt ......................... Passed 22.33 sec; Start 151: dfomp2p5-1; 189/412 Test #273: opt6 ............................. Passed 24.37 sec; Start 316: sapt1; 190/412 Test #203: fnocc4 ........................... Passed 25.60 sec; Start 249: omp2-3; 191/412 Test #178: extern2 .......................... Passed 24.14 sec; Start 24: cc12; 192/412 Test #190: fci-tdm-2 ........................ Passed 24.38 sec; Start 239: nbody-intermediates; 193/412 Test #54: cc37 ............................. Passed 16.65 sec; Start 276: opt9; 194/412 Test #323: sapt-dft-lrc ..................... Passed 20.87 sec; Start 322: sapt-dft-api; 195/412 Test #259: omp3-2 ........................... Passed 22.64 sec; Start 139: dfmp2-grad5; 196/412 Test #7: casscf-sp ........................ Passed 24.02 sec; Start 255: omp2p5-2; 197/412 Test #208: gibbs ............................ Passed 24.52 sec; Start 166: dft-grad2; 198/412 Test #38: cc22 ............................. Passed 18.87 sec; Start 297: psithon2; 199/412 Test #151: dfomp2p5-1 ....................... Passed 18.20 sec; Start 170: dft-vv10; 200/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 19.89 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:17854,Test,Test,17854,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #173: extern2 .......................... Passed 15.58 sec; Start 192: fd-gradient; 273/401 Test #168: dft3 ............................. Passed 21.77 sec; Start 193: freq-isotope1; 274/401 Test #186: fci-coverage ..................... Passed 4.23 sec; Start 199: frac; 275/401 Test #199: frac ............................. Passed 1.90 sec; Start 200: frac-ip-fitting; 276/401 Test #188: fd-freq-energy ................... Passed 7.14 sec; Start 202: ghosts; 277/401 Test #163: dft-b3lyp ........................ Passed 37.96 sec; Start 206: mcscf2; 278/401 Test #206: mcscf2 ........................... Passed 1.48 sec; Start 207: mcscf3; 279/401 Test #193: freq-isotope1 .................... Passed 8.74 sec; Start 210: mints3; 280/401 Test #207: mcscf3 ........................... Passed 0.80 sec; Start 211: mints4; 281/401 Test #210: mints3 ........................... Passed 1.09 sec; Start 212: mints5; 282/401 Test #211: mints4 ........................... Passed 0.57 sec; Start 213: mints6; 283/401 Test #212: mints5 ........................... Passed 0.74 sec; Start 214: mints8; 284/401 Test #190: fd-freq-gradient ................. Passed 16.08 sec; Start 215: mints-benchmark; 285/401 Test #213: mints6 ........................... Passed 4.79 sec; Start 216: mints-helper; 286/401 Test #185: fci-tdm-2 ........................ Passed 18.93 sec; Start 217: mints9; 287/401 Test #216: mints-helper ..................... Passed 1.27 sec; Start 221: mom; 288/401 Test #214: mints8 ........................... Passed 6.28 sec; Start 222: mp2-1; 289/401 Test #217: mints9 ........................... Passed 2.08 sec; Start 223: mp2-def2; 290/401 Test #202: ghosts ........................... Passed 13.17 sec; Start 224: mp2-grad1; 291/401 Test #221: mom .............................. Passed 2.59 sec; Start 225: mp2-grad2; 292/401 Test #224: mp2-grad1 ........................ Passed 2.39 sec; Start 228: mp2p5-grad2; 293/401 Test #166: dft1-alt ......................... Passed 45.62 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:26452,Test,Test,26452,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability," #174: docs-bases ....................... Passed 0.53 sec; 408/411 Test #215: mints4 ........................... Passed 0.51 sec; 409/411 Test #208: matrix1 .......................... Passed 0.51 sec; 410/411 Test #87: cepa1 ............................ Passed 1.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1890.44 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 66.55 sec*proc (2 tests); autotest = 2224.11 sec*proc (26 tests); cart = 16014.43 sec*proc (123 tests); cas = 59.03 sec*proc (1 test); casscf = 53.75 sec*proc (11 tests); cbs = 3517.28 sec*proc (10 tests); cc = 9427.35 sec*proc (65 tests); cdomp2 = 44.89 sec*proc (2 tests); cepa = 199.36 sec*proc (7 tests); ci = 100.45 sec*proc (8 tests); cisd = 209.41 sec*proc (7 tests); cookbook = 284.29 sec*proc (1 test); cubeprop = 19.63 sec*proc (2 tests); dcft = 3319.98 sec*proc (13 tests); df = 1994.11 sec*proc (38 tests); dfccd = 1.33 sec*proc (1 test); dfccd-grad = 3.71 sec*proc (1 test); dfccdl = 4.09 sec*proc (1 test); dfccsd = 3.47 sec*proc (1 test); dfccsd-grad = 39.72 sec*proc (1 test); dfccsd-t-grad = 37.57 sec*proc (1 test); dfccsdat = 4.01 sec*proc (1 test); dfccsdl = 2.51 sec*proc (1 test); dfccsdt = 2.35 sec*proc (1 test); dfep2 = 4.67 sec*proc (2 tests); dfmp2 = 118.85 sec*proc (11 tests); dfomp2 = 1035.30 sec*proc (7 tests); dfomp2.5 = 224.33 sec*proc (4 tests); dfomp3 = 258.95 sec*proc (4 tests); dfscf = 133.50 sec*proc (1 test); dft = 1440.06 sec*proc (27 tests); docs = 1.12 sec*proc (2 tests); ecp = 39.28 sec*proc (2 tests); fci = 10.77 sec*proc (2 tests); fcidump = 1.95 sec*proc (1 test); findif = 901.99 sec*proc (5 tests); fnocc = 93.14 sec*proc (4 tests); freq = 1004.97 sec*proc (6 tests); gradient = 1655.45 sec*proc (16 tests); json = 11.29 sec*proc (8 tests); longtests = 3627.91 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 60.89 sec*proc (4 tests); mints = 78.81 sec*proc (14 tests); misc = 458.95 sec*proc (16 tests); mp2 = 60",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:39005,test,test,39005,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['test'],['test']
Testability," #175: docs-dft ......................... Passed 0.61 sec; Start 174: docs-bases; 394/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 402: json-schema-1-throws; 395/411 Test #411: skeletonwavefunction ............. Passed 2.89 sec; Start 87: cepa1; 396/411 Test #311: rasci-h2o ........................ Passed 4.54 sec; 397/411 Test #211: mcscf3 ........................... Passed 1.29 sec; 398/411 Test #334: scf3 ............................. Passed 1.23 sec; 399/411 Test #208: matrix1 .......................... Passed 0.57 sec; 400/411 Test #409: skeletonscf ...................... Passed 0.61 sec; 401/411 Test #215: mints4 ........................... Passed 0.52 sec; 402/411 Test #174: docs-bases ....................... Passed 0.52 sec; 403/411 Test #212: mints1 ........................... Passed 0.56 sec; 404/411 Test #188: fci-tdm .......................... Passed 3.64 sec; 405/411 Test #402: json-schema-1-throws ............. Passed 0.61 sec; 406/411 Test #408: skeletonmointegrals .............. Passed 4.60 sec; 407/411 Test #410: skeletonsointegrals .............. Passed 4.49 sec; 408/411 Test #349: sapt-sf1 ......................... Passed 3.12 sec; 409/411 Test #87: cepa1 ............................ Passed 5.47 sec; 410/411 Test #18: cbs-xtpl-func .................... Passed 2000.15 sec; 411/411 Test #318: sapt4 ............................ Passed 1871.45 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 67.75 sec*proc (2 tests); autotest = 2217.88 sec*proc (26 tests); cart = 17309.12 sec*proc (123 tests); cas = 63.75 sec*proc (1 test); casscf = 207.34 sec*proc (11 tests); cbs = 3024.91 sec*proc (10 tests); cc = 11653.26 sec*proc (65 tests); cdomp2 = 75.20 sec*proc (2 tests); cepa = 253.57 sec*proc (7 tests); ci = 131.85 sec*proc (8 tests); cisd = 199.49 sec*proc (7 tests); cookbook = 296.52 sec*proc (1 test); cubeprop = 22.81 sec*proc (2 tests); dcft = 3896.27 sec*proc (13 tests); df = 2444.55 sec*proc (38 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:37964,Test,Test,37964,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #176: fsapt-terms ...................... Passed 4.90 sec; Start 48: cc32; 108/401 Test #196: fnocc2 ........................... Passed 29.15 sec; Start 327: scf1; 109/401 Test #336: soscf-large ...................... Passed 4.54 sec; Start 287: psimrcc-fd-freq1; 110/401 Test #286: psimrcc-ccsd_t-4 ................. Passed 8.83 sec; Start 5: casscf-sa-sp; 111/401 Test #15: cbs-xtpl-freq .................... Passed 8.28 sec; Start 198: fnocc4; 112/401 Test #7: casscf-sp ........................ Passed 13.47 sec; Start 194: freq-isotope2; 113/401 Test #33: cc18 ............................. Passed 17.39 sec; Start 389: python-cc54; 114/401 Test #327: scf1 ............................. Passed 4.72 sec; Start 355: x2c1; 115/401 Test #103: dcft-grad2 ....................... Passed 58.88 sec; Start 243: omp2-2; 116/401 Test #5: casscf-sa-sp ..................... Passed 6.23 sec; Start 82: cdomp2-1; 117/401 Test #148: dfomp3-grad2 ..................... Passed 35.50 sec; Start 108: dcft3; 118/401 Test #194: freq-isotope2 .................... Passed 5.86 sec; Start 180: fci-dipole; 119/401 Test #287: psimrcc-fd-freq1 ................. Passed 13.65 sec; Start 250: omp2p5-2; 120/401 Test #198: fnocc4 ........................... Passed 11.71 sec; Start 232: mpn-bh; 121/401 Test #180: fci-dipole ....................... Passed 5.74 sec; Start 291: psithon1; 122/401 Test #48: cc32 ............................. Passed 18.47 sec; Start 124: dfccsd-grad1; 123/401 Test #106: dcft1 ............................ Passed 33.68 sec; Start 175: fsapt2; 124/401 Test #82: cdomp2-1 ......................... Passed 9.82 sec; Start 335: scf-property; 125/401 Test #232: mpn-bh ........................... Passed 4.40 sec; Start 6: ao-casscf-sp; 126/401 Test #175: fsapt2 ........................... Passed 3.49 sec; Start 261: opt1; 127/401 Test #243: omp2-2 ........................... Passed 14.72 sec; Start 309: rasscf-sp; 128/401 Test #335: scf-property ..................... Passed 3.57 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:10982,Test,Test,10982,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability, #177: extern2 .......................... Passed 15.79 sec; Start 77: cc8; 196/411 Test #148: dfomp3-grad1 ..................... Passed 13.18 sec; Start 125: dfccsd-grad1; 197/411 Test #393: python-3-index-transforms ........ Passed 9.92 sec; Start 275: opt9; 198/411 Test #207: gibbs ............................ Passed 17.38 sec; Start 84: cdomp2-2; 199/411 Test #142: dfomp2-4 ......................... Passed 20.28 sec; Start 23: cc12; 200/411 Test #194: fd-freq-gradient ................. Passed 18.11 sec; Start 79: cc8b; 201/411 Test #275: opt9 ............................. Passed 15.80 sec; Start 360: x2c1; 202/411 Test #77: cc8 .............................. Passed 26.70 sec; Start 252: omp2-grad2; 203/411 Test #125: dfccsd-grad1 ..................... Passed 22.78 sec; Start 7: casscf-sp; 204/411 Test #200: fnocc2 ........................... Passed 36.41 sec; Start 372: dft-custom-hybrid; 205/411 Test #23: cc12 ............................. Passed 18.66 sec; Start 369: dft-jk; 206/411 Test #372: dft-custom-hybrid ................ Passed 11.55 sec; Start 146: dfomp3-1; 207/411 Test #84: cdomp2-2 ......................... Passed 30.25 sec; Start 62: cc45; 208/411 Test #369: dft-jk ........................... Passed 10.91 sec; Start 176: extern1; 209/411 Test #79: cc8b ............................. Passed 30.57 sec; Start 53: cc37; 210/411 Test #7: casscf-sp ........................ Passed 18.52 sec; Start 126: dfccsd-t-grad1; 211/411 Test #252: omp2-grad2 ....................... Passed 26.82 sec; Start 180: fsapt-terms; 212/411 Test #360: x2c1 ............................. Passed 31.42 sec; Start 365: cubeprop-esp; 213/411 Test #146: dfomp3-1 ......................... Passed 14.83 sec; Start 78: cc8a; 214/411 Test #62: cc45 ............................. Passed 15.77 sec; Start 50: cc34; 215/411 Test #53: cc37 ............................. Passed 12.36 sec; Start 37: cc22; 216/411 Test #176: extern1 .......................... Passed 15.70 sec; Start 52: cc36; 217/411,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:19209,Test,Test,19209,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability," #178: fsapt1 ........................... Passed 2049.77 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 65.93 sec*proc (2 tests); autotest = 1184.25 sec*proc (26 tests); cart = 12809.92 sec*proc (123 tests); cas = 66.32 sec*proc (1 test); casscf = 84.85 sec*proc (11 tests); cbs = 1299.63 sec*proc (10 tests); cc = 4877.58 sec*proc (65 tests); cdomp2 = 87.04 sec*proc (2 tests); cepa = 237.74 sec*proc (7 tests); ci = 124.43 sec*proc (8 tests); cisd = 192.72 sec*proc (7 tests); cookbook = 74.81 sec*proc (1 test); cubeprop = 21.02 sec*proc (2 tests); dcft = 2168.02 sec*proc (13 tests); df = 1323.98 sec*proc (38 tests); dfccd = 1.99 sec*proc (1 test); dfccd-grad = 11.53 sec*proc (1 test); dfccdl = 2.32 sec*proc (1 test); dfccsd = 6.96 sec*proc (1 test); dfccsd-grad = 23.04 sec*proc (1 test); dfccsd-t-grad = 20.20 sec*proc (1 test); dfccsdat = 13.07 sec*proc (1 test); dfccsdl = 9.39 sec*proc (1 test); dfccsdt = 5.62 sec*proc (1 test); dfep2 = 5.95 sec*proc (2 tests); dfmp2 = 144.08 sec*proc (11 tests); dfomp2 = 610.26 sec*proc (7 tests); dfomp2.5 = 93.44 sec*proc (4 tests); dfomp3 = 106.67 sec*proc (4 tests); dfscf = 143.01 sec*proc (1 test); dft = 1409.77 sec*proc (27 tests); docs = 1.24 sec*proc (2 tests); ecp = 41.60 sec*proc (2 tests); fci = 13.45 sec*proc (2 tests); fcidump = 9.42 sec*proc (1 test); findif = 895.26 sec*proc (5 tests); fnocc = 124.54 sec*proc (4 tests); freq = 968.32 sec*proc (6 tests); gradient = 1118.69 sec*proc (16 tests); json = 18.01 sec*proc (8 tests); longtests = 3642.49 sec*proc (5 tests); mcscf = 5.05 sec*proc (3 tests); minitests = 64.06 sec*proc (4 tests); mints = 89.98 sec*proc (14 tests); misc = 563.82 sec*proc (16 tests); mp2 = 676.55 sec*proc (13 tests); nbody = 107.79 sec*proc (2 tests); numpy = 0.80 sec*proc (1 test); ocepa = 691.29 sec*proc (6 tests); omp = 863.37 sec*proc (18 tests); opt = 1517.73 sec*proc (21 tests); plug = 13.26 sec*proc (7 tests); prop = 2.48 sec*proc (1 test); properties = 168.25 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:39304,test,tests,39304,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['test'],['tests']
Testability," #178: fsapt1 ........................... Passed 2075.85 sec; 411/411 Test #318: sapt4 ............................ Passed 1795.73 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 63.77 sec*proc (2 tests); autotest = 464.95 sec*proc (26 tests); cart = 10197.27 sec*proc (123 tests); cas = 45.85 sec*proc (1 test); casscf = 46.69 sec*proc (11 tests); cbs = 607.71 sec*proc (10 tests); cc = 2524.71 sec*proc (65 tests); cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18 tests); opt = 1222.19 sec*proc (21 tests); plug = 6.43 sec*proc (7 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39139,test,test,39139,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['test']
Testability, #17: cbs-xtpl-opt ..................... Passed 65.63 sec; Start 280: opt14; 59/412 Test #28: cc13c ............................ Passed 20.50 sec; Start 31: cc15; 60/412 Test #281: opt-irc-1 ........................ Passed 90.19 sec; Start 231: mp2-module; 61/412 Test #372: dft-custom-dhdf .................. Passed 101.66 sec; Start 70: cc51; 62/412 Test #194: fd-freq-energy-large ............. Passed 554.36 sec; Start 19: cbs-xtpl-nbody; 63/412 Test #31: cc15 ............................. Passed 28.61 sec; Start 318: sapt3; 64/412 Test #76: cc6 .............................. Passed 69.60 sec; Start 108: dcft1; 65/412 Test #326: scf-bz2 .......................... Passed 138.38 sec; Start 293: psimrcc-fd-freq2; 66/412 Test #108: dcft1 ............................ Passed 21.44 sec; Start 193: fd-freq-energy; 67/412 Test #182: fsapt-allterms ................... Passed 599.68 sec; Start 320: sapt5; 68/412 Test #19: cbs-xtpl-nbody ................... Passed 51.30 sec; Start 157: dfomp2p5-grad2; 69/412 Test #280: opt14 ............................ Passed 85.55 sec; Start 150: dfomp3-grad2; 70/412 Test #70: cc51 ............................. Passed 72.72 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 79.59 sec; Start 245: ocepa2; 72/412 Test #206: frac-traverse .................... Passed 233.30 sec; Start 261: omp3-4; 73/412 Test #318: sapt3 ............................ Passed 83.47 sec; Start 251: omp2-5; 74/412 Test #157: dfomp2p5-grad2 ................... Passed 32.79 sec; Start 20: cbs-xtpl-wrapper; 75/412 Test #150: dfomp3-grad2 ..................... Passed 42.64 sec; Start 62: cc44; 76/412 Test #193: fd-freq-energy ................... Passed 70.15 sec; Start 243: ocepa-grad2; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.91 sec; Start 205: frac-ip-fitting; 78/412 Test #320: sapt5 ............................ Passed 79.17 sec; Start 264: omp3-grad2; 79/412 Test #44: cc28 ............................. Passed 53.16 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:6757,Test,Test,6757,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #185: isapt2 ........................... Passed 119.08 sec; Start 26: cc13a; 64/413 Test #70: cc51 ............................. Passed 92.88 sec; Start 115: dcft7; 65/413 Test #195: fd-freq-energy-large ............. Passed 547.93 sec; Start 207: frac-traverse; 66/413 Test #183: fsapt-allterms ................... Passed 566.39 sec; Start 318: sapt2; 67/413 Test #47: cc30 ............................. Passed 80.66 sec; Start 320: sapt4; 68/413 Test #170: dft1 ............................. Passed 111.14 sec; Start 327: scf-bz2; 69/413 Test #232: mp2-module ....................... Passed 104.71 sec; Start 17: cbs-xtpl-opt; 70/413 Test #62: cc44 ............................. Passed 97.23 sec; Start 149: dfomp3-2; 71/413 Test #252: omp2-5 ........................... Passed 94.12 sec; Start 246: ocepa2; 72/413 Test #381: cc-module ........................ Passed 215.27 sec; Start 373: dft-custom-dhdf; 73/413 Test #244: ocepa-grad2 ...................... Passed 91.63 sec; Start 282: opt-irc-1; 74/413 Test #75: cc5a ............................. Passed 101.97 sec; Start 281: opt14; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 99.42 sec; Start 21: cc1; 76/413 Test #149: dfomp3-2 ......................... Passed 52.68 sec; Start 80: cc8b; 77/413 Test #246: ocepa2 ........................... Passed 63.98 sec; Start 158: dfomp2p5-grad2; 78/413 Test #17: cbs-xtpl-opt ..................... Passed 82.27 sec; Start 65: cc47; 79/413 Test #80: cc8b ............................. Passed 39.55 sec; Start 194: fd-freq-energy; 80/413 Test #21: cc1 .............................. Passed 62.73 sec; Start 64: cc46; 81/413 Test #281: opt14 ............................ Passed 79.81 sec; Start 35: cc19; 82/413 Test #373: dft-custom-dhdf .................. Passed 92.67 sec; Start 265: omp3-grad2; 83/413 Test #327: scf-bz2 .......................... Passed 127.64 sec; Start 109: dcft1; 84/413 Test #65: cc47 ............................. Passed 41.31 sec; Start 20: cbs-xtpl-wrapper; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:7189,Test,Test,7189,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability, #192: fd-freq-energy ................... Passed 17.45 sec; Start 132: dfmp2-4; 259/411 Test #224: molden2 .......................... Passed 11.80 sec; Start 6: ao-casscf-sp; 260/411 Test #223: molden1 .......................... Passed 9.22 sec; Start 127: dfccsdt1; 261/411 Test #185: fci-h2o .......................... Passed 7.33 sec; Start 90: cepa1; 262/411 Test #243: ocepa1 ........................... Passed 12.67 sec; Start 9: castup2; 263/411 Test #184: fci-dipole ....................... Passed 8.24 sec; Start 265: opt1; 264/411 Test #266: opt1-fd .......................... Passed 21.17 sec; Start 10: castup3; 265/411 Test #186: fci-h2o-2 ........................ Passed 8.30 sec; Start 339: scf-property; 266/411 Test #241: ocepa-grad1 ...................... Passed 22.53 sec; Start 191: fcidump; 267/411 Test #265: opt1 ............................. Passed 8.60 sec; Start 141: dfomp2-3; 268/411 Test #6: ao-casscf-sp ..................... Passed 11.39 sec; Start 117: dfcasscf-sa-sp; 269/411 Test #339: scf-property ..................... Passed 7.74 sec; Start 88: cepa2; 270/411 Test #199: fnocc1 ........................... Passed 24.12 sec; Start 179: fsapt2; 271/411 Test #143: dfomp2-grad1 ..................... Passed 30.12 sec; Start 99: cisd-sp-2; 272/411 Test #127: dfccsdt1 ......................... Passed 13.28 sec; Start 171: dft2; 273/411 Test #191: fcidump .......................... Passed 6.70 sec; Start 331: scf1; 274/411 Test #226: mp2-1 ............................ Passed 20.61 sec; Start 93: cisd-h2o+-0; 275/411 Test #122: dfccd-grad1 ...................... Passed 31.02 sec; Start 86: cepa0-grad2; 276/411 Test #132: dfmp2-4 .......................... Passed 15.60 sec; Start 94: cisd-h2o+-1; 277/411 Test #341: soscf-ref ........................ Passed 22.36 sec; Start 108: dcft2; 278/411 Test #117: dfcasscf-sa-sp ................... Passed 5.04 sec; Start 283: opt-freeze-coords; 279/411 Test #9: castup2 .......................... Passed 15.17 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:25212,Test,Test,25212,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #192: fd-freq-energy ................... Passed 5.20 sec; Start 255: omp2p5-grad1; 252/404 Test #101: cubeprop ......................... Passed 9.11 sec; Start 86: cepa0-grad2; 253/404 Test #127: dfccsdt1 ......................... Passed 2.46 sec; Start 295: psithon1; 254/404 Test #241: ocepa-grad1 ...................... Passed 2.76 sec; Start 83: cdomp2-1; 255/404 Test #253: omp2p5-1 ......................... Passed 1.72 sec; Start 123: dfccsd1; 256/404 Test #255: omp2p5-grad1 ..................... Passed 2.83 sec; Start 10: castup3; 257/404 Test #226: mp2-1 ............................ Passed 3.95 sec; Start 199: fnocc1; 258/404 Test #83: cdomp2-1 ......................... Passed 2.31 sec; Start 243: ocepa1; 259/404 Test #369: dft-jk ........................... Passed 5.86 sec; Start 15: cbs-xtpl-freq; 260/404 Test #86: cepa0-grad2 ...................... Passed 3.02 sec; Start 218: mints8; 261/404 Test #123: dfccsd1 .......................... Passed 2.54 sec; Start 198: freq-isotope2; 262/404 Test #295: psithon1 ......................... Passed 4.02 sec; Start 385: psi4numpy-fci; 263/404 Test #243: ocepa1 ........................... Passed 2.07 sec; Start 139: dfomp2-1; 264/404 Test #285: props2 ........................... Passed 6.83 sec; Start 158: dft-ghost; 265/404 Test #199: fnocc1 ........................... Passed 3.03 sec; Start 388: python-curve; 266/404 Test #10: castup3 .......................... Passed 4.38 sec; Start 108: dcft2; 267/404 Test #198: freq-isotope2 .................... Passed 3.71 sec; Start 393: python-3-index-transforms; 268/404 Test #139: dfomp2-1 ......................... Passed 2.72 sec; Start 137: dfmp2-grad4; 269/404 Test #385: psi4numpy-fci .................... Passed 3.33 sec; Start 98: cisd-sp; 270/404 Test #388: python-curve ..................... Passed 2.61 sec; Start 329: scf-guess-read2; 271/404 Test #108: dcft2 ............................ Passed 1.50 sec; Start 269: opt3; 272/404 Test #15: cbs-xtpl-freq ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:24237,Test,Test,24237,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #192: fd-freq-energy ................... Passed 7.19 sec; Start 95: cisd-h2o+-2; 283/411 Test #257: omp3-1 ........................... Passed 1.88 sec; Start 339: scf-property; 284/411 Test #187: fci-h2o-fzcv ..................... Passed 4.82 sec; Start 6: ao-casscf-sp; 285/411 Test #171: dft2 ............................. Passed 4.92 sec; Start 99: cisd-sp-2; 286/411 Test #385: psi4numpy-fci .................... Passed 3.00 sec; Start 241: ocepa-grad1; 287/411 Test #93: cisd-h2o+-0 ...................... Passed 3.98 sec; Start 94: cisd-h2o+-1; 288/411 Test #95: cisd-h2o+-2 ...................... Passed 4.00 sec; Start 199: fnocc1; 289/411 Test #6: ao-casscf-sp ..................... Passed 3.18 sec; Start 331: scf1; 290/411 Test #339: scf-property ..................... Passed 4.12 sec; Start 262: omp3-grad1; 291/411 Test #179: fsapt2 ........................... Passed 4.96 sec; Start 265: opt1; 292/411 Test #241: ocepa-grad1 ...................... Passed 3.33 sec; Start 121: dfccdl1; 293/411 Test #99: cisd-sp-2 ........................ Passed 4.38 sec; Start 294: psimrcc-sp1; 294/411 Test #94: cisd-h2o+-1 ...................... Passed 4.20 sec; Start 351: dft-reference; 295/411 Test #331: scf1 ............................. Passed 4.43 sec; Start 355: tu3-h2o-opt; 296/411 Test #121: dfccdl1 .......................... Passed 4.09 sec; Start 130: dfmp2-2; 297/411 Test #265: opt1 ............................. Passed 5.13 sec; Start 397: json-v11-energy; 298/411 Test #351: dft-reference .................... Passed 3.24 sec; Start 246: omp2-1; 299/411 Test #262: omp3-grad1 ....................... Passed 5.74 sec; Start 136: dfmp2-grad3; 300/411 Test #294: psimrcc-sp1 ...................... Passed 4.69 sec; Start 226: mp2-1; 301/411 Test #199: fnocc1 ........................... Passed 7.10 sec; Start 120: dfccd1; 302/411 Test #246: omp2-1 ........................... Passed 1.40 sec; Start 269: opt3; 303/411 Test #130: dfmp2-2 .......................... Passed 2.10 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:27268,Test,Test,27268,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #196: fd-freq-gradient-large ........... Passed 312.37 sec; Start 26: cc13a; 40/412 Test #348: sapt-dft2 ........................ Passed 138.78 sec; Start 114: dcft7; 41/412 Test #59: cc41 ............................. Passed 80.57 sec; Start 206: frac-traverse; 42/412 Test #98: cisd-opt-fd ...................... Passed 149.31 sec; Start 317: sapt2; 43/412 Test #159: dfscf-bz2 ........................ Passed 157.81 sec; Start 319: sapt4; 44/412 Test #61: cc43 ............................. Passed 63.98 sec; Start 326: scf-bz2; 45/412 Test #48: cc31 ............................. Passed 101.70 sec; Start 372: dft-custom-dhdf; 46/412 Test #321: sapt6 ............................ Passed 184.79 sec; Start 105: dcft-grad2; 47/412 Test #169: dft1 ............................. Passed 111.64 sec; Start 75: cc5a; 48/412 Test #155: dft-grad-lr2 ..................... Passed 115.65 sec; Start 280: opt14; 49/412 Test #184: isapt2 ........................... Passed 141.61 sec; Start 303: pywrap-cbs1; 50/412 Test #105: dcft-grad2 ....................... Passed 35.94 sec; Start 318: sapt3; 51/412 Test #75: cc5a ............................. Passed 65.55 sec; Start 281: opt-irc-1; 52/412 Test #303: pywrap-cbs1 ...................... Passed 57.75 sec; Start 47: cc30; 53/412 Test #372: dft-custom-dhdf .................. Passed 102.93 sec; Start 92: cepa-module; 54/412 Test #182: fsapt-allterms ................... Passed 579.58 sec; Start 320: sapt5; 55/412 Test #280: opt14 ............................ Passed 94.37 sec; Start 70: cc51; 56/412 Test #194: fd-freq-energy-large ............. Passed 545.92 sec; Start 76: cc6; 57/412 Test #318: sapt3 ............................ Passed 99.92 sec; Start 293: psimrcc-fd-freq2; 58/412 Test #47: cc30 ............................. Passed 48.45 sec; Start 205: frac-ip-fitting; 59/412 Test #326: scf-bz2 .......................... Passed 165.53 sec; Start 168: dft-b3lyp; 60/412 Test #92: cepa-module ...................... Passed 64.56 sec; Start 193:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:5018,Test,Test,5018,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability, #200: fnocc2 ........................... Passed 34.47 sec; Start 1: adc1; 170/411 Test #337: scf6 ............................. Passed 29.80 sec; Start 272: opt6; 171/411 Test #336: scf5 ............................. Passed 34.04 sec; Start 375: pywrap-bfs; 172/411 Test #129: dfmp2-1 .......................... Passed 33.82 sec; Start 173: dft-omega; 173/411 Test #392: python-cc54 ...................... Passed 14.14 sec; Start 89: cepa3; 174/411 Test #254: omp2p5-2 ......................... Passed 13.16 sec; Start 159: dft-b2plyp; 175/411 Test #374: dft-custom-gga ................... Passed 32.62 sec; Start 166: dft-psivar; 176/411 Test #342: soscf-dft ........................ Passed 31.45 sec; Start 90: cepa1; 177/411 Test #196: fd-gradient ...................... Passed 28.19 sec; Start 128: dfccsdat1; 178/411 Test #89: cepa3 ............................ Passed 11.27 sec; Start 346: sapt-dft1; 179/411 Test #258: omp3-2 ........................... Passed 18.17 sec; Start 163: dft-freq; 180/411 Test #326: scf-ecp .......................... Passed 28.23 sec; Start 194: fd-freq-gradient; 181/411 Test #90: cepa1 ............................ Passed 8.51 sec; Start 122: dfccd-grad1; 182/411 Test #274: opt8 ............................. Passed 32.60 sec; Start 277: opt12; 183/411 Test #1: adc1 ............................. Passed 23.32 sec; Start 7: casscf-sp; 184/411 Test #128: dfccsdat1 ........................ Passed 13.69 sec; Start 172: dft3; 185/411 Test #272: opt6 ............................. Passed 23.73 sec; Start 138: dfmp2-grad5; 186/411 Test #122: dfccd-grad1 ...................... Passed 7.89 sec; Start 238: nbody-intermediates; 187/411 Test #375: pywrap-bfs ....................... Passed 24.75 sec; Start 189: fci-tdm-2; 188/411 Test #264: opt-lindep-change ................ Passed 27.59 sec; Start 248: omp2-3; 189/411 Test #173: dft-omega ........................ Passed 25.76 sec; Start 105: dcft-grad3; 190/411 Test #159: dft-b2plyp ....................... Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:16877,Test,Test,16877,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #202: fnocc4 ........................... Passed 22.98 sec; Start 163: dft-freq; 161/411 Test #207: gibbs ............................ Passed 21.15 sec; Start 16: cbs-xtpl-gradient; 162/411 Test #54: cc38 ............................. Passed 19.13 sec; Start 49: cc33; 163/411 Test #152: dfomp2p5-grad1 ................... Passed 14.78 sec; Start 172: dft3; 164/411 Test #51: cc35 ............................. Passed 18.61 sec; Start 277: opt12; 165/411 Test #189: fci-tdm-2 ........................ Passed 19.97 sec; Start 346: sapt-dft1; 166/411 Test #33: cc18 ............................. Passed 19.88 sec; Start 360: x2c1; 167/411 Test #163: dft-freq ......................... Passed 20.91 sec; Start 252: omp2-grad2; 168/411 Test #49: cc33 ............................. Passed 15.20 sec; Start 322: sapt-dft-lrc; 169/411 Test #16: cbs-xtpl-gradient ................ Passed 18.76 sec; Start 272: opt6; 170/411 Test #172: dft3 ............................. Passed 19.83 sec; Start 150: dfomp2p5-1; 171/411 Test #360: x2c1 ............................. Passed 12.27 sec; Start 358: tu5-sapt; 172/411 Test #277: opt12 ............................ Passed 20.43 sec; Start 32: cc17; 173/411 Test #252: omp2-grad2 ....................... Passed 12.52 sec; Start 267: opt2; 174/411 Test #346: sapt-dft1 ........................ Passed 21.76 sec; Start 248: omp2-3; 175/411 Test #150: dfomp2p5-1 ....................... Passed 10.49 sec; Start 303: pywrap-checkrun-convcrit; 176/411 Test #322: sapt-dft-lrc ..................... Passed 18.93 sec; Start 146: dfomp3-1; 177/411 Test #272: opt6 ............................. Passed 19.96 sec; Start 138: dfmp2-grad5; 178/411 Test #32: cc17 ............................. Passed 14.49 sec; Start 194: fd-freq-gradient; 179/411 Test #358: tu5-sapt ......................... Passed 18.58 sec; Start 177: extern2; 180/411 Test #146: dfomp3-1 ......................... Passed 11.24 sec; Start 315: sapt1; 181/411 Test #248: omp2-3 ........................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:15958,Test,Test,15958,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability, #203: fnocc4 ........................... Passed 37.17 sec; Start 273: opt6; 180/412 Test #53: cc36 ............................. Passed 27.88 sec; Start 268: opt2; 181/412 Test #167: dft-psivar ....................... Passed 45.63 sec; Start 173: dft3; 182/412 Test #376: pywrap-bfs ....................... Passed 45.59 sec; Start 178: extern2; 183/412 Test #160: dft-b2plyp ....................... Passed 47.37 sec; Start 304: pywrap-checkrun-convcrit; 184/412 Test #314: rasscf-sp ........................ Passed 41.73 sec; Start 38: cc22; 185/412 Test #273: opt6 ............................. Passed 54.96 sec; Start 164: dft-freq; 186/412 Test #268: opt2 ............................. Passed 56.52 sec; Start 208: gibbs; 187/412 Test #173: dft3 ............................. Passed 59.20 sec; Start 347: sapt-dft1; 188/412 Test #178: extern2 .......................... Passed 56.03 sec; Start 259: omp3-2; 189/412 Test #304: pywrap-checkrun-convcrit ......... Passed 58.77 sec; Start 278: opt12; 190/412 Test #38: cc22 ............................. Passed 56.44 sec; Start 248: omp2-2; 191/412 Test #208: gibbs ............................ Passed 68.71 sec; Start 190: fci-tdm-2; 192/412 Test #164: dft-freq ......................... Passed 75.93 sec; Start 129: dfccsdat1; 193/412 Test #179: fsapt1 ........................... Passed 2077.65 sec; Start 202: fnocc3; 194/412 Test #259: omp3-2 ........................... Passed 65.01 sec; Start 359: tu5-sapt; 195/412 Test #347: sapt-dft1 ........................ Passed 79.99 sec; Start 323: sapt-dft-lrc; 196/412 Test #248: omp2-2 ........................... Passed 57.09 sec; Start 147: dfomp3-1; 197/412 Test #278: opt12 ............................ Passed 70.83 sec; Start 249: omp2-3; 198/412 Test #202: fnocc3 ........................... Passed 42.62 sec; Start 144: dfomp2-grad1; 199/412 Test #129: dfccsdat1 ........................ Passed 46.01 sec; Start 54: cc37; 200/412 Test #147: dfomp3-1 ......................... Passed 37.56 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:17643,Test,Test,17643,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability, #206: ghosts ........................... Passed 32.53 sec; Start 342: soscf-dft; 87/411 Test #386: cookbook-rohf-orb-rot ............ Passed 60.55 sec; Start 237: nbody-he-cluster; 88/411 Test #106: dcft-grad4 ....................... Passed 33.82 sec; Start 66: cc49; 89/411 Test #115: dcft9 ............................ Passed 26.24 sec; Start 359: tu6-cp-ne2; 90/411 Test #259: omp3-3 ........................... Passed 42.02 sec; Start 11: cbs-delta-energy; 91/411 Test #323: sapt7 ............................ Passed 33.21 sec; Start 244: ocepa2; 92/411 Test #342: soscf-dft ........................ Passed 30.10 sec; Start 276: opt11; 93/411 Test #237: nbody-he-cluster ................. Passed 35.76 sec; Start 374: dft-custom-gga; 94/411 Test #66: cc49 ............................. Passed 30.67 sec; Start 68: cc50; 95/411 Test #244: ocepa2 ........................... Passed 36.96 sec; Start 273: opt7; 96/411 Test #374: dft-custom-gga ................... Passed 28.59 sec; Start 59: cc42; 97/411 Test #276: opt11 ............................ Passed 43.58 sec; Start 156: dft-b2plyp; 98/411 Test #68: cc50 ............................. Passed 32.32 sec; Start 1: adc1; 99/411 Test #11: cbs-delta-energy ................. Passed 58.90 sec; Start 264: opt-lindep-change; 100/411 Test #59: cc42 ............................. Passed 20.74 sec; Start 173: dft-omega; 101/411 Test #359: tu6-cp-ne2 ....................... Passed 74.91 sec; Start 375: pywrap-bfs; 102/411 Test #273: opt7 ............................. Passed 36.48 sec; Start 149: dfomp3-grad2; 103/411 Test #1: adc1 ............................. Passed 24.56 sec; Start 55: cc39; 104/411 Test #156: dft-b2plyp ....................... Passed 25.95 sec; Start 34: cc19; 105/411 Test #264: opt-lindep-change ................ Passed 25.13 sec; Start 65: cc48; 106/411 Test #173: dft-omega ........................ Passed 23.97 sec; Start 379: cc-module; 107/411 Test #55: cc39 ............................. Passed 13.65 sec; Start 299:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:9129,Test,Test,9129,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability, #207: gibbs ............................ Passed 19.82 sec; Start 221: mints9; 211/411 Test #217: mints6 ........................... Passed 12.94 sec; Start 222: mints10; 212/411 Test #220: mints-helper ..................... Passed 1.41 sec; Start 223: molden1; 213/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 214/411 Test #222: mints10 .......................... Passed 1.66 sec; Start 225: mom; 215/411 Test #200: fnocc2 ........................... Passed 37.89 sec; Start 226: mp2-1; 216/411 Test #168: dft1 ............................. Passed 104.42 sec; Start 227: mp2-def2; 217/411 Test #218: mints8 ........................... Passed 16.12 sec; Start 228: mp2-grad1; 218/411 Test #206: ghosts ........................... Passed 32.49 sec; Start 229: mp2-grad2; 219/411 Test #225: mom .............................. Passed 5.76 sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 233: mp3-grad1; 223/411 Test #229: mp2-grad2 ........................ Passed 3.96 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 4.67 sec; Start 235: mp2-property; 225/411 Test #231: mp2p5-grad1 ...................... Passed 6.26 sec; Start 236: mpn-bh; 226/411 Test #232: mp2p5-grad2 ...................... Passed 6.64 sec; Start 237: nbody-he-cluster; 227/411 Test #226: mp2-1 ............................ Passed 12.37 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 4.88 sec; Start 239: numpy-array-interface; 229/411 Test #235: mp2-property ..................... Passed 3.31 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 241: ocepa-grad1; 231/411 Test #236: mpn-bh .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:20558,Test,Test,20558,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability, #20: cbs-xtpl-wrapper ................. Passed 82.20 sec; Start 243: ocepa-grad2; 73/412 Test #390: python-pubchem ................... Passed 77.47 sec; Start 19: cbs-xtpl-nbody; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 98.26 sec; Start 28: cc13c; 75/412 Test #114: dcft7 ............................ Passed 323.56 sec; Start 27: cc13b; 76/412 Test #260: omp3-3 ........................... Passed 91.31 sec; Start 245: ocepa2; 77/412 Test #62: cc44 ............................. Passed 89.37 sec; Start 264: omp3-grad2; 78/412 Test #261: omp3-4 ........................... Passed 96.80 sec; Start 101: ci-property; 79/412 Test #298: pubchem1 ......................... Passed 86.18 sec; Start 251: omp2-5; 80/412 Test #116: dcft9 ............................ Passed 108.41 sec; Start 250: omp2-4; 81/412 Test #44: cc28 ............................. Passed 98.15 sec; Start 262: omp3-5; 82/412 Test #317: sapt2 ............................ Passed 372.09 sec; Start 257: omp2p5-grad2; 83/412 Test #243: ocepa-grad2 ...................... Passed 99.73 sec; Start 31: cc15; 84/412 Test #21: cc1 .............................. Passed 130.00 sec; Start 163: dft-grad-meta; 85/412 Test #101: ci-property ...................... Passed 70.20 sec; Start 145: dfomp2-grad2; 86/412 Test #245: ocepa2 ........................... Passed 101.41 sec; Start 300: pywrap-alias; 87/412 Test #19: cbs-xtpl-nbody ................... Passed 118.91 sec; Start 69: cc50; 88/412 Test #264: omp3-grad2 ....................... Passed 104.97 sec; Start 150: dfomp3-grad2; 89/412 Test #28: cc13c ............................ Passed 122.08 sec; Start 171: dft1-alt; 90/412 Test #251: omp2-5 ........................... Passed 94.74 sec; Start 58: cc40; 91/412 Test #27: cc13b ............................ Passed 131.95 sec; Start 35: cc19; 92/412 Test #257: omp2p5-grad2 ..................... Passed 83.62 sec; Start 277: opt11; 93/412 Test #250: omp2-4 ........................... Passed 107.01 sec; Start 67: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:8052,Test,Test,8052,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability, #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1-alt; 78/411 Test #107: dcft1 ............................ Passed 106.25 sec; Start 259: omp3-3; 79/411 Test #297: pubchem1 ......................... Passed 56.59 sec; Start 66: cc49; 80/411 Test #389: python-pubchem ................... Passed 58.95 sec; Start 307: pywrap-db1; 81/411 Test #61: cc44 ............................. Passed 92.56 sec; Start 131: dfmp2-3; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Start 2: adc2; 85/411 Test #307: pywrap-db1 ....................... Passed 45.25 sec; Start 115: dcft9; 86/411 Test #66: cc49 ............................. Passed 56.56 sec; Start 77: cc8; 87/411 Test #131: dfmp2-3 .......................... Passed 42.31 sec; Start 273: opt7; 88/411 Test #28: cc13d ............................ Passed 229.44 sec; Start 360: x2c1; 89/411 Test #219: mints-benchmark .................. Passed 42.72 sec; Start 336: scf5; 90/411 Test #2: adc2 ............................. Passed 42.28 sec; Start 276: opt11; 91/411 Test #348: sapt-compare ..................... Passed 47.36 sec; Start 237: nbody-he-cluster; 92/411 Test #91: cepa-module ...................... Passed 168.47 sec; Start 144: dfomp2-grad2; 93/411 Test #178: fsapt1 ........................... Passed 2031.12 sec; Start 27: cc13c; 94/411 Test #60: cc43 ............................. Passed 136.23 sec; Start 260: omp3-4; 95/411 Test #259: omp3-3 ........................... Passed 123.04 sec; Start 56: cc4; 96/411 Test #386,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:8220,Test,Test,8220,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #210: mcscf2 ........................... Passed 1.44 sec; Start 211: mcscf3; 201/411 Test #196: fd-gradient ...................... Passed 25.19 sec; Start 212: mints1; 202/411 Test #211: mcscf3 ........................... Passed 1.15 sec; Start 213: mints2; 203/411 Test #161: dft-grad-lr2 ..................... Passed 96.78 sec; Start 214: mints3; 204/411 Test #212: mints1 ........................... Passed 0.68 sec; Start 215: mints4; 205/411 Test #215: mints4 ........................... Passed 0.56 sec; Start 216: mints5; 206/411 Test #214: mints3 ........................... Passed 1.08 sec; Start 217: mints6; 207/411 Test #216: mints5 ........................... Passed 0.62 sec; Start 218: mints8; 208/411 Test #213: mints2 ........................... Passed 2.95 sec; Start 219: mints-benchmark; 209/411 Test #202: fnocc4 ........................... Passed 19.45 sec; Start 220: mints-helper; 210/411 Test #200: fnocc2 ........................... Passed 23.63 sec; Start 221: mints9; 211/411 Test #220: mints-helper ..................... Passed 1.29 sec; Start 222: mints10; 212/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 223: molden1; 213/411 Test #222: mints10 .......................... Passed 2.04 sec; Start 224: molden2; 214/411 Test #207: gibbs ............................ Passed 16.26 sec; Start 225: mom; 215/411 Test #217: mints6 ........................... Passed 12.58 sec; Start 226: mp2-1; 216/411 Test #223: molden1 .......................... Passed 2.95 sec; Start 227: mp2-def2; 217/411 Test #224: molden2 .......................... Passed 2.82 sec; Start 228: mp2-grad1; 218/411 Test #225: mom .............................. Passed 3.13 sec; Start 229: mp2-grad2; 219/411 Test #218: mints8 ........................... Passed 15.91 sec; Start 230: mp2-module; 220/411 Test #228: mp2-grad1 ........................ Passed 3.46 sec; Start 231: mp2p5-grad1; 221/411 Test #229: mp2-grad2 ........................ Passed 3.65 sec; Start 232: mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:19584,Test,Test,19584,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #210: mcscf2 ........................... Passed 1.68 sec; Start 211: mcscf3; 209/411 Test #211: mcscf3 ........................... Passed 0.79 sec; Start 212: mints1; 210/411 Test #212: mints1 ........................... Passed 0.71 sec; Start 213: mints2; 211/411 Test #213: mints2 ........................... Passed 2.69 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.19 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.68 sec; Start 216: mints5; 214/411 Test #200: fnocc2 ........................... Passed 52.96 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 1.11 sec; Start 218: mints8; 216/411 Test #217: mints6 ........................... Passed 11.95 sec; Start 219: mints-benchmark; 217/411 Test #207: gibbs ............................ Passed 26.16 sec; Start 220: mints-helper; 218/411 Test #206: ghosts ........................... Passed 33.06 sec; Start 221: mints9; 219/411 Test #220: mints-helper ..................... Passed 1.84 sec; Start 222: mints10; 220/411 Test #218: mints8 ........................... Passed 16.42 sec; Start 223: molden1; 221/411 Test #221: mints9 ........................... Passed 2.04 sec; Start 224: molden2; 222/411 Test #222: mints10 .......................... Passed 2.32 sec; Start 225: mom; 223/411 Test #225: mom .............................. Passed 3.45 sec; Start 226: mp2-1; 224/411 Test #223: molden1 .......................... Passed 4.95 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 4.83 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 1.97 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.77 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 13.08 sec; Start 231: mp2p5-grad1; 229/411 Test #204: frac-ip-fitting .................. Passed 69.51 sec; Start 232: mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:20230,Test,Test,20230,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability, #210: mints3 ........................... Passed 1.09 sec; Start 212: mints5; 282/401 Test #211: mints4 ........................... Passed 0.57 sec; Start 213: mints6; 283/401 Test #212: mints5 ........................... Passed 0.74 sec; Start 214: mints8; 284/401 Test #190: fd-freq-gradient ................. Passed 16.08 sec; Start 215: mints-benchmark; 285/401 Test #213: mints6 ........................... Passed 4.79 sec; Start 216: mints-helper; 286/401 Test #185: fci-tdm-2 ........................ Passed 18.93 sec; Start 217: mints9; 287/401 Test #216: mints-helper ..................... Passed 1.27 sec; Start 221: mom; 288/401 Test #214: mints8 ........................... Passed 6.28 sec; Start 222: mp2-1; 289/401 Test #217: mints9 ........................... Passed 2.08 sec; Start 223: mp2-def2; 290/401 Test #202: ghosts ........................... Passed 13.17 sec; Start 224: mp2-grad1; 291/401 Test #221: mom .............................. Passed 2.59 sec; Start 225: mp2-grad2; 292/401 Test #224: mp2-grad1 ........................ Passed 2.39 sec; Start 228: mp2p5-grad2; 293/401 Test #166: dft1-alt ......................... Passed 45.62 sec; Start 229: mp3-grad1; 294/401 Test #225: mp2-grad2 ........................ Passed 2.39 sec; Start 230: mp3-grad2; 295/401 Test #222: mp2-1 ............................ Passed 5.07 sec; Start 233: nbody-he-cluster; 296/401 Test #192: fd-gradient ...................... Passed 23.06 sec; Start 234: nbody-intermediates; 297/401 Test #229: mp3-grad1 ........................ Passed 2.07 sec; Start 236: ocepa-freq1; 298/401 Test #228: mp2p5-grad2 ...................... Passed 2.58 sec; Start 237: ocepa-grad1; 299/401 Test #215: mints-benchmark .................. Passed 8.78 sec; Start 240: ocepa2; 300/401 Test #230: mp3-grad2 ........................ Passed 1.93 sec; Start 241: ocepa3; 301/401 Test #237: ocepa-grad1 ...................... Passed 5.43 sec; Start 242: omp2-1; 302/401 Test #242: omp2-1 ........................... ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:27284,Test,Test,27284,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability, #212: mcscf3 ........................... Passed 1.42 sec; Start 214: mints2; 204/412 Test #213: mints1 ........................... Passed 0.94 sec; Start 215: mints3; 205/412 Test #215: mints3 ........................... Passed 2.55 sec; Start 216: mints4; 206/412 Test #214: mints2 ........................... Passed 3.45 sec; Start 217: mints5; 207/412 Test #216: mints4 ........................... Passed 0.78 sec; Start 218: mints6; 208/412 Test #217: mints5 ........................... Passed 1.01 sec; Start 219: mints8; 209/412 Test #201: fnocc2 ........................... Passed 36.04 sec; Start 220: mints-benchmark; 210/412 Test #169: dft1 ............................. Passed 101.86 sec; Start 221: mints-helper; 211/412 Test #208: gibbs ............................ Passed 20.62 sec; Start 222: mints9; 212/412 Test #159: dfscf-bz2 ........................ Passed 147.05 sec; Start 223: mints10; 213/412 Test #221: mints-helper ..................... Passed 1.97 sec; Start 224: molden1; 214/412 Test #222: mints9 ........................... Passed 2.02 sec; Start 225: molden2; 215/412 Test #223: mints10 .......................... Passed 2.02 sec; Start 226: mom; 216/412 Test #218: mints6 ........................... Passed 12.96 sec; Start 227: mp2-1; 217/412 Test #224: molden1 .......................... Passed 3.38 sec; Start 228: mp2-def2; 218/412 Test #193: fd-freq-energy ................... Passed 61.77 sec; Start 229: mp2-grad1; 219/412 Test #226: mom .............................. Passed 3.66 sec; Start 230: mp2-grad2; 220/412 Test #225: molden2 .......................... Passed 3.82 sec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:19897,Test,Test,19897,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability," #212: mints1 ........................... Passed 0.53 sec; 407/411 Test #364: options1 ......................... Passed 0.54 sec; 408/411 Test #215: mints4 ........................... Passed 0.52 sec; 409/411 Test #174: docs-bases ....................... Passed 0.51 sec; 410/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 411/411 Test #87: cepa1 ............................ Passed 1.69 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 73.45 sec*proc (2 tests); autotest = 4474.03 sec*proc (26 tests); cart = 23108.76 sec*proc (123 tests); cas = 53.35 sec*proc (1 test); casscf = 207.99 sec*proc (11 tests); cbs = 2868.91 sec*proc (10 tests); cc = 20475.44 sec*proc (65 tests); cdomp2 = 33.09 sec*proc (2 tests); cepa = 541.03 sec*proc (7 tests); ci = 102.84 sec*proc (8 tests); cisd = 183.38 sec*proc (7 tests); cookbook = 956.85 sec*proc (1 test); cubeprop = 21.53 sec*proc (2 tests); dcft = 4616.14 sec*proc (13 tests); df = 1880.42 sec*proc (38 tests); dfccd = 2.46 sec*proc (1 test); dfccd-grad = 4.34 sec*proc (1 test); dfccdl = 4.00 sec*proc (1 test); dfccsd = 1.88 sec*proc (1 test); dfccsd-grad = 29.42 sec*proc (1 test); dfccsd-t-grad = 22.19 sec*proc (1 test); dfccsdat = 11.93 sec*proc (1 test); dfccsdl = 2.75 sec*proc (1 test); dfccsdt = 2.37 sec*proc (1 test); dfep2 = 5.15 sec*proc (2 tests); dfmp2 = 154.34 sec*proc (11 tests); dfomp2 = 702.44 sec*proc (7 tests); dfomp2.5 = 372.78 sec*proc (4 tests); dfomp3 = 341.52 sec*proc (4 tests); dfscf = 146.26 sec*proc (1 test); dft = 1581.94 sec*proc (27 tests); docs = 1.18 sec*proc (2 tests); ecp = 64.57 sec*proc (2 tests); fci = 13.23 sec*proc (2 tests); fcidump = 3.66 sec*proc (1 test); findif = 995.58 sec*proc (5 tests); fnocc = 309.59 sec*proc (4 tests); freq = 783.53 sec*proc (6 tests); gradient = 2806.11 sec*proc (16 tests); json = 13.90 sec*proc (8 tests); longtests = 3775.26 sec*proc (5 tests); mcscf = 2.75 sec*proc (3 tests); minitests = 60.27 sec*proc (4 tests); mints =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:38994,test,tests,38994,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['test'],['tests']
Testability, #212: mints1 ........................... Passed 0.59 sec; Start 213: mints2; 211/411 Test #103: dcft-grad1 ....................... Passed 994.67 sec; Start 214: mints3; 212/411 Test #214: mints3 ........................... Passed 1.14 sec; Start 215: mints4; 213/411 Test #213: mints2 ........................... Passed 3.39 sec; Start 216: mints5; 214/411 Test #215: mints4 ........................... Passed 0.55 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 0.61 sec; Start 218: mints8; 216/411 Test #217: mints6 ........................... Passed 12.30 sec; Start 219: mints-benchmark; 217/411 Test #207: gibbs ............................ Passed 37.52 sec; Start 220: mints-helper; 218/411 Test #220: mints-helper ..................... Passed 2.26 sec; Start 221: mints9; 219/411 Test #218: mints8 ........................... Passed 16.72 sec; Start 222: mints10; 220/411 Test #221: mints9 ........................... Passed 1.95 sec; Start 223: molden1; 221/411 Test #222: mints10 .......................... Passed 3.13 sec; Start 224: molden2; 222/411 Test #204: frac-ip-fitting .................. Passed 77.00 sec; Start 225: mom; 223/411 Test #200: fnocc2 ........................... Passed 122.61 sec; Start 226: mp2-1; 224/411 Test #225: mom .............................. Passed 6.32 sec; Start 227: mp2-def2; 225/411 Test #223: molden1 .......................... Passed 15.51 sec; Start 228: mp2-grad1; 226/411 Test #224: molden2 .......................... Passed 14.25 sec; Start 229: mp2-grad2; 227/411 Test #228: mp2-grad1 ........................ Passed 3.99 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 5.05 sec; Start 231: mp2p5-grad1; 229/411 Test #226: mp2-1 ............................ Passed 13.12 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 3.94 sec; Start 233: mp3-grad1; 231/411 Test #219: mints-benchmark .................. Passed 38.09 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:20390,Test,Test,20390,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability, #214: mints2 ........................... Passed 3.45 sec; Start 217: mints5; 207/412 Test #216: mints4 ........................... Passed 0.78 sec; Start 218: mints6; 208/412 Test #217: mints5 ........................... Passed 1.01 sec; Start 219: mints8; 209/412 Test #201: fnocc2 ........................... Passed 36.04 sec; Start 220: mints-benchmark; 210/412 Test #169: dft1 ............................. Passed 101.86 sec; Start 221: mints-helper; 211/412 Test #208: gibbs ............................ Passed 20.62 sec; Start 222: mints9; 212/412 Test #159: dfscf-bz2 ........................ Passed 147.05 sec; Start 223: mints10; 213/412 Test #221: mints-helper ..................... Passed 1.97 sec; Start 224: molden1; 214/412 Test #222: mints9 ........................... Passed 2.02 sec; Start 225: molden2; 215/412 Test #223: mints10 .......................... Passed 2.02 sec; Start 226: mom; 216/412 Test #218: mints6 ........................... Passed 12.96 sec; Start 227: mp2-1; 217/412 Test #224: molden1 .......................... Passed 3.38 sec; Start 228: mp2-def2; 218/412 Test #193: fd-freq-energy ................... Passed 61.77 sec; Start 229: mp2-grad1; 219/412 Test #226: mom .............................. Passed 3.66 sec; Start 230: mp2-grad2; 220/412 Test #225: molden2 .......................... Passed 3.82 sec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Start 235: mp3-grad2; 225/412 Test #232: mp2p5-grad1 ...................... Passed 4.41 sec; Start 236: mp2-property; 226/412 Test #234: mp3-grad1 ........................ Passed 3.21 sec; Start 237: mpn-bh; 227/412 Test #233: mp2p5-grad2 ...................... Passed 6.3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:20165,Test,Test,20165,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #214: mints3 ........................... Passed 1.12 sec; Start 215: mints4; 213/411 Test #215: mints4 ........................... Passed 0.58 sec; Start 216: mints5; 214/411 Test #207: gibbs ............................ Passed 21.62 sec; Start 217: mints6; 215/411 Test #216: mints5 ........................... Passed 0.65 sec; Start 218: mints8; 216/411 Test #200: fnocc2 ........................... Passed 54.94 sec; Start 219: mints-benchmark; 217/411 Test #206: ghosts ........................... Passed 34.38 sec; Start 220: mints-helper; 218/411 Test #220: mints-helper ..................... Passed 1.34 sec; Start 221: mints9; 219/411 Test #221: mints9 ........................... Passed 2.00 sec; Start 222: mints10; 220/411 Test #222: mints10 .......................... Passed 1.63 sec; Start 223: molden1; 221/411 Test #217: mints6 ........................... Passed 16.04 sec; Start 224: molden2; 222/411 Test #218: mints8 ........................... Passed 18.09 sec; Start 225: mom; 223/411 Test #223: molden1 .......................... Passed 5.30 sec; Start 226: mp2-1; 224/411 Test #225: mom .............................. Passed 3.92 sec; Start 227: mp2-def2; 225/411 Test #224: molden2 .......................... Passed 6.41 sec; Start 228: mp2-grad1; 226/411 Test #228: mp2-grad1 ........................ Passed 4.16 sec; Start 229: mp2-grad2; 227/411 Test #226: mp2-1 ............................ Passed 12.01 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 7.55 sec; Start 231: mp2p5-grad1; 229/411 Test #145: dfomp2-grad3 ..................... Passed 427.26 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 4.31 sec; Start 233: mp3-grad1; 231/411 Test #183: isapt2 ........................... Passed 136.47 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 6.71 sec; Start 235: mp2-property; 233/411 Test #219: mints-benchmark .................. Passed 42.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:20574,Test,Test,20574,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability, #215: mints3 ........................... Passed 2.55 sec; Start 216: mints4; 206/412 Test #214: mints2 ........................... Passed 3.45 sec; Start 217: mints5; 207/412 Test #216: mints4 ........................... Passed 0.78 sec; Start 218: mints6; 208/412 Test #217: mints5 ........................... Passed 1.01 sec; Start 219: mints8; 209/412 Test #201: fnocc2 ........................... Passed 36.04 sec; Start 220: mints-benchmark; 210/412 Test #169: dft1 ............................. Passed 101.86 sec; Start 221: mints-helper; 211/412 Test #208: gibbs ............................ Passed 20.62 sec; Start 222: mints9; 212/412 Test #159: dfscf-bz2 ........................ Passed 147.05 sec; Start 223: mints10; 213/412 Test #221: mints-helper ..................... Passed 1.97 sec; Start 224: molden1; 214/412 Test #222: mints9 ........................... Passed 2.02 sec; Start 225: molden2; 215/412 Test #223: mints10 .......................... Passed 2.02 sec; Start 226: mom; 216/412 Test #218: mints6 ........................... Passed 12.96 sec; Start 227: mp2-1; 217/412 Test #224: molden1 .......................... Passed 3.38 sec; Start 228: mp2-def2; 218/412 Test #193: fd-freq-energy ................... Passed 61.77 sec; Start 229: mp2-grad1; 219/412 Test #226: mom .............................. Passed 3.66 sec; Start 230: mp2-grad2; 220/412 Test #225: molden2 .......................... Passed 3.82 sec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Start 235: mp3-grad2; 225/412 Test #232: mp2p5-grad1 ...................... Passed 4.41 sec; Start 236: mp2-property; 226/412 Test #234: mp3-grad1 ........................ Passed 3.21,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:20075,Test,Test,20075,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #218: mints6 ........................... Passed 13.57 sec; Start 271: opt4; 244/412 Test #87: cepa0-grad2 ...................... Passed 6.34 sec; Start 227: mp2-1; 245/412 Test #373: dft-custom-hybrid ................ Passed 11.28 sec; Start 140: dfomp2-1; 246/412 Test #269: opt2-fd .......................... Passed 11.30 sec; Start 9: castup2; 247/412 Test #99: cisd-sp .......................... Passed 11.34 sec; Start 191: fci-coverage; 248/412 Test #3: casscf-fzc-sp .................... Passed 9.97 sec; Start 123: dfccd-grad1; 249/412 Test #370: dft-jk ........................... Passed 11.87 sec; Start 128: dfccsdt1; 250/412 Test #84: cdomp2-1 ......................... Passed 7.75 sec; Start 368: scf-hess1; 251/412 Test #102: cubeprop ......................... Passed 11.75 sec; Start 109: dcft2; 252/412 Test #158: dfrasscf-sp ...................... Passed 9.81 sec; Start 4: casscf-semi; 253/412 Test #394: python-3-index-transforms ........ Passed 12.40 sec; Start 366: cubeprop-esp; 254/412 Test #296: psithon1 ......................... Passed 10.55 sec; Start 125: dfccsdl1; 255/412 Test #271: opt4 ............................. Passed 10.22 sec; Start 254: omp2p5-1; 256/412 Test #227: mp2-1 ............................ Passed 10.20 sec; Start 124: dfccsd1; 257/412 Test #191: fci-coverage ..................... Passed 7.94 sec; Start 225: molden2; 258/412 Test #336: scf4 ............................. Passed 13.35 sec; Start 263: omp3-grad1; 259/412 Test #140: dfomp2-1 ......................... Passed 9.80 sec; Start 199: freq-isotope2; 260/412 Test #128: dfccsdt1 ......................... Passed 8.61 sec; Start 224: molden1; 261/412 Test #368: scf-hess1 ........................ Passed 11.09 sec; Start 138: dfmp2-grad4; 262/412 Test #4: casscf-semi ...................... Passed 9.22 sec; Start 15: cbs-xtpl-freq; 263/412 Test #254: omp2p5-1 ......................... Passed 7.65 sec; Start 133: dfmp2-4; 264/412 Test #366: cubeprop-esp ..................... Passed 9.64,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:23829,Test,Test,23829,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #228: mp2-1 ............................ Passed 4.43 sec; Start 245: ocepa1; 245/413 Test #126: dfccsdl1 ......................... Passed 4.23 sec; Start 374: dft-custom-hybrid; 246/413 Test #342: soscf-large ...................... Passed 14.81 sec; Start 159: dfrasscf-sp; 247/413 Test #139: dfmp2-grad4 ...................... Passed 4.03 sec; Start 272: opt4; 248/413 Test #129: dfccsdt1 ......................... Passed 3.54 sec; Start 99: cisd-sp; 249/413 Test #245: ocepa1 ........................... Passed 2.46 sec; Start 270: opt2-fd; 250/413 Test #288: props3 ........................... Passed 13.72 sec; Start 337: scf4; 251/413 Test #14: cbs-xtpl-energy .................. Passed 10.06 sec; Start 343: soscf-ref; 252/413 Test #370: scf-freq1 ........................ Passed 9.29 sec; Start 134: dfmp2-4; 253/413 Test #287: props2 ........................... Passed 12.06 sec; Start 89: cepa2; 254/413 Test #159: dfrasscf-sp ...................... Passed 6.55 sec; Start 163: dft-ghost; 255/413 Test #359: tu4-h2o-freq ..................... Passed 9.86 sec; Start 297: psithon1; 256/413 Test #367: cubeprop-esp ..................... Passed 11.53 sec; Start 3: casscf-fzc-sp; 257/413 Test #219: mints6 ........................... Passed 12.37 sec; Start 9: castup2; 258/413 Test #371: dft-jk ........................... Passed 9.89 sec; Start 369: scf-hess1; 259/413 Test #272: opt4 ............................. Passed 8.00 sec; Start 200: freq-isotope2; 260/413 Test #99: cisd-sp .......................... Passed 7.83 sec; Start 390: python-curve; 261/413 Test #374: dft-custom-hybrid ................ Passed 9.30 sec; Start 401: json-schema-1-energy; 262/413 Test #134: dfmp2-4 .......................... Passed 5.04 sec; Start 399: json-v11-energy; 263/413 Test #270: opt2-fd .......................... Passed 8.68 sec; Start 143: dfomp2-3; 264/413 Test #89: cepa2 ............................ Passed 3.44 sec; Start 15: cbs-xtpl-freq; 265/413 Test #343: soscf-ref ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:23871,Test,Test,23871,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability, #228: mp2-def2 ......................... Passed 422.59 sec; Start 42: cc26; 2/412 Test #156: dft-grad-lr3 ..................... Passed 456.14 sec; Start 307: pywrap-checkrun-uhf; 3/412 Test #36: cc2 .............................. Passed 642.46 sec; Start 77: cc7; 4/412 Test #40: cc24 ............................. Passed 651.87 sec; Start 241: ocepa-freq1; 5/412 Test #43: cc27 ............................. Passed 960.14 sec; Start 183: isapt1; 6/412 Test #39: cc23 ............................. Passed 1144.43 sec; Start 306: pywrap-checkrun-rohf; 7/412 Test #41: cc25 ............................. Passed 1174.58 sec; Start 25: cc13; 8/412 Test #146: dfomp2-grad3 ..................... Passed 1217.72 sec; Start 45: cc29; 9/412 Test #46: cc3 .............................. Passed 1255.05 sec; Start 29: cc13d; 10/412 Test #42: cc26 ............................. Passed 914.66 sec; Start 115: dcft8; 11/412 Test #183: isapt1 ........................... Passed 401.39 sec; Start 112: dcft5; 12/412 Test #395: python-vibanalysis ............... Passed 1424.43 sec; Start 18: cbs-xtpl-func; 13/412 Test #37: cc21 ............................. Passed 1446.40 sec; Start 182: fsapt-allterms; 14/412 Test #45: cc29 ............................. Passed 300.99 sec; Start 194: fd-freq-energy-large; 15/412 Test #104: dcft-grad1 ....................... Passed 1521.99 sec; Start 196: fd-freq-gradient-large; 16/412 Test #305: pywrap-checkrun-rhf .............. Passed 1605.76 sec; Start 279: opt13; 17/412 Test #301: pywrap-all ....................... Passed 1667.37 sec; Start 30: cc14; 18/412 Test #241: ocepa-freq1 ...................... Passed 1040.94 sec; Start 113: dcft6; 19/412 Test #29: cc13d ............................ Passed 491.27 sec; Start 374: dft-custom-mgga; 20/412 Test #25: cc13 ............................. Passed 606.44 sec; Start 71: cc52; 21/412 Test #196: fd-freq-gradient-large ........... Passed 319.51 sec; Start 282: opt-irc-2; 22/412 Test #112: dcft5 ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:1466,Test,Test,1466,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability, #22: cc11 ............................. Passed 3.75 sec; Start 23: cc12; 5/85 Test #23: cc12 ............................. Passed 4.34 sec; Start 24: cc13; 6/85 Test #24: cc13 ............................. Passed 19.85 sec; Start 26: cc13b; 7/85 Test #26: cc13b ............................ Passed 7.52 sec; Start 27: cc13c; 8/85 Test #27: cc13c ............................ Passed 11.29 sec; Start 28: cc13d; 9/85 Test #28: cc13d ............................ Passed 17.54 sec; Start 29: cc14; 10/85 Test #29: cc14 ............................. Passed 28.14 sec; Start 30: cc15; 11/85 Test #30: cc15 ............................. Passed 6.08 sec; Start 31: cc16; 12/85 Test #31: cc16 ............................. Passed 16.81 sec; Start 32: cc17; 13/85 Test #32: cc17 ............................. Passed 5.92 sec; Start 33: cc18; 14/85 Test #33: cc18 ............................. Passed 6.08 sec; Start 34: cc19; 15/85 Test #34: cc19 ............................. Passed 10.00 sec; Start 35: cc2; 16/85 Test #35: cc2 .............................. Passed 68.97 sec; Start 36: cc21; 17/85 Test #36: cc21 ............................. Passed 30.57 sec; Start 37: cc22; 18/85 Test #37: cc22 ............................. Passed 4.18 sec; Start 38: cc23; 19/85 Test #38: cc23 ............................. Passed 33.10 sec; Start 39: cc24; 20/85 Test #39: cc24 ............................. Passed 45.33 sec; Start 40: cc25; 21/85 Test #40: cc25 ............................. Passed 30.78 sec; Start 41: cc26; 22/85 Test #41: cc26 ............................. Passed 41.24 sec; Start 42: cc27; 23/85 Test #42: cc27 ............................. Passed 27.04 sec; Start 43: cc28; 24/85 Test #43: cc28 ............................. Passed 20.89 sec; Start 44: cc29; 25/85 Test #44: cc29 ............................. Passed 53.61 sec; Start 45: cc3; 26/85 Test #45: cc3 .............................. Passed 63.38 sec; Start 46: cc30; 27/85 Test #46: cc30 ............................. Passed 12.74 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:1351,Test,Test,1351,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability, #234: mp3-grad2 ........................ Passed 7.87 sec; Start 241: ocepa-grad1; 239/411 Test #236: mpn-bh ........................... Passed 5.55 sec; Start 242: ocepa-grad2; 240/411 Test #238: nbody-intermediates .............. Passed 28.11 sec; Start 243: ocepa1; 241/411 Test #241: ocepa-grad1 ...................... Passed 25.42 sec; Start 244: ocepa2; 242/411 Test #243: ocepa1 ........................... Passed 21.47 sec; Start 245: ocepa3; 243/411 Test #237: nbody-he-cluster ................. Passed 70.02 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 4.05 sec; Start 247: omp2-2; 245/411 Test #247: omp2-2 ........................... Passed 38.93 sec; Start 248: omp2-3; 246/411 Test #230: mp2-module ....................... Passed 128.49 sec; Start 249: omp2-4; 247/411 Test #245: ocepa3 ........................... Passed 70.91 sec; Start 250: omp2-5; 248/411 Test #242: ocepa-grad2 ...................... Passed 128.59 sec; Start 251: omp2-grad1; 249/411 Test #244: ocepa2 ........................... Passed 107.59 sec; Start 252: omp2-grad2; 250/411 Test #251: omp2-grad1 ....................... Passed 5.98 sec; Start 253: omp2p5-1; 251/411 Test #248: omp2-3 ........................... Passed 33.06 sec; Start 254: omp2p5-2; 252/411 Test #253: omp2p5-1 ......................... Passed 12.97 sec; Start 255: omp2p5-grad1; 253/411 Test #255: omp2p5-grad1 ..................... Passed 13.23 sec; Start 256: omp2p5-grad2; 254/411 Test #162: dft-grad-lr3 ..................... Passed 454.17 sec; Start 257: omp3-1; 255/411 Test #257: omp3-1 ........................... Passed 10.74 sec; Start 258: omp3-2; 256/411 Test #254: omp2p5-2 ......................... Passed 39.74 sec; Start 259: omp3-3; 257/411 Test #252: omp2-grad2 ....................... Passed 62.46 sec; Start 260: omp3-4; 258/411 Test #258: omp3-2 ........................... Passed 44.86 sec; Start 261: omp3-5; 259/411 Test #249: omp2-4 ........................... Passed 118.41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:23021,Test,Test,23021,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability, #234: mp3-grad2 ........................ Passed 9.93 sec; Start 362: x2c3; 323/411 Test #284: props1 ........................... Passed 7.76 sec; Start 228: mp2-grad1; 324/411 Test #399: json-schema-1-energy ............. Passed 5.52 sec; Start 271: opt5; 325/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.49 sec; Start 233: mp3-grad1; 326/411 Test #213: mints2 ........................... Passed 2.95 sec; Start 262: omp3-grad1; 327/411 Test #85: cepa0-grad1 ...................... Passed 9.67 sec; Start 121: dfccdl1; 328/411 Test #328: scf-upcast-custom-basis .......... Passed 2.52 sec; Start 356: scf-response1; 329/411 Test #190: fci-coverage ..................... Passed 13.09 sec; Start 361: x2c2; 330/411 Test #327: scf-guess-read1 .................. Passed 2.57 sec; Start 246: omp2-1; 331/411 Test #397: json-v11-energy .................. Passed 3.24 sec; Start 255: omp2p5-grad1; 332/411 Test #225: mom .............................. Passed 3.92 sec; Start 332: scf-occ; 333/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 345: dfep2-2; 334/411 Test #362: x2c3 ............................. Passed 2.55 sec; Start 229: mp2-grad2; 335/411 Test #136: dfmp2-grad3 ...................... Passed 4.79 sec; Start 407: skeletondfmp2; 336/411 Test #253: omp2p5-1 ......................... Passed 9.34 sec; Start 288: psimrcc-ccsd_t-2; 337/411 Test #228: mp2-grad1 ........................ Passed 2.44 sec; Start 289: psimrcc-ccsd_t-3; 338/411 Test #233: mp3-grad1 ........................ Passed 2.31 sec; Start 363: zaptn-nh2; 339/411 Test #271: opt5 ............................. Passed 2.66 sec; Start 203: frac; 340/411 Test #356: scf-response1 .................... Passed 2.19 sec; Start 381: psi4numpy-dfmp2; 341/411 Test #121: dfccdl1 .......................... Passed 2.89 sec; Start 8: castup1; 342/411 Test #361: x2c2 ............................. Passed 2.66 sec; Start 287: psimrcc-ccsd_t-1; 343/411 Test #332: scf-occ ..........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:31244,Test,Test,31244,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #236: mp2-property ..................... Passed 4.03 sec; Start 241: ocepa-freq1; 231/412 Test #240: numpy-array-interface ............ Passed 1.00 sec; Start 242: ocepa-grad1; 232/412 Test #237: mpn-bh ........................... Passed 4.64 sec; Start 243: ocepa-grad2; 233/412 Test #242: ocepa-grad1 ...................... Passed 11.23 sec; Start 244: ocepa1; 234/412 Test #244: ocepa1 ........................... Passed 5.71 sec; Start 245: ocepa2; 235/412 Test #239: nbody-intermediates .............. Passed 18.78 sec; Start 246: ocepa3; 236/412 Test #205: frac-ip-fitting .................. Passed 70.79 sec; Start 247: omp2-1; 237/412 Test #220: mints-benchmark .................. Passed 46.59 sec; Start 248: omp2-2; 238/412 Test #247: omp2-1 ........................... Passed 4.70 sec; Start 249: omp2-3; 239/412 Test #184: isapt2 ........................... Passed 124.89 sec; Start 250: omp2-4; 240/412 Test #238: nbody-he-cluster ................. Passed 44.71 sec; Start 251: omp2-5; 241/412 Test #248: omp2-2 ........................... Passed 17.52 sec; Start 252: omp2-grad1; 242/412 Test #252: omp2-grad1 ....................... Passed 5.77 sec; Start 253: omp2-grad2; 243/412 Test #249: omp2-3 ........................... Passed 21.31 sec; Start 254: omp2p5-1; 244/412 Test #254: omp2p5-1 ......................... Passed 6.32 sec; Start 255: omp2p5-2; 245/412 Test #246: ocepa3 ........................... Passed 39.21 sec; Start 256: omp2p5-grad1; 246/412 Test #243: ocepa-grad2 ...................... Passed 60.31 sec; Start 257: omp2p5-grad2; 247/412 Test #256: omp2p5-grad1 ..................... Passed 9.20 sec; Start 258: omp3-1; 248/412 Test #231: mp2-module ....................... Passed 76.66 sec; Start 259: omp3-2; 249/412 Test #258: omp3-1 ........................... Passed 4.81 sec; Start 260: omp3-3; 250/412 Test #255: omp2p5-2 ......................... Passed 18.39 sec; Start 261: omp3-4; 251/412 Test #253: omp2-grad2 ....................... Passed 31.07 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:22423,Test,Test,22423,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #236: mpn-bh ........................... Passed 4.34 sec; Start 242: ocepa-grad2; 232/411 Test #241: ocepa-grad1 ...................... Passed 11.81 sec; Start 243: ocepa1; 233/411 Test #238: nbody-intermediates .............. Passed 18.27 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 5.53 sec; Start 245: ocepa3; 235/411 Test #219: mints-benchmark .................. Passed 41.71 sec; Start 246: omp2-1; 236/411 Test #110: dcft4 ............................ Passed 423.92 sec; Start 247: omp2-2; 237/411 Test #246: omp2-1 ........................... Passed 4.28 sec; Start 248: omp2-3; 238/411 Test #204: frac-ip-fitting .................. Passed 69.19 sec; Start 249: omp2-4; 239/411 Test #247: omp2-2 ........................... Passed 16.82 sec; Start 250: omp2-5; 240/411 Test #237: nbody-he-cluster ................. Passed 43.38 sec; Start 251: omp2-grad1; 241/411 Test #248: omp2-3 ........................... Passed 20.97 sec; Start 252: omp2-grad2; 242/411 Test #251: omp2-grad1 ....................... Passed 4.42 sec; Start 253: omp2p5-1; 243/411 Test #253: omp2p5-1 ......................... Passed 3.50 sec; Start 254: omp2p5-2; 244/411 Test #183: isapt2 ........................... Passed 136.16 sec; Start 255: omp2p5-grad1; 245/411 Test #245: ocepa3 ........................... Passed 42.61 sec; Start 256: omp2p5-grad2; 246/411 Test #255: omp2p5-grad1 ..................... Passed 11.33 sec; Start 257: omp3-1; 247/411 Test #242: ocepa-grad2 ...................... Passed 64.29 sec; Start 258: omp3-2; 248/411 Test #257: omp3-1 ........................... Passed 7.53 sec; Start 259: omp3-3; 249/411 Test #230: mp2-module ....................... Passed 81.59 sec; Start 260: omp3-4; 250/411 Test #254: omp2p5-2 ......................... Passed 25.66 sec; Start 261: omp3-5; 251/411 Test #252: omp2-grad2 ....................... Passed 40.84 sec; Start 262: omp3-grad1; 252/411 Test #262: omp3-grad1 ....................... Passed 8.58 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:22536,Test,Test,22536,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability, #239: nbody-intermediates .............. Passed 22.97 sec; Start 5: casscf-sa-sp; 211/412 Test #322: sapt-dft-api ..................... Passed 18.13 sec; Start 325: sapt8; 212/412 Test #297: psithon2 ......................... Passed 20.72 sec; Start 219: mints8; 213/412 Test #170: dft-vv10 ......................... Passed 23.61 sec; Start 90: cepa3; 214/412 Test #151: dfomp2p5-1 ....................... Passed 32.23 sec; Start 341: soscf-large; 215/412 Test #24: cc12 ............................. Passed 30.79 sec; Start 367: dft-smoke; 216/412 Test #276: opt9 ............................. Passed 23.44 sec; Start 339: scf7; 217/412 Test #302: pywrap-basis ..................... Passed 16.95 sec; Start 165: dft-grad1; 218/412 Test #139: dfmp2-grad5 ...................... Passed 23.97 sec; Start 91: cepa1; 219/412 Test #154: dft-grad-lr1 ..................... Passed 17.34 sec; Start 286: props2; 220/412 Test #166: dft-grad2 ........................ Passed 17.73 sec; Start 351: dft-custom; 221/412 Test #5: casscf-sa-sp ..................... Passed 15.81 sec; Start 287: props3; 222/412 Test #90: cepa3 ............................ Passed 13.41 sec; Start 198: freq-isotope1; 223/412 Test #325: sapt8 ............................ Passed 16.64 sec; Start 267: opt1-fd; 224/412 Test #106: dcft-grad3 ....................... Passed 19.65 sec; Start 218: mints6; 225/412 Test #255: omp2p5-2 ......................... Passed 19.89 sec; Start 14: cbs-xtpl-energy; 226/412 Test #91: cepa1 ............................ Passed 10.97 sec; Start 123: dfccd-grad1; 227/412 Test #219: mints8 ........................... Passed 16.12 sec; Start 369: scf-freq1; 228/412 Test #341: soscf-large ...................... Passed 15.54 sec; Start 358: tu4-h2o-freq; 229/412 Test #339: scf7 ............................. Passed 15.00 sec; Start 242: ocepa-grad1; 230/412 Test #165: dft-grad1 ........................ Passed 15.13 sec; Start 342: soscf-ref; 231/412 Test #367: dft-smoke ........................ Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:20755,Test,Test,20755,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability, #240: numpy-array-interface ............ Passed 1.00 sec; Start 242: ocepa-grad1; 232/412 Test #237: mpn-bh ........................... Passed 4.64 sec; Start 243: ocepa-grad2; 233/412 Test #242: ocepa-grad1 ...................... Passed 11.23 sec; Start 244: ocepa1; 234/412 Test #244: ocepa1 ........................... Passed 5.71 sec; Start 245: ocepa2; 235/412 Test #239: nbody-intermediates .............. Passed 18.78 sec; Start 246: ocepa3; 236/412 Test #205: frac-ip-fitting .................. Passed 70.79 sec; Start 247: omp2-1; 237/412 Test #220: mints-benchmark .................. Passed 46.59 sec; Start 248: omp2-2; 238/412 Test #247: omp2-1 ........................... Passed 4.70 sec; Start 249: omp2-3; 239/412 Test #184: isapt2 ........................... Passed 124.89 sec; Start 250: omp2-4; 240/412 Test #238: nbody-he-cluster ................. Passed 44.71 sec; Start 251: omp2-5; 241/412 Test #248: omp2-2 ........................... Passed 17.52 sec; Start 252: omp2-grad1; 242/412 Test #252: omp2-grad1 ....................... Passed 5.77 sec; Start 253: omp2-grad2; 243/412 Test #249: omp2-3 ........................... Passed 21.31 sec; Start 254: omp2p5-1; 244/412 Test #254: omp2p5-1 ......................... Passed 6.32 sec; Start 255: omp2p5-2; 245/412 Test #246: ocepa3 ........................... Passed 39.21 sec; Start 256: omp2p5-grad1; 246/412 Test #243: ocepa-grad2 ...................... Passed 60.31 sec; Start 257: omp2p5-grad2; 247/412 Test #256: omp2p5-grad1 ..................... Passed 9.20 sec; Start 258: omp3-1; 248/412 Test #231: mp2-module ....................... Passed 76.66 sec; Start 259: omp3-2; 249/412 Test #258: omp3-1 ........................... Passed 4.81 sec; Start 260: omp3-3; 250/412 Test #255: omp2p5-2 ......................... Passed 18.39 sec; Start 261: omp3-4; 251/412 Test #253: omp2-grad2 ....................... Passed 31.07 sec; Start 262: omp3-5; 252/412 Test #245: ocepa2 ........................... Passed 63.94 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:22518,Test,Test,22518,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #242: ocepa-grad1 ...................... Passed 14.89 sec; Start 10: castup3; 244/412 Test #249: omp2-3 ........................... Passed 23.27 sec; Start 227: mp2-1; 245/412 Test #144: dfomp2-grad1 ..................... Passed 16.20 sec; Start 99: cisd-sp; 246/412 Test #138: dfmp2-grad4 ...................... Passed 6.36 sec; Start 314: rasscf-sp; 247/412 Test #14: cbs-xtpl-energy .................. Passed 13.29 sec; Start 9: castup2; 248/412 Test #358: tu4-h2o-freq ..................... Passed 15.20 sec; Start 271: opt4; 249/412 Test #394: python-3-index-transforms ........ Passed 10.40 sec; Start 133: dfmp2-4; 250/412 Test #158: dfrasscf-sp ...................... Passed 8.78 sec; Start 136: dfmp2-grad2; 251/412 Test #89: cepa2 ............................ Passed 12.51 sec; Start 15: cbs-xtpl-freq; 252/412 Test #140: dfomp2-1 ......................... Passed 10.48 sec; Start 102: cubeprop; 253/412 Test #151: dfomp2p5-1 ....................... Passed 24.75 sec; Start 366: cubeprop-esp; 254/412 Test #227: mp2-1 ............................ Passed 10.58 sec; Start 4: casscf-semi; 255/412 Test #10: castup3 .......................... Passed 11.31 sec; Start 87: cepa0-grad2; 256/412 Test #54: cc37 ............................. Passed 17.38 sec; Start 125: dfccsdl1; 257/412 Test #38: cc22 ............................. Passed 24.75 sec; Start 368: scf-hess1; 258/412 Test #99: cisd-sp .......................... Passed 10.88 sec; Start 256: omp2p5-grad1; 259/412 Test #271: opt4 ............................. Passed 9.26 sec; Start 296: psithon1; 260/412 Test #9: castup2 .......................... Passed 11.25 sec; Start 181: fsapt-terms; 261/412 Test #136: dfmp2-grad2 ...................... Passed 7.61 sec; Start 244: ocepa1; 262/412 Test #133: dfmp2-4 .......................... Passed 8.97 sec; Start 263: omp3-grad1; 263/412 Test #51: cc34 ............................. Passed 19.29 sec; Start 162: dft-ghost; 264/412 Test #15: cbs-xtpl-freq .................... Passed 8.51 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:23822,Test,Test,23822,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #244: ocepa1 ........................... Passed 8.89 sec; Start 121: dfccd1; 300/412 Test #247: omp2-1 ........................... Passed 4.92 sec; Start 377: pywrap-align; 301/412 Test #237: mpn-bh ........................... Passed 5.38 sec; Start 232: mp2p5-grad1; 302/412 Test #142: dfomp2-3 ......................... Passed 8.00 sec; Start 180: fsapt2; 303/412 Test #120: dfcasscf-sp ...................... Passed 3.66 sec; Start 285: props1; 304/412 Test #252: omp2-grad1 ....................... Passed 6.43 sec; Start 311: rasci-c2-active; 305/412 Test #230: mp2-grad2 ........................ Passed 3.93 sec; Start 340: scf-property; 306/412 Test #284: opt-freeze-coords ................ Passed 6.63 sec; Start 332: scf1; 307/412 Test #172: dft2 ............................. Passed 6.11 sec; Start 204: frac; 308/412 Test #94: cisd-h2o+-0 ...................... Passed 5.56 sec; Start 122: dfccdl1; 309/412 Test #371: scf-coverage ..................... Passed 9.20 sec; Start 272: opt5; 310/412 Test #229: mp2-grad1 ........................ Passed 4.37 sec; Start 235: mp3-grad2; 311/412 Test #95: cisd-h2o+-1 ...................... Passed 5.16 sec; Start 226: mom; 312/412 Test #121: dfccd1 ........................... Passed 5.30 sec; Start 356: tu3-h2o-opt; 313/412 Test #232: mp2p5-grad1 ...................... Passed 5.44 sec; Start 378: pywrap-align-chiral; 314/412 Test #180: fsapt2 ........................... Passed 5.69 sec; Start 266: opt1; 315/412 Test #377: pywrap-align ..................... Passed 6.95 sec; Start 344: stability1; 316/412 Test #332: scf1 ............................. Passed 5.49 sec; Start 400: json-schema-1-energy; 317/412 Test #204: frac ............................. Passed 5.38 sec; Start 295: psimrcc-sp1; 318/412 Test #285: props1 ........................... Passed 6.21 sec; Start 192: fcidump; 319/412 Test #340: scf-property ..................... Passed 6.13 sec; Start 345: dfep2-1; 320/412 Test #122: dfccdl1 .......................... Passed 4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:29057,Test,Test,29057,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #245: ocepa3 ........................... Passed 58.12 sec; Start 307: pywrap-db1; 143/411 Test #150: dfomp2p5-1 ....................... Passed 36.29 sec; Start 48: cc32; 144/411 Test #37: cc22 ............................. Passed 49.20 sec; Start 146: dfomp3-1; 145/411 Test #23: cc12 ............................. Passed 43.83 sec; Start 312: rasci-ne; 146/411 Test #50: cc34 ............................. Passed 26.37 sec; Start 133: dfmp2-ecp; 147/411 Test #152: dfomp2p5-grad1 ................... Passed 36.32 sec; Start 52: cc36; 148/411 Test #2: adc2 ............................. Passed 33.36 sec; Start 16: cbs-xtpl-gradient; 149/411 Test #219: mints-benchmark .................. Passed 38.75 sec; Start 109: dcft3; 150/411 Test #92: ci-multi ......................... Passed 48.56 sec; Start 143: dfomp2-grad1; 151/411 Test #48: cc32 ............................. Passed 21.71 sec; Start 323: sapt7; 152/411 Test #106: dcft-grad4 ....................... Passed 37.45 sec; Start 53: cc37; 153/411 Test #131: dfmp2-3 .......................... Passed 40.05 sec; Start 200: fnocc2; 154/411 Test #143: dfomp2-grad1 ..................... Passed 9.64 sec; Start 206: ghosts; 155/411 Test #273: opt7 ............................. Passed 50.60 sec; Start 336: scf5; 156/411 Test #146: dfomp3-1 ......................... Passed 18.00 sec; Start 129: dfmp2-1; 157/411 Test #52: cc36 ............................. Passed 14.24 sec; Start 360: x2c1; 158/411 Test #109: dcft3 ............................ Passed 13.16 sec; Start 252: omp2-grad2; 159/411 Test #299: pywrap-alias ..................... Passed 75.37 sec; Start 337: scf6; 160/411 Test #53: cc37 ............................. Passed 9.51 sec; Start 374: dft-custom-gga; 161/411 Test #16: cbs-xtpl-gradient ................ Passed 21.53 sec; Start 342: soscf-dft; 162/411 Test #307: pywrap-db1 ....................... Passed 42.38 sec; Start 196: fd-gradient; 163/411 Test #312: rasci-ne ......................... Passed 36.76 sec; Start 274:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:14381,Test,Test,14381,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #247: omp2-2 ........................... Passed 12.87 sec; Start 5: casscf-sa-sp; 217/411 Test #340: soscf-large ...................... Passed 13.80 sec; Start 133: dfmp2-ecp; 218/411 Test #286: props3 ........................... Passed 13.58 sec; Start 7: casscf-sp; 219/411 Test #164: dft-grad1 ........................ Passed 14.37 sec; Start 23: cc12; 220/411 Test #105: dcft-grad3 ....................... Passed 16.71 sec; Start 217: mints6; 221/411 Test #366: dft-smoke ........................ Passed 17.02 sec; Start 143: dfomp2-grad1; 222/411 Test #176: extern1 .......................... Passed 17.35 sec; Start 226: mp2-1; 223/411 Test #133: dfmp2-ecp ........................ Passed 12.76 sec; Start 338: scf7; 224/411 Test #5: casscf-sa-sp ..................... Passed 14.84 sec; Start 368: scf-freq1; 225/411 Test #217: mints6 ........................... Passed 11.92 sec; Start 285: props2; 226/411 Test #226: mp2-1 ............................ Passed 8.62 sec; Start 98: cisd-sp; 227/411 Test #143: dfomp2-grad1 ..................... Passed 9.47 sec; Start 201: fnocc3; 228/411 Test #7: casscf-sp ........................ Passed 18.41 sec; Start 14: cbs-xtpl-energy; 229/411 Test #23: cc12 ............................. Passed 18.39 sec; Start 139: dfomp2-1; 230/411 Test #368: scf-freq1 ........................ Passed 11.13 sec; Start 122: dfccd-grad1; 231/411 Test #338: scf7 ............................. Passed 13.09 sec; Start 268: opt2-fd; 232/411 Test #98: cisd-sp .......................... Passed 9.44 sec; Start 369: dft-jk; 233/411 Test #139: dfomp2-1 ......................... Passed 8.89 sec; Start 127: dfccsdt1; 234/411 Test #285: props2 ........................... Passed 14.75 sec; Start 372: dft-custom-hybrid; 235/411 Test #14: cbs-xtpl-energy .................. Passed 14.69 sec; Start 101: cubeprop; 236/411 Test #201: fnocc3 ........................... Passed 17.46 sec; Start 393: python-3-index-transforms; 237/411 Test #268: opt2-fd ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:21136,Test,Test,21136,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability, #250: omp2-3 ........................... Passed 24.14 sec; Start 84: cdomp2-1; 174/413 Test #376: dft-custom-gga ................... Passed 33.65 sec; Start 72: cc53; 175/413 Test #107: dcft-grad3 ....................... Passed 20.04 sec; Start 1: adc1; 176/413 Test #165: dft-freq ......................... Passed 26.06 sec; Start 208: ghosts; 177/413 Test #140: dfmp2-grad5 ...................... Passed 24.69 sec; Start 203: fnocc3; 178/413 Test #66: cc48 ............................. Passed 68.80 sec; Start 175: dft-omega; 179/413 Test #377: pywrap-bfs ....................... Passed 24.36 sec; Start 328: scf-ecp; 180/413 Test #16: cbs-xtpl-gradient ................ Passed 38.52 sec; Start 394: python-cc54; 181/413 Test #84: cdomp2-1 ......................... Passed 18.22 sec; Start 393: python-mints2; 182/413 Test #204: fnocc4 ........................... Passed 31.42 sec; Start 256: omp2p5-2; 183/413 Test #393: python-mints2 .................... Passed 3.14 sec; Start 397: python-mints13; 184/413 Test #274: opt6 ............................. Passed 28.70 sec; Start 24: cc12; 185/413 Test #397: python-mints13 ................... Passed 2.00 sec; Start 201: fnocc1; 186/413 Test #1: adc1 ............................. Passed 26.39 sec; Start 399: json-v11-energy; 187/413 Test #399: json-v11-energy .................. Passed 5.20 sec; Start 381: cc-module; 188/413 Test #130: dfccsdat1 ........................ Passed 40.48 sec; Start 392: python-mints9; 189/413 Test #392: python-mints9 .................... Passed 2.37 sec; Start 400: json-v11-gradient; 190/413 Test #400: json-v11-gradient ................ Passed 2.12 sec; Start 240: nbody-intermediates; 191/413 Test #208: ghosts ........................... Passed 33.10 sec; Start 145: dfomp2-grad1; 192/413 Test #175: dft-omega ........................ Passed 28.98 sec; Start 390: python-curve; 193/413 Test #203: fnocc3 ........................... Passed 33.21 sec; Start 398: python-memdfjk; 194/413 Test #398: python-memdf,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:17321,Test,Test,17321,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability, #250: omp2-5 ........................... Passed 135.32 sec; Start 34: cc19; 109/411 Test #147: dfomp3-2 ......................... Passed 121.15 sec; Start 73: cc55; 110/411 Test #82: cc9a ............................. Passed 101.46 sec; Start 261: omp3-5; 111/411 Test #249: omp2-4 ........................... Passed 143.33 sec; Start 312: rasci-ne; 112/411 Test #26: cc13b ............................ Passed 169.08 sec; Start 63: cc46; 113/411 Test #77: cc8 .............................. Passed 121.13 sec; Start 206: ghosts; 114/411 Test #312: rasci-ne ......................... Passed 36.29 sec; Start 256: omp2p5-grad2; 115/411 Test #260: omp3-4 ........................... Passed 172.67 sec; Start 237: nbody-he-cluster; 116/411 Test #206: ghosts ........................... Passed 37.33 sec; Start 64: cc47; 117/411 Test #34: cc19 ............................. Passed 105.53 sec; Start 151: dfomp2p5-2; 118/411 Test #73: cc55 ............................. Passed 109.40 sec; Start 55: cc39; 119/411 Test #63: cc46 ............................. Passed 85.23 sec; Start 323: sapt7; 120/411 Test #237: nbody-he-cluster ................. Passed 65.52 sec; Start 67: cc4a; 121/411 Test #323: sapt7 ............................ Passed 32.27 sec; Start 129: dfmp2-1; 122/411 Test #64: cc47 ............................. Passed 86.29 sec; Start 276: opt11; 123/411 Test #261: omp3-5 ........................... Passed 157.82 sec; Start 106: dcft-grad4; 124/411 Test #256: omp2p5-grad2 ..................... Passed 106.36 sec; Start 78: cc8a; 125/411 Test #55: cc39 ............................. Passed 61.61 sec; Start 273: opt7; 126/411 Test #129: dfmp2-1 .......................... Passed 33.05 sec; Start 80: cc8c; 127/411 Test #151: dfomp2p5-2 ....................... Passed 82.30 sec; Start 360: x2c1; 128/411 Test #67: cc4a ............................. Passed 45.28 sec; Start 337: scf6; 129/411 Test #106: dcft-grad4 ....................... Passed 39.15 sec; Start 1: adc1; 130/411 Test #276,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:11166,Test,Test,11166,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #250: omp2-5 ........................... Passed 295.87 sec; Start 357: tu4-h2o-freq; 182/411 Test #115: dcft9 ............................ Passed 349.55 sec; Start 105: dcft-grad3; 183/411 Test #104: dcft-grad2 ....................... Passed 336.22 sec; Start 180: fsapt-terms; 184/411 Test #64: cc47 ............................. Passed 152.97 sec; Start 149: dfomp3-grad2; 185/411 Test #180: fsapt-terms ...................... Passed 9.14 sec; Start 270: opt4; 186/411 Test #357: tu4-h2o-freq ..................... Passed 23.02 sec; Start 56: cc4; 187/411 Test #270: opt4 ............................. Passed 13.33 sec; Start 55: cc39; 188/411 Test #105: dcft-grad3 ....................... Passed 34.04 sec; Start 49: cc33; 189/411 Test #33: cc18 ............................. Passed 148.37 sec; Start 7: casscf-sp; 190/411 Test #249: omp2-4 ........................... Passed 259.98 sec; Start 98: cisd-sp; 191/411 Test #51: cc35 ............................. Passed 111.53 sec; Start 20: cc1; 192/411 Test #98: cisd-sp .......................... Passed 15.83 sec; Start 197: freq-isotope1; 193/411 Test #197: freq-isotope1 .................... Passed 31.86 sec; Start 63: cc46; 194/411 Test #7: casscf-sp ........................ Passed 89.41 sec; Start 32: cc17; 195/411 Test #49: cc33 ............................. Passed 111.73 sec; Start 258: omp3-2; 196/411 Test #56: cc4 .............................. Passed 144.03 sec; Start 71: cc53; 197/411 Test #55: cc39 ............................. Passed 166.43 sec; Start 144: dfomp2-grad2; 198/411 Test #258: omp3-2 ........................... Passed 74.77 sec; Start 367: scf-hess1; 199/411 Test #367: scf-hess1 ........................ Passed 16.23 sec; Start 184: fci-dipole; 200/411 Test #32: cc17 ............................. Passed 113.71 sec; Start 335: scf4; 201/411 Test #153: dfomp2p5-grad2 ................... Passed 316.26 sec; Start 186: fci-h2o-2; 202/411 Test #184: fci-dipole ....................... Passed 10.91 sec; Start 30: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:18049,Test,Test,18049,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #252: omp2-grad2 ....................... Passed 5.58 sec; Start 323: sapt7; 152/404 Test #92: ci-multi ......................... Passed 7.78 sec; Start 148: dfomp3-grad1; 153/404 Test #348: sapt-compare ..................... Passed 20.49 sec; Start 166: dft-psivar; 154/404 Test #282: opt-irc-3 ........................ Passed 14.20 sec; Start 159: dft-grad-meta; 155/404 Test #148: dfomp3-grad1 ..................... Passed 3.61 sec; Start 342: soscf-dft; 156/404 Test #106: dcft-grad4 ....................... Passed 14.52 sec; Start 49: cc33; 157/404 Test #375: pywrap-bfs ....................... Passed 25.33 sec; Start 72: cc54; 158/404 Test #172: dft3 ............................. Passed 18.93 sec; Start 150: dfomp2p5-1; 159/404 Test #267: opt2 ............................. Passed 15.94 sec; Start 296: psithon2; 160/404 Test #150: dfomp2p5-1 ....................... Passed 2.94 sec; Start 163: dft-freq; 161/404 Test #49: cc33 ............................. Passed 5.98 sec; Start 272: opt6; 162/404 Test #72: cc54 ............................. Passed 5.02 sec; Start 189: fci-tdm-2; 163/404 Test #323: sapt7 ............................ Passed 18.91 sec; Start 32: cc17; 164/404 Test #166: dft-psivar ....................... Passed 17.69 sec; Start 138: dfmp2-grad5; 165/404 Test #296: psithon2 ......................... Passed 10.77 sec; Start 20: cc1; 166/404 Test #32: cc17 ............................. Passed 6.82 sec; Start 207: gibbs; 167/404 Test #159: dft-grad-meta .................... Passed 20.03 sec; Start 146: dfomp3-1; 168/404 Test #342: soscf-dft ........................ Passed 18.93 sec; Start 248: omp2-3; 169/404 Test #272: opt6 ............................. Passed 11.40 sec; Start 131: dfmp2-3; 170/404 Test #146: dfomp3-1 ......................... Passed 4.53 sec; Start 173: dft-omega; 171/404 Test #163: dft-freq ......................... Passed 17.07 sec; Start 177: extern2; 172/404 Test #20: cc1 .............................. Passed 10.62 sec; Start 109: dcft3;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:14990,Test,Test,14990,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #254: omp2p5-2 ......................... Passed 12.32 sec; Start 260: omp3-4; 250/411 Test #103: dcft-grad1 ....................... Passed 316.29 sec; Start 261: omp3-5; 251/411 Test #252: omp2-grad2 ....................... Passed 18.49 sec; Start 262: omp3-grad1; 252/411 Test #244: ocepa2 ........................... Passed 43.29 sec; Start 263: omp3-grad2; 253/411 Test #262: omp3-grad1 ....................... Passed 3.85 sec; Start 264: opt-lindep-change; 254/411 Test #230: mp2-module ....................... Passed 59.39 sec; Start 265: opt1; 255/411 Test #258: omp3-2 ........................... Passed 15.76 sec; Start 266: opt1-fd; 256/411 Test #265: opt1 ............................. Passed 3.61 sec; Start 267: opt2; 257/411 Test #249: omp2-4 ........................... Passed 36.26 sec; Start 268: opt2-fd; 258/411 Test #250: omp2-5 ........................... Passed 37.80 sec; Start 269: opt3; 259/411 Test #266: opt1-fd .......................... Passed 8.15 sec; Start 270: opt4; 260/411 Test #269: opt3 ............................. Passed 3.58 sec; Start 271: opt5; 261/411 Test #256: omp2p5-grad2 ..................... Passed 29.86 sec; Start 272: opt6; 262/411 Test #271: opt5 ............................. Passed 3.52 sec; Start 273: opt7; 263/411 Test #268: opt2-fd .......................... Passed 10.43 sec; Start 274: opt8; 264/411 Test #183: isapt2 ........................... Passed 135.94 sec; Start 275: opt9; 265/411 Test #270: opt4 ............................. Passed 9.47 sec; Start 276: opt11; 266/411 Test #267: opt2 ............................. Passed 18.54 sec; Start 277: opt12; 267/411 Test #264: opt-lindep-change ................ Passed 26.08 sec; Start 279: opt14; 268/411 Test #263: omp3-grad2 ....................... Passed 32.21 sec; Start 280: opt-irc-1; 269/411 Test #260: omp3-4 ........................... Passed 34.72 sec; Start 281: opt-irc-2; 270/411 Test #261: omp3-5 ........................... Passed 34.25 sec; Start 282: opt-irc-3; 271/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:24143,Test,Test,24143,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #255: omp2p5-2 ......................... Passed 18.39 sec; Start 261: omp3-4; 251/412 Test #253: omp2-grad2 ....................... Passed 31.07 sec; Start 262: omp3-5; 252/412 Test #245: ocepa2 ........................... Passed 63.94 sec; Start 263: omp3-grad1; 253/412 Test #259: omp3-2 ........................... Passed 21.31 sec; Start 264: omp3-grad2; 254/412 Test #263: omp3-grad1 ....................... Passed 6.60 sec; Start 265: opt-lindep-change; 255/412 Test #251: omp2-5 ........................... Passed 63.46 sec; Start 266: opt1; 256/412 Test #266: opt1 ............................. Passed 5.06 sec; Start 267: opt1-fd; 257/412 Test #250: omp2-4 ........................... Passed 73.74 sec; Start 268: opt2; 258/412 Test #265: opt-lindep-change ................ Passed 29.03 sec; Start 269: opt2-fd; 259/412 Test #257: omp2p5-grad2 ..................... Passed 55.95 sec; Start 270: opt3; 260/412 Test #270: opt3 ............................. Passed 6.31 sec; Start 271: opt4; 261/412 Test #267: opt1-fd .......................... Passed 12.63 sec; Start 272: opt5; 262/412 Test #272: opt5 ............................. Passed 4.42 sec; Start 273: opt6; 263/412 Test #269: opt2-fd .......................... Passed 12.16 sec; Start 274: opt7; 264/412 Test #271: opt4 ............................. Passed 10.71 sec; Start 275: opt8; 265/412 Test #268: opt2 ............................. Passed 25.24 sec; Start 276: opt9; 266/412 Test #261: omp3-4 ........................... Passed 76.60 sec; Start 277: opt11; 267/412 Test #273: opt6 ............................. Passed 23.02 sec; Start 278: opt12; 268/412 Test #264: omp3-grad2 ....................... Passed 72.44 sec; Start 280: opt14; 269/412 Test #146: dfomp2-grad3 ..................... Passed 392.11 sec; Start 281: opt-irc-1; 270/412 Test #260: omp3-3 ........................... Passed 89.67 sec; Start 282: opt-irc-2; 271/412 Test #276: opt9 ............................. Passed 20.44 sec; Start 283: opt-irc-3; 272/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:24273,Test,Test,24273,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #258: omp3-2 ........................... Passed 44.86 sec; Start 261: omp3-5; 259/411 Test #249: omp2-4 ........................... Passed 118.41 sec; Start 262: omp3-grad1; 260/411 Test #250: omp2-5 ........................... Passed 114.58 sec; Start 263: omp3-grad2; 261/411 Test #262: omp3-grad1 ....................... Passed 14.67 sec; Start 264: opt-lindep-change; 262/411 Test #256: omp2p5-grad2 ..................... Passed 98.26 sec; Start 265: opt1; 263/411 Test #265: opt1 ............................. Passed 9.15 sec; Start 266: opt1-fd; 264/411 Test #264: opt-lindep-change ................ Passed 26.81 sec; Start 267: opt2; 265/411 Test #266: opt1-fd .......................... Passed 19.28 sec; Start 268: opt2-fd; 266/411 Test #267: opt2 ............................. Passed 26.76 sec; Start 269: opt3; 267/411 Test #269: opt3 ............................. Passed 6.24 sec; Start 270: opt4; 268/411 Test #268: opt2-fd .......................... Passed 14.05 sec; Start 271: opt5; 269/411 Test #271: opt5 ............................. Passed 5.38 sec; Start 272: opt6; 270/411 Test #270: opt4 ............................. Passed 10.22 sec; Start 273: opt7; 271/411 Test #259: omp3-3 ........................... Passed 131.33 sec; Start 274: opt8; 272/411 Test #272: opt6 ............................. Passed 31.19 sec; Start 275: opt9; 273/411 Test #260: omp3-4 ........................... Passed 146.57 sec; Start 276: opt11; 274/411 Test #263: omp3-grad2 ....................... Passed 115.54 sec; Start 277: opt12; 275/411 Test #274: opt8 ............................. Passed 40.84 sec; Start 279: opt14; 276/411 Test #261: omp3-5 ........................... Passed 137.13 sec; Start 280: opt-irc-1; 277/411 Test #275: opt9 ............................. Passed 20.24 sec; Start 281: opt-irc-2; 278/411 Test #273: opt7 ............................. Passed 57.59 sec; Start 282: opt-irc-3; 279/411 Test #277: opt12 ............................ Passed 23.47 sec; Start 283: opt-fr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:24873,Test,Test,24873,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability, #25: cc13a ............................ Passed 484.89 sec; Start 131: dfmp2-3; 140/411 Test #348: sapt-compare ..................... Passed 47.43 sec; Start 50: cc34; 141/411 Test #49: cc33 ............................. Passed 43.67 sec; Start 106: dcft-grad4; 142/411 Test #245: ocepa3 ........................... Passed 58.12 sec; Start 307: pywrap-db1; 143/411 Test #150: dfomp2p5-1 ....................... Passed 36.29 sec; Start 48: cc32; 144/411 Test #37: cc22 ............................. Passed 49.20 sec; Start 146: dfomp3-1; 145/411 Test #23: cc12 ............................. Passed 43.83 sec; Start 312: rasci-ne; 146/411 Test #50: cc34 ............................. Passed 26.37 sec; Start 133: dfmp2-ecp; 147/411 Test #152: dfomp2p5-grad1 ................... Passed 36.32 sec; Start 52: cc36; 148/411 Test #2: adc2 ............................. Passed 33.36 sec; Start 16: cbs-xtpl-gradient; 149/411 Test #219: mints-benchmark .................. Passed 38.75 sec; Start 109: dcft3; 150/411 Test #92: ci-multi ......................... Passed 48.56 sec; Start 143: dfomp2-grad1; 151/411 Test #48: cc32 ............................. Passed 21.71 sec; Start 323: sapt7; 152/411 Test #106: dcft-grad4 ....................... Passed 37.45 sec; Start 53: cc37; 153/411 Test #131: dfmp2-3 .......................... Passed 40.05 sec; Start 200: fnocc2; 154/411 Test #143: dfomp2-grad1 ..................... Passed 9.64 sec; Start 206: ghosts; 155/411 Test #273: opt7 ............................. Passed 50.60 sec; Start 336: scf5; 156/411 Test #146: dfomp3-1 ......................... Passed 18.00 sec; Start 129: dfmp2-1; 157/411 Test #52: cc36 ............................. Passed 14.24 sec; Start 360: x2c1; 158/411 Test #109: dcft3 ............................ Passed 13.16 sec; Start 252: omp2-grad2; 159/411 Test #299: pywrap-alias ..................... Passed 75.37 sec; Start 337: scf6; 160/411 Test #53: cc37 ............................. Passed 9.51 sec; Start 374: dft-custom-gg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:14108,Test,Test,14108,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #260: omp3-4 ........................... Passed 82.75 sec; Start 274: opt8; 272/411 Test #270: opt4 ............................. Passed 8.49 sec; Start 275: opt9; 273/411 Test #263: omp3-grad2 ....................... Passed 63.99 sec; Start 276: opt11; 274/411 Test #261: omp3-5 ........................... Passed 81.80 sec; Start 277: opt12; 275/411 Test #272: opt6 ............................. Passed 27.35 sec; Start 279: opt14; 276/411 Test #275: opt9 ............................. Passed 20.61 sec; Start 280: opt-irc-1; 277/411 Test #277: opt12 ............................ Passed 22.89 sec; Start 281: opt-irc-2; 278/411 Test #274: opt8 ............................. Passed 39.25 sec; Start 282: opt-irc-3; 279/411 Test #273: opt7 ............................. Passed 53.11 sec; Start 283: opt-freeze-coords; 280/411 Test #283: opt-freeze-coords ................ Passed 5.99 sec; Start 284: props1; 281/411 Test #276: opt11 ............................ Passed 54.29 sec; Start 285: props2; 282/411 Test #284: props1 ........................... Passed 4.43 sec; Start 286: props3; 283/411 Test #282: opt-irc-3 ........................ Passed 30.34 sec; Start 287: psimrcc-ccsd_t-1; 284/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 2.10 sec; Start 288: psimrcc-ccsd_t-2; 285/411 Test #285: props2 ........................... Passed 15.83 sec; Start 289: psimrcc-ccsd_t-3; 286/411 Test #286: props3 ........................... Passed 13.90 sec; Start 290: psimrcc-ccsd_t-4; 287/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 4.82 sec; Start 291: psimrcc-fd-freq1; 288/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 2.70 sec; Start 292: psimrcc-fd-freq2; 289/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 17.94 sec; Start 293: psimrcc-pt2; 290/411 Test #291: psimrcc-fd-freq1 ................. Passed 17.17 sec; Start 294: psimrcc-sp1; 291/411 Test #293: psimrcc-pt2 ...................... Passed 1.90 sec; Start 295: psithon1; 292/411 Test #279: opt1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:26056,Test,Test,26056,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability, #265: opt1 ............................. Passed 6.06 sec; Start 223: molden1; 299/411 Test #93: cisd-h2o+-0 ...................... Passed 5.64 sec; Start 344: dfep2-1; 300/411 Test #332: scf-occ .......................... Passed 4.06 sec; Start 294: psimrcc-sp1; 301/411 Test #329: scf-guess-read2 .................. Passed 8.60 sec; Start 339: scf-property; 302/411 Test #99: cisd-sp-2 ........................ Passed 6.28 sec; Start 331: scf1; 303/411 Test #295: psithon1 ......................... Passed 9.58 sec; Start 257: omp3-1; 304/411 Test #399: json-schema-1-energy ............. Passed 4.57 sec; Start 234: mp3-grad2; 305/411 Test #187: fci-h2o-fzcv ..................... Passed 6.68 sec; Start 225: mom; 306/411 Test #118: dfcasscf-fzc-sp .................. Passed 6.60 sec; Start 351: dft-reference; 307/411 Test #283: opt-freeze-coords ................ Passed 9.08 sec; Start 251: omp2-grad1; 308/411 Test #117: dfcasscf-sa-sp ................... Passed 8.74 sec; Start 85: cepa0-grad1; 309/411 Test #344: dfep2-1 .......................... Passed 5.97 sec; Start 284: props1; 310/411 Test #370: scf-coverage ..................... Passed 10.94 sec; Start 235: mp2-property; 311/411 Test #191: fcidump .......................... Passed 10.01 sec; Start 262: omp3-grad1; 312/411 Test #310: rasci-c2-active .................. Passed 8.92 sec; Start 119: dfcasscf-sp; 313/411 Test #351: dft-reference .................... Passed 4.00 sec; Start 121: dfccdl1; 314/411 Test #294: psimrcc-sp1 ...................... Passed 6.86 sec; Start 271: opt5; 315/411 Test #339: scf-property ..................... Passed 6.97 sec; Start 377: pywrap-align-chiral; 316/411 Test #331: scf1 ............................. Passed 6.73 sec; Start 229: mp2-grad2; 317/411 Test #225: mom .............................. Passed 5.38 sec; Start 232: mp2p5-grad2; 318/411 Test #223: molden1 .......................... Passed 10.29 sec; Start 116: ao-dfcasscf-sp; 319/411 Test #235: mp2-property .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:28971,Test,Test,28971,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #266: opt1-fd .......................... Passed 21.17 sec; Start 10: castup3; 265/411 Test #186: fci-h2o-2 ........................ Passed 8.30 sec; Start 339: scf-property; 266/411 Test #241: ocepa-grad1 ...................... Passed 22.53 sec; Start 191: fcidump; 267/411 Test #265: opt1 ............................. Passed 8.60 sec; Start 141: dfomp2-3; 268/411 Test #6: ao-casscf-sp ..................... Passed 11.39 sec; Start 117: dfcasscf-sa-sp; 269/411 Test #339: scf-property ..................... Passed 7.74 sec; Start 88: cepa2; 270/411 Test #199: fnocc1 ........................... Passed 24.12 sec; Start 179: fsapt2; 271/411 Test #143: dfomp2-grad1 ..................... Passed 30.12 sec; Start 99: cisd-sp-2; 272/411 Test #127: dfccsdt1 ......................... Passed 13.28 sec; Start 171: dft2; 273/411 Test #191: fcidump .......................... Passed 6.70 sec; Start 331: scf1; 274/411 Test #226: mp2-1 ............................ Passed 20.61 sec; Start 93: cisd-h2o+-0; 275/411 Test #122: dfccd-grad1 ...................... Passed 31.02 sec; Start 86: cepa0-grad2; 276/411 Test #132: dfmp2-4 .......................... Passed 15.60 sec; Start 94: cisd-h2o+-1; 277/411 Test #341: soscf-ref ........................ Passed 22.36 sec; Start 108: dcft2; 278/411 Test #117: dfcasscf-sa-sp ................... Passed 5.04 sec; Start 283: opt-freeze-coords; 279/411 Test #9: castup2 .......................... Passed 15.17 sec; Start 329: scf-guess-read2; 280/411 Test #141: dfomp2-3 ......................... Passed 6.53 sec; Start 134: dfmp2-grad1; 281/411 Test #10: castup3 .......................... Passed 14.53 sec; Start 294: psimrcc-sp1; 282/411 Test #179: fsapt2 ........................... Passed 5.59 sec; Start 251: omp2-grad1; 283/411 Test #171: dft2 ............................. Passed 5.34 sec; Start 137: dfmp2-grad4; 284/411 Test #331: scf1 ............................. Passed 5.01 sec; Start 232: mp2p5-grad2; 285/411 Test #99: cisd-sp-2 ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:25756,Test,Test,25756,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #273: opt7 ............................. Passed 26.78 sec; Start 274: opt8; 279/411 Test #274: opt8 ............................. Passed 19.15 sec; Start 275: opt9; 280/411 Test #275: opt9 ............................. Passed 10.27 sec; Start 276: opt11; 281/411 Test #276: opt11 ............................ Passed 27.42 sec; Start 277: opt12; 282/411 Test #277: opt12 ............................ Passed 15.33 sec; Start 279: opt14; 283/411 Test #279: opt14 ............................ Passed 63.42 sec; Start 280: opt-irc-1; 284/411 Test #280: opt-irc-1 ........................ Passed 50.89 sec; Start 281: opt-irc-2; 285/411 Test #281: opt-irc-2 ........................ Passed 77.64 sec; Start 282: opt-irc-3; 286/411 Test #282: opt-irc-3 ........................ Passed 14.51 sec; Start 283: opt-freeze-coords; 287/411 Test #283: opt-freeze-coords ................ Passed 2.97 sec; Start 284: props1; 288/411 Test #284: props1 ........................... Passed 2.45 sec; Start 285: props2; 289/411 Test #285: props2 ........................... Passed 10.63 sec; Start 286: props3; 290/411 Test #286: props3 ........................... Passed 10.86 sec; Start 287: psimrcc-ccsd_t-1; 291/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.37 sec; Start 288: psimrcc-ccsd_t-2; 292/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.46 sec; Start 289: psimrcc-ccsd_t-3; 293/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.31 sec; Start 290: psimrcc-ccsd_t-4; 294/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 15.10 sec; Start 291: psimrcc-fd-freq1; 295/411 Test #291: psimrcc-fd-freq1 ................. Passed 6.75 sec; Start 292: psimrcc-fd-freq2; 296/411 Test #292: psimrcc-fd-freq2 ................. Passed 52.29 sec; Start 293: psimrcc-pt2; 297/411 Test #293: psimrcc-pt2 ...................... Passed 1.16 sec; Start 294: psimrcc-sp1; 298/411 Test #294: psimrcc-sp1 ...................... Passed 3.52 sec; Start 295: psithon1; 299/411 Test #295: psith,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:26383,Test,Test,26383,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability, #273: opt7 ............................. Passed 36.48 sec; Start 149: dfomp3-grad2; 103/411 Test #1: adc1 ............................. Passed 24.56 sec; Start 55: cc39; 104/411 Test #156: dft-b2plyp ....................... Passed 25.95 sec; Start 34: cc19; 105/411 Test #264: opt-lindep-change ................ Passed 25.13 sec; Start 65: cc48; 106/411 Test #173: dft-omega ........................ Passed 23.97 sec; Start 379: cc-module; 107/411 Test #55: cc39 ............................. Passed 13.65 sec; Start 299: pywrap-alias; 108/411 Test #375: pywrap-bfs ....................... Passed 25.71 sec; Start 27: cc13c; 109/411 Test #149: dfomp3-grad2 ..................... Passed 26.64 sec; Start 326: scf-ecp; 110/411 Test #178: fsapt1 ........................... Passed 2140.46 sec; Start 104: dcft-grad2; 111/411 Test #34: cc19 ............................. Passed 36.87 sec; Start 91: cepa-module; 112/411 Test #65: cc48 ............................. Passed 34.57 sec; Start 358: tu5-sapt; 113/411 Test #326: scf-ecp .......................... Passed 27.04 sec; Start 54: cc38; 114/411 Test #358: tu5-sapt ......................... Passed 21.52 sec; Start 274: opt8; 115/411 Test #299: pywrap-alias ..................... Passed 48.68 sec; Start 166: dft-psivar; 116/411 Test #27: cc13c ............................ Passed 62.03 sec; Start 336: scf5; 117/411 Test #54: cc38 ............................. Passed 25.71 sec; Start 163: dft-freq; 118/411 Test #166: dft-psivar ....................... Passed 23.63 sec; Start 189: fci-tdm-2; 119/411 Test #274: opt8 ............................. Passed 27.54 sec; Start 346: sapt-dft1; 120/411 Test #163: dft-freq ......................... Passed 21.30 sec; Start 144: dfomp2-grad2; 121/411 Test #91: cepa-module ...................... Passed 60.97 sec; Start 30: cc15; 122/411 Test #104: dcft-grad2 ....................... Passed 70.28 sec; Start 261: omp3-5; 123/411 Test #189: fci-tdm-2 ........................ Passed 20.43 sec; Start 147: df,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:10610,Test,Test,10610,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability, #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69: cc52; 29/401 Test #96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting; 31/401 Test #19: cbs-xtpl-wrapper ................. Passed 62.39 sec; Start 166: dft1-alt; 32/401 Test #90: cepa-module ...................... Passed 125.09 sec; Start 343: sapt-dft2; 33/401 Test #236: ocepa-freq1 ...................... Passed 489.86 sec; Start 58: cc41; 34/401 Test #179: isapt2 ........................... Passed 46.85 sec; Start 366: dft-custom-dhdf; 35/401 Test #316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-delta-energy; 36/401 Test #25: cc13a ............................ Passed 519.27 sec; Start 27: cc13c; 37/401 Test #47: cc31 ............................. Passed 131.54 sec; Start 61: cc44; 38/401 Test #74: cc6 .............................. Passed 78.78 sec; Start 12: cbs-parser; 39/401 Test #200: frac-ip-fitting .................. Passed 56.76 sec; Start 255: omp3-3; 40/401 Test #343: sapt-dft2 ........................ Passed 53.47 sec; Start 60: cc43; 41/401 Test #166: dft1-alt ......................... Passed 54.05 sec; Start 163: dft-b3lyp; 42/401 Test #44: cc29 ............................. Passed 150.02 sec; Start 233: nbody-he-cluster; 43/401 Test #29: cc14 ............................. Passed 290.28 sec; Start 46: cc30; 44/401 Test #31: cc16 ............................. Passed 204.91 sec; Start 14,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:3838,Test,Test,3838,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #278: opt13 ............................ Passed 712.54 sec; Start 280: opt-irc-1; 49/411 Test #31: cc16 ............................. Passed 28.06 sec; Start 379: cc-module; 50/411 Test #47: cc31 ............................. Passed 54.32 sec; Start 75: cc6; 51/411 Test #379: cc-module ........................ Passed 26.01 sec; Start 386: cookbook-rohf-orb-rot; 52/411 Test #280: opt-irc-1 ........................ Passed 63.89 sec; Start 279: opt14; 53/411 Test #386: cookbook-rohf-orb-rot ............ Passed 21.41 sec; Start 230: mp2-module; 54/411 Test #97: cisd-opt-fd ...................... Passed 103.47 sec; Start 302: pywrap-cbs1; 55/411 Test #371: dft-custom-dhdf .................. Passed 85.26 sec; Start 58: cc41; 56/411 Test #75: cc6 .............................. Passed 50.52 sec; Start 317: sapt3; 57/411 Test #302: pywrap-cbs1 ...................... Passed 30.77 sec; Start 91: cepa-module; 58/411 Test #316: sapt2 ............................ Passed 305.80 sec; Start 319: sapt5; 59/411 Test #58: cc41 ............................. Passed 36.59 sec; Start 69: cc51; 60/411 Test #230: mp2-module ....................... Passed 54.15 sec; Start 60: cc43; 61/411 Test #91: cepa-module ...................... Passed 23.95 sec; Start 167: dft-b3lyp; 62/411 Test #279: opt14 ............................ Passed 73.59 sec; Start 74: cc5a; 63/411 Test #60: cc43 ............................. Passed 20.33 sec; Start 204: frac-ip-fitting; 64/411 Test #317: sapt3 ............................ Passed 71.21 sec; Start 104: dcft-grad2; 65/411 Test #104: dcft-grad2 ....................... Passed 11.72 sec; Start 115: dcft9; 66/411 Test #74: cc5a ............................. Passed 36.60 sec; Start 292: psimrcc-fd-freq2; 67/411 Test #69: cc51 ............................. Passed 55.79 sec; Start 19: cbs-xtpl-wrapper; 68/411 Test #319: sapt5 ............................ Passed 62.74 sec; Start 144: dfomp2-grad2; 69/411 Test #115: dcft9 ............................ Passed 17.82 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:5711,Test,Test,5711,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability, #279: opt12 ............................ Passed 23.31 sec; Start 328: scf-ecp; 176/413 Test #201: fnocc1 ........................... Passed 18.46 sec; Start 260: omp3-2; 177/413 Test #269: opt2 ............................. Passed 24.31 sec; Start 378: pywrap-align; 178/413 Test #314: rasci-ne ......................... Passed 40.21 sec; Start 274: opt6; 179/413 Test #378: pywrap-align ..................... Passed 3.38 sec; Start 249: omp2-2; 180/413 Test #256: omp2p5-2 ......................... Passed 22.46 sec; Start 175: dft-omega; 181/413 Test #203: fnocc3 ........................... Passed 13.74 sec; Start 165: dft-freq; 182/413 Test #131: dfmp2-1 .......................... Passed 34.38 sec; Start 179: extern2; 183/413 Test #362: x2c1 ............................. Passed 30.47 sec; Start 1: adc1; 184/413 Test #376: dft-custom-gga ................... Passed 33.22 sec; Start 140: dfmp2-grad5; 185/413 Test #135: dfmp2-ecp ........................ Passed 36.53 sec; Start 250: omp2-3; 186/413 Test #260: omp3-2 ........................... Passed 16.56 sec; Start 377: pywrap-bfs; 187/413 Test #249: omp2-2 ........................... Passed 11.35 sec; Start 145: dfomp2-grad1; 188/413 Test #204: fnocc4 ........................... Passed 23.20 sec; Start 240: nbody-intermediates; 189/413 Test #344: soscf-dft ........................ Passed 32.54 sec; Start 209: gibbs; 190/413 Test #145: dfomp2-grad1 ..................... Passed 8.53 sec; Start 174: dft3; 191/413 Test #328: scf-ecp .......................... Passed 28.16 sec; Start 90: cepa3; 192/413 Test #208: ghosts ........................... Passed 34.56 sec; Start 107: dcft-grad3; 193/413 Test #274: opt6 ............................. Passed 24.58 sec; Start 348: sapt-dft1; 194/413 Test #250: omp2-3 ........................... Passed 16.69 sec; Start 161: dft-b2plyp; 195/413 Test #165: dft-freq ......................... Passed 21.02 sec; Start 84: cdomp2-1; 196/413 Test #140: dfmp2-grad5 ...................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:17455,Test,Test,17455,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability, #280: opt-irc-1 ........................ Passed 96.64 sec; Start 17: cbs-xtpl-opt; 64/411 Test #204: frac-ip-fitting .................. Passed 68.08 sec; Start 100: ci-property; 65/411 Test #29: cc14 ............................. Passed 343.83 sec; Start 74: cc5a; 66/411 Test #278: opt13 ............................ Passed 797.72 sec; Start 19: cbs-xtpl-wrapper; 67/411 Test #359: tu6-cp-ne2 ....................... Passed 350.78 sec; Start 107: dcft1; 68/411 Test #292: psimrcc-fd-freq2 ................. Passed 76.46 sec; Start 159: dft-grad-meta; 69/411 Test #69: cc51 ............................. Passed 82.00 sec; Start 58: cc41; 70/411 Test #75: cc6 .............................. Passed 84.41 sec; Start 379: cc-module; 71/411 Test #242: ocepa-grad2 ...................... Passed 79.99 sec; Start 91: cepa-module; 72/411 Test #100: ci-property ...................... Passed 63.75 sec; Start 61: cc44; 73/411 Test #159: dft-grad-meta .................... Passed 50.20 sec; Start 297: pubchem1; 74/411 Test #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1-alt; 78/411 Test #107: dcft1 ............................ Passed 106.25 sec; Start 259: omp3-3; 79/411 Test #297: pubchem1 ......................... Passed 56.59 sec; Start 66: cc49; 80/411 Test #389: python-pubchem ................... Passed 58.95 sec; Start 307: pywrap-db1; 81/411 Test #61: cc44 ............................. Passed 92.56 sec; Start 131: dfmp2-3; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:7212,Test,Test,7212,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #284: opt-irc-3 ........................ Passed 31.84 sec; Start 131: dfmp2-1; 164/413 Test #379: pywrap-align-chiral .............. Passed 3.53 sec; Start 269: opt2; 165/413 Test #73: cc54 ............................. Passed 38.06 sec; Start 135: dfmp2-ecp; 166/413 Test #93: ci-multi ......................... Passed 42.41 sec; Start 53: cc36; 167/413 Test #130: dfccsdat1 ........................ Passed 16.81 sec; Start 376: dft-custom-gga; 168/413 Test #133: dfmp2-3 .......................... Passed 42.48 sec; Start 201: fnocc1; 169/413 Test #26: cc13a ............................ Passed 616.34 sec; Start 362: x2c1; 170/413 Test #266: opt-lindep-change ................ Passed 27.02 sec; Start 256: omp2p5-2; 171/413 Test #325: sapt7 ............................ Passed 36.00 sec; Start 344: soscf-dft; 172/413 Test #339: scf6 ............................. Passed 41.82 sec; Start 208: ghosts; 173/413 Test #53: cc36 ............................. Passed 16.93 sec; Start 204: fnocc4; 174/413 Test #16: cbs-xtpl-gradient ................ Passed 30.22 sec; Start 203: fnocc3; 175/413 Test #279: opt12 ............................ Passed 23.31 sec; Start 328: scf-ecp; 176/413 Test #201: fnocc1 ........................... Passed 18.46 sec; Start 260: omp3-2; 177/413 Test #269: opt2 ............................. Passed 24.31 sec; Start 378: pywrap-align; 178/413 Test #314: rasci-ne ......................... Passed 40.21 sec; Start 274: opt6; 179/413 Test #378: pywrap-align ..................... Passed 3.38 sec; Start 249: omp2-2; 180/413 Test #256: omp2p5-2 ......................... Passed 22.46 sec; Start 175: dft-omega; 181/413 Test #203: fnocc3 ........................... Passed 13.74 sec; Start 165: dft-freq; 182/413 Test #131: dfmp2-1 .......................... Passed 34.38 sec; Start 179: extern2; 183/413 Test #362: x2c1 ............................. Passed 30.47 sec; Start 1: adc1; 184/413 Test #376: dft-custom-gga ................... Passed 33.22 sec; Start 140: dfmp2-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:16353,Test,Test,16353,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability, #285: opt-freeze-coords ................ Passed 5.81 sec; Start 119: dfcasscf-sa-sp; 324/413 Test #355: tu1-h2o-energy ................... Passed 1.23 sec; Start 255: omp2p5-1; 325/413 Test #372: scf-coverage ..................... Passed 7.31 sec; Start 286: props1; 326/413 Test #193: fcidump .......................... Passed 6.38 sec; Start 346: dfep2-1; 327/413 Test #237: mp2-property ..................... Passed 3.24 sec; Start 186: fci-dipole; 328/413 Test #341: scf-property ..................... Passed 4.58 sec; Start 363: x2c2; 329/413 Test #225: molden1 .......................... Passed 5.11 sec; Start 230: mp2-grad1; 330/413 Test #357: tu3-h2o-opt ...................... Passed 4.50 sec; Start 358: scf-response1; 331/413 Test #182: fsapt-terms ...................... Passed 7.85 sec; Start 336: scf3; 332/413 Test #336: scf3 ............................. Passed 1.25 sec; Start 365: zaptn-nh2; 333/413 Test #346: dfep2-1 .......................... Passed 3.37 sec; Start 316: sad1; 334/413 Test #363: x2c2 ............................. Passed 2.92 sec; Start 4: casscf-semi; 335/413 Test #286: props1 ........................... Passed 4.61 sec; Start 333: scf1; 336/413 Test #119: dfcasscf-sa-sp ................... Passed 5.44 sec; Start 295: psimrcc-pt2; 337/413 Test #358: scf-response1 .................... Passed 2.69 sec; Start 205: frac; 338/413 Test #230: mp2-grad1 ........................ Passed 3.86 sec; Start 273: opt5; 339/413 Test #316: sad1 ............................. Passed 5.20 sec; Start 353: dft-reference; 340/413 Test #365: zaptn-nh2 ........................ Passed 5.58 sec; Start 181: fsapt2; 341/413 Test #186: fci-dipole ....................... Passed 8.25 sec; Start 223: mints9; 342/413 Test #255: omp2p5-1 ......................... Passed 9.93 sec; Start 224: mints10; 343/413 Test #295: psimrcc-pt2 ...................... Passed 5.41 sec; Start 222: mints-helper; 344/413 Test #134: dfmp2-4 .......................... Passed 12.79 sec; Start 216: m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:31499,Test,Test,31499,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability, #286: psimrcc-ccsd_t-4 ................. Passed 8.83 sec; Start 5: casscf-sa-sp; 111/401 Test #15: cbs-xtpl-freq .................... Passed 8.28 sec; Start 198: fnocc4; 112/401 Test #7: casscf-sp ........................ Passed 13.47 sec; Start 194: freq-isotope2; 113/401 Test #33: cc18 ............................. Passed 17.39 sec; Start 389: python-cc54; 114/401 Test #327: scf1 ............................. Passed 4.72 sec; Start 355: x2c1; 115/401 Test #103: dcft-grad2 ....................... Passed 58.88 sec; Start 243: omp2-2; 116/401 Test #5: casscf-sa-sp ..................... Passed 6.23 sec; Start 82: cdomp2-1; 117/401 Test #148: dfomp3-grad2 ..................... Passed 35.50 sec; Start 108: dcft3; 118/401 Test #194: freq-isotope2 .................... Passed 5.86 sec; Start 180: fci-dipole; 119/401 Test #287: psimrcc-fd-freq1 ................. Passed 13.65 sec; Start 250: omp2p5-2; 120/401 Test #198: fnocc4 ........................... Passed 11.71 sec; Start 232: mpn-bh; 121/401 Test #180: fci-dipole ....................... Passed 5.74 sec; Start 291: psithon1; 122/401 Test #48: cc32 ............................. Passed 18.47 sec; Start 124: dfccsd-grad1; 123/401 Test #106: dcft1 ............................ Passed 33.68 sec; Start 175: fsapt2; 124/401 Test #82: cdomp2-1 ......................... Passed 9.82 sec; Start 335: scf-property; 125/401 Test #232: mpn-bh ........................... Passed 4.40 sec; Start 6: ao-casscf-sp; 126/401 Test #175: fsapt2 ........................... Passed 3.49 sec; Start 261: opt1; 127/401 Test #243: omp2-2 ........................... Passed 14.72 sec; Start 309: rasscf-sp; 128/401 Test #335: scf-property ..................... Passed 3.57 sec; Start 116: dfcasscf-sa-sp; 129/401 Test #291: psithon1 ......................... Passed 6.97 sec; Start 279: opt-freeze-coords; 130/401 Test #261: opt1 ............................. Passed 4.06 sec; Start 4: casscf-semi; 131/401 Test #6: ao-casscf-sp ..................... Passed 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:11260,Test,Test,11260,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability, #290: psimrcc-ccsd_t-2 ................. Passed 2.12 sec; Start 212: mcscf2; 383/413 Test #351: sapt-sf1 ......................... Passed 1.63 sec; Start 8: castup1; 384/413 Test #223: mints9 ........................... Passed 2.14 sec; Start 218: mints5; 385/413 Test #216: mints3 ........................... Passed 1.20 sec; Start 241: numpy-array-interface; 386/413 Test #347: dfep2-2 .......................... Passed 2.13 sec; Start 366: options1; 387/413 Test #336: scf3 ............................. Passed 1.28 sec; Start 217: mints4; 388/413 Test #241: numpy-array-interface ............ Passed 0.68 sec; Start 213: mcscf3; 389/413 Test #218: mints5 ........................... Passed 1.04 sec; Start 214: mints1; 390/413 Test #366: options1 ......................... Passed 0.66 sec; Start 177: docs-dft; 391/413 Test #300: pubchem2 ......................... Passed 1.76 sec; Start 211: mcscf1; 392/413 Test #217: mints4 ........................... Passed 1.08 sec; Start 311: pywrap-molecule; 393/413 Test #214: mints1 ........................... Passed 0.71 sec; Start 310: pywrap-db3; 394/413 Test #177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec; Start 210: matrix1; 397/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; Start 88: cepa1; 398/413 Test #356: tu2-ch2-energy ................... Passed 3.20 sec; 399/413 Test #210: matrix1 .......................... Passed 0.66 sec; 400/413 Test #211: mcscf1 ........................... Passed 2.13 sec; 401/413 Test #212: mcscf2 ........................... Passed 3.62 sec; 402/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 4.39 sec; 403/413 Test #213: mcscf3 ........................... Passed 2.91 sec; 404/413 Test #329: scf-guess-read1 .................. Passed 4.72 sec; 405/413 Test #162: dft-grac ............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:36994,Test,Test,36994,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability, #291: psimrcc-ccsd_t-4 ................. Passed 19.87 sec; Start 278: opt12; 179/412 Test #273: opt6 ............................. Passed 26.74 sec; Start 166: dft-grad2; 180/412 Test #34: cc18 ............................. Passed 51.43 sec; Start 322: sapt-dft-api; 181/412 Test #85: cdomp2-2 ......................... Passed 51.89 sec; Start 154: dft-grad-lr1; 182/412 Test #316: sapt1 ............................ Passed 19.12 sec; Start 203: fnocc4; 183/412 Test #147: dfomp3-1 ......................... Passed 21.93 sec; Start 200: fnocc1; 184/412 Test #268: opt2 ............................. Passed 22.81 sec; Start 178: extern2; 185/412 Test #64: cc46 ............................. Passed 42.40 sec; Start 297: psithon2; 186/412 Test #52: cc35 ............................. Passed 24.32 sec; Start 202: fnocc3; 187/412 Test #74: cc55 ............................. Passed 45.69 sec; Start 55: cc38; 188/412 Test #33: cc17 ............................. Passed 30.45 sec; Start 16: cbs-xtpl-gradient; 189/412 Test #23: cc11 ............................. Passed 29.96 sec; Start 73: cc54; 190/412 Test #200: fnocc1 ........................... Passed 12.18 sec; Start 267: opt1-fd; 191/412 Test #166: dft-grad2 ........................ Passed 17.30 sec; Start 292: psimrcc-fd-freq1; 192/412 Test #322: sapt-dft-api ..................... Passed 17.66 sec; Start 219: mints8; 193/412 Test #154: dft-grad-lr1 ..................... Passed 17.73 sec; Start 170: dft-vv10; 194/412 Test #278: opt12 ............................ Passed 20.24 sec; Start 253: omp2-grad2; 195/412 Test #283: opt-irc-3 ........................ Passed 28.90 sec; Start 304: pywrap-checkrun-convcrit; 196/412 Test #246: ocepa3 ........................... Passed 41.58 sec; Start 24: cc12; 197/412 Test #202: fnocc3 ........................... Passed 14.69 sec; Start 341: soscf-large; 198/412 Test #203: fnocc4 ........................... Passed 26.30 sec; Start 325: sapt8; 199/412 Test #178: extern2 .........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:17767,Test,Test,17767,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2157,Test,Test,2157,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability," #300: pubchem2 ......................... Passed 1.76 sec; Start 211: mcscf1; 392/413 Test #217: mints4 ........................... Passed 1.08 sec; Start 311: pywrap-molecule; 393/413 Test #214: mints1 ........................... Passed 0.71 sec; Start 310: pywrap-db3; 394/413 Test #177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec; Start 210: matrix1; 397/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; Start 88: cepa1; 398/413 Test #356: tu2-ch2-energy ................... Passed 3.20 sec; 399/413 Test #210: matrix1 .......................... Passed 0.66 sec; 400/413 Test #211: mcscf1 ........................... Passed 2.13 sec; 401/413 Test #212: mcscf2 ........................... Passed 3.62 sec; 402/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 4.39 sec; 403/413 Test #213: mcscf3 ........................... Passed 2.91 sec; 404/413 Test #329: scf-guess-read1 .................. Passed 4.72 sec; 405/413 Test #162: dft-grac ......................... Passed 2.31 sec; 406/413 Test #330: scf-upcast-custom-basis .......... Passed 4.85 sec; 407/413 Test #8: castup1 .......................... Passed 4.98 sec; 408/413 Test #313: rasci-h2o ........................ Passed 5.23 sec; 409/413 Test #132: dfmp2-2 .......................... Passed 5.73 sec; 410/413 Test #88: cepa1 ............................ Passed 3.93 sec; 411/413 Test #18: cbs-xtpl-func .................... Passed 1465.89 sec; 412/413 Test #180: fsapt1 ........................... Passed 1916.37 sec; 413/413 Test #320: sapt4 ............................ Passed 1842.77 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 73.71 sec*proc (2 tests); autotest = 2032.85 sec*proc (26 tests); cart = 19618.09 sec*proc (123 tests); cas = 54.46 sec*proc (1 test); casscf = 99.80 s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:37808,Test,Test,37808,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability, #301: pywrap-alias ..................... Passed 85.24 sec; Start 164: dft-grad-meta; 119/413 Test #128: dfccsd-t-grad1 ................... Passed 60.82 sec; Start 278: opt11; 120/413 Test #50: cc33 ............................. Passed 40.75 sec; Start 52: cc35; 121/413 Test #101: ci-property ...................... Passed 58.02 sec; Start 38: cc22; 122/413 Test #56: cc39 ............................. Passed 69.67 sec; Start 74: cc55; 123/413 Test #299: pubchem1 ......................... Passed 63.57 sec; Start 154: dfomp2p5-grad1; 124/413 Test #239: nbody-he-cluster ................. Passed 60.48 sec; Start 172: dft1-alt; 125/413 Test #202: fnocc2 ........................... Passed 76.70 sec; Start 150: dfomp3-grad1; 126/413 Test #68: cc4a ............................. Passed 61.95 sec; Start 55: cc38; 127/413 Test #33: cc17 ............................. Passed 49.20 sec; Start 63: cc45; 128/413 Test #275: opt7 ............................. Passed 61.83 sec; Start 196: fd-freq-gradient; 129/413 Test #164: dft-grad-meta .................... Passed 52.68 sec; Start 152: dfomp2p5-1; 130/413 Test #52: cc35 ............................. Passed 52.95 sec; Start 22: cc10; 131/413 Test #38: cc22 ............................. Passed 53.38 sec; Start 66: cc48; 132/413 Test #278: opt11 ............................ Passed 63.10 sec; Start 108: dcft-grad4; 133/413 Test #172: dft1-alt ......................... Passed 53.73 sec; Start 276: opt8; 134/413 Test #72: cc53 ............................. Passed 84.38 sec; Start 23: cc11; 135/413 Test #154: dfomp2p5-grad1 ................... Passed 55.87 sec; Start 49: cc32; 136/413 Test #63: cc45 ............................. Passed 39.41 sec; Start 254: omp2-grad2; 137/413 Test #55: cc38 ............................. Passed 49.92 sec; Start 221: mints-benchmark; 138/413 Test #150: dfomp3-grad1 ..................... Passed 53.60 sec; Start 350: sapt-compare; 139/413 Test #196: fd-freq-gradient ................. Passed 51.16 sec; Start 85:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:12210,Test,Test,12210,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability, #303: pywrap-basis ..................... Passed 17.25 sec; Start 10: castup3; 231/413 Test #102: cubeprop ......................... Passed 10.10 sec; Start 84: cdomp2-1; 232/413 Test #5: casscf-sa-sp ..................... Passed 15.42 sec; Start 228: mp2-1; 233/413 Test #368: dft-smoke ........................ Passed 15.59 sec; Start 367: cubeprop-esp; 234/413 Test #326: sapt8 ............................ Passed 15.45 sec; Start 288: props3; 235/413 Test #352: dft-custom ....................... Passed 16.19 sec; Start 219: mints6; 236/413 Test #342: soscf-large ...................... Passed 14.89 sec; Start 91: cepa1; 237/413 Test #141: dfomp2-1 ......................... Passed 13.41 sec; Start 287: props2; 238/413 Test #199: freq-isotope1 .................... Passed 17.04 sec; Start 126: dfccsdl1; 239/413 Test #243: ocepa-grad1 ...................... Passed 15.58 sec; Start 370: scf-freq1; 240/413 Test #340: scf7 ............................. Passed 17.37 sec; Start 14: cbs-xtpl-energy; 241/413 Test #268: opt1-fd .......................... Passed 14.23 sec; Start 139: dfmp2-grad4; 242/413 Test #110: dcft2 ............................ Passed 11.74 sec; Start 129: dfccsdt1; 243/413 Test #84: cdomp2-1 ......................... Passed 10.02 sec; Start 245: ocepa1; 244/413 Test #367: cubeprop-esp ..................... Passed 9.60 sec; Start 159: dfrasscf-sp; 245/413 Test #10: castup3 .......................... Passed 13.10 sec; Start 359: tu4-h2o-freq; 246/413 Test #228: mp2-1 ............................ Passed 12.23 sec; Start 371: dft-jk; 247/413 Test #288: props3 ........................... Passed 13.97 sec; Start 272: opt4; 248/413 Test #219: mints6 ........................... Passed 12.99 sec; Start 343: soscf-ref; 249/413 Test #126: dfccsdl1 ......................... Passed 12.21 sec; Start 374: dft-custom-hybrid; 250/413 Test #287: props2 ........................... Passed 14.05 sec; Start 337: scf4; 251/413 Test #245: ocepa1 ........................... Passed 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:22637,Test,Test,22637,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability, #305: pywrap-checkrun-rohf ............. Passed 171.95 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 2.08 sec; Start 392: python-cc54; 378/411 Test #374: dft-custom-gga ................... Passed 29.34 sec; Start 393: python-3-index-transforms; 379/411 Test #391: python-mints2 .................... Passed 3.28 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.88 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 397: json-v11-energy; 382/411 Test #397: json-v11-energy .................. Passed 3.85 sec; Start 398: json-v11-gradient; 383/411 Test #393: python-3-index-transforms ........ Passed 10.30 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 3.98 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.26 sec; Start 401: json-schema-1-orient; 386/411 Test #399: json-schema-1-energy ............. Passed 3.33 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.05 sec; Start 404: json-schema-1-properties; 389/411 Test #392: python-cc54 ...................... Passed 17.13 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.61 sec; Start 406: skeletonaointegrals; 391/411 Test #404: json-schema-1-properties ......... Passed 1.34 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.17 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.57 sec; Start 409: skeletonscf; 394/411 Test #409: skeletonscf ...................... Passed 0.65 sec; Start 410: skeletonsointegrals; 395/411 Test #408: skeletonmointegrals .............. Passed 2.19 sec; Start 411: skelet,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:36201,Test,Test,36201,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability, #308: pywrap-db1 ....................... Passed 43.46 sec; Start 107: dcft-grad4; 108/412 Test #349: sapt-compare ..................... Passed 47.52 sec; Start 238: nbody-he-cluster; 109/412 Test #393: python-cc54 ...................... Passed 54.46 sec; Start 67: cc49; 110/412 Test #262: omp3-5 ........................... Passed 128.11 sec; Start 274: opt7; 111/412 Test #2: adc2 ............................. Passed 42.65 sec; Start 143: dfomp2-4; 112/412 Test #303: pywrap-cbs1 ...................... Passed 211.04 sec; Start 69: cc50; 113/412 Test #107: dcft-grad4 ....................... Passed 45.68 sec; Start 250: omp2-4; 114/412 Test #361: x2c1 ............................. Passed 82.35 sec; Start 313: rasci-ne; 115/412 Test #245: ocepa2 ........................... Passed 113.03 sec; Start 324: sapt7; 116/412 Test #68: cc4a ............................. Passed 71.90 sec; Start 134: dfmp2-ecp; 117/412 Test #238: nbody-he-cluster ................. Passed 58.29 sec; Start 130: dfmp2-1; 118/412 Test #65: cc47 ............................. Passed 69.48 sec; Start 80: cc8b; 119/412 Test #35: cc19 ............................. Passed 71.41 sec; Start 108: dcft1; 120/412 Test #60: cc42 ............................. Passed 90.67 sec; Start 338: scf6; 121/412 Test #67: cc49 ............................. Passed 66.95 sec; Start 207: ghosts; 122/412 Test #300: pywrap-alias ..................... Passed 91.22 sec; Start 337: scf5; 123/412 Test #143: dfomp2-4 ......................... Passed 43.57 sec; Start 66: cc48; 124/412 Test #274: opt7 ............................. Passed 53.71 sec; Start 343: soscf-dft; 125/412 Test #324: sapt7 ............................ Passed 35.25 sec; Start 141: dfomp2-2; 126/412 Test #313: rasci-ne ......................... Passed 40.47 sec; Start 56: cc39; 127/412 Test #69: cc50 ............................. Passed 52.28 sec; Start 375: dft-custom-gga; 128/412 Test #134: dfmp2-ecp ........................ Passed 36.52 sec; Start 152: dfomp2p5-2;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:11247,Test,Test,11247,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #309: pywrap-molecule .................. Passed 1.10 sec; Start 311: rasci-h2o; 300/411 Test #279: opt14 ............................ Passed 76.44 sec; Start 312: rasci-ne; 301/411 Test #311: rasci-h2o ........................ Passed 1.35 sec; Start 313: rasscf-sp; 302/411 Test #310: rasci-c2-active .................. Passed 4.30 sec; Start 314: sad1; 303/411 Test #240: ocepa-freq1 ...................... Passed 155.96 sec; Start 315: sapt1; 304/411 Test #314: sad1 ............................. Passed 2.65 sec; Start 317: sapt3; 305/411 Test #292: psimrcc-fd-freq2 ................. Passed 68.11 sec; Start 319: sapt5; 306/411 Test #313: rasscf-sp ........................ Passed 19.84 sec; Start 320: sapt6; 307/411 Test #315: sapt1 ............................ Passed 18.11 sec; Start 321: sapt-dft-api; 308/411 Test #307: pywrap-db1 ....................... Passed 40.55 sec; Start 322: sapt-dft-lrc; 309/411 Test #302: pywrap-cbs1 ...................... Passed 78.86 sec; Start 323: sapt7; 310/411 Test #312: rasci-ne ......................... Passed 35.47 sec; Start 324: sapt8; 311/411 Test #321: sapt-dft-api ..................... Passed 18.96 sec; Start 326: scf-ecp; 312/411 Test #322: sapt-dft-lrc ..................... Passed 21.11 sec; Start 327: scf-guess-read1; 313/411 Test #327: scf-guess-read1 .................. Passed 2.47 sec; Start 328: scf-upcast-custom-basis; 314/411 Test #324: sapt8 ............................ Passed 14.51 sec; Start 329: scf-guess-read2; 315/411 Test #328: scf-upcast-custom-basis .......... Passed 1.97 sec; Start 330: scf-bs; 316/411 Test #330: scf-bs ........................... Passed 1.63 sec; Start 331: scf1; 317/411 Test #329: scf-guess-read2 .................. Passed 6.23 sec; Start 332: scf-occ; 318/411 Test #331: scf1 ............................. Passed 4.71 sec; Start 333: scf2; 319/411 Test #332: scf-occ .......................... Passed 3.86 sec; Start 334: scf3; 320/411 Test #333: scf2 ............................. Passed 2.36 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:28880,Test,Test,28880,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #311: rasci-c2-active .................. Passed 5.28 sec; Start 313: rasci-ne; 302/412 Test #312: rasci-h2o ........................ Passed 4.37 sec; Start 314: rasscf-sp; 303/412 Test #298: pubchem1 ......................... Passed 61.73 sec; Start 315: sad1; 304/412 Test #293: psimrcc-fd-freq2 ................. Passed 75.37 sec; Start 316: sapt1; 305/412 Test #315: sad1 ............................. Passed 2.92 sec; Start 318: sapt3; 306/412 Test #314: rasscf-sp ........................ Passed 23.61 sec; Start 320: sapt5; 307/412 Test #316: sapt1 ............................ Passed 19.39 sec; Start 321: sapt6; 308/412 Test #308: pywrap-db1 ....................... Passed 44.56 sec; Start 322: sapt-dft-api; 309/412 Test #313: rasci-ne ......................... Passed 40.75 sec; Start 323: sapt-dft-lrc; 310/412 Test #156: dft-grad-lr3 ..................... Passed 473.64 sec; Start 324: sapt7; 311/412 Test #303: pywrap-cbs1 ...................... Passed 101.22 sec; Start 325: sapt8; 312/412 Test #322: sapt-dft-api ..................... Passed 18.65 sec; Start 327: scf-ecp; 313/412 Test #323: sapt-dft-lrc ..................... Passed 20.88 sec; Start 328: scf-guess-read1; 314/412 Test #325: sapt8 ............................ Passed 16.73 sec; Start 329: scf-upcast-custom-basis; 315/412 Test #328: scf-guess-read1 .................. Passed 2.89 sec; Start 330: scf-guess-read2; 316/412 Test #329: scf-upcast-custom-basis .......... Passed 3.07 sec; Start 331: scf-bs; 317/412 Test #331: scf-bs ........................... Passed 2.13 sec; Start 332: scf1; 318/412 Test #330: scf-guess-read2 .................. Passed 7.21 sec; Start 333: scf-occ; 319/412 Test #333: scf-occ .......................... Passed 3.22 sec; Start 334: scf2; 320/412 Test #332: scf1 ............................. Passed 5.55 sec; Start 335: scf3; 321/412 Test #335: scf3 ............................. Passed 1.44 sec; Start 336: scf4; 322/412 Test #334: scf2 ............................. Passed 2.49 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:29106,Test,Test,29106,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #313: rasscf-sp ........................ Passed 11.43 sec; Start 54: cc38; 145/404 Test #62: cc45 ............................. Passed 7.58 sec; Start 282: opt-irc-3; 146/404 Test #33: cc18 ............................. Passed 14.20 sec; Start 172: dft3; 147/404 Test #152: dfomp2p5-grad1 ................... Passed 5.61 sec; Start 252: omp2-grad2; 148/404 Test #100: ci-property ...................... Passed 21.60 sec; Start 106: dcft-grad4; 149/404 Test #54: cc38 ............................. Passed 6.52 sec; Start 267: opt2; 150/404 Test #196: fd-gradient ...................... Passed 23.74 sec; Start 92: ci-multi; 151/404 Test #252: omp2-grad2 ....................... Passed 5.58 sec; Start 323: sapt7; 152/404 Test #92: ci-multi ......................... Passed 7.78 sec; Start 148: dfomp3-grad1; 153/404 Test #348: sapt-compare ..................... Passed 20.49 sec; Start 166: dft-psivar; 154/404 Test #282: opt-irc-3 ........................ Passed 14.20 sec; Start 159: dft-grad-meta; 155/404 Test #148: dfomp3-grad1 ..................... Passed 3.61 sec; Start 342: soscf-dft; 156/404 Test #106: dcft-grad4 ....................... Passed 14.52 sec; Start 49: cc33; 157/404 Test #375: pywrap-bfs ....................... Passed 25.33 sec; Start 72: cc54; 158/404 Test #172: dft3 ............................. Passed 18.93 sec; Start 150: dfomp2p5-1; 159/404 Test #267: opt2 ............................. Passed 15.94 sec; Start 296: psithon2; 160/404 Test #150: dfomp2p5-1 ....................... Passed 2.94 sec; Start 163: dft-freq; 161/404 Test #49: cc33 ............................. Passed 5.98 sec; Start 272: opt6; 162/404 Test #72: cc54 ............................. Passed 5.02 sec; Start 189: fci-tdm-2; 163/404 Test #323: sapt7 ............................ Passed 18.91 sec; Start 32: cc17; 164/404 Test #166: dft-psivar ....................... Passed 17.69 sec; Start 138: dfmp2-grad5; 165/404 Test #296: psithon2 ......................... Passed 10.77 sec; Start 20: cc1; 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:14354,Test,Test,14354,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #318: sapt-dft-lrc ..................... Passed 11.07 sec; Start 107: dcft2; 144/401 Test #22: cc11 ............................. Passed 49.69 sec; Start 51: cc35; 145/401 Test #372: pywrap-bfs ....................... Passed 24.73 sec; Start 264: opt2-fd; 146/401 Test #295: pywrap-alias ..................... Passed 82.94 sec; Start 20: cc1; 147/401 Test #88: cepa3 ............................ Passed 21.33 sec; Start 299: pywrap-checkrun-convcrit; 148/401 Test #78: cc8b ............................. Passed 69.32 sec; Start 148: dfomp3-grad2; 149/401 Test #55: cc39 ............................. Passed 63.25 sec; Start 87: cepa2; 150/401 Test #109: dcft4 ............................ Passed 844.58 sec; Start 49: cc33; 151/401 Test #142: dfomp2-grad1 ..................... Passed 27.95 sec; Start 65: cc49; 152/401 Test #37: cc22 ............................. Passed 36.53 sec; Start 297: pywrap-basis; 153/401 Test #80: cc9 .............................. Passed 69.66 sec; Start 363: scf-freq1; 154/401 Test #107: dcft2 ............................ Passed 15.25 sec; Start 106: dcft1; 155/401 Test #23: cc12 ............................. Passed 36.72 sec; Start 367: dft-custom-hybrid; 156/401 Test #264: opt2-fd .......................... Passed 12.62 sec; Start 331: scf4; 157/401 Test #254: omp3-2 ........................... Passed 31.04 sec; Start 288: psimrcc-fd-freq2; 158/401 Test #103: dcft-grad2 ....................... Passed 112.53 sec; Start 160: dft-grad1; 159/401 Test #87: cepa2 ............................ Passed 12.23 sec; Start 99: ci-property; 160/401 Test #363: scf-freq1 ........................ Passed 10.44 sec; Start 317: sapt-dft-api; 161/401 Test #332: scf5 ............................. Passed 44.17 sec; Start 266: opt4; 162/401 Test #367: dft-custom-hybrid ................ Passed 9.59 sec; Start 50: cc34; 163/401 Test #71: cc54 ............................. Passed 36.42 sec; Start 161: dft-grad2; 164/401 Test #297: pywrap-basis ..................... Passed 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:14821,Test,Test,14821,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #318: sapt2 ............................ Passed 331.13 sec; Start 198: fd-gradient; 145/413 Test #221: mints-benchmark .................. Passed 43.57 sec; Start 148: dfomp3-1; 146/413 Test #172: dft1-alt ......................... Passed 55.54 sec; Start 284: opt-irc-3; 147/413 Test #115: dcft7 ............................ Passed 345.49 sec; Start 309: pywrap-db1; 148/413 Test #54: cc37 ............................. Passed 35.93 sec; Start 269: opt2; 149/413 Test #279: opt12 ............................ Passed 26.85 sec; Start 361: tu6-cp-ne2; 150/413 Test #22: cc10 ............................. Passed 51.09 sec; Start 74: cc55; 151/413 Test #23: cc11 ............................. Passed 49.40 sec; Start 338: scf5; 152/413 Test #111: dcft3 ............................ Passed 41.52 sec; Start 325: sapt7; 153/413 Test #350: sapt-compare ..................... Passed 44.69 sec; Start 314: rasci-ne; 154/413 Test #304: pywrap-cbs1 ...................... Passed 169.96 sec; Start 93: ci-multi; 155/413 Test #269: opt2 ............................. Passed 27.77 sec; Start 66: cc48; 156/413 Test #284: opt-irc-3 ........................ Passed 32.58 sec; Start 395: python-3-index-transforms; 157/413 Test #198: fd-gradient ...................... Passed 37.81 sec; Start 339: scf6; 158/413 Test #301: pywrap-alias ..................... Passed 80.45 sec; Start 131: dfmp2-1; 159/413 Test #148: dfomp3-1 ......................... Passed 43.61 sec; Start 133: dfmp2-3; 160/413 Test #395: python-3-index-transforms ........ Passed 9.79 sec; Start 135: dfmp2-ecp; 161/413 Test #309: pywrap-db1 ....................... Passed 42.33 sec; Start 344: soscf-dft; 162/413 Test #12: cbs-parser ....................... Passed 86.78 sec; Start 376: dft-custom-gga; 163/413 Test #338: scf5 ............................. Passed 41.90 sec; Start 388: cookbook-rohf-orb-rot; 164/413 Test #325: sapt7 ............................ Passed 35.57 sec; Start 250: omp2-3; 165/413 Test #314: rasci-ne ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:14599,Test,Test,14599,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability, #31: cc16 ............................. Passed 395.40 sec; Start 281: opt-irc-2; 27/411 Test #44: cc29 ............................. Passed 233.84 sec; Start 359: tu6-cp-ne2; 28/411 Test #47: cc31 ............................. Passed 213.17 sec; Start 27: cc13c; 29/411 Test #112: dcft6 ............................ Passed 207.94 sec; Start 70: cc52; 30/411 Test #24: cc13 ............................. Passed 461.26 sec; Start 58: cc41; 31/411 Test #28: cc13d ............................ Passed 324.06 sec; Start 104: dcft-grad2; 32/411 Test #182: isapt1 ........................... Passed 402.87 sec; Start 373: dft-custom-mgga; 33/411 Test #11: cbs-delta-energy ................. Passed 389.80 sec; Start 144: dfomp2-grad2; 34/411 Test #91: cepa-module ...................... Passed 172.39 sec; Start 97: cisd-opt-fd; 35/411 Test #27: cc13c ............................ Passed 152.82 sec; Start 46: cc30; 36/411 Test #58: cc41 ............................. Passed 135.41 sec; Start 320: sapt6; 37/411 Test #281: opt-irc-2 ........................ Passed 180.85 sec; Start 115: dcft9; 38/411 Test #70: cc52 ............................. Passed 175.89 sec; Start 386: cookbook-rohf-orb-rot; 39/411 Test #104: dcft-grad2 ....................... Passed 130.18 sec; Start 60: cc43; 40/411 Test #305: pywrap-checkrun-rohf ............. Passed 660.05 sec; Start 149: dfomp3-grad2; 41/411 Test #144: dfomp2-grad2 ..................... Passed 71.62 sec; Start 17: cbs-xtpl-opt; 42/411 Test #46: cc30 ............................. Passed 77.21 sec; Start 158: dfscf-bz2; 43/411 Test #359: tu6-cp-ne2 ....................... Passed 249.27 sec; Start 379: cc-module; 44/411 Test #195: fd-freq-gradient-large ........... Passed 292.03 sec; Start 57: cc40; 45/411 Test #115: dcft9 ............................ Passed 93.57 sec; Start 107: dcft1; 46/411 Test #60: cc43 ............................. Passed 98.08 sec; Start 183: isapt2; 47/411 Test #149: dfomp3-grad2 ..................... Passed 73.71 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:3801,Test,Test,3801,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #31: cc16 ............................. Passed 945.37 sec; Start 277: opt12; 106/411 Test #277: opt12 ............................ Passed 38.23 sec; Start 299: pywrap-alias; 107/411 Test #68: cc50 ............................. Passed 173.54 sec; Start 66: cc49; 108/411 Test #76: cc7 .............................. Passed 1541.26 sec; Start 321: sapt-dft-api; 109/411 Test #379: cc-module ........................ Passed 912.65 sec; Start 282: opt-irc-3; 110/411 Test #321: sapt-dft-api ..................... Passed 20.22 sec; Start 267: opt2; 111/411 Test #267: opt2 ............................. Passed 41.41 sec; Start 272: opt6; 112/411 Test #66: cc49 ............................. Passed 169.63 sec; Start 160: dft-grad-lr1; 113/411 Test #282: opt-irc-3 ........................ Passed 71.40 sec; Start 46: cc30; 114/411 Test #160: dft-grad-lr1 ..................... Passed 18.13 sec; Start 28: cc13d; 115/411 Test #299: pywrap-alias ..................... Passed 246.55 sec; Start 165: dft-grad2; 116/411 Test #272: opt6 ............................. Passed 55.20 sec; Start 315: sapt1; 117/411 Test #165: dft-grad2 ........................ Passed 16.23 sec; Start 290: psimrcc-ccsd_t-4; 118/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.60 sec; Start 58: cc41; 119/411 Test #315: sapt1 ............................ Passed 22.40 sec; Start 202: fnocc4; 120/411 Test #202: fnocc4 ........................... Passed 82.18 sec; Start 91: cepa-module; 121/411 Test #302: pywrap-cbs1 ...................... Passed 557.46 sec; Start 169: dft-vv10; 122/411 Test #169: dft-vv10 ......................... Passed 30.86 sec; Start 60: cc43; 123/411 Test #24: cc13 ............................. Passed 1125.76 sec; Start 218: mints8; 124/411 Test #218: mints8 ........................... Passed 18.42 sec; Start 196: fd-gradient; 125/411 Test #386: cookbook-rohf-orb-rot ............ Passed 956.85 sec; Start 340: soscf-large; 126/411 Test #46: cc30 ............................. Passed 321.69,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:10958,Test,Test,10958,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #320: rasci-c2-active .................. Passed 5.60 sec; Start 327: sapt3; 365/415 Test #307: pubchem1 ......................... Passed 32.29 sec; Start 329: sapt5; 366/415 Test #313: pywrap-checkrun-convcrit ......... Passed 31.23 sec; Start 330: sapt6; 367/415 Test #327: sapt3 ............................ Passed 16.32 sec; Start 331: sapt-dft-api; 368/415 Test #302: psimrcc-fd-freq2 ................. Passed 57.34 sec; Start 332: sapt-dft-lrc; 369/415 Test #331: sapt-dft-api ..................... Passed 11.76 sec; Start 333: sapt7; 370/415 Test #322: rasci-ne ......................... Passed 32.10 sec; Start 336: scf-ecp; 371/415 Test #332: sapt-dft-lrc ..................... Passed 10.40 sec; Start 339: scf-guess-read2; 372/415 Test #329: sapt5 ............................ Passed 34.98 sec; Start 345: scf4; 373/415 Test #289: opt-irc-1 ........................ Passed 110.77 sec; Start 347: scf6; 374/415 Test #339: scf-guess-read2 .................. Passed 7.92 sec; Start 348: scf7; 375/415 Test #345: scf4 ............................. Passed 15.10 sec; Start 352: soscf-ref; 376/415 Test #333: sapt7 ............................ Passed 26.37 sec; Start 353: soscf-dft; 377/415 Test #348: scf7 ............................. Passed 20.00 sec; Start 358: sapt-dft2; 378/415 Test #336: scf-ecp .......................... Passed 33.51 sec; Start 359: sapt-compare; 379/415 Test #352: soscf-ref ........................ Passed 17.21 sec; Start 361: dft-custom; 380/415 Test #330: sapt6 ............................ Passed 62.53 sec; Start 362: dft-reference; 381/415 Test #353: soscf-dft ........................ Passed 20.30 sec; Start 370: tu6-cp-ne2; 382/415 Test #362: dft-reference .................... Passed 4.22 sec; Start 374: zaptn-nh2; 383/415 Test #246: nbody-freq ....................... Passed 405.24 sec; Start 379: scf-freq1; 384/415 Test #374: zaptn-nh2 ........................ Passed 4.40 sec; Start 380: dft-jk; 385/415 Test #361: dft-custom ....................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:35232,Test,Test,35232,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability, #321: sapt-dft-api ..................... Passed 20.22 sec; Start 267: opt2; 111/411 Test #267: opt2 ............................. Passed 41.41 sec; Start 272: opt6; 112/411 Test #66: cc49 ............................. Passed 169.63 sec; Start 160: dft-grad-lr1; 113/411 Test #282: opt-irc-3 ........................ Passed 71.40 sec; Start 46: cc30; 114/411 Test #160: dft-grad-lr1 ..................... Passed 18.13 sec; Start 28: cc13d; 115/411 Test #299: pywrap-alias ..................... Passed 246.55 sec; Start 165: dft-grad2; 116/411 Test #272: opt6 ............................. Passed 55.20 sec; Start 315: sapt1; 117/411 Test #165: dft-grad2 ........................ Passed 16.23 sec; Start 290: psimrcc-ccsd_t-4; 118/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.60 sec; Start 58: cc41; 119/411 Test #315: sapt1 ............................ Passed 22.40 sec; Start 202: fnocc4; 120/411 Test #202: fnocc4 ........................... Passed 82.18 sec; Start 91: cepa-module; 121/411 Test #302: pywrap-cbs1 ...................... Passed 557.46 sec; Start 169: dft-vv10; 122/411 Test #169: dft-vv10 ......................... Passed 30.86 sec; Start 60: cc43; 123/411 Test #24: cc13 ............................. Passed 1125.76 sec; Start 218: mints8; 124/411 Test #218: mints8 ........................... Passed 18.42 sec; Start 196: fd-gradient; 125/411 Test #386: cookbook-rohf-orb-rot ............ Passed 956.85 sec; Start 340: soscf-large; 126/411 Test #46: cc30 ............................. Passed 321.69 sec; Start 164: dft-grad1; 127/411 Test #340: soscf-large ...................... Passed 15.63 sec; Start 92: ci-multi; 128/411 Test #164: dft-grad1 ........................ Passed 15.97 sec; Start 200: fnocc2; 129/411 Test #196: fd-gradient ...................... Passed 85.81 sec; Start 57: cc40; 130/411 Test #92: ci-multi ......................... Passed 103.97 sec; Start 324: sapt8; 131/411 Test #324: sapt8 ............................ Passed 21.47 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:11423,Test,Test,11423,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #322: sapt-dft-lrc ..................... Passed 19.70 sec; Start 249: omp2-4; 128/411 Test #196: fd-gradient ...................... Passed 31.18 sec; Start 260: omp3-4; 129/411 Test #30: cc15 ............................. Passed 45.82 sec; Start 92: ci-multi; 130/411 Test #147: dfomp3-2 ......................... Passed 39.98 sec; Start 56: cc4; 131/411 Test #144: dfomp2-grad2 ..................... Passed 48.38 sec; Start 290: psimrcc-ccsd_t-4; 132/411 Test #261: omp3-5 ........................... Passed 59.17 sec; Start 250: omp2-5; 133/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 17.78 sec; Start 321: sapt-dft-api; 134/411 Test #92: ci-multi ......................... Passed 24.62 sec; Start 172: dft3; 135/411 Test #56: cc4 .............................. Passed 26.86 sec; Start 160: dft-grad-lr1; 136/411 Test #26: cc13b ............................ Passed 49.02 sec; Start 67: cc4a; 137/411 Test #249: omp2-4 ........................... Passed 45.04 sec; Start 165: dft-grad2; 138/411 Test #260: omp3-4 ........................... Passed 41.30 sec; Start 64: cc47; 139/411 Test #321: sapt-dft-api ..................... Passed 18.17 sec; Start 263: omp3-grad2; 140/411 Test #250: omp2-5 ........................... Passed 27.95 sec; Start 315: sapt1; 141/411 Test #172: dft3 ............................. Passed 20.49 sec; Start 20: cc1; 142/411 Test #160: dft-grad-lr1 ..................... Passed 17.39 sec; Start 337: scf6; 143/411 Test #165: dft-grad2 ........................ Passed 16.86 sec; Start 151: dfomp2p5-2; 144/411 Test #67: cc4a ............................. Passed 20.12 sec; Start 267: opt2; 145/411 Test #315: sapt1 ............................ Passed 18.24 sec; Start 277: opt12; 146/411 Test #64: cc47 ............................. Passed 27.34 sec; Start 245: ocepa3; 147/411 Test #267: opt2 ............................. Passed 20.06 sec; Start 153: dfomp2p5-grad2; 148/411 Test #337: scf6 ............................. Passed 34.12 sec; Start 82: cc9a; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:12915,Test,Test,12915,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability, #322: sapt6 ............................ Passed 166.76 sec; Start 304: pywrap-cbs1; 38/413 Test #381: cc-module ........................ Passed 141.83 sec; Start 106: dcft-grad2; 39/413 Test #375: dft-custom-mgga .................. Passed 184.62 sec; Start 349: sapt-dft2; 40/413 Test #388: cookbook-rohf-orb-rot ............ Passed 186.42 sec; Start 263: omp3-5; 41/413 Test #283: opt-irc-2 ........................ Passed 159.99 sec; Start 117: dcft9; 42/413 Test #71: cc52 ............................. Passed 140.81 sec; Start 27: cc13b; 43/413 Test #197: fd-freq-gradient-large ........... Passed 299.84 sec; Start 261: omp3-3; 44/413 Test #98: cisd-opt-fd ...................... Passed 148.15 sec; Start 262: omp3-4; 45/413 Test #28: cc13c ............................ Passed 111.35 sec; Start 185: isapt2; 46/413 Test #92: cepa-module ...................... Passed 130.11 sec; Start 146: dfomp2-grad2; 47/413 Test #106: dcft-grad2 ....................... Passed 113.52 sec; Start 251: omp2-4; 48/413 Test #263: omp3-5 ........................... Passed 98.82 sec; Start 76: cc6; 49/413 Test #117: dcft9 ............................ Passed 94.18 sec; Start 44: cc28; 50/413 Test #160: dfscf-bz2 ........................ Passed 139.59 sec; Start 156: dft-grad-lr2; 51/413 Test #349: sapt-dft2 ........................ Passed 125.56 sec; Start 31: cc15; 52/413 Test #304: pywrap-cbs1 ...................... Passed 141.50 sec; Start 170: dft1; 53/413 Test #27: cc13b ............................ Passed 97.13 sec; Start 232: mp2-module; 54/413 Test #261: omp3-3 ........................... Passed 93.95 sec; Start 70: cc51; 55/413 Test #262: omp3-4 ........................... Passed 90.31 sec; Start 75: cc5a; 56/413 Test #251: omp2-4 ........................... Passed 82.97 sec; Start 62: cc44; 57/413 Test #146: dfomp2-grad2 ..................... Passed 88.22 sec; Start 26: cc13a; 58/413 Test #44: cc28 ............................. Passed 87.90 sec; Start 115: dcft7; 59/413 Test #31: cc15 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:4839,Test,Test,4839,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability, #323: rasscf-sp ........................ Passed 37.57 sec; Start 103: cubeprop; 60/415 Test #205: fnocc4 ........................... Passed 22.18 sec; Start 293: opt-full-hess-every; 61/415 Test #6: ao-casscf-sp ..................... Passed 5.22 sec; Start 357: sapt-dft1; 62/415 Test #377: dft-smoke ........................ Passed 22.20 sec; Start 201: freq-isotope2; 63/415 Test #252: ocepa1 ........................... Passed 8.85 sec; Start 194: fcidump; 64/415 Test #260: omp2-grad1 ....................... Passed 9.57 sec; Start 266: omp3-1; 65/415 Test #132: dfmp2-1 .......................... Passed 16.83 sec; Start 334: sapt8; 66/415 Test #194: fcidump .......................... Passed 7.22 sec; Start 226: molden1; 67/415 Test #142: dfomp2-1 ......................... Passed 12.15 sec; Start 274: opt1; 68/415 Test #103: cubeprop ......................... Passed 12.58 sec; Start 227: molden2; 69/415 Test #368: tu4-h2o-freq ..................... Passed 13.90 sec; Start 8: castup1; 70/415 Test #201: freq-isotope2 .................... Passed 11.36 sec; Start 369: tu5-sapt; 71/415 Test #172: dft-vv10 ......................... Passed 16.42 sec; Start 160: dfrasscf-sp; 72/415 Test #357: sapt-dft1 ........................ Passed 14.97 sec; Start 292: opt-freeze-coords; 73/415 Test #293: opt-full-hess-every .............. Passed 15.99 sec; Start 305: psithon1; 74/415 Test #8: castup1 .......................... Passed 4.90 sec; Start 137: dfmp2-grad1; 75/415 Test #266: omp3-1 ........................... Passed 10.08 sec; Start 376: cubeprop-esp; 76/415 Test #274: opt1 ............................. Passed 11.75 sec; Start 325: sapt1; 77/415 Test #226: molden1 .......................... Passed 14.09 sec; Start 378: scf-hess1; 78/415 Test #227: molden2 .......................... Passed 12.71 sec; Start 239: mpn-bh; 79/415 Test #292: opt-freeze-coords ................ Passed 8.13 sec; Start 234: mp2p5-grad1; 80/415 Test #334: sapt8 ............................ Passed 16.61 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:6852,Test,Test,6852,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability, #323: sapt-dft-api ..................... Passed 22.34 sec; Start 243: ocepa-grad1; 226/413 Test #293: psimrcc-fd-freq1 ................. Passed 16.21 sec; Start 340: scf7; 227/413 Test #166: dft-grad1 ........................ Passed 18.70 sec; Start 141: dfomp2-1; 228/413 Test #220: mints8 ........................... Passed 19.06 sec; Start 268: opt1-fd; 229/413 Test #171: dft-vv10 ......................... Passed 19.31 sec; Start 110: dcft2; 230/413 Test #303: pywrap-basis ..................... Passed 17.25 sec; Start 10: castup3; 231/413 Test #102: cubeprop ......................... Passed 10.10 sec; Start 84: cdomp2-1; 232/413 Test #5: casscf-sa-sp ..................... Passed 15.42 sec; Start 228: mp2-1; 233/413 Test #368: dft-smoke ........................ Passed 15.59 sec; Start 367: cubeprop-esp; 234/413 Test #326: sapt8 ............................ Passed 15.45 sec; Start 288: props3; 235/413 Test #352: dft-custom ....................... Passed 16.19 sec; Start 219: mints6; 236/413 Test #342: soscf-large ...................... Passed 14.89 sec; Start 91: cepa1; 237/413 Test #141: dfomp2-1 ......................... Passed 13.41 sec; Start 287: props2; 238/413 Test #199: freq-isotope1 .................... Passed 17.04 sec; Start 126: dfccsdl1; 239/413 Test #243: ocepa-grad1 ...................... Passed 15.58 sec; Start 370: scf-freq1; 240/413 Test #340: scf7 ............................. Passed 17.37 sec; Start 14: cbs-xtpl-energy; 241/413 Test #268: opt1-fd .......................... Passed 14.23 sec; Start 139: dfmp2-grad4; 242/413 Test #110: dcft2 ............................ Passed 11.74 sec; Start 129: dfccsdt1; 243/413 Test #84: cdomp2-1 ......................... Passed 10.02 sec; Start 245: ocepa1; 244/413 Test #367: cubeprop-esp ..................... Passed 9.60 sec; Start 159: dfrasscf-sp; 245/413 Test #10: castup3 .......................... Passed 13.10 sec; Start 359: tu4-h2o-freq; 246/413 Test #228: mp2-1 ............................ Passed 12.23 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:22171,Test,Test,22171,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability, #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test #296: pywrap-all ....................... Passed 973.84 sec; 396/401 Test #86: cepa1 ............................ Passed 4.52 sec; 397/401 Test #391: python-vibanalysis ............... Passed 976.98 sec; 398/401 Test #360: cubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:36357,Test,Test,36357,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #326: scf-ecp .......................... Passed 32.04 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.45 sec; Start 336: scf5; 330/411 Test #333: scf2 ............................. Passed 1.93 sec; Start 337: scf6; 331/411 Test #335: scf4 ............................. Passed 10.69 sec; Start 338: scf7; 332/411 Test #338: scf7 ............................. Passed 14.81 sec; Start 339: scf-property; 333/411 Test #339: scf-property ..................... Passed 5.25 sec; Start 340: soscf-large; 334/411 Test #336: scf5 ............................. Passed 37.10 sec; Start 341: soscf-ref; 335/411 Test #337: scf6 ............................. Passed 38.68 sec; Start 342: soscf-dft; 336/411 Test #340: soscf-large ...................... Passed 14.82 sec; Start 343: stability1; 337/411 Test #343: stability1 ....................... Passed 3.78 sec; Start 344: dfep2-1; 338/411 Test #341: soscf-ref ........................ Passed 12.15 sec; Start 345: dfep2-2; 339/411 Test #345: dfep2-2 .......................... Passed 2.11 sec; Start 346: sapt-dft1; 340/411 Test #320: sapt6 ............................ Passed 158.81 sec; Start 347: sapt-dft2; 341/411 Test #344: dfep2-1 .......................... Passed 3.37 sec; Start 348: sapt-compare; 342/411 Test #342: soscf-dft ........................ Passed 31.87 sec; Start 349: sapt-sf1; 343/411 Test #349: sapt-sf1 ......................... Passed 1.22 sec; Start 350: dft-custom; 344/411 Test #346: sapt-dft1 ........................ Passed 23.64 sec; Start 351: dft-reference; 345/411 Test #351: dft-reference .................... Passed 4.34 sec; Start 352: stability2; 346/411 Test #352: stability2 ....................... Passed 2.35 sec; Start 353: tu1-h2o-energy; 347/411 Test #353: tu1-h2o-energy ................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 348/411 Test #354: tu2-ch2-energy ................... Passed 1.04 sec; Start 355: tu3-h2o-opt; 349/411 Test #350: dft-custom ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:31465,Test,Test,31465,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability, #326: scf-ecp .......................... Passed 35.46 sec; Start 173: dft-omega; 136/411 Test #7: casscf-sp ........................ Passed 36.13 sec; Start 207: gibbs; 137/411 Test #249: omp2-4 ........................... Passed 110.38 sec; Start 375: pywrap-bfs; 138/411 Test #109: dcft3 ............................ Passed 25.22 sec; Start 12: cbs-parser; 139/411 Test #65: cc48 ............................. Passed 77.89 sec; Start 166: dft-psivar; 140/411 Test #156: dft-b2plyp ....................... Passed 25.02 sec; Start 126: dfccsd-t-grad1; 141/411 Test #1: adc1 ............................. Passed 25.46 sec; Start 73: cc55; 142/411 Test #207: gibbs ............................ Passed 24.19 sec; Start 67: cc4a; 143/411 Test #173: dft-omega ........................ Passed 24.73 sec; Start 245: ocepa3; 144/411 Test #256: omp2p5-grad2 ..................... Passed 76.39 sec; Start 64: cc47; 145/411 Test #196: fd-gradient ...................... Passed 35.40 sec; Start 346: sapt-dft1; 146/411 Test #375: pywrap-bfs ....................... Passed 24.62 sec; Start 151: dfomp2p5-2; 147/411 Test #153: dfomp2p5-grad2 ................... Passed 104.20 sec; Start 55: cc39; 148/411 Test #166: dft-psivar ....................... Passed 26.30 sec; Start 81: cc9; 149/411 Test #379: cc-module ........................ Passed 496.63 sec; Start 63: cc46; 150/411 Test #82: cc9a ............................. Passed 60.15 sec; Start 313: rasscf-sp; 151/411 Test #59: cc42 ............................. Passed 65.17 sec; Start 189: fci-tdm-2; 152/411 Test #346: sapt-dft1 ........................ Passed 24.50 sec; Start 71: cc53; 153/411 Test #126: dfccsd-t-grad1 ................... Passed 46.35 sec; Start 79: cc8b; 154/411 Test #147: dfomp3-2 ......................... Passed 68.44 sec; Start 163: dft-freq; 155/411 Test #189: fci-tdm-2 ........................ Passed 23.01 sec; Start 78: cc8a; 156/411 Test #67: cc4a ............................. Passed 53.77 sec; Start 358: tu5-sapt; 157/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:13811,Test,Test,13811,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #32: cc17 ............................. Passed 113.71 sec; Start 335: scf4; 201/411 Test #153: dfomp2p5-grad2 ................... Passed 316.26 sec; Start 186: fci-h2o-2; 202/411 Test #184: fci-dipole ....................... Passed 10.91 sec; Start 30: cc15; 203/411 Test #186: fci-h2o-2 ........................ Passed 9.39 sec; Start 15: cbs-xtpl-freq; 204/411 Test #63: cc46 ............................. Passed 139.50 sec; Start 376: pywrap-align; 205/411 Test #335: scf4 ............................. Passed 14.54 sec; Start 151: dfomp2p5-2; 206/411 Test #149: dfomp3-grad2 ..................... Passed 250.21 sec; Start 185: fci-h2o; 207/411 Test #71: cc53 ............................. Passed 97.98 sec; Start 252: omp2-grad2; 208/411 Test #376: pywrap-align ..................... Passed 4.72 sec; Start 107: dcft1; 209/411 Test #15: cbs-xtpl-freq .................... Passed 7.87 sec; Start 248: omp2-3; 210/411 Test #185: fci-h2o .......................... Passed 5.91 sec; Start 89: cepa3; 211/411 Test #20: cc1 .............................. Passed 198.16 sec; Start 147: dfomp3-2; 212/411 Test #89: cepa3 ............................ Passed 11.07 sec; Start 192: fd-freq-energy; 213/411 Test #144: dfomp2-grad2 ..................... Passed 87.37 sec; Start 37: cc22; 214/411 Test #248: omp2-3 ........................... Passed 19.53 sec; Start 341: soscf-ref; 215/411 Test #252: omp2-grad2 ....................... Passed 24.12 sec; Start 360: x2c1; 216/411 Test #151: dfomp2p5-2 ....................... Passed 29.24 sec; Start 81: cc9; 217/411 Test #192: fd-freq-energy ................... Passed 9.41 sec; Start 73: cc55; 218/411 Test #30: cc15 ............................. Passed 38.58 sec; Start 179: fsapt2; 219/411 Test #179: fsapt2 ........................... Passed 5.20 sec; Start 82: cc9a; 220/411 Test #341: soscf-ref ........................ Passed 9.34 sec; Start 10: castup3; 221/411 Test #37: cc22 ............................. Passed 22.33 sec; Start 77: cc8; 222/411 Te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:19798,Test,Test,19798,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #32: cc17 ............................. Passed 65.50 sec; Start 264: opt-lindep-change; 128/411 Test #374: dft-custom-gga ................... Passed 39.03 sec; Start 59: cc42; 129/411 Test #392: python-cc54 ...................... Passed 88.76 sec; Start 82: cc9a; 130/411 Test #16: cbs-xtpl-gradient ................ Passed 42.32 sec; Start 109: dcft3; 131/411 Test #274: opt8 ............................. Passed 46.93 sec; Start 156: dft-b2plyp; 132/411 Test #337: scf6 ............................. Passed 67.92 sec; Start 196: fd-gradient; 133/411 Test #202: fnocc4 ........................... Passed 34.47 sec; Start 1: adc1; 134/411 Test #264: opt-lindep-change ................ Passed 28.28 sec; Start 147: dfomp3-2; 135/411 Test #326: scf-ecp .......................... Passed 35.46 sec; Start 173: dft-omega; 136/411 Test #7: casscf-sp ........................ Passed 36.13 sec; Start 207: gibbs; 137/411 Test #249: omp2-4 ........................... Passed 110.38 sec; Start 375: pywrap-bfs; 138/411 Test #109: dcft3 ............................ Passed 25.22 sec; Start 12: cbs-parser; 139/411 Test #65: cc48 ............................. Passed 77.89 sec; Start 166: dft-psivar; 140/411 Test #156: dft-b2plyp ....................... Passed 25.02 sec; Start 126: dfccsd-t-grad1; 141/411 Test #1: adc1 ............................. Passed 25.46 sec; Start 73: cc55; 142/411 Test #207: gibbs ............................ Passed 24.19 sec; Start 67: cc4a; 143/411 Test #173: dft-omega ........................ Passed 24.73 sec; Start 245: ocepa3; 144/411 Test #256: omp2p5-grad2 ..................... Passed 76.39 sec; Start 64: cc47; 145/411 Test #196: fd-gradient ...................... Passed 35.40 sec; Start 346: sapt-dft1; 146/411 Test #375: pywrap-bfs ....................... Passed 24.62 sec; Start 151: dfomp2p5-2; 147/411 Test #153: dfomp2p5-grad2 ................... Passed 104.20 sec; Start 55: cc39; 148/411 Test #166: dft-psivar ....................... Passed 26.30 sec; Start 81,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:13077,Test,Test,13077,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #332: scf-occ .......................... Passed 3.27 sec; Start 335: scf4; 321/411 Test #318: sapt4 ............................ Passed 2052.59 sec; Start 336: scf5; 322/411 Test #334: scf3 ............................. Passed 0.81 sec; Start 337: scf6; 323/411 Test #333: scf2 ............................. Passed 1.56 sec; Start 338: scf7; 324/411 Test #323: sapt7 ............................ Passed 34.19 sec; Start 339: scf-property; 325/411 Test #339: scf-property ..................... Passed 6.15 sec; Start 340: soscf-large; 326/411 Test #335: scf4 ............................. Passed 13.02 sec; Start 341: soscf-ref; 327/411 Test #326: scf-ecp .......................... Passed 30.68 sec; Start 342: soscf-dft; 328/411 Test #338: scf7 ............................. Passed 16.23 sec; Start 343: stability1; 329/411 Test #343: stability1 ....................... Passed 2.42 sec; Start 344: dfep2-1; 330/411 Test #319: sapt5 ............................ Passed 75.45 sec; Start 345: dfep2-2; 331/411 Test #317: sapt3 ............................ Passed 76.62 sec; Start 346: sapt-dft1; 332/411 Test #344: dfep2-1 .......................... Passed 4.52 sec; Start 347: sapt-dft2; 333/411 Test #345: dfep2-2 .......................... Passed 2.12 sec; Start 348: sapt-compare; 334/411 Test #340: soscf-large ...................... Passed 15.89 sec; Start 349: sapt-sf1; 335/411 Test #341: soscf-ref ........................ Passed 14.83 sec; Start 350: dft-custom; 336/411 Test #336: scf5 ............................. Passed 32.53 sec; Start 351: dft-reference; 337/411 Test #349: sapt-sf1 ......................... Passed 5.59 sec; Start 352: stability2; 338/411 Test #352: stability2 ....................... Passed 1.67 sec; Start 353: tu1-h2o-energy; 339/411 Test #351: dft-reference .................... Passed 3.51 sec; Start 354: tu2-ch2-energy; 340/411 Test #353: tu1-h2o-energy ................... Passed 1.42 sec; Start 355: tu3-h2o-opt; 341/411 Test #354: tu2-ch2-energy ...........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:30890,Test,Test,30890,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability, #33: cc18 ............................. Passed 35.82 sec; Start 297: pubchem1; 109/411 Test #263: omp3-grad2 ....................... Passed 57.05 sec; Start 12: cbs-parser; 110/411 Test #73: cc55 ............................. Passed 42.84 sec; Start 100: ci-property; 111/411 Test #71: cc53 ............................. Passed 36.60 sec; Start 32: cc17; 112/411 Test #244: ocepa2 ........................... Passed 63.39 sec; Start 84: cdomp2-2; 113/411 Test #316: sapt2 ............................ Passed 341.30 sec; Start 80: cc8c; 114/411 Test #167: dft-b3lyp ........................ Passed 65.67 sec; Start 21: cc10; 115/411 Test #204: frac-ip-fitting .................. Passed 75.23 sec; Start 126: dfccsd-t-grad1; 116/411 Test #389: python-pubchem ................... Passed 59.41 sec; Start 148: dfomp3-grad1; 117/411 Test #250: omp2-5 ........................... Passed 68.60 sec; Start 54: cc38; 118/411 Test #82: cc9a ............................. Passed 46.42 sec; Start 125: dfccsd-grad1; 119/411 Test #32: cc17 ............................. Passed 33.17 sec; Start 276: opt11; 120/411 Test #113: dcft7 ............................ Passed 384.47 sec; Start 162: dft-grad-meta; 121/411 Test #84: cdomp2-2 ......................... Passed 50.72 sec; Start 237: nbody-he-cluster; 122/411 Test #297: pubchem1 ......................... Passed 59.76 sec; Start 170: dft1-alt; 123/411 Test #100: ci-property ...................... Passed 58.63 sec; Start 72: cc54; 124/411 Test #148: dfomp3-grad1 ..................... Passed 39.18 sec; Start 22: cc11; 125/411 Test #12: cbs-parser ....................... Passed 66.53 sec; Start 51: cc35; 126/411 Test #126: dfccsd-t-grad1 ................... Passed 49.75 sec; Start 62: cc45; 127/411 Test #21: cc10 ............................. Passed 61.98 sec; Start 348: sapt-compare; 128/411 Test #54: cc38 ............................. Passed 49.31 sec; Start 245: ocepa3; 129/411 Test #80: cc8c ............................. Passed 66.72 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:11261,Test,Test,11261,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #346: sapt-dft1 ........................ Passed 22.50 sec; Start 360: x2c1; 346/411 Test #342: soscf-dft ........................ Passed 33.42 sec; Start 361: x2c2; 347/411 Test #357: tu4-h2o-freq ..................... Passed 10.29 sec; Start 362: x2c3; 348/411 Test #361: x2c2 ............................. Passed 2.36 sec; Start 363: zaptn-nh2; 349/411 Test #362: x2c3 ............................. Passed 2.84 sec; Start 364: options1; 350/411 Test #364: options1 ......................... Passed 0.60 sec; Start 365: cubeprop-esp; 351/411 Test #363: zaptn-nh2 ........................ Passed 3.28 sec; Start 366: dft-smoke; 352/411 Test #358: tu5-sapt ......................... Passed 20.65 sec; Start 367: scf-hess1; 353/411 Test #365: cubeprop-esp ..................... Passed 8.73 sec; Start 368: scf-freq1; 354/411 Test #348: sapt-compare ..................... Passed 42.97 sec; Start 369: dft-jk; 355/411 Test #366: dft-smoke ........................ Passed 14.19 sec; Start 370: scf-coverage; 356/411 Test #360: x2c1 ............................. Passed 24.30 sec; Start 371: dft-custom-dhdf; 357/411 Test #367: scf-hess1 ........................ Passed 8.55 sec; Start 372: dft-custom-hybrid; 358/411 Test #368: scf-freq1 ........................ Passed 10.99 sec; Start 373: dft-custom-mgga; 359/411 Test #370: scf-coverage ..................... Passed 6.20 sec; Start 374: dft-custom-gga; 360/411 Test #369: dft-jk ........................... Passed 10.99 sec; Start 375: pywrap-bfs; 361/411 Test #372: dft-custom-hybrid ................ Passed 9.77 sec; Start 376: pywrap-align; 362/411 Test #376: pywrap-align ..................... Passed 4.30 sec; Start 377: pywrap-align-chiral; 363/411 Test #377: pywrap-align-chiral .............. Passed 3.38 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.36 sec; Start 379: cc-module; 365/411 Test #305: pywrap-checkrun-rohf ............. Passed 197.70 sec; Start 380: psi4numpy-cphf; 366/411 Test #380: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:33177,Test,Test,33177,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #348: sapt-compare ..................... Passed 20.49 sec; Start 166: dft-psivar; 154/404 Test #282: opt-irc-3 ........................ Passed 14.20 sec; Start 159: dft-grad-meta; 155/404 Test #148: dfomp3-grad1 ..................... Passed 3.61 sec; Start 342: soscf-dft; 156/404 Test #106: dcft-grad4 ....................... Passed 14.52 sec; Start 49: cc33; 157/404 Test #375: pywrap-bfs ....................... Passed 25.33 sec; Start 72: cc54; 158/404 Test #172: dft3 ............................. Passed 18.93 sec; Start 150: dfomp2p5-1; 159/404 Test #267: opt2 ............................. Passed 15.94 sec; Start 296: psithon2; 160/404 Test #150: dfomp2p5-1 ....................... Passed 2.94 sec; Start 163: dft-freq; 161/404 Test #49: cc33 ............................. Passed 5.98 sec; Start 272: opt6; 162/404 Test #72: cc54 ............................. Passed 5.02 sec; Start 189: fci-tdm-2; 163/404 Test #323: sapt7 ............................ Passed 18.91 sec; Start 32: cc17; 164/404 Test #166: dft-psivar ....................... Passed 17.69 sec; Start 138: dfmp2-grad5; 165/404 Test #296: psithon2 ......................... Passed 10.77 sec; Start 20: cc1; 166/404 Test #32: cc17 ............................. Passed 6.82 sec; Start 207: gibbs; 167/404 Test #159: dft-grad-meta .................... Passed 20.03 sec; Start 146: dfomp3-1; 168/404 Test #342: soscf-dft ........................ Passed 18.93 sec; Start 248: omp2-3; 169/404 Test #272: opt6 ............................. Passed 11.40 sec; Start 131: dfmp2-3; 170/404 Test #146: dfomp3-1 ......................... Passed 4.53 sec; Start 173: dft-omega; 171/404 Test #163: dft-freq ......................... Passed 17.07 sec; Start 177: extern2; 172/404 Test #20: cc1 .............................. Passed 10.62 sec; Start 109: dcft3; 173/404 Test #138: dfmp2-grad5 ...................... Passed 11.52 sec; Start 303: pywrap-checkrun-convcrit; 174/404 Test #189: fci-tdm-2 ........................ Passed 17.95 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:15170,Test,Test,15170,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #348: sapt-compare ..................... Passed 47.36 sec; Start 237: nbody-he-cluster; 92/411 Test #91: cepa-module ...................... Passed 168.47 sec; Start 144: dfomp2-grad2; 93/411 Test #178: fsapt1 ........................... Passed 2031.12 sec; Start 27: cc13c; 94/411 Test #60: cc43 ............................. Passed 136.23 sec; Start 260: omp3-4; 95/411 Test #259: omp3-3 ........................... Passed 123.04 sec; Start 56: cc4; 96/411 Test #386: cookbook-rohf-orb-rot ............ Passed 296.52 sec; Start 263: omp3-grad2; 97/411 Test #31: cc16 ............................. Passed 260.66 sec; Start 312: rasci-ne; 98/411 Test #273: opt7 ............................. Passed 56.86 sec; Start 261: omp3-5; 99/411 Test #336: scf5 ............................. Passed 50.23 sec; Start 46: cc30; 100/411 Test #77: cc8 .............................. Passed 79.14 sec; Start 244: ocepa2; 101/411 Test #312: rasci-ne ......................... Passed 32.30 sec; Start 57: cc40; 102/411 Test #237: nbody-he-cluster ................. Passed 66.39 sec; Start 106: dcft-grad4; 103/411 Test #276: opt11 ............................ Passed 74.89 sec; Start 323: sapt7; 104/411 Test #360: x2c1 ............................. Passed 98.07 sec; Start 250: omp2-5; 105/411 Test #56: cc4 .............................. Passed 77.71 sec; Start 84: cdomp2-2; 106/411 Test #323: sapt7 ............................ Passed 42.68 sec; Start 206: ghosts; 107/411 Test #106: dcft-grad4 ....................... Passed 50.01 sec; Start 34: cc19; 108/411 Test #115: dcft9 ............................ Passed 162.48 sec; Start 129: dfmp2-1; 109/411 Test #144: dfomp2-grad2 ..................... Passed 141.78 sec; Start 68: cc50; 110/411 Test #206: ghosts ........................... Passed 32.82 sec; Start 92: ci-multi; 111/411 Test #129: dfmp2-1 .......................... Passed 34.89 sec; Start 125: dfccsd-grad1; 112/411 Test #263: omp3-grad2 ....................... Passed 134.72 sec; Start 392: python,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:9751,Test,Test,9751,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #348: sapt-dft2 ........................ Passed 128.00 sec; Start 92: cepa-module; 50/412 Test #159: dfscf-bz2 ........................ Passed 149.44 sec; Start 169: dft1; 51/412 Test #75: cc5a ............................. Passed 46.97 sec; Start 26: cc13a; 52/412 Test #184: isapt2 ........................... Passed 124.37 sec; Start 114: dcft7; 53/412 Test #182: fsapt-allterms ................... Passed 584.96 sec; Start 206: frac-traverse; 54/412 Test #92: cepa-module ...................... Passed 39.12 sec; Start 317: sapt2; 55/412 Test #155: dft-grad-lr2 ..................... Passed 99.99 sec; Start 319: sapt4; 56/412 Test #169: dft1 ............................. Passed 105.11 sec; Start 326: scf-bz2; 57/412 Test #114: dcft7 ............................ Passed 220.51 sec; Start 372: dft-custom-dhdf; 58/412 Test #326: scf-bz2 .......................... Passed 127.87 sec; Start 281: opt-irc-1; 59/412 Test #206: frac-traverse .................... Passed 215.39 sec; Start 260: omp3-3; 60/412 Test #26: cc13a ............................ Passed 258.97 sec; Start 17: cbs-xtpl-opt; 61/412 Test #260: omp3-3 ........................... Passed 29.11 sec; Start 231: mp2-module; 62/412 Test #281: opt-irc-1 ........................ Passed 69.46 sec; Start 280: opt14; 63/412 Test #17: cbs-xtpl-opt ..................... Passed 43.31 sec; Start 19: cbs-xtpl-nbody; 64/412 Test #231: mp2-module ....................... Passed 49.95 sec; Start 76: cc6; 65/412 Test #372: dft-custom-dhdf .................. Passed 94.74 sec; Start 27: cc13b; 66/412 Test #19: cbs-xtpl-nbody ................... Passed 29.27 sec; Start 31: cc15; 67/412 Test #27: cc13b ............................ Passed 12.53 sec; Start 70: cc51; 68/412 Test #279: opt13 ............................ Passed 803.57 sec; Start 28: cc13c; 69/412 Test #31: cc15 ............................. Passed 17.78 sec; Start 318: sapt3; 70/412 Test #28: cc13c ............................ Passed 24.56 sec; Start 145: dfomp2-grad2; 71/412 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:5752,Test,Test,5752,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability, #34: cc18 ............................. Passed 37.73 sec; Start 126: dfccsd-grad1; 172/412 Test #167: dft-psivar ....................... Passed 44.26 sec; Start 23: cc11; 173/412 Test #208: gibbs ............................ Passed 33.33 sec; Start 323: sapt-dft-lrc; 174/412 Test #361: x2c1 ............................. Passed 24.98 sec; Start 52: cc35; 175/412 Test #273: opt6 ............................. Passed 34.38 sec; Start 203: fnocc4; 176/412 Test #304: pywrap-checkrun-convcrit ......... Passed 37.57 sec; Start 393: python-cc54; 177/412 Test #359: tu5-sapt ......................... Passed 44.53 sec; Start 248: omp2-2; 178/412 Test #38: cc22 ............................. Passed 39.20 sec; Start 22: cc10; 179/412 Test #127: dfccsd-t-grad1 ................... Passed 43.90 sec; Start 153: dfomp2p5-grad1; 180/412 Test #377: pywrap-align ..................... Passed 64.83 sec; Start 50: cc33; 181/412 Test #178: extern2 .......................... Passed 49.89 sec; Start 63: cc45; 182/412 Test #253: omp2-grad2 ....................... Passed 49.66 sec; Start 51: cc34; 183/412 Test #16: cbs-xtpl-gradient ................ Passed 52.11 sec; Start 49: cc32; 184/412 Test #126: dfccsd-grad1 ..................... Passed 51.95 sec; Start 166: dft-grad2; 185/412 Test #23: cc11 ............................. Passed 52.87 sec; Start 149: dfomp3-grad1; 186/412 Test #52: cc35 ............................. Passed 51.53 sec; Start 53: cc36; 187/412 Test #323: sapt-dft-lrc ..................... Passed 57.22 sec; Start 322: sapt-dft-api; 188/412 Test #203: fnocc4 ........................... Passed 53.28 sec; Start 110: dcft3; 189/412 Test #393: python-cc54 ...................... Passed 48.71 sec; Start 129: dfccsdat1; 190/412 Test #248: omp2-2 ........................... Passed 47.14 sec; Start 154: dft-grad-lr1; 191/412 Test #378: pywrap-align-chiral .............. Passed 89.09 sec; Start 202: fnocc3; 192/412 Test #22: cc10 ............................. Passed 49.70 sec; Start 170: d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:17155,Test,Test,17155,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability, #359: tu6-cp-ne2 ....................... Passed 21.60 sec; Start 360: x2c1; 361/411 Test #360: x2c1 ............................. Passed 5.53 sec; Start 361: x2c2; 362/411 Test #361: x2c2 ............................. Passed 1.63 sec; Start 362: x2c3; 363/411 Test #362: x2c3 ............................. Passed 1.69 sec; Start 363: zaptn-nh2; 364/411 Test #363: zaptn-nh2 ........................ Passed 2.10 sec; Start 364: options1; 365/411 Test #364: options1 ......................... Passed 0.66 sec; Start 365: cubeprop-esp; 366/411 Test #365: cubeprop-esp ..................... Passed 7.93 sec; Start 366: dft-smoke; 367/411 Test #366: dft-smoke ........................ Passed 12.12 sec; Start 367: scf-hess1; 368/411 Test #367: scf-hess1 ........................ Passed 5.76 sec; Start 368: scf-freq1; 369/411 Test #368: scf-freq1 ........................ Passed 6.73 sec; Start 369: dft-jk; 370/411 Test #369: dft-jk ........................... Passed 8.47 sec; Start 370: scf-coverage; 371/411 Test #370: scf-coverage ..................... Passed 2.89 sec; Start 371: dft-custom-dhdf; 372/411 Test #371: dft-custom-dhdf .................. Passed 75.42 sec; Start 372: dft-custom-hybrid; 373/411 Test #372: dft-custom-hybrid ................ Passed 8.58 sec; Start 373: dft-custom-mgga; 374/411 Test #373: dft-custom-mgga .................. Passed 157.12 sec; Start 374: dft-custom-gga; 375/411 Test #374: dft-custom-gga ................... Passed 23.71 sec; Start 375: pywrap-bfs; 376/411 Test #375: pywrap-bfs ....................... Passed 21.31 sec; Start 376: pywrap-align; 377/411 Test #376: pywrap-align ..................... Passed 4.41 sec; Start 377: pywrap-align-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.25 sec; Start 378: mints12; 379/411 Test #378: mints12 .......................... Passed 1.27 sec; Start 379: cc-module; 380/411 Test #379: cc-module ........................ Passed 14.70 sec; Start 380: psi4numpy-cphf; 381/411 Test #380: psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:34130,Test,Test,34130,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability, #359: tu6-cp-ne2 ....................... Passed 26.31 sec; Start 360: x2c1; 361/411 Test #360: x2c1 ............................. Passed 5.86 sec; Start 361: x2c2; 362/411 Test #361: x2c2 ............................. Passed 1.73 sec; Start 362: x2c3; 363/411 Test #362: x2c3 ............................. Passed 1.67 sec; Start 363: zaptn-nh2; 364/411 Test #363: zaptn-nh2 ........................ Passed 2.99 sec; Start 364: options1; 365/411 Test #364: options1 ......................... Passed 0.67 sec; Start 365: cubeprop-esp; 366/411 Test #365: cubeprop-esp ..................... Passed 8.94 sec; Start 366: dft-smoke; 367/411 Test #366: dft-smoke ........................ Passed 11.42 sec; Start 367: scf-hess1; 368/411 Test #367: scf-hess1 ........................ Passed 6.01 sec; Start 368: scf-freq1; 369/411 Test #368: scf-freq1 ........................ Passed 7.94 sec; Start 369: dft-jk; 370/411 Test #369: dft-jk ........................... Passed 9.26 sec; Start 370: scf-coverage; 371/411 Test #370: scf-coverage ..................... Passed 2.64 sec; Start 371: dft-custom-dhdf; 372/411 Test #371: dft-custom-dhdf .................. Passed 70.66 sec; Start 372: dft-custom-hybrid; 373/411 Test #372: dft-custom-hybrid ................ Passed 9.61 sec; Start 373: dft-custom-mgga; 374/411 Test #373: dft-custom-mgga .................. Passed 152.10 sec; Start 374: dft-custom-gga; 375/411 Test #374: dft-custom-gga ................... Passed 25.40 sec; Start 375: pywrap-bfs; 376/411 Test #375: pywrap-bfs ....................... Passed 24.76 sec; Start 376: pywrap-align; 377/411 Test #376: pywrap-align ..................... Passed 6.81 sec; Start 377: pywrap-align-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.20 sec; Start 378: mints12; 379/411 Test #378: mints12 .......................... Passed 1.19 sec; Start 379: cc-module; 380/411 Test #379: cc-module ........................ Passed 38.08 sec; Start 380: psi4numpy-cphf; 381/411 Test #380: psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:34159,Test,Test,34159,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability, #359: tu6-cp-ne2 ....................... Passed 74.91 sec; Start 375: pywrap-bfs; 102/411 Test #273: opt7 ............................. Passed 36.48 sec; Start 149: dfomp3-grad2; 103/411 Test #1: adc1 ............................. Passed 24.56 sec; Start 55: cc39; 104/411 Test #156: dft-b2plyp ....................... Passed 25.95 sec; Start 34: cc19; 105/411 Test #264: opt-lindep-change ................ Passed 25.13 sec; Start 65: cc48; 106/411 Test #173: dft-omega ........................ Passed 23.97 sec; Start 379: cc-module; 107/411 Test #55: cc39 ............................. Passed 13.65 sec; Start 299: pywrap-alias; 108/411 Test #375: pywrap-bfs ....................... Passed 25.71 sec; Start 27: cc13c; 109/411 Test #149: dfomp3-grad2 ..................... Passed 26.64 sec; Start 326: scf-ecp; 110/411 Test #178: fsapt1 ........................... Passed 2140.46 sec; Start 104: dcft-grad2; 111/411 Test #34: cc19 ............................. Passed 36.87 sec; Start 91: cepa-module; 112/411 Test #65: cc48 ............................. Passed 34.57 sec; Start 358: tu5-sapt; 113/411 Test #326: scf-ecp .......................... Passed 27.04 sec; Start 54: cc38; 114/411 Test #358: tu5-sapt ......................... Passed 21.52 sec; Start 274: opt8; 115/411 Test #299: pywrap-alias ..................... Passed 48.68 sec; Start 166: dft-psivar; 116/411 Test #27: cc13c ............................ Passed 62.03 sec; Start 336: scf5; 117/411 Test #54: cc38 ............................. Passed 25.71 sec; Start 163: dft-freq; 118/411 Test #166: dft-psivar ....................... Passed 23.63 sec; Start 189: fci-tdm-2; 119/411 Test #274: opt8 ............................. Passed 27.54 sec; Start 346: sapt-dft1; 120/411 Test #163: dft-freq ......................... Passed 21.30 sec; Start 144: dfomp2-grad2; 121/411 Test #91: cepa-module ...................... Passed 60.97 sec; Start 30: cc15; 122/411 Test #104: dcft-grad2 ....................... Passed 70.28 sec; Start 261,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:10518,Test,Test,10518,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability, #360: tu6-cp-ne2 ....................... Passed 91.83 sec; Start 11: cbs-delta-energy; 45/412 Test #206: frac-traverse .................... Passed 230.60 sec; Start 70: cc51; 46/412 Test #282: opt-irc-2 ........................ Passed 152.10 sec; Start 168: dft-b3lyp; 47/412 Test #372: dft-custom-dhdf .................. Passed 93.71 sec; Start 320: sapt5; 48/412 Test #71: cc52 ............................. Passed 107.19 sec; Start 293: psimrcc-fd-freq2; 49/412 Test #280: opt14 ............................ Passed 84.19 sec; Start 48: cc31; 50/412 Test #318: sapt3 ............................ Passed 85.71 sec; Start 281: opt-irc-1; 51/412 Test #29: cc13d ............................ Passed 96.43 sec; Start 28: cc13c; 52/412 Test #26: cc13a ............................ Passed 337.24 sec; Start 205: frac-ip-fitting; 53/412 Test #387: cookbook-rohf-orb-rot ............ Passed 106.36 sec; Start 32: cc16; 54/412 Test #70: cc51 ............................. Passed 74.18 sec; Start 116: dcft9; 55/412 Test #114: dcft7 ............................ Passed 326.42 sec; Start 76: cc6; 56/412 Test #168: dft-b3lyp ........................ Passed 73.09 sec; Start 75: cc5a; 57/412 Test #11: cbs-delta-energy ................. Passed 115.53 sec; Start 92: cepa-module; 58/412 Test #18: cbs-xtpl-func .................... Passed 1080.73 sec; Start 31: cc15; 59/412 Test #279: opt13 ............................ Passed 828.21 sec; Start 17: cbs-xtpl-opt; 60/412 Test #320: sapt5 ............................ Passed 79.38 sec; Start 27: cc13b; 61/412 Test #293: psimrcc-fd-freq2 ................. Passed 75.55 sec; Start 62: cc44; 62/412 Test #205: frac-ip-fitting .................. Passed 68.55 sec; Start 157: dfomp2p5-grad2; 63/412 Test #28: cc13c ............................ Passed 80.48 sec; Start 298: pubchem1; 64/412 Test #281: opt-irc-1 ........................ Passed 92.68 sec; Start 251: omp2-5; 65/412 Test #116: dcft9 ............................ Passed 80.09 sec; Start 20: cbs-xtpl-wrap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:5476,Test,Test,5476,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #360: x2c1 ............................. Passed 82.77 sec; Start 313: rasscf-sp; 228/411 Test #73: cc55 ............................. Passed 93.94 sec; Start 21: cc10; 229/411 Test #23: cc12 ............................. Passed 47.84 sec; Start 247: omp2-2; 230/411 Test #81: cc9 .............................. Passed 116.49 sec; Start 93: cisd-h2o+-0; 231/411 Test #82: cc9a ............................. Passed 113.55 sec; Start 79: cc8b; 232/411 Test #77: cc8 .............................. Passed 106.26 sec; Start 254: omp2p5-2; 233/411 Test #80: cc8c ............................. Passed 94.57 sec; Start 117: dfcasscf-sa-sp; 234/411 Test #93: cisd-h2o+-0 ...................... Passed 5.15 sec; Start 339: scf-property; 235/411 Test #313: rasscf-sp ........................ Passed 40.25 sec; Start 99: cisd-sp-2; 236/411 Test #247: omp2-2 ........................... Passed 30.55 sec; Start 9: castup2; 237/411 Test #117: dfcasscf-sa-sp ................... Passed 4.12 sec; Start 54: cc38; 238/411 Test #140: dfomp2-2 ......................... Passed 50.51 sec; Start 187: fci-h2o-fzcv; 239/411 Test #339: scf-property ..................... Passed 4.60 sec; Start 3: casscf-fzc-sp; 240/411 Test #99: cisd-sp-2 ........................ Passed 4.60 sec; Start 198: freq-isotope2; 241/411 Test #21: cc10 ............................. Passed 32.92 sec; Start 84: cdomp2-2; 242/411 Test #187: fci-h2o-fzcv ..................... Passed 3.84 sec; Start 392: python-cc54; 243/411 Test #254: omp2p5-2 ......................... Passed 12.79 sec; Start 78: cc8a; 244/411 Test #198: freq-isotope2 .................... Passed 10.53 sec; Start 125: dfccsd-grad1; 245/411 Test #9: castup2 .......................... Passed 12.44 sec; Start 329: scf-guess-read2; 246/411 Test #329: scf-guess-read2 .................. Passed 6.98 sec; Start 94: cisd-h2o+-1; 247/411 Test #3: casscf-fzc-sp .................... Passed 18.71 sec; Start 142: dfomp2-4; 248/411 Test #79: cc8b ............................. Passed 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:22245,Test,Test,22245,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12; 154/415 Test #9: castup2 .......................... Passed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....................... Passed 116.86 sec; Start 38: cc21; 162/415 Test #19: cbs-xtpl-nbody ................... Passed 141.24 sec; Start 39: cc22; 163/415 Test #17: cbs-xtpl-opt ..............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:14631,Test,Test,14631,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability, #375: pywrap-bfs ....................... Passed 23.88 sec; Start 152: dfomp2p5-grad1; 158/411 Test #148: dfomp3-grad1 ..................... Passed 16.19 sec; Start 189: fci-tdm-2; 159/411 Test #12: cbs-parser ....................... Passed 28.71 sec; Start 33: cc18; 160/411 Test #202: fnocc4 ........................... Passed 22.98 sec; Start 163: dft-freq; 161/411 Test #207: gibbs ............................ Passed 21.15 sec; Start 16: cbs-xtpl-gradient; 162/411 Test #54: cc38 ............................. Passed 19.13 sec; Start 49: cc33; 163/411 Test #152: dfomp2p5-grad1 ................... Passed 14.78 sec; Start 172: dft3; 164/411 Test #51: cc35 ............................. Passed 18.61 sec; Start 277: opt12; 165/411 Test #189: fci-tdm-2 ........................ Passed 19.97 sec; Start 346: sapt-dft1; 166/411 Test #33: cc18 ............................. Passed 19.88 sec; Start 360: x2c1; 167/411 Test #163: dft-freq ......................... Passed 20.91 sec; Start 252: omp2-grad2; 168/411 Test #49: cc33 ............................. Passed 15.20 sec; Start 322: sapt-dft-lrc; 169/411 Test #16: cbs-xtpl-gradient ................ Passed 18.76 sec; Start 272: opt6; 170/411 Test #172: dft3 ............................. Passed 19.83 sec; Start 150: dfomp2p5-1; 171/411 Test #360: x2c1 ............................. Passed 12.27 sec; Start 358: tu5-sapt; 172/411 Test #277: opt12 ............................ Passed 20.43 sec; Start 32: cc17; 173/411 Test #252: omp2-grad2 ....................... Passed 12.52 sec; Start 267: opt2; 174/411 Test #346: sapt-dft1 ........................ Passed 21.76 sec; Start 248: omp2-3; 175/411 Test #150: dfomp2p5-1 ....................... Passed 10.49 sec; Start 303: pywrap-checkrun-convcrit; 176/411 Test #322: sapt-dft-lrc ..................... Passed 18.93 sec; Start 146: dfomp3-1; 177/411 Test #272: opt6 ............................. Passed 19.96 sec; Start 138: dfmp2-grad5; 178/411 Test #32: cc17 ............................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:15679,Test,Test,15679,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability, #377: dft-smoke ........................ Passed 22.20 sec; Start 201: freq-isotope2; 63/415 Test #252: ocepa1 ........................... Passed 8.85 sec; Start 194: fcidump; 64/415 Test #260: omp2-grad1 ....................... Passed 9.57 sec; Start 266: omp3-1; 65/415 Test #132: dfmp2-1 .......................... Passed 16.83 sec; Start 334: sapt8; 66/415 Test #194: fcidump .......................... Passed 7.22 sec; Start 226: molden1; 67/415 Test #142: dfomp2-1 ......................... Passed 12.15 sec; Start 274: opt1; 68/415 Test #103: cubeprop ......................... Passed 12.58 sec; Start 227: molden2; 69/415 Test #368: tu4-h2o-freq ..................... Passed 13.90 sec; Start 8: castup1; 70/415 Test #201: freq-isotope2 .................... Passed 11.36 sec; Start 369: tu5-sapt; 71/415 Test #172: dft-vv10 ......................... Passed 16.42 sec; Start 160: dfrasscf-sp; 72/415 Test #357: sapt-dft1 ........................ Passed 14.97 sec; Start 292: opt-freeze-coords; 73/415 Test #293: opt-full-hess-every .............. Passed 15.99 sec; Start 305: psithon1; 74/415 Test #8: castup1 .......................... Passed 4.90 sec; Start 137: dfmp2-grad1; 75/415 Test #266: omp3-1 ........................... Passed 10.08 sec; Start 376: cubeprop-esp; 76/415 Test #274: opt1 ............................. Passed 11.75 sec; Start 325: sapt1; 77/415 Test #226: molden1 .......................... Passed 14.09 sec; Start 378: scf-hess1; 78/415 Test #227: molden2 .......................... Passed 12.71 sec; Start 239: mpn-bh; 79/415 Test #292: opt-freeze-coords ................ Passed 8.13 sec; Start 234: mp2p5-grad1; 80/415 Test #334: sapt8 ............................ Passed 16.61 sec; Start 123: dfccd1; 81/415 Test #369: tu5-sapt ......................... Passed 12.10 sec; Start 120: dfcasscf-sa-sp; 82/415 Test #376: cubeprop-esp ..................... Passed 7.51 sec; Start 404: python-3-index-transforms; 83/415 Test #137: dfmp2-grad1 ...................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:7140,Test,Test,7140,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability, #379: cc-module ........................ Passed 306.49 sec; Start 161: dft-grad-lr2; 44/411 Test #13: cbs-xtpl-alpha ................... Passed 354.70 sec; Start 25: cc13a; 45/411 Test #31: cc16 ............................. Passed 243.41 sec; Start 113: dcft7; 46/411 Test #161: dft-grad-lr2 ..................... Passed 104.85 sec; Start 205: frac-traverse; 47/411 Test #70: cc52 ............................. Passed 164.44 sec; Start 316: sapt2; 48/411 Test #386: cookbook-rohf-orb-rot ............ Passed 284.29 sec; Start 318: sapt4; 49/411 Test #28: cc13d ............................ Passed 209.13 sec; Start 325: scf-bz2; 50/411 Test #24: cc13 ............................. Passed 257.74 sec; Start 168: dft1; 51/411 Test #205: frac-traverse .................... Passed 211.75 sec; Start 371: dft-custom-dhdf; 52/411 Test #325: scf-bz2 .......................... Passed 122.09 sec; Start 58: cc41; 53/411 Test #168: dft1 ............................. Passed 104.02 sec; Start 75: cc6; 54/411 Test #371: dft-custom-dhdf .................. Passed 89.70 sec; Start 279: opt14; 55/411 Test #75: cc6 .............................. Passed 81.73 sec; Start 69: cc51; 56/411 Test #58: cc41 ............................. Passed 85.94 sec; Start 60: cc43; 57/411 Test #113: dcft7 ............................ Passed 343.68 sec; Start 317: sapt3; 58/411 Test #25: cc13a ............................ Passed 404.79 sec; Start 91: cepa-module; 59/411 Test #316: sapt2 ............................ Passed 352.75 sec; Start 319: sapt5; 60/411 Test #279: opt14 ............................ Passed 78.21 sec; Start 302: pywrap-cbs1; 61/411 Test #69: cc51 ............................. Passed 89.27 sec; Start 292: psimrcc-fd-freq2; 62/411 Test #317: sapt3 ............................ Passed 77.12 sec; Start 280: opt-irc-1; 63/411 Test #60: cc43 ............................. Passed 117.60 sec; Start 115: dcft9; 64/411 Test #319: sapt5 ............................ Passed 77.33 sec; Start 74: cc5a; 65/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:5211,Test,Test,5211,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #379: cc-module ........................ Passed 912.65 sec; Start 282: opt-irc-3; 110/411 Test #321: sapt-dft-api ..................... Passed 20.22 sec; Start 267: opt2; 111/411 Test #267: opt2 ............................. Passed 41.41 sec; Start 272: opt6; 112/411 Test #66: cc49 ............................. Passed 169.63 sec; Start 160: dft-grad-lr1; 113/411 Test #282: opt-irc-3 ........................ Passed 71.40 sec; Start 46: cc30; 114/411 Test #160: dft-grad-lr1 ..................... Passed 18.13 sec; Start 28: cc13d; 115/411 Test #299: pywrap-alias ..................... Passed 246.55 sec; Start 165: dft-grad2; 116/411 Test #272: opt6 ............................. Passed 55.20 sec; Start 315: sapt1; 117/411 Test #165: dft-grad2 ........................ Passed 16.23 sec; Start 290: psimrcc-ccsd_t-4; 118/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.60 sec; Start 58: cc41; 119/411 Test #315: sapt1 ............................ Passed 22.40 sec; Start 202: fnocc4; 120/411 Test #202: fnocc4 ........................... Passed 82.18 sec; Start 91: cepa-module; 121/411 Test #302: pywrap-cbs1 ...................... Passed 557.46 sec; Start 169: dft-vv10; 122/411 Test #169: dft-vv10 ......................... Passed 30.86 sec; Start 60: cc43; 123/411 Test #24: cc13 ............................. Passed 1125.76 sec; Start 218: mints8; 124/411 Test #218: mints8 ........................... Passed 18.42 sec; Start 196: fd-gradient; 125/411 Test #386: cookbook-rohf-orb-rot ............ Passed 956.85 sec; Start 340: soscf-large; 126/411 Test #46: cc30 ............................. Passed 321.69 sec; Start 164: dft-grad1; 127/411 Test #340: soscf-large ...................... Passed 15.63 sec; Start 92: ci-multi; 128/411 Test #164: dft-grad1 ........................ Passed 15.97 sec; Start 200: fnocc2; 129/411 Test #196: fd-gradient ...................... Passed 85.81 sec; Start 57: cc40; 130/411 Test #92: ci-multi ......................... Passed 103.97 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:11328,Test,Test,11328,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability," #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test #296: pywrap-all ....................... Passed 973.84 sec; 396/401 Test #86: cepa1 ............................ Passed 4.52 sec; 397/401 Test #391: python-vibanalysis ............... Passed 976.98 sec; 398/401 Test #360: cubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 61.70 sec*proc (2 tests); autotest = 1698.69 sec*proc (25 tests); cart = 9530.61 sec*proc (123 tests); cas = 29.65 sec*proc (1 test); casscf = 157.01 sec*proc (11 tests); cbs = 2162.96 sec*proc (10 tests); cc = 9085.75 sec*proc (64 tests); cdomp2 = 59.27 sec*proc (2 tests); cepa = 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:36787,Test,Test,36787,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability," #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test #296: pywrap-all ....................... Passed 973.84 sec; 396/401 Test #86: cepa1 ............................ Passed 4.52 sec; 397/401 Test #391: python-vibanalysis ............... Passed 976.98 sec; 398/401 Test #360: cubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 61.70 sec*proc (2 tests); autotest = 1698.69 sec*proc (25 tests); cart =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:36503,Test,Test,36503,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #381: scf-coverage ..................... Passed 12.39 sec; Start 389: mints12; 391/415 Test #389: mints12 .......................... Passed 1.73 sec; Start 391: psi4numpy-cphf; 392/415 Test #358: sapt-dft2 ........................ Passed 40.15 sec; Start 396: psi4numpy-fci; 393/415 Test #391: psi4numpy-cphf ................... Passed 2.71 sec; Start 397: cookbook-rohf-orb-rot; 394/415 Test #383: dft-custom-hybrid ................ Passed 10.58 sec; Start 400: python-pubchem; 395/415 Test #396: psi4numpy-fci .................... Passed 11.41 sec; Start 409: json-v11-gradient; 396/415 Test #409: json-v11-gradient ................ Passed 2.83 sec; Start 411: json-schema-1-ghost; 397/415 Test #411: json-schema-1-ghost .............. Passed 2.10 sec; Start 412: json-schema-1-orient; 398/415 Test #412: json-schema-1-orient ............. Passed 3.64 sec; Start 413: json-schema-1-throws; 399/415 Test #385: dft-custom-gga ................... Passed 28.52 sec; Start 415: json-schema-1-properties; 400/415 Test #413: json-schema-1-throws ............. Passed 0.92 sec; 401/415 Test #415: json-schema-1-properties ......... Passed 2.25 sec; 402/415 Test #382: dft-custom-dhdf .................. Passed 37.28 sec; 403/415 Test #400: python-pubchem ................... Passed 31.88 sec; 404/415 Test #290: opt-irc-2 ........................ Passed 211.86 sec; 405/415 Test #384: dft-custom-mgga .................. Passed 56.51 sec; 406/415 Test #249: ocepa-freq1 ...................... Passed 749.07 sec; 407/415 Test #106: dcft-grad1 ....................... Passed 1347.53 sec; 408/415 Test #397: cookbook-rohf-orb-rot ............ Passed 443.85 sec; 409/415 Test #148: dfomp2-grad3 ..................... Passed 1213.44 sec; 410/415 Test #370: tu6-cp-ne2 ....................... Passed 555.15 sec; 411/415 Test #315: pywrap-checkrun-rohf ............. Passed 668.23 sec; 412/415 Test #113: dcft4 ............................ Passed 1477.74 sec; 413/415 Test #316: pywrap-checkrun-uhf ..............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:37688,Test,Test,37688,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability, #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start 215: mints4; 393/411 Test #175: docs-dft ......................... Passed 0.61 sec; Start 174: docs-bases; 394/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 402: json-schema-1-throws; 395/411 Test #411: skeletonwavefunction ............. Passed 2.89 sec; Start 87: cepa1; 396/411 Test #311: rasci-h2o ........................ Passed 4.54 sec; 397/411 Test #211: mcscf3 ........................... Passed 1.29 sec; 398/411 Test #334: scf3 ............................. Passed 1.23 sec; 399/411 Test #208: matrix1 .......................... Passed 0.57 sec; 400/411 Test #409: skeletonscf ...................... Passed 0.61 sec; 401/411 Test #215: mints4 ........................... Passed 0.52 sec; 402/411 Test #174: docs-bases ....................... Passed 0.52 sec; 403/411 Test #212: mints1 ........................... Passed 0.56 sec; 404/411 Test #188: fci-tdm .......................... Passed 3.64 sec; 405/411 Test #402: json-schema-1-throws ............. Passed 0.61 sec; 406/411 Test #408: skeletonmointegrals .............. Passed 4.60 sec; 407/411 Test #410: skeleton,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:37062,Test,Test,37062,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #390: python-mints9 .................... Passed 1.89 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 2.96 sec; Start 392: python-cc54; 386/411 Test #389: python-pubchem ................... Passed 50.14 sec; Start 393: python-3-index-transforms; 387/411 Test #373: dft-custom-mgga .................. Passed 175.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.81 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.53 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 10.54 sec; Start 399: json-schema-1-energy; 392/411 Test #398: json-v11-gradient ................ Passed 2.05 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.58 sec; Start 401: json-schema-1-orient; 394/411 Test #399: json-schema-1-energy ............. Passed 4.08 sec; Start 402: json-schema-1-throws; 395/411 Test #401: json-schema-1-orient ............. Passed 2.72 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.76 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.78 sec; Start 406: skeletonaointegrals; 399/411 Test #392: python-cc54 ...................... Passed 25.14 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.92 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 2.03 sec; Start 409: skeletonscf; 402/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 410: skeletonsointegrals; 403/411 Test #407: skeletondfmp2 .................... Passed 1.80 sec; Start 411: skelet,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:36825,Test,Test,36825,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability, #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.35 sec; Start 409: skeletonscf; 394/411 Test #408: skeletonmointegrals .............. Passed 1.63 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 1.86 sec; 397/411 Test #410: skeletonsointegrals .............. Passed 1.57 sec; 398/411 Test #411: skeletonwavefunction ............. Passed 1.46 sec; 399/411 Test #347: sapt-dft2 ........................ Passed 125.56 sec; 400/411 Test #359: tu6-cp-ne2 ....................... Passed 116.70 sec; 401/411 Test #371: dft-custom-dhdf .................. Passed 91.12 sec; 402/411 Test #389: python-pubchem ................... Passed 52.55 sec; 403/411 Test #379: cc-module ........................ Passed 90.55 sec; 404/411 Test #386: cookbook-rohf-orb-rot ............ Passed 85.56 sec; 405/411 Test #306: pywrap-checkrun-uhf .............. Passed 281.57 sec; 406/411 Test #300: pywrap-all ....................... Passed 311.77 sec; 407/411 Test #227: mp2-def2 ......................... Passed 424.41 sec; 408/411 Test #304: pywrap-checkrun-rhf .............. Passed 308.03 sec; 409/411 Test #373: dft-custom-mgga .................. Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:37182,Test,Test,37182,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #392: python-cc54 ...................... Passed 32.60 sec; Start 142: dfomp2-4; 154/411 Test #375: pywrap-bfs ....................... Passed 25.26 sec; Start 274: opt8; 155/411 Test #16: cbs-xtpl-gradient ................ Passed 28.95 sec; Start 126: dfccsd-t-grad1; 156/411 Test #196: fd-gradient ...................... Passed 34.78 sec; Start 54: cc38; 157/411 Test #156: dft-b2plyp ....................... Passed 25.08 sec; Start 173: dft-omega; 158/411 Test #200: fnocc2 ........................... Passed 62.79 sec; Start 166: dft-psivar; 159/411 Test #51: cc35 ............................. Passed 36.39 sec; Start 32: cc17; 160/411 Test #166: dft-psivar ....................... Passed 25.32 sec; Start 12: cbs-parser; 161/411 Test #173: dft-omega ........................ Passed 26.99 sec; Start 163: dft-freq; 162/411 Test #142: dfomp2-4 ......................... Passed 39.72 sec; Start 358: tu5-sapt; 163/411 Test #126: dfccsd-t-grad1 ................... Passed 37.57 sec; Start 48: cc32; 164/411 Test #274: opt8 ............................. Passed 38.33 sec; Start 346: sapt-dft1; 165/411 Test #54: cc38 ............................. Passed 35.68 sec; Start 189: fci-tdm-2; 166/411 Test #32: cc17 ............................. Passed 32.96 sec; Start 172: dft3; 167/411 Test #163: dft-freq ......................... Passed 23.84 sec; Start 50: cc34; 168/411 Test #358: tu5-sapt ......................... Passed 21.03 sec; Start 313: rasscf-sp; 169/411 Test #48: cc32 ............................. Passed 18.61 sec; Start 322: sapt-dft-lrc; 170/411 Test #189: fci-tdm-2 ........................ Passed 20.74 sec; Start 252: omp2-grad2; 171/411 Test #346: sapt-dft1 ........................ Passed 22.43 sec; Start 267: opt2; 172/411 Test #50: cc34 ............................. Passed 13.15 sec; Start 272: opt6; 173/411 Test #313: rasscf-sp ........................ Passed 13.81 sec; Start 245: ocepa3; 174/411 Test #12: cbs-parser ....................... Passed 38.49 sec; Start 202: fno,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:15291,Test,Test,15291,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #393: python-3-index-transforms ........ Passed 10.01 sec; Start 365: cubeprop-esp; 245/411 Test #268: opt2-fd .......................... Passed 8.69 sec; Start 180: fsapt-terms; 246/411 Test #124: dfccsdl1 ......................... Passed 2.51 sec; Start 10: castup3; 247/411 Test #372: dft-custom-hybrid ................ Passed 9.23 sec; Start 88: cepa2; 248/411 Test #201: fnocc3 ........................... Passed 7.24 sec; Start 266: opt1-fd; 249/411 Test #88: cepa2 ............................ Passed 2.56 sec; Start 132: dfmp2-4; 250/411 Test #10: castup3 .......................... Passed 6.02 sec; Start 247: omp2-2; 251/411 Test #197: freq-isotope1 .................... Passed 9.03 sec; Start 137: dfmp2-grad4; 252/411 Test #291: psimrcc-fd-freq1 ................. Passed 11.03 sec; Start 150: dfomp2p5-1; 253/411 Test #365: cubeprop-esp ..................... Passed 8.78 sec; Start 270: opt4; 254/411 Test #180: fsapt-terms ...................... Passed 8.64 sec; Start 367: scf-hess1; 255/411 Test #137: dfmp2-grad4 ...................... Passed 4.16 sec; Start 310: rasci-c2-active; 256/411 Test #132: dfmp2-4 .......................... Passed 5.34 sec; Start 158: dft-ghost; 257/411 Test #266: opt1-fd .......................... Passed 6.12 sec; Start 108: dcft2; 258/411 Test #247: omp2-2 ........................... Passed 6.61 sec; Start 139: dfomp2-1; 259/411 Test #150: dfomp2p5-1 ....................... Passed 6.20 sec; Start 9: castup2; 260/411 Test #108: dcft2 ............................ Passed 2.06 sec; Start 127: dfccsdt1; 261/411 Test #310: rasci-c2-active .................. Passed 3.72 sec; Start 3: casscf-fzc-sp; 262/411 Test #139: dfomp2-1 ......................... Passed 2.10 sec; Start 141: dfomp2-3; 263/411 Test #127: dfccsdt1 ......................... Passed 2.35 sec; Start 154: dfrasscf-sp; 264/411 Test #367: scf-hess1 ........................ Passed 7.58 sec; Start 86: cepa0-grad2; 265/411 Test #270: opt4 ............................. Passed 7.69 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:23726,Test,Test,23726,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #394: python-3-index-transforms ........ Passed 21.52 sec; Start 10: castup3; 249/412 Test #99: cisd-sp .......................... Passed 20.72 sec; Start 3: casscf-fzc-sp; 250/412 Test #102: cubeprop ......................... Passed 22.63 sec; Start 158: dfrasscf-sp; 251/412 Test #336: scf4 ............................. Passed 17.22 sec; Start 271: opt4; 252/412 Test #123: dfccd-grad1 ...................... Passed 13.91 sec; Start 296: psithon1; 253/412 Test #9: castup2 .......................... Passed 15.56 sec; Start 15: cbs-xtpl-freq; 254/412 Test #199: freq-isotope2 .................... Passed 15.99 sec; Start 368: scf-hess1; 255/412 Test #10: castup3 .......................... Passed 16.79 sec; Start 227: mp2-1; 256/412 Test #3: casscf-fzc-sp .................... Passed 14.47 sec; Start 133: dfmp2-4; 257/412 Test #158: dfrasscf-sp ...................... Passed 14.90 sec; Start 89: cepa2; 258/412 Test #296: psithon1 ......................... Passed 16.17 sec; Start 125: dfccsdl1; 259/412 Test #271: opt4 ............................. Passed 20.97 sec; Start 256: omp2p5-grad1; 260/412 Test #15: cbs-xtpl-freq .................... Passed 19.08 sec; Start 366: cubeprop-esp; 261/412 Test #227: mp2-1 ............................ Passed 17.39 sec; Start 140: dfomp2-1; 262/412 Test #368: scf-hess1 ........................ Passed 20.68 sec; Start 87: cepa0-grad2; 263/412 Test #89: cepa2 ............................ Passed 15.60 sec; Start 109: dcft2; 264/412 Test #133: dfmp2-4 .......................... Passed 20.55 sec; Start 84: cdomp2-1; 265/412 Test #125: dfccsdl1 ......................... Passed 15.16 sec; Start 244: ocepa1; 266/412 Test #256: omp2p5-grad1 ..................... Passed 15.65 sec; Start 136: dfmp2-grad2; 267/412 Test #140: dfomp2-1 ......................... Passed 15.04 sec; Start 138: dfmp2-grad4; 268/412 Test #109: dcft2 ............................ Passed 14.47 sec; Start 124: dfccsd1; 269/412 Test #87: cepa0-grad2 ...................... Passed 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:24101,Test,Test,24101,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability, #397: json-v11-energy .................. Passed 3.25 sec; Start 401: json-schema-1-orient; 386/411 Test #400: json-schema-1-ghost .............. Passed 1.15 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.58 sec; Start 403: json-schema-1-gradient; 388/411 Test #393: python-3-index-transforms ........ Passed 10.07 sec; Start 404: json-schema-1-properties; 389/411 Test #399: json-schema-1-energy ............. Passed 3.30 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.63 sec; Start 406: skeletonaointegrals; 391/411 Test #401: json-schema-1-orient ............. Passed 3.44 sec; Start 407: skeletondfmp2; 392/411 Test #404: json-schema-1-properties ......... Passed 1.53 sec; Start 408: skeletonmointegrals; 393/411 Test #405: skeleton ......................... Passed 1.87 sec; Start 409: skeletonscf; 394/411 Test #406: skeletonaointegrals .............. Passed 1.86 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 3.51 sec; 397/411 Test #408: skeletonmointegrals .............. Passed 4.21 sec; 398/411 Test #410: skeletonsointegrals .............. Passed 4.63 sec; 399/411 Test #411: skeletonwavefunction ............. Passed 4.43 sec; 400/411 Test #392: python-cc54 ...................... Passed 29.51 sec; 401/411 Test #347: sapt-dft2 ........................ Passed 122.07 sec; 402/411 Test #389: python-pubchem ................... Passed 55.13 sec; 403/411 Test #371: dft-custom-dhdf .................. Passed 88.11 sec; 404/411 Test #305: pywrap-checkrun-rohf ............. Passed 305.12 sec; 405/411 Test #379: cc-module ........................ Passed 128.57 sec; 406/411 Test #359: tu6-cp-ne2 ....................... Passed 181.74 sec; 407/411 Test #386: cookbook-rohf-orb-rot ............ Passed 131.37 sec; 408/411 Test #373: dft-cust,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:37146,Test,Test,37146,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability, #399: json-schema-1-energy ............. Passed 3.33 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.05 sec; Start 404: json-schema-1-properties; 389/411 Test #392: python-cc54 ...................... Passed 17.13 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.61 sec; Start 406: skeletonaointegrals; 391/411 Test #404: json-schema-1-properties ......... Passed 1.34 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.17 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.57 sec; Start 409: skeletonscf; 394/411 Test #409: skeletonscf ...................... Passed 0.65 sec; Start 410: skeletonsointegrals; 395/411 Test #408: skeletonmointegrals .............. Passed 2.19 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 3.47 sec; 397/411 Test #410: skeletonsointegrals .............. Passed 2.42 sec; 398/411 Test #411: skeletonwavefunction ............. Passed 1.80 sec; 399/411 Test #320: sapt6 ............................ Passed 161.96 sec; 400/411 Test #359: tu6-cp-ne2 ....................... Passed 97.38 sec; 401/411 Test #389: python-pubchem ................... Passed 54.63 sec; 402/411 Test #371: dft-custom-dhdf .................. Passed 86.83 sec; 403/411 Test #347: sapt-dft2 ........................ Passed 122.85 sec; 404/411 Test #379: cc-module ........................ Passed 78.72 sec; 405/411 Test #386: cookbook-rohf-orb-rot ............ Passed 74.81 sec; 406/411 Test #306: pywrap-checkrun-uhf .............. Passed 235.73 sec; 407/411 Test #300: pywrap-all ....................... Passed 284.41 sec; 408/411 Test #304: pywrap-checkrun-rhf .............. Passed 269.85 sec; 409/411 Test #373: dft-custom-mgga .................. Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:37217,Test,Test,37217,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability, #400: json-schema-1-ghost .............. Passed 1.15 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.58 sec; Start 403: json-schema-1-gradient; 388/411 Test #393: python-3-index-transforms ........ Passed 10.07 sec; Start 404: json-schema-1-properties; 389/411 Test #399: json-schema-1-energy ............. Passed 3.30 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.63 sec; Start 406: skeletonaointegrals; 391/411 Test #401: json-schema-1-orient ............. Passed 3.44 sec; Start 407: skeletondfmp2; 392/411 Test #404: json-schema-1-properties ......... Passed 1.53 sec; Start 408: skeletonmointegrals; 393/411 Test #405: skeleton ......................... Passed 1.87 sec; Start 409: skeletonscf; 394/411 Test #406: skeletonaointegrals .............. Passed 1.86 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 3.51 sec; 397/411 Test #408: skeletonmointegrals .............. Passed 4.21 sec; 398/411 Test #410: skeletonsointegrals .............. Passed 4.63 sec; 399/411 Test #411: skeletonwavefunction ............. Passed 4.43 sec; 400/411 Test #392: python-cc54 ...................... Passed 29.51 sec; 401/411 Test #347: sapt-dft2 ........................ Passed 122.07 sec; 402/411 Test #389: python-pubchem ................... Passed 55.13 sec; 403/411 Test #371: dft-custom-dhdf .................. Passed 88.11 sec; 404/411 Test #305: pywrap-checkrun-rohf ............. Passed 305.12 sec; 405/411 Test #379: cc-module ........................ Passed 128.57 sec; 406/411 Test #359: tu6-cp-ne2 ....................... Passed 181.74 sec; 407/411 Test #386: cookbook-rohf-orb-rot ............ Passed 131.37 sec; 408/411 Test #373: dft-custom-mgga .................. Passed 172.85 sec; 409/411 Test #306: pywrap-checkrun-uhf .............. Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:37250,Test,Test,37250,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability, #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 401: json-schema-1-orient; 386/411 Test #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.35 sec; Start 409: skeletonscf; 394/411 Test #408: skeletonmointegrals .............. Passed 1.63 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 1.86 sec; 397/411 Test #410: skeletonsointegrals .............. Passed 1.57 sec; 398/411 Test #411: skeletonwavefunction ............. Passed 1.46 sec; 399/411 Test #347: sapt-dft2 ........................ Passed 125.56 sec; 400/411 Test #359: tu6-cp-ne2 ....................... Passed 116.70 sec; 401/411 Test #371: dft-custom-dhdf .................. Passed 91.12 sec; 402/411 Test #389: python-pubchem ................... Passed 52.55 sec; 403/411 Test #379: cc-module ........................ Passed 90.55 sec; 404/411 Test #386: cookbook-rohf-orb-rot ............ Passed 85.56 sec; 405/411 Test #306: pywrap-checkrun-uhf .............. Passed 281.57 sec; 406/411 Test #300: pywrap-all ....................... Passed 311.77 sec; 407/411 Test #227: mp2-def2 ......................... Passed 424.41 sec; 408/411 Test #304: pywrap-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:37078,Test,Test,37078,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec; 398/412 Test #175: docs-bases ....................... Passed 0.78 sec; 399/412 Test #210: mcscf1 ........................... Passed 1.26 sec; 400/412 Test #397: python-memdfjk ................... Passed 1.51 sec; 401/412 Test #213: mints1 ........................... Passed 0.96 sec; 402/412 Test #209: matrix1 .......................... Passed 0.64 sec; 403/412 Test #216: mints4 ........................... Passed 0.73 sec; 404/412 Test #403: json-schema-1-throws ............. Passed 0.58 sec; 405/412 Test #309: pywrap-db3 ....................... Passed 0.83 sec; 406/412 Test #176: docs-dft ......................... Passed 0.68 sec; 407/412 Test #365: options1 ......................... Passed 0.69 sec; 408/412 Test #410: skeletonscf ...................... Passed 0.77 sec; 409/412 Test #88: cepa1 ............................ Passed 3.01 sec; 410/412 Test #18: cbs-xtpl-func .................... Passed 1324.01 sec; 411/412 Test #179: fsapt1 ........................... Passed 2063.95 sec; 412/412 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:37424,Test,Test,37424,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability," #401: json-schema-1-orient ............. Passed 2.53 sec; Start 402: json-schema-1-throws; 395/411 Test #399: json-schema-1-energy ............. Passed 4.07 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.62 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.92 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.48 sec; Start 406: skeletonaointegrals; 399/411 Test #405: skeleton ......................... Passed 1.51 sec; Start 407: skeletondfmp2; 400/411 Test #406: skeletonaointegrals .............. Passed 1.67 sec; Start 408: skeletonmointegrals; 401/411 Test #407: skeletondfmp2 .................... Passed 1.70 sec; Start 409: skeletonscf; 402/411 Test #408: skeletonmointegrals .............. Passed 1.95 sec; Start 410: skeletonsointegrals; 403/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 404/411 Test #389: python-pubchem ................... Passed 54.34 sec; 405/411 Test #411: skeletonwavefunction ............. Passed 1.69 sec; 406/411 Test #410: skeletonsointegrals .............. Passed 1.93 sec; 407/411 Test #379: cc-module ........................ Passed 152.05 sec; 408/411 Test #386: cookbook-rohf-orb-rot ............ Passed 141.29 sec; 409/411 Test #306: pywrap-checkrun-uhf .............. Passed 657.98 sec; 410/411 Test #300: pywrap-all ....................... Passed 734.22 sec; 411/411 Test #304: pywrap-checkrun-rhf .............. Passed 705.00 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 72.03 sec*proc (2 tests); autotest = 2537.36 sec*proc (26 tests); cart = 17832.09 sec*proc (123 tests); cas = 68.01 sec*proc (1 test); casscf = 156.98 sec*proc (11 tests); cbs = 1831.60 sec*proc (10 tests); cc = 12496.28 sec*proc (65 tests); cdomp2 = 106.87 sec*proc (2 tests); cepa = 243.33 sec*proc (7 tests); ci = 133.10 sec*proc (8 tests); c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:37824,Test,Test,37824,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability," #402: json-schema-1-throws ............. Passed 0.56 sec; 405/411 Test #215: mints4 ........................... Passed 0.51 sec; 406/411 Test #208: matrix1 .......................... Passed 0.52 sec; 407/411 Test #216: mints5 ........................... Passed 0.56 sec; 408/411 Test #174: docs-bases ....................... Passed 0.51 sec; 409/411 Test #87: cepa1 ............................ Passed 1.77 sec; 410/411 Test #178: fsapt1 ........................... Passed 2075.85 sec; 411/411 Test #318: sapt4 ............................ Passed 1795.73 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 63.77 sec*proc (2 tests); autotest = 464.95 sec*proc (26 tests); cart = 10197.27 sec*proc (123 tests); cas = 45.85 sec*proc (1 test); casscf = 46.69 sec*proc (11 tests); cbs = 607.71 sec*proc (10 tests); cc = 2524.71 sec*proc (65 tests); cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:38713,test,tests,38713,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['tests']
Testability," #409: skeletonscf ...................... Passed 0.61 sec; 410/411 Test #87: cepa1 ............................ Passed 4.49 sec; 411/411 Test #318: sapt4 ............................ Passed 1705.52 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 53.30 sec*proc (2 tests); autotest = 715.90 sec*proc (26 tests); cart = 10496.39 sec*proc (123 tests); cas = 45.67 sec*proc (1 test); casscf = 97.70 sec*proc (11 tests); cbs = 775.99 sec*proc (10 tests); cc = 3501.05 sec*proc (65 tests); cdomp2 = 18.69 sec*proc (2 tests); cepa = 70.98 sec*proc (7 tests); ci = 91.90 sec*proc (8 tests); cisd = 133.06 sec*proc (7 tests); cookbook = 21.41 sec*proc (1 test); cubeprop = 18.63 sec*proc (2 tests); dcft = 1189.36 sec*proc (13 tests); df = 705.57 sec*proc (38 tests); dfccd = 3.15 sec*proc (1 test); dfccd-grad = 13.35 sec*proc (1 test); dfccdl = 4.11 sec*proc (1 test); dfccsd = 3.18 sec*proc (1 test); dfccsd-grad = 16.34 sec*proc (1 test); dfccsd-t-grad = 13.89 sec*proc (1 test); dfccsdat = 9.43 sec*proc (1 test); dfccsdl = 10.26 sec*proc (1 test); dfccsdt = 7.70 sec*proc (1 test); dfep2 = 6.04 sec*proc (2 tests); dfmp2 = 123.48 sec*proc (11 tests); dfomp2 = 209.11 sec*proc (7 tests); dfomp2.5 = 53.70 sec*proc (4 tests); dfomp3 = 51.68 sec*proc (4 tests); dfscf = 128.62 sec*proc (1 test); dft = 1299.12 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 38.88 sec*proc (2 tests); fci = 10.23 sec*proc (2 tests); fcidump = 1.60 sec*proc (1 test); findif = 742.81 sec*proc (5 tests); fnocc = 75.77 sec*proc (4 tests); freq = 810.55 sec*proc (6 tests); gradient = 493.27 sec*proc (16 tests); json = 14.98 sec*proc (8 tests); longtests = 3198.41 sec*proc (5 tests); mcscf = 3.57 sec*proc (3 tests); minitests = 53.37 sec*proc (4 tests); mints = 79.27 sec*proc (14 tests); misc = 428.55 sec*proc (16 tests); mp2 = 507.97 sec*proc (13 tests); nbody = 52.29 sec*proc (2 tests); numpy = 0.68 sec*proc (1 test); ocepa = 293.22 sec*proc (6 tests); omp = 283.37 sec*proc (1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:39187,test,test,39187,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['test'],['test']
Testability, #41: cc25 ............................. Passed 421.47 sec; Start 115: dcft8; 11/412 Test #43: cc27 ............................. Passed 327.75 sec; Start 395: python-vibanalysis; 12/412 Test #306: pywrap-checkrun-rohf ............. Passed 359.48 sec; Start 25: cc13; 13/412 Test #241: ocepa-freq1 ...................... Passed 402.21 sec; Start 30: cc14; 14/412 Test #39: cc23 ............................. Passed 487.99 sec; Start 13: cbs-xtpl-alpha; 15/412 Test #42: cc26 ............................. Passed 471.50 sec; Start 156: dft-grad-lr3; 16/412 Test #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2135,Test,Test,2135,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability, #42: cc26 ............................. Passed 471.50 sec; Start 156: dft-grad-lr3; 16/412 Test #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Start 182: fsapt-allterms; 32/412 Test #113: dcft6 ............................ Passed 130.50 sec; Start 194: fd-freq-energy-large; 33/412 Test #395: python-vibanalysis ............... Passed 734.63 sec; Start 196: fd-freq-gradient-large; 34/412 Test #156: dft-grad-lr3 ..................... Passed 451.76 sec; Start 279: opt13; 35/412 Test #228: mp2-def2 ......................... Passed 428.14 sec; Start 374: dft-custom-mgga; 36/412 Test #183: isapt1 .............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2596,Test,Test,2596,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability, #42: cc27 ............................. Passed 832.70 sec; Start 29: cc14; 4/411 Test #76: cc7 .............................. Passed 833.35 sec; Start 240: ocepa-freq1; 5/411 Test #41: cc26 ............................. Passed 876.66 sec; Start 155: dft-grad-lr3; 6/411 Test #38: cc23 ............................. Passed 937.42 sec; Start 114: dcft8; 7/411 Test #36: cc21 ............................. Passed 943.79 sec; Start 227: mp2-def2; 8/411 Test #40: cc25 ............................. Passed 955.88 sec; Start 178: fsapt1; 9/411 Test #35: cc2 .............................. Passed 975.82 sec; Start 111: dcft5; 10/411 Test #39: cc24 ............................. Passed 1000.55 sec; Start 13: cbs-xtpl-alpha; 11/411 Test #155: dft-grad-lr3 ..................... Passed 395.18 sec; Start 305: pywrap-checkrun-rohf; 12/411 Test #394: python-vibanalysis ............... Passed 1285.91 sec; Start 24: cc13; 13/411 Test #227: mp2-def2 ......................... Passed 371.74 sec; Start 31: cc16; 14/411 Test #29: cc14 ............................. Passed 619.00 sec; Start 28: cc13d; 15/411 Test #145: dfomp2-grad3 ..................... Passed 1456.77 sec; Start 182: isapt1; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1461.98 sec; Start 11: cbs-delta-energy; 17/411 Test #111: dcft5 ............................ Passed 505.16 sec; Start 44: cc29; 18/411 Test #306: pywrap-checkrun-uhf .............. Passed 1485.55 sec; Start 47: cc31; 19/411 Test #103: dcft-grad1 ....................... Passed 1518.99 sec; Start 112: dcft6; 20/411 Test #300: pywrap-all ....................... Passed 1524.14 sec; Start 18: cbs-xtpl-func; 21/411 Test #13: cbs-xtpl-alpha ................... Passed 526.82 sec; Start 181: fsapt-allterms; 22/411 Test #114: dcft8 ............................ Passed 687.39 sec; Start 193: fd-freq-energy-large; 23/411 Test #240: ocepa-freq1 ...................... Passed 852.90 sec; Start 195: fd-freq-gradient-large; 24/411 Test #45: cc3 ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:1648,Test,Test,1648,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #49: cc32 ............................. Passed 26.57 sec; Start 53: cc36; 177/412 Test #110: dcft3 ............................ Passed 25.36 sec; Start 160: dft-b2plyp; 178/412 Test #50: cc33 ............................. Passed 30.41 sec; Start 314: rasscf-sp; 179/412 Test #203: fnocc4 ........................... Passed 37.17 sec; Start 273: opt6; 180/412 Test #53: cc36 ............................. Passed 27.88 sec; Start 268: opt2; 181/412 Test #167: dft-psivar ....................... Passed 45.63 sec; Start 173: dft3; 182/412 Test #376: pywrap-bfs ....................... Passed 45.59 sec; Start 178: extern2; 183/412 Test #160: dft-b2plyp ....................... Passed 47.37 sec; Start 304: pywrap-checkrun-convcrit; 184/412 Test #314: rasscf-sp ........................ Passed 41.73 sec; Start 38: cc22; 185/412 Test #273: opt6 ............................. Passed 54.96 sec; Start 164: dft-freq; 186/412 Test #268: opt2 ............................. Passed 56.52 sec; Start 208: gibbs; 187/412 Test #173: dft3 ............................. Passed 59.20 sec; Start 347: sapt-dft1; 188/412 Test #178: extern2 .......................... Passed 56.03 sec; Start 259: omp3-2; 189/412 Test #304: pywrap-checkrun-convcrit ......... Passed 58.77 sec; Start 278: opt12; 190/412 Test #38: cc22 ............................. Passed 56.44 sec; Start 248: omp2-2; 191/412 Test #208: gibbs ............................ Passed 68.71 sec; Start 190: fci-tdm-2; 192/412 Test #164: dft-freq ......................... Passed 75.93 sec; Start 129: dfccsdat1; 193/412 Test #179: fsapt1 ........................... Passed 2077.65 sec; Start 202: fnocc3; 194/412 Test #259: omp3-2 ........................... Passed 65.01 sec; Start 359: tu5-sapt; 195/412 Test #347: sapt-dft1 ........................ Passed 79.99 sec; Start 323: sapt-dft-lrc; 196/412 Test #248: omp2-2 ........................... Passed 57.09 sec; Start 147: dfomp3-1; 197/412 Test #278: opt12 ............................ Passed 70.83 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:17368,Test,Test,17368,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability, #49: cc33 ............................. Passed 7.62 sec; Start 12: cbs-parser; 167/411 Test #375: pywrap-bfs ....................... Passed 25.10 sec; Start 274: opt8; 168/411 Test #12: cbs-parser ....................... Passed 10.60 sec; Start 254: omp2p5-2; 169/411 Test #346: sapt-dft1 ........................ Passed 20.62 sec; Start 189: fci-tdm-2; 170/411 Test #254: omp2p5-2 ......................... Passed 4.26 sec; Start 196: fd-gradient; 171/411 Test #166: dft-psivar ....................... Passed 22.27 sec; Start 163: dft-freq; 172/411 Test #156: dft-b2plyp ....................... Passed 22.72 sec; Start 358: tu5-sapt; 173/411 Test #1: adc1 ............................. Passed 22.65 sec; Start 109: dcft3; 174/411 Test #274: opt8 ............................. Passed 18.20 sec; Start 322: sapt-dft-lrc; 175/411 Test #109: dcft3 ............................ Passed 2.96 sec; Start 172: dft3; 176/411 Test #196: fd-gradient ...................... Passed 17.24 sec; Start 50: cc34; 177/411 Test #189: fci-tdm-2 ........................ Passed 20.47 sec; Start 146: dfomp3-1; 178/411 Test #163: dft-freq ......................... Passed 18.25 sec; Start 248: omp2-3; 179/411 Test #50: cc34 ............................. Passed 2.13 sec; Start 315: sapt1; 180/411 Test #358: tu5-sapt ......................... Passed 18.98 sec; Start 338: scf7; 181/411 Test #146: dfomp3-1 ......................... Passed 4.61 sec; Start 126: dfccsd-t-grad1; 182/411 Test #322: sapt-dft-lrc ..................... Passed 19.18 sec; Start 272: opt6; 183/411 Test #172: dft3 ............................. Passed 17.82 sec; Start 290: psimrcc-ccsd_t-4; 184/411 Test #248: omp2-3 ........................... Passed 7.49 sec; Start 165: dft-grad2; 185/411 Test #126: dfccsd-t-grad1 ................... Passed 8.25 sec; Start 16: cbs-xtpl-gradient; 186/411 Test #338: scf7 ............................. Passed 10.67 sec; Start 267: opt2; 187/411 Test #315: sapt1 ............................ Passed 16.80 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:16413,Test,Test,16413,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability, #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411 Test #20: cc1 .............................. Passed 164.35 sec; Start 28: cc13d; 33/411 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:2249,Test,Test,2249,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability, #50: cc32 ............................. Passed 47.12 sec; Start 210: gibbs; 33/415 Test #129: dfccsd-t-grad1 ................... Passed 103.60 sec; Start 149: dfomp3-1; 34/415 Test #309: pywrap-alias ..................... Passed 141.43 sec; Start 346: scf5; 35/415 Test #94: ci-multi ......................... Passed 59.86 sec; Start 317: pywrap-db1; 36/415 Test #112: dcft3 ............................ Passed 75.08 sec; Start 136: dfmp2-ecp; 37/415 Test #128: dfccsd-grad1 ..................... Passed 94.95 sec; Start 263: omp2p5-2; 38/415 Test #11: cbs-delta-energy ................. Passed 615.43 sec; Start 102: ci-property; 39/415 Test #3: casscf-fzc-sp .................... Passed 55.64 sec; Start 256: omp2-2; 40/415 Test #210: gibbs ............................ Passed 51.08 sec; Start 403: python-cc54; 41/415 Test #136: dfmp2-ecp ........................ Passed 32.87 sec; Start 323: rasscf-sp; 42/415 Test #149: dfomp3-1 ......................... Passed 52.09 sec; Start 14: cbs-xtpl-energy; 43/415 Test #346: scf5 ............................. Passed 46.11 sec; Start 5: casscf-sa-sp; 44/415 Test #317: pywrap-db1 ....................... Passed 41.80 sec; Start 85: cdomp2-1; 45/415 Test #263: omp2p5-2 ......................... Passed 30.33 sec; Start 179: extern1; 46/415 Test #102: ci-property ...................... Passed 28.56 sec; Start 386: pywrap-bfs; 47/415 Test #256: omp2-2 ........................... Passed 32.02 sec; Start 127: dfccsdl1; 48/415 Test #371: x2c1 ............................. Passed 130.82 sec; Start 4: casscf-semi; 49/415 Test #5: casscf-sa-sp ..................... Passed 14.54 sec; Start 205: fnocc4; 50/415 Test #14: cbs-xtpl-energy .................. Passed 17.93 sec; Start 377: dft-smoke; 51/415 Test #85: cdomp2-1 ......................... Passed 16.80 sec; Start 126: dfccsd1; 52/415 Test #116: dcft7 ............................ Passed 408.77 sec; Start 132: dfmp2-1; 53/415 Test #4: casscf-semi ...................... Passed 15.25 sec; Start 25,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:4370,Test,Test,4370,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability, #50: cc34 ............................. Passed 2.88 sec; Start 51: cc35; 32/85 Test #51: cc35 ............................. Passed 6.99 sec; Start 52: cc36; 33/85 Test #52: cc36 ............................. Passed 2.79 sec; Start 53: cc37; 34/85 Test #53: cc37 ............................. Passed 3.16 sec; Start 54: cc38; 35/85 Test #54: cc38 ............................. Passed 4.87 sec; Start 55: cc39; 36/85 Test #55: cc39 ............................. Passed 7.32 sec; Start 56: cc4; 37/85 Test #56: cc4 .............................. Passed 7.40 sec; Start 57: cc40; 38/85 Test #57: cc40 ............................. Passed 12.95 sec; Start 58: cc41; 39/85 Test #58: cc41 ............................. Passed 18.03 sec; Start 59: cc42; 40/85 Test #59: cc42 ............................. Passed 9.51 sec; Start 60: cc43; 41/85 Test #60: cc43 ............................. Passed 14.57 sec; Start 61: cc44; 42/85 Test #61: cc44 ............................. Passed 30.74 sec; Start 62: cc45; 43/85 Test #62: cc45 ............................. Passed 3.51 sec; Start 63: cc47; 44/85 Test #63: cc47 ............................. Passed 7.30 sec; Start 64: cc48; 45/85 Test #64: cc48 ............................. Passed 10.98 sec; Start 65: cc49; 46/85 Test #65: cc49 ............................. Passed 13.22 sec; Start 66: cc4a; 47/85 Test #66: cc4a ............................. Passed 7.71 sec; Start 67: cc50; 48/85 Test #67: cc50 ............................. Passed 13.56 sec; Start 68: cc51; 49/85 Test #68: cc51 ............................. Passed 22.84 sec; Start 69: cc52; 50/85 Test #69: cc52 ............................. Passed 35.22 sec; Start 70: cc53; 51/85 Test #70: cc53 ............................. Passed 5.34 sec; Start 71: cc54; 52/85 Test #71: cc54 ............................. Passed 3.69 sec; Start 72: cc55; 53/85 Test #72: cc55 ............................. Passed 6.05 sec; Start 73: cc5a; 54/85 Test #73: cc5a ............................. Passed 20.77 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:3633,Test,Test,3633,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability, #51: cc34 ............................. Passed 53.72 sec; Start 24: cc12; 199/412 Test #53: cc36 ............................. Passed 46.73 sec; Start 54: cc37; 200/412 Test #110: dcft3 ............................ Passed 42.76 sec; Start 297: psithon2; 201/412 Test #166: dft-grad2 ........................ Passed 57.63 sec; Start 200: fnocc1; 202/412 Test #129: dfccsdat1 ........................ Passed 38.92 sec; Start 91: cepa1; 203/412 Test #322: sapt-dft-api ..................... Passed 55.16 sec; Start 276: opt9; 204/412 Test #202: fnocc3 ........................... Passed 35.92 sec; Start 139: dfmp2-grad5; 205/412 Test #154: dft-grad-lr1 ..................... Passed 52.13 sec; Start 144: dfomp2-grad1; 206/412 Test #170: dft-vv10 ......................... Passed 47.09 sec; Start 341: soscf-large; 207/412 Test #249: omp2-3 ........................... Passed 37.28 sec; Start 325: sapt8; 208/412 Test #292: psimrcc-fd-freq1 ................. Passed 41.25 sec; Start 239: nbody-intermediates; 209/412 Test #316: sapt1 ............................ Passed 49.94 sec; Start 218: mints6; 210/412 Test #147: dfomp3-1 ......................... Passed 38.24 sec; Start 177: extern1; 211/412 Test #24: cc12 ............................. Passed 40.12 sec; Start 302: pywrap-basis; 212/412 Test #54: cc37 ............................. Passed 39.52 sec; Start 219: mints8; 213/412 Test #200: fnocc1 ........................... Passed 33.21 sec; Start 394: python-3-index-transforms; 214/412 Test #91: cepa1 ............................ Passed 33.96 sec; Start 151: dfomp2p5-1; 215/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 49.99 sec; Start 106: dcft-grad3; 216/412 Test #297: psithon2 ......................... Passed 44.73 sec; Start 165: dft-grad1; 217/412 Test #276: opt9 ............................. Passed 42.06 sec; Start 14: cbs-xtpl-energy; 218/412 Test #139: dfmp2-grad5 ...................... Passed 41.56 sec; Start 370: dft-jk; 219/412 Test #179: fsapt1 ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:19660,Test,Test,19660,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability, #51: cc35 ............................. Passed 6.99 sec; Start 52: cc36; 33/85 Test #52: cc36 ............................. Passed 2.79 sec; Start 53: cc37; 34/85 Test #53: cc37 ............................. Passed 3.16 sec; Start 54: cc38; 35/85 Test #54: cc38 ............................. Passed 4.87 sec; Start 55: cc39; 36/85 Test #55: cc39 ............................. Passed 7.32 sec; Start 56: cc4; 37/85 Test #56: cc4 .............................. Passed 7.40 sec; Start 57: cc40; 38/85 Test #57: cc40 ............................. Passed 12.95 sec; Start 58: cc41; 39/85 Test #58: cc41 ............................. Passed 18.03 sec; Start 59: cc42; 40/85 Test #59: cc42 ............................. Passed 9.51 sec; Start 60: cc43; 41/85 Test #60: cc43 ............................. Passed 14.57 sec; Start 61: cc44; 42/85 Test #61: cc44 ............................. Passed 30.74 sec; Start 62: cc45; 43/85 Test #62: cc45 ............................. Passed 3.51 sec; Start 63: cc47; 44/85 Test #63: cc47 ............................. Passed 7.30 sec; Start 64: cc48; 45/85 Test #64: cc48 ............................. Passed 10.98 sec; Start 65: cc49; 46/85 Test #65: cc49 ............................. Passed 13.22 sec; Start 66: cc4a; 47/85 Test #66: cc4a ............................. Passed 7.71 sec; Start 67: cc50; 48/85 Test #67: cc50 ............................. Passed 13.56 sec; Start 68: cc51; 49/85 Test #68: cc51 ............................. Passed 22.84 sec; Start 69: cc52; 50/85 Test #69: cc52 ............................. Passed 35.22 sec; Start 70: cc53; 51/85 Test #70: cc53 ............................. Passed 5.34 sec; Start 71: cc54; 52/85 Test #71: cc54 ............................. Passed 3.69 sec; Start 72: cc55; 53/85 Test #72: cc55 ............................. Passed 6.05 sec; Start 73: cc5a; 54/85 Test #73: cc5a ............................. Passed 20.77 sec; Start 74: cc6; 55/85 Test #74: cc6 .............................. Passed 29.20 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:3717,Test,Test,3717,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability, #52: cc36 ............................. Passed 12.26 sec; Start 121: dfccd-grad1; 87/401 Test #100: cubeprop ......................... Passed 8.71 sec; Start 76: cc8; 88/401 Test #298: pywrap-cbs1 ...................... Passed 92.27 sec; Start 172: extern1; 89/401 Test #353: tu5-sapt ......................... Passed 9.35 sec; Start 196: fnocc2; 90/401 Test #91: ci-multi ......................... Passed 17.40 sec; Start 195: fnocc1; 91/401 Test #197: fnocc3 ........................... Passed 9.24 sec; Start 311: sapt1; 92/401 Test #132: dfmp2-ecp ........................ Passed 10.33 sec; Start 148: dfomp3-grad2; 93/401 Test #121: dfccd-grad1 ...................... Passed 6.11 sec; Start 32: cc17; 94/401 Test #83: cdomp2-2 ......................... Passed 16.79 sec; Start 352: tu4-h2o-freq; 95/401 Test #195: fnocc1 ........................... Passed 8.09 sec; Start 390: python-3-index-transforms; 96/401 Test #311: sapt1 ............................ Passed 9.43 sec; Start 106: dcft1; 97/401 Test #238: ocepa-grad2 ...................... Passed 49.33 sec; Start 14: cbs-xtpl-energy; 98/401 Test #172: extern1 .......................... Passed 15.83 sec; Start 362: scf-hess1; 99/401 Test #390: python-3-index-transforms ........ Passed 6.02 sec; Start 126: dfccsdt1; 100/401 Test #352: tu4-h2o-freq ..................... Passed 12.54 sec; Start 33: cc18; 101/401 Test #126: dfccsdt1 ......................... Passed 3.87 sec; Start 7: casscf-sp; 102/401 Test #76: cc8 .............................. Passed 23.26 sec; Start 176: fsapt-terms; 103/401 Test #14: cbs-xtpl-energy .................. Passed 7.95 sec; Start 286: psimrcc-ccsd_t-4; 104/401 Test #362: scf-hess1 ........................ Passed 7.64 sec; Start 120: dfccdl1; 105/401 Test #32: cc17 ............................. Passed 20.79 sec; Start 15: cbs-xtpl-freq; 106/401 Test #120: dfccdl1 .......................... Passed 2.42 sec; Start 336: soscf-large; 107/401 Test #176: fsapt-terms ...................... Passed 4.90 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:9036,Test,Test,9036,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability, #52: cc36 ............................. Passed 2.79 sec; Start 53: cc37; 34/85 Test #53: cc37 ............................. Passed 3.16 sec; Start 54: cc38; 35/85 Test #54: cc38 ............................. Passed 4.87 sec; Start 55: cc39; 36/85 Test #55: cc39 ............................. Passed 7.32 sec; Start 56: cc4; 37/85 Test #56: cc4 .............................. Passed 7.40 sec; Start 57: cc40; 38/85 Test #57: cc40 ............................. Passed 12.95 sec; Start 58: cc41; 39/85 Test #58: cc41 ............................. Passed 18.03 sec; Start 59: cc42; 40/85 Test #59: cc42 ............................. Passed 9.51 sec; Start 60: cc43; 41/85 Test #60: cc43 ............................. Passed 14.57 sec; Start 61: cc44; 42/85 Test #61: cc44 ............................. Passed 30.74 sec; Start 62: cc45; 43/85 Test #62: cc45 ............................. Passed 3.51 sec; Start 63: cc47; 44/85 Test #63: cc47 ............................. Passed 7.30 sec; Start 64: cc48; 45/85 Test #64: cc48 ............................. Passed 10.98 sec; Start 65: cc49; 46/85 Test #65: cc49 ............................. Passed 13.22 sec; Start 66: cc4a; 47/85 Test #66: cc4a ............................. Passed 7.71 sec; Start 67: cc50; 48/85 Test #67: cc50 ............................. Passed 13.56 sec; Start 68: cc51; 49/85 Test #68: cc51 ............................. Passed 22.84 sec; Start 69: cc52; 50/85 Test #69: cc52 ............................. Passed 35.22 sec; Start 70: cc53; 51/85 Test #70: cc53 ............................. Passed 5.34 sec; Start 71: cc54; 52/85 Test #71: cc54 ............................. Passed 3.69 sec; Start 72: cc55; 53/85 Test #72: cc55 ............................. Passed 6.05 sec; Start 73: cc5a; 54/85 Test #73: cc5a ............................. Passed 20.77 sec; Start 74: cc6; 55/85 Test #74: cc6 .............................. Passed 29.20 sec; Start 75: cc7; 56/85 Test #75: cc7 .............................. Passed 30.38 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:3801,Test,Test,3801,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability, #53: cc36 ............................. Passed 20.23 sec; Start 23: cc11; 139/413 Test #254: omp2-grad2 ....................... Passed 41.63 sec; Start 54: cc37; 140/413 Test #196: fd-freq-gradient ................. Passed 47.07 sec; Start 12: cbs-parser; 141/413 Test #127: dfccsd-grad1 ..................... Passed 37.30 sec; Start 279: opt12; 142/413 Test #2: adc2 ............................. Passed 37.54 sec; Start 111: dcft3; 143/413 Test #266: opt-lindep-change ................ Passed 28.24 sec; Start 350: sapt-compare; 144/413 Test #318: sapt2 ............................ Passed 331.13 sec; Start 198: fd-gradient; 145/413 Test #221: mints-benchmark .................. Passed 43.57 sec; Start 148: dfomp3-1; 146/413 Test #172: dft1-alt ......................... Passed 55.54 sec; Start 284: opt-irc-3; 147/413 Test #115: dcft7 ............................ Passed 345.49 sec; Start 309: pywrap-db1; 148/413 Test #54: cc37 ............................. Passed 35.93 sec; Start 269: opt2; 149/413 Test #279: opt12 ............................ Passed 26.85 sec; Start 361: tu6-cp-ne2; 150/413 Test #22: cc10 ............................. Passed 51.09 sec; Start 74: cc55; 151/413 Test #23: cc11 ............................. Passed 49.40 sec; Start 338: scf5; 152/413 Test #111: dcft3 ............................ Passed 41.52 sec; Start 325: sapt7; 153/413 Test #350: sapt-compare ..................... Passed 44.69 sec; Start 314: rasci-ne; 154/413 Test #304: pywrap-cbs1 ...................... Passed 169.96 sec; Start 93: ci-multi; 155/413 Test #269: opt2 ............................. Passed 27.77 sec; Start 66: cc48; 156/413 Test #284: opt-irc-3 ........................ Passed 32.58 sec; Start 395: python-3-index-transforms; 157/413 Test #198: fd-gradient ...................... Passed 37.81 sec; Start 339: scf6; 158/413 Test #301: pywrap-alias ..................... Passed 80.45 sec; Start 131: dfmp2-1; 159/413 Test #148: dfomp3-1 ......................... Passed 43.61 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:14053,Test,Test,14053,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability, #55: cc39 ............................. Passed 13.27 sec; Start 200: fnocc2; 125/404 Test #71: cc53 ............................. Passed 8.33 sec; Start 56: cc4; 126/404 Test #67: cc4a ............................. Passed 12.55 sec; Start 389: python-pubchem; 127/404 Test #307: pywrap-db1 ....................... Passed 29.84 sec; Start 155: dfscf-bz2; 128/404 Test #26: cc13b ............................ Passed 18.37 sec; Start 245: ocepa3; 129/404 Test #56: cc4 .............................. Passed 12.64 sec; Start 319: sapt5; 130/404 Test #200: fnocc2 ........................... Passed 17.05 sec; Start 297: pubchem1; 131/404 Test #326: scf-ecp .......................... Passed 24.49 sec; Start 12: cbs-parser; 132/404 Test #245: ocepa3 ........................... Passed 7.38 sec; Start 142: dfomp2-4; 133/404 Test #312: rasci-ne ......................... Passed 30.48 sec; Start 125: dfccsd-grad1; 134/404 Test #374: dft-custom-gga ................... Passed 26.70 sec; Start 51: cc35; 135/404 Test #142: dfomp2-4 ......................... Passed 6.92 sec; Start 196: fd-gradient; 136/404 Test #125: dfccsd-grad1 ..................... Passed 7.22 sec; Start 100: ci-property; 137/404 Test #389: python-pubchem ................... Passed 23.12 sec; Start 126: dfccsd-t-grad1; 138/404 Test #51: cc35 ............................. Passed 8.62 sec; Start 313: rasscf-sp; 139/404 Test #12: cbs-parser ....................... Passed 13.54 sec; Start 33: cc18; 140/404 Test #319: sapt5 ............................ Passed 24.55 sec; Start 348: sapt-compare; 141/404 Test #297: pubchem1 ......................... Passed 22.81 sec; Start 62: cc45; 142/404 Test #126: dfccsd-t-grad1 ................... Passed 10.40 sec; Start 375: pywrap-bfs; 143/404 Test #155: dfscf-bz2 ........................ Passed 31.62 sec; Start 152: dfomp2p5-grad1; 144/404 Test #313: rasscf-sp ........................ Passed 11.43 sec; Start 54: cc38; 145/404 Test #62: cc45 ............................. Passed 7.58 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:12494,Test,Test,12494,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #56: cc39 ............................. Passed 48.43 sec; Start 143: dfomp2-4; 119/412 Test #68: cc4a ............................. Passed 55.65 sec; Start 246: ocepa3; 120/412 Test #163: dft-grad-meta .................... Passed 57.17 sec; Start 308: pywrap-db1; 121/412 Test #171: dft1-alt ......................... Passed 61.25 sec; Start 12: cbs-parser; 122/412 Test #74: cc55 ............................. Passed 69.06 sec; Start 349: sapt-compare; 123/412 Test #274: opt7 ............................. Passed 67.33 sec; Start 21: cc1; 124/412 Test #238: nbody-he-cluster ................. Passed 70.58 sec; Start 220: mints-benchmark; 125/412 Test #279: opt13 ............................ Passed 837.45 sec; Start 338: scf6; 126/412 Test #73: cc54 ............................. Passed 63.23 sec; Start 132: dfmp2-3; 127/412 Test #64: cc46 ............................. Passed 66.40 sec; Start 201: fnocc2; 128/412 Test #83: cc9a ............................. Passed 95.41 sec; Start 337: scf5; 129/412 Test #81: cc8c ............................. Passed 100.16 sec; Start 33: cc17; 130/412 Test #308: pywrap-db1 ....................... Passed 48.18 sec; Start 107: dcft-grad4; 131/412 Test #85: cdomp2-2 ......................... Passed 78.83 sec; Start 195: fd-freq-gradient; 132/412 Test #143: dfomp2-4 ......................... Passed 65.99 sec; Start 93: ci-multi; 133/412 Test #349: sapt-compare ..................... Passed 46.08 sec; Start 361: x2c1; 134/412 Test #220: mints-benchmark .................. Passed 43.40 sec; Start 313: rasci-ne; 135/412 Test #246: ocepa3 ........................... Passed 65.44 sec; Start 49: cc32; 136/412 Test #132: dfmp2-3 .......................... Passed 43.03 sec; Start 134: dfmp2-ecp; 137/412 Test #338: scf6 ............................. Passed 48.44 sec; Start 207: ghosts; 138/412 Test #12: cbs-parser ....................... Passed 75.97 sec; Start 130: dfmp2-1; 139/412 Test #337: scf5 ............................. Passed 45.22 sec; Start 3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:12201,Test,Test,12201,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #58: cc40 ............................. Passed 66.56 sec; Start 220: mints-benchmark; 88/412 Test #59: cc41 ............................. Passed 107.46 sec; Start 83: cc9a; 89/412 Test #105: dcft-grad2 ....................... Passed 101.83 sec; Start 19: cbs-xtpl-nbody; 90/412 Test #261: omp3-4 ........................... Passed 87.40 sec; Start 243: ocepa-grad2; 91/412 Test #171: dft1-alt ......................... Passed 53.53 sec; Start 132: dfmp2-3; 92/412 Test #264: omp3-grad2 ....................... Passed 71.89 sec; Start 262: omp3-5; 93/412 Test #220: mints-benchmark .................. Passed 42.98 sec; Start 277: opt11; 94/412 Test #145: dfomp2-grad2 ..................... Passed 91.70 sec; Start 81: cc8c; 95/412 Test #132: dfmp2-3 .......................... Passed 41.50 sec; Start 245: ocepa2; 96/412 Test #82: cc9 .............................. Passed 81.68 sec; Start 393: python-cc54; 97/412 Test #231: mp2-module ....................... Passed 115.34 sec; Start 349: sapt-compare; 98/412 Test #83: cc9a ............................. Passed 74.28 sec; Start 308: pywrap-db1; 99/412 Test #193: fd-freq-energy ................... Passed 97.88 sec; Start 361: x2c1; 100/412 Test #19: cbs-xtpl-nbody ................... Passed 102.30 sec; Start 60: cc42; 101/412 Test #260: omp3-3 ........................... Passed 112.58 sec; Start 68: cc4a; 102/412 Test #277: opt11 ............................ Passed 63.60 sec; Start 300: pywrap-alias; 103/412 Test #81: cc8c ............................. Passed 64.99 sec; Start 2: adc2; 104/412 Test #150: dfomp3-grad2 ..................... Passed 124.28 sec; Start 65: cc47; 105/412 Test #243: ocepa-grad2 ...................... Passed 114.31 sec; Start 21: cc1; 106/412 Test #61: cc43 ............................. Passed 136.20 sec; Start 35: cc19; 107/412 Test #308: pywrap-db1 ....................... Passed 43.46 sec; Start 107: dcft-grad4; 108/412 Test #349: sapt-compare ..................... Passed 47.52 sec; Start 238: nbody-he-cl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:9426,Test,Test,9426,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec; Start 249: omp2-4; 77/404 Test #242: ocepa-grad2 ...................... Passed 26.85 sec; Start 263: omp3-grad2; 78/404 Test #153: dfomp2p5-grad2 ................... Passed 20.54 sec; Start 170: dft1-alt; 79/404 Test #204: frac-ip-fitting .................. Passed 44.19 sec; Start 347: sapt-dft2; 80/404 Test #244: ocepa2 ........................... Passed 30.49 sec; Start 19: cbs-xtpl-wrapper; 81/404 Test #11: cbs-delta-energy ................. Passed 54.44 sec; Start 77: cc8; 82/404 Test #17: cbs-xtpl-opt ..................... Passed 56.20 sec; Start 43: cc28; 83/404 Test #249: omp2-4 ........................... Passed 21.37 sec; Start 147: dfomp3-2; 84/404 Test #263: omp3-grad2 ....................... Passed 20.20 sec; Start 107: dcft1; 85/404 Test #77: cc8 .............................. Passed 8.45 sec; Start 151: dfomp2p5-2; 86/404 Test #183: isapt2 ........................... Passed 47.88 sec; Start 46: cc30; 87/404 Test #147: dfomp3-2 ......................... Passed 14.61 sec; Start 276: opt11; 88/404 Test #151: dfomp2p5-2 ....................... Passed 13.89 sec; Start 82: cc9a; 89/404 Test #107: dcft1 ............................ Passed 14.95 sec; Start 371: dft-custom-dhdf; 90/404 Test #43: cc28 ............................. Passed 26.56 sec; Start 81: cc9; 91/404 Test #82: cc9a ............................. Passed 8.92 sec; Start 78: cc8a; 92/404 Test #46: cc30 ............................. Passed 23.04 sec; Start 69: cc51; 93/404 Test #19: cbs-xtpl-wrapper ................. Passed 39.85 sec; Start 292: psimrcc-fd-freq2; 94/404 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:7802,Test,Test,7802,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #5: casscf-sa-sp ..................... Passed 3.49 sec; Start 369: dft-jk; 246/404 Test #370: scf-coverage ..................... Passed 3.11 sec; Start 241: ocepa-grad1; 247/404 Test #165: dft-grad2 ........................ Passed 9.14 sec; Start 127: dfccsdt1; 248/404 Test #321: sapt-dft-api ..................... Passed 8.99 sec; Start 226: mp2-1; 249/404 Test #133: dfmp2-ecp ........................ Passed 8.06 sec; Start 285: props2; 250/404 Test #135: dfmp2-grad2 ...................... Passed 1.84 sec; Start 253: omp2p5-1; 251/404 Test #192: fd-freq-energy ................... Passed 5.20 sec; Start 255: omp2p5-grad1; 252/404 Test #101: cubeprop ......................... Passed 9.11 sec; Start 86: cepa0-grad2; 253/404 Test #127: dfccsdt1 ......................... Passed 2.46 sec; Start 295: psithon1; 254/404 Test #241: ocepa-grad1 ...................... Passed 2.76 sec; Start 83: cdomp2-1; 255/404 Test #253: omp2p5-1 ......................... Passed 1.72 sec; Start 123: dfccsd1; 256/404 Test #255: omp2p5-grad1 ..................... Passed 2.83 sec; Start 10: castup3; 257/404 Test #226: mp2-1 ............................ Passed 3.95 sec; Start 199: fnocc1; 258/404 Test #83: cdomp2-1 ......................... Passed 2.31 sec; Start 243: ocepa1; 259/404 Test #369: dft-jk ........................... Passed 5.86 sec; Start 15: cbs-xtpl-freq; 260/404 Test #86: cepa0-grad2 ...................... Passed 3.02 sec; Start 218: mints8; 261/404 Test #123: dfccsd1 .......................... Passed 2.54 sec; Start 198: freq-isotope2; 262/404 Test #295: psithon1 ......................... Passed 4.02 sec; Start 385: psi4numpy-fci; 263/404 Test #243: ocepa1 ........................... Passed 2.07 sec; Start 139: dfomp2-1; 264/404 Test #285: props2 ........................... Passed 6.83 sec; Start 158: dft-ghost; 265/404 Test #199: fnocc1 ........................... Passed 3.03 sec; Start 388: python-curve; 266/404 Test #10: castup3 .......................... Passed 4.38 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:23686,Test,Test,23686,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability, #5: casscf-sa-sp ..................... Passed 8.18 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.12 sec; Start 7: casscf-sp; 21/411 Test #7: casscf-sp ........................ Passed 6.39 sec; Start 8: castup1; 22/411 Test #8: castup1 .......................... Passed 1.55 sec; Start 9: castup2; 23/411 Test #9: castup2 .......................... Passed 3.53 sec; Start 10: castup3; 24/411 Test #10: castup3 .......................... Passed 3.78 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 23.24 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 12.37 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 59.71 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.36 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 5.43 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 12.13 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 32.38 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 37.42 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 6.42 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 3.59 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 3.22 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 3.59 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 18.49 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 7.05 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 9.49 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 15.84 sec; Start 29: cc14; 41/411 Test #29: cc14 ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:2810,Test,Test,2810,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability, #5: casscf-sa-sp ..................... Passed 8.72 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.05 sec; Start 7: casscf-sp; 21/411 Test #7: casscf-sp ........................ Passed 6.75 sec; Start 8: castup1; 22/411 Test #8: castup1 .......................... Passed 1.50 sec; Start 9: castup2; 23/411 Test #9: castup2 .......................... Passed 4.01 sec; Start 10: castup3; 24/411 Test #10: castup3 .......................... Passed 4.07 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 28.35 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 10.90 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 73.68 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.11 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 6.02 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 11.17 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 33.93 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 39.62 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 8.61 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 4.22 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 4.24 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 4.36 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 21.72 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 8.83 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 11.97 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 18.77 sec; Start 29: cc14; 41/411 Test #29: cc14 ...............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:2830,Test,Test,2830,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability, #61: cc44 ............................. Passed 86.68 sec; Start 242: ocepa-grad2; 76/411 Test #302: pywrap-cbs1 ...................... Passed 161.22 sec; Start 151: dfomp2p5-2; 77/411 Test #371: dft-custom-dhdf .................. Passed 99.18 sec; Start 19: cbs-xtpl-wrapper; 78/411 Test #325: scf-bz2 .......................... Passed 123.80 sec; Start 81: cc9; 79/411 Test #280: opt-irc-1 ........................ Passed 105.80 sec; Start 56: cc4; 80/411 Test #151: dfomp2p5-2 ....................... Passed 32.00 sec; Start 279: opt14; 81/411 Test #261: omp3-5 ........................... Passed 71.80 sec; Start 63: cc46; 82/411 Test #230: mp2-module ....................... Passed 83.78 sec; Start 156: dfomp2p5-grad2; 83/411 Test #242: ocepa-grad2 ...................... Passed 48.77 sec; Start 249: omp2-4; 84/411 Test #81: cc9 .............................. Passed 33.45 sec; Start 292: psimrcc-fd-freq2; 85/411 Test #259: omp3-3 ........................... Passed 65.71 sec; Start 78: cc8a; 86/411 Test #56: cc4 .............................. Passed 32.87 sec; Start 142: dfomp2-4; 87/411 Test #63: cc46 ............................. Passed 37.77 sec; Start 77: cc8; 88/411 Test #19: cbs-xtpl-wrapper ................. Passed 73.55 sec; Start 260: omp3-4; 89/411 Test #142: dfomp2-4 ......................... Passed 39.17 sec; Start 256: omp2p5-grad2; 90/411 Test #205: frac-traverse .................... Passed 218.91 sec; Start 317: sapt3; 91/411 Test #78: cc8a ............................. Passed 53.44 sec; Start 79: cc8b; 92/411 Test #279: opt14 ............................ Passed 79.82 sec; Start 67: cc4a; 93/411 Test #249: omp2-4 ........................... Passed 74.23 sec; Start 55: cc39; 94/411 Test #156: dfomp2p5-grad2 ................... Passed 77.67 sec; Start 68: cc50; 95/411 Test #278: opt13 ............................ Passed 729.83 sec; Start 319: sapt5; 96/411 Test #77: cc8 .............................. Passed 55.92 sec; Start 66: cc49; 97/411 Test #292: psimrcc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:8268,Test,Test,8268,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #63: cc47 ............................. Passed 55.85 sec; Start 54: cc38; 139/401 Test #81: cc9a ............................. Passed 61.33 sec; Start 142: dfomp2-grad1; 140/401 Test #21: cc10 ............................. Passed 49.35 sec; Start 71: cc54; 141/401 Test #72: cc55 ............................. Passed 58.77 sec; Start 318: sapt-dft-lrc; 142/401 Test #151: dfomp2p5-grad1 ................... Passed 37.46 sec; Start 254: omp3-2; 143/401 Test #318: sapt-dft-lrc ..................... Passed 11.07 sec; Start 107: dcft2; 144/401 Test #22: cc11 ............................. Passed 49.69 sec; Start 51: cc35; 145/401 Test #372: pywrap-bfs ....................... Passed 24.73 sec; Start 264: opt2-fd; 146/401 Test #295: pywrap-alias ..................... Passed 82.94 sec; Start 20: cc1; 147/401 Test #88: cepa3 ............................ Passed 21.33 sec; Start 299: pywrap-checkrun-convcrit; 148/401 Test #78: cc8b ............................. Passed 69.32 sec; Start 148: dfomp3-grad2; 149/401 Test #55: cc39 ............................. Passed 63.25 sec; Start 87: cepa2; 150/401 Test #109: dcft4 ............................ Passed 844.58 sec; Start 49: cc33; 151/401 Test #142: dfomp2-grad1 ..................... Passed 27.95 sec; Start 65: cc49; 152/401 Test #37: cc22 ............................. Passed 36.53 sec; Start 297: pywrap-basis; 153/401 Test #80: cc9 .............................. Passed 69.66 sec; Start 363: scf-freq1; 154/401 Test #107: dcft2 ............................ Passed 15.25 sec; Start 106: dcft1; 155/401 Test #23: cc12 ............................. Passed 36.72 sec; Start 367: dft-custom-hybrid; 156/401 Test #264: opt2-fd .......................... Passed 12.62 sec; Start 331: scf4; 157/401 Test #254: omp3-2 ........................... Passed 31.04 sec; Start 288: psimrcc-fd-freq2; 158/401 Test #103: dcft-grad2 ....................... Passed 112.53 sec; Start 160: dft-grad1; 159/401 Test #87: cepa2 ............................ Passed 12.23 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:14367,Test,Test,14367,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #66: cc4a ............................. Passed 7.71 sec; Start 67: cc50; 48/85 Test #67: cc50 ............................. Passed 13.56 sec; Start 68: cc51; 49/85 Test #68: cc51 ............................. Passed 22.84 sec; Start 69: cc52; 50/85 Test #69: cc52 ............................. Passed 35.22 sec; Start 70: cc53; 51/85 Test #70: cc53 ............................. Passed 5.34 sec; Start 71: cc54; 52/85 Test #71: cc54 ............................. Passed 3.69 sec; Start 72: cc55; 53/85 Test #72: cc55 ............................. Passed 6.05 sec; Start 73: cc5a; 54/85 Test #73: cc5a ............................. Passed 20.77 sec; Start 74: cc6; 55/85 Test #74: cc6 .............................. Passed 29.20 sec; Start 75: cc7; 56/85 Test #75: cc7 .............................. Passed 30.38 sec; Start 76: cc8; 57/85 Test #76: cc8 .............................. Passed 5.07 sec; Start 77: cc8a; 58/85 Test #77: cc8a ............................. Passed 4.66 sec; Start 78: cc8b; 59/85 Test #78: cc8b ............................. Passed 4.93 sec; Start 79: cc8c; 60/85 Test #79: cc8c ............................. Passed 4.46 sec; Start 80: cc9; 61/85 Test #80: cc9 .............................. Passed 5.68 sec; Start 81: cc9a; 62/85 Test #81: cc9a ............................. Passed 5.88 sec; Start 101: decontract; 63/85 Test #101: decontract ....................... Passed 1.35 sec; Start 119: dfccd1; 64/85 Test #119: dfccd1 ........................... Passed 1.55 sec; Start 120: dfccdl1; 65/85 Test #120: dfccdl1 .......................... Passed 1.44 sec; Start 121: dfccd-grad1; 66/85 Test #121: dfccd-grad1 ...................... Passed 2.62 sec; Start 122: dfccsd1; 67/85 Test #122: dfccsd1 .......................... Passed 1.60 sec; Start 123: dfccsdl1; 68/85 Test #123: dfccsdl1 ......................... Passed 1.62 sec; Start 124: dfccsd-grad1; 69/85 Test #124: dfccsd-grad1 ..................... Passed 4.59 sec; Start 125: dfccsd-t-grad1; 70/85 Test #125: d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:4982,Test,Test,4982,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability, #67: cc49 ............................. Passed 72.11 sec; Start 171: dft1-alt; 109/412 Test #72: cc53 ............................. Passed 57.83 sec; Start 73: cc54; 110/412 Test #26: cc13a ............................ Passed 508.31 sec; Start 277: opt11; 111/412 Test #257: omp2p5-grad2 ..................... Passed 76.78 sec; Start 56: cc39; 112/412 Test #163: dft-grad-meta .................... Passed 52.87 sec; Start 220: mints-benchmark; 113/412 Test #74: cc55 ............................. Passed 57.23 sec; Start 274: opt7; 114/412 Test #148: dfomp3-2 ......................... Passed 70.64 sec; Start 68: cc4a; 115/412 Test #28: cc13c ............................ Passed 117.07 sec; Start 238: nbody-he-cluster; 116/412 Test #157: dfomp2p5-grad2 ................... Passed 97.92 sec; Start 152: dfomp2p5-2; 117/412 Test #171: dft1-alt ......................... Passed 53.74 sec; Start 85: cdomp2-2; 118/412 Test #220: mints-benchmark .................. Passed 39.18 sec; Start 308: pywrap-db1; 119/412 Test #73: cc54 ............................. Passed 55.12 sec; Start 64: cc46; 120/412 Test #141: dfomp2-2 ......................... Passed 73.61 sec; Start 349: sapt-compare; 121/412 Test #300: pywrap-alias ..................... Passed 83.90 sec; Start 132: dfmp2-3; 122/412 Test #277: opt11 ............................ Passed 64.53 sec; Start 143: dfomp2-4; 123/412 Test #56: cc39 ............................. Passed 61.37 sec; Start 49: cc32; 124/412 Test #274: opt7 ............................. Passed 57.39 sec; Start 313: rasci-ne; 125/412 Test #238: nbody-he-cluster ................. Passed 60.21 sec; Start 338: scf6; 126/412 Test #68: cc4a ............................. Passed 64.27 sec; Start 1: adc1; 127/412 Test #19: cbs-xtpl-nbody ................... Passed 111.26 sec; Start 33: cc17; 128/412 Test #308: pywrap-db1 ....................... Passed 44.70 sec; Start 246: ocepa3; 129/412 Test #85: cdomp2-2 ......................... Passed 52.50 sec; Start 107: dcft-grad4; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:11303,Test,Test,11303,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability, #67: cc50 ............................. Passed 13.56 sec; Start 68: cc51; 49/85 Test #68: cc51 ............................. Passed 22.84 sec; Start 69: cc52; 50/85 Test #69: cc52 ............................. Passed 35.22 sec; Start 70: cc53; 51/85 Test #70: cc53 ............................. Passed 5.34 sec; Start 71: cc54; 52/85 Test #71: cc54 ............................. Passed 3.69 sec; Start 72: cc55; 53/85 Test #72: cc55 ............................. Passed 6.05 sec; Start 73: cc5a; 54/85 Test #73: cc5a ............................. Passed 20.77 sec; Start 74: cc6; 55/85 Test #74: cc6 .............................. Passed 29.20 sec; Start 75: cc7; 56/85 Test #75: cc7 .............................. Passed 30.38 sec; Start 76: cc8; 57/85 Test #76: cc8 .............................. Passed 5.07 sec; Start 77: cc8a; 58/85 Test #77: cc8a ............................. Passed 4.66 sec; Start 78: cc8b; 59/85 Test #78: cc8b ............................. Passed 4.93 sec; Start 79: cc8c; 60/85 Test #79: cc8c ............................. Passed 4.46 sec; Start 80: cc9; 61/85 Test #80: cc9 .............................. Passed 5.68 sec; Start 81: cc9a; 62/85 Test #81: cc9a ............................. Passed 5.88 sec; Start 101: decontract; 63/85 Test #101: decontract ....................... Passed 1.35 sec; Start 119: dfccd1; 64/85 Test #119: dfccd1 ........................... Passed 1.55 sec; Start 120: dfccdl1; 65/85 Test #120: dfccdl1 .......................... Passed 1.44 sec; Start 121: dfccd-grad1; 66/85 Test #121: dfccd-grad1 ...................... Passed 2.62 sec; Start 122: dfccsd1; 67/85 Test #122: dfccsd1 .......................... Passed 1.60 sec; Start 123: dfccsdl1; 68/85 Test #123: dfccsdl1 ......................... Passed 1.62 sec; Start 124: dfccsd-grad1; 69/85 Test #124: dfccsd-grad1 ..................... Passed 4.59 sec; Start 125: dfccsd-t-grad1; 70/85 Test #125: dfccsd-t-grad1 ................... Passed 3.73 sec; Start 126: dfccsdt1; 71/85 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:5066,Test,Test,5066,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability, #68: cc4a ............................. Passed 55.65 sec; Start 246: ocepa3; 120/412 Test #163: dft-grad-meta .................... Passed 57.17 sec; Start 308: pywrap-db1; 121/412 Test #171: dft1-alt ......................... Passed 61.25 sec; Start 12: cbs-parser; 122/412 Test #74: cc55 ............................. Passed 69.06 sec; Start 349: sapt-compare; 123/412 Test #274: opt7 ............................. Passed 67.33 sec; Start 21: cc1; 124/412 Test #238: nbody-he-cluster ................. Passed 70.58 sec; Start 220: mints-benchmark; 125/412 Test #279: opt13 ............................ Passed 837.45 sec; Start 338: scf6; 126/412 Test #73: cc54 ............................. Passed 63.23 sec; Start 132: dfmp2-3; 127/412 Test #64: cc46 ............................. Passed 66.40 sec; Start 201: fnocc2; 128/412 Test #83: cc9a ............................. Passed 95.41 sec; Start 337: scf5; 129/412 Test #81: cc8c ............................. Passed 100.16 sec; Start 33: cc17; 130/412 Test #308: pywrap-db1 ....................... Passed 48.18 sec; Start 107: dcft-grad4; 131/412 Test #85: cdomp2-2 ......................... Passed 78.83 sec; Start 195: fd-freq-gradient; 132/412 Test #143: dfomp2-4 ......................... Passed 65.99 sec; Start 93: ci-multi; 133/412 Test #349: sapt-compare ..................... Passed 46.08 sec; Start 361: x2c1; 134/412 Test #220: mints-benchmark .................. Passed 43.40 sec; Start 313: rasci-ne; 135/412 Test #246: ocepa3 ........................... Passed 65.44 sec; Start 49: cc32; 136/412 Test #132: dfmp2-3 .......................... Passed 43.03 sec; Start 134: dfmp2-ecp; 137/412 Test #338: scf6 ............................. Passed 48.44 sec; Start 207: ghosts; 138/412 Test #12: cbs-parser ....................... Passed 75.97 sec; Start 130: dfmp2-1; 139/412 Test #337: scf5 ............................. Passed 45.22 sec; Start 324: sapt7; 140/412 Test #49: cc32 ............................. Passed 27.50 sec; Start 153:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:12289,Test,Test,12289,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #68: cc50 ............................. Passed 86.48 sec; Start 7: casscf-sp; 126/411 Test #33: cc18 ............................. Passed 66.37 sec; Start 326: scf-ecp; 127/411 Test #32: cc17 ............................. Passed 65.50 sec; Start 264: opt-lindep-change; 128/411 Test #374: dft-custom-gga ................... Passed 39.03 sec; Start 59: cc42; 129/411 Test #392: python-cc54 ...................... Passed 88.76 sec; Start 82: cc9a; 130/411 Test #16: cbs-xtpl-gradient ................ Passed 42.32 sec; Start 109: dcft3; 131/411 Test #274: opt8 ............................. Passed 46.93 sec; Start 156: dft-b2plyp; 132/411 Test #337: scf6 ............................. Passed 67.92 sec; Start 196: fd-gradient; 133/411 Test #202: fnocc4 ........................... Passed 34.47 sec; Start 1: adc1; 134/411 Test #264: opt-lindep-change ................ Passed 28.28 sec; Start 147: dfomp3-2; 135/411 Test #326: scf-ecp .......................... Passed 35.46 sec; Start 173: dft-omega; 136/411 Test #7: casscf-sp ........................ Passed 36.13 sec; Start 207: gibbs; 137/411 Test #249: omp2-4 ........................... Passed 110.38 sec; Start 375: pywrap-bfs; 138/411 Test #109: dcft3 ............................ Passed 25.22 sec; Start 12: cbs-parser; 139/411 Test #65: cc48 ............................. Passed 77.89 sec; Start 166: dft-psivar; 140/411 Test #156: dft-b2plyp ....................... Passed 25.02 sec; Start 126: dfccsd-t-grad1; 141/411 Test #1: adc1 ............................. Passed 25.46 sec; Start 73: cc55; 142/411 Test #207: gibbs ............................ Passed 24.19 sec; Start 67: cc4a; 143/411 Test #173: dft-omega ........................ Passed 24.73 sec; Start 245: ocepa3; 144/411 Test #256: omp2p5-grad2 ..................... Passed 76.39 sec; Start 64: cc47; 145/411 Test #196: fd-gradient ...................... Passed 35.40 sec; Start 346: sapt-dft1; 146/411 Test #375: pywrap-bfs ....................... Passed 24.62 sec; Start 151,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:12893,Test,Test,12893,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #70: cc52 ............................. Passed 130.41 sec; Start 389: python-pubchem; 47/411 Test #75: cc6 .............................. Passed 86.65 sec; Start 41: cc26; 48/411 Test #389: python-pubchem ................... Passed 53.08 sec; Start 61: cc44; 49/411 Test #111: dcft5 ............................ Passed 256.36 sec; Start 170: dft1-alt; 50/411 Test #61: cc44 ............................. Passed 68.38 sec; Start 100: ci-property; 51/411 Test #170: dft1-alt ......................... Passed 47.95 sec; Start 2: adc2; 52/411 Test #2: adc2 ............................. Passed 41.32 sec; Start 230: mp2-module; 53/411 Test #100: ci-property ...................... Passed 53.35 sec; Start 219: mints-benchmark; 54/411 Test #305: pywrap-checkrun-rohf ............. Passed 328.05 sec; Start 348: sapt-compare; 55/411 Test #219: mints-benchmark .................. Passed 40.12 sec; Start 38: cc23; 56/411 Test #348: sapt-compare ..................... Passed 43.18 sec; Start 131: dfmp2-3; 57/411 Test #230: mp2-module ....................... Passed 79.66 sec; Start 40: cc25; 58/411 Test #145: dfomp2-grad3 ..................... Passed 526.80 sec; Start 19: cbs-xtpl-wrapper; 59/411 Test #131: dfmp2-3 .......................... Passed 40.26 sec; Start 307: pywrap-db1; 60/411 Test #35: cc2 .............................. Passed 327.30 sec; Start 74: cc5a; 61/411 Test #307: pywrap-db1 ....................... Passed 39.70 sec; Start 17: cbs-xtpl-opt; 62/411 Test #41: cc26 ............................. Passed 280.38 sec; Start 29: cc14; 63/411 Test #19: cbs-xtpl-wrapper ................. Passed 77.77 sec; Start 42: cc27; 64/411 Test #74: cc5a ............................. Passed 97.39 sec; Start 276: opt11; 65/411 Test #318: sapt4 ............................ Passed 1909.66 sec; Start 47: cc31; 66/411 Test #276: opt11 ............................ Passed 105.52 sec; Start 273: opt7; 67/411 Test #17: cbs-xtpl-opt ..................... Passed 206.55 sec; Start 36: cc21; 68/411 Test ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:5534,Test,Test,5534,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #72: cc53 ............................. Passed 59.55 sec; Start 283: opt-irc-3; 178/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 19.87 sec; Start 278: opt12; 179/412 Test #273: opt6 ............................. Passed 26.74 sec; Start 166: dft-grad2; 180/412 Test #34: cc18 ............................. Passed 51.43 sec; Start 322: sapt-dft-api; 181/412 Test #85: cdomp2-2 ......................... Passed 51.89 sec; Start 154: dft-grad-lr1; 182/412 Test #316: sapt1 ............................ Passed 19.12 sec; Start 203: fnocc4; 183/412 Test #147: dfomp3-1 ......................... Passed 21.93 sec; Start 200: fnocc1; 184/412 Test #268: opt2 ............................. Passed 22.81 sec; Start 178: extern2; 185/412 Test #64: cc46 ............................. Passed 42.40 sec; Start 297: psithon2; 186/412 Test #52: cc35 ............................. Passed 24.32 sec; Start 202: fnocc3; 187/412 Test #74: cc55 ............................. Passed 45.69 sec; Start 55: cc38; 188/412 Test #33: cc17 ............................. Passed 30.45 sec; Start 16: cbs-xtpl-gradient; 189/412 Test #23: cc11 ............................. Passed 29.96 sec; Start 73: cc54; 190/412 Test #200: fnocc1 ........................... Passed 12.18 sec; Start 267: opt1-fd; 191/412 Test #166: dft-grad2 ........................ Passed 17.30 sec; Start 292: psimrcc-fd-freq1; 192/412 Test #322: sapt-dft-api ..................... Passed 17.66 sec; Start 219: mints8; 193/412 Test #154: dft-grad-lr1 ..................... Passed 17.73 sec; Start 170: dft-vv10; 194/412 Test #278: opt12 ............................ Passed 20.24 sec; Start 253: omp2-grad2; 195/412 Test #283: opt-irc-3 ........................ Passed 28.90 sec; Start 304: pywrap-checkrun-convcrit; 196/412 Test #246: ocepa3 ........................... Passed 41.58 sec; Start 24: cc12; 197/412 Test #202: fnocc3 ........................... Passed 14.69 sec; Start 341: soscf-large; 198/412 Test #203: fnocc4 ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:17667,Test,Test,17667,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #72: cc55 ............................. Passed 58.77 sec; Start 318: sapt-dft-lrc; 142/401 Test #151: dfomp2p5-grad1 ................... Passed 37.46 sec; Start 254: omp3-2; 143/401 Test #318: sapt-dft-lrc ..................... Passed 11.07 sec; Start 107: dcft2; 144/401 Test #22: cc11 ............................. Passed 49.69 sec; Start 51: cc35; 145/401 Test #372: pywrap-bfs ....................... Passed 24.73 sec; Start 264: opt2-fd; 146/401 Test #295: pywrap-alias ..................... Passed 82.94 sec; Start 20: cc1; 147/401 Test #88: cepa3 ............................ Passed 21.33 sec; Start 299: pywrap-checkrun-convcrit; 148/401 Test #78: cc8b ............................. Passed 69.32 sec; Start 148: dfomp3-grad2; 149/401 Test #55: cc39 ............................. Passed 63.25 sec; Start 87: cepa2; 150/401 Test #109: dcft4 ............................ Passed 844.58 sec; Start 49: cc33; 151/401 Test #142: dfomp2-grad1 ..................... Passed 27.95 sec; Start 65: cc49; 152/401 Test #37: cc22 ............................. Passed 36.53 sec; Start 297: pywrap-basis; 153/401 Test #80: cc9 .............................. Passed 69.66 sec; Start 363: scf-freq1; 154/401 Test #107: dcft2 ............................ Passed 15.25 sec; Start 106: dcft1; 155/401 Test #23: cc12 ............................. Passed 36.72 sec; Start 367: dft-custom-hybrid; 156/401 Test #264: opt2-fd .......................... Passed 12.62 sec; Start 331: scf4; 157/401 Test #254: omp3-2 ........................... Passed 31.04 sec; Start 288: psimrcc-fd-freq2; 158/401 Test #103: dcft-grad2 ....................... Passed 112.53 sec; Start 160: dft-grad1; 159/401 Test #87: cepa2 ............................ Passed 12.23 sec; Start 99: ci-property; 160/401 Test #363: scf-freq1 ........................ Passed 10.44 sec; Start 317: sapt-dft-api; 161/401 Test #332: scf5 ............................. Passed 44.17 sec; Start 266: opt4; 162/401 Test #367: dft-custom-hybrid ................ P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:14632,Test,Test,14632,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability, #73: cc54 ............................. Passed 73.64 sec; Start 338: scf6; 126/412 Test #163: dft-grad-meta .................... Passed 54.77 sec; Start 33: cc17; 127/412 Test #2: adc2 ............................. Passed 48.26 sec; Start 220: mints-benchmark; 128/412 Test #55: cc38 ............................. Passed 75.15 sec; Start 132: dfmp2-3; 129/412 Test #12: cbs-parser ....................... Passed 84.13 sec; Start 337: scf5; 130/412 Test #308: pywrap-db1 ....................... Passed 44.31 sec; Start 195: fd-freq-gradient; 131/412 Test #56: cc39 ............................. Passed 58.25 sec; Start 361: x2c1; 132/412 Test #143: dfomp2-4 ......................... Passed 71.69 sec; Start 93: ci-multi; 133/412 Test #72: cc53 ............................. Passed 61.07 sec; Start 107: dcft-grad4; 134/412 Test #80: cc8b ............................. Passed 59.22 sec; Start 393: python-cc54; 135/412 Test #349: sapt-compare ..................... Passed 51.30 sec; Start 23: cc11; 136/412 Test #246: ocepa3 ........................... Passed 63.75 sec; Start 313: rasci-ne; 137/412 Test #33: cc17 ............................. Passed 44.73 sec; Start 127: dfccsd-t-grad1; 138/412 Test #338: scf6 ............................. Passed 49.52 sec; Start 134: dfmp2-ecp; 139/412 Test #201: fnocc2 ........................... Passed 69.43 sec; Start 34: cc18; 140/412 Test #220: mints-benchmark .................. Passed 44.32 sec; Start 149: dfomp3-grad1; 141/412 Test #337: scf5 ............................. Passed 39.63 sec; Start 253: omp2-grad2; 142/412 Test #132: dfmp2-3 .......................... Passed 42.96 sec; Start 207: ghosts; 143/412 Test #93: ci-multi ......................... Passed 34.57 sec; Start 130: dfmp2-1; 144/412 Test #361: x2c1 ............................. Passed 35.10 sec; Start 324: sapt7; 145/412 Test #393: python-cc54 ...................... Passed 31.31 sec; Start 275: opt8; 146/412 Test #23: cc11 ............................. Passed 32.37 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:12861,Test,Test,12861,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability, #75: cc5a ............................. Passed 108.07 sec; Start 91: cepa1; 88/412 Test #82: cc9 .............................. Passed 64.37 sec; Start 92: cepa-module; 89/412 Test #79: cc8a ............................. Passed 86.04 sec; Start 93: ci-multi; 90/412 Test #88: cepa1 ............................ Passed 14.93 sec; Start 94: cisd-h2o+-0; 91/412 Test #41: cc25 ............................. Passed 643.73 sec; Start 95: cisd-h2o+-1; 92/412 Test #89: cepa2 ............................ Passed 15.04 sec; Start 96: cisd-h2o+-2; 93/412 Test #94: cisd-h2o+-0 ...................... Passed 5.25 sec; Start 97: cisd-h2o-clpse; 94/412 Test #81: cc8c ............................. Passed 75.87 sec; Start 98: cisd-opt-fd; 95/412 Test #97: cisd-h2o-clpse ................... Passed 2.30 sec; Start 99: cisd-sp; 96/412 Test #95: cisd-h2o+-1 ...................... Passed 5.29 sec; Start 100: cisd-sp-2; 97/412 Test #85: cdomp2-2 ......................... Passed 44.64 sec; Start 101: ci-property; 98/412 Test #96: cisd-h2o+-2 ...................... Passed 6.02 sec; Start 102: cubeprop; 99/412 Test #90: cepa3 ............................ Passed 15.90 sec; Start 103: decontract; 100/412 Test #103: decontract ....................... Passed 1.91 sec; Start 104: dcft-grad1; 101/412 Test #100: cisd-sp-2 ........................ Passed 6.36 sec; Start 105: dcft-grad2; 102/412 Test #91: cepa1 ............................ Passed 17.25 sec; Start 106: dcft-grad3; 103/412 Test #99: cisd-sp .......................... Passed 12.02 sec; Start 107: dcft-grad4; 104/412 Test #83: cc9a ............................. Passed 77.94 sec; Start 108: dcft1; 105/412 Test #102: cubeprop ......................... Passed 11.79 sec; Start 109: dcft2; 106/412 Test #71: cc52 ............................. Passed 177.16 sec; Start 110: dcft3; 107/412 Test #106: dcft-grad3 ....................... Passed 17.10 sec; Start 111: dcft4; 108/412 Test #109: dcft2 ............................ Passed 10.64 sec; Start 112,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:9060,Test,Test,9060,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #77: cc7 .............................. Passed 286.85 sec; Start 115: dcft8; 12/412 Test #43: cc27 ............................. Passed 281.14 sec; Start 25: cc13; 13/412 Test #306: pywrap-checkrun-rohf ............. Passed 302.83 sec; Start 156: dft-grad-lr3; 14/412 Test #40: cc24 ............................. Passed 311.20 sec; Start 30: cc14; 15/412 Test #42: cc26 ............................. Passed 239.25 sec; Start 228: mp2-def2; 16/412 Test #241: ocepa-freq1 ...................... Passed 322.81 sec; Start 13: cbs-xtpl-alpha; 17/412 Test #25: cc13 ............................. Passed 164.06 sec; Start 179: fsapt1; 18/412 Test #30: cc14 ............................. Passed 144.79 sec; Start 112: dcft5; 19/412 Test #115: dcft8 ............................ Passed 195.18 sec; Start 29: cc13d; 20/412 Test #36: cc2 .............................. Passed 211.45 sec; Start 360: tu6-cp-ne2; 21/412 Test #29: cc13d ............................ Passed 59.38 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #13: cbs-xtpl-alpha ................... Passed 119.40 sec; Start 183: isapt1; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 92.67 sec; Start 380: cc-module; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 58.33 sec; Start 45: cc29; 25/412 Test #380: cc-module ........................ Passed 43.51 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 143.69 sec; Start 11: cbs-delta-energy; 27/412 Test #32: cc16 ............................. Passed 37.14 sec; Start 71: cc52; 28/412 Test #11: cbs-delta-energy ................. Passed 41.66 sec; Start 282: opt-irc-2; 29/412 Test #45: cc29 ............................. Passed 71.91 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.79 sec; Start 18: cbs-xtpl-func; 31/412 Test #156: dft-grad-lr3 ..................... Passed 442.09 sec; Start 182: fsapt-allterms; 32/412 Test #282: opt-irc-2 ........................ Passed 102.23 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:2239,Test,Test,2239,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability, #77: cc7 .............................. Passed 317.71 sec; Start 36: cc2; 10/412 Test #41: cc25 ............................. Passed 421.47 sec; Start 115: dcft8; 11/412 Test #43: cc27 ............................. Passed 327.75 sec; Start 395: python-vibanalysis; 12/412 Test #306: pywrap-checkrun-rohf ............. Passed 359.48 sec; Start 25: cc13; 13/412 Test #241: ocepa-freq1 ...................... Passed 402.21 sec; Start 30: cc14; 14/412 Test #39: cc23 ............................. Passed 487.99 sec; Start 13: cbs-xtpl-alpha; 15/412 Test #42: cc26 ............................. Passed 471.50 sec; Start 156: dft-grad-lr3; 16/412 Test #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2045,Test,Test,2045,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability, #78: cc8a ............................. Passed 64.33 sec; Start 54: cc38; 180/411 Test #165: dft-grad2 ........................ Passed 16.70 sec; Start 142: dfomp2-4; 181/411 Test #140: dfomp2-2 ......................... Passed 56.04 sec; Start 51: cc35; 182/411 Test #177: extern2 .......................... Passed 30.48 sec; Start 218: mints8; 183/411 Test #48: cc32 ............................. Passed 25.58 sec; Start 324: sapt8; 184/411 Test #321: sapt-dft-api ..................... Passed 17.62 sec; Start 146: dfomp3-1; 185/411 Test #169: dft-vv10 ......................... Passed 21.80 sec; Start 275: opt9; 186/411 Test #247: omp2-2 ........................... Passed 32.66 sec; Start 301: pywrap-basis; 187/411 Test #238: nbody-intermediates .............. Passed 23.69 sec; Start 366: dft-smoke; 188/411 Test #296: psithon2 ......................... Passed 26.04 sec; Start 148: dfomp3-grad1; 189/411 Test #194: fd-freq-gradient ................. Passed 31.45 sec; Start 340: soscf-large; 190/411 Test #254: omp2p5-2 ......................... Passed 30.57 sec; Start 72: cc54; 191/411 Test #218: mints8 ........................... Passed 19.91 sec; Start 22: cc11; 192/411 Test #324: sapt8 ............................ Passed 20.43 sec; Start 5: casscf-sa-sp; 193/411 Test #301: pywrap-basis ..................... Passed 21.14 sec; Start 49: cc33; 194/411 Test #303: pywrap-checkrun-convcrit ......... Passed 44.50 sec; Start 164: dft-grad1; 195/411 Test #146: dfomp3-1 ......................... Passed 27.79 sec; Start 248: omp2-3; 196/411 Test #340: soscf-large ...................... Passed 15.12 sec; Start 138: dfmp2-grad5; 197/411 Test #275: opt9 ............................. Passed 29.14 sec; Start 350: dft-custom; 198/411 Test #80: cc8c ............................. Passed 57.00 sec; Start 286: props3; 199/411 Test #366: dft-smoke ........................ Passed 20.42 sec; Start 14: cbs-xtpl-energy; 200/411 Test #54: cc38 ............................. Passed 43.19 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:17879,Test,Test,17879,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability, #79: cc8a ............................. Passed 67.28 sec; Start 197: fd-gradient; 151/412 Test #160: dft-b2plyp ....................... Passed 25.44 sec; Start 153: dfomp2p5-grad1; 152/412 Test #53: cc36 ............................. Passed 27.67 sec; Start 91: cepa1; 153/412 Test #174: dft-omega ........................ Passed 26.66 sec; Start 50: cc33; 154/412 Test #129: dfccsdat1 ........................ Passed 26.53 sec; Start 164: dft-freq; 155/412 Test #7: casscf-sp ........................ Passed 37.16 sec; Start 347: sapt-dft1; 156/412 Test #127: dfccsd-t-grad1 ................... Passed 53.28 sec; Start 190: fci-tdm-2; 157/412 Test #167: dft-psivar ....................... Passed 26.97 sec; Start 72: cc53; 158/412 Test #152: dfomp2p5-2 ....................... Passed 110.98 sec; Start 149: dfomp3-grad1; 159/412 Test #12: cbs-parser ....................... Passed 92.18 sec; Start 34: cc18; 160/412 Test #164: dft-freq ......................... Passed 27.12 sec; Start 85: cdomp2-2; 161/412 Test #91: cepa1 ............................ Passed 33.32 sec; Start 359: tu5-sapt; 162/412 Test #57: cc4 .............................. Passed 63.11 sec; Start 248: omp2-2; 163/412 Test #190: fci-tdm-2 ........................ Passed 25.72 sec; Start 173: dft3; 164/412 Test #197: fd-gradient ...................... Passed 42.33 sec; Start 123: dfccd-grad1; 165/412 Test #347: sapt-dft1 ........................ Passed 28.00 sec; Start 323: sapt-dft-lrc; 166/412 Test #50: cc33 ............................. Passed 49.28 sec; Start 64: cc46; 167/412 Test #153: dfomp2p5-grad1 ................... Passed 51.79 sec; Start 74: cc55; 168/412 Test #359: tu5-sapt ......................... Passed 22.94 sec; Start 273: opt6; 169/412 Test #323: sapt-dft-lrc ..................... Passed 21.56 sec; Start 291: psimrcc-ccsd_t-4; 170/412 Test #126: dfccsd-grad1 ..................... Passed 67.76 sec; Start 268: opt2; 171/412 Test #78: cc8 .............................. Passed 94.88 sec; Start 147:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:15200,Test,Test,15200,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability, #79: cc8b ............................. Passed 28.79 sec; Start 126: dfccsd-t-grad1; 249/411 Test #94: cisd-h2o+-1 ...................... Passed 5.15 sec; Start 22: cc11; 250/411 Test #54: cc38 ............................. Passed 29.55 sec; Start 95: cisd-h2o+-2; 251/411 Test #392: python-cc54 ...................... Passed 28.18 sec; Start 295: psithon1; 252/411 Test #84: cdomp2-2 ......................... Passed 30.82 sec; Start 294: psimrcc-sp1; 253/411 Test #95: cisd-h2o+-2 ...................... Passed 5.19 sec; Start 310: rasci-c2-active; 254/411 Test #294: psimrcc-sp1 ...................... Passed 3.91 sec; Start 72: cc54; 255/411 Test #125: dfccsd-grad1 ..................... Passed 29.42 sec; Start 331: scf1; 256/411 Test #295: psithon1 ......................... Passed 9.42 sec; Start 62: cc45; 257/411 Test #310: rasci-c2-active .................. Passed 7.42 sec; Start 6: ao-casscf-sp; 258/411 Test #78: cc8a ............................. Passed 36.32 sec; Start 132: dfmp2-4; 259/411 Test #142: dfomp2-4 ......................... Passed 24.29 sec; Start 152: dfomp2p5-grad1; 260/411 Test #126: dfccsd-t-grad1 ................... Passed 22.19 sec; Start 377: pywrap-align-chiral; 261/411 Test #22: cc11 ............................. Passed 21.45 sec; Start 90: cepa1; 262/411 Test #331: scf1 ............................. Passed 4.75 sec; Start 236: mpn-bh; 263/411 Test #6: ao-casscf-sp ..................... Passed 4.17 sec; Start 283: opt-freeze-coords; 264/411 Test #377: pywrap-align-chiral .............. Passed 3.28 sec; Start 148: dfomp3-grad1; 265/411 Test #132: dfmp2-4 .......................... Passed 6.32 sec; Start 385: psi4numpy-fci; 266/411 Test #236: mpn-bh ........................... Passed 4.79 sec; Start 53: cc37; 267/411 Test #62: cc45 ............................. Passed 10.83 sec; Start 146: dfomp3-1; 268/411 Test #283: opt-freeze-coords ................ Passed 6.26 sec; Start 235: mp2-property; 269/411 Test #72: cc54 ............................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:24199,Test,Test,24199,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #7: casscf-sp ........................ Passed 89.41 sec; Start 32: cc17; 195/411 Test #49: cc33 ............................. Passed 111.73 sec; Start 258: omp3-2; 196/411 Test #56: cc4 .............................. Passed 144.03 sec; Start 71: cc53; 197/411 Test #55: cc39 ............................. Passed 166.43 sec; Start 144: dfomp2-grad2; 198/411 Test #258: omp3-2 ........................... Passed 74.77 sec; Start 367: scf-hess1; 199/411 Test #367: scf-hess1 ........................ Passed 16.23 sec; Start 184: fci-dipole; 200/411 Test #32: cc17 ............................. Passed 113.71 sec; Start 335: scf4; 201/411 Test #153: dfomp2p5-grad2 ................... Passed 316.26 sec; Start 186: fci-h2o-2; 202/411 Test #184: fci-dipole ....................... Passed 10.91 sec; Start 30: cc15; 203/411 Test #186: fci-h2o-2 ........................ Passed 9.39 sec; Start 15: cbs-xtpl-freq; 204/411 Test #63: cc46 ............................. Passed 139.50 sec; Start 376: pywrap-align; 205/411 Test #335: scf4 ............................. Passed 14.54 sec; Start 151: dfomp2p5-2; 206/411 Test #149: dfomp3-grad2 ..................... Passed 250.21 sec; Start 185: fci-h2o; 207/411 Test #71: cc53 ............................. Passed 97.98 sec; Start 252: omp2-grad2; 208/411 Test #376: pywrap-align ..................... Passed 4.72 sec; Start 107: dcft1; 209/411 Test #15: cbs-xtpl-freq .................... Passed 7.87 sec; Start 248: omp2-3; 210/411 Test #185: fci-h2o .......................... Passed 5.91 sec; Start 89: cepa3; 211/411 Test #20: cc1 .............................. Passed 198.16 sec; Start 147: dfomp3-2; 212/411 Test #89: cepa3 ............................ Passed 11.07 sec; Start 192: fd-freq-energy; 213/411 Test #144: dfomp2-grad2 ..................... Passed 87.37 sec; Start 37: cc22; 214/411 Test #248: omp2-3 ........................... Passed 19.53 sec; Start 341: soscf-ref; 215/411 Test #252: omp2-grad2 ....................... Passed 24.12 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:19250,Test,Test,19250,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability, #80: cc8b ............................. Passed 40.89 sec; Start 64: cc46; 117/412 Test #277: opt11 ............................ Passed 57.11 sec; Start 85: cdomp2-2; 118/412 Test #56: cc39 ............................. Passed 48.43 sec; Start 143: dfomp2-4; 119/412 Test #68: cc4a ............................. Passed 55.65 sec; Start 246: ocepa3; 120/412 Test #163: dft-grad-meta .................... Passed 57.17 sec; Start 308: pywrap-db1; 121/412 Test #171: dft1-alt ......................... Passed 61.25 sec; Start 12: cbs-parser; 122/412 Test #74: cc55 ............................. Passed 69.06 sec; Start 349: sapt-compare; 123/412 Test #274: opt7 ............................. Passed 67.33 sec; Start 21: cc1; 124/412 Test #238: nbody-he-cluster ................. Passed 70.58 sec; Start 220: mints-benchmark; 125/412 Test #279: opt13 ............................ Passed 837.45 sec; Start 338: scf6; 126/412 Test #73: cc54 ............................. Passed 63.23 sec; Start 132: dfmp2-3; 127/412 Test #64: cc46 ............................. Passed 66.40 sec; Start 201: fnocc2; 128/412 Test #83: cc9a ............................. Passed 95.41 sec; Start 337: scf5; 129/412 Test #81: cc8c ............................. Passed 100.16 sec; Start 33: cc17; 130/412 Test #308: pywrap-db1 ....................... Passed 48.18 sec; Start 107: dcft-grad4; 131/412 Test #85: cdomp2-2 ......................... Passed 78.83 sec; Start 195: fd-freq-gradient; 132/412 Test #143: dfomp2-4 ......................... Passed 65.99 sec; Start 93: ci-multi; 133/412 Test #349: sapt-compare ..................... Passed 46.08 sec; Start 361: x2c1; 134/412 Test #220: mints-benchmark .................. Passed 43.40 sec; Start 313: rasci-ne; 135/412 Test #246: ocepa3 ........................... Passed 65.44 sec; Start 49: cc32; 136/412 Test #132: dfmp2-3 .......................... Passed 43.03 sec; Start 134: dfmp2-ecp; 137/412 Test #338: scf6 ............................. Passed 48.44 sec; Start 207,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:12023,Test,Test,12023,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability, #80: cc8c ............................. Passed 64.93 sec; Start 90: cepa1; 95/411 Test #88: cepa2 ............................ Passed 21.59 sec; Start 91: cepa-module; 96/411 Test #84: cdomp2-2 ......................... Passed 54.23 sec; Start 92: ci-multi; 97/411 Test #82: cc9a ............................. Passed 70.43 sec; Start 93: cisd-h2o+-0; 98/411 Test #81: cc9 .............................. Passed 73.93 sec; Start 94: cisd-h2o+-1; 99/411 Test #89: cepa3 ............................ Passed 27.08 sec; Start 95: cisd-h2o+-2; 100/411 Test #93: cisd-h2o+-0 ...................... Passed 5.41 sec; Start 96: cisd-h2o-clpse; 101/411 Test #94: cisd-h2o+-1 ...................... Passed 5.65 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 5.83 sec; Start 98: cisd-sp; 103/411 Test #95: cisd-h2o+-2 ...................... Passed 8.02 sec; Start 99: cisd-sp-2; 104/411 Test #90: cepa1 ............................ Passed 27.52 sec; Start 100: ci-property; 105/411 Test #99: cisd-sp-2 ........................ Passed 5.41 sec; Start 101: cubeprop; 106/411 Test #98: cisd-sp .......................... Passed 12.15 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 1.53 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 11.45 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 45.38 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 22.22 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 63.79 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 46.58 sec; Start 108: dcft2; 113/411 Test #108: dcft2 ............................ Passed 14.73 sec; Start 109: dcft3; 114/411 Test #91: cepa-module ...................... Passed 165.34 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 41.56 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:9535,Test,Test,9535,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability, #80: cc8c ............................. Passed 66.72 sec; Start 49: cc33; 130/411 Test #125: dfccsd-grad1 ..................... Passed 58.61 sec; Start 299: pywrap-alias; 131/411 Test #72: cc54 ............................. Passed 35.14 sec; Start 37: cc22; 132/411 Test #62: cc45 ............................. Passed 27.12 sec; Start 23: cc12; 133/411 Test #276: opt11 ............................ Passed 62.61 sec; Start 150: dfomp2p5-1; 134/411 Test #162: dft-grad-meta .................... Passed 49.92 sec; Start 92: ci-multi; 135/411 Test #51: cc35 ............................. Passed 44.56 sec; Start 273: opt7; 136/411 Test #170: dft1-alt ......................... Passed 53.15 sec; Start 152: dfomp2p5-grad1; 137/411 Test #22: cc11 ............................. Passed 47.56 sec; Start 219: mints-benchmark; 138/411 Test #237: nbody-he-cluster ................. Passed 58.00 sec; Start 2: adc2; 139/411 Test #25: cc13a ............................ Passed 484.89 sec; Start 131: dfmp2-3; 140/411 Test #348: sapt-compare ..................... Passed 47.43 sec; Start 50: cc34; 141/411 Test #49: cc33 ............................. Passed 43.67 sec; Start 106: dcft-grad4; 142/411 Test #245: ocepa3 ........................... Passed 58.12 sec; Start 307: pywrap-db1; 143/411 Test #150: dfomp2p5-1 ....................... Passed 36.29 sec; Start 48: cc32; 144/411 Test #37: cc22 ............................. Passed 49.20 sec; Start 146: dfomp3-1; 145/411 Test #23: cc12 ............................. Passed 43.83 sec; Start 312: rasci-ne; 146/411 Test #50: cc34 ............................. Passed 26.37 sec; Start 133: dfmp2-ecp; 147/411 Test #152: dfomp2p5-grad1 ................... Passed 36.32 sec; Start 52: cc36; 148/411 Test #2: adc2 ............................. Passed 33.36 sec; Start 16: cbs-xtpl-gradient; 149/411 Test #219: mints-benchmark .................. Passed 38.75 sec; Start 109: dcft3; 150/411 Test #92: ci-multi ......................... Passed 48.56 sec; Start 143: df,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:13189,Test,Test,13189,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #80: cc8c ............................. Passed 92.20 sec; Start 90: cepa1; 95/411 Test #81: cc9 .............................. Passed 91.83 sec; Start 91: cepa-module; 96/411 Test #88: cepa2 ............................ Passed 21.82 sec; Start 92: ci-multi; 97/411 Test #84: cdomp2-2 ......................... Passed 84.98 sec; Start 93: cisd-h2o+-0; 98/411 Test #82: cc9a ............................. Passed 96.99 sec; Start 94: cisd-h2o+-1; 99/411 Test #89: cepa3 ............................ Passed 23.34 sec; Start 95: cisd-h2o+-2; 100/411 Test #93: cisd-h2o+-0 ...................... Passed 5.06 sec; Start 96: cisd-h2o-clpse; 101/411 Test #90: cepa1 ............................ Passed 19.21 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 1.95 sec; Start 98: cisd-sp; 103/411 Test #94: cisd-h2o+-1 ...................... Passed 4.64 sec; Start 99: cisd-sp-2; 104/411 Test #95: cisd-h2o+-2 ...................... Passed 4.42 sec; Start 100: ci-property; 105/411 Test #99: cisd-sp-2 ........................ Passed 8.45 sec; Start 101: cubeprop; 106/411 Test #98: cisd-sp .......................... Passed 13.42 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 1.79 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 10.89 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 44.22 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 24.77 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 68.01 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 40.83 sec; Start 108: dcft2; 113/411 Test #91: cepa-module ...................... Passed 131.84 sec; Start 109: dcft3; 114/411 Test #108: dcft2 ............................ Passed 20.56 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 30.81 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:9544,Test,Test,9544,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability, #81: cc9 .............................. Passed 59.24 sec; Start 94: cisd-h2o+-1; 91/411 Test #89: cepa3 ............................ Passed 25.08 sec; Start 95: cisd-h2o+-2; 92/411 Test #93: cisd-h2o+-0 ...................... Passed 7.16 sec; Start 96: cisd-h2o-clpse; 93/411 Test #94: cisd-h2o+-1 ...................... Passed 6.09 sec; Start 97: cisd-opt-fd; 94/411 Test #96: cisd-h2o-clpse ................... Passed 5.20 sec; Start 98: cisd-sp; 95/411 Test #95: cisd-h2o+-2 ...................... Passed 6.73 sec; Start 99: cisd-sp-2; 96/411 Test #99: cisd-sp-2 ........................ Passed 6.04 sec; Start 100: ci-property; 97/411 Test #98: cisd-sp .......................... Passed 16.34 sec; Start 101: cubeprop; 98/411 Test #90: cepa1 ............................ Passed 40.09 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 2.16 sec; Start 103: dcft-grad1; 100/411 Test #84: cdomp2-2 ......................... Passed 73.49 sec; Start 104: dcft-grad2; 101/411 Test #82: cc9a ............................. Passed 85.12 sec; Start 105: dcft-grad3; 102/411 Test #101: cubeprop ......................... Passed 11.74 sec; Start 106: dcft-grad4; 103/411 Test #278: opt13 ............................ Passed 771.06 sec; Start 107: dcft1; 104/411 Test #70: cc52 ............................. Passed 152.70 sec; Start 108: dcft2; 105/411 Test #92: ci-multi ......................... Passed 65.79 sec; Start 109: dcft3; 106/411 Test #105: dcft-grad3 ....................... Passed 25.56 sec; Start 110: dcft4; 107/411 Test #108: dcft2 ............................ Passed 4.23 sec; Start 111: dcft5; 108/411 Test #109: dcft3 ............................ Passed 9.99 sec; Start 112: dcft6; 109/411 Test #106: dcft-grad4 ....................... Passed 40.26 sec; Start 114: dcft8; 110/411 Test #100: ci-property ...................... Passed 66.32 sec; Start 115: dcft9; 111/411 Test #107: dcft1 ............................ Passed 37.39 sec; Start 116: ao-dfca,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:9320,Test,Test,9320,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability, #82: cc9 .............................. Passed 64.37 sec; Start 92: cepa-module; 89/412 Test #79: cc8a ............................. Passed 86.04 sec; Start 93: ci-multi; 90/412 Test #88: cepa1 ............................ Passed 14.93 sec; Start 94: cisd-h2o+-0; 91/412 Test #41: cc25 ............................. Passed 643.73 sec; Start 95: cisd-h2o+-1; 92/412 Test #89: cepa2 ............................ Passed 15.04 sec; Start 96: cisd-h2o+-2; 93/412 Test #94: cisd-h2o+-0 ...................... Passed 5.25 sec; Start 97: cisd-h2o-clpse; 94/412 Test #81: cc8c ............................. Passed 75.87 sec; Start 98: cisd-opt-fd; 95/412 Test #97: cisd-h2o-clpse ................... Passed 2.30 sec; Start 99: cisd-sp; 96/412 Test #95: cisd-h2o+-1 ...................... Passed 5.29 sec; Start 100: cisd-sp-2; 97/412 Test #85: cdomp2-2 ......................... Passed 44.64 sec; Start 101: ci-property; 98/412 Test #96: cisd-h2o+-2 ...................... Passed 6.02 sec; Start 102: cubeprop; 99/412 Test #90: cepa3 ............................ Passed 15.90 sec; Start 103: decontract; 100/412 Test #103: decontract ....................... Passed 1.91 sec; Start 104: dcft-grad1; 101/412 Test #100: cisd-sp-2 ........................ Passed 6.36 sec; Start 105: dcft-grad2; 102/412 Test #91: cepa1 ............................ Passed 17.25 sec; Start 106: dcft-grad3; 103/412 Test #99: cisd-sp .......................... Passed 12.02 sec; Start 107: dcft-grad4; 104/412 Test #83: cc9a ............................. Passed 77.94 sec; Start 108: dcft1; 105/412 Test #102: cubeprop ......................... Passed 11.79 sec; Start 109: dcft2; 106/412 Test #71: cc52 ............................. Passed 177.16 sec; Start 110: dcft3; 107/412 Test #106: dcft-grad3 ....................... Passed 17.10 sec; Start 111: dcft4; 108/412 Test #109: dcft2 ............................ Passed 10.64 sec; Start 112: dcft5; 109/412 Test #93: ci-multi ......................... Passed 38.21 sec; Start 113,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:9150,Test,Test,9150,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability, #82: cc9a ............................. Passed 101.46 sec; Start 261: omp3-5; 111/411 Test #249: omp2-4 ........................... Passed 143.33 sec; Start 312: rasci-ne; 112/411 Test #26: cc13b ............................ Passed 169.08 sec; Start 63: cc46; 113/411 Test #77: cc8 .............................. Passed 121.13 sec; Start 206: ghosts; 114/411 Test #312: rasci-ne ......................... Passed 36.29 sec; Start 256: omp2p5-grad2; 115/411 Test #260: omp3-4 ........................... Passed 172.67 sec; Start 237: nbody-he-cluster; 116/411 Test #206: ghosts ........................... Passed 37.33 sec; Start 64: cc47; 117/411 Test #34: cc19 ............................. Passed 105.53 sec; Start 151: dfomp2p5-2; 118/411 Test #73: cc55 ............................. Passed 109.40 sec; Start 55: cc39; 119/411 Test #63: cc46 ............................. Passed 85.23 sec; Start 323: sapt7; 120/411 Test #237: nbody-he-cluster ................. Passed 65.52 sec; Start 67: cc4a; 121/411 Test #323: sapt7 ............................ Passed 32.27 sec; Start 129: dfmp2-1; 122/411 Test #64: cc47 ............................. Passed 86.29 sec; Start 276: opt11; 123/411 Test #261: omp3-5 ........................... Passed 157.82 sec; Start 106: dcft-grad4; 124/411 Test #256: omp2p5-grad2 ..................... Passed 106.36 sec; Start 78: cc8a; 125/411 Test #55: cc39 ............................. Passed 61.61 sec; Start 273: opt7; 126/411 Test #129: dfmp2-1 .......................... Passed 33.05 sec; Start 80: cc8c; 127/411 Test #151: dfomp2p5-2 ....................... Passed 82.30 sec; Start 360: x2c1; 128/411 Test #67: cc4a ............................. Passed 45.28 sec; Start 337: scf6; 129/411 Test #106: dcft-grad4 ....................... Passed 39.15 sec; Start 1: adc1; 130/411 Test #276: opt11 ............................ Passed 56.48 sec; Start 56: cc4; 131/411 Test #78: cc8a ............................. Passed 47.51 sec; Start 342: soscf-dft; 132/411 Test #3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:11343,Test,Test,11343,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #82: cc9a ............................. Passed 46.42 sec; Start 125: dfccsd-grad1; 119/411 Test #32: cc17 ............................. Passed 33.17 sec; Start 276: opt11; 120/411 Test #113: dcft7 ............................ Passed 384.47 sec; Start 162: dft-grad-meta; 121/411 Test #84: cdomp2-2 ......................... Passed 50.72 sec; Start 237: nbody-he-cluster; 122/411 Test #297: pubchem1 ......................... Passed 59.76 sec; Start 170: dft1-alt; 123/411 Test #100: ci-property ...................... Passed 58.63 sec; Start 72: cc54; 124/411 Test #148: dfomp3-grad1 ..................... Passed 39.18 sec; Start 22: cc11; 125/411 Test #12: cbs-parser ....................... Passed 66.53 sec; Start 51: cc35; 126/411 Test #126: dfccsd-t-grad1 ................... Passed 49.75 sec; Start 62: cc45; 127/411 Test #21: cc10 ............................. Passed 61.98 sec; Start 348: sapt-compare; 128/411 Test #54: cc38 ............................. Passed 49.31 sec; Start 245: ocepa3; 129/411 Test #80: cc8c ............................. Passed 66.72 sec; Start 49: cc33; 130/411 Test #125: dfccsd-grad1 ..................... Passed 58.61 sec; Start 299: pywrap-alias; 131/411 Test #72: cc54 ............................. Passed 35.14 sec; Start 37: cc22; 132/411 Test #62: cc45 ............................. Passed 27.12 sec; Start 23: cc12; 133/411 Test #276: opt11 ............................ Passed 62.61 sec; Start 150: dfomp2p5-1; 134/411 Test #162: dft-grad-meta .................... Passed 49.92 sec; Start 92: ci-multi; 135/411 Test #51: cc35 ............................. Passed 44.56 sec; Start 273: opt7; 136/411 Test #170: dft1-alt ......................... Passed 53.15 sec; Start 152: dfomp2p5-grad1; 137/411 Test #22: cc11 ............................. Passed 47.56 sec; Start 219: mints-benchmark; 138/411 Test #237: nbody-he-cluster ................. Passed 58.00 sec; Start 2: adc2; 139/411 Test #25: cc13a ............................ Passed 484.89 sec; Start 131,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:12179,Test,Test,12179,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability, #85: cdomp2-2 ......................... Passed 50.40 sec; Start 24: cc12; 151/413 Test #127: dfccsd-grad1 ..................... Passed 50.32 sec; Start 93: ci-multi; 152/413 Test #111: dcft3 ............................ Passed 36.01 sec; Start 133: dfmp2-3; 153/413 Test #2: adc2 ............................. Passed 35.27 sec; Start 73: cc54; 154/413 Test #51: cc34 ............................. Passed 32.68 sec; Start 284: opt-irc-3; 155/413 Test #148: dfomp3-1 ......................... Passed 60.15 sec; Start 339: scf6; 156/413 Test #309: pywrap-db1 ....................... Passed 45.27 sec; Start 325: sapt7; 157/413 Test #198: fd-gradient ...................... Passed 44.67 sec; Start 266: opt-lindep-change; 158/413 Test #66: cc48 ............................. Passed 106.95 sec; Start 130: dfccsdat1; 159/413 Test #394: python-cc54 ...................... Passed 69.22 sec; Start 314: rasci-ne; 160/413 Test #54: cc37 ............................. Passed 47.11 sec; Start 16: cbs-xtpl-gradient; 161/413 Test #338: scf5 ............................. Passed 50.77 sec; Start 379: pywrap-align-chiral; 162/413 Test #24: cc12 ............................. Passed 43.61 sec; Start 279: opt12; 163/413 Test #284: opt-irc-3 ........................ Passed 31.84 sec; Start 131: dfmp2-1; 164/413 Test #379: pywrap-align-chiral .............. Passed 3.53 sec; Start 269: opt2; 165/413 Test #73: cc54 ............................. Passed 38.06 sec; Start 135: dfmp2-ecp; 166/413 Test #93: ci-multi ......................... Passed 42.41 sec; Start 53: cc36; 167/413 Test #130: dfccsdat1 ........................ Passed 16.81 sec; Start 376: dft-custom-gga; 168/413 Test #133: dfmp2-3 .......................... Passed 42.48 sec; Start 201: fnocc1; 169/413 Test #26: cc13a ............................ Passed 616.34 sec; Start 362: x2c1; 170/413 Test #266: opt-lindep-change ................ Passed 27.02 sec; Start 256: omp2p5-2; 171/413 Test #325: sapt7 ............................ Passed 36.00 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:15153,Test,Test,15153,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability, #88: cepa2 ............................ Passed 2.56 sec; Start 132: dfmp2-4; 250/411 Test #10: castup3 .......................... Passed 6.02 sec; Start 247: omp2-2; 251/411 Test #197: freq-isotope1 .................... Passed 9.03 sec; Start 137: dfmp2-grad4; 252/411 Test #291: psimrcc-fd-freq1 ................. Passed 11.03 sec; Start 150: dfomp2p5-1; 253/411 Test #365: cubeprop-esp ..................... Passed 8.78 sec; Start 270: opt4; 254/411 Test #180: fsapt-terms ...................... Passed 8.64 sec; Start 367: scf-hess1; 255/411 Test #137: dfmp2-grad4 ...................... Passed 4.16 sec; Start 310: rasci-c2-active; 256/411 Test #132: dfmp2-4 .......................... Passed 5.34 sec; Start 158: dft-ghost; 257/411 Test #266: opt1-fd .......................... Passed 6.12 sec; Start 108: dcft2; 258/411 Test #247: omp2-2 ........................... Passed 6.61 sec; Start 139: dfomp2-1; 259/411 Test #150: dfomp2p5-1 ....................... Passed 6.20 sec; Start 9: castup2; 260/411 Test #108: dcft2 ............................ Passed 2.06 sec; Start 127: dfccsdt1; 261/411 Test #310: rasci-c2-active .................. Passed 3.72 sec; Start 3: casscf-fzc-sp; 262/411 Test #139: dfomp2-1 ......................... Passed 2.10 sec; Start 141: dfomp2-3; 263/411 Test #127: dfccsdt1 ......................... Passed 2.35 sec; Start 154: dfrasscf-sp; 264/411 Test #367: scf-hess1 ........................ Passed 7.58 sec; Start 86: cepa0-grad2; 265/411 Test #270: opt4 ............................. Passed 7.69 sec; Start 370: scf-coverage; 266/411 Test #141: dfomp2-3 ......................... Passed 2.34 sec; Start 184: fci-dipole; 267/411 Test #3: casscf-fzc-sp .................... Passed 2.88 sec; Start 185: fci-h2o; 268/411 Test #9: castup2 .......................... Passed 4.25 sec; Start 117: dfcasscf-sa-sp; 269/411 Test #154: dfrasscf-sp ...................... Passed 2.93 sec; Start 329: scf-guess-read2; 270/411 Test #86: cepa0-grad2 ...................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:24188,Test,Test,24188,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability, #89: cepa3 ............................ Passed 9.74 sec; Start 94: cisd-h2o+-1; 91/411 Test #74: cc5a ............................. Passed 76.04 sec; Start 95: cisd-h2o+-2; 92/411 Test #90: cepa1 ............................ Passed 9.86 sec; Start 96: cisd-h2o-clpse; 93/411 Test #82: cc9a ............................. Passed 27.69 sec; Start 97: cisd-opt-fd; 94/411 Test #93: cisd-h2o+-0 ...................... Passed 6.79 sec; Start 98: cisd-sp; 95/411 Test #96: cisd-h2o-clpse ................... Passed 1.52 sec; Start 99: cisd-sp-2; 96/411 Test #94: cisd-h2o+-1 ...................... Passed 5.32 sec; Start 100: ci-property; 97/411 Test #95: cisd-h2o+-2 ...................... Passed 4.71 sec; Start 101: cubeprop; 98/411 Test #75: cc6 .............................. Passed 79.07 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 1.29 sec; Start 103: dcft-grad1; 100/411 Test #99: cisd-sp-2 ........................ Passed 5.99 sec; Start 104: dcft-grad2; 101/411 Test #98: cisd-sp .......................... Passed 9.90 sec; Start 105: dcft-grad3; 102/411 Test #70: cc52 ............................. Passed 106.20 sec; Start 106: dcft-grad4; 103/411 Test #101: cubeprop ......................... Passed 12.03 sec; Start 107: dcft1; 104/411 Test #92: ci-multi ......................... Passed 22.66 sec; Start 108: dcft2; 105/411 Test #108: dcft2 ............................ Passed 3.64 sec; Start 109: dcft3; 106/411 Test #105: dcft-grad3 ....................... Passed 13.24 sec; Start 110: dcft4; 107/411 Test #109: dcft3 ............................ Passed 12.31 sec; Start 111: dcft5; 108/411 Test #107: dcft1 ............................ Passed 24.76 sec; Start 112: dcft6; 109/411 Test #91: cepa-module ...................... Passed 55.38 sec; Start 114: dcft8; 110/411 Test #106: dcft-grad4 ....................... Passed 34.43 sec; Start 115: dcft9; 111/411 Test #104: dcft-grad2 ....................... Passed 44.51 sec; Start 116: ao-dfcassc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:9312,Test,Test,9312,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability, #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-fd; 215/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 110: dcft5; 223/401 Test #104: dcft-grad3 ....................... Passed 15.91 sec; Start 111: dcft6; 224/401 Test #12: cbs-parser ....................... Passed 41.34 sec; Start 113: dcft8; 225/401 Test #105: dcft-grad4 ....................... Passed 24.23 sec; Start 114: dcft9; 226/401 Test #19: cbs-xtpl-wrapper ................. Passed 52.98 sec; Start 129: dfmp2-2; 227/401 Test #129: dfmp2-2 .......................... Passed 2.49 sec; Start 130: dfmp2-3; 228/401 Test #130: dfmp2-3 .......................... Passed 16.36 sec; Start 131: dfmp2-4; 229/401 Test #90: cepa-module ...................... Passed 64.78 sec; Start 134: dfmp2-grad2; 230/401 Test #17: cbs-xtpl-opt ..................... Passed 72.86 sec; Start 135: dfmp2-grad3; 231/401 Test #135: dfmp2-grad3 ...................... Passed 5.13 sec; Start 136: dfmp2-grad4; 232/401 Test #96: cisd-opt-fd ...................... Passed 63.83 sec; Start 137: dfmp2-grad5; 233/401 Test #131: dfmp2-4 .......................... Passed 8.63 sec; Start 139,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:20846,Test,Test,20846,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability, #98: cisd-sp .......................... Passed 10.73 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 2.78 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 11.94 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 61.46 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 18.47 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 62.15 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 45.00 sec; Start 108: dcft2; 113/411 Test #108: dcft2 ............................ Passed 15.42 sec; Start 109: dcft3; 114/411 Test #91: cepa-module ...................... Passed 169.66 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 32.22 sec; Start 111: dcft5; 116/411 Test #97: cisd-opt-fd ...................... Passed 163.26 sec; Start 112: dcft6; 117/411 Test #107: dcft1 ............................ Passed 98.56 sec; Start 114: dcft8; 118/411 Test #104: dcft-grad2 ....................... Passed 155.98 sec; Start 115: dcft9; 119/411 Test #45: cc3 .............................. Passed 834.30 sec; Start 116: ao-dfcasscf-sp; 120/411 Test #116: ao-dfcasscf-sp ................... Passed 3.09 sec; Start 117: dfcasscf-sa-sp; 121/411 Test #117: dfcasscf-sa-sp ................... Passed 5.92 sec; Start 118: dfcasscf-fzc-sp; 122/411 Test #118: dfcasscf-fzc-sp .................. Passed 3.29 sec; Start 119: dfcasscf-sp; 123/411 Test #119: dfcasscf-sp ...................... Passed 8.24 sec; Start 120: dfccd1; 124/411 Test #120: dfccd1 ........................... Passed 5.43 sec; Start 121: dfccdl1; 125/411 Test #121: dfccdl1 .......................... Passed 5.84 sec; Start 122: dfccd-grad1; 126/411 Test #122: dfccd-grad1 ...................... Passed 23.87 sec; Start 123: dfccsd1; 127/411 Test #123: dfccsd1 .......................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:10646,Test,Test,10646,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability, #98: cisd-sp .......................... Passed 13.42 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 1.79 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 10.89 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 44.22 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 24.77 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 68.01 sec; Start 107: dcft1; 112/411 Test #106: dcft-grad4 ....................... Passed 40.83 sec; Start 108: dcft2; 113/411 Test #91: cepa-module ...................... Passed 131.84 sec; Start 109: dcft3; 114/411 Test #108: dcft2 ............................ Passed 20.56 sec; Start 110: dcft4; 115/411 Test #109: dcft3 ............................ Passed 30.81 sec; Start 111: dcft5; 116/411 Test #97: cisd-opt-fd ...................... Passed 146.32 sec; Start 112: dcft6; 117/411 Test #107: dcft1 ............................ Passed 86.75 sec; Start 114: dcft8; 118/411 Test #104: dcft-grad2 ....................... Passed 139.44 sec; Start 115: dcft9; 119/411 Test #45: cc3 .............................. Passed 891.62 sec; Start 116: ao-dfcasscf-sp; 120/411 Test #116: ao-dfcasscf-sp ................... Passed 3.30 sec; Start 117: dfcasscf-sa-sp; 121/411 Test #117: dfcasscf-sa-sp ................... Passed 5.50 sec; Start 118: dfcasscf-fzc-sp; 122/411 Test #118: dfcasscf-fzc-sp .................. Passed 2.82 sec; Start 119: dfcasscf-sp; 123/411 Test #119: dfcasscf-sp ...................... Passed 7.34 sec; Start 120: dfccd1; 124/411 Test #120: dfccd1 ........................... Passed 8.06 sec; Start 121: dfccdl1; 125/411 Test #121: dfccdl1 .......................... Passed 3.04 sec; Start 122: dfccd-grad1; 126/411 Test #122: dfccd-grad1 ...................... Passed 19.49 sec; Start 123: dfccsd1; 127/411 Test #123: dfccsd1 .......................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:10647,Test,Test,10647,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability, #9: castup2 .......................... Passed 8.52 sec; Start 89: cepa1; 210/401 Test #10: castup3 .......................... Passed 8.84 sec; Start 90: cepa-module; 211/401 Test #86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-fd; 215/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 110: dcft5; 223/401 Test #104: dcft-grad3 ....................... Passed 15.91 sec; Start 111: dcft6; 224/401 Test #12: cbs-parser ....................... Passed 41.34 sec; Start 113: dcft8; 225/401 Test #105: dcft-grad4 ....................... Passed 24.23 sec; Start 114: dcft9; 226/401 Test #19: cbs-xtpl-wrapper ................. Passed 52.98 sec; Start 129: dfmp2-2; 227/401 Test #129: dfmp2-2 .......................... Passed 2.49 sec; Start 130: dfmp2-3; 228/401 Test #130: dfmp2-3 .......................... Passed 16.36 sec; Start 131: dfmp2-4; 229/401 Test #90: cepa-module ...................... Passed 64.78 sec; Start 134: dfmp2-grad2; 230/401 Test #17: cbs-xtpl-opt ..................... Passed 72.86 sec; Start 135: dfmp2-grad,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:20580,Test,Test,20580,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability," 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot.................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:5242,TEST,TEST,5242,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['TEST'],['TEST']
Testability," 'findif_step_size': 0.0035493397840830904} kw={'ref_gradient': array([[0., 0., 0.],; [0., 0., 0.]])}; INFO psi4.driver.driver_findif:driver_findif.py:1184 hessian() using ref_gradient to assess stationary point.; INFO psi4.driver.driver_findif:driver_findif.py:263 ; ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ----------------------------------------------------------. INFO psi4.driver.driver_findif:driver_findif.py:272 Using finite-differences of gradients to determine vibrational frequencies and ; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 3.55e-03. INFO psi4.driver.driver_findif:driver_findif.py:291 Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1. INFO psi4.driver.driver_findif:driver_findif.py:342 Index of SALCs per irrep:; 1 : 0 ; 2 : ; 3 : ; 4 : ; 5 : ; 6 : ; 7 : ; 8 : ; Number of SALCs per irrep:; Irrep 1: 1; Irrep 2: 0; Irrep 3: 0; Irrep 4: 0; Irrep 5: 0; Irrep 6: 0; Irrep 7: 0; Irrep 8: 0. INFO psi4.driver.driver_findif:driver_findif.py:367 Number of geometries (including reference) is 5.; Number of displacements per irrep:; Irrep 1: 4; Irrep 2: 0; Irrep 3: 0; Irrep 4: 0; Irrep 5: 0; Irrep 6: 0; Irrep 7: 0; Irrep 8: 0; =================================================================================== short test summary info ===================================================================================; FAILED test_task_planner.py::test_findif_2_0[kw1-9] - assert 1.0000000000000001e-11 == 1e-11; FAILED test_task_planner.py::test_findif_2_0[kw0-5] - assert 1.0000000000000001e-11 == 1e-11; ===================================================== 2 failed, 5798 passed, 1200 skipped, 51 xfailed, 4 xpassed in 41333.75s (11:28:53) ======================================================. ```. clang-15; Python-3.9; FreeBSD 13.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014:7407,test,test,7407,https://psicode.org,https://github.com/psi4/psi4/issues/3014,3,"['assert', 'test']","['assert', 'test']"
Testability, (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24051,test,tests,24051,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability, (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _A_ tests/isapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-225 (0); > - _A_ tests/isapt2/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-226 (0); > - _A_ tests/isapt2/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-227 (0); > - _A_ tests/isapt2/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-228 (0); > - _A_ tests/isapt2/plot-ref/DA.png; > https://github.com/psi4/psi4/pull/470/files#diff-229 (0); > - _A_ tests/isapt2/plot-ref/DA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-230 (0); > - _A_ tests/isapt2/plot-ref/DB.png; > https://github.com/psi4/psi4/pull/470/files#diff-231 (0); > - _A_ tests/isap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:24153,test,tests,24153,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability, (123 tests); cas = 70.20 sec*proc (1 test); casscf = 306.92 sec*proc (11 tests); cbs = 2631.53 sec*proc (11 tests); cc = 15319.84 sec*proc (65 tests); cdomp2 = 143.48 sec*proc (2 tests); cepa = 226.30 sec*proc (7 tests); ci = 265.18 sec*proc (8 tests); cisd = 305.68 sec*proc (7 tests); cookbook = 499.71 sec*proc (1 test); cubeprop = 60.94 sec*proc (2 tests); dcft = 5483.73 sec*proc (13 tests); df = 3170.34 sec*proc (38 tests); dfccd = 23.41 sec*proc (1 test); dfccd-grad = 31.36 sec*proc (1 test); dfccdl = 23.35 sec*proc (1 test); dfccsd = 26.12 sec*proc (1 test); dfccsd-grad = 51.95 sec*proc (1 test); dfccsd-t-grad = 43.90 sec*proc (1 test); dfccsdat = 38.92 sec*proc (1 test); dfccsdl = 26.48 sec*proc (1 test); dfccsdt = 23.05 sec*proc (1 test); dfep2 = 48.44 sec*proc (2 tests); dfmp2 = 377.39 sec*proc (11 tests); dfomp2 = 1660.45 sec*proc (7 tests); dfomp2.5 = 249.73 sec*proc (4 tests); dfomp3 = 331.36 sec*proc (4 tests); dfscf = 157.81 sec*proc (1 test); dft = 1909.96 sec*proc (27 tests); docs = 45.29 sec*proc (2 tests); ecp = 88.68 sec*proc (2 tests); fci = 55.37 sec*proc (2 tests); fcidump = 23.91 sec*proc (1 test); findif = 1014.06 sec*proc (5 tests); fnocc = 213.01 sec*proc (4 tests); freq = 1356.97 sec*proc (6 tests); gradient = 2764.98 sec*proc (16 tests); json = 190.44 sec*proc (8 tests); longtests = 3661.11 sec*proc (5 tests); mcscf = 70.40 sec*proc (3 tests); minitests = 148.66 sec*proc (4 tests); mints = 394.57 sec*proc (14 tests); misc = 781.82 sec*proc (16 tests); mp2 = 790.20 sec*proc (13 tests); nbody = 109.77 sec*proc (2 tests); numpy = 22.55 sec*proc (1 test); ocepa = 1236.65 sec*proc (6 tests); omp = 1072.07 sec*proc (18 tests); opt = 1846.61 sec*proc (21 tests); plug = 163.15 sec*proc (7 tests); prop = 25.39 sec*proc (1 test); properties = 335.10 sec*proc (10 tests); psi = 53863.02 sec*proc (411 tests); psi4numpy = 147.20 sec*proc (6 tests); psimrcc = 297.65 sec*proc (8 tests); python = 1516.55 sec*proc (10 tests); pywrap = 5301.29 sec*proc (12 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:39814,test,tests,39814,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['test'],['tests']
Testability, (2 tests); autotest = 1800.93 sec*proc (26 tests); cart = 13506.06 sec*proc (123 tests); cas = 57.32 sec*proc (1 test); casscf = 134.01 sec*proc (11 tests); cbs = 1989.43 sec*proc (11 tests); cc = 6412.95 sec*proc (65 tests); cdomp2 = 56.88 sec*proc (2 tests); cepa = 174.00 sec*proc (7 tests); ci = 111.69 sec*proc (8 tests); cisd = 167.25 sec*proc (7 tests); cookbook = 106.36 sec*proc (1 test); cubeprop = 20.00 sec*proc (2 tests); dcft = 2235.18 sec*proc (13 tests); df = 1736.05 sec*proc (38 tests); dfccd = 2.49 sec*proc (1 test); dfccd-grad = 25.96 sec*proc (1 test); dfccdl = 6.36 sec*proc (1 test); dfccsd = 10.68 sec*proc (1 test); dfccsd-grad = 67.76 sec*proc (1 test); dfccsd-t-grad = 53.28 sec*proc (1 test); dfccsdat = 26.53 sec*proc (1 test); dfccsdl = 8.79 sec*proc (1 test); dfccsdt = 9.67 sec*proc (1 test); dfep2 = 7.44 sec*proc (2 tests); dfmp2 = 168.71 sec*proc (11 tests); dfomp2 = 582.73 sec*proc (7 tests); dfomp2.5 = 251.39 sec*proc (4 tests); dfomp3 = 254.37 sec*proc (4 tests); dfscf = 147.69 sec*proc (1 test); dft = 1501.94 sec*proc (27 tests); docs = 1.41 sec*proc (2 tests); ecp = 74.38 sec*proc (2 tests); fci = 14.93 sec*proc (2 tests); fcidump = 5.35 sec*proc (1 test); findif = 1006.54 sec*proc (5 tests); fnocc = 137.57 sec*proc (4 tests); freq = 884.49 sec*proc (6 tests); gradient = 951.43 sec*proc (16 tests); json = 15.47 sec*proc (8 tests); longtests = 3678.48 sec*proc (5 tests); mcscf = 4.89 sec*proc (3 tests); minitests = 73.36 sec*proc (4 tests); mints = 89.16 sec*proc (14 tests); misc = 527.43 sec*proc (16 tests); mp2 = 614.69 sec*proc (13 tests); nbody = 77.21 sec*proc (2 tests); numpy = 0.83 sec*proc (1 test); ocepa = 531.23 sec*proc (6 tests); omp = 780.44 sec*proc (18 tests); opt = 1525.45 sec*proc (21 tests); plug = 11.19 sec*proc (7 tests); prop = 2.98 sec*proc (1 test); properties = 153.64 sec*proc (10 tests); psi = 29697.39 sec*proc (411 tests); psi4numpy = 14.90 sec*proc (6 tests); psimrcc = 129.77 sec*proc (8 tests); python = 967.75 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:39560,test,tests,39560,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['test'],['tests']
Testability, (2 tests); autotest = 2463.35 sec*proc (26 tests); cart = 23370.60 sec*proc (123 tests); cas = 61.99 sec*proc (1 test); casscf = 167.92 sec*proc (11 tests); cbs = 3247.75 sec*proc (11 tests); cc = 18280.00 sec*proc (65 tests); cdomp2 = 69.54 sec*proc (2 tests); cepa = 132.16 sec*proc (7 tests); ci = 122.62 sec*proc (8 tests); cisd = 205.34 sec*proc (7 tests); cookbook = 632.65 sec*proc (1 test); cubeprop = 21.15 sec*proc (2 tests); dcft = 6649.74 sec*proc (13 tests); df = 2876.21 sec*proc (38 tests); dfccd = 2.00 sec*proc (1 test); dfccd-grad = 6.25 sec*proc (1 test); dfccdl = 6.15 sec*proc (1 test); dfccsd = 6.72 sec*proc (1 test); dfccsd-grad = 45.67 sec*proc (1 test); dfccsd-t-grad = 29.16 sec*proc (1 test); dfccsdat = 40.97 sec*proc (1 test); dfccsdl = 5.99 sec*proc (1 test); dfccsdt = 7.62 sec*proc (1 test); dfep2 = 6.92 sec*proc (2 tests); dfmp2 = 184.86 sec*proc (11 tests); dfomp2 = 1845.65 sec*proc (7 tests); dfomp2.5 = 218.40 sec*proc (4 tests); dfomp3 = 224.45 sec*proc (4 tests); dfscf = 150.09 sec*proc (1 test); dft = 1517.81 sec*proc (27 tests); docs = 1.47 sec*proc (2 tests); ecp = 70.74 sec*proc (2 tests); fci = 14.92 sec*proc (2 tests); fcidump = 7.02 sec*proc (1 test); findif = 1092.42 sec*proc (5 tests); fnocc = 195.27 sec*proc (4 tests); freq = 1420.43 sec*proc (6 tests); gradient = 3114.31 sec*proc (16 tests); json = 16.25 sec*proc (8 tests); longtests = 3847.30 sec*proc (5 tests); mcscf = 5.49 sec*proc (3 tests); minitests = 76.55 sec*proc (4 tests); mints = 90.63 sec*proc (14 tests); misc = 557.92 sec*proc (16 tests); mp2 = 589.40 sec*proc (13 tests); nbody = 98.73 sec*proc (2 tests); numpy = 1.01 sec*proc (1 test); ocepa = 1227.49 sec*proc (6 tests); omp = 920.12 sec*proc (18 tests); opt = 1786.59 sec*proc (21 tests); plug = 15.41 sec*proc (7 tests); prop = 2.27 sec*proc (1 test); properties = 149.95 sec*proc (10 tests); psi = 55691.99 sec*proc (411 tests); psi4numpy = 19.92 sec*proc (6 tests); psimrcc = 141.79 sec*proc (8 tests); python = 1486,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:39584,test,tests,39584,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['test'],['tests']
Testability, (2 tests); dcft = 2278.61 sec*proc (13 tests); df = 1624.44 sec*proc (38 tests); dfccd = 16.01 sec*proc (1 test); dfccd-grad = 27.12 sec*proc (1 test); dfccdl = 16.03 sec*proc (1 test); dfccsd = 16.85 sec*proc (1 test); dfccsd-grad = 16.86 sec*proc (1 test); dfccsd-t-grad = 21.71 sec*proc (1 test); dfccsdat = 46.01 sec*proc (1 test); dfccsdl = 16.94 sec*proc (1 test); dfccsdt = 17.32 sec*proc (1 test); dfep2 = 34.66 sec*proc (2 tests); dfmp2 = 299.94 sec*proc (11 tests); dfomp2 = 703.06 sec*proc (7 tests); dfomp2.5 = 80.33 sec*proc (4 tests); dfomp3 = 113.97 sec*proc (4 tests); dfscf = 159.76 sec*proc (1 test); dft = 1825.64 sec*proc (27 tests); docs = 30.71 sec*proc (2 tests); ecp = 76.81 sec*proc (2 tests); fci = 39.98 sec*proc (2 tests); fcidump = 17.80 sec*proc (1 test); findif = 893.74 sec*proc (5 tests); fnocc = 137.05 sec*proc (4 tests); freq = 902.68 sec*proc (6 tests); gradient = 1170.66 sec*proc (16 tests); json = 128.43 sec*proc (8 tests); longtests = 3551.47 sec*proc (5 tests); mcscf = 48.65 sec*proc (3 tests); minitests = 112.01 sec*proc (4 tests); mints = 307.38 sec*proc (14 tests); misc = 677.17 sec*proc (16 tests); mp2 = 726.25 sec*proc (13 tests); nbody = 54.91 sec*proc (2 tests); numpy = 15.57 sec*proc (1 test); ocepa = 473.52 sec*proc (6 tests); omp = 485.33 sec*proc (18 tests); opt = 1642.53 sec*proc (21 tests); plug = 116.88 sec*proc (7 tests); prop = 16.75 sec*proc (1 test); properties = 293.90 sec*proc (10 tests); psi = 30283.74 sec*proc (411 tests); psi4numpy = 102.29 sec*proc (6 tests); psimrcc = 220.63 sec*proc (8 tests); python = 950.22 sec*proc (10 tests); pywrap = 2269.26 sec*proc (12 tests); quicktests = 4155.39 sec*proc (140 tests); rasci = 88.83 sec*proc (3 tests); sapt = 6411.10 sec*proc (21 tests); scf = 2556.35 sec*proc (52 tests); shorttests = 122.29 sec*proc (4 tests); smoketests = 257.38 sec*proc (11 tests); stability = 34.35 sec*proc (2 tests); tutorial = 241.68 sec*proc (6 tests); x2c = 47.87 sec*proc (3 tests). Total Test ti,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:40114,test,tests,40114,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['test'],['tests']
Testability, (26 tests); cart = 16551.08 sec*proc (123 tests); cas = 28.56 sec*proc (1 test); casscf = 215.89 sec*proc (11 tests); cbs = 5376.02 sec*proc (12 tests); cc = 17865.62 sec*proc (65 tests); cdomp2 = 102.86 sec*proc (2 tests); cepa = 362.38 sec*proc (7 tests); ci = 100.54 sec*proc (8 tests); cisd = 147.55 sec*proc (7 tests); cookbook = 443.85 sec*proc (1 test); cubeprop = 24.72 sec*proc (3 tests); dcft = 5201.52 sec*proc (13 tests); df = 3130.41 sec*proc (38 tests); dfccd = 7.27 sec*proc (1 test); dfccd-grad = 29.83 sec*proc (1 test); dfccdl = 4.85 sec*proc (1 test); dfccsd = 16.21 sec*proc (1 test); dfccsd-grad = 94.95 sec*proc (1 test); dfccsd-t-grad = 103.60 sec*proc (1 test); dfccsdat = 43.70 sec*proc (1 test); dfccsdl = 19.45 sec*proc (1 test); dfccsdt = 14.17 sec*proc (1 test); dfep2 = 6.02 sec*proc (2 tests); dfmp2 = 184.52 sec*proc (11 tests); dfomp2 = 1710.82 sec*proc (7 tests); dfomp2.5 = 342.31 sec*proc (4 tests); dfomp3 = 402.50 sec*proc (4 tests); dfscf = 31.82 sec*proc (1 test); dft = 751.03 sec*proc (27 tests); docs = 2.03 sec*proc (2 tests); ecp = 66.38 sec*proc (2 tests); fci = 12.84 sec*proc (2 tests); fcidump = 7.22 sec*proc (1 test); findif = 1626.84 sec*proc (5 tests); fnocc = 231.32 sec*proc (4 tests); freq = 1688.13 sec*proc (7 tests); gradient = 3618.28 sec*proc (21 tests); hessian = 405.24 sec*proc (1 test); json = 20.27 sec*proc (8 tests); longtests = 1495.12 sec*proc (5 tests); mcscf = 10.16 sec*proc (3 tests); minitests = 37.91 sec*proc (3 tests); mints = 45.42 sec*proc (14 tests); misc = 411.66 sec*proc (16 tests); mp2 = 346.75 sec*proc (13 tests); nbody = 982.55 sec*proc (8 tests); numpy = 1.09 sec*proc (1 test); ocepa = 1107.57 sec*proc (6 tests); omp = 1366.11 sec*proc (18 tests); opt = 1412.96 sec*proc (23 tests); prop = 4.22 sec*proc (1 test); properties = 124.70 sec*proc (10 tests); psi = 48757.61 sec*proc (414 tests); psi4numpy = 23.92 sec*proc (6 tests); psimrcc = 104.33 sec*proc (8 tests); python = 1302.79 sec*proc (10 tests); pyw,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:39969,test,test,39969,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['test'],['test']
Testability," (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 110.67 sec*proc (5 tests); dftd3 = 50.87 sec*proc (1 test); dftd4 = 138.41 sec*proc (2 tests); direct-scf = 4.26 sec*proc (1 test); eom = 26.13 sec*proc (2 tests); extern = 145.89 sec*proc (6 tests); fcidump = 3.94 sec*proc (1 test); findif = 217.30 sec*proc (11 tests); fnocc = 214.81 sec*proc (4 tests); freq = 119.90 sec*proc (9 tests); fsapt = 680.95 sec*proc (7 tests); gradient = 7.40 sec*proc (2 tests); json = 6.72 sec*proc (2 tests); mcscf = 2.04 sec*proc (1 test); minitests = 10.99 sec*proc (2 tests); mints = 14.50 sec*proc (6 tests); misc = 48.60 sec*proc (8 tests); mp2 = 11.54 sec*proc (3 tests); nbody = 140.71 sec*proc (2 tests); noc1 = 1576.77 sec*proc (45 tests); numpy = 1.88 sec*proc (1 test); olccd = 11.77 sec*proc (2 tests); omp = 19.01 sec*proc (4 tests); opt = 18.56 sec*proc (3 tests); properties = 234.60 sec*proc (11 tests); psi = 7147.73 sec*proc (184 tests); psi4numpy = 11.43 sec*proc (4 tests); psimrcc = 19.16 sec*proc (5 tests); python = 164.19 sec*proc (10 tests); pywrap = 102.12 sec*proc (5 tests); quicktests = 7213.94 sec*proc (185 tests); sapt = 2255.37 sec*proc (14 tests); scf = 2018.25 sec*proc (36 tests); smoketests = 1345.56 sec*proc (16 tests); stability = 14.22 sec*proc (3 tests); tdscf = 352.79 sec*proc (2 tests); tutorial = 24.08 sec*proc (4 tests); uhf = 3.31 sec*proc (1 test); x2c = 24.82 sec*proc (4 tests). Total Test time (real) = 7214.27 sec. The following tests FAILED:; 192 - dft-vv10 (Failed); 197 - dft-dens-cut (Failed); 210 - fsapt-terms (Failed); 213 - fsapt-ext-abc (Failed); 214 - fsapt-ext-abc2 (Failed); 215 - fsapt-ext-abc-au (Failed); 452 - dft-smoke (Failed); 525 - fsaptd-terms (Failed); 527 - dftd4-r2scan (Failed); Errors while running CTest; Output from these tests are in: /gpfs/alpine2/scratch/jslj23/chm205/psi4/build/Testing/Temporary/LastTest.log; Use ""--rerun-failed --output-on-failure"" to re-run the failed cases verbosely.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:19241,test,tests,19241,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,18,"['Test', 'log', 'test']","['Test', 'Testing', 'log', 'test', 'tests']"
Testability, (8 tests); cisd = 305.68 sec*proc (7 tests); cookbook = 499.71 sec*proc (1 test); cubeprop = 60.94 sec*proc (2 tests); dcft = 5483.73 sec*proc (13 tests); df = 3170.34 sec*proc (38 tests); dfccd = 23.41 sec*proc (1 test); dfccd-grad = 31.36 sec*proc (1 test); dfccdl = 23.35 sec*proc (1 test); dfccsd = 26.12 sec*proc (1 test); dfccsd-grad = 51.95 sec*proc (1 test); dfccsd-t-grad = 43.90 sec*proc (1 test); dfccsdat = 38.92 sec*proc (1 test); dfccsdl = 26.48 sec*proc (1 test); dfccsdt = 23.05 sec*proc (1 test); dfep2 = 48.44 sec*proc (2 tests); dfmp2 = 377.39 sec*proc (11 tests); dfomp2 = 1660.45 sec*proc (7 tests); dfomp2.5 = 249.73 sec*proc (4 tests); dfomp3 = 331.36 sec*proc (4 tests); dfscf = 157.81 sec*proc (1 test); dft = 1909.96 sec*proc (27 tests); docs = 45.29 sec*proc (2 tests); ecp = 88.68 sec*proc (2 tests); fci = 55.37 sec*proc (2 tests); fcidump = 23.91 sec*proc (1 test); findif = 1014.06 sec*proc (5 tests); fnocc = 213.01 sec*proc (4 tests); freq = 1356.97 sec*proc (6 tests); gradient = 2764.98 sec*proc (16 tests); json = 190.44 sec*proc (8 tests); longtests = 3661.11 sec*proc (5 tests); mcscf = 70.40 sec*proc (3 tests); minitests = 148.66 sec*proc (4 tests); mints = 394.57 sec*proc (14 tests); misc = 781.82 sec*proc (16 tests); mp2 = 790.20 sec*proc (13 tests); nbody = 109.77 sec*proc (2 tests); numpy = 22.55 sec*proc (1 test); ocepa = 1236.65 sec*proc (6 tests); omp = 1072.07 sec*proc (18 tests); opt = 1846.61 sec*proc (21 tests); plug = 163.15 sec*proc (7 tests); prop = 25.39 sec*proc (1 test); properties = 335.10 sec*proc (10 tests); psi = 53863.02 sec*proc (411 tests); psi4numpy = 147.20 sec*proc (6 tests); psimrcc = 297.65 sec*proc (8 tests); python = 1516.55 sec*proc (10 tests); pywrap = 5301.29 sec*proc (12 tests); quicktests = 7318.30 sec*proc (140 tests); rasci = 106.24 sec*proc (3 tests); sapt = 6390.12 sec*proc (21 tests); scf = 2824.03 sec*proc (52 tests); shorttests = 155.05 sec*proc (4 tests); smoketests = 423.23 sec*proc (11 tests); stabi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:40053,test,tests,40053,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['test'],['tests']
Testability," (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4741,test,tests,4741,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817,1,['test'],['tests']
Testability, (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2321,test,tests,2321,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['test'],['tests']
Testability," - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:3232,test,tests,3232,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['test'],['tests']
Testability, - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14881,test,tests,14881,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability, - _A_ tests/fsapt1/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-142 (0); > - _A_ tests/fsapt1/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-143 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-144 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-145 (0); > - _A_ tests/fsapt1/fsapt-ref/Total.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-146 (0); > - _A_ tests/fsapt1/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-147 (0); > - _A_ tests/fsapt1/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-148 (0); > - _A_ tests/fsapt1/fsapt-ref/fA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-149 (0); > - _A_ tests/fsapt1/fsapt-ref/fB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-150 (0); > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:17212,test,tests,17212,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability, -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not de,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1541,test,tests,1541,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['test'],['tests']
Testability," -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: /usr/loc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4282,Test,Test,4282,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Test'],['Test']
Testability, --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 297.78 sec; Start 162: dft-grad-lr3; 2/411 Test #182: isapt1 ........................... Passed 469.93 sec; Start 227: mp2-def2; 3/411 Test #18: cbs-xtpl-func .................... Passed 485.98 sec; Start 25: cc13a; 4/411 Test #193: fd-freq-energy-large ............. Passed 551.44 sec; Start 113: dcft7; 5/411 Test #181: fsapt-allterms ................... Passed 652.63 sec; Start 205: frac-traverse; 6/411 Test #394: python-vibanalysis ............... Passed 680.49 sec; Start 316: sapt2; 7/411 Test #25: cc13a ............................ Passed 254.82 sec; Start 318: sapt4; 8/411 Test #162: dft-grad-lr3 ..................... Passed 489.85 sec; Start 325: scf-bz2; 9/411 Test #113: dcft7 ............................ Passed 278.82 sec; Start 373: dft-custom-mgga; 10/411 Test #278: opt13 ............................ Passed 847.95 sec; Start 320: sapt6; 11/411 Test #205: frac-traverse .................... Passed 221.61 sec; Start 155: dfscf-bz2; 12/411 Test #227: mp2-def2 ......................... Passed 440.79 sec; Start 183: isapt2; 13/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 347: sapt-dft2; 14/411 Test #320: sapt6 ............................ Passed 169.47 sec; Start 112: dcft6; 15/411 Test #155: dfscf-bz2 ........................ Passed 146.26 sec; Start 97: cisd-opt-fd; 16/411 Test #373: dft-custom-mgga .................. Passed 193.16 sec; Start 281: opt-irc-2; 17/411 Test #316: sapt2 ............................ Passed 360.69 sec; Start 300: pywrap-all; 18/411 Test #347: sapt-dft2 ........................ Passed 128.97 sec; Start 161: dft-grad-lr2; 19/411 Test #183: isapt2 ........................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:1069,Test,Test,1069,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability," --test`:; (p4env) [henrique@dhcppc3 ~] $ psi4 --test; ================================================================ test session starts =================================================================; platform linux -- Python 3.6.6, pytest-3.8.0, py-1.6.0, pluggy-0.7.1 -- /home/henrique/bin/anaconda3/envs/p4env/bin/python; cachedir: .pytest_cache; rootdir: /home/henrique, inifile:; collected 22 items . bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 SKIPPED [ 18%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED [ 22%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:1015,test,tests,1015,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['test'],['tests']
Testability," -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot................................................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:5282,TEST,TEST,5282,https://psicode.org,https://github.com/psi4/psi4/issues/2330,2,['TEST'],['TEST']
Testability," -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; \ Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 6",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1025,Test,Test,1025,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability, -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd0] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd1] XFAIL [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf cd fc: dd -grd0] PASSED [ 91%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd1] XFAIL [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf cd fc: dd -grd0] PASSED [ 92%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd ae: dd -grd1] XFAIL [ 93%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20826,test,tests,20826,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability," -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 37: cc21; Start 46: cc3; Start 41: cc25; Start 39: cc23; Start 146: dfomp2-grad3; Start 77: cc7; Start 43: cc27; Start 306: pywrap-checkrun-rohf; Start 241: ocepa-freq1; Start 395: python-vibanalysis; Start 40: cc24; 1/412 Test #241: ocepa-freq1 ...................... Passed 939.44 sec; Start 42: cc26; 2/412 Test #40: cc24 ............................. Passed 990.28 sec; Start 115: dcft8; 3/412 Test #77: cc7 .............................. Passed 1076.46 sec; Start 36: cc2; 4/412 Test #43: cc27 ............................. Passed 1079.37 sec; Start 25: cc13; 5/412 Test #306: pywrap-checkrun-rohf ............. Passed 1087.82 sec; Start 156: dft-grad-lr3; 6/412 Test #39: cc23 ............................. Passed 1252.44 sec; Start 228: mp2-def2; 7/412 Test #37: cc21 ............................. Passed 1273.54 sec; Start 30: cc14; 8/412 Test #41: cc25 ............................. Passed 1338.20 sec; Start 179: fsapt1; 9/412 Test #395: python-vibanalysis ............... Passed 1362.17 sec; Start 112: dcft5; 10/412 Test #156: dft-grad-lr3 ..................... Passed 428.34 sec; Start 29: cc13d; 11/412 Test #307: pywrap-checkrun-uhf .............. Passed 1529.35 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #305: pywrap-checkrun-rhf .............. Passed 1560.06 sec; Start 360: tu6-cp-ne2; 13/412 Test #146: dfomp2-grad3 ..................... Passed 1580.99 sec; Start 183: isapt1; 14/412 Test #46: cc3 .............................. Passed 1614.45 sec; Start 387: cookbook-rohf-orb-rot; 15/412 Test #301: pywrap-all ....................... Passed 1620.63 sec; Start 45: cc29; 16/412 Test #104: dcft-grad1 ....................... Passed 1653.03 sec; Start 380: cc-module; 17/412 Test #228: mp2-def2 ......................... Passed 409.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:1022,Test,Test,1022,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability," -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json <- miniconda3/lib/python3.6/site-pa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2635,test,tests,2635,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['test'],['tests']
